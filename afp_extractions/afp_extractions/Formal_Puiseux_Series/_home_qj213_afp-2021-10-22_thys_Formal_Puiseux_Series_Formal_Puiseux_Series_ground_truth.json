{"file_name": "/home/qj213/afp-2021-10-22/thys/Formal_Puiseux_Series/Formal_Puiseux_Series.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formal_Puiseux_Series", "problem_names": ["lemma div_dvd_self:\n  fixes a b :: \"'a :: {semidom_divide}\"\n  shows \"b dvd a \\<Longrightarrow> a div b dvd a\"", "lemma quotient_of_int [simp]: \"quotient_of (of_int n) = (n, 1)\"", "lemma of_int_div_of_int_in_Ints_iff:\n  \"(of_int n / of_int m :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> m = 0 \\<or> m dvd n\"", "lemma rat_eq_quotientD:\n  assumes \"r = rat_of_int a / rat_of_int b\" \"b \\<noteq> 0\"\n  shows   \"fst (quotient_of r) dvd a\" \"snd (quotient_of r) dvd b\"", "lemma quotient_of_denom_add_dvd:\n  \"snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)\"", "lemma quotient_of_denom_diff_dvd:\n  \"snd (quotient_of (x - y)) dvd snd (quotient_of x) * snd (quotient_of y)\"", "lemma supp_0 [simp]: \"supp (\\<lambda>_. 0) = {}\"\n  and supp_const: \"supp (\\<lambda>_. c) = (if c = 0 then {} else UNIV)\"\n  and supp_singleton [simp]: \"c \\<noteq> 0 \\<Longrightarrow> supp (\\<lambda>x. if x = d then c else 0) = {d}\"", "lemma supp_uminus [simp]: \"supp (\\<lambda>x. -f x :: 'a :: group_add) = supp f\"", "lemma fpxs_ext: \"(\\<And>r. fpxs_nth f r = fpxs_nth g r) \\<Longrightarrow> f = g\"", "lemma fpxs_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>r. fpxs_nth f r = fpxs_nth g r)\"", "lemma fpxs_supp_altdef: \"fpxs_supp f = {x. fpxs_nth f x \\<noteq> 0}\"", "lemma fpxs_root_order_pos [simp]: \"fpxs_root_order f > 0\"", "lemma fpxs_root_order_nonzero [simp]: \"fpxs_root_order f \\<noteq> 0\"", "lemma fls_nth_of_fpxs:\n  \"fls_nth (fls_of_fpxs f) n = fpxs_nth f (of_int n / of_nat (fpxs_root_order f))\"", "lemma fls_of_fpxs_0 [simp]: \"fls_of_fpxs 0 = 0\"", "lemma fpxs_nth_0 [simp]: \"fpxs_nth 0 r = 0\"", "lemma fpxs_nth_1: \"fpxs_nth 1 r = (if r = 0 then 1 else 0)\"", "lemma fpxs_nth_1': \"fpxs_nth 1 0 = 1\" \"r \\<noteq> 0 \\<Longrightarrow> fpxs_nth 1 r = 0\"", "lemma fpxs_nth_add [simp]: \"fpxs_nth (f + g) r = fpxs_nth f r + fpxs_nth g r\"", "lemma fpxs_nth_uminus [simp]: \"fpxs_nth (-f) r = -fpxs_nth f r\"", "lemma fpxs_nth_minus [simp]: \"fpxs_nth (f - g) r = fpxs_nth f r - fpxs_nth g r\"", "lemma fpxs_of_fls_eq_iff [simp]: \"fpxs_of_fls f = fpxs_of_fls g \\<longleftrightarrow> f = g\"", "lemma fpxs_of_fls_0 [simp]: \"fpxs_of_fls 0 = 0\"", "lemma fpxs_of_fls_1 [simp]: \"fpxs_of_fls 1 = 1\"", "lemma fpxs_of_fls_add [simp]: \"fpxs_of_fls (f + g) = fpxs_of_fls f + fpxs_of_fls g\"", "lemma fps_to_fls_sum [simp]: \"fps_to_fls (sum f A) = (\\<Sum>x\\<in>A. fps_to_fls (f x))\"", "lemma fpxs_of_fls_sum [simp]: \"fpxs_of_fls (sum f A) = (\\<Sum>x\\<in>A. fpxs_of_fls (f x))\"", "lemma fpxs_nth_of_fls:\n  \"fpxs_nth (fpxs_of_fls f) r = (if r \\<in> \\<int> then fls_nth f \\<lfloor>r\\<rfloor> else 0)\"", "lemma fpxs_of_fls_eq_0_iff [simp]: \"fpxs_of_fls f = 0 \\<longleftrightarrow> f = 0\"", "lemma fpxs_of_fls_eq_1_iff [simp]: \"fpxs_of_fls f = 1 \\<longleftrightarrow> f = 1\"", "lemma fpxs_root_order_of_fls [simp]: \"fpxs_root_order (fpxs_of_fls f) = 1\"", "lemma fpxs_as_fls:\n  \"fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / of_nat (fpxs_root_order f)) = f\"", "lemma fpxs_compose_power_0 [simp]: \"fpxs_compose_power 0 r = 0\"", "lemma fpxs_compose_power_1 [simp]: \"r > 0 \\<Longrightarrow> fpxs_compose_power 1 r = 1\"", "lemma fls_of_fpxs_eq_0_iff [simp]: \"fls_of_fpxs x = 0 \\<longleftrightarrow> x = 0\"", "lemma fpxs_of_fls_compose_power [simp]:\n  \"fpxs_of_fls (fls_compose_power f d) = fpxs_compose_power (fpxs_of_fls f) (of_nat d)\"", "lemma fpxs_compose_power_add [simp]:\n  \"fpxs_compose_power (f + g) r = fpxs_compose_power f r + fpxs_compose_power g r\"", "lemma fpxs_compose_power_distrib:\n  \"r1 > 0 \\<or> r2 > 0 \\<Longrightarrow> \n     fpxs_compose_power (fpxs_compose_power f r1) r2 = fpxs_compose_power f (r1 * r2)\"", "lemma fpxs_compose_power_divide_right:\n  \"r1 > 0 \\<Longrightarrow> r2 > 0 \\<Longrightarrow> \n     fpxs_compose_power f (r1 / r2) = fpxs_compose_power (fpxs_compose_power f r1) (inverse r2)\"", "lemma fpxs_compose_power_1_right [simp]: \"fpxs_compose_power f 1 = f\"", "lemma fpxs_compose_power_eq_iff [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_compose_power f r = fpxs_compose_power g r \\<longleftrightarrow> f = g\"", "lemma fpxs_compose_power_eq_1_iff [simp]:\n  assumes \"l > 0\"\n  shows   \"fpxs_compose_power p l = 1 \\<longleftrightarrow> p = 1\"", "lemma fpxs_compose_power_eq_0_iff [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_compose_power f r = 0 \\<longleftrightarrow> f = 0\"", "lemma fls_of_fpxs_of_fls [simp]: \"fls_of_fpxs (fpxs_of_fls f) = f\"", "lemma fpxs_as_fls':\n  assumes \"fpxs_root_order f dvd d\" \"d > 0\"\n  obtains f' where \"f = fpxs_compose_power (fpxs_of_fls f') (1 / of_nat d)\"", "lemma fpxs_nth_mult:\n  \"fpxs_nth (f * g) r =\n     (\\<Sum>(y,z) | y \\<in> fpxs_supp f \\<and> z \\<in> fpxs_supp g \\<and> r = y + z. fpxs_nth f y * fpxs_nth g z)\"", "lemma fpxs_compose_power_mult [simp]:\n  \"fpxs_compose_power (f * g) r = fpxs_compose_power f r * fpxs_compose_power g r\"", "lemma fpxs_supp_of_fls: \"fpxs_supp (fpxs_of_fls f) = of_int ` supp (fls_nth f)\"", "lemma fpxs_of_fls_mult [simp]: \"fpxs_of_fls (f * g) = fpxs_of_fls f * fpxs_of_fls g\"", "lemma fpxs_of_fls_power [simp]: \"fpxs_of_fls (f ^ n) = fpxs_of_fls f ^ n\"", "lemma fpxs_compose_power_power [simp]:\n  \"r > 0 \\<Longrightarrow> fpxs_compose_power (f ^ n) r = fpxs_compose_power f r ^ n\"", "lemma fpxs_const_0 [simp]: \"fpxs_const 0 = 0\"", "lemma fpxs_const_1 [simp]: \"fpxs_const 1 = 1\"", "lemma fpxs_of_fls_const [simp]: \"fpxs_of_fls (fls_const c) = fpxs_const c\"", "lemma fls_of_fpxs_const [simp]: \"fls_of_fpxs (fpxs_const c) = fls_const c\"", "lemma fls_of_fpxs_1 [simp]: \"fls_of_fpxs 1 = 1\"", "lemma fpxs_const_altdef: \"fpxs_const x = fpxs_of_fls (fls_const x)\"", "lemma fpxs_const_add [simp]: \"fpxs_const (x + y) = fpxs_const x + fpxs_const y\"", "lemma fpxs_const_mult [simp]:\n  fixes x y :: \"'a::{comm_semiring_1}\"\n  shows \"fpxs_const (x * y) = fpxs_const x * fpxs_const y\"", "lemma fpxs_const_eq_iff [simp]:\n  \"fpxs_const x = fpxs_const y \\<longleftrightarrow> x = y\"", "lemma of_nat_fpxs_eq: \"of_nat n = fpxs_const (of_nat n)\"", "lemma fpxs_const_uminus [simp]: \"fpxs_const (-x) = -fpxs_const x\"", "lemma fpxs_const_diff [simp]: \"fpxs_const (x - y) = fpxs_const x - fpxs_const y\"", "lemma of_int_fpxs_eq: \"of_int n = fpxs_const (of_int n)\"", "lemma fpxs_val_of_fls [simp]: \"fpxs_val (fpxs_of_fls f) = of_int (fls_subdegree f)\"", "lemma fpxs_nth_compose_power [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_nth (fpxs_compose_power f r) n = fpxs_nth f (n / r)\"", "lemma fls_of_fpxs_uminus [simp]: \"fls_of_fpxs (-f) = -fls_of_fpxs f\"", "lemma fpxs_root_order_uminus [simp]: \"fpxs_root_order (-f) = fpxs_root_order f\"", "lemma fpxs_val_uminus [simp]: \"fpxs_val (-f) = fpxs_val f\"", "lemma fpxs_val_minus_commute: \"fpxs_val (f - g) = fpxs_val (g - f)\"", "lemma fpxs_val_const [simp]: \"fpxs_val (fpxs_const c) = 0\"", "lemma fpxs_val_1 [simp]: \"fpxs_val 1 = 0\"", "lemma of_int_fls_subdegree_of_fpxs:\n  \"rat_of_int (fls_subdegree (fls_of_fpxs f)) = fpxs_val f * of_nat (fpxs_root_order f)\"", "lemma fpxs_nth_val_nonzero: \n  assumes \"f \\<noteq> 0\"\n  shows   \"fpxs_nth f (fpxs_val f) \\<noteq> 0\"", "lemma fpxs_nth_below_val:\n  assumes n: \"n < fpxs_val f\"\n  shows   \"fpxs_nth f n = 0\"", "lemma fpxs_val_leI: \"fpxs_nth f r \\<noteq> 0 \\<Longrightarrow> fpxs_val f \\<le> r\"", "lemma fpxs_val_0 [simp]: \"fpxs_val 0 = 0\"", "lemma fpxs_val_geI: \n  assumes \"f \\<noteq> 0\" \"\\<And>r. r < r' \\<Longrightarrow> fpxs_nth f r = 0\"\n  shows   \"fpxs_val f \\<ge> r'\"", "lemma fpxs_val_compose_power [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_val (fpxs_compose_power f r) = fpxs_val f * r\"", "lemma fpxs_val_add_ge:\n  assumes \"f + g \\<noteq> 0\"\n  shows   \"fpxs_val (f + g) \\<ge> min (fpxs_val f) (fpxs_val g)\"", "lemma fpxs_val_diff_ge:\n  assumes \"f \\<noteq> g\"\n  shows   \"fpxs_val (f - g) \\<ge> min (fpxs_val f) (fpxs_val g)\"", "lemma fpxs_nth_mult_val:\n  \"fpxs_nth (f * g) (fpxs_val f + fpxs_val g) = fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\"", "lemma fpxs_val_mult [simp]:\n  fixes f g :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  assumes \"f \\<noteq> 0\" \"g \\<noteq> 0\"\n  shows \"fpxs_val (f * g) = fpxs_val f + fpxs_val g\"", "lemma fpxs_val_power [simp]:\n  fixes f :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  assumes \"f \\<noteq> 0 \\<or> n > 0\"\n  shows \"fpxs_val (f ^ n) = of_nat n * fpxs_val f\"", "lemma fpxs_nth_power_val [simp]:\n  fixes f :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  shows \"fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\"", "lemma fpxs_X_power_0 [simp]: \"fpxs_X_power 0 = 1\"", "lemma fpxs_X_power_add: \"fpxs_X_power (a + b) = fpxs_X_power a * fpxs_X_power b\"", "lemma fpxs_X_power_mult: \"fpxs_X_power (rat_of_nat n * m) = fpxs_X_power m ^ n\"", "lemma fpxs_of_fls_X_power [simp]: \"fpxs_of_fls (fls_shift n 1) = fpxs_X_power (-rat_of_int n)\"", "lemma fpxs_X_power_neq_0 [simp]: \"fpxs_X_power r \\<noteq> (0 :: 'a :: zero_neq_one fpxs)\"", "lemma fpxs_X_power_eq_1_iff [simp]: \"fpxs_X_power r = (1 :: 'a :: zero_neq_one fpxs) \\<longleftrightarrow> r = 0\"", "lemma fpxs_nth_shift [simp]: \"fpxs_nth (fpxs_shift r f) n = fpxs_nth f (n + r)\"", "lemma fpxs_shift_0_left [simp]: \"fpxs_shift 0 f = f\"", "lemma fpxs_shift_add_left: \"fpxs_shift (m + n) f = fpxs_shift m (fpxs_shift n f)\"", "lemma fpxs_shift_diff_left: \"fpxs_shift (m - n) f = fpxs_shift m (fpxs_shift (-n) f)\"", "lemma fpxs_shift_0 [simp]: \"fpxs_shift r 0 = 0\"", "lemma fpxs_shift_add [simp]: \"fpxs_shift r (f + g) = fpxs_shift r f + fpxs_shift r g\"", "lemma fpxs_shift_uminus [simp]: \"fpxs_shift r (-f) = -fpxs_shift r f\"", "lemma fpxs_shift_shift_uminus [simp]: \"fpxs_shift r (fpxs_shift (-r) f) = f\"", "lemma fpxs_shift_shift_uminus' [simp]: \"fpxs_shift (-r) (fpxs_shift r f) = f\"", "lemma fpxs_shift_diff [simp]: \"fpxs_shift r (f - g) = fpxs_shift r f - fpxs_shift r g\"", "lemma fpxs_shift_compose_power [simp]:\n  \"fpxs_shift r (fpxs_compose_power f s) = fpxs_compose_power (fpxs_shift (r / s) f) s\"", "lemma rat_of_int_div_dvd: \"d dvd n \\<Longrightarrow> rat_of_int (n div d) = rat_of_int n / rat_of_int d\"", "lemma fpxs_of_fls_shift [simp]:\n  \"fpxs_of_fls (fls_shift n f) = fpxs_shift (of_int n) (fpxs_of_fls f)\"", "lemma fpxs_shift_mult: \"f * fpxs_shift r g = fpxs_shift r (f * g)\"\n                       \"fpxs_shift r f * g = fpxs_shift r (f * g)\"", "lemma fpxs_shift_1: \"fpxs_shift r 1 = fpxs_X_power (-r)\"", "lemma fpxs_X_power_conv_shift: \"fpxs_X_power r = fpxs_shift (-r) 1\"", "lemma fpxs_shift_power [simp]: \"fpxs_shift n x ^ m = fpxs_shift (of_nat m * n) (x ^ m)\"", "lemma fpxs_compose_power_X_power [simp]:\n  \"s > 0 \\<Longrightarrow> fpxs_compose_power (fpxs_X_power r) s = fpxs_X_power (r * s)\"", "lemma fpxs_radical_0 [simp]: \"fpxs_radical rt r 0 = 0\"", "lemma \n  fixes r :: nat\n  assumes r: \"r > 0\"\n  shows fpxs_power_radical:\n        \"rt r (fpxs_nth f (fpxs_val f)) ^ r = fpxs_nth f (fpxs_val f) \\<Longrightarrow> fpxs_radical rt r f ^ r = f\"\n    and fpxs_radical_lead_coeff:\n          \"f \\<noteq> 0 \\<Longrightarrow> fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n                       rt r (fpxs_nth f (fpxs_val f))\"", "lemma fls_base_factor_power:\n  fixes f :: \"'a::{semiring_1, semiring_no_zero_divisors} fls\"\n  shows \"fls_base_factor (f ^ n) = fls_base_factor f ^ n\""], "translations": [["", "lemma div_dvd_self:\n  fixes a b :: \"'a :: {semidom_divide}\"\n  shows \"b dvd a \\<Longrightarrow> a div b dvd a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b dvd a \\<Longrightarrow> a div b dvd a", "by (elim dvdE; cases \"b = 0\") simp_all"], ["", "lemma quotient_of_int [simp]: \"quotient_of (of_int n) = (n, 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotient_of (rat_of_int n) = (n, 1)", "using Rat.of_int_def quotient_of_int"], ["proof (prove)\nusing this:\n  Rat.of_int = rat_of_int\n  quotient_of (Rat.of_int ?a) = (?a, 1)\n\ngoal (1 subgoal):\n 1. quotient_of (rat_of_int n) = (n, 1)", "by auto"], ["", "lemma of_int_div_of_int_in_Ints_iff:\n  \"(of_int n / of_int m :: 'a :: field_char_0) \\<in> \\<int> \\<longleftrightarrow> m = 0 \\<or> m dvd n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (of_int n / of_int m \\<in> \\<int>) = (m = 0 \\<or> m dvd n)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "assume *: \"(of_int n / of_int m :: 'a) \\<in> \\<int>\""], ["proof (state)\nthis:\n  of_int n / of_int m \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "{"], ["proof (state)\nthis:\n  of_int n / of_int m \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "assume \"m \\<noteq> 0\""], ["proof (state)\nthis:\n  m \\<noteq> 0\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "from *"], ["proof (chain)\npicking this:\n  of_int n / of_int m \\<in> \\<int>", "obtain k where k: \"(of_int n / of_int m :: 'a) = of_int k\""], ["proof (prove)\nusing this:\n  of_int n / of_int m \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        of_int n / of_int m = of_int k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: Ints_cases)"], ["proof (state)\nthis:\n  of_int n / of_int m = of_int k\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "hence \"of_int n = (of_int k * of_int m :: 'a)\""], ["proof (prove)\nusing this:\n  of_int n / of_int m = of_int k\n\ngoal (1 subgoal):\n 1. of_int n = of_int k * of_int m", "using \\<open>m \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  of_int n / of_int m = of_int k\n  m \\<noteq> 0\n\ngoal (1 subgoal):\n 1. of_int n = of_int k * of_int m", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  of_int n = of_int k * of_int m\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "also"], ["proof (state)\nthis:\n  of_int n = of_int k * of_int m\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "have \"\\<dots> = of_int (k * m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int k * of_int m = of_int (k * m)", "by simp"], ["proof (state)\nthis:\n  of_int k * of_int m = of_int (k * m)\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "finally"], ["proof (chain)\npicking this:\n  of_int n = of_int (k * m)", "have \"n = k * m\""], ["proof (prove)\nusing this:\n  of_int n = of_int (k * m)\n\ngoal (1 subgoal):\n 1. n = k * m", "by (subst (asm) of_int_eq_iff)"], ["proof (state)\nthis:\n  n = k * m\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "hence \"m dvd n\""], ["proof (prove)\nusing this:\n  n = k * m\n\ngoal (1 subgoal):\n 1. m dvd n", "by auto"], ["proof (state)\nthis:\n  m dvd n\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "}"], ["proof (state)\nthis:\n  m \\<noteq> 0 \\<Longrightarrow> m dvd n\n\ngoal (2 subgoals):\n 1. of_int n / of_int m \\<in> \\<int> \\<Longrightarrow> m = 0 \\<or> m dvd n\n 2. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "thus \"m = 0 \\<or> m dvd n\""], ["proof (prove)\nusing this:\n  m \\<noteq> 0 \\<Longrightarrow> m dvd n\n\ngoal (1 subgoal):\n 1. m = 0 \\<or> m dvd n", "by blast"], ["proof (state)\nthis:\n  m = 0 \\<or> m dvd n\n\ngoal (1 subgoal):\n 1. m = 0 \\<or> m dvd n \\<Longrightarrow> of_int n / of_int m \\<in> \\<int>", "qed auto"], ["", "lemma rat_eq_quotientD:\n  assumes \"r = rat_of_int a / rat_of_int b\" \"b \\<noteq> 0\"\n  shows   \"fst (quotient_of r) dvd a\" \"snd (quotient_of r) dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (quotient_of r) dvd a &&& snd (quotient_of r) dvd b", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "define a' b' where \"a' = fst (quotient_of r)\" and \"b' = snd (quotient_of r)\""], ["proof (state)\nthis:\n  a' = fst (quotient_of r)\n  b' = snd (quotient_of r)\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "define d where \"d = gcd a b\""], ["proof (state)\nthis:\n  d = gcd a b\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "have \"b' > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b'", "by (auto simp: b'_def quotient_of_denom_pos')"], ["proof (state)\nthis:\n  0 < b'\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "have \"coprime a' b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coprime a' b'", "by (rule quotient_of_coprime[of r]) (simp add: a'_def b'_def)"], ["proof (state)\nthis:\n  coprime a' b'\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "have r: \"r = rat_of_int a' / rat_of_int b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = rat_of_int a' / rat_of_int b'", "by (simp add: a'_def b'_def quotient_of_div)"], ["proof (state)\nthis:\n  r = rat_of_int a' / rat_of_int b'\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "from assms \\<open>b' > 0\\<close>"], ["proof (chain)\npicking this:\n  r = rat_of_int a / rat_of_int b\n  b \\<noteq> 0\n  0 < b'", "have \"rat_of_int (a' * b) = rat_of_int (a * b')\""], ["proof (prove)\nusing this:\n  r = rat_of_int a / rat_of_int b\n  b \\<noteq> 0\n  0 < b'\n\ngoal (1 subgoal):\n 1. rat_of_int (a' * b) = rat_of_int (a * b')", "unfolding of_int_mult"], ["proof (prove)\nusing this:\n  r = rat_of_int a / rat_of_int b\n  b \\<noteq> 0\n  0 < b'\n\ngoal (1 subgoal):\n 1. rat_of_int a' * rat_of_int b = rat_of_int a * rat_of_int b'", "by (simp add: field_simps r)"], ["proof (state)\nthis:\n  rat_of_int (a' * b) = rat_of_int (a * b')\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "hence eq: \"a' * b = a * b'\""], ["proof (prove)\nusing this:\n  rat_of_int (a' * b) = rat_of_int (a * b')\n\ngoal (1 subgoal):\n 1. a' * b = a * b'", "by (subst (asm) of_int_eq_iff)"], ["proof (state)\nthis:\n  a' * b = a * b'\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "have \"a' dvd a * b'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' dvd a * b'", "by (simp flip: eq)"], ["proof (state)\nthis:\n  a' dvd a * b'\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "hence \"a' dvd a\""], ["proof (prove)\nusing this:\n  a' dvd a * b'\n\ngoal (1 subgoal):\n 1. a' dvd a", "by (subst (asm) coprime_dvd_mult_left_iff) fact"], ["proof (state)\nthis:\n  a' dvd a\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "moreover"], ["proof (state)\nthis:\n  a' dvd a\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "have \"b' dvd a' * b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b' dvd a' * b", "by (simp add: eq)"], ["proof (state)\nthis:\n  b' dvd a' * b\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "hence \"b' dvd b\""], ["proof (prove)\nusing this:\n  b' dvd a' * b\n\ngoal (1 subgoal):\n 1. b' dvd b", "by (subst (asm) coprime_dvd_mult_right_iff) (use \\<open>coprime a' b'\\<close> in \\<open>simp add: coprime_commute\\<close>)"], ["proof (state)\nthis:\n  b' dvd b\n\ngoal (2 subgoals):\n 1. fst (quotient_of r) dvd a\n 2. snd (quotient_of r) dvd b", "ultimately"], ["proof (chain)\npicking this:\n  a' dvd a\n  b' dvd b", "show \"fst (quotient_of r) dvd a\" \"snd (quotient_of r) dvd b\""], ["proof (prove)\nusing this:\n  a' dvd a\n  b' dvd b\n\ngoal (1 subgoal):\n 1. fst (quotient_of r) dvd a &&& snd (quotient_of r) dvd b", "unfolding a'_def b'_def"], ["proof (prove)\nusing this:\n  fst (quotient_of r) dvd a\n  snd (quotient_of r) dvd b\n\ngoal (1 subgoal):\n 1. fst (quotient_of r) dvd a &&& snd (quotient_of r) dvd b", "by blast+"], ["proof (state)\nthis:\n  fst (quotient_of r) dvd a\n  snd (quotient_of r) dvd b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quotient_of_denom_add_dvd:\n  \"snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "define a b where \"a = fst (quotient_of x)\" and \"b = snd (quotient_of x)\""], ["proof (state)\nthis:\n  a = fst (quotient_of x)\n  b = snd (quotient_of x)\n\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "define c d where \"c = fst (quotient_of y)\" and \"d = snd (quotient_of y)\""], ["proof (state)\nthis:\n  c = fst (quotient_of y)\n  d = snd (quotient_of y)\n\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "have \"b > 0\" \"d > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b &&& 0 < d", "by (auto simp: b_def d_def quotient_of_denom_pos')"], ["proof (state)\nthis:\n  0 < b\n  0 < d\n\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "have xy: \"x = rat_of_int a / rat_of_int b\" \"y = rat_of_int c / rat_of_int d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = rat_of_int a / rat_of_int b &&& y = rat_of_int c / rat_of_int d", "unfolding a_def b_def c_def d_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x)) &&&\n    y = rat_of_int (fst (quotient_of y)) / rat_of_int (snd (quotient_of y))", "by (simp_all add: quotient_of_div)"], ["proof (state)\nthis:\n  x = rat_of_int a / rat_of_int b\n  y = rat_of_int c / rat_of_int d\n\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd snd (quotient_of x) * snd (quotient_of y)", "show \"snd (quotient_of (x + y)) dvd b * d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of (x + y)) dvd b * d", "proof (rule rat_eq_quotientD)"], ["proof (state)\ngoal (2 subgoals):\n 1. x + y = rat_of_int ?a / rat_of_int (b * d)\n 2. b * d \\<noteq> 0", "show \"x + y = rat_of_int (a * d + c * b) / rat_of_int (b * d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x + y = rat_of_int (a * d + c * b) / rat_of_int (b * d)", "using \\<open>b > 0\\<close> \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n  0 < d\n\ngoal (1 subgoal):\n 1. x + y = rat_of_int (a * d + c * b) / rat_of_int (b * d)", "by (simp add: field_simps xy)"], ["proof (state)\nthis:\n  x + y = rat_of_int (a * d + c * b) / rat_of_int (b * d)\n\ngoal (1 subgoal):\n 1. b * d \\<noteq> 0", "qed (use \\<open>b > 0\\<close> \\<open>d > 0\\<close> in auto)"], ["proof (state)\nthis:\n  snd (quotient_of (x + y)) dvd b * d\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quotient_of_denom_diff_dvd:\n  \"snd (quotient_of (x - y)) dvd snd (quotient_of x) * snd (quotient_of y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of (x - y)) dvd snd (quotient_of x) * snd (quotient_of y)", "using quotient_of_denom_add_dvd[of x \"-y\"]"], ["proof (prove)\nusing this:\n  snd (quotient_of (x + - y)) dvd\n  snd (quotient_of x) * snd (quotient_of (- y))\n\ngoal (1 subgoal):\n 1. snd (quotient_of (x - y)) dvd snd (quotient_of x) * snd (quotient_of y)", "by (simp add: rat_uminus_code Let_def case_prod_unfold)"], ["", "definition supp :: \"('a \\<Rightarrow> ('b :: zero)) \\<Rightarrow> 'a set\" where\n  \"supp f = f -` (-{0})\""], ["", "lemma supp_0 [simp]: \"supp (\\<lambda>_. 0) = {}\"\n  and supp_const: \"supp (\\<lambda>_. c) = (if c = 0 then {} else UNIV)\"\n  and supp_singleton [simp]: \"c \\<noteq> 0 \\<Longrightarrow> supp (\\<lambda>x. if x = d then c else 0) = {d}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>_. 0::'b) = {} &&&\n    supp (\\<lambda>_. c) = (if c = (0::'d) then {} else UNIV) &&&\n    (c \\<noteq> (0::'d) \\<Longrightarrow>\n     supp (\\<lambda>x. if x = d then c else (0::'d)) = {d})", "by (auto simp: supp_def)"], ["", "lemma supp_uminus [simp]: \"supp (\\<lambda>x. -f x :: 'a :: group_add) = supp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>x. - f x) = supp f", "by (auto simp: supp_def)"], ["", "subsection \\<open>Definition\\<close>"], ["", "text \\<open>\n  Similarly to formal power series $R[[X]]$ and formal Laurent series $R((X))$, we define the ring\n  of formal Puiseux series $R\\{\\{X\\}\\}$ as functions from the rationals into a ring such that\n\n    \\<^enum> the support is bounded from below, and \n\n    \\<^enum> the denominators of the numbers in the support have a common multiple other than 0\n\n  One can also think of a formal Puiseux series in the paramter $X$ as a formal Laurent series\n  in the parameter $X^{1/d}$ for some positive integer $d$. This is often written in the\n  following suggestive notation:\n  \\[ R\\{\\{X\\}\\} = \\bigcup_{d\\geq 1} R((X^{1/d})) \\]\n\n  Many operations will be defined in terms of this correspondence between Puiseux and Laurent\n  series, and many of the simple properties proven that way.\n\\<close>"], ["", "definition is_fpxs :: \"(rat \\<Rightarrow> 'a :: zero) \\<Rightarrow> bool\" where\n  \"is_fpxs f \\<longleftrightarrow> bdd_below (supp f) \\<and> (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\""], ["", "typedef (overloaded) 'a fpxs = \"{f::rat \\<Rightarrow> 'a :: zero. is_fpxs f}\"\n  morphisms fpxs_nth Abs_fpxs"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {f. is_fpxs f}", "by (rule exI[of _ \"\\<lambda>_. 0\"]) (auto simp: is_fpxs_def supp_def)"], ["", "setup_lifting type_definition_fpxs"], ["", "lemma fpxs_ext: \"(\\<And>r. fpxs_nth f r = fpxs_nth g r) \\<Longrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r. fpxs_nth f r = fpxs_nth g r) \\<Longrightarrow> f = g", "by transfer auto"], ["", "lemma fpxs_eq_iff: \"f = g \\<longleftrightarrow> (\\<forall>r. fpxs_nth f r = fpxs_nth g r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = g) = (\\<forall>r. fpxs_nth f r = fpxs_nth g r)", "by transfer auto"], ["", "lift_definition fpxs_supp :: \"'a :: zero fpxs \\<Rightarrow> rat set\" is supp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma fpxs_supp_altdef: \"fpxs_supp f = {x. fpxs_nth f x \\<noteq> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_supp f = {x. fpxs_nth f x \\<noteq> (0::'a)}", "by transfer (auto simp: supp_def)"], ["", "text \\<open>\n  The following gives us the ``root order'' of \\<open>f\\<close>i, i.e. the smallest positive integer \\<open>d\\<close>\n  such that \\<open>f\\<close> is in $R((X^{1/p}))$.\n\\<close>"], ["", "lift_definition fpxs_root_order :: \"'a :: zero fpxs \\<Rightarrow> nat\" is\n  \"\\<lambda>f. nat (LCM r\\<in>supp f. snd (quotient_of r))\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma fpxs_root_order_pos [simp]: \"fpxs_root_order f > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < fpxs_root_order f", "proof transfer"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "fix f :: \"rat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "assume f: \"is_fpxs f\""], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "hence \"(LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "moreover"], ["proof (state)\nthis:\n  (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "have \"(LCM r\\<in>supp f. snd (quotient_of r)) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> (LCM r\\<in>supp f. snd (quotient_of r))", "by simp"], ["proof (state)\nthis:\n  0 \\<le> (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "ultimately"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\n  0 \\<le> (LCM r\\<in>supp f. snd (quotient_of r))", "show \"nat (LCM r\\<in>supp f. snd (quotient_of r)) > 0\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp f. snd (quotient_of r)) \\<noteq> 0\n  0 \\<le> (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. 0 < nat (LCM r\\<in>supp f. snd (quotient_of r))", "by linarith"], ["proof (state)\nthis:\n  0 < nat (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_root_order_nonzero [simp]: \"fpxs_root_order f \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_root_order f \\<noteq> 0", "using fpxs_root_order_pos[of f]"], ["proof (prove)\nusing this:\n  0 < fpxs_root_order f\n\ngoal (1 subgoal):\n 1. fpxs_root_order f \\<noteq> 0", "by linarith"], ["", "text \\<open>\n  Let \\<open>d\\<close> denote the root order of a Puiseux series \\<open>f\\<close>, i.e. the smallest number \\<open>d\\<close> such that\n  all monomials with non-zero coefficients can be written in the form $X^{n/d}$ for some \\<open>n\\<close>.\n  Then \\<open>f\\<close> can be written as a Laurent series in \\<open>X^{1/d}\\<close>. The following operation gives us\n  this Laurent series.\n\\<close>"], ["", "lift_definition fls_of_fpxs :: \"'a :: zero fpxs \\<Rightarrow> 'a fls\" is\n  \"\\<lambda>f n. f (of_int n / of_int (LCM r\\<in>supp f. snd (quotient_of r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "fix f :: \"rat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "assume f: \"is_fpxs f\""], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "hence \"bdd_below (supp f)\""], ["proof (prove)\nusing this:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. bdd_below (supp f)", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  bdd_below (supp f)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "then"], ["proof (chain)\npicking this:\n  bdd_below (supp f)", "obtain r0 where \"\\<forall>x\\<in>supp f. r0 \\<le> x\""], ["proof (prove)\nusing this:\n  bdd_below (supp f)\n\ngoal (1 subgoal):\n 1. (\\<And>r0.\n        \\<forall>x\\<in>supp f. r0 \\<le> x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: bdd_below_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>supp f. r0 \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "hence r0: \"f x = 0\" if \"x < r0\" for x"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>supp f. r0 \\<le> x\n\ngoal (1 subgoal):\n 1. f x = (0::'a)", "using that"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>supp f. r0 \\<le> x\n  x < r0\n\ngoal (1 subgoal):\n 1. f x = (0::'a)", "by (auto simp: supp_def vimage_def)"], ["proof (state)\nthis:\n  ?x < r0 \\<Longrightarrow> f ?x = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "define d :: int where \"d = (LCM r\\<in>supp f. snd (quotient_of r))\""], ["proof (state)\nthis:\n  d = (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "have \"d \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> d", "by (simp add: d_def)"], ["proof (state)\nthis:\n  0 \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "moreover"], ["proof (state)\nthis:\n  0 \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "have \"d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "using f"], ["proof (prove)\nusing this:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by (auto simp: d_def is_fpxs_def)"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<le> d\n  d \\<noteq> 0", "have \"d > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> d\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < d", "by linarith"], ["proof (state)\nthis:\n  0 < d\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "have *: \"f (of_int n / of_int d) = 0\" if \"n < \\<lfloor>r0 * of_int d\\<rfloor>\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. f (rat_of_int n / rat_of_int d) = (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f (rat_of_int n / rat_of_int d) = (0::'a)", "have \"rat_of_int n < r0 * rat_of_int d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int n < r0 * rat_of_int d", "using that"], ["proof (prove)\nusing this:\n  n < \\<lfloor>r0 * rat_of_int d\\<rfloor>\n\ngoal (1 subgoal):\n 1. rat_of_int n < r0 * rat_of_int d", "by linarith"], ["proof (state)\nthis:\n  rat_of_int n < r0 * rat_of_int d\n\ngoal (1 subgoal):\n 1. f (rat_of_int n / rat_of_int d) = (0::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  rat_of_int n < r0 * rat_of_int d\n\ngoal (1 subgoal):\n 1. f (rat_of_int n / rat_of_int d) = (0::'a)", "using \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  rat_of_int n < r0 * rat_of_int d\n  0 < d\n\ngoal (1 subgoal):\n 1. f (rat_of_int n / rat_of_int d) = (0::'a)", "by (intro r0) (auto simp: field_simps)"], ["proof (state)\nthis:\n  f (rat_of_int n / rat_of_int d) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?n < \\<lfloor>r0 * rat_of_int d\\<rfloor> \\<Longrightarrow>\n  f (rat_of_int ?n / rat_of_int d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "have \"eventually (\\<lambda>n. n > -\\<lfloor>r0 * of_int d\\<rfloor>) at_top\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually ((<) (- \\<lfloor>r0 * rat_of_int d\\<rfloor>)) at_top", "by (rule eventually_gt_at_top)"], ["proof (state)\nthis:\n  eventually ((<) (- \\<lfloor>r0 * rat_of_int d\\<rfloor>)) at_top\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "hence \"eventually (\\<lambda>n. f (of_int (-n) / of_int d) = 0) at_top\""], ["proof (prove)\nusing this:\n  eventually ((<) (- \\<lfloor>r0 * rat_of_int d\\<rfloor>)) at_top\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in at_top.\n       f (rat_of_int (- n) / rat_of_int d) = (0::'a)", "by (eventually_elim) (rule *, auto)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in at_top.\n     f (rat_of_int (- n) / rat_of_int d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "hence \"eventually (\\<lambda>n. f (of_int (-int n) / of_int d) = 0) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in at_top.\n     f (rat_of_int (- n) / rat_of_int d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       f (rat_of_int (- int n) / rat_of_int d) = (0::'a)", "by (rule eventually_compose_filterlim) (rule filterlim_int_sequentially)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     f (rat_of_int (- int n) / rat_of_int d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       is_fpxs fun \\<Longrightarrow>\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (rat_of_int (- int n) /\n               rat_of_int (LCM r\\<in>supp fun. snd (quotient_of r))) =\n          (0::'a)", "thus \"eventually (\\<lambda>n. f (of_int (-int n) / of_int d) = 0) cofinite\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     f (rat_of_int (- int n) / rat_of_int d) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>\\<infinity>n.\n       f (rat_of_int (- int n) / rat_of_int d) = (0::'a)", "by (simp add: cofinite_eq_sequentially)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n.\n     f (rat_of_int (- int n) / rat_of_int d) = (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_nth_of_fpxs:\n  \"fls_nth (fls_of_fpxs f) n = fpxs_nth f (of_int n / of_nat (fpxs_root_order f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_nth (fls_of_fpxs f) n =\n    fpxs_nth f (rat_of_int n / rat_of_nat (fpxs_root_order f))", "by transfer simp"], ["", "subsection \\<open>Basic algebraic typeclass instances\\<close>"], ["", "instantiation fpxs :: (zero) zero\nbegin"], ["", "lift_definition zero_fpxs :: \"'a fpxs\" is \"\\<lambda>r::rat. 0 :: 'a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>r. 0::'a)", "by (auto simp: is_fpxs_def supp_def)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, zero_class)", ".."], ["", "end"], ["", "instantiation fpxs :: (\"{one, zero}\") one\nbegin"], ["", "lift_definition one_fpxs :: \"'a fpxs\" is \"\\<lambda>r::rat. if r = 0 then 1 else 0 :: 'a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>r. if r = 0 then 1::'a else (0::'a))", "by (cases \"(1 :: 'a) = 0\") (auto simp: is_fpxs_def cong: if_cong)"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, one_class)", ".."], ["", "end"], ["", "lemma fls_of_fpxs_0 [simp]: \"fls_of_fpxs 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs 0 = 0", "by transfer auto"], ["", "lemma fpxs_nth_0 [simp]: \"fpxs_nth 0 r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth 0 r = (0::'a)", "by transfer auto"], ["", "lemma fpxs_nth_1: \"fpxs_nth 1 r = (if r = 0 then 1 else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth 1 r = (if r = 0 then 1::'a else (0::'a))", "by transfer auto"], ["", "lemma fpxs_nth_1': \"fpxs_nth 1 0 = 1\" \"r \\<noteq> 0 \\<Longrightarrow> fpxs_nth 1 r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth 1 0 = (1::'a) &&&\n    (r \\<noteq> 0 \\<Longrightarrow> fpxs_nth 1 r = (0::'b))", "by (auto simp: fpxs_nth_1)"], ["", "instantiation fpxs :: (monoid_add) monoid_add\nbegin"], ["", "lift_definition plus_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>f g x. f x + g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs (\\<lambda>x. fun1 x + fun2 x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs (\\<lambda>x. fun1 x + fun2 x)", "fix f g :: \"rat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs (\\<lambda>x. fun1 x + fun2 x)", "assume fg: \"is_fpxs f\" \"is_fpxs g\""], ["proof (state)\nthis:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs (\\<lambda>x. fun1 x + fun2 x)", "show \"is_fpxs (\\<lambda>x. f x + g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>x. f x + g x)", "unfolding is_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>x. f x + g x)) \\<and>\n    (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f x + g x))\n 2. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "have supp: \"supp (\\<lambda>x. f x + g x) \\<subseteq> supp f \\<union> supp g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>x. f x + g x) \\<subseteq> supp f \\<union> supp g", "by (auto simp: supp_def)"], ["proof (state)\nthis:\n  supp (\\<lambda>x. f x + g x) \\<subseteq> supp f \\<union> supp g\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f x + g x))\n 2. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "show \"bdd_below (supp (\\<lambda>x. f x + g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>x. f x + g x))", "by (rule bdd_below_mono[OF _ supp]) (use fg in \\<open>auto simp: is_fpxs_def\\<close>)"], ["proof (state)\nthis:\n  bdd_below (supp (\\<lambda>x. f x + g x))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "have \"(LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n            (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n    (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r))", "by (intro Lcm_subset image_mono supp)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> = lcm (LCM r\\<in>supp f. snd (quotient_of r)) (LCM r\\<in>supp g. snd (quotient_of r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r)) =\n    lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r))", "unfolding image_Un Lcm_Un"], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r)) =\n    lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r))", ".."], ["proof (state)\nthis:\n  (LCM r\\<in>supp f \\<union> supp g. snd (quotient_of r)) =\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))", "have \"(LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n                    lcm (LCM r\\<in>supp f. snd (quotient_of r)) (LCM r\\<in>supp g. snd (quotient_of r))\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n    lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r))", "."], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "moreover"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "have \"lcm (LCM r\\<in>supp f. snd (quotient_of r)) (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq>\n    0", "using fg"], ["proof (prove)\nusing this:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. lcm (LCM r\\<in>supp f. snd (quotient_of r))\n     (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq>\n    0", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "ultimately"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq>\n  0", "show \"(LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) dvd\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r))\n  lcm (LCM r\\<in>supp f. snd (quotient_of r))\n   (LCM r\\<in>supp g. snd (quotient_of r)) \\<noteq>\n  0\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f x + g x). snd (quotient_of r)) \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_fpxs (\\<lambda>x. f x + g x)\n\ngoal:\nNo subgoals!", "qed"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, monoid_add_class)", "by standard (transfer; simp add: algebra_simps fun_eq_iff)+"], ["", "end"], ["", "instance fpxs :: (comm_monoid_add) comm_monoid_add"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, comm_monoid_add_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a. 0 + a = a", "fix f g :: \"'a fpxs\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. a + b = b + a\n 2. \\<And>a. 0 + a = a", "show \"f + g = g + f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g = g + f", "by transfer (auto simp: add_ac)"], ["proof (state)\nthis:\n  f + g = g + f\n\ngoal (1 subgoal):\n 1. \\<And>a. 0 + a = a", "qed simp_all"], ["", "lemma fpxs_nth_add [simp]: \"fpxs_nth (f + g) r = fpxs_nth f r + fpxs_nth g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f + g) r = fpxs_nth f r + fpxs_nth g r", "by transfer auto"], ["", "lift_definition fpxs_of_fls :: \"'a :: zero fls \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>f r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "fix f :: \"int \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "assume \"eventually (\\<lambda>n. f (-int n) = 0) cofinite\""], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "hence \"eventually (\\<lambda>n. f (-int n) = 0) at_top\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)", "by (simp add: cofinite_eq_sequentially)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)", "obtain N where N: \"f (-int n) = 0\" if \"n \\<ge> N\" for n"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        (\\<And>n.\n            N \\<le> n \\<Longrightarrow>\n            f (- int n) = (0::'a)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_at_top_linorder)"], ["proof (state)\nthis:\n  N \\<le> ?n \\<Longrightarrow> f (- int ?n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>fun.\n       \\<forall>\\<^sub>\\<infinity>n.\n          fun (- int n) = (0::'a) \\<Longrightarrow>\n       is_fpxs\n        (\\<lambda>r.\n            if r \\<in> \\<int> then fun \\<lfloor>r\\<rfloor> else (0::'a))", "show \"is_fpxs (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs\n     (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))", "unfolding is_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n           else (0::'a))) \\<and>\n    (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))\n 2. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"bdd_below {-(of_nat N::rat)..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below {- rat_of_nat N..}", "by simp"], ["proof (state)\nthis:\n  bdd_below {- rat_of_nat N..}\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))\n 2. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "moreover"], ["proof (state)\nthis:\n  bdd_below {- rat_of_nat N..}\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))\n 2. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"supp (\\<lambda>r::rat. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0) \\<subseteq> {-of_nat N..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n    \\<subseteq> {- rat_of_nat N..}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)) \\<Longrightarrow>\n       x \\<in> {- rat_of_nat N..}", "fix r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)) \\<Longrightarrow>\n       x \\<in> {- rat_of_nat N..}", "assume \"r \\<in> supp (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0)\""], ["proof (state)\nthis:\n  r \\<in> supp\n           (\\<lambda>r.\n               if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)) \\<Longrightarrow>\n       x \\<in> {- rat_of_nat N..}", "then"], ["proof (chain)\npicking this:\n  r \\<in> supp\n           (\\<lambda>r.\n               if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))", "obtain m where [simp]: \"r = of_int m\" \"f m \\<noteq> 0\""], ["proof (prove)\nusing this:\n  r \\<in> supp\n           (\\<lambda>r.\n               if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>r = rat_of_int m; f m \\<noteq> (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: supp_def elim!: Ints_cases split: if_splits)"], ["proof (state)\nthis:\n  r = rat_of_int m\n  f m \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)) \\<Longrightarrow>\n       x \\<in> {- rat_of_nat N..}", "have \"m \\<ge> -int N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - int N \\<le> m", "using N[of \"nat (-m)\"]"], ["proof (prove)\nusing this:\n  N \\<le> nat (- m) \\<Longrightarrow> f (- int (nat (- m))) = (0::'a)\n\ngoal (1 subgoal):\n 1. - int N \\<le> m", "by (cases \"m \\<ge> 0\"; cases \"-int N \\<le> m\") (auto simp: le_nat_iff)"], ["proof (state)\nthis:\n  - int N \\<le> m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)) \\<Longrightarrow>\n       x \\<in> {- rat_of_nat N..}", "thus \"r \\<in> {-of_nat N..}\""], ["proof (prove)\nusing this:\n  - int N \\<le> m\n\ngoal (1 subgoal):\n 1. r \\<in> {- rat_of_nat N..}", "by simp"], ["proof (state)\nthis:\n  r \\<in> {- rat_of_nat N..}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n  \\<subseteq> {- rat_of_nat N..}\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))\n 2. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "ultimately"], ["proof (chain)\npicking this:\n  bdd_below {- rat_of_nat N..}\n  supp\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n  \\<subseteq> {- rat_of_nat N..}", "show \"bdd_below (supp (\\<lambda>r::rat. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0))\""], ["proof (prove)\nusing this:\n  bdd_below {- rat_of_nat N..}\n  supp\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n  \\<subseteq> {- rat_of_nat N..}\n\ngoal (1 subgoal):\n 1. bdd_below\n     (supp\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))", "by (rule bdd_below_mono)"], ["proof (state)\nthis:\n  bdd_below\n   (supp\n     (\\<lambda>r.\n         if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"(LCM r\\<in>supp (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0). snd (quotient_of r)) dvd 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_unit\n     (LCM r\\<in>supp\n                 (\\<lambda>r.\n                     if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                     else (0::'a)).\n         snd (quotient_of r))", "by (intro Lcm_least) (auto simp: supp_def elim!: Ints_cases split: if_splits)"], ["proof (state)\nthis:\n  is_unit\n   (LCM r\\<in>supp\n               (\\<lambda>r.\n                   if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                   else (0::'a)).\n       snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "thus \"(LCM r\\<in>supp (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0). snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_unit\n   (LCM r\\<in>supp\n               (\\<lambda>r.\n                   if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                   else (0::'a)).\n       snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>r.\n                    if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                    else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "by (intro notI) simp"], ["proof (state)\nthis:\n  (LCM r\\<in>supp\n              (\\<lambda>r.\n                  if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                  else (0::'a)).\n      snd (quotient_of r)) \\<noteq>\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_fpxs\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "instantiation fpxs :: (group_add) group_add\nbegin"], ["", "lift_definition uminus_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs\" is \"\\<lambda>f x. -f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun. is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>x. - fun x)", "by (auto simp: is_fpxs_def)"], ["", "definition minus_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs \\<Rightarrow> 'a fpxs\" where\n  \"minus_fpxs f g = f + (-g)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, group_add_class)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. - a + a = 0\n 2. \\<And>a b. a + - b = a - b", "fix f :: \"'a fpxs\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. - a + a = 0\n 2. \\<And>a b. a + - b = a - b", "show \"-f + f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - f + f = 0", "by transfer auto"], ["proof (state)\nthis:\n  - f + f = 0\n\ngoal (1 subgoal):\n 1. \\<And>a b. a + - b = a - b", "qed (auto simp: minus_fpxs_def)"], ["", "end"], ["", "lemma fpxs_nth_uminus [simp]: \"fpxs_nth (-f) r = -fpxs_nth f r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (- f) r = - fpxs_nth f r", "by transfer auto"], ["", "lemma fpxs_nth_minus [simp]: \"fpxs_nth (f - g) r = fpxs_nth f r - fpxs_nth g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f - g) r = fpxs_nth f r - fpxs_nth g r", "unfolding minus_fpxs_def fpxs_nth_add fpxs_nth_uminus"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f r + - fpxs_nth g r = fpxs_nth f r - fpxs_nth g r", "by simp"], ["", "lemma fpxs_of_fls_eq_iff [simp]: \"fpxs_of_fls f = fpxs_of_fls g \\<longleftrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_of_fls f = fpxs_of_fls g) = (f = g)", "by transfer (force simp: fun_eq_iff Ints_def)"], ["", "lemma fpxs_of_fls_0 [simp]: \"fpxs_of_fls 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls 0 = 0", "by transfer auto"], ["", "lemma fpxs_of_fls_1 [simp]: \"fpxs_of_fls 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls 1 = 1", "by transfer (auto simp: fun_eq_iff elim!: Ints_cases)"], ["", "lemma fpxs_of_fls_add [simp]: \"fpxs_of_fls (f + g) = fpxs_of_fls f + fpxs_of_fls g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (f + g) = fpxs_of_fls f + fpxs_of_fls g", "by transfer (auto simp: fun_eq_iff elim!: Ints_cases)"], ["", "lemma fps_to_fls_sum [simp]: \"fps_to_fls (sum f A) = (\\<Sum>x\\<in>A. fps_to_fls (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_to_fls (sum f A) = (\\<Sum>x\\<in>A. fps_to_fls (f x))", "by (induction A rule: infinite_finite_induct) auto"], ["", "lemma fpxs_of_fls_sum [simp]: \"fpxs_of_fls (sum f A) = (\\<Sum>x\\<in>A. fpxs_of_fls (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (sum f A) = (\\<Sum>x\\<in>A. fpxs_of_fls (f x))", "by (induction A rule: infinite_finite_induct) auto"], ["", "lemma fpxs_nth_of_fls:\n  \"fpxs_nth (fpxs_of_fls f) r = (if r \\<in> \\<int> then fls_nth f \\<lfloor>r\\<rfloor> else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f) r =\n    (if r \\<in> \\<int> then fls_nth f \\<lfloor>r\\<rfloor> else (0::'a))", "by transfer auto"], ["", "lemma fpxs_of_fls_eq_0_iff [simp]: \"fpxs_of_fls f = 0 \\<longleftrightarrow> f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_of_fls f = 0) = (f = 0)", "using fpxs_of_fls_eq_iff[of f 0]"], ["proof (prove)\nusing this:\n  (fpxs_of_fls f = fpxs_of_fls 0) = (f = 0)\n\ngoal (1 subgoal):\n 1. (fpxs_of_fls f = 0) = (f = 0)", "by (simp del: fpxs_of_fls_eq_iff)"], ["", "lemma fpxs_of_fls_eq_1_iff [simp]: \"fpxs_of_fls f = 1 \\<longleftrightarrow> f = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_of_fls f = 1) = (f = 1)", "using fpxs_of_fls_eq_iff[of f 1]"], ["proof (prove)\nusing this:\n  (fpxs_of_fls f = fpxs_of_fls 1) = (f = 1)\n\ngoal (1 subgoal):\n 1. (fpxs_of_fls f = 1) = (f = 1)", "by (simp del: fpxs_of_fls_eq_iff)"], ["", "lemma fpxs_root_order_of_fls [simp]: \"fpxs_root_order (fpxs_of_fls f) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_root_order (fpxs_of_fls f) = 1", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "case (1 f)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "have \"supp (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else 0) = rat_of_int ` {n. f n \\<noteq> 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     (\\<lambda>r.\n         if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)) =\n    rat_of_int ` {n. f n \\<noteq> (0::'a)}", "by (force simp: supp_def Ints_def)"], ["proof (state)\nthis:\n  supp\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)) =\n  rat_of_int ` {n. f n \\<noteq> (0::'a)}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "also"], ["proof (state)\nthis:\n  supp\n   (\\<lambda>r. if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor> else (0::'a)) =\n  rat_of_int ` {n. f n \\<noteq> (0::'a)}\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "have \"(LCM r\\<in>\\<dots>. snd (quotient_of r)) = nat (LCM x\\<in>{n. f n \\<noteq> 0}. 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>rat_of_int ` {n. f n \\<noteq> (0::'a)}.\n        snd (quotient_of r)) =\n    int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1))", "by (simp add: image_image)"], ["proof (state)\nthis:\n  (LCM r\\<in>rat_of_int ` {n. f n \\<noteq> (0::'a)}. snd (quotient_of r)) =\n  int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "also"], ["proof (state)\nthis:\n  (LCM r\\<in>rat_of_int ` {n. f n \\<noteq> (0::'a)}. snd (quotient_of r)) =\n  int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "have \"\\<dots> = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1)) = 1", "by simp"], ["proof (state)\nthis:\n  int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1)) = 1\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "also"], ["proof (state)\nthis:\n  int (nat (LCM x\\<in>{n. f n \\<noteq> (0::'a)}. 1)) = 1\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "have \"nat 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat 1 = 1", "by simp"], ["proof (state)\nthis:\n  nat 1 = 1\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       nat (LCM r\\<in>supp\n                       (\\<lambda>r.\n                           if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                           else (0::'a)).\n               snd (quotient_of r)) =\n       1", "finally"], ["proof (chain)\npicking this:\n  nat (LCM r\\<in>supp\n                  (\\<lambda>r.\n                      if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                      else (0::'a)).\n          snd (quotient_of r)) =\n  1", "show ?case"], ["proof (prove)\nusing this:\n  nat (LCM r\\<in>supp\n                  (\\<lambda>r.\n                      if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                      else (0::'a)).\n          snd (quotient_of r)) =\n  1\n\ngoal (1 subgoal):\n 1. nat (LCM r\\<in>supp\n                    (\\<lambda>r.\n                        if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                        else (0::'a)).\n            snd (quotient_of r)) =\n    1", "."], ["proof (state)\nthis:\n  nat (LCM r\\<in>supp\n                  (\\<lambda>r.\n                      if r \\<in> \\<int> then f \\<lfloor>r\\<rfloor>\n                      else (0::'a)).\n          snd (quotient_of r)) =\n  1\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The substitution $X \\mapsto X^r$\\<close>"], ["", "text \\<open>\n  This operation turns a formal Puiseux series $f(X)$ into $f(X^r)$, where\n  $r$ can be any positive rational number:\n\\<close>"], ["", "lift_definition fpxs_compose_power :: \"'a :: zero fpxs \\<Rightarrow> rat \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>f r x. if r > 0 then f (x / r) else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun rat.\n       is_fpxs fun \\<Longrightarrow>\n       is_fpxs (\\<lambda>x. if 0 < rat then fun (x / rat) else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun rat.\n       is_fpxs fun \\<Longrightarrow>\n       is_fpxs (\\<lambda>x. if 0 < rat then fun (x / rat) else (0::'a))", "fix f :: \"rat \\<Rightarrow> 'a\" and r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun rat.\n       is_fpxs fun \\<Longrightarrow>\n       is_fpxs (\\<lambda>x. if 0 < rat then fun (x / rat) else (0::'a))", "assume f: \"is_fpxs f\""], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>fun rat.\n       is_fpxs fun \\<Longrightarrow>\n       is_fpxs (\\<lambda>x. if 0 < rat then fun (x / rat) else (0::'a))", "have \"is_fpxs (\\<lambda>x. f (x / r))\" if \"r > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>x. f (x / r))", "unfolding is_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>x. f (x / r))) \\<and>\n    (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "define r' where \"r' = inverse r\""], ["proof (state)\nthis:\n  r' = inverse r\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"r' > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r'", "using \\<open>r > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. 0 < r'", "by (auto simp: r'_def)"], ["proof (state)\nthis:\n  0 < r'\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"(\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))", "using \\<open>r' > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < r'\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))", "by (auto simp: supp_def image_iff vimage_def field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "hence eq: \"(\\<lambda>x. x * r) ` supp f = supp (\\<lambda>x. f (x / r))\""], ["proof (prove)\nusing this:\n  (\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * r) ` supp f = supp (\\<lambda>x. f (x / r))", "using \\<open>r > 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<lambda>x. x / r') ` supp f = supp (\\<lambda>x. f (x * r'))\n  0 < r\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x * r) ` supp f = supp (\\<lambda>x. f (x / r))", "by (simp add: r'_def field_simps)"], ["proof (state)\nthis:\n  (\\<lambda>x. x * r) ` supp f = supp (\\<lambda>x. f (x / r))\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "from f"], ["proof (chain)\npicking this:\n  is_fpxs f", "have \"bdd_below (supp f)\""], ["proof (prove)\nusing this:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. bdd_below (supp f)", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  bdd_below (supp f)\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "hence \"bdd_below ((\\<lambda>x. x * r) ` supp f)\""], ["proof (prove)\nusing this:\n  bdd_below (supp f)\n\ngoal (1 subgoal):\n 1. bdd_below ((\\<lambda>x. x * r) ` supp f)", "using \\<open>r > 0\\<close>"], ["proof (prove)\nusing this:\n  bdd_below (supp f)\n  0 < r\n\ngoal (1 subgoal):\n 1. bdd_below ((\\<lambda>x. x * r) ` supp f)", "by (intro bdd_below_image_mono) (auto simp: mono_def divide_right_mono)"], ["proof (state)\nthis:\n  bdd_below ((\\<lambda>x. x * r) ` supp f)\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  bdd_below ((\\<lambda>x. x * r) ` supp f)\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "note eq"], ["proof (state)\nthis:\n  (\\<lambda>x. x * r) ` supp f = supp (\\<lambda>x. f (x / r))\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))\n 2. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  bdd_below (supp (\\<lambda>x. f (x / r)))", "show \"bdd_below (supp (\\<lambda>x. f (x / r)))\""], ["proof (prove)\nusing this:\n  bdd_below (supp (\\<lambda>x. f (x / r)))\n\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>x. f (x / r)))", "."], ["proof (state)\nthis:\n  bdd_below (supp (\\<lambda>x. f (x / r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "define a b where \"a = fst (quotient_of r)\" and \"b = snd (quotient_of r)\""], ["proof (state)\nthis:\n  a = fst (quotient_of r)\n  b = snd (quotient_of r)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"b > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b", "by (simp add: b_def quotient_of_denom_pos')"], ["proof (state)\nthis:\n  0 < b\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have [simp]: \"quotient_of r = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. quotient_of r = (a, b)", "by (simp add: a_def b_def)"], ["proof (state)\nthis:\n  quotient_of r = (a, b)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"r = of_int a / of_int b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = rat_of_int a / rat_of_int b", "by (simp add: quotient_of_div)"], ["proof (state)\nthis:\n  r = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "with \\<open>r > 0\\<close> and \\<open>b > 0\\<close>"], ["proof (chain)\npicking this:\n  0 < r\n  0 < b\n  r = rat_of_int a / rat_of_int b", "have \\<open>a > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < r\n  0 < b\n  r = rat_of_int a / rat_of_int b\n\ngoal (1 subgoal):\n 1. 0 < a", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  0 < a\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"(LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) =\n            (LCM x\\<in>supp f. snd (quotient_of (x * r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) =\n    (LCM x\\<in>supp f. snd (quotient_of (x * r)))", "by (simp add: eq [symmetric] image_image)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) =\n  (LCM x\\<in>supp f. snd (quotient_of (x * r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) =\n  (LCM x\\<in>supp f. snd (quotient_of (x * r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> dvd (LCM x\\<in>supp f. snd (quotient_of x) * b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of (x * r))) dvd\n    (LCM x\\<in>supp f. snd (quotient_of x) * b)", "using \\<open>a > 0\\<close> \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < a\n  0 < b\n\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of (x * r))) dvd\n    (LCM x\\<in>supp f. snd (quotient_of x) * b)", "by (intro Lcm_mono)\n         (simp add: rat_times_code case_prod_unfold Let_def Rat.normalize_def\n                    quotient_of_denom_pos' div_dvd_self)"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of (x * r))) dvd\n  (LCM x\\<in>supp f. snd (quotient_of x) * b)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of (x * r))) dvd\n  (LCM x\\<in>supp f. snd (quotient_of x) * b)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> dvd normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "proof (cases \"supp f = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. supp f = {} \\<Longrightarrow>\n    (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n 2. supp f \\<noteq> {} \\<Longrightarrow>\n    (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "case False"], ["proof (state)\nthis:\n  supp f \\<noteq> {}\n\ngoal (2 subgoals):\n 1. supp f = {} \\<Longrightarrow>\n    (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n 2. supp f \\<noteq> {} \\<Longrightarrow>\n    (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "using Lcm_mult[of \"(\\<lambda>x. snd (quotient_of x)) ` supp f\" b]"], ["proof (prove)\nusing this:\n  supp f \\<noteq> {}\n  (\\<lambda>x. snd (quotient_of x)) ` supp f \\<noteq> {} \\<Longrightarrow>\n  Lcm ((*) b ` (\\<lambda>x. snd (quotient_of x)) ` supp f) =\n  normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "by (simp add: mult_ac image_image)"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n  normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. supp f = {} \\<Longrightarrow>\n    (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))", "qed auto"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n  normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "hence \"(LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n             b * (LCM x\\<in>supp f. snd (quotient_of x))\""], ["proof (prove)\nusing this:\n  (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n  normalize (b * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n    b * (LCM x\\<in>supp f. snd (quotient_of x))", "by simp"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of x) * b) dvd\n  b * (LCM x\\<in>supp f. snd (quotient_of x))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) dvd\n  b * (LCM x\\<in>supp f. snd (quotient_of x))", "show \"(LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) dvd\n  b * (LCM x\\<in>supp f. snd (quotient_of x))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "using \\<open>b > 0\\<close> f"], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) dvd\n  b * (LCM x\\<in>supp f. snd (quotient_of x))\n  0 < b\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>x. f (x / r)). snd (quotient_of r)) \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < r \\<Longrightarrow> is_fpxs (\\<lambda>x. f (x / r))\n\ngoal (1 subgoal):\n 1. \\<And>fun rat.\n       is_fpxs fun \\<Longrightarrow>\n       is_fpxs (\\<lambda>x. if 0 < rat then fun (x / rat) else (0::'a))", "thus \"is_fpxs (\\<lambda>x. if r > 0 then f (x / r) else 0)\""], ["proof (prove)\nusing this:\n  0 < r \\<Longrightarrow> is_fpxs (\\<lambda>x. f (x / r))\n\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>x. if 0 < r then f (x / r) else (0::'a))", "by (cases \"r > 0\") (auto simp: is_fpxs_def supp_def)"], ["proof (state)\nthis:\n  is_fpxs (\\<lambda>x. if 0 < r then f (x / r) else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_as_fls:\n  \"fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / of_nat (fpxs_root_order f)) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f))\n     (1 / rat_of_nat (fpxs_root_order f)) =\n    f", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "case (1 f)"], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "define d where \"d = (LCM r\\<in>supp f. snd (quotient_of r))\""], ["proof (state)\nthis:\n  d = (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "have \"d \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> d", "by (simp add: d_def)"], ["proof (state)\nthis:\n  0 \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "moreover"], ["proof (state)\nthis:\n  0 \\<le> d\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "have \"d \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "using 1"], ["proof (prove)\nusing this:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. d \\<noteq> 0", "by (simp add: is_fpxs_def d_def)"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "ultimately"], ["proof (chain)\npicking this:\n  0 \\<le> d\n  d \\<noteq> 0", "have \"d > 0\""], ["proof (prove)\nusing this:\n  0 \\<le> d\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < d", "by linarith"], ["proof (state)\nthis:\n  0 < d\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "have \"(if rat_of_int d * x \\<in> \\<int> then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) else 0) = f x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "proof (cases \"rat_of_int d * x \\<in> \\<int>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "case True"], ["proof (state)\nthis:\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "then"], ["proof (chain)\npicking this:\n  rat_of_int d * x \\<in> \\<int>", "obtain n where n: \"rat_of_int d * x = of_int n\""], ["proof (prove)\nusing this:\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        rat_of_int d * x = rat_of_int n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto elim!: Ints_cases)"], ["proof (state)\nthis:\n  rat_of_int d * x = rat_of_int n\n\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "have \"f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) = f (rat_of_int n / rat_of_int d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) =\n    f (rat_of_int n / rat_of_int d)", "by (simp add: n)"], ["proof (state)\nthis:\n  f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) =\n  f (rat_of_int n / rat_of_int d)\n\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "also"], ["proof (state)\nthis:\n  f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) =\n  f (rat_of_int n / rat_of_int d)\n\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "have \"rat_of_int n / rat_of_int d = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int n / rat_of_int d = x", "using n \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  rat_of_int d * x = rat_of_int n\n  0 < d\n\ngoal (1 subgoal):\n 1. rat_of_int n / rat_of_int d = x", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  rat_of_int n / rat_of_int d = x\n\ngoal (2 subgoals):\n 1. rat_of_int d * x \\<in> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x\n 2. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "finally"], ["proof (chain)\npicking this:\n  f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) = f x", "show ?thesis"], ["proof (prove)\nusing this:\n  f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) = f x\n\ngoal (1 subgoal):\n 1. (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "using True"], ["proof (prove)\nusing this:\n  f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d) = f x\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "by simp"], ["proof (state)\nthis:\n  (if rat_of_int d * x \\<in> \\<int>\n   then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n   else (0::'a)) =\n  f x\n\ngoal (1 subgoal):\n 1. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "case False"], ["proof (state)\nthis:\n  rat_of_int d * x \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "have \"x \\<notin> supp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> supp f", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "assume \"x \\<in> supp f\""], ["proof (state)\nthis:\n  x \\<in> supp f\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "hence \"snd (quotient_of x) dvd d\""], ["proof (prove)\nusing this:\n  x \\<in> supp f\n\ngoal (1 subgoal):\n 1. snd (quotient_of x) dvd d", "by (simp add: d_def)"], ["proof (state)\nthis:\n  snd (quotient_of x) dvd d\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "hence \"rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x)) \\<in> \\<int>\""], ["proof (prove)\nusing this:\n  snd (quotient_of x) dvd d\n\ngoal (1 subgoal):\n 1. rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x))\n    \\<in> \\<int>", "by (intro of_int_divide_in_Ints) auto"], ["proof (state)\nthis:\n  rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x))\n  \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x))\n  \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "have \"rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x)) =\n                 rat_of_int d * (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fst (quotient_of x) * d) /\n    rat_of_int (snd (quotient_of x)) =\n    rat_of_int d *\n    (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x)))", "by (simp only: of_int_mult mult_ac times_divide_eq_right)"], ["proof (state)\nthis:\n  rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x)) =\n  rat_of_int d *\n  (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  rat_of_int (fst (quotient_of x) * d) / rat_of_int (snd (quotient_of x)) =\n  rat_of_int d *\n  (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "have \"\\<dots> = rat_of_int d * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int d *\n    (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x))) =\n    rat_of_int d * x", "by (metis Fract_of_int_quotient Rat_cases normalize_stable prod.sel(1) prod.sel(2) quotient_of_Fract)"], ["proof (state)\nthis:\n  rat_of_int d *\n  (rat_of_int (fst (quotient_of x)) / rat_of_int (snd (quotient_of x))) =\n  rat_of_int d * x\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  rat_of_int d * x \\<in> \\<int>", "have \"rat_of_int d * x \\<in> \\<int>\""], ["proof (prove)\nusing this:\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. rat_of_int d * x \\<in> \\<int>", "."], ["proof (state)\nthis:\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. x \\<in> supp f \\<Longrightarrow> False", "with False"], ["proof (chain)\npicking this:\n  rat_of_int d * x \\<notin> \\<int>\n  rat_of_int d * x \\<in> \\<int>", "show False"], ["proof (prove)\nusing this:\n  rat_of_int d * x \\<notin> \\<int>\n  rat_of_int d * x \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> supp f\n\ngoal (1 subgoal):\n 1. rat_of_int d * x \\<notin> \\<int> \\<Longrightarrow>\n    (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> supp f\n\ngoal (1 subgoal):\n 1. (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "using False"], ["proof (prove)\nusing this:\n  x \\<notin> supp f\n  rat_of_int d * x \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (if rat_of_int d * x \\<in> \\<int>\n     then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n     else (0::'a)) =\n    f x", "by (simp add: supp_def)"], ["proof (state)\nthis:\n  (if rat_of_int d * x \\<in> \\<int>\n   then f (rat_of_int \\<lfloor>rat_of_int d * x\\<rfloor> / rat_of_int d)\n   else (0::'a)) =\n  f x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if rat_of_int d * ?x \\<in> \\<int>\n   then f (rat_of_int \\<lfloor>rat_of_int d * ?x\\<rfloor> / rat_of_int d)\n   else (0::'a)) =\n  f ?x\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           if 0 < 1 /\n                  rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n           then if x /\n                   (1 /\n                    rat_of_nat\n                     (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                   \\<in> \\<int>\n                then f (rat_of_int\n                         \\<lfloor>x /\n                                  (1 /\n                                   rat_of_nat\n                                    (nat\n(LCM r\\<in>supp f. snd (quotient_of r))))\\<rfloor> /\n                        rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n                else (0::'a)\n           else (0::'a)) =\n       f", "thus ?case"], ["proof (prove)\nusing this:\n  (if rat_of_int d * ?x \\<in> \\<int>\n   then f (rat_of_int \\<lfloor>rat_of_int d * ?x\\<rfloor> / rat_of_int d)\n   else (0::'a)) =\n  f ?x\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if 0 < 1 / rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n        then if x /\n                (1 /\n                 rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                \\<in> \\<int>\n             then f (rat_of_int\n                      \\<lfloor>x /\n                               (1 /\n                                rat_of_nat\n                                 (nat (LCM r\\<in>supp f.\n    snd (quotient_of r))))\\<rfloor> /\n                     rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n             else (0::'a)\n        else (0::'a)) =\n    f", "using \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  (if rat_of_int d * ?x \\<in> \\<int>\n   then f (rat_of_int \\<lfloor>rat_of_int d * ?x\\<rfloor> / rat_of_int d)\n   else (0::'a)) =\n  f ?x\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if 0 < 1 / rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n        then if x /\n                (1 /\n                 rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n                \\<in> \\<int>\n             then f (rat_of_int\n                      \\<lfloor>x /\n                               (1 /\n                                rat_of_nat\n                                 (nat (LCM r\\<in>supp f.\n    snd (quotient_of r))))\\<rfloor> /\n                     rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n             else (0::'a)\n        else (0::'a)) =\n    f", "by (simp add: is_fpxs_def d_def mult_ac fun_eq_iff cong: if_cong)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      if 0 < 1 / rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r)))\n      then if x /\n              (1 / rat_of_nat (nat (LCM r\\<in>supp f. snd (quotient_of r))))\n              \\<in> \\<int>\n           then f (rat_of_int\n                    \\<lfloor>x /\n                             (1 /\n                              rat_of_nat\n                               (nat (LCM r\\<in>supp f.\n  snd (quotient_of r))))\\<rfloor> /\n                   rat_of_int (LCM r\\<in>supp f. snd (quotient_of r)))\n           else (0::'a)\n      else (0::'a)) =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_compose_power_0 [simp]: \"fpxs_compose_power 0 r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power 0 r = 0", "by transfer simp"], ["", "lemma fpxs_compose_power_1 [simp]: \"r > 0 \\<Longrightarrow> fpxs_compose_power 1 r = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r \\<Longrightarrow> fpxs_compose_power 1 r = 1", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fls_of_fpxs_eq_0_iff [simp]: \"fls_of_fpxs x = 0 \\<longleftrightarrow> x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fls_of_fpxs x = 0) = (x = 0)", "by (metis fls_of_fpxs_0 fpxs_as_fls fpxs_compose_power_0 fpxs_of_fls_0)"], ["", "lemma fpxs_of_fls_compose_power [simp]:\n  \"fpxs_of_fls (fls_compose_power f d) = fpxs_compose_power (fpxs_of_fls f) (of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (fls_compose_power f d) =\n    fpxs_compose_power (fpxs_of_fls f) (rat_of_nat d)", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f d.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       (\\<lambda>r.\n           if r \\<in> \\<int>\n           then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n                then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n           else (0::'a)) =\n       (\\<lambda>x.\n           if 0 < rat_of_nat d\n           then if x / rat_of_nat d \\<in> \\<int>\n                then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n           else (0::'a))", "case (1 f d)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>f d.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       (\\<lambda>r.\n           if r \\<in> \\<int>\n           then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n                then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n           else (0::'a)) =\n       (\\<lambda>x.\n           if 0 < rat_of_nat d\n           then if x / rat_of_nat d \\<in> \\<int>\n                then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n           else (0::'a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "proof (cases \"d = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "case False"], ["proof (state)\nthis:\n  d \\<noteq> 0\n\ngoal (2 subgoals):\n 1. d = 0 \\<Longrightarrow>\n    (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))\n 2. d \\<noteq> 0 \\<Longrightarrow>\n    (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "proof (intro ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       (if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n       (if 0 < rat_of_nat d\n        then if r / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "case (1 r)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>r.\n       (if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n       (if 0 < rat_of_nat d\n        then if r / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "proof (cases \"r \\<in> \\<int>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "case True"], ["proof (state)\nthis:\n  r \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "then"], ["proof (chain)\npicking this:\n  r \\<in> \\<int>", "obtain n where [simp]: \"r = of_int n\""], ["proof (prove)\nusing this:\n  r \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>n. r = rat_of_int n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases r rule: Ints_cases)"], ["proof (state)\nthis:\n  r = rat_of_int n\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "proof (cases \"d dvd n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))\n 2. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "case True"], ["proof (state)\nthis:\n  int d dvd n\n\ngoal (2 subgoals):\n 1. int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))\n 2. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  int d dvd n\n\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "by (auto elim!: Ints_cases)"], ["proof (state)\nthis:\n  (if r \\<in> \\<int>\n   then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n        then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n   else (0::'a)) =\n  (if 0 < rat_of_nat d\n   then if r / rat_of_nat d \\<in> \\<int>\n        then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n   else (0::'a))\n\ngoal (1 subgoal):\n 1. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "case False"], ["proof (state)\nthis:\n  \\<not> int d dvd n\n\ngoal (1 subgoal):\n 1. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "hence \"rat_of_int n / rat_of_int (int d) \\<notin> \\<int>\""], ["proof (prove)\nusing this:\n  \\<not> int d dvd n\n\ngoal (1 subgoal):\n 1. rat_of_int n / rat_of_int (int d) \\<notin> \\<int>", "using \\<open>d \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> int d dvd n\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. rat_of_int n / rat_of_int (int d) \\<notin> \\<int>", "by (subst of_int_div_of_int_in_Ints_iff) auto"], ["proof (state)\nthis:\n  rat_of_int n / rat_of_int (int d) \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. \\<not> int d dvd n \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  rat_of_int n / rat_of_int (int d) \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "using False"], ["proof (prove)\nusing this:\n  rat_of_int n / rat_of_int (int d) \\<notin> \\<int>\n  \\<not> int d dvd n\n\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "by auto"], ["proof (state)\nthis:\n  (if r \\<in> \\<int>\n   then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n        then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n   else (0::'a)) =\n  (if 0 < rat_of_nat d\n   then if r / rat_of_nat d \\<in> \\<int>\n        then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n   else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if r \\<in> \\<int>\n   then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n        then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n   else (0::'a)) =\n  (if 0 < rat_of_nat d\n   then if r / rat_of_nat d \\<in> \\<int>\n        then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n   else (0::'a))\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "case False"], ["proof (state)\nthis:\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "hence \"r / rat_of_nat d \\<notin> \\<int>\""], ["proof (prove)\nusing this:\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. r / rat_of_nat d \\<notin> \\<int>", "using \\<open>d \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  r \\<notin> \\<int>\n  d \\<noteq> 0\n\ngoal (1 subgoal):\n 1. r / rat_of_nat d \\<notin> \\<int>", "by (auto elim!: Ints_cases simp: field_simps)"], ["proof (state)\nthis:\n  r / rat_of_nat d \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "thus ?thesis"], ["proof (prove)\nusing this:\n  r / rat_of_nat d \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "using False"], ["proof (prove)\nusing this:\n  r / rat_of_nat d \\<notin> \\<int>\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int>\n     then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n          then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n     else (0::'a)) =\n    (if 0 < rat_of_nat d\n     then if r / rat_of_nat d \\<in> \\<int>\n          then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n     else (0::'a))", "by auto"], ["proof (state)\nthis:\n  (if r \\<in> \\<int>\n   then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n        then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n   else (0::'a)) =\n  (if 0 < rat_of_nat d\n   then if r / rat_of_nat d \\<in> \\<int>\n        then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n   else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (if r \\<in> \\<int>\n   then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n        then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n   else (0::'a)) =\n  (if 0 < rat_of_nat d\n   then if r / rat_of_nat d \\<in> \\<int>\n        then f \\<lfloor>r / rat_of_nat d\\<rfloor> else (0::'a)\n   else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      if r \\<in> \\<int>\n      then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n           then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n      else (0::'a)) =\n  (\\<lambda>x.\n      if 0 < rat_of_nat d\n      then if x / rat_of_nat d \\<in> \\<int>\n           then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n      else (0::'a))\n\ngoal (1 subgoal):\n 1. d = 0 \\<Longrightarrow>\n    (\\<lambda>r.\n        if r \\<in> \\<int>\n        then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n             then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n        else (0::'a)) =\n    (\\<lambda>x.\n        if 0 < rat_of_nat d\n        then if x / rat_of_nat d \\<in> \\<int>\n             then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n        else (0::'a))", "qed auto"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      if r \\<in> \\<int>\n      then if 0 < d \\<and> int d dvd \\<lfloor>r\\<rfloor>\n           then f (\\<lfloor>r\\<rfloor> div int d) else (0::'a)\n      else (0::'a)) =\n  (\\<lambda>x.\n      if 0 < rat_of_nat d\n      then if x / rat_of_nat d \\<in> \\<int>\n           then f \\<lfloor>x / rat_of_nat d\\<rfloor> else (0::'a)\n      else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_compose_power_add [simp]:\n  \"fpxs_compose_power (f + g) r = fpxs_compose_power f r + fpxs_compose_power g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (f + g) r =\n    fpxs_compose_power f r + fpxs_compose_power g r", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fpxs_compose_power_distrib:\n  \"r1 > 0 \\<or> r2 > 0 \\<Longrightarrow> \n     fpxs_compose_power (fpxs_compose_power f r1) r2 = fpxs_compose_power f (r1 * r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r1 \\<or> 0 < r2 \\<Longrightarrow>\n    fpxs_compose_power (fpxs_compose_power f r1) r2 =\n    fpxs_compose_power f (r1 * r2)", "by transfer (auto simp: fun_eq_iff algebra_simps zero_less_mult_iff)"], ["", "lemma fpxs_compose_power_divide_right:\n  \"r1 > 0 \\<Longrightarrow> r2 > 0 \\<Longrightarrow> \n     fpxs_compose_power f (r1 / r2) = fpxs_compose_power (fpxs_compose_power f r1) (inverse r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < r1; 0 < r2\\<rbrakk>\n    \\<Longrightarrow> fpxs_compose_power f (r1 / r2) =\n                      fpxs_compose_power (fpxs_compose_power f r1)\n                       (inverse r2)", "by (simp add: fpxs_compose_power_distrib field_simps)"], ["", "lemma fpxs_compose_power_1_right [simp]: \"fpxs_compose_power f 1 = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power f 1 = f", "by transfer auto"], ["", "lemma fpxs_compose_power_eq_iff [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_compose_power f r = fpxs_compose_power g r \\<longleftrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_compose_power f r = fpxs_compose_power g r) = (f = g)", "using assms"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power f r = fpxs_compose_power g r) = (f = g)", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r f g.\n       \\<lbrakk>0 < r; is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) =\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a))) =\n                         (f = g)", "case (1 r f g)"], ["proof (state)\nthis:\n  0 < r\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. \\<And>r f g.\n       \\<lbrakk>0 < r; is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) =\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a))) =\n                         (f = g)", "have \"f x = g x\" if \"\\<And>x. f (x / r) = g (x / r)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = g x", "using that[of \"x * r\"] \\<open>r > 0\\<close>"], ["proof (prove)\nusing this:\n  f (x * r / r) = g (x * r / r)\n  0 < r\n\ngoal (1 subgoal):\n 1. f x = g x", "by auto"], ["proof (state)\nthis:\n  (\\<And>x. f (x / r) = g (x / r)) \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. \\<And>r f g.\n       \\<lbrakk>0 < r; is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) =\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a))) =\n                         (f = g)", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<And>x. f (x / r) = g (x / r)) \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. if 0 < r then f (x / r) else (0::'a)) =\n     (\\<lambda>x. if 0 < r then g (x / r) else (0::'a))) =\n    (f = g)", "using \\<open>r > 0\\<close>"], ["proof (prove)\nusing this:\n  (\\<And>x. f (x / r) = g (x / r)) \\<Longrightarrow> f ?x = g ?x\n  0 < r\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. if 0 < r then f (x / r) else (0::'a)) =\n     (\\<lambda>x. if 0 < r then g (x / r) else (0::'a))) =\n    (f = g)", "by (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  ((\\<lambda>x. if 0 < r then f (x / r) else (0::'a)) =\n   (\\<lambda>x. if 0 < r then g (x / r) else (0::'a))) =\n  (f = g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_compose_power_eq_1_iff [simp]:\n  assumes \"l > 0\"\n  shows   \"fpxs_compose_power p l = 1 \\<longleftrightarrow> p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "have \"fpxs_compose_power p l = 1 \\<longleftrightarrow> fpxs_compose_power p l = fpxs_compose_power 1 l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) =\n    (fpxs_compose_power p l = fpxs_compose_power 1 l)", "by (subst fpxs_compose_power_1) (use assms in auto)"], ["proof (state)\nthis:\n  (fpxs_compose_power p l = 1) =\n  (fpxs_compose_power p l = fpxs_compose_power 1 l)\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "also"], ["proof (state)\nthis:\n  (fpxs_compose_power p l = 1) =\n  (fpxs_compose_power p l = fpxs_compose_power 1 l)\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "have \"\\<dots> \\<longleftrightarrow> p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = fpxs_compose_power 1 l) = (p = 1)", "using assms"], ["proof (prove)\nusing this:\n  0 < l\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = fpxs_compose_power 1 l) = (p = 1)", "by (subst fpxs_compose_power_eq_iff) auto"], ["proof (state)\nthis:\n  (fpxs_compose_power p l = fpxs_compose_power 1 l) = (p = 1)\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "finally"], ["proof (chain)\npicking this:\n  (fpxs_compose_power p l = 1) = (p = 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  (fpxs_compose_power p l = 1) = (p = 1)\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power p l = 1) = (p = 1)", "."], ["proof (state)\nthis:\n  (fpxs_compose_power p l = 1) = (p = 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_compose_power_eq_0_iff [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_compose_power f r = 0 \\<longleftrightarrow> f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_compose_power f r = 0) = (f = 0)", "using fpxs_compose_power_eq_iff[of r f 0] assms"], ["proof (prove)\nusing this:\n  0 < r \\<Longrightarrow>\n  (fpxs_compose_power f r = fpxs_compose_power 0 r) = (f = 0)\n  0 < r\n\ngoal (1 subgoal):\n 1. (fpxs_compose_power f r = 0) = (f = 0)", "by (simp del: fpxs_compose_power_eq_iff)"], ["", "lemma fls_of_fpxs_of_fls [simp]: \"fls_of_fpxs (fpxs_of_fls f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs (fpxs_of_fls f) = f", "using fpxs_as_fls[of \"fpxs_of_fls f\"]"], ["proof (prove)\nusing this:\n  fpxs_compose_power (fpxs_of_fls (fls_of_fpxs (fpxs_of_fls f)))\n   (1 / rat_of_nat (fpxs_root_order (fpxs_of_fls f))) =\n  fpxs_of_fls f\n\ngoal (1 subgoal):\n 1. fls_of_fpxs (fpxs_of_fls f) = f", "by simp"], ["", "lemma fpxs_as_fls':\n  assumes \"fpxs_root_order f dvd d\" \"d > 0\"\n  obtains f' where \"f = fpxs_compose_power (fpxs_of_fls f') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "define D where \"D = fpxs_root_order f\""], ["proof (state)\nthis:\n  D = fpxs_root_order f\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"D > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < D", "by (auto simp: D_def)"], ["proof (state)\nthis:\n  0 < D\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "define f' where \"f' = fls_of_fpxs f\""], ["proof (state)\nthis:\n  f' = fls_of_fpxs f\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  fpxs_root_order f dvd d\n  0 < d", "obtain d' where d': \"d = D * d'\""], ["proof (prove)\nusing this:\n  fpxs_root_order f dvd d\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>d'. d = D * d' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: D_def)"], ["proof (state)\nthis:\n  d = D * d'\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"d' > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d'", "using assms"], ["proof (prove)\nusing this:\n  fpxs_root_order f dvd d\n  0 < d\n\ngoal (1 subgoal):\n 1. 0 < d'", "by (auto intro!: Nat.gr0I simp: d')"], ["proof (state)\nthis:\n  0 < d'\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "define f'' where \"f'' = fls_compose_power f' d'\""], ["proof (state)\nthis:\n  f'' = fls_compose_power f' d'\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"fpxs_compose_power (fpxs_of_fls f'') (1 / of_nat d) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) = f", "using \\<open>D > 0\\<close> \\<open>d' > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < D\n  0 < d'\n\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) = f", "by (simp add: d' D_def f''_def f'_def fpxs_as_fls fpxs_compose_power_distrib)"], ["proof (state)\nthis:\n  fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) = f\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) = f\n\ngoal (1 subgoal):\n 1. thesis", "using that[of f'']"], ["proof (prove)\nusing this:\n  fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) = f\n  f =\n  fpxs_compose_power (fpxs_of_fls f'') (1 / rat_of_nat d) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Mutiplication and ring properties\\<close>"], ["", "instantiation fpxs :: (comm_semiring_1) comm_semiring_1\nbegin"], ["", "lift_definition times_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>f g x. (\\<Sum>(y,z) | y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z. f y * g z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs\n                          (\\<lambda>x.\n                              \\<Sum>(y, z)\n                                    \\<in>{(y, z).\n    y \\<in> supp fun1 \\<and> z \\<in> supp fun2 \\<and> x = y + z}.\n                                fun1 y * fun2 z)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs\n                          (\\<lambda>x.\n                              \\<Sum>(y, z)\n                                    \\<in>{(y, z).\n    y \\<in> supp fun1 \\<and> z \\<in> supp fun2 \\<and> x = y + z}.\n                                fun1 y * fun2 z)", "fix f g :: \"rat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs\n                          (\\<lambda>x.\n                              \\<Sum>(y, z)\n                                    \\<in>{(y, z).\n    y \\<in> supp fun1 \\<and> z \\<in> supp fun2 \\<and> x = y + z}.\n                                fun1 y * fun2 z)", "assume fg: \"is_fpxs f\" \"is_fpxs g\""], ["proof (state)\nthis:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. \\<And>fun1 fun2.\n       \\<lbrakk>is_fpxs fun1; is_fpxs fun2\\<rbrakk>\n       \\<Longrightarrow> is_fpxs\n                          (\\<lambda>x.\n                              \\<Sum>(y, z)\n                                    \\<in>{(y, z).\n    y \\<in> supp fun1 \\<and> z \\<in> supp fun2 \\<and> x = y + z}.\n                                fun1 y * fun2 z)", "show \"is_fpxs (\\<lambda>x. \\<Sum>(y,z) | y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z. f y * g z)\"\n    (is \"is_fpxs ?h\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs\n     (\\<lambda>x.\n         \\<Sum>(y, z)\n               \\<in>{(y, z).\n                     y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n           f y * g z)", "unfolding is_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z)) \\<and>\n    (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))\n 2. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "from fg"], ["proof (chain)\npicking this:\n  is_fpxs f\n  is_fpxs g", "obtain bnd1 bnd2 where bnds: \"\\<forall>x\\<in>supp f. x \\<ge> bnd1\" \"\\<forall>x\\<in>supp g. x \\<ge> bnd2\""], ["proof (prove)\nusing this:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. (\\<And>bnd1 bnd2.\n        \\<lbrakk>\\<forall>x\\<in>supp f. bnd1 \\<le> x;\n         \\<forall>x\\<in>supp g. bnd2 \\<le> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: is_fpxs_def bdd_below_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>supp f. bnd1 \\<le> x\n  \\<forall>x\\<in>supp g. bnd2 \\<le> x\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))\n 2. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"supp ?h \\<subseteq> (\\<lambda>(x,y). x + y) ` (supp f \\<times> supp g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     (\\<lambda>x.\n         \\<Sum>(y, z)\n               \\<in>{(y, z).\n                     y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n           f y * g z)\n    \\<subseteq> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "fix x :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "assume \"x \\<in> supp ?h\""], ["proof (state)\nthis:\n  x \\<in> supp\n           (\\<lambda>x.\n               \\<Sum>(y, z)\n                     \\<in>{(y, z).\n                           y \\<in> supp f \\<and>\n                           z \\<in> supp g \\<and> x = y + z}.\n                 f y * g z)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "have \"{(y,z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} \\<noteq>\n    {}", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} =\n    {} \\<Longrightarrow>\n    False", "assume eq: \"{(y,z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} = {}\""], ["proof (state)\nthis:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} = {}\n\ngoal (1 subgoal):\n 1. {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} =\n    {} \\<Longrightarrow>\n    False", "hence \"?h x = 0\""], ["proof (prove)\nusing this:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} = {}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n       f y * g z) =\n    (0::'a)", "by (simp only:) auto"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n     f y * g z) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} =\n    {} \\<Longrightarrow>\n    False", "with \\<open>x \\<in> supp ?h\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> supp\n           (\\<lambda>x.\n               \\<Sum>(y, z)\n                     \\<in>{(y, z).\n                           y \\<in> supp f \\<and>\n                           z \\<in> supp g \\<and> x = y + z}.\n                 f y * g z)\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n     f y * g z) =\n  (0::'a)", "show False"], ["proof (prove)\nusing this:\n  x \\<in> supp\n           (\\<lambda>x.\n               \\<Sum>(y, z)\n                     \\<in>{(y, z).\n                           y \\<in> supp f \\<and>\n                           z \\<in> supp g \\<and> x = y + z}.\n                 f y * g z)\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n     f y * g z) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: supp_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "thus \"x \\<in> (\\<lambda>(x,y). x + y) ` (supp f \\<times> supp g)\""], ["proof (prove)\nusing this:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)", "by auto"], ["proof (state)\nthis:\n  x \\<in> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  supp\n   (\\<lambda>x.\n       \\<Sum>(y, z)\n             \\<in>{(y, z).\n                   y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n         f y * g z)\n  \\<subseteq> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))\n 2. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "also"], ["proof (state)\nthis:\n  supp\n   (\\<lambda>x.\n       \\<Sum>(y, z)\n             \\<in>{(y, z).\n                   y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n         f y * g z)\n  \\<subseteq> (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))\n 2. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"\\<dots> \\<subseteq> {bnd1 + bnd2..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n    \\<subseteq> {bnd1 + bnd2..}", "using bnds"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>supp f. bnd1 \\<le> x\n  \\<forall>x\\<in>supp g. bnd2 \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n    \\<subseteq> {bnd1 + bnd2..}", "by (auto intro: add_mono)"], ["proof (state)\nthis:\n  (\\<lambda>(x, y). x + y) ` (supp f \\<times> supp g)\n  \\<subseteq> {bnd1 + bnd2..}\n\ngoal (2 subgoals):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))\n 2. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "finally"], ["proof (chain)\npicking this:\n  supp\n   (\\<lambda>x.\n       \\<Sum>(y, z)\n             \\<in>{(y, z).\n                   y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n         f y * g z)\n  \\<subseteq> {bnd1 + bnd2..}", "show \"bdd_below (supp ?h)\""], ["proof (prove)\nusing this:\n  supp\n   (\\<lambda>x.\n       \\<Sum>(y, z)\n             \\<in>{(y, z).\n                   y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n         f y * g z)\n  \\<subseteq> {bnd1 + bnd2..}\n\ngoal (1 subgoal):\n 1. bdd_below\n     (supp\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp f \\<and>\n                       z \\<in> supp g \\<and> x = y + z}.\n             f y * g z))", "by auto"], ["proof (state)\nthis:\n  bdd_below\n   (supp\n     (\\<lambda>x.\n         \\<Sum>(y, z)\n               \\<in>{(y, z).\n                     y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n           f y * g z))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "define d1 where \"d1 = (LCM r\\<in>supp f. snd (quotient_of r))\""], ["proof (state)\nthis:\n  d1 = (LCM r\\<in>supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "define d2 where \"d2 = (LCM r\\<in>supp g. snd (quotient_of r))\""], ["proof (state)\nthis:\n  d2 = (LCM r\\<in>supp g. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"(LCM r\\<in>supp ?h. snd (quotient_of r)) dvd (d1 * d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) dvd\n    d1 * d2", "proof (intro Lcm_least, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "fix r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "assume \"r \\<in> supp ?h\""], ["proof (state)\nthis:\n  r \\<in> supp\n           (\\<lambda>x.\n               \\<Sum>(y, z)\n                     \\<in>{(y, z).\n                           y \\<in> supp f \\<and>\n                           z \\<in> supp g \\<and> x = y + z}.\n                 f y * g z)\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "hence \"(\\<Sum>(y, z) | y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z. f y * g z) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  r \\<in> supp\n           (\\<lambda>x.\n               \\<Sum>(y, z)\n                     \\<in>{(y, z).\n                           y \\<in> supp f \\<and>\n                           z \\<in> supp g \\<and> x = y + z}.\n                 f y * g z)\n\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z}.\n       f y * g z) \\<noteq>\n    (0::'a)", "by (auto simp: supp_def)"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z}.\n     f y * g z) \\<noteq>\n  (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "hence \"{(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z}.\n     f y * g z) \\<noteq>\n  (0::'a)\n\ngoal (1 subgoal):\n 1. {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z} \\<noteq>\n    {}", "by (intro notI) simp_all"], ["proof (state)\nthis:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "then"], ["proof (chain)\npicking this:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z} \\<noteq>\n  {}", "obtain y z where yz: \"y \\<in> supp f\" \"z \\<in> supp g\" \"r = y + z\""], ["proof (prove)\nusing this:\n  {(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> r = y + z} \\<noteq>\n  {}\n\ngoal (1 subgoal):\n 1. (\\<And>y z.\n        \\<lbrakk>y \\<in> supp f; z \\<in> supp g; r = y + z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y \\<in> supp f\n  z \\<in> supp g\n  r = y + z\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "have \"snd (quotient_of r) = snd (quotient_of y) * snd (quotient_of z) div\n              gcd (fst (quotient_of y) * snd (quotient_of z) +\n                   fst (quotient_of z) * snd (quotient_of y))\n                  (snd (quotient_of y) * snd (quotient_of z))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of r) =\n    snd (quotient_of y) * snd (quotient_of z) div\n    gcd (fst (quotient_of y) * snd (quotient_of z) +\n         fst (quotient_of z) * snd (quotient_of y))\n     (snd (quotient_of y) * snd (quotient_of z))", "by (simp add: \\<open>r = _\\<close> rat_plus_code case_prod_unfold Let_def\n                      Rat.normalize_def quotient_of_denom_pos')"], ["proof (state)\nthis:\n  snd (quotient_of r) =\n  snd (quotient_of y) * snd (quotient_of z) div\n  gcd (fst (quotient_of y) * snd (quotient_of z) +\n       fst (quotient_of z) * snd (quotient_of y))\n   (snd (quotient_of y) * snd (quotient_of z))\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "also"], ["proof (state)\nthis:\n  snd (quotient_of r) =\n  snd (quotient_of y) * snd (quotient_of z) div\n  gcd (fst (quotient_of y) * snd (quotient_of z) +\n       fst (quotient_of z) * snd (quotient_of y))\n   (snd (quotient_of y) * snd (quotient_of z))\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "have \"\\<dots> dvd snd (quotient_of y) * snd (quotient_of z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of y) * snd (quotient_of z) div\n    gcd (fst (quotient_of y) * snd (quotient_of z) +\n         fst (quotient_of z) * snd (quotient_of y))\n     (snd (quotient_of y) * snd (quotient_of z)) dvd\n    snd (quotient_of y) * snd (quotient_of z)", "by (metis dvd_def dvd_div_mult_self gcd_dvd2)"], ["proof (state)\nthis:\n  snd (quotient_of y) * snd (quotient_of z) div\n  gcd (fst (quotient_of y) * snd (quotient_of z) +\n       fst (quotient_of z) * snd (quotient_of y))\n   (snd (quotient_of y) * snd (quotient_of z)) dvd\n  snd (quotient_of y) * snd (quotient_of z)\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "also"], ["proof (state)\nthis:\n  snd (quotient_of y) * snd (quotient_of z) div\n  gcd (fst (quotient_of y) * snd (quotient_of z) +\n       fst (quotient_of z) * snd (quotient_of y))\n   (snd (quotient_of y) * snd (quotient_of z)) dvd\n  snd (quotient_of y) * snd (quotient_of z)\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "have \"\\<dots> dvd d1 * d2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (quotient_of y) * snd (quotient_of z) dvd d1 * d2", "using yz"], ["proof (prove)\nusing this:\n  y \\<in> supp f\n  z \\<in> supp g\n  r = y + z\n\ngoal (1 subgoal):\n 1. snd (quotient_of y) * snd (quotient_of z) dvd d1 * d2", "by (auto simp: d1_def d2_def intro!: mult_dvd_mono)"], ["proof (state)\nthis:\n  snd (quotient_of y) * snd (quotient_of z) dvd d1 * d2\n\ngoal (1 subgoal):\n 1. \\<And>b r.\n       r \\<in> supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z) \\<Longrightarrow>\n       snd (quotient_of r) dvd d1 * d2", "finally"], ["proof (chain)\npicking this:\n  snd (quotient_of r) dvd d1 * d2", "show \"snd (quotient_of r) dvd d1 * d2\""], ["proof (prove)\nusing this:\n  snd (quotient_of r) dvd d1 * d2\n\ngoal (1 subgoal):\n 1. snd (quotient_of r) dvd d1 * d2", "by (simp add: d1_def d2_def)"], ["proof (state)\nthis:\n  snd (quotient_of r) dvd d1 * d2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (LCM r\\<in>supp\n              (\\<lambda>x.\n                  \\<Sum>(y, z)\n                        \\<in>{(y, z).\n                              y \\<in> supp f \\<and>\n                              z \\<in> supp g \\<and> x = y + z}.\n                    f y * g z).\n      snd (quotient_of r)) dvd\n  d1 * d2\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "moreover"], ["proof (state)\nthis:\n  (LCM r\\<in>supp\n              (\\<lambda>x.\n                  \\<Sum>(y, z)\n                        \\<in>{(y, z).\n                              y \\<in> supp f \\<and>\n                              z \\<in> supp g \\<and> x = y + z}.\n                    f y * g z).\n      snd (quotient_of r)) dvd\n  d1 * d2\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "have \"d1 * d2 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d1 * d2 \\<noteq> 0", "using fg"], ["proof (prove)\nusing this:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. d1 * d2 \\<noteq> 0", "by (auto simp: d1_def d2_def is_fpxs_def)"], ["proof (state)\nthis:\n  d1 * d2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "ultimately"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp\n              (\\<lambda>x.\n                  \\<Sum>(y, z)\n                        \\<in>{(y, z).\n                              y \\<in> supp f \\<and>\n                              z \\<in> supp g \\<and> x = y + z}.\n                    f y * g z).\n      snd (quotient_of r)) dvd\n  d1 * d2\n  d1 * d2 \\<noteq> 0", "show \"(LCM r\\<in>supp ?h. snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp\n              (\\<lambda>x.\n                  \\<Sum>(y, z)\n                        \\<in>{(y, z).\n                              y \\<in> supp f \\<and>\n                              z \\<in> supp g \\<and> x = y + z}.\n                    f y * g z).\n      snd (quotient_of r)) dvd\n  d1 * d2\n  d1 * d2 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp\n                (\\<lambda>x.\n                    \\<Sum>(y, z)\n                          \\<in>{(y, z).\n                                y \\<in> supp f \\<and>\n                                z \\<in> supp g \\<and> x = y + z}.\n                      f y * g z).\n        snd (quotient_of r)) \\<noteq>\n    0", "by auto"], ["proof (state)\nthis:\n  (LCM r\\<in>supp\n              (\\<lambda>x.\n                  \\<Sum>(y, z)\n                        \\<in>{(y, z).\n                              y \\<in> supp f \\<and>\n                              z \\<in> supp g \\<and> x = y + z}.\n                    f y * g z).\n      snd (quotient_of r)) \\<noteq>\n  0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_fpxs\n   (\\<lambda>x.\n       \\<Sum>(y, z)\n             \\<in>{(y, z).\n                   y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n         f y * g z)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_nth_mult:\n  \"fpxs_nth (f * g) r =\n     (\\<Sum>(y,z) | y \\<in> fpxs_supp f \\<and> z \\<in> fpxs_supp g \\<and> r = y + z. fpxs_nth f y * fpxs_nth g z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f * g) r =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp f \\<and>\n                 z \\<in> fpxs_supp g \\<and> r = y + z}.\n       fpxs_nth f y * fpxs_nth g z)", "by transfer simp"], ["", "lemma fpxs_compose_power_mult [simp]:\n  \"fpxs_compose_power (f * g) r = fpxs_compose_power f r * fpxs_compose_power g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (f * g) r =\n    fpxs_compose_power f r * fpxs_compose_power g r", "proof (transfer, rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g r x.\n       \\<lbrakk>is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> (if 0 < r\n                          then \\<Sum>(y, z)\n                                     \\<in>{(y, z).\n     y \\<in> supp f \\<and> z \\<in> supp g \\<and> x / r = y + z}.\n                                 f y * g z\n                          else (0::'a)) =\n                         (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp (\\<lambda>x. if 0 < r then f (x / r) else (0::'a)) \\<and>\nz \\<in> supp (\\<lambda>x. if 0 < r then g (x / r) else (0::'a)) \\<and>\nx = y + z}.\n                            (if 0 < r then f (y / r) else (0::'a)) *\n                            (if 0 < r then g (z / r) else (0::'a)))", "case (1 f g r x)"], ["proof (state)\nthis:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. \\<And>f g r x.\n       \\<lbrakk>is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> (if 0 < r\n                          then \\<Sum>(y, z)\n                                     \\<in>{(y, z).\n     y \\<in> supp f \\<and> z \\<in> supp g \\<and> x / r = y + z}.\n                                 f y * g z\n                          else (0::'a)) =\n                         (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp (\\<lambda>x. if 0 < r then f (x / r) else (0::'a)) \\<and>\nz \\<in> supp (\\<lambda>x. if 0 < r then g (x / r) else (0::'a)) \\<and>\nx = y + z}.\n                            (if 0 < r then f (y / r) else (0::'a)) *\n                            (if 0 < r then g (z / r) else (0::'a)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "proof (cases \"r > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))\n 2. \\<not> 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "case True"], ["proof (state)\nthis:\n  0 < r\n\ngoal (2 subgoals):\n 1. 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))\n 2. \\<not> 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "have \"(\\<Sum>x\\<in>{(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x / r = y + z}.\n            case x of (y, z) \\<Rightarrow> f y * g z) =\n          (\\<Sum>x\\<in>{(y, z). y \\<in> supp (\\<lambda>x. f (x / r)) \\<and> z \\<in> supp (\\<lambda>x. g (x / r)) \\<and> x = y + z}.\n            case x of (y, z) \\<Rightarrow> f (y / r) * g (z / r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>x\\<in>{(y, z).\n                  y \\<in> supp f \\<and>\n                  z \\<in> supp g \\<and> x / r = y + z}.\n       case x of (y, z) \\<Rightarrow> f y * g z) =\n    (\\<Sum>x\\<in>{(y, z).\n                  y \\<in> supp (\\<lambda>x. f (x / r)) \\<and>\n                  z \\<in> supp (\\<lambda>x. g (x / r)) \\<and> x = y + z}.\n       case x of (y, z) \\<Rightarrow> f (y / r) * g (z / r))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(x,y). (x/r,y/r)\" \"\\<lambda>(x,y). (x*r,y*r)\"])\n         (use \\<open>r > 0\\<close> in \\<open>auto simp: supp_def field_simps\\<close>)"], ["proof (state)\nthis:\n  (\\<Sum>x\\<in>{(y, z).\n                y \\<in> supp f \\<and> z \\<in> supp g \\<and> x / r = y + z}.\n     case x of (y, z) \\<Rightarrow> f y * g z) =\n  (\\<Sum>x\\<in>{(y, z).\n                y \\<in> supp (\\<lambda>x. f (x / r)) \\<and>\n                z \\<in> supp (\\<lambda>x. g (x / r)) \\<and> x = y + z}.\n     case x of (y, z) \\<Rightarrow> f (y / r) * g (z / r))\n\ngoal (2 subgoals):\n 1. 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))\n 2. \\<not> 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<in>{(y, z).\n                y \\<in> supp f \\<and> z \\<in> supp g \\<and> x / r = y + z}.\n     case x of (y, z) \\<Rightarrow> f y * g z) =\n  (\\<Sum>x\\<in>{(y, z).\n                y \\<in> supp (\\<lambda>x. f (x / r)) \\<and>\n                z \\<in> supp (\\<lambda>x. g (x / r)) \\<and> x = y + z}.\n     case x of (y, z) \\<Rightarrow> f (y / r) * g (z / r))\n\ngoal (1 subgoal):\n 1. (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "by (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  (if 0 < r\n   then \\<Sum>(y, z)\n              \\<in>{(y, z).\n                    y \\<in> supp f \\<and>\n                    z \\<in> supp g \\<and> x / r = y + z}.\n          f y * g z\n   else (0::'a)) =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp\n                        (\\<lambda>x.\n                            if 0 < r then f (x / r) else (0::'a)) \\<and>\n               z \\<in> supp\n                        (\\<lambda>x.\n                            if 0 < r then g (x / r) else (0::'a)) \\<and>\n               x = y + z}.\n     (if 0 < r then f (y / r) else (0::'a)) *\n     (if 0 < r then g (z / r) else (0::'a)))\n\ngoal (1 subgoal):\n 1. \\<not> 0 < r \\<Longrightarrow>\n    (if 0 < r\n     then \\<Sum>(y, z)\n                \\<in>{(y, z).\n                      y \\<in> supp f \\<and>\n                      z \\<in> supp g \\<and> x / r = y + z}.\n            f y * g z\n     else (0::'a)) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then f (x / r) else (0::'a)) \\<and>\n                 z \\<in> supp\n                          (\\<lambda>x.\n                              if 0 < r then g (x / r) else (0::'a)) \\<and>\n                 x = y + z}.\n       (if 0 < r then f (y / r) else (0::'a)) *\n       (if 0 < r then g (z / r) else (0::'a)))", "qed auto"], ["proof (state)\nthis:\n  (if 0 < r\n   then \\<Sum>(y, z)\n              \\<in>{(y, z).\n                    y \\<in> supp f \\<and>\n                    z \\<in> supp g \\<and> x / r = y + z}.\n          f y * g z\n   else (0::'a)) =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp\n                        (\\<lambda>x.\n                            if 0 < r then f (x / r) else (0::'a)) \\<and>\n               z \\<in> supp\n                        (\\<lambda>x.\n                            if 0 < r then g (x / r) else (0::'a)) \\<and>\n               x = y + z}.\n     (if 0 < r then f (y / r) else (0::'a)) *\n     (if 0 < r then g (z / r) else (0::'a)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_supp_of_fls: \"fpxs_supp (fpxs_of_fls f) = of_int ` supp (fls_nth f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_supp (fpxs_of_fls f) = rat_of_int ` supp (fls_nth f)", "by (force simp: fpxs_supp_def fpxs_nth_of_fls supp_def elim!: Ints_cases)"], ["", "lemma fpxs_of_fls_mult [simp]: \"fpxs_of_fls (f * g) = fpxs_of_fls f * fpxs_of_fls g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (f * g) = fpxs_of_fls f * fpxs_of_fls g", "proof (rule fpxs_ext)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       fpxs_nth (fpxs_of_fls (f * g)) r =\n       fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "fix r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       fpxs_nth (fpxs_of_fls (f * g)) r =\n       fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "show \"fpxs_nth (fpxs_of_fls (f * g)) r = fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "proof (cases \"r \\<in> \\<int>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "case True"], ["proof (state)\nthis:\n  r \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "define h1 where \"h1 = (\\<lambda>(x, y). (\\<lfloor>x::rat\\<rfloor>, \\<lfloor>y::rat\\<rfloor>))\""], ["proof (state)\nthis:\n  h1 = (\\<lambda>(x, y). (\\<lfloor>x\\<rfloor>, \\<lfloor>y\\<rfloor>))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "define h2 where \"h2 = (\\<lambda>(x, y). (of_int x :: rat, of_int y :: rat))\""], ["proof (state)\nthis:\n  h2 = (\\<lambda>(x, y). (rat_of_int x, rat_of_int y))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "define df dg where [simp]: \"df = fls_subdegree f\" \"dg = fls_subdegree g\""], ["proof (state)\nthis:\n  df = fls_subdegree f\n  dg = fls_subdegree g\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "from True"], ["proof (chain)\npicking this:\n  r \\<in> \\<int>", "obtain n where [simp]: \"r = of_int n\""], ["proof (prove)\nusing this:\n  r \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>n. r = rat_of_int n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases rule: Ints_cases)"], ["proof (state)\nthis:\n  r = rat_of_int n\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n            (\\<Sum>(y,z) | y \\<in> fpxs_supp (fpxs_of_fls f) \\<and> z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> rat_of_int n = y + z.\n              (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else 0) * (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n                 z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n                 rat_of_int n = y + z}.\n       (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n       (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))", "by (auto simp: fpxs_nth_mult fpxs_nth_of_fls)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n               rat_of_int n = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n               rat_of_int n = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"\\<dots> = (\\<Sum>(y,z) | y \\<in> supp (fls_nth f) \\<and> z \\<in> supp (fls_nth g) \\<and> n = y + z.\n                      fls_nth f y * fls_nth g z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n                 z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n                 rat_of_int n = y + z}.\n       (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n       (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor>\n        else (0::'a))) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp (fls_nth f) \\<and>\n                 z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n       fls_nth f y * fls_nth g z)", "by (rule sum.reindex_bij_witness[of _ h2 h1]) (auto simp: h1_def h2_def fpxs_supp_of_fls)"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n               rat_of_int n = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a))) =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp (fls_nth f) \\<and>\n               z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n     fls_nth f y * fls_nth g z)\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and>\n               rat_of_int n = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a))) =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp (fls_nth f) \\<and>\n               z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n     fls_nth f y * fls_nth g z)\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"\\<dots> = (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and> fls_subdegree g + n - y \\<in> supp (fls_nth g).\n                      fls_nth f (y - fls_subdegree g) * fls_nth g (fls_subdegree g + n - y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp (fls_nth f) \\<and>\n                 z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n       fls_nth f y * fls_nth g z) =\n    (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n               fls_subdegree g + n - y \\<in> supp (fls_nth g).\n       fls_nth f (y - fls_subdegree g) *\n       fls_nth g (fls_subdegree g + n - y))", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>y. (y - fls_subdegree g, fls_subdegree g + n - y)\" \"\\<lambda>z. fst z + fls_subdegree g\"])\n         auto"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp (fls_nth f) \\<and>\n               z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n     fls_nth f y * fls_nth g z) =\n  (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n             fls_subdegree g + n - y \\<in> supp (fls_nth g).\n     fls_nth f (y - fls_subdegree g) * fls_nth g (fls_subdegree g + n - y))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp (fls_nth f) \\<and>\n               z \\<in> supp (fls_nth g) \\<and> n = y + z}.\n     fls_nth f y * fls_nth g z) =\n  (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n             fls_subdegree g + n - y \\<in> supp (fls_nth g).\n     fls_nth f (y - fls_subdegree g) * fls_nth g (fls_subdegree g + n - y))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"\\<dots> = (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n              fls_nth f (i - fls_subdegree g) * fls_nth g (fls_subdegree g + n - i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n               fls_subdegree g + n - y \\<in> supp (fls_nth g).\n       fls_nth f (y - fls_subdegree g) *\n       fls_nth g (fls_subdegree g + n - y)) =\n    (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n        fls_nth f (i - fls_subdegree g) *\n        fls_nth g (fls_subdegree g + n - i))", "using fls_subdegree_leI[of f] fls_subdegree_leI [of g]"], ["proof (prove)\nusing this:\n  fls_nth f ?n \\<noteq> (0::'a) \\<Longrightarrow> fls_subdegree f \\<le> ?n\n  fls_nth g ?n \\<noteq> (0::'a) \\<Longrightarrow> fls_subdegree g \\<le> ?n\n\ngoal (1 subgoal):\n 1. (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n               fls_subdegree g + n - y \\<in> supp (fls_nth g).\n       fls_nth f (y - fls_subdegree g) *\n       fls_nth g (fls_subdegree g + n - y)) =\n    (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n        fls_nth f (i - fls_subdegree g) *\n        fls_nth g (fls_subdegree g + n - i))", "by (intro sum.mono_neutral_left; force simp: supp_def)"], ["proof (state)\nthis:\n  (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n             fls_subdegree g + n - y \\<in> supp (fls_nth g).\n     fls_nth f (y - fls_subdegree g) *\n     fls_nth g (fls_subdegree g + n - y)) =\n  (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n      fls_nth f (i - fls_subdegree g) * fls_nth g (fls_subdegree g + n - i))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  (\\<Sum>y | y - fls_subdegree g \\<in> supp (fls_nth f) \\<and>\n             fls_subdegree g + n - y \\<in> supp (fls_nth g).\n     fls_nth f (y - fls_subdegree g) *\n     fls_nth g (fls_subdegree g + n - y)) =\n  (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n      fls_nth f (i - fls_subdegree g) * fls_nth g (fls_subdegree g + n - i))\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"\\<dots> = fpxs_nth (fpxs_of_fls (f * g)) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n        fls_nth f (i - fls_subdegree g) *\n        fls_nth g (fls_subdegree g + n - i)) =\n    fpxs_nth (fpxs_of_fls (f * g)) r", "by (auto simp: fls_times_nth fpxs_nth_of_fls)"], ["proof (state)\nthis:\n  (\\<Sum>i = fls_subdegree f + fls_subdegree g..n.\n      fls_nth f (i - fls_subdegree g) *\n      fls_nth g (fls_subdegree g + n - i)) =\n  fpxs_nth (fpxs_of_fls (f * g)) r\n\ngoal (2 subgoals):\n 1. r \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n 2. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  fpxs_nth (fpxs_of_fls (f * g)) r", "show ?thesis"], ["proof (prove)\nusing this:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  fpxs_nth (fpxs_of_fls (f * g)) r\n\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", ".."], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls (f * g)) r =\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "case False"], ["proof (state)\nthis:\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n            (\\<Sum>(y,z) | y \\<in> fpxs_supp (fpxs_of_fls f) \\<and> z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z.\n              (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else 0) * (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n                 z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n       (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n       (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))", "by (simp add: fpxs_nth_mult fpxs_nth_of_fls)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a)))\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n                 z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n       (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n       (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor>\n        else (0::'a))) =\n    (0::'a)", "using False"], ["proof (prove)\nusing this:\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n                 z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n       (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n       (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor>\n        else (0::'a))) =\n    (0::'a)", "by (intro sum.neutral ballI) auto"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a))) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "also"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> fpxs_supp (fpxs_of_fls f) \\<and>\n               z \\<in> fpxs_supp (fpxs_of_fls g) \\<and> r = y + z}.\n     (if y \\<in> \\<int> then fls_nth f \\<lfloor>y\\<rfloor> else (0::'a)) *\n     (if z \\<in> \\<int> then fls_nth g \\<lfloor>z\\<rfloor> else (0::'a))) =\n  (0::'a)\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "have \"0 = fpxs_nth (fpxs_of_fls (f * g)) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) = fpxs_nth (fpxs_of_fls (f * g)) r", "using False"], ["proof (prove)\nusing this:\n  r \\<notin> \\<int>\n\ngoal (1 subgoal):\n 1. (0::'a) = fpxs_nth (fpxs_of_fls (f * g)) r", "by (simp add: fpxs_nth_of_fls)"], ["proof (state)\nthis:\n  (0::'a) = fpxs_nth (fpxs_of_fls (f * g)) r\n\ngoal (1 subgoal):\n 1. r \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  fpxs_nth (fpxs_of_fls (f * g)) r", "show ?thesis"], ["proof (prove)\nusing this:\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r =\n  fpxs_nth (fpxs_of_fls (f * g)) r\n\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls (f * g)) r =\n    fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r", ".."], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls (f * g)) r =\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls (f * g)) r =\n  fpxs_nth (fpxs_of_fls f * fpxs_of_fls g) r\n\ngoal:\nNo subgoals!", "qed"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, comm_semiring_1_class)", "proof"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a. 1 * a = a\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a. 0 * a = 0\n 6. \\<And>a. a * 0 = 0\n 7. 0 \\<noteq> 1", "show \"0 \\<noteq> (1 :: 'a fpxs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> 1", "by transfer (auto simp: fun_eq_iff)"], ["proof (state)\nthis:\n  0 \\<noteq> 1\n\ngoal (6 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a. 1 * a = a\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a. 0 * a = 0\n 6. \\<And>a. a * 0 = 0", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a. 1 * a = a\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a. 0 * a = 0\n 6. \\<And>a. a * 0 = 0", "fix f :: \"'a fpxs\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a. 1 * a = a\n 4. \\<And>a b c. (a + b) * c = a * c + b * c\n 5. \\<And>a. 0 * a = 0\n 6. \\<And>a. a * 0 = 0", "show \"1 * f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 * f = f", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>r.\n                                    if r = 0 then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp f \\<and> x = y + z}.\n             (if y = 0 then 1::'a else (0::'a)) * f z) =\n       f", "case (1 f)"], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>r.\n                                    if r = 0 then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp f \\<and> x = y + z}.\n             (if y = 0 then 1::'a else (0::'a)) * f z) =\n       f", "have \"{(y, z). y \\<in> supp (\\<lambda>r. if r = 0 then (1::'a) else 0) \\<and> z \\<in> supp f \\<and> x = y + z} =\n            (if x \\<in> supp f then {(0, x)} else {})\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, z).\n     y \\<in> supp (\\<lambda>r. if r = 0 then 1::'a else (0::'a)) \\<and>\n     z \\<in> supp f \\<and> x = y + z} =\n    (if x \\<in> supp f then {(0, x)} else {})", "by (auto simp: supp_def split: if_splits)"], ["proof (state)\nthis:\n  {(y, z).\n   y \\<in> supp (\\<lambda>r. if r = 0 then 1::'a else (0::'a)) \\<and>\n   z \\<in> supp f \\<and> ?x = y + z} =\n  (if ?x \\<in> supp f then {(0, ?x)} else {})\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       is_fpxs f \\<Longrightarrow>\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>r.\n                                    if r = 0 then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp f \\<and> x = y + z}.\n             (if y = 0 then 1::'a else (0::'a)) * f z) =\n       f", "thus ?case"], ["proof (prove)\nusing this:\n  {(y, z).\n   y \\<in> supp (\\<lambda>r. if r = 0 then 1::'a else (0::'a)) \\<and>\n   z \\<in> supp f \\<and> ?x = y + z} =\n  (if ?x \\<in> supp f then {(0, ?x)} else {})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<Sum>(y, z)\n              \\<in>{(y, z).\n                    y \\<in> supp\n                             (\\<lambda>r.\n                                 if r = 0 then 1::'a else (0::'a)) \\<and>\n                    z \\<in> supp f \\<and> x = y + z}.\n          (if y = 0 then 1::'a else (0::'a)) * f z) =\n    f", "by (auto simp: fun_eq_iff supp_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<Sum>(y, z)\n            \\<in>{(y, z).\n                  y \\<in> supp\n                           (\\<lambda>r.\n                               if r = 0 then 1::'a else (0::'a)) \\<and>\n                  z \\<in> supp f \\<and> x = y + z}.\n        (if y = 0 then 1::'a else (0::'a)) * f z) =\n  f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 * f = f\n\ngoal (5 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c\n 4. \\<And>a. 0 * a = 0\n 5. \\<And>a. a * 0 = 0", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c\n 4. \\<And>a. 0 * a = 0\n 5. \\<And>a. a * 0 = 0", "fix f :: \"'a fpxs\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c\n 4. \\<And>a. 0 * a = 0\n 5. \\<And>a. a * 0 = 0", "show \"0 * f = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 * f = 0", "by transfer (auto simp: fun_eq_iff supp_def)"], ["proof (state)\nthis:\n  0 * f = 0\n\ngoal (4 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c\n 4. \\<And>a. a * 0 = 0", "show \"f * 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * 0 = 0", "by transfer (auto simp: fun_eq_iff supp_def)"], ["proof (state)\nthis:\n  f * 0 = 0\n\ngoal (3 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c", "fix f g :: \"'a fpxs\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b. a * b = b * a\n 3. \\<And>a b c. (a + b) * c = a * c + b * c", "show \"f * g = g * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g = g * f", "proof (transfer, rule ext, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f g x.\n       \\<lbrakk>is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n                            f y * g z) =\n                         (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp g \\<and> z \\<in> supp f \\<and> x = y + z}.\n                            g y * f z)", "case (1 f g x)"], ["proof (state)\nthis:\n  is_fpxs f\n  is_fpxs g\n\ngoal (1 subgoal):\n 1. \\<And>f g x.\n       \\<lbrakk>is_fpxs f; is_fpxs g\\<rbrakk>\n       \\<Longrightarrow> (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n                            f y * g z) =\n                         (\\<Sum>(y, z)\n                                \\<in>{(y, z).\ny \\<in> supp g \\<and> z \\<in> supp f \\<and> x = y + z}.\n                            g y * f z)", "show \"(\\<Sum>(y, z)\\<in>{(y, z). y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}. f y * g z) =\n          (\\<Sum>(y, z)\\<in>{(y, z). y \\<in> supp g \\<and> z \\<in> supp f \\<and> x = y + z}. g y * f z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n       f y * g z) =\n    (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> supp g \\<and> z \\<in> supp f \\<and> x = y + z}.\n       g y * f z)", "by (rule sum.reindex_bij_witness[of _ \"\\<lambda>(x,y). (y,x)\" \"\\<lambda>(x,y). (y,x)\"])\n         (auto simp: mult_ac)"], ["proof (state)\nthis:\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp f \\<and> z \\<in> supp g \\<and> x = y + z}.\n     f y * g z) =\n  (\\<Sum>(y, z)\n         \\<in>{(y, z).\n               y \\<in> supp g \\<and> z \\<in> supp f \\<and> x = y + z}.\n     g y * f z)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f * g = g * f\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "fix f g h :: \"'a fpxs\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "define d where \"d = (LCM F\\<in>{f,g,h}. fpxs_root_order F)\""], ["proof (state)\nthis:\n  d = Lcm (fpxs_root_order ` {f, g, h})\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "have \"d > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d", "by (auto simp: d_def intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < d\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "obtain f' where f: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of f d] \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order f dvd d; 0 < d;\n   \\<And>f'.\n      f =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat d) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat d)\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "obtain g' where g: \"g = fpxs_compose_power (fpxs_of_fls g') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of g d] \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order g dvd d; 0 < d;\n   \\<And>f'.\n      g =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat d) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  g = fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat d)\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "obtain h' where h: \"h = fpxs_compose_power (fpxs_of_fls h') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        h =\n        fpxs_compose_power (fpxs_of_fls h')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of h d] \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order h dvd d; 0 < d;\n   \\<And>f'.\n      h =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat d) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>h'.\n        h =\n        fpxs_compose_power (fpxs_of_fls h')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  h = fpxs_compose_power (fpxs_of_fls h') (1 / rat_of_nat d)\n\ngoal (2 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c", "show \"(f * g) * h = f * (g * h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g * h = f * (g * h)", "by (simp add: f g h mult_ac\n             flip: fpxs_compose_power_mult fpxs_compose_power_add fpxs_of_fls_mult)"], ["proof (state)\nthis:\n  f * g * h = f * (g * h)\n\ngoal (1 subgoal):\n 1. \\<And>a b c. (a + b) * c = a * c + b * c", "show \"(f + g) * h = f * h + g * h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f + g) * h = f * h + g * h", "by (simp add: f g h ring_distribs\n             flip: fpxs_compose_power_mult fpxs_compose_power_add fpxs_of_fls_mult fpxs_of_fls_add)"], ["proof (state)\nthis:\n  (f + g) * h = f * h + g * h\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "instance fpxs :: (comm_ring_1) comm_ring_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, comm_ring_1_class)", "by intro_classes auto"], ["", "instance fpxs :: (\"{comm_semiring_1,semiring_no_zero_divisors}\") semiring_no_zero_divisors"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, semiring_no_zero_divisors_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "fix f g :: \"'a fpxs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "assume fg: \"f \\<noteq> 0\" \"g \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "define d where \"d = lcm (fpxs_root_order f) (fpxs_root_order g)\""], ["proof (state)\nthis:\n  d = lcm (fpxs_root_order f) (fpxs_root_order g)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "have \"d > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d", "by (auto simp: d_def intro!: lcm_pos_nat)"], ["proof (state)\nthis:\n  0 < d\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "obtain f' where f: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of f d] \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order f dvd d; 0 < d;\n   \\<And>f'.\n      f =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat d) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat d)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "obtain g' where g: \"g = fpxs_compose_power (fpxs_of_fls g') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of g d] \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order g dvd d; 0 < d;\n   \\<And>f'.\n      g =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat d) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < d\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat d) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  g = fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat d)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>a \\<noteq> 0; b \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> a * b \\<noteq> 0", "show \"f * g \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g \\<noteq> 0", "using \\<open>d > 0\\<close> fg"], ["proof (prove)\nusing this:\n  0 < d\n  f \\<noteq> 0\n  g \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f * g \\<noteq> 0", "by (simp add: f g flip: fpxs_compose_power_mult fpxs_of_fls_mult)"], ["proof (state)\nthis:\n  f * g \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_of_fls_power [simp]: \"fpxs_of_fls (f ^ n) = fpxs_of_fls f ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (f ^ n) = fpxs_of_fls f ^ n", "by (induction n) auto"], ["", "lemma fpxs_compose_power_power [simp]:\n  \"r > 0 \\<Longrightarrow> fpxs_compose_power (f ^ n) r = fpxs_compose_power f r ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < r \\<Longrightarrow>\n    fpxs_compose_power (f ^ n) r = fpxs_compose_power f r ^ n", "by (induction n) simp_all"], ["", "subsection \\<open>Constant Puiseux series and the series \\<open>X\\<close>\\<close>"], ["", "lift_definition fpxs_const :: \"'a :: zero \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>c n. if n = 0 then c else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. is_fpxs (\\<lambda>n. if n = 0 then a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. is_fpxs (\\<lambda>n. if n = 0 then a else (0::'a))", "fix c :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a. is_fpxs (\\<lambda>n. if n = 0 then a else (0::'a))", "have \"supp (\\<lambda>n::rat. if n = 0 then c else 0) = (if c = 0 then {} else {0})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>n. if n = 0 then c else (0::'a)) =\n    (if c = (0::'a) then {} else {0})", "by auto"], ["proof (state)\nthis:\n  supp (\\<lambda>n. if n = 0 then c else (0::'a)) =\n  (if c = (0::'a) then {} else {0})\n\ngoal (1 subgoal):\n 1. \\<And>a. is_fpxs (\\<lambda>n. if n = 0 then a else (0::'a))", "thus \"is_fpxs (\\<lambda>n::rat. if n = 0 then c else 0)\""], ["proof (prove)\nusing this:\n  supp (\\<lambda>n. if n = 0 then c else (0::'a)) =\n  (if c = (0::'a) then {} else {0})\n\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>n. if n = 0 then c else (0::'a))", "unfolding is_fpxs_def"], ["proof (prove)\nusing this:\n  supp (\\<lambda>n. if n = 0 then c else (0::'a)) =\n  (if c = (0::'a) then {} else {0})\n\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>n. if n = 0 then c else (0::'a))) \\<and>\n    (LCM r\\<in>supp (\\<lambda>n. if n = 0 then c else (0::'a)).\n        snd (quotient_of r)) \\<noteq>\n    0", "by auto"], ["proof (state)\nthis:\n  is_fpxs (\\<lambda>n. if n = 0 then c else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_const_0 [simp]: \"fpxs_const 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (0::'a) = 0", "by transfer auto"], ["", "lemma fpxs_const_1 [simp]: \"fpxs_const 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (1::'a) = 1", "by transfer auto"], ["", "lemma fpxs_of_fls_const [simp]: \"fpxs_of_fls (fls_const c) = fpxs_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (fls_const c) = fpxs_const c", "by transfer (auto simp: fun_eq_iff Ints_def)"], ["", "lemma fls_of_fpxs_const [simp]: \"fls_of_fpxs (fpxs_const c) = fls_const c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs (fpxs_const c) = fls_const c", "by (metis fls_of_fpxs_of_fls fpxs_of_fls_const)"], ["", "lemma fls_of_fpxs_1 [simp]: \"fls_of_fpxs 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs 1 = 1", "using fls_of_fpxs_const[of 1]"], ["proof (prove)\nusing this:\n  fls_of_fpxs (fpxs_const (1::?'b1)) = fls_const (1::?'b1)\n\ngoal (1 subgoal):\n 1. fls_of_fpxs 1 = 1", "by (simp del: fls_of_fpxs_const)"], ["", "lift_definition fpxs_X :: \"'a :: {one, zero} fpxs\" is\n  \"\\<lambda>x. if x = 1 then (1::'a) else 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>x. if x = 1 then 1::'a else (0::'a))", "by (cases \"1 = (0 :: 'a)\") (auto simp: is_fpxs_def cong: if_cong)"], ["", "lemma fpxs_const_altdef: \"fpxs_const x = fpxs_of_fls (fls_const x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const x = fpxs_of_fls (fls_const x)", "by transfer auto"], ["", "lemma fpxs_const_add [simp]: \"fpxs_const (x + y) = fpxs_const x + fpxs_const y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (x + y) = fpxs_const x + fpxs_const y", "by transfer auto"], ["", "lemma fpxs_const_mult [simp]:\n  fixes x y :: \"'a::{comm_semiring_1}\"\n  shows \"fpxs_const (x * y) = fpxs_const x * fpxs_const y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (x * y) = fpxs_const x * fpxs_const y", "unfolding fpxs_const_altdef fls_const_mult_const[symmetric] fpxs_of_fls_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (fls_const x) * fpxs_of_fls (fls_const y) =\n    fpxs_of_fls (fls_const x) * fpxs_of_fls (fls_const y)", ".."], ["", "lemma fpxs_const_eq_iff [simp]:\n  \"fpxs_const x = fpxs_const y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_const x = fpxs_const y) = (x = y)", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma of_nat_fpxs_eq: \"of_nat n = fpxs_const (of_nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat n = fpxs_const (of_nat n)", "by (induction n) auto"], ["", "lemma fpxs_const_uminus [simp]: \"fpxs_const (-x) = -fpxs_const x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (- x) = - fpxs_const x", "by transfer auto"], ["", "lemma fpxs_const_diff [simp]: \"fpxs_const (x - y) = fpxs_const x - fpxs_const y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (x - y) = fpxs_const x - fpxs_const y", "unfolding minus_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_const (x - y) = fpxs_const x + - fpxs_const y", "by transfer auto"], ["", "lemma of_int_fpxs_eq: \"of_int n = fpxs_const (of_int n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_int n = fpxs_const (of_int n)", "by (induction n) (auto simp: of_nat_fpxs_eq)"], ["", "subsection \\<open>More algebraic typeclass instances\\<close>"], ["", "instance fpxs :: (\"{comm_semiring_1,semiring_char_0}\") semiring_char_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, semiring_char_0_class)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. inj of_nat", "show \"inj (of_nat :: nat \\<Rightarrow> 'a fpxs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj of_nat", "by (intro injI) (auto simp: of_nat_fpxs_eq)"], ["proof (state)\nthis:\n  inj of_nat\n\ngoal:\nNo subgoals!", "qed"], ["", "instance fpxs :: (\"{comm_ring_1,ring_char_0}\") ring_char_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, ring_char_0_class)", ".."], ["", "instance fpxs :: (idom) idom"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, idom_class)", ".."], ["", "instantiation fpxs :: (field) field\nbegin"], ["", "definition inverse_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs\" where\n  \"inverse_fpxs f =\n     fpxs_compose_power (fpxs_of_fls (inverse (fls_of_fpxs f))) (1 / of_nat (fpxs_root_order f))\""], ["", "definition divide_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs \\<Rightarrow> 'a fpxs\" where\n  \"divide_fpxs f g = f * inverse g\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, field_class)", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "fix f :: \"'a fpxs\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "assume \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "define f' where \"f' = fls_of_fpxs f\""], ["proof (state)\nthis:\n  f' = fls_of_fpxs f\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "define d where \"d = fpxs_root_order f\""], ["proof (state)\nthis:\n  d = fpxs_root_order f\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "have \"d > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < d", "by (auto simp: d_def)"], ["proof (state)\nthis:\n  0 < d\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "have f: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat d)", "by (simp add: f'_def d_def fpxs_as_fls)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat d)\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "have \"inverse f * f = fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / of_nat d) * f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse f * f =\n    fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f", "by (simp add: inverse_fpxs_def f'_def d_def)"], ["proof (state)\nthis:\n  inverse f * f =\n  fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "also"], ["proof (state)\nthis:\n  inverse f * f =\n  fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "have \"fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / of_nat d) * f =\n             fpxs_compose_power (fpxs_of_fls (inverse f' * f')) (1 / of_nat d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f =\n    fpxs_compose_power (fpxs_of_fls (inverse f' * f')) (1 / rat_of_nat d)", "by (simp add: f)"], ["proof (state)\nthis:\n  fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f =\n  fpxs_compose_power (fpxs_of_fls (inverse f' * f')) (1 / rat_of_nat d)\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "also"], ["proof (state)\nthis:\n  fpxs_compose_power (fpxs_of_fls (inverse f')) (1 / rat_of_nat d) * f =\n  fpxs_compose_power (fpxs_of_fls (inverse f' * f')) (1 / rat_of_nat d)\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "have \"inverse f' * f' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse f' * f' = 1", "using \\<open>f \\<noteq> 0\\<close> \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  0 < d\n\ngoal (1 subgoal):\n 1. inverse f' * f' = 1", "by (simp add: f field_simps)"], ["proof (state)\nthis:\n  inverse f' * f' = 1\n\ngoal (3 subgoals):\n 1. \\<And>a. a \\<noteq> 0 \\<Longrightarrow> inverse a * a = 1\n 2. \\<And>a b. a div b = a * inverse b\n 3. inverse 0 = 0", "finally"], ["proof (chain)\npicking this:\n  inverse f * f = fpxs_compose_power (fpxs_of_fls 1) (1 / rat_of_nat d)", "show \"inverse f * f = 1\""], ["proof (prove)\nusing this:\n  inverse f * f = fpxs_compose_power (fpxs_of_fls 1) (1 / rat_of_nat d)\n\ngoal (1 subgoal):\n 1. inverse f * f = 1", "using \\<open>d > 0\\<close>"], ["proof (prove)\nusing this:\n  inverse f * f = fpxs_compose_power (fpxs_of_fls 1) (1 / rat_of_nat d)\n  0 < d\n\ngoal (1 subgoal):\n 1. inverse f * f = 1", "by simp"], ["proof (state)\nthis:\n  inverse f * f = 1\n\ngoal (2 subgoals):\n 1. \\<And>a b. a div b = a * inverse b\n 2. inverse 0 = 0", "qed (auto simp: divide_fpxs_def inverse_fpxs_def)"], ["", "end"], ["", "instance fpxs :: (field_char_0) field_char_0"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, field_char_0_class)", ".."], ["", "subsection \\<open>Valuation\\<close>"], ["", "definition fpxs_val :: \"'a :: zero fpxs \\<Rightarrow> rat\" where\n  \"fpxs_val f =\n     of_int (fls_subdegree (fls_of_fpxs f)) / rat_of_nat (fpxs_root_order f)\""], ["", "lemma fpxs_val_of_fls [simp]: \"fpxs_val (fpxs_of_fls f) = of_int (fls_subdegree f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_of_fls f) = rat_of_int (fls_subdegree f)", "by (simp add: fpxs_val_def)"], ["", "lemma fpxs_nth_compose_power [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_nth (fpxs_compose_power f r) n = fpxs_nth f (n / r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_compose_power f r) n = fpxs_nth f (n / r)", "using assms"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_compose_power f r) n = fpxs_nth f (n / r)", "by transfer auto"], ["", "lemma fls_of_fpxs_uminus [simp]: \"fls_of_fpxs (-f) = -fls_of_fpxs f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs (- f) = - fls_of_fpxs f", "by transfer auto"], ["", "lemma fpxs_root_order_uminus [simp]: \"fpxs_root_order (-f) = fpxs_root_order f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_root_order (- f) = fpxs_root_order f", "by transfer auto"], ["", "lemma fpxs_val_uminus [simp]: \"fpxs_val (-f) = fpxs_val f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (- f) = fpxs_val f", "unfolding fpxs_val_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (fls_of_fpxs (- f))) /\n    rat_of_nat (fpxs_root_order (- f)) =\n    rat_of_int (fls_subdegree (fls_of_fpxs f)) /\n    rat_of_nat (fpxs_root_order f)", "by simp"], ["", "lemma fpxs_val_minus_commute: \"fpxs_val (f - g) = fpxs_val (g - f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (f - g) = fpxs_val (g - f)", "by (subst fpxs_val_uminus [symmetric]) (simp del: fpxs_val_uminus)"], ["", "lemma fpxs_val_const [simp]: \"fpxs_val (fpxs_const c) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_const c) = 0", "by (simp add: fpxs_val_def)"], ["", "lemma fpxs_val_1 [simp]: \"fpxs_val 1 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val 1 = 0", "by (simp add: fpxs_val_def)"], ["", "lemma of_int_fls_subdegree_of_fpxs:\n  \"rat_of_int (fls_subdegree (fls_of_fpxs f)) = fpxs_val f * of_nat (fpxs_root_order f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (fls_of_fpxs f)) =\n    fpxs_val f * rat_of_nat (fpxs_root_order f)", "by (simp add: fpxs_val_def)"], ["", "lemma fpxs_nth_val_nonzero: \n  assumes \"f \\<noteq> 0\"\n  shows   \"fpxs_nth f (fpxs_val f) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "define N where \"N = fpxs_root_order f\""], ["proof (state)\nthis:\n  N = fpxs_root_order f\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "define f' where \"f' = fls_of_fpxs f\""], ["proof (state)\nthis:\n  f' = fls_of_fpxs f\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "define M where \"M = fls_subdegree f'\""], ["proof (state)\nthis:\n  M = fls_subdegree f'\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "have val: \"fpxs_val f = of_int M / of_nat N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val f = rat_of_int M / rat_of_nat N", "by (simp add: M_def fpxs_val_def N_def f'_def)"], ["proof (state)\nthis:\n  fpxs_val f = rat_of_int M / rat_of_nat N\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "have *: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)", "by (simp add: fpxs_as_fls N_def f'_def)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "have \"fpxs_nth \\<dots> (fpxs_val f) =\n             fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N))\n     (fpxs_val f) =\n    fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f))", "by (subst fpxs_nth_compose_power) (auto simp: N_def)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N))\n   (fpxs_val f) =\n  fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f))\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N))\n   (fpxs_val f) =\n  fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f))\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "have \"\\<dots> = fls_nth f' M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f')\n     (fpxs_val f * rat_of_nat (fpxs_root_order f)) =\n    fls_nth f' M", "by (subst fpxs_nth_of_fls) (auto simp: val N_def)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f)) =\n  fls_nth f' M\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "also"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (fpxs_val f * rat_of_nat (fpxs_root_order f)) =\n  fls_nth f' M\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "have \"f' \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' \\<noteq> 0", "using * assms"], ["proof (prove)\nusing this:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f' \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  f' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "hence \"fls_nth f' M \\<noteq> 0\""], ["proof (prove)\nusing this:\n  f' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fls_nth f' M \\<noteq> (0::'a)", "unfolding M_def"], ["proof (prove)\nusing this:\n  f' \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fls_nth f' (fls_subdegree f') \\<noteq> (0::'a)", "by simp"], ["proof (state)\nthis:\n  fls_nth f' M \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "show \"fpxs_nth f (fpxs_val f) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)", "."], ["proof (state)\nthis:\n  fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_nth_below_val:\n  assumes n: \"n < fpxs_val f\"\n  shows   \"fpxs_nth f n = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f n = (0::'a)", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "define N where \"N = fpxs_root_order f\""], ["proof (state)\nthis:\n  N = fpxs_root_order f\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "define f' where \"f' = fls_of_fpxs f\""], ["proof (state)\nthis:\n  f' = fls_of_fpxs f\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "define M where \"M = fls_subdegree f'\""], ["proof (state)\nthis:\n  M = fls_subdegree f'\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "have val: \"fpxs_val f = of_int M / of_nat N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val f = rat_of_int M / rat_of_nat N", "by (simp add: M_def fpxs_val_def N_def f'_def)"], ["proof (state)\nthis:\n  fpxs_val f = rat_of_int M / rat_of_nat N\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "have *: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)", "by (simp add: fpxs_as_fls N_def f'_def)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat N)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "have \"fpxs_nth f n = fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f n = fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N)", "by (subst *, subst fpxs_nth_compose_power) (auto simp: N_def)"], ["proof (state)\nthis:\n  fpxs_nth f n = fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "also"], ["proof (state)\nthis:\n  fpxs_nth f n = fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "proof (cases \"rat_of_nat N * n \\<in> \\<int>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "case True"], ["proof (state)\nthis:\n  rat_of_nat N * n \\<in> \\<int>\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "then"], ["proof (chain)\npicking this:\n  rat_of_nat N * n \\<in> \\<int>", "obtain n' where n': \"of_int n' = rat_of_nat N * n\""], ["proof (prove)\nusing this:\n  rat_of_nat N * n \\<in> \\<int>\n\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        rat_of_int n' = rat_of_nat N * n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (elim Ints_cases) auto"], ["proof (state)\nthis:\n  rat_of_int n' = rat_of_nat N * n\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "have \"of_int n' < rat_of_nat N * fpxs_val f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int n' < rat_of_nat N * fpxs_val f", "unfolding n'"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_nat N * n < rat_of_nat N * fpxs_val f", "using n"], ["proof (prove)\nusing this:\n  n < fpxs_val f\n\ngoal (1 subgoal):\n 1. rat_of_nat N * n < rat_of_nat N * fpxs_val f", "by (intro mult_strict_left_mono) (auto simp: N_def)"], ["proof (state)\nthis:\n  rat_of_int n' < rat_of_nat N * fpxs_val f\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "also"], ["proof (state)\nthis:\n  rat_of_int n' < rat_of_nat N * fpxs_val f\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "have \"\\<dots> = of_int M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_nat N * fpxs_val f = rat_of_int M", "by (simp add: val N_def)"], ["proof (state)\nthis:\n  rat_of_nat N * fpxs_val f = rat_of_int M\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  rat_of_int n' < rat_of_int M", "have \"n' < M\""], ["proof (prove)\nusing this:\n  rat_of_int n' < rat_of_int M\n\ngoal (1 subgoal):\n 1. n' < M", "by linarith"], ["proof (state)\nthis:\n  n' < M\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "have \"fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = fls_nth f' n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = fls_nth f' n'", "unfolding n'[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f') (rat_of_int n') = fls_nth f' n'", "by (subst fpxs_nth_of_fls) (auto simp: N_def)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = fls_nth f' n'\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "also"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = fls_nth f' n'\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "from \\<open>n' < M\\<close>"], ["proof (chain)\npicking this:\n  n' < M", "have \"\\<dots> = 0\""], ["proof (prove)\nusing this:\n  n' < M\n\ngoal (1 subgoal):\n 1. fls_nth f' n' = (0::'a)", "unfolding M_def"], ["proof (prove)\nusing this:\n  n' < fls_subdegree f'\n\ngoal (1 subgoal):\n 1. fls_nth f' n' = (0::'a)", "by simp"], ["proof (state)\nthis:\n  fls_nth f' n' = (0::'a)\n\ngoal (2 subgoals):\n 1. rat_of_nat N * n \\<in> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n 2. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = (0::'a)", "show ?thesis"], ["proof (prove)\nusing this:\n  fpxs_nth (fpxs_of_fls f') (rat_of_nat N * n) = (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "by (simp add: mult_ac)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n\ngoal (1 subgoal):\n 1. rat_of_nat N * n \\<notin> \\<int> \\<Longrightarrow>\n    fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)", "qed (auto simp: fpxs_nth_of_fls mult_ac)"], ["proof (state)\nthis:\n  fpxs_nth (fpxs_of_fls f') (n * rat_of_nat N) = (0::'a)\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth f n = (0::'a)", "show \"fpxs_nth f n = 0\""], ["proof (prove)\nusing this:\n  fpxs_nth f n = (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth f n = (0::'a)", "."], ["proof (state)\nthis:\n  fpxs_nth f n = (0::'a)\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> fpxs_nth f n = (0::'a)", "qed auto"], ["", "lemma fpxs_val_leI: \"fpxs_nth f r \\<noteq> 0 \\<Longrightarrow> fpxs_val f \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val f \\<le> r", "using fpxs_nth_below_val[of r f]"], ["proof (prove)\nusing this:\n  r < fpxs_val f \\<Longrightarrow> fpxs_nth f r = (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth f r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val f \\<le> r", "by (cases \"f = 0\"; cases \"fpxs_val f\" r rule: linorder_cases) auto"], ["", "lemma fpxs_val_0 [simp]: \"fpxs_val 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val 0 = 0", "by (simp add: fpxs_val_def)"], ["", "lemma fpxs_val_geI: \n  assumes \"f \\<noteq> 0\" \"\\<And>r. r < r' \\<Longrightarrow> fpxs_nth f r = 0\"\n  shows   \"fpxs_val f \\<ge> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<le> fpxs_val f", "using fpxs_nth_val_nonzero[of f] assms"], ["proof (prove)\nusing this:\n  f \\<noteq> 0 \\<Longrightarrow> fpxs_nth f (fpxs_val f) \\<noteq> (0::'a)\n  f \\<noteq> 0\n  ?r < r' \\<Longrightarrow> fpxs_nth f ?r = (0::'a)\n\ngoal (1 subgoal):\n 1. r' \\<le> fpxs_val f", "by force"], ["", "lemma fpxs_val_compose_power [simp]:\n  assumes \"r > 0\"\n  shows   \"fpxs_val (fpxs_compose_power f r) = fpxs_val f * r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power f r) = fpxs_val f * r", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    fpxs_val (fpxs_compose_power f r) = fpxs_val f * r\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_val (fpxs_compose_power f r) = fpxs_val f * r", "case [simp]: False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow>\n    fpxs_val (fpxs_compose_power f r) = fpxs_val f * r\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_val (fpxs_compose_power f r) = fpxs_val f * r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power f r) = fpxs_val f * r", "proof (intro antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. fpxs_val (fpxs_compose_power f r) \\<le> fpxs_val f * r\n 2. fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)", "show \"fpxs_val (fpxs_compose_power f r) \\<le> fpxs_val f * r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power f r) \\<le> fpxs_val f * r", "using assms"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power f r) \\<le> fpxs_val f * r", "by (intro fpxs_val_leI) (simp add: fpxs_nth_val_nonzero)"], ["proof (state)\nthis:\n  fpxs_val (fpxs_compose_power f r) \\<le> fpxs_val f * r\n\ngoal (1 subgoal):\n 1. fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)", "show \"fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)", "proof (intro fpxs_val_geI)"], ["proof (state)\ngoal (2 subgoals):\n 1. fpxs_compose_power f r \\<noteq> 0\n 2. \\<And>ra.\n       ra < fpxs_val f * r \\<Longrightarrow>\n       fpxs_nth (fpxs_compose_power f r) ra = (0::'a)", "show \"fpxs_nth (fpxs_compose_power f r) r' = 0\" if \"r' < fpxs_val f * r\" for r'"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_compose_power f r) r' = (0::'a)", "unfolding fpxs_nth_compose_power[OF assms]"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f (r' / r) = (0::'a)", "by (rule fpxs_nth_below_val) (use that assms in \\<open>auto simp: field_simps\\<close>)"], ["proof (state)\nthis:\n  ?r' < fpxs_val f * r \\<Longrightarrow>\n  fpxs_nth (fpxs_compose_power f r) ?r' = (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_compose_power f r \\<noteq> 0", "qed (use assms in auto)"], ["proof (state)\nthis:\n  fpxs_val f * r \\<le> fpxs_val (fpxs_compose_power f r)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fpxs_val (fpxs_compose_power f r) = fpxs_val f * r\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow>\n    fpxs_val (fpxs_compose_power f r) = fpxs_val f * r", "qed auto"], ["", "lemma fpxs_val_add_ge:\n  assumes \"f + g \\<noteq> 0\"\n  shows   \"fpxs_val (f + g) \\<ge> min (fpxs_val f) (fpxs_val g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (fpxs_val f) (fpxs_val g) \\<le> fpxs_val (f + g)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "assume \"\\<not>(fpxs_val (f + g) \\<ge> min (fpxs_val f) (fpxs_val g))\" (is \"\\<not>(?n \\<ge> _)\")"], ["proof (state)\nthis:\n  \\<not> min (fpxs_val f) (fpxs_val g) \\<le> fpxs_val (f + g)\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "hence \"?n < fpxs_val f\" \"?n < fpxs_val g\""], ["proof (prove)\nusing this:\n  \\<not> min (fpxs_val f) (fpxs_val g) \\<le> fpxs_val (f + g)\n\ngoal (1 subgoal):\n 1. fpxs_val (f + g) < fpxs_val f &&& fpxs_val (f + g) < fpxs_val g", "by auto"], ["proof (state)\nthis:\n  fpxs_val (f + g) < fpxs_val f\n  fpxs_val (f + g) < fpxs_val g\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "hence \"fpxs_nth f ?n = 0\" \"fpxs_nth g ?n = 0\""], ["proof (prove)\nusing this:\n  fpxs_val (f + g) < fpxs_val f\n  fpxs_val (f + g) < fpxs_val g\n\ngoal (1 subgoal):\n 1. fpxs_nth f (fpxs_val (f + g)) = (0::'a) &&&\n    fpxs_nth g (fpxs_val (f + g)) = (0::'a)", "by (intro fpxs_nth_below_val; simp; fail)+"], ["proof (state)\nthis:\n  fpxs_nth f (fpxs_val (f + g)) = (0::'a)\n  fpxs_nth g (fpxs_val (f + g)) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "hence \"fpxs_nth (f + g) ?n = 0\""], ["proof (prove)\nusing this:\n  fpxs_nth f (fpxs_val (f + g)) = (0::'a)\n  fpxs_nth g (fpxs_val (f + g)) = (0::'a)\n\ngoal (1 subgoal):\n 1. fpxs_nth (f + g) (fpxs_val (f + g)) = (0::'a)", "by simp"], ["proof (state)\nthis:\n  fpxs_nth (f + g) (fpxs_val (f + g)) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fpxs_nth (f + g) (fpxs_val (f + g)) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "have \"fpxs_nth (f + g) ?n \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f + g) (fpxs_val (f + g)) \\<noteq> (0::'a)", "by (intro fpxs_nth_val_nonzero assms)"], ["proof (state)\nthis:\n  fpxs_nth (f + g) (fpxs_val (f + g)) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> min (fpxs_val f) (fpxs_val g)\n           \\<le> fpxs_val (f + g) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  fpxs_nth (f + g) (fpxs_val (f + g)) = (0::'a)\n  fpxs_nth (f + g) (fpxs_val (f + g)) \\<noteq> (0::'a)", "show False"], ["proof (prove)\nusing this:\n  fpxs_nth (f + g) (fpxs_val (f + g)) = (0::'a)\n  fpxs_nth (f + g) (fpxs_val (f + g)) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_val_diff_ge:\n  assumes \"f \\<noteq> g\"\n  shows   \"fpxs_val (f - g) \\<ge> min (fpxs_val f) (fpxs_val g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. min (fpxs_val f) (fpxs_val g) \\<le> fpxs_val (f - g)", "using fpxs_val_add_ge[of f \"-g\"] assms"], ["proof (prove)\nusing this:\n  f + - g \\<noteq> 0 \\<Longrightarrow>\n  min (fpxs_val f) (fpxs_val (- g)) \\<le> fpxs_val (f + - g)\n  f \\<noteq> g\n\ngoal (1 subgoal):\n 1. min (fpxs_val f) (fpxs_val g) \\<le> fpxs_val (f - g)", "by simp"], ["", "lemma fpxs_nth_mult_val:\n  \"fpxs_nth (f * g) (fpxs_val f + fpxs_val g) = fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "proof (cases \"f = 0 \\<or> g = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<or> g = 0 \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\n 2. \\<not> (f = 0 \\<or> g = 0) \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "case False"], ["proof (state)\nthis:\n  \\<not> (f = 0 \\<or> g = 0)\n\ngoal (2 subgoals):\n 1. f = 0 \\<or> g = 0 \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\n 2. \\<not> (f = 0 \\<or> g = 0) \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "have \"{(y, z). y \\<in> fpxs_supp f \\<and> z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z} \\<subseteq>\n        {(fpxs_val f, fpxs_val g)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, z).\n     y \\<in> fpxs_supp f \\<and>\n     z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z}\n    \\<subseteq> {(fpxs_val f, fpxs_val g)}", "using False fpxs_val_leI[of f] fpxs_val_leI[of g]"], ["proof (prove)\nusing this:\n  \\<not> (f = 0 \\<or> g = 0)\n  fpxs_nth f ?r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val f \\<le> ?r\n  fpxs_nth g ?r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val g \\<le> ?r\n\ngoal (1 subgoal):\n 1. {(y, z).\n     y \\<in> fpxs_supp f \\<and>\n     z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z}\n    \\<subseteq> {(fpxs_val f, fpxs_val g)}", "by (force simp: fpxs_supp_def supp_def)"], ["proof (state)\nthis:\n  {(y, z).\n   y \\<in> fpxs_supp f \\<and>\n   z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z}\n  \\<subseteq> {(fpxs_val f, fpxs_val g)}\n\ngoal (2 subgoals):\n 1. f = 0 \\<or> g = 0 \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\n 2. \\<not> (f = 0 \\<or> g = 0) \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "hence \"fpxs_nth (f * g) (fpxs_val f + fpxs_val g) = \n        (\\<Sum>(y, z)\\<in>{(fpxs_val f, fpxs_val g)}. fpxs_nth f y * fpxs_nth g z)\""], ["proof (prove)\nusing this:\n  {(y, z).\n   y \\<in> fpxs_supp f \\<and>\n   z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z}\n  \\<subseteq> {(fpxs_val f, fpxs_val g)}\n\ngoal (1 subgoal):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    (\\<Sum>(y, z)\\<in>{(fpxs_val f, fpxs_val g)}.\n       fpxs_nth f y * fpxs_nth g z)", "unfolding fpxs_nth_mult"], ["proof (prove)\nusing this:\n  {(y, z).\n   y \\<in> fpxs_supp f \\<and>\n   z \\<in> fpxs_supp g \\<and> fpxs_val f + fpxs_val g = y + z}\n  \\<subseteq> {(fpxs_val f, fpxs_val g)}\n\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp f \\<and>\n                 z \\<in> fpxs_supp g \\<and>\n                 fpxs_val f + fpxs_val g = y + z}.\n       fpxs_nth f y * fpxs_nth g z) =\n    (\\<Sum>(y, z)\\<in>{(fpxs_val f, fpxs_val g)}.\n       fpxs_nth f y * fpxs_nth g z)", "by (intro sum.mono_neutral_left) (auto simp: fpxs_supp_def supp_def)"], ["proof (state)\nthis:\n  fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n  (\\<Sum>(y, z)\\<in>{(fpxs_val f, fpxs_val g)}. fpxs_nth f y * fpxs_nth g z)\n\ngoal (2 subgoals):\n 1. f = 0 \\<or> g = 0 \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\n 2. \\<not> (f = 0 \\<or> g = 0) \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "thus ?thesis"], ["proof (prove)\nusing this:\n  fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n  (\\<Sum>(y, z)\\<in>{(fpxs_val f, fpxs_val g)}. fpxs_nth f y * fpxs_nth g z)\n\ngoal (1 subgoal):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "by simp"], ["proof (state)\nthis:\n  fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n  fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)\n\ngoal (1 subgoal):\n 1. f = 0 \\<or> g = 0 \\<Longrightarrow>\n    fpxs_nth (f * g) (fpxs_val f + fpxs_val g) =\n    fpxs_nth f (fpxs_val f) * fpxs_nth g (fpxs_val g)", "qed auto"], ["", "lemma fpxs_val_mult [simp]:\n  fixes f g :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  assumes \"f \\<noteq> 0\" \"g \\<noteq> 0\"\n  shows \"fpxs_val (f * g) = fpxs_val f + fpxs_val g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (f * g) = fpxs_val f + fpxs_val g", "proof (intro antisym fpxs_val_leI fpxs_val_geI)"], ["proof (state)\ngoal (3 subgoals):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) \\<noteq> (0::'a)\n 2. f * g \\<noteq> 0\n 3. \\<And>r.\n       r < fpxs_val f + fpxs_val g \\<Longrightarrow>\n       fpxs_nth (f * g) r = (0::'a)", "fix r :: rat"], ["proof (state)\ngoal (3 subgoals):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) \\<noteq> (0::'a)\n 2. f * g \\<noteq> 0\n 3. \\<And>r.\n       r < fpxs_val f + fpxs_val g \\<Longrightarrow>\n       fpxs_nth (f * g) r = (0::'a)", "assume r: \"r < fpxs_val f + fpxs_val g\""], ["proof (state)\nthis:\n  r < fpxs_val f + fpxs_val g\n\ngoal (3 subgoals):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) \\<noteq> (0::'a)\n 2. f * g \\<noteq> 0\n 3. \\<And>r.\n       r < fpxs_val f + fpxs_val g \\<Longrightarrow>\n       fpxs_nth (f * g) r = (0::'a)", "show \"fpxs_nth (f * g) r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f * g) r = (0::'a)", "unfolding fpxs_nth_mult"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp f \\<and>\n                 z \\<in> fpxs_supp g \\<and> r = y + z}.\n       fpxs_nth f y * fpxs_nth g z) =\n    (0::'a)", "using assms fpxs_val_leI[of f] fpxs_val_leI[of g] r"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n  g \\<noteq> 0\n  fpxs_nth f ?r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val f \\<le> ?r\n  fpxs_nth g ?r \\<noteq> (0::'a) \\<Longrightarrow> fpxs_val g \\<le> ?r\n  r < fpxs_val f + fpxs_val g\n\ngoal (1 subgoal):\n 1. (\\<Sum>(y, z)\n           \\<in>{(y, z).\n                 y \\<in> fpxs_supp f \\<and>\n                 z \\<in> fpxs_supp g \\<and> r = y + z}.\n       fpxs_nth f y * fpxs_nth g z) =\n    (0::'a)", "by (intro sum.neutral; force)"], ["proof (state)\nthis:\n  fpxs_nth (f * g) r = (0::'a)\n\ngoal (2 subgoals):\n 1. fpxs_nth (f * g) (fpxs_val f + fpxs_val g) \\<noteq> (0::'a)\n 2. f * g \\<noteq> 0", "qed (use assms in \\<open>auto simp: fpxs_nth_mult_val fpxs_nth_val_nonzero\\<close>)"], ["", "lemma fpxs_val_power [simp]:\n  fixes f :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  assumes \"f \\<noteq> 0 \\<or> n > 0\"\n  shows \"fpxs_val (f ^ n) = of_nat n * fpxs_val f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "have [simp]: \"f ^ n \\<noteq> 0\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^ n \\<noteq> 0", "using False"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f ^ n \\<noteq> 0", "by (induction n) auto"], ["proof (state)\nthis:\n  f ^ ?n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "thus ?thesis"], ["proof (prove)\nusing this:\n  f ^ ?n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "using False"], ["proof (prove)\nusing this:\n  f ^ ?n \\<noteq> 0\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "by (induction n) (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> fpxs_val (f ^ n) = rat_of_nat n * fpxs_val f", "qed (use assms in \\<open>auto simp: power_0_left\\<close>)"], ["", "lemma fpxs_nth_power_val [simp]:\n  fixes f :: \"'a :: {comm_semiring_1, semiring_no_zero_divisors} fpxs\"\n  shows \"fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "proof (cases \"f \\<noteq> 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r\n 2. \\<not> f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "case True"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r\n 2. \\<not> f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "proof (induction r)"], ["proof (state)\ngoal (2 subgoals):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0\n 2. \\<And>r.\n       fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ r \\<Longrightarrow>\n       fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ Suc r", "case (Suc r)"], ["proof (state)\nthis:\n  fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\n\ngoal (2 subgoals):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0\n 2. \\<And>r.\n       fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ r \\<Longrightarrow>\n       fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ Suc r", "have \"fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n          fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n    fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r))", "using True"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n    fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r))", "by (simp add: fpxs_nth_mult_val ring_distribs)"], ["proof (state)\nthis:\n  fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n  fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r))\n\ngoal (2 subgoals):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0\n 2. \\<And>r.\n       fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ r \\<Longrightarrow>\n       fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ Suc r", "also"], ["proof (state)\nthis:\n  fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n  fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r))\n\ngoal (2 subgoals):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0\n 2. \\<And>r.\n       fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ r \\<Longrightarrow>\n       fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ Suc r", "have \"\\<dots> = fpxs_nth f (fpxs_val f) ^ Suc r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r)) =\n    fpxs_nth f (fpxs_val f) ^ Suc r", "using Suc True"], ["proof (prove)\nusing this:\n  fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r)) =\n    fpxs_nth f (fpxs_val f) ^ Suc r", "by (subst fpxs_nth_mult_val) auto"], ["proof (state)\nthis:\n  fpxs_nth (f * f ^ r) (fpxs_val f + fpxs_val (f ^ r)) =\n  fpxs_nth f (fpxs_val f) ^ Suc r\n\ngoal (2 subgoals):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0\n 2. \\<And>r.\n       fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ r \\<Longrightarrow>\n       fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n       fpxs_nth f (fpxs_val f) ^ Suc r", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n  fpxs_nth f (fpxs_val f) ^ Suc r", "show ?case"], ["proof (prove)\nusing this:\n  fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n  fpxs_nth f (fpxs_val f) ^ Suc r\n\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ Suc r", "."], ["proof (state)\nthis:\n  fpxs_nth (f ^ Suc r) (rat_of_nat (Suc r) * fpxs_val f) =\n  fpxs_nth f (fpxs_val f) ^ Suc r\n\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ 0) (rat_of_nat 0 * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ 0", "qed (auto simp: fpxs_nth_1')"], ["proof (state)\nthis:\n  fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\n\ngoal (1 subgoal):\n 1. \\<not> f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "case False"], ["proof (state)\nthis:\n  \\<not> f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<not> f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) =\n    fpxs_nth f (fpxs_val f) ^ r", "by (cases r) (auto simp: fpxs_nth_1')"], ["proof (state)\nthis:\n  fpxs_nth (f ^ r) (rat_of_nat r * fpxs_val f) = fpxs_nth f (fpxs_val f) ^ r\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Powers of \\<open>X\\<close> and shifting\\<close>"], ["", "lift_definition fpxs_X_power :: \"rat \\<Rightarrow> 'a :: {zero, one} fpxs\" is\n  \"\\<lambda>r n :: rat. if n = r then 1 else (0 :: 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rat. is_fpxs (\\<lambda>n. if n = rat then 1::'a else (0::'a))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rat. is_fpxs (\\<lambda>n. if n = rat then 1::'a else (0::'a))", "fix r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rat. is_fpxs (\\<lambda>n. if n = rat then 1::'a else (0::'a))", "have \"supp (\\<lambda>n. if n = r then 1 else (0 :: 'a)) = (if (1 :: 'a) = 0 then {} else {r})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>n. if n = r then 1::'a else (0::'a)) =\n    (if (1::'a) = (0::'a) then {} else {r})", "by (auto simp: supp_def)"], ["proof (state)\nthis:\n  supp (\\<lambda>n. if n = r then 1::'a else (0::'a)) =\n  (if (1::'a) = (0::'a) then {} else {r})\n\ngoal (1 subgoal):\n 1. \\<And>rat. is_fpxs (\\<lambda>n. if n = rat then 1::'a else (0::'a))", "thus \"is_fpxs (\\<lambda>n. if n = r then 1 else (0 :: 'a))\""], ["proof (prove)\nusing this:\n  supp (\\<lambda>n. if n = r then 1::'a else (0::'a)) =\n  (if (1::'a) = (0::'a) then {} else {r})\n\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>n. if n = r then 1::'a else (0::'a))", "using quotient_of_denom_pos'[of r]"], ["proof (prove)\nusing this:\n  supp (\\<lambda>n. if n = r then 1::'a else (0::'a)) =\n  (if (1::'a) = (0::'a) then {} else {r})\n  0 < snd (quotient_of r)\n\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>n. if n = r then 1::'a else (0::'a))", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  is_fpxs (\\<lambda>n. if n = r then 1::'a else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_X_power_0 [simp]: \"fpxs_X_power 0 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_X_power 0 = 1", "by transfer auto"], ["", "lemma fpxs_X_power_add: \"fpxs_X_power (a + b) = fpxs_X_power a * fpxs_X_power b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_X_power (a + b) = fpxs_X_power a * fpxs_X_power b", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>n.\n                                    if n = a then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp\n                                (\\<lambda>n.\n                                    if n = b then 1::'a else (0::'a)) \\<and>\n                       x = y + z}.\n             (if y = a then 1::'a else (0::'a)) *\n             (if z = b then 1::'a else (0::'a)))", "case (1 a b)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>n.\n                                    if n = a then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp\n                                (\\<lambda>n.\n                                    if n = b then 1::'a else (0::'a)) \\<and>\n                       x = y + z}.\n             (if y = a then 1::'a else (0::'a)) *\n             (if z = b then 1::'a else (0::'a)))", "have *: \"{(y,z). y \\<in> supp (\\<lambda>n. if n=a then (1::'a) else 0) \\<and>\n               z \\<in> supp (\\<lambda>n. if n=b then (1::'a) else 0) \\<and> x=y+z} =\n           (if x = a + b then {(a, b)} else {})\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, z).\n     y \\<in> supp (\\<lambda>n. if n = a then 1::'a else (0::'a)) \\<and>\n     z \\<in> supp (\\<lambda>n. if n = b then 1::'a else (0::'a)) \\<and>\n     x = y + z} =\n    (if x = a + b then {(a, b)} else {})", "by (auto simp: supp_def fun_eq_iff)"], ["proof (state)\nthis:\n  {(y, z).\n   y \\<in> supp (\\<lambda>n. if n = a then 1::'a else (0::'a)) \\<and>\n   z \\<in> supp (\\<lambda>n. if n = b then 1::'a else (0::'a)) \\<and>\n   ?x = y + z} =\n  (if ?x = a + b then {(a, b)} else {})\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n       (\\<lambda>x.\n           \\<Sum>(y, z)\n                 \\<in>{(y, z).\n                       y \\<in> supp\n                                (\\<lambda>n.\n                                    if n = a then 1::'a else (0::'a)) \\<and>\n                       z \\<in> supp\n                                (\\<lambda>n.\n                                    if n = b then 1::'a else (0::'a)) \\<and>\n                       x = y + z}.\n             (if y = a then 1::'a else (0::'a)) *\n             (if z = b then 1::'a else (0::'a)))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n    (\\<lambda>x.\n        \\<Sum>(y, z)\n              \\<in>{(y, z).\n                    y \\<in> supp\n                             (\\<lambda>n.\n                                 if n = a then 1::'a else (0::'a)) \\<and>\n                    z \\<in> supp\n                             (\\<lambda>n.\n                                 if n = b then 1::'a else (0::'a)) \\<and>\n                    x = y + z}.\n          (if y = a then 1::'a else (0::'a)) *\n          (if z = b then 1::'a else (0::'a)))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n    (\\<lambda>x.\n        \\<Sum>(y, z)\\<in>(if x = a + b then {(a, b)} else {}).\n          (if y = a then 1::'a else (0::'a)) *\n          (if z = b then 1::'a else (0::'a)))", "by (auto simp: fun_eq_iff case_prod_unfold)"], ["proof (state)\nthis:\n  (\\<lambda>n. if n = a + b then 1::'a else (0::'a)) =\n  (\\<lambda>x.\n      \\<Sum>(y, z)\n            \\<in>{(y, z).\n                  y \\<in> supp\n                           (\\<lambda>n.\n                               if n = a then 1::'a else (0::'a)) \\<and>\n                  z \\<in> supp\n                           (\\<lambda>n.\n                               if n = b then 1::'a else (0::'a)) \\<and>\n                  x = y + z}.\n        (if y = a then 1::'a else (0::'a)) *\n        (if z = b then 1::'a else (0::'a)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_X_power_mult: \"fpxs_X_power (rat_of_nat n * m) = fpxs_X_power m ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_X_power (rat_of_nat n * m) = fpxs_X_power m ^ n", "by (induction n) (auto simp: ring_distribs fpxs_X_power_add)"], ["", "lemma fpxs_of_fls_X_power [simp]: \"fpxs_of_fls (fls_shift n 1) = fpxs_X_power (-rat_of_int n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (fls_shift n 1) = fpxs_X_power (- rat_of_int n)", "by transfer (auto simp: fun_eq_iff Ints_def simp flip: of_int_minus)"], ["", "lemma fpxs_X_power_neq_0 [simp]: \"fpxs_X_power r \\<noteq> (0 :: 'a :: zero_neq_one fpxs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_X_power r \\<noteq> 0", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fpxs_X_power_eq_1_iff [simp]: \"fpxs_X_power r = (1 :: 'a :: zero_neq_one fpxs) \\<longleftrightarrow> r = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fpxs_X_power r = 1) = (r = 0)", "by transfer (auto simp: fun_eq_iff)"], ["", "lift_definition fpxs_shift :: \"rat \\<Rightarrow> 'a :: zero fpxs \\<Rightarrow> 'a fpxs\" is\n  \"\\<lambda>r f n. f (n + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "fix r :: rat and f :: \"rat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "assume f: \"is_fpxs f\""], ["proof (state)\nthis:\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "have subset: \"supp (\\<lambda>n. f (n + r)) \\<subseteq> (\\<lambda>n. n + r) -` supp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (\\<lambda>n. f (n + r)) \\<subseteq> (\\<lambda>n. n + r) -` supp f", "by (auto simp: supp_def)"], ["proof (state)\nthis:\n  supp (\\<lambda>n. f (n + r)) \\<subseteq> (\\<lambda>n. n + r) -` supp f\n\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "have eq: \"(\\<lambda>n. n + r) -` supp f = (\\<lambda>n. n - r) ` supp f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>n. n + r) -` supp f = (\\<lambda>n. n - r) ` supp f", "by (auto simp: image_iff algebra_simps)"], ["proof (state)\nthis:\n  (\\<lambda>n. n + r) -` supp f = (\\<lambda>n. n - r) ` supp f\n\ngoal (1 subgoal):\n 1. \\<And>rat fun.\n       is_fpxs fun \\<Longrightarrow> is_fpxs (\\<lambda>n. fun (n + rat))", "show \"is_fpxs (\\<lambda>n. f (n + r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_fpxs (\\<lambda>n. f (n + r))", "unfolding is_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>n. f (n + r))) \\<and>\n    (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>n. f (n + r)))\n 2. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"bdd_below ((\\<lambda>n. n + r) -` supp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below ((\\<lambda>n. n + r) -` supp f)", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. bdd_below ((\\<lambda>n. n - r) ` supp f)", "by (rule bdd_below_image_mono) (use f in \\<open>auto simp: is_fpxs_def mono_def\\<close>)"], ["proof (state)\nthis:\n  bdd_below ((\\<lambda>n. n + r) -` supp f)\n\ngoal (2 subgoals):\n 1. bdd_below (supp (\\<lambda>n. f (n + r)))\n 2. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "thus \"bdd_below (supp (\\<lambda>n. f (n + r)))\""], ["proof (prove)\nusing this:\n  bdd_below ((\\<lambda>n. n + r) -` supp f)\n\ngoal (1 subgoal):\n 1. bdd_below (supp (\\<lambda>n. f (n + r)))", "by (rule bdd_below_mono[OF _ subset])"], ["proof (state)\nthis:\n  bdd_below (supp (\\<lambda>n. f (n + r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"(LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n          (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n    (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r))", "by (intro Lcm_subset image_mono subset)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n  (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n  (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> = (LCM x\\<in>supp f. snd (quotient_of (x - r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r)) =\n    (LCM x\\<in>supp f. snd (quotient_of (x - r)))", "by (simp only: eq image_image o_def)"], ["proof (state)\nthis:\n  (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r)) =\n  (LCM x\\<in>supp f. snd (quotient_of (x - r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM r\\<in>(\\<lambda>n. n + r) -` supp f. snd (quotient_of r)) =\n  (LCM x\\<in>supp f. snd (quotient_of (x - r)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> dvd (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of (x - r))) dvd\n    (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x))", "by (subst mult.commute, intro Lcm_mono quotient_of_denom_diff_dvd)"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of (x - r))) dvd\n  (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of (x - r))) dvd\n  (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> = Lcm ((\\<lambda>x. snd (quotient_of r) * x) ` (\\<lambda>x. snd (quotient_of x)) ` supp f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x)) =\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f)", "by (simp add: image_image o_def)"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x)) =\n  Lcm ((*) (snd (quotient_of r)) `\n       (\\<lambda>x. snd (quotient_of x)) ` supp f)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "also"], ["proof (state)\nthis:\n  (LCM x\\<in>supp f. snd (quotient_of r) * snd (quotient_of x)) =\n  Lcm ((*) (snd (quotient_of r)) `\n       (\\<lambda>x. snd (quotient_of x)) ` supp f)\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "have \"\\<dots> dvd normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "proof (cases \"supp f = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. supp f = {} \\<Longrightarrow>\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n 2. supp f \\<noteq> {} \\<Longrightarrow>\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "case False"], ["proof (state)\nthis:\n  supp f \\<noteq> {}\n\ngoal (2 subgoals):\n 1. supp f = {} \\<Longrightarrow>\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n 2. supp f \\<noteq> {} \\<Longrightarrow>\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp f \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "by (subst Lcm_mult) auto"], ["proof (state)\nthis:\n  Lcm ((*) (snd (quotient_of r)) `\n       (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n  normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. supp f = {} \\<Longrightarrow>\n    Lcm ((*) (snd (quotient_of r)) `\n         (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n    normalize\n     (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "qed auto"], ["proof (state)\nthis:\n  Lcm ((*) (snd (quotient_of r)) `\n       (\\<lambda>x. snd (quotient_of x)) ` supp f) dvd\n  normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "finally"], ["proof (chain)\npicking this:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n  normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))", "show \"(LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0\""], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n  normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "using quotient_of_denom_pos'[of r] f"], ["proof (prove)\nusing this:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) dvd\n  normalize (snd (quotient_of r) * (LCM x\\<in>supp f. snd (quotient_of x)))\n  0 < snd (quotient_of r)\n  is_fpxs f\n\ngoal (1 subgoal):\n 1. (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0", "by (auto simp: is_fpxs_def)"], ["proof (state)\nthis:\n  (LCM r\\<in>supp (\\<lambda>n. f (n + r)). snd (quotient_of r)) \\<noteq> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_fpxs (\\<lambda>n. f (n + r))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_nth_shift [simp]: \"fpxs_nth (fpxs_shift r f) n = fpxs_nth f (n + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_shift r f) n = fpxs_nth f (n + r)", "by transfer simp_all"], ["", "lemma fpxs_shift_0_left [simp]: \"fpxs_shift 0 f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift 0 f = f", "by transfer auto"], ["", "lemma fpxs_shift_add_left: \"fpxs_shift (m + n) f = fpxs_shift m (fpxs_shift n f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (m + n) f = fpxs_shift m (fpxs_shift n f)", "by transfer (simp_all add: add_ac)"], ["", "lemma fpxs_shift_diff_left: \"fpxs_shift (m - n) f = fpxs_shift m (fpxs_shift (-n) f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (m - n) f = fpxs_shift m (fpxs_shift (- n) f)", "by (subst fpxs_shift_add_left [symmetric]) auto"], ["", "lemma fpxs_shift_0 [simp]: \"fpxs_shift r 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r 0 = 0", "by transfer simp_all"], ["", "lemma fpxs_shift_add [simp]: \"fpxs_shift r (f + g) = fpxs_shift r f + fpxs_shift r g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (f + g) = fpxs_shift r f + fpxs_shift r g", "by transfer auto"], ["", "lemma fpxs_shift_uminus [simp]: \"fpxs_shift r (-f) = -fpxs_shift r f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (- f) = - fpxs_shift r f", "by transfer auto"], ["", "lemma fpxs_shift_shift_uminus [simp]: \"fpxs_shift r (fpxs_shift (-r) f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (fpxs_shift (- r) f) = f", "by (simp flip: fpxs_shift_add_left)"], ["", "lemma fpxs_shift_shift_uminus' [simp]: \"fpxs_shift (-r) (fpxs_shift r f) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (- r) (fpxs_shift r f) = f", "by (simp flip: fpxs_shift_add_left)"], ["", "lemma fpxs_shift_diff [simp]: \"fpxs_shift r (f - g) = fpxs_shift r f - fpxs_shift r g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (f - g) = fpxs_shift r f - fpxs_shift r g", "unfolding minus_fpxs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (f + - g) = fpxs_shift r f + - fpxs_shift r g", "by (subst fpxs_shift_add) auto"], ["", "lemma fpxs_shift_compose_power [simp]:\n  \"fpxs_shift r (fpxs_compose_power f s) = fpxs_compose_power (fpxs_shift (r / s) f) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r (fpxs_compose_power f s) =\n    fpxs_compose_power (fpxs_shift (r / s) f) s", "by transfer (simp_all add: add_divide_distrib add_ac cong: if_cong)"], ["", "lemma rat_of_int_div_dvd: \"d dvd n \\<Longrightarrow> rat_of_int (n div d) = rat_of_int n / rat_of_int d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d dvd n \\<Longrightarrow>\n    rat_of_int (n div d) = rat_of_int n / rat_of_int d", "by auto"], ["", "lemma fpxs_of_fls_shift [simp]:\n  \"fpxs_of_fls (fls_shift n f) = fpxs_shift (of_int n) (fpxs_of_fls f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (fls_shift n f) = fpxs_shift (rat_of_int n) (fpxs_of_fls f)", "proof (transfer, goal_cases)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n)\n           else (0::'a)) =\n       (\\<lambda>na.\n           if na + rat_of_int n \\<in> \\<int>\n           then f \\<lfloor>na + rat_of_int n\\<rfloor> else (0::'a))", "case (1 n f)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>n f.\n       \\<forall>\\<^sub>\\<infinity>n. f (- int n) = (0::'a) \\<Longrightarrow>\n       (\\<lambda>r.\n           if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n)\n           else (0::'a)) =\n       (\\<lambda>na.\n           if na + rat_of_int n \\<in> \\<int>\n           then f \\<lfloor>na + rat_of_int n\\<rfloor> else (0::'a))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>r.\n        if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n    (\\<lambda>n.\n        if n + rat_of_int n \\<in> \\<int>\n        then f \\<lfloor>n + rat_of_int n\\<rfloor> else (0::'a))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n       (if r + rat_of_int n \\<in> \\<int>\n        then f \\<lfloor>r + rat_of_int n\\<rfloor> else (0::'a))", "fix r :: rat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r.\n       (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n       (if r + rat_of_int n \\<in> \\<int>\n        then f \\<lfloor>r + rat_of_int n\\<rfloor> else (0::'a))", "have eq: \"r + rat_of_int n \\<in> \\<int> \\<longleftrightarrow> r \\<in> \\<int>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r + rat_of_int n \\<in> \\<int>) = (r \\<in> \\<int>)", "by (metis Ints_add Ints_diff Ints_of_int add_diff_cancel_right')"], ["proof (state)\nthis:\n  (r + rat_of_int n \\<in> \\<int>) = (r \\<in> \\<int>)\n\ngoal (1 subgoal):\n 1. \\<And>r.\n       (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n       (if r + rat_of_int n \\<in> \\<int>\n        then f \\<lfloor>r + rat_of_int n\\<rfloor> else (0::'a))", "show \"(if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else 0) =\n          (if r + rat_of_int n \\<in> \\<int> then f \\<lfloor>r + rat_of_int n\\<rfloor> else 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n    (if r + rat_of_int n \\<in> \\<int>\n     then f \\<lfloor>r + rat_of_int n\\<rfloor> else (0::'a))", "unfolding eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n    (if r \\<in> \\<int> then f \\<lfloor>r + rat_of_int n\\<rfloor>\n     else (0::'a))", "by auto"], ["proof (state)\nthis:\n  (if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n  (if r + rat_of_int n \\<in> \\<int>\n   then f \\<lfloor>r + rat_of_int n\\<rfloor> else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>r.\n      if r \\<in> \\<int> then f (\\<lfloor>r\\<rfloor> + n) else (0::'a)) =\n  (\\<lambda>n.\n      if n + rat_of_int n \\<in> \\<int>\n      then f \\<lfloor>n + rat_of_int n\\<rfloor> else (0::'a))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_shift_mult: \"f * fpxs_shift r g = fpxs_shift r (f * g)\"\n                       \"fpxs_shift r f * g = fpxs_shift r (f * g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g) &&&\n    fpxs_shift r f * g = fpxs_shift r (f * g)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "obtain a b where ab: \"r = of_int a / of_nat b\" and \"b > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>r = rat_of_int a / rat_of_nat b; 0 < b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis Fract_of_int_quotient of_int_of_nat_eq quotient_of_unique zero_less_imp_eq_int)"], ["proof (state)\nthis:\n  r = rat_of_int a / rat_of_nat b\n  0 < b\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "define s where \"s = lcm b (lcm (fpxs_root_order f) (fpxs_root_order g))\""], ["proof (state)\nthis:\n  s = lcm b (lcm (fpxs_root_order f) (fpxs_root_order g))\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "have \"s > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. 0 < s", "by (auto simp: s_def intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < s\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "obtain f' where f: \"f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of f s] \\<open>s > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order f dvd s; 0 < s;\n   \\<And>f'.\n      f =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat s) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < s\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        f =\n        fpxs_compose_power (fpxs_of_fls f')\n         (1 / rat_of_nat s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: s_def)"], ["proof (state)\nthis:\n  f = fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s)\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "obtain g' where g: \"g = fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using fpxs_as_fls'[of g s] \\<open>s > 0\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>fpxs_root_order g dvd s; 0 < s;\n   \\<And>f'.\n      g =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat s) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  0 < s\n\ngoal (1 subgoal):\n 1. (\\<And>g'.\n        g =\n        fpxs_compose_power (fpxs_of_fls g')\n         (1 / rat_of_nat s) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: s_def)"], ["proof (state)\nthis:\n  g = fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "define n where \"n = (a * s) div b\""], ["proof (state)\nthis:\n  n = a * int s div int b\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "have \"b dvd s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b dvd s", "by (auto simp: s_def)"], ["proof (state)\nthis:\n  b dvd s\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "have sr_eq: \"r * rat_of_nat s = rat_of_int n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r * rat_of_nat s = rat_of_int n", "using \\<open>b > 0\\<close> \\<open>b dvd s\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n  b dvd s\n\ngoal (1 subgoal):\n 1. r * rat_of_nat s = rat_of_int n", "by (simp add: ab field_simps of_rat_divide of_rat_mult n_def rat_of_int_div_dvd)"], ["proof (state)\nthis:\n  r * rat_of_nat s = rat_of_int n\n\ngoal (2 subgoals):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g)\n 2. fpxs_shift r f * g = fpxs_shift r (f * g)", "show \"f * fpxs_shift r g = fpxs_shift r (f * g)\" \"fpxs_shift r f * g = fpxs_shift r (f * g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * fpxs_shift r g = fpxs_shift r (f * g) &&&\n    fpxs_shift r f * g = fpxs_shift r (f * g)", "unfolding f g"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n    fpxs_shift r (fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)) =\n    fpxs_shift r\n     (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n      fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)) &&&\n    fpxs_shift r (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s)) *\n    fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s) =\n    fpxs_shift r\n     (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n      fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s))", "using \\<open>s > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < s\n\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n    fpxs_shift r (fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)) =\n    fpxs_shift r\n     (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n      fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s)) &&&\n    fpxs_shift r (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s)) *\n    fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s) =\n    fpxs_shift r\n     (fpxs_compose_power (fpxs_of_fls f') (1 / rat_of_nat s) *\n      fpxs_compose_power (fpxs_of_fls g') (1 / rat_of_nat s))", "by (simp_all flip: fpxs_compose_power_mult fpxs_of_fls_mult fpxs_of_fls_shift\n                 add: sr_eq fls_shifted_times_simps mult_ac)"], ["proof (state)\nthis:\n  f * fpxs_shift r g = fpxs_shift r (f * g)\n  fpxs_shift r f * g = fpxs_shift r (f * g)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fpxs_shift_1: \"fpxs_shift r 1 = fpxs_X_power (-r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift r 1 = fpxs_X_power (- r)", "by transfer (auto simp: fun_eq_iff)"], ["", "lemma fpxs_X_power_conv_shift: \"fpxs_X_power r = fpxs_shift (-r) 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_X_power r = fpxs_shift (- r) 1", "by (simp add: fpxs_shift_1)"], ["", "lemma fpxs_shift_power [simp]: \"fpxs_shift n x ^ m = fpxs_shift (of_nat m * n) (x ^ m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift n x ^ m = fpxs_shift (rat_of_nat m * n) (x ^ m)", "by (induction m) (simp_all add: algebra_simps fpxs_shift_mult flip: fpxs_shift_add_left)"], ["", "lemma fpxs_compose_power_X_power [simp]:\n  \"s > 0 \\<Longrightarrow> fpxs_compose_power (fpxs_X_power r) s = fpxs_X_power (r * s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < s \\<Longrightarrow>\n    fpxs_compose_power (fpxs_X_power r) s = fpxs_X_power (r * s)", "by transfer (simp add: field_simps)"], ["", "subsection \\<open>The \\<open>n\\<close>-th root of a Puiseux series\\<close>"], ["", "text \\<open>\n  In this section, we define the formal root of a Puiseux series. This is done using the\n  same concept for formal power series. There is still one interesting theorems that is missing\n  here, e.g.\\ the uniqueness (which could probably be lifted over from FPSs) somehow.\n\\<close>"], ["", "definition fpxs_radical :: \"(nat \\<Rightarrow> 'a :: field_char_0 \\<Rightarrow> 'a) \\<Rightarrow> nat \\<Rightarrow> 'a fpxs \\<Rightarrow> 'a fpxs\" where\n  \"fpxs_radical rt r f = (if f = 0 then 0 else\n     (let f' = fls_base_factor_to_fps (fls_of_fpxs f);\n          f'' = fpxs_of_fls (fps_to_fls (fps_radical rt r f'))\n      in  fpxs_shift (-fpxs_val f / rat_of_nat r)\n            (fpxs_compose_power f'' (1 / rat_of_nat (fpxs_root_order f)))))\""], ["", "lemma fpxs_radical_0 [simp]: \"fpxs_radical rt r 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_radical rt r 0 = 0", "by (simp add: fpxs_radical_def)"], ["", "lemma \n  fixes r :: nat\n  assumes r: \"r > 0\"\n  shows fpxs_power_radical:\n        \"rt r (fpxs_nth f (fpxs_val f)) ^ r = fpxs_nth f (fpxs_val f) \\<Longrightarrow> fpxs_radical rt r f ^ r = f\"\n    and fpxs_radical_lead_coeff:\n          \"f \\<noteq> 0 \\<Longrightarrow> fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n                       rt r (fpxs_nth f (fpxs_val f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rt r (fpxs_nth f (fpxs_val f)) ^ r =\n     fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n     fpxs_radical rt r f ^ r = f) &&&\n    (f \\<noteq> 0 \\<Longrightarrow>\n     fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n     rt r (fpxs_nth f (fpxs_val f)))", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "define q where \"q = fpxs_root_order f\""], ["proof (state)\nthis:\n  q = fpxs_root_order f\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "define f' where \"f' = fls_base_factor_to_fps (fls_of_fpxs f)\""], ["proof (state)\nthis:\n  f' = fls_base_factor_to_fps (fls_of_fpxs f)\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have [simp]: \"fps_nth f' 0 = fpxs_nth f (fpxs_val f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f' $ 0 = fpxs_nth f (fpxs_val f)", "by (simp add: f'_def fls_nth_of_fpxs of_int_fls_subdegree_of_fpxs)"], ["proof (state)\nthis:\n  f' $ 0 = fpxs_nth f (fpxs_val f)\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "define f'' where \"f'' = fpxs_of_fls (fps_to_fls (fps_radical rt r f'))\""], ["proof (state)\nthis:\n  f'' = fpxs_of_fls (fps_to_fls (fps_radical rt r f'))\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have eq1: \"fls_of_fpxs f = fls_shift (-fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_of_fpxs f =\n    fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')", "by (subst fls_conv_base_factor_to_fps_shift_subdegree) (simp add: f'_def)"], ["proof (state)\nthis:\n  fls_of_fpxs f =\n  fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have eq2: \"fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / of_nat q) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / rat_of_nat q) = f", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f))\n     (1 / rat_of_nat (fpxs_root_order f)) =\n    f", "by (rule fpxs_as_fls)"], ["proof (state)\nthis:\n  fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / rat_of_nat q) = f\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "also"], ["proof (state)\nthis:\n  fpxs_compose_power (fpxs_of_fls (fls_of_fpxs f)) (1 / rat_of_nat q) = f\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "note eq1"], ["proof (state)\nthis:\n  fls_of_fpxs f =\n  fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "also"], ["proof (state)\nthis:\n  fls_of_fpxs f =\n  fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have \"fpxs_of_fls (fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')) =\n             fpxs_shift (- (fpxs_val f * rat_of_nat q)) (fpxs_of_fls (fps_to_fls f'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls\n     (fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')) =\n    fpxs_shift (- (fpxs_val f * rat_of_nat q)) (fpxs_of_fls (fps_to_fls f'))", "by (simp add: of_int_fls_subdegree_of_fpxs q_def)"], ["proof (state)\nthis:\n  fpxs_of_fls\n   (fls_shift (- fls_subdegree (fls_of_fpxs f)) (fps_to_fls f')) =\n  fpxs_shift (- (fpxs_val f * rat_of_nat q)) (fpxs_of_fls (fps_to_fls f'))\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "finally"], ["proof (chain)\npicking this:\n  fpxs_compose_power\n   (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n     (fpxs_of_fls (fps_to_fls f')))\n   (1 / rat_of_nat q) =\n  f", "have eq3: \"fpxs_compose_power (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n                       (fpxs_of_fls (fps_to_fls f'))) (1 / rat_of_nat q) = f\""], ["proof (prove)\nusing this:\n  fpxs_compose_power\n   (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n     (fpxs_of_fls (fps_to_fls f')))\n   (1 / rat_of_nat q) =\n  f\n\ngoal (1 subgoal):\n 1. fpxs_compose_power\n     (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n       (fpxs_of_fls (fps_to_fls f')))\n     (1 / rat_of_nat q) =\n    f", "."], ["proof (state)\nthis:\n  fpxs_compose_power\n   (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n     (fpxs_of_fls (fps_to_fls f')))\n   (1 / rat_of_nat q) =\n  f\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "{"], ["proof (state)\nthis:\n  fpxs_compose_power\n   (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n     (fpxs_of_fls (fps_to_fls f')))\n   (1 / rat_of_nat q) =\n  f\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "assume rt: \"rt r (fpxs_nth f (fpxs_val f)) ^ r = fpxs_nth f (fpxs_val f)\""], ["proof (state)\nthis:\n  rt r (fpxs_nth f (fpxs_val f)) ^ r = fpxs_nth f (fpxs_val f)\n\ngoal (2 subgoals):\n 1. rt r (fpxs_nth f (fpxs_val f)) ^ r =\n    fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n    fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "show \"fpxs_radical rt r f ^ r = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_radical rt r f ^ r = f", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "case [simp]: False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "have \"f'' ^ r = fpxs_of_fls (fps_to_fls (fps_radical rt r f' ^ r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f'' ^ r = fpxs_of_fls (fps_to_fls (fps_radical rt r f' ^ r))", "by (simp add: fps_to_fls_power f''_def)"], ["proof (state)\nthis:\n  f'' ^ r = fpxs_of_fls (fps_to_fls (fps_radical rt r f' ^ r))\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "also"], ["proof (state)\nthis:\n  f'' ^ r = fpxs_of_fls (fps_to_fls (fps_radical rt r f' ^ r))\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "have \"fps_radical rt r f' ^ r = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_radical rt r f' ^ r = f'", "using power_radical[of f' rt \"r - 1\"] r rt"], ["proof (prove)\nusing this:\n  f' $ 0 \\<noteq> (0::'a) \\<Longrightarrow>\n  (rt (Suc (r - 1)) (f' $ 0) ^ Suc (r - 1) = f' $ 0) =\n  (fps_radical rt (Suc (r - 1)) f' ^ Suc (r - 1) = f')\n  0 < r\n  rt r (fpxs_nth f (fpxs_val f)) ^ r = fpxs_nth f (fpxs_val f)\n\ngoal (1 subgoal):\n 1. fps_radical rt r f' ^ r = f'", "by (simp add: fpxs_nth_val_nonzero)"], ["proof (state)\nthis:\n  fps_radical rt r f' ^ r = f'\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "finally"], ["proof (chain)\npicking this:\n  f'' ^ r = fpxs_of_fls (fps_to_fls f')", "have \"f'' ^ r = fpxs_of_fls (fps_to_fls f')\""], ["proof (prove)\nusing this:\n  f'' ^ r = fpxs_of_fls (fps_to_fls f')\n\ngoal (1 subgoal):\n 1. f'' ^ r = fpxs_of_fls (fps_to_fls f')", "."], ["proof (state)\nthis:\n  f'' ^ r = fpxs_of_fls (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "have \"fpxs_shift (-fpxs_val f / rat_of_nat r) (fpxs_compose_power f'' (1 / of_nat q)) ^ r =\n              fpxs_shift (-fpxs_val f) (fpxs_compose_power (f'' ^ r) (1 / of_nat q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat q)) ^\n    r =\n    fpxs_shift (- fpxs_val f)\n     (fpxs_compose_power (f'' ^ r) (1 / rat_of_nat q))", "unfolding q_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat (fpxs_root_order f))) ^\n    r =\n    fpxs_shift (- fpxs_val f)\n     (fpxs_compose_power (f'' ^ r) (1 / rat_of_nat (fpxs_root_order f)))", "using r"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat (fpxs_root_order f))) ^\n    r =\n    fpxs_shift (- fpxs_val f)\n     (fpxs_compose_power (f'' ^ r) (1 / rat_of_nat (fpxs_root_order f)))", "by (subst fpxs_shift_power, subst fpxs_compose_power_power [symmetric]) simp_all"], ["proof (state)\nthis:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) ^\n  r =\n  fpxs_shift (- fpxs_val f)\n   (fpxs_compose_power (f'' ^ r) (1 / rat_of_nat q))\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "also"], ["proof (state)\nthis:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) ^\n  r =\n  fpxs_shift (- fpxs_val f)\n   (fpxs_compose_power (f'' ^ r) (1 / rat_of_nat q))\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "have \"f'' ^ r = fpxs_of_fls (fps_to_fls f')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f'' ^ r = fpxs_of_fls (fps_to_fls f')", "by fact"], ["proof (state)\nthis:\n  f'' ^ r = fpxs_of_fls (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "also"], ["proof (state)\nthis:\n  f'' ^ r = fpxs_of_fls (fps_to_fls f')\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "have \"fpxs_shift (-fpxs_val f) (fpxs_compose_power\n                   (fpxs_of_fls (fps_to_fls f')) (1 / of_nat q)) = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f)\n     (fpxs_compose_power (fpxs_of_fls (fps_to_fls f')) (1 / rat_of_nat q)) =\n    f", "using r eq3"], ["proof (prove)\nusing this:\n  0 < r\n  fpxs_compose_power\n   (fpxs_shift (- (fpxs_val f * rat_of_nat q))\n     (fpxs_of_fls (fps_to_fls f')))\n   (1 / rat_of_nat q) =\n  f\n\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f)\n     (fpxs_compose_power (fpxs_of_fls (fps_to_fls f')) (1 / rat_of_nat q)) =\n    f", "by simp"], ["proof (state)\nthis:\n  fpxs_shift (- fpxs_val f)\n   (fpxs_compose_power (fpxs_of_fls (fps_to_fls f')) (1 / rat_of_nat q)) =\n  f\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f\n 2. f \\<noteq> 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "finally"], ["proof (chain)\npicking this:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) ^\n  r =\n  f", "show \"fpxs_radical rt r f ^ r = f\""], ["proof (prove)\nusing this:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) ^\n  r =\n  f\n\ngoal (1 subgoal):\n 1. fpxs_radical rt r f ^ r = f", "by (simp add: fpxs_radical_def f'_def f''_def q_def)"], ["proof (state)\nthis:\n  fpxs_radical rt r f ^ r = f\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> fpxs_radical rt r f ^ r = f", "qed (use r in auto)"], ["proof (state)\nthis:\n  fpxs_radical rt r f ^ r = f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "}"], ["proof (state)\nthis:\n  rt r (fpxs_nth f (fpxs_val f)) ^ r =\n  fpxs_nth f (fpxs_val f) \\<Longrightarrow>\n  fpxs_radical rt r f ^ r = f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "assume [simp]: \"f \\<noteq> 0\""], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have \"fpxs_nth (fpxs_shift (-fpxs_val f / of_nat r) (fpxs_compose_power f'' (1 / of_nat q)))\n          (fpxs_val f / of_nat r) = fpxs_nth f'' 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth\n     (fpxs_shift (- fpxs_val f / rat_of_nat r)\n       (fpxs_compose_power f'' (1 / rat_of_nat q)))\n     (fpxs_val f / rat_of_nat r) =\n    fpxs_nth f'' 0", "using r"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. fpxs_nth\n     (fpxs_shift (- fpxs_val f / rat_of_nat r)\n       (fpxs_compose_power f'' (1 / rat_of_nat q)))\n     (fpxs_val f / rat_of_nat r) =\n    fpxs_nth f'' 0", "by (simp add: q_def)"], ["proof (state)\nthis:\n  fpxs_nth\n   (fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat q)))\n   (fpxs_val f / rat_of_nat r) =\n  fpxs_nth f'' 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "also"], ["proof (state)\nthis:\n  fpxs_nth\n   (fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat q)))\n   (fpxs_val f / rat_of_nat r) =\n  fpxs_nth f'' 0\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have \"fpxs_shift (-fpxs_val f / of_nat r) (fpxs_compose_power f'' (1 / of_nat q)) =\n               fpxs_radical rt r f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_shift (- fpxs_val f / rat_of_nat r)\n     (fpxs_compose_power f'' (1 / rat_of_nat q)) =\n    fpxs_radical rt r f", "by (simp add: fpxs_radical_def q_def f'_def f''_def)"], ["proof (state)\nthis:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) =\n  fpxs_radical rt r f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "also"], ["proof (state)\nthis:\n  fpxs_shift (- fpxs_val f / rat_of_nat r)\n   (fpxs_compose_power f'' (1 / rat_of_nat q)) =\n  fpxs_radical rt r f\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "have \"fpxs_nth f'' 0 = rt r (fpxs_nth f (fpxs_val f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_nth f'' 0 = rt r (fpxs_nth f (fpxs_val f))", "using r"], ["proof (prove)\nusing this:\n  0 < r\n\ngoal (1 subgoal):\n 1. fpxs_nth f'' 0 = rt r (fpxs_nth f (fpxs_val f))", "by (simp add: f''_def fpxs_nth_of_fls)"], ["proof (state)\nthis:\n  fpxs_nth f'' 0 = rt r (fpxs_nth f (fpxs_val f))\n\ngoal (1 subgoal):\n 1. f \\<noteq> 0 \\<Longrightarrow>\n    fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "finally"], ["proof (chain)\npicking this:\n  fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n  rt r (fpxs_nth f (fpxs_val f))", "show \"fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n                  rt r (fpxs_nth f (fpxs_val f))\""], ["proof (prove)\nusing this:\n  fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n  rt r (fpxs_nth f (fpxs_val f))\n\ngoal (1 subgoal):\n 1. fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n    rt r (fpxs_nth f (fpxs_val f))", "."], ["proof (state)\nthis:\n  fpxs_nth (fpxs_radical rt r f) (fpxs_val f / rat_of_nat r) =\n  rt r (fpxs_nth f (fpxs_val f))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fls_base_factor_power:\n  fixes f :: \"'a::{semiring_1, semiring_no_zero_divisors} fls\"\n  shows \"fls_base_factor (f ^ n) = fls_base_factor f ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_base_factor (f ^ n) = fls_base_factor f ^ n", "proof (cases \"f = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fls_base_factor (f ^ n) = fls_base_factor f ^ n\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fls_base_factor (f ^ n) = fls_base_factor f ^ n", "case False"], ["proof (state)\nthis:\n  f \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fls_base_factor (f ^ n) = fls_base_factor f ^ n\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fls_base_factor (f ^ n) = fls_base_factor f ^ n", "have [simp]: \"f ^ n \\<noteq> 0\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^ n \\<noteq> 0", "by (induction n) (use False in auto)"], ["proof (state)\nthis:\n  f ^ ?n \\<noteq> 0\n\ngoal (2 subgoals):\n 1. f = 0 \\<Longrightarrow> fls_base_factor (f ^ n) = fls_base_factor f ^ n\n 2. f \\<noteq> 0 \\<Longrightarrow>\n    fls_base_factor (f ^ n) = fls_base_factor f ^ n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_base_factor (f ^ n) = fls_base_factor f ^ n", "using False"], ["proof (prove)\nusing this:\n  f \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fls_base_factor (f ^ n) = fls_base_factor f ^ n", "by (induction n) (auto simp: fls_base_factor_mult simp flip: fls_times_both_shifted_simp)"], ["proof (state)\nthis:\n  fls_base_factor (f ^ n) = fls_base_factor f ^ n\n\ngoal (1 subgoal):\n 1. f = 0 \\<Longrightarrow> fls_base_factor (f ^ n) = fls_base_factor f ^ n", "qed (cases n; simp)"], ["", "(* TODO: Uniqueness of radical. Also: composition and composition inverse *)"], ["", "hide_const (open) supp"], ["", "subsection \\<open>Algebraic closedness\\<close>"], ["", "text \\<open>\n  We will now show that the field of formal Puiseux series over an algebraically closed field of\n  characteristic 0 is again algebraically closed.\n\n  The typeclass constraint \\<^class>\\<open>field_gcd\\<close> is a technical constraint that mandates that\n  the field has a (trivial) GCD operation defined on it. It comes from some peculiarities of\n  Isabelle's typeclass system and can be considered unimportant, since any concrete type of\n  class \\<^class>\\<open>field\\<close> can easily be made an instance of \\<^class>\\<open>field_gcd\\<close>.\n\n  It would be possible to get rid of this constraint entirely here, but it is not worth\n  the effort.\n\n  The proof is a fairly standard one that uses Hensel's lemma. Some preliminary tricks are\n  required to be able to use it, however, namely a number of non-obvious changes of variables\n  to turn the polynomial with Puiseux coefficients into one with formal power series coefficients.\n  The overall approach was taken from an article by Nowak~\\cite{nowak2000}.\n\n  Basically, what we need to show is this: Let \n  \\[p(X,Z) = a_n(Z) X^n + a_{n-1}(Z) X^{n-1} + \\ldots + a_0(Z)\\]\n  be a polynomial in \\<open>X\\<close> of degree at least 2\n  with coefficients that are formal Puiseux series in \\<open>Z\\<close>. Then \\<open>p\\<close> is reducible, i.e. it splits\n  into two non-constant factors.\n\n  Due to work we have already done elsewhere, we may assume here that $a_n = 1$, $a_{n-1} = 0$, and\n  $a_0 \\neq 0$, all of which will come in very useful.\n\\<close>"], ["", "instance fpxs :: (\"{alg_closed_field, field_char_0, field_gcd}\") alg_closed_field"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, alg_closed_field_class)", "proof (rule alg_closedI_reducible_coeff_deg_minus_one_eq_0)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "fix p :: \"'a fpxs poly\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "assume deg_p: \"degree p > 1\"  and lc_p: \"lead_coeff p = 1\""], ["proof (state)\nthis:\n  1 < degree p\n  monic p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "assume coeff_deg_minus_1: \"coeff p (degree p - 1) = 0\""], ["proof (state)\nthis:\n  coeff p (degree p - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "assume \"coeff p 0 \\<noteq> 0\""], ["proof (state)\nthis:\n  coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define N where \"N = degree p\""], ["proof (state)\nthis:\n  N = degree p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    Let $a_0, \\ldots, a_n$ be the coefficients of \\<open>p\\<close> with $a_n = 1$. Now let \\<open>r\\<close> be the maximum of\n    $-\\frac{\\text{val}(a_i)}{n-i}$ ranging over all $i < n$ such that $a_i \\neq 0$.\n  \\<close>"], ["proof (state)\nthis:\n  N = degree p\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define r :: rat\n    where \"r = (MAX i\\<in>{i\\<in>{..<N}. coeff p i \\<noteq> 0}.\n                  -fpxs_val (poly.coeff p i) / (rat_of_nat N - rat_of_nat i))\""], ["proof (state)\nthis:\n  r =\n  (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n      - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We write $r = a / b$ such that all the $a_i$ can be written as Laurent series in\n    $X^{1/b}$, i.e. the root orders of all the $a_i$ divide $b$:\n  \\<close>"], ["proof (state)\nthis:\n  r =\n  (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n      - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "obtain a b where ab: \"b > 0\" \"r = of_int a / of_nat b\" \"\\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>0 < b; r = rat_of_int a / rat_of_nat b;\n         \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>0 < b; r = rat_of_int a / rat_of_nat b;\n         \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define b where \"b = lcm (nat (snd (quotient_of r))) (LCM i\\<in>{..N}. fpxs_root_order (coeff p i))\""], ["proof (state)\nthis:\n  b =\n  lcm (nat (snd (quotient_of r)))\n   (LCM i\\<in>{..N}. fpxs_root_order (coeff p i))\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>0 < b; r = rat_of_int a / rat_of_nat b;\n         \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define x where \"x = b div nat (snd (quotient_of r))\""], ["proof (state)\nthis:\n  x = b div nat (snd (quotient_of r))\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>0 < b; r = rat_of_int a / rat_of_nat b;\n         \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define a where \"a = fst (quotient_of r) * int x\""], ["proof (state)\nthis:\n  a = fst (quotient_of r) * int x\n\ngoal (1 subgoal):\n 1. (\\<And>b a.\n        \\<lbrakk>0 < b; r = rat_of_int a / rat_of_nat b;\n         \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that)"], ["proof (state)\ngoal (3 subgoals):\n 1. 0 < ?b\n 2. r = rat_of_int ?a / rat_of_nat ?b\n 3. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd ?b", "show \"b > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < b", "using quotient_of_denom_pos'[of r]"], ["proof (prove)\nusing this:\n  0 < snd (quotient_of r)\n\ngoal (1 subgoal):\n 1. 0 < b", "by (auto simp: b_def intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < b\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "have b_eq: \"b = nat (snd (quotient_of r)) * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = nat (snd (quotient_of r)) * x", "by (simp add: x_def b_def)"], ["proof (state)\nthis:\n  b = nat (snd (quotient_of r)) * x\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "have \"x > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < x", "using b_eq \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  b = nat (snd (quotient_of r)) * x\n  0 < b\n\ngoal (1 subgoal):\n 1. 0 < x", "by (auto intro!: Nat.gr0I)"], ["proof (state)\nthis:\n  0 < x\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "have \"r = rat_of_int (fst (quotient_of r)) / rat_of_int (int (nat (snd (quotient_of r))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r =\n    rat_of_int (fst (quotient_of r)) /\n    rat_of_int (int (nat (snd (quotient_of r))))", "using quotient_of_denom_pos'[of r] quotient_of_div[of r]"], ["proof (prove)\nusing this:\n  0 < snd (quotient_of r)\n  quotient_of r = (?n, ?d) \\<Longrightarrow>\n  r = rat_of_int ?n / rat_of_int ?d\n\ngoal (1 subgoal):\n 1. r =\n    rat_of_int (fst (quotient_of r)) /\n    rat_of_int (int (nat (snd (quotient_of r))))", "by simp"], ["proof (state)\nthis:\n  r =\n  rat_of_int (fst (quotient_of r)) /\n  rat_of_int (int (nat (snd (quotient_of r))))\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "also"], ["proof (state)\nthis:\n  r =\n  rat_of_int (fst (quotient_of r)) /\n  rat_of_int (int (nat (snd (quotient_of r))))\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "have \"\\<dots> = rat_of_int a / rat_of_nat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fst (quotient_of r)) /\n    rat_of_int (int (nat (snd (quotient_of r)))) =\n    rat_of_int a / rat_of_nat b", "using \\<open>x > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < x\n\ngoal (1 subgoal):\n 1. rat_of_int (fst (quotient_of r)) /\n    rat_of_int (int (nat (snd (quotient_of r)))) =\n    rat_of_int a / rat_of_nat b", "by (simp add: a_def b_eq)"], ["proof (state)\nthis:\n  rat_of_int (fst (quotient_of r)) /\n  rat_of_int (int (nat (snd (quotient_of r)))) =\n  rat_of_int a / rat_of_nat b\n\ngoal (2 subgoals):\n 1. r = rat_of_int ?a / rat_of_nat b\n 2. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "finally"], ["proof (chain)\npicking this:\n  r = rat_of_int a / rat_of_nat b", "show \"r = rat_of_int a / rat_of_nat b\""], ["proof (prove)\nusing this:\n  r = rat_of_int a / rat_of_nat b\n\ngoal (1 subgoal):\n 1. r = rat_of_int a / rat_of_nat b", "."], ["proof (state)\nthis:\n  r = rat_of_int a / rat_of_nat b\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "show \"\\<forall>i\\<le>N. fpxs_root_order (poly.coeff p i) dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b", "by (auto simp: b_def)"], ["proof (state)\nthis:\n  \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < b\n  r = rat_of_int a / rat_of_nat b\n  \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We write all the coefficients of \\<open>p\\<close> as Laurent series in $X^{1/b}$:\n  \\<close>"], ["proof (state)\nthis:\n  0 < b\n  r = rat_of_int a / rat_of_nat b\n  \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"\\<exists>c. coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)\" if i: \"i \\<le> N\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)", "have \"fpxs_root_order (coeff p i) dvd b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_root_order (coeff p i) dvd b", "using ab(3) i"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>N. fpxs_root_order (coeff p i) dvd b\n  i \\<le> N\n\ngoal (1 subgoal):\n 1. fpxs_root_order (coeff p i) dvd b", "by auto"], ["proof (state)\nthis:\n  fpxs_root_order (coeff p i) dvd b\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)", "from fpxs_as_fls'[OF this \\<open>b > 0\\<close>]"], ["proof (chain)\npicking this:\n  (\\<And>f'.\n      coeff p i =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat b) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>f'.\n      coeff p i =\n      fpxs_compose_power (fpxs_of_fls f')\n       (1 / rat_of_nat b) \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)", "by metis"], ["proof (state)\nthis:\n  \\<exists>c.\n     coeff p i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow>\n  \\<exists>c.\n     coeff p ?i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "then"], ["proof (chain)\npicking this:\n  ?i \\<le> N \\<Longrightarrow>\n  \\<exists>c.\n     coeff p ?i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)", "obtain c_aux where c_aux:\n    \"coeff p i = fpxs_compose_power (fpxs_of_fls (c_aux i)) (1 / rat_of_nat b)\" if \"i \\<le> N\" for i"], ["proof (prove)\nusing this:\n  ?i \\<le> N \\<Longrightarrow>\n  \\<exists>c.\n     coeff p ?i = fpxs_compose_power (fpxs_of_fls c) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. (\\<And>c_aux.\n        (\\<And>i.\n            i \\<le> N \\<Longrightarrow>\n            coeff p i =\n            fpxs_compose_power (fpxs_of_fls (c_aux i))\n             (1 / rat_of_nat b)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow>\n  coeff p ?i =\n  fpxs_compose_power (fpxs_of_fls (c_aux ?i)) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define c where \"c = (\\<lambda>i. if i \\<le> N then c_aux i else 0)\""], ["proof (state)\nthis:\n  c = (\\<lambda>i. if i \\<le> N then c_aux i else 0)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have c: \"coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)", "using c_aux[of i]"], ["proof (prove)\nusing this:\n  i \\<le> N \\<Longrightarrow>\n  coeff p i = fpxs_compose_power (fpxs_of_fls (c_aux i)) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)", "by (auto simp: c_def N_def coeff_eq_0)"], ["proof (state)\nthis:\n  coeff p ?i = fpxs_compose_power (fpxs_of_fls (c ?i)) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have c_eq_0 [simp]: \"c i = 0\" if \"i > N\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. c i = 0", "using that"], ["proof (prove)\nusing this:\n  N < i\n\ngoal (1 subgoal):\n 1. c i = 0", "by (auto simp: c_def)"], ["proof (state)\nthis:\n  N < ?i \\<Longrightarrow> c ?i = 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have c_eq: \"fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)", "using c[of i] \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)\n  0 < b\n\ngoal (1 subgoal):\n 1. fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)", "by (simp add: fpxs_compose_power_distrib)"], ["proof (state)\nthis:\n  fpxs_of_fls (c ?i) = fpxs_compose_power (coeff p ?i) (rat_of_nat b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We perform another change of variables and multiply with a suitable power of \\<open>X\\<close> to turn our\n    Laurent coefficients into FPS coefficients:\n  \\<close>"], ["proof (state)\nthis:\n  fpxs_of_fls (c ?i) = fpxs_compose_power (coeff p ?i) (rat_of_nat b)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define c' where \"c' = (\\<lambda>i. fls_X_intpow ((int N - int i) * a) * c i)\""], ["proof (state)\nthis:\n  c' = (\\<lambda>i. fls_X_intpow ((int N - int i) * a) * c i)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"c' N = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c' N = 1", "using c[of N] \\<open>lead_coeff p = 1\\<close> \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  coeff p N = fpxs_compose_power (fpxs_of_fls (c N)) (1 / rat_of_nat b)\n  monic p\n  0 < b\n\ngoal (1 subgoal):\n 1. c' N = 1", "by (simp add: c'_def N_def)"], ["proof (state)\nthis:\n  c' N = 1\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have subdegree_c: \"of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b\"\n    if i: \"i \\<le> N\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "have \"rat_of_int (fls_subdegree (c i)) = fpxs_val (fpxs_of_fls (c i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (fpxs_of_fls (c i))", "by simp"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (fpxs_of_fls (c i))\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "also"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (fpxs_of_fls (c i))\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "have \"fpxs_of_fls (c i) = fpxs_compose_power (poly.coeff p i) (rat_of_nat b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)", "by (subst c_eq) auto"], ["proof (state)\nthis:\n  fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "also"], ["proof (state)\nthis:\n  fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "have \"fpxs_val \\<dots> = fpxs_val (coeff p i) * rat_of_nat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power (coeff p i) (rat_of_nat b)) =\n    fpxs_val (coeff p i) * rat_of_nat b", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. fpxs_val (fpxs_compose_power (coeff p i) (rat_of_nat b)) =\n    fpxs_val (coeff p i) * rat_of_nat b", "by simp"], ["proof (state)\nthis:\n  fpxs_val (fpxs_compose_power (coeff p i) (rat_of_nat b)) =\n  fpxs_val (coeff p i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "finally"], ["proof (chain)\npicking this:\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "show ?thesis"], ["proof (prove)\nusing this:\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b", "."], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow>\n  rat_of_int (fls_subdegree (c ?i)) = fpxs_val (coeff p ?i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We now write all the coefficients as FPSs:\n  \\<close>"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow>\n  rat_of_int (fls_subdegree (c ?i)) = fpxs_val (coeff p ?i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"\\<exists>c''. c' i = fps_to_fls c''\" if \"i \\<le> N\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fps_to_fls c''", "proof (cases \"i = N\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "case True"], ["proof (state)\nthis:\n  i = N\n\ngoal (2 subgoals):\n 1. i = N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "hence \"c' i = fps_to_fls 1\""], ["proof (prove)\nusing this:\n  i = N\n\ngoal (1 subgoal):\n 1. c' i = fps_to_fls 1", "using \\<open>c' N = 1\\<close>"], ["proof (prove)\nusing this:\n  i = N\n  c' N = 1\n\ngoal (1 subgoal):\n 1. c' i = fps_to_fls 1", "by simp"], ["proof (state)\nthis:\n  c' i = fps_to_fls 1\n\ngoal (2 subgoals):\n 1. i = N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "thus ?thesis"], ["proof (prove)\nusing this:\n  c' i = fps_to_fls 1\n\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fps_to_fls c''", "by metis"], ["proof (state)\nthis:\n  \\<exists>c''. c' i = fps_to_fls c''\n\ngoal (1 subgoal):\n 1. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "case i: False"], ["proof (state)\nthis:\n  i \\<noteq> N\n\ngoal (1 subgoal):\n 1. i \\<noteq> N \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fps_to_fls c''", "proof (cases \"c i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. c i = 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "case True"], ["proof (state)\nthis:\n  c i = 0\n\ngoal (2 subgoals):\n 1. c i = 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "hence \"c' i = 0\""], ["proof (prove)\nusing this:\n  c i = 0\n\ngoal (1 subgoal):\n 1. c' i = 0", "by (auto simp: c'_def)"], ["proof (state)\nthis:\n  c' i = 0\n\ngoal (2 subgoals):\n 1. c i = 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''\n 2. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "thus ?thesis"], ["proof (prove)\nusing this:\n  c' i = 0\n\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fps_to_fls c''", "by auto"], ["proof (state)\nthis:\n  \\<exists>c''. c' i = fps_to_fls c''\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "case False"], ["proof (state)\nthis:\n  c i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "hence \"coeff p i \\<noteq> 0\""], ["proof (prove)\nusing this:\n  c i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff p i \\<noteq> 0", "using c_eq[of i]"], ["proof (prove)\nusing this:\n  c i \\<noteq> 0\n  fpxs_of_fls (c i) = fpxs_compose_power (coeff p i) (rat_of_nat b)\n\ngoal (1 subgoal):\n 1. coeff p i \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  coeff p i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "hence r_ge: \"r \\<ge> -fpxs_val (poly.coeff p i) / (rat_of_nat N - rat_of_nat i)\""], ["proof (prove)\nusing this:\n  coeff p i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) \\<le> r", "unfolding r_def"], ["proof (prove)\nusing this:\n  coeff p i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)\n    \\<le> (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))", "using i that False"], ["proof (prove)\nusing this:\n  coeff p i \\<noteq> 0\n  i \\<noteq> N\n  i \\<le> N\n  c i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)\n    \\<le> (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))", "by (intro Max.coboundedI) auto"], ["proof (state)\nthis:\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) \\<le> r\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "have \"fls_subdegree (c' i) = fls_subdegree (c i) + (int N - int i) * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_subdegree (c' i) = fls_subdegree (c i) + (int N - int i) * a", "using i that False"], ["proof (prove)\nusing this:\n  i \\<noteq> N\n  i \\<le> N\n  c i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. fls_subdegree (c' i) = fls_subdegree (c i) + (int N - int i) * a", "by (simp add: c'_def fls_X_intpow_times_conv_shift subdegree_c)"], ["proof (state)\nthis:\n  fls_subdegree (c' i) = fls_subdegree (c i) + (int N - int i) * a\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "also"], ["proof (state)\nthis:\n  fls_subdegree (c' i) = fls_subdegree (c i) + (int N - int i) * a\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "have \"rat_of_int \\<dots> =\n                   fpxs_val (poly.coeff p i) * of_nat b + (of_nat N - of_nat i) * of_int a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i) + (int N - int i) * a) =\n    fpxs_val (coeff p i) * rat_of_nat b +\n    (rat_of_nat N - rat_of_nat i) * rat_of_int a", "using i that False"], ["proof (prove)\nusing this:\n  i \\<noteq> N\n  i \\<le> N\n  c i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i) + (int N - int i) * a) =\n    fpxs_val (coeff p i) * rat_of_nat b +\n    (rat_of_nat N - rat_of_nat i) * rat_of_int a", "by (simp add: subdegree_c)"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i) + (int N - int i) * a) =\n  fpxs_val (coeff p i) * rat_of_nat b +\n  (rat_of_nat N - rat_of_nat i) * rat_of_int a\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "also"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i) + (int N - int i) * a) =\n  fpxs_val (coeff p i) * rat_of_nat b +\n  (rat_of_nat N - rat_of_nat i) * rat_of_int a\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "have \"\\<dots> = of_nat b * (of_nat N - of_nat i) *\n                        (fpxs_val (poly.coeff p i) / (of_nat N - of_nat i) + r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) * rat_of_nat b +\n    (rat_of_nat N - rat_of_nat i) * rat_of_int a =\n    rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n    (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)", "using \\<open>b > 0\\<close> i"], ["proof (prove)\nusing this:\n  0 < b\n  i \\<noteq> N\n\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) * rat_of_nat b +\n    (rat_of_nat N - rat_of_nat i) * rat_of_int a =\n    rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n    (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)", "by (auto simp: field_simps ab(2))"], ["proof (state)\nthis:\n  fpxs_val (coeff p i) * rat_of_nat b +\n  (rat_of_nat N - rat_of_nat i) * rat_of_int a =\n  rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n  (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "also"], ["proof (state)\nthis:\n  fpxs_val (coeff p i) * rat_of_nat b +\n  (rat_of_nat N - rat_of_nat i) * rat_of_int a =\n  rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n  (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "have \"\\<dots> \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n            (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)", "using r_ge that"], ["proof (prove)\nusing this:\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) \\<le> r\n  i \\<le> N\n\ngoal (1 subgoal):\n 1. 0 \\<le> rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n            (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)", "by (intro mult_nonneg_nonneg) auto"], ["proof (state)\nthis:\n  0 \\<le> rat_of_nat b * (rat_of_nat N - rat_of_nat i) *\n          (fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) + r)\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "finally"], ["proof (chain)\npicking this:\n  0 \\<le> rat_of_int (fls_subdegree (c' i))", "have \"fls_subdegree (c' i) \\<ge> 0\""], ["proof (prove)\nusing this:\n  0 \\<le> rat_of_int (fls_subdegree (c' i))\n\ngoal (1 subgoal):\n 1. 0 \\<le> fls_subdegree (c' i)", "by simp"], ["proof (state)\nthis:\n  0 \\<le> fls_subdegree (c' i)\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "hence \"\\<exists>c''. c' i = fls_shift 0 (fps_to_fls c'')\""], ["proof (prove)\nusing this:\n  0 \\<le> fls_subdegree (c' i)\n\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fls_shift 0 (fps_to_fls c'')", "by (intro fls_as_fps') (auto simp: algebra_simps)"], ["proof (state)\nthis:\n  \\<exists>c''. c' i = fls_shift 0 (fps_to_fls c'')\n\ngoal (1 subgoal):\n 1. c i \\<noteq> 0 \\<Longrightarrow> \\<exists>c''. c' i = fps_to_fls c''", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>c''. c' i = fls_shift 0 (fps_to_fls c'')\n\ngoal (1 subgoal):\n 1. \\<exists>c''. c' i = fps_to_fls c''", "by simp"], ["proof (state)\nthis:\n  \\<exists>c''. c' i = fps_to_fls c''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>c''. c' i = fps_to_fls c''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow> \\<exists>c''. c' ?i = fps_to_fls c''\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "then"], ["proof (chain)\npicking this:\n  ?i \\<le> N \\<Longrightarrow> \\<exists>c''. c' ?i = fps_to_fls c''", "obtain c''_aux where c''_aux: \"c' i = fps_to_fls (c''_aux i)\" if \"i \\<le> N\" for i"], ["proof (prove)\nusing this:\n  ?i \\<le> N \\<Longrightarrow> \\<exists>c''. c' ?i = fps_to_fls c''\n\ngoal (1 subgoal):\n 1. (\\<And>c''_aux.\n        (\\<And>i.\n            i \\<le> N \\<Longrightarrow>\n            c' i = fps_to_fls (c''_aux i)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?i \\<le> N \\<Longrightarrow> c' ?i = fps_to_fls (c''_aux ?i)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define c'' where \"c'' = (\\<lambda>i. if i \\<le> N then c''_aux i else 0)\""], ["proof (state)\nthis:\n  c'' = (\\<lambda>i. if i \\<le> N then c''_aux i else 0)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have c': \"c' i = fps_to_fls (c'' i)\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. c' i = fps_to_fls (c'' i)", "proof (cases \"i \\<le> N\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<le> N \\<Longrightarrow> c' i = fps_to_fls (c'' i)\n 2. \\<not> i \\<le> N \\<Longrightarrow> c' i = fps_to_fls (c'' i)", "case False"], ["proof (state)\nthis:\n  \\<not> i \\<le> N\n\ngoal (2 subgoals):\n 1. i \\<le> N \\<Longrightarrow> c' i = fps_to_fls (c'' i)\n 2. \\<not> i \\<le> N \\<Longrightarrow> c' i = fps_to_fls (c'' i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i \\<le> N\n\ngoal (1 subgoal):\n 1. c' i = fps_to_fls (c'' i)", "by (auto simp: c'_def c''_def)"], ["proof (state)\nthis:\n  c' i = fps_to_fls (c'' i)\n\ngoal (1 subgoal):\n 1. i \\<le> N \\<Longrightarrow> c' i = fps_to_fls (c'' i)", "qed (auto simp: c''_def c''_aux)"], ["proof (state)\nthis:\n  c' ?i = fps_to_fls (c'' ?i)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have c''_eq: \"fps_to_fls (c'' i) = c' i\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_to_fls (c'' i) = c' i", "using c'[of i]"], ["proof (prove)\nusing this:\n  c' i = fps_to_fls (c'' i)\n\ngoal (1 subgoal):\n 1. fps_to_fls (c'' i) = c' i", "by simp"], ["proof (state)\nthis:\n  fps_to_fls (c'' ?i) = c' ?i\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define p' where \"p' = Abs_poly c''\""], ["proof (state)\nthis:\n  p' = Abs_poly c''\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have coeff_p': \"coeff p' = c''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p' = c''", "unfolding p'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff (Abs_poly c'') = c''", "proof (rule coeff_Abs_poly)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ?n < i \\<Longrightarrow> c'' i = 0", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. ?n < i \\<Longrightarrow> c'' i = 0", "assume \"i > N\""], ["proof (state)\nthis:\n  N < i\n\ngoal (1 subgoal):\n 1. \\<And>i. ?n < i \\<Longrightarrow> c'' i = 0", "hence \"coeff p i = 0\""], ["proof (prove)\nusing this:\n  N < i\n\ngoal (1 subgoal):\n 1. coeff p i = 0", "by (simp add: N_def coeff_eq_0)"], ["proof (state)\nthis:\n  coeff p i = 0\n\ngoal (1 subgoal):\n 1. \\<And>i. ?n < i \\<Longrightarrow> c'' i = 0", "thus \"c'' i = 0\""], ["proof (prove)\nusing this:\n  coeff p i = 0\n\ngoal (1 subgoal):\n 1. c'' i = 0", "using c'[of i] c[of i] \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  coeff p i = 0\n  c' i = fps_to_fls (c'' i)\n  coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)\n  0 < b\n\ngoal (1 subgoal):\n 1. c'' i = 0", "by (auto simp: c'_def fls_shift_eq0_iff)"], ["proof (state)\nthis:\n  c'' i = 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  coeff p' = c''\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We set up some homomorphisms to convert between the two polynomials:\n  \\<close>"], ["proof (state)\nthis:\n  coeff p' = c''\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret comppow: map_poly_inj_idom_hom \"(\\<lambda>x::'a fpxs. fpxs_compose_power x (1/rat_of_nat b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom\n     (\\<lambda>x. fpxs_compose_power x (1 / rat_of_nat b))", "by unfold_locales (use \\<open>b > 0\\<close> in simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define lift_poly :: \"'a fps poly \\<Rightarrow> 'a fpxs poly\" where\n    \"lift_poly = (\\<lambda>p. pcompose p [:0, fpxs_X_power r:]) \\<circ>\n                  (map_poly ((\\<lambda>x. fpxs_compose_power x (1/rat_of_nat b)) \\<circ> fpxs_of_fls \\<circ> fps_to_fls))\""], ["proof (state)\nthis:\n  lift_poly =\n  (\\<lambda>p. p \\<circ>\\<^sub>p [:0, fpxs_X_power r:]) \\<circ>\n  map_poly\n   ((\\<lambda>x. fpxs_compose_power x (1 / rat_of_nat b)) \\<circ>\n    fpxs_of_fls \\<circ>\n    fps_to_fls)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have [simp]: \"degree (lift_poly q) = degree q\" for q"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (lift_poly q) = degree q", "unfolding lift_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree\n     (((\\<lambda>p. p \\<circ>\\<^sub>p [:0, fpxs_X_power r:]) \\<circ>\n       map_poly\n        ((\\<lambda>x. fpxs_compose_power x (1 / rat_of_nat b)) \\<circ>\n         fpxs_of_fls \\<circ>\n         fps_to_fls))\n       q) =\n    degree q", "by (simp add: degree_map_poly)"], ["proof (state)\nthis:\n  degree (lift_poly ?q) = degree ?q\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret fps_to_fls: map_poly_inj_idom_hom fps_to_fls"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom fps_to_fls", "by unfold_locales (simp_all add: fls_times_fps_to_fls)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret fpxs_of_fls: map_poly_inj_idom_hom fpxs_of_fls"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom fpxs_of_fls", "by unfold_locales simp_all"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret lift_poly: inj_idom_hom lift_poly"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_idom_hom lift_poly", "unfolding lift_poly_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_idom_hom\n     ((\\<lambda>p. p \\<circ>\\<^sub>p [:0, fpxs_X_power r:]) \\<circ>\n      map_poly\n       ((\\<lambda>x. fpxs_compose_power x (1 / rat_of_nat b)) \\<circ>\n        fpxs_of_fls \\<circ>\n        fps_to_fls))", "by (intro inj_idom_hom_compose inj_idom_hom_pcompose inj_idom_hom.inj_idom_hom_map_poly\n              fps_to_fls.base.inj_idom_hom_axioms fpxs_of_fls.base.inj_idom_hom_axioms\n              comppow.base.inj_idom_hom_axioms) simp_all"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret lift_poly: map_poly_inj_idom_hom lift_poly"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_poly_inj_idom_hom lift_poly", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define C :: \"'a fpxs\" where \"C = fpxs_X_power (- (rat_of_nat N * r))\""], ["proof (state)\nthis:\n  C = fpxs_X_power (- (rat_of_nat N * r))\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have [simp]: \"C \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. C \\<noteq> 0", "by (auto simp: C_def)"], ["proof (state)\nthis:\n  C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    Now, finally: the original polynomial and the new polynomial are related through the\n    \\<^term>\\<open>lift_poly\\<close> homomorphism:\n  \\<close>"], ["proof (state)\nthis:\n  C \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have p_eq: \"p = smult C (lift_poly p')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = smult C (lift_poly p')", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. p = smult C (lift_poly p')", "by (intro poly_eqI)\n       (simp_all add: coeff_map_poly coeff_pcompose_linear coeff_p' c c''_eq c'_def C_def\n                      ring_distribs fpxs_X_power_conv_shift fpxs_shift_mult lift_poly_def ab(2)\n                 flip: fpxs_X_power_add fpxs_X_power_mult fpxs_shift_add_left)"], ["proof (state)\nthis:\n  p = smult C (lift_poly p')\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have [simp]: \"degree p' = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p' = N", "unfolding N_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p' = degree p", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  0 < b\n\ngoal (1 subgoal):\n 1. degree p' = degree p", "by (simp add: p_eq)"], ["proof (state)\nthis:\n  degree p' = N\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have lc_p': \"lead_coeff p' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic p'", "using c''_eq[of N]"], ["proof (prove)\nusing this:\n  fps_to_fls (c'' N) = c' N\n\ngoal (1 subgoal):\n 1. monic p'", "by (simp add: coeff_p' \\<open>c' N = 1\\<close>)"], ["proof (state)\nthis:\n  monic p'\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"coeff p' (N - 1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p' (N - 1) = 0", "using coeff_deg_minus_1 \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  coeff p (degree p - 1) = 0\n  0 < b\n\ngoal (1 subgoal):\n 1. coeff p' (N - 1) = 0", "unfolding N_def [symmetric]"], ["proof (prove)\nusing this:\n  coeff p (N - 1) = 0\n  0 < b\n\ngoal (1 subgoal):\n 1. coeff p' (N - 1) = 0", "by (simp add: p_eq lift_poly_def coeff_map_poly coeff_pcompose_linear)"], ["proof (state)\nthis:\n  coeff p' (N - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We reduce $p'(X,Z)$ to $p'(X,0)$:\n  \\<close>"], ["proof (state)\nthis:\n  coeff p' (N - 1) = 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "define p'_proj where \"p'_proj = reduce_fps_poly p'\""], ["proof (state)\nthis:\n  p'_proj = reduce_fps_poly p'\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have [simp]: \"degree p'_proj = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. degree p'_proj = N", "unfolding p'_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. degree (reduce_fps_poly p') = N", "using lc_p'"], ["proof (prove)\nusing this:\n  monic p'\n\ngoal (1 subgoal):\n 1. degree (reduce_fps_poly p') = N", "by (subst degree_reduce_fps_poly_monic) simp_all"], ["proof (state)\nthis:\n  degree p'_proj = N\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have lc_p'_proj: \"lead_coeff p'_proj = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic p'_proj", "unfolding p'_proj_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. monic (reduce_fps_poly p')", "using lc_p'"], ["proof (prove)\nusing this:\n  monic p'\n\ngoal (1 subgoal):\n 1. monic (reduce_fps_poly p')", "by (subst reduce_fps_poly_monic) simp_all"], ["proof (state)\nthis:\n  monic p'_proj\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "hence [simp]: \"p'_proj \\<noteq> 0\""], ["proof (prove)\nusing this:\n  monic p'_proj\n\ngoal (1 subgoal):\n 1. p'_proj \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p'_proj \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"coeff p'_proj (N - 1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p'_proj (N - 1) = (0::'a)", "using \\<open>coeff p' (N - 1) = 0\\<close>"], ["proof (prove)\nusing this:\n  coeff p' (N - 1) = 0\n\ngoal (1 subgoal):\n 1. coeff p'_proj (N - 1) = (0::'a)", "by (simp add: p'_proj_def reduce_fps_poly_def)"], ["proof (state)\nthis:\n  coeff p'_proj (N - 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    We now show that \\<^term>\\<open>p'_proj\\<close> splits into non-trivial coprime factors. To do this, we\n    have to show that it has two distinct roots, i.e. that it is not of the form $(X - c)^n$.\n  \\<close>"], ["proof (state)\nthis:\n  coeff p'_proj (N - 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "obtain g h where gh: \"degree g > 0\" \"degree h > 0\" \"coprime g h\" \"p'_proj = g * h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"degree p'_proj > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < degree p'_proj", "using deg_p"], ["proof (prove)\nusing this:\n  1 < degree p\n\ngoal (1 subgoal):\n 1. 1 < degree p'_proj", "by (auto simp: N_def)"], ["proof (state)\nthis:\n  1 < degree p'_proj\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "text \\<open>Let \\<open>x\\<close> be an arbitrary root of \\<^term>\\<open>p'_proj\\<close>:\\<close>"], ["proof (state)\nthis:\n  1 < degree p'_proj\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  1 < degree p'_proj", "obtain x where x: \"poly p'_proj x = 0\""], ["proof (prove)\nusing this:\n  1 < degree p'_proj\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        poly p'_proj x = (0::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alg_closed_imp_poly_has_root[of p'_proj]"], ["proof (prove)\nusing this:\n  1 < degree p'_proj\n  0 < degree p'_proj \\<Longrightarrow> \\<exists>x. poly p'_proj x = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        poly p'_proj x = (0::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  poly p'_proj x = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "text \\<open>Assume for the sake of contradiction that \\<^term>\\<open>p'_proj\\<close> were equal to $(1-x)^n$:\\<close>"], ["proof (state)\nthis:\n  poly p'_proj x = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have not_only_one_root: \"p'_proj \\<noteq> [:-x, 1:] ^ N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p'_proj \\<noteq> [:- x, 1::'a:] ^ N", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "assume *: \"p'_proj = [:-x, 1:] ^ N\""], ["proof (state)\nthis:\n  p'_proj = [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "text \\<open>\n        If \\<open>x\\<close> were non-zero, all the coefficients of \\<open>p'_proj\\<close> would also be non-zero by the\n        Binomial Theorem. Since we know that the coefficient of \\<open>n - 1\\<close> \\<^emph>\\<open>is\\<close> zero, this means\n        that \\<open>x\\<close> must be zero:\n      \\<close>"], ["proof (state)\nthis:\n  p'_proj = [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"coeff p'_proj (N - 1) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p'_proj (N - 1) = (0::'a)", "by fact"], ["proof (state)\nthis:\n  coeff p'_proj (N - 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "hence \"x = 0\""], ["proof (prove)\nusing this:\n  coeff p'_proj (N - 1) = (0::'a)\n\ngoal (1 subgoal):\n 1. x = (0::'a)", "by (subst (asm) *, subst (asm) coeff_linear_poly_power) auto"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "text \\<open>\n        However, by our choice of \\<open>r\\<close>, we know that there is an index \\<open>i\\<close> such that \\<open>c' i\\<close> has\n        is non-zero and has valuation (i.e. subdegree) 0, which means that the \\<open>i\\<close>-th coefficient\n        of \\<^term>\\<open>p'_proj\\<close> must also be non-zero.\n      \\<close>"], ["proof (state)\nthis:\n  x = (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"0 < N \\<and> coeff p 0 \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < N \\<and> coeff p 0 \\<noteq> 0", "using deg_p \\<open>coeff p 0 \\<noteq> 0\\<close>"], ["proof (prove)\nusing this:\n  1 < degree p\n  coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < N \\<and> coeff p 0 \\<noteq> 0", "by (auto simp: N_def)"], ["proof (state)\nthis:\n  0 < N \\<and> coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "hence \"{i\\<in>{..<N}. coeff p i \\<noteq> 0} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  0 < N \\<and> coeff p 0 \\<noteq> 0\n\ngoal (1 subgoal):\n 1. {i \\<in> {..<N}. coeff p i \\<noteq> 0} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  {i \\<in> {..<N}. coeff p i \\<noteq> 0} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "hence \"r \\<in> (\\<lambda>i. -fpxs_val (poly.coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n              {i\\<in>{..<N}. coeff p i \\<noteq> 0}\""], ["proof (prove)\nusing this:\n  {i \\<in> {..<N}. coeff p i \\<noteq> 0} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. r \\<in> (\\<lambda>i.\n                - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n            {i \\<in> {..<N}. coeff p i \\<noteq> 0}", "unfolding r_def"], ["proof (prove)\nusing this:\n  {i \\<in> {..<N}. coeff p i \\<noteq> 0} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n        - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))\n    \\<in> (\\<lambda>i.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n          {i \\<in> {..<N}. coeff p i \\<noteq> 0}", "using deg_p"], ["proof (prove)\nusing this:\n  {i \\<in> {..<N}. coeff p i \\<noteq> 0} \\<noteq> {}\n  1 < degree p\n\ngoal (1 subgoal):\n 1. (MAX i\\<in>{i \\<in> {..<N}. coeff p i \\<noteq> 0}.\n        - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i))\n    \\<in> (\\<lambda>i.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n          {i \\<in> {..<N}. coeff p i \\<noteq> 0}", "by (intro Max_in) (auto simp: N_def)"], ["proof (state)\nthis:\n  r \\<in> (\\<lambda>i.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n          {i \\<in> {..<N}. coeff p i \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  r \\<in> (\\<lambda>i.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n          {i \\<in> {..<N}. coeff p i \\<noteq> 0}", "obtain i where i: \"i < N\" \"coeff p i \\<noteq> 0\"\n                             \"-fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\""], ["proof (prove)\nusing this:\n  r \\<in> (\\<lambda>i.\n              - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i)) `\n          {i \\<in> {..<N}. coeff p i \\<noteq> 0}\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        \\<lbrakk>i < N; coeff p i \\<noteq> 0;\n         - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "hence [simp]: \"c' i \\<noteq> 0\""], ["proof (prove)\nusing this:\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n\ngoal (1 subgoal):\n 1. c' i \\<noteq> 0", "using i c[of i]"], ["proof (prove)\nusing this:\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n  coeff p i = fpxs_compose_power (fpxs_of_fls (c i)) (1 / rat_of_nat b)\n\ngoal (1 subgoal):\n 1. c' i \\<noteq> 0", "by (auto simp: c'_def)"], ["proof (state)\nthis:\n  c' i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"fpxs_val (poly.coeff p i) = rat_of_int (fls_subdegree (c i)) / rat_of_nat b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) = rat_of_int (fls_subdegree (c i)) / rat_of_nat b", "using subdegree_c[of i] i \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  i \\<le> N \\<Longrightarrow>\n  rat_of_int (fls_subdegree (c i)) = fpxs_val (coeff p i) * rat_of_nat b\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n  0 < b\n\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) = rat_of_int (fls_subdegree (c i)) / rat_of_nat b", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  fpxs_val (coeff p i) = rat_of_int (fls_subdegree (c i)) / rat_of_nat b\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  fpxs_val (coeff p i) = rat_of_int (fls_subdegree (c i)) / rat_of_nat b\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"fpxs_val (coeff p i) = -r * (rat_of_nat N - rat_of_nat i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) = - r * (rat_of_nat N - rat_of_nat i)", "using i"], ["proof (prove)\nusing this:\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n\ngoal (1 subgoal):\n 1. fpxs_val (coeff p i) = - r * (rat_of_nat N - rat_of_nat i)", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  fpxs_val (coeff p i) = - r * (rat_of_nat N - rat_of_nat i)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  - r * (rat_of_nat N - rat_of_nat i) =\n  rat_of_int (fls_subdegree (c i)) / rat_of_nat b", "have \"rat_of_int (fls_subdegree (c i)) = - r * (of_nat N - of_nat i) * of_nat b\""], ["proof (prove)\nusing this:\n  - r * (rat_of_nat N - rat_of_nat i) =\n  rat_of_int (fls_subdegree (c i)) / rat_of_nat b\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) =\n    - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  - r * (rat_of_nat N - rat_of_nat i) =\n  rat_of_int (fls_subdegree (c i)) / rat_of_nat b\n  0 < b\n\ngoal (1 subgoal):\n 1. rat_of_int (fls_subdegree (c i)) =\n    - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b", "by (simp add: field_simps)"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i)) =\n  - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  rat_of_int (fls_subdegree (c i)) =\n  - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"c i = fls_shift ((int N - int i) * a) (c' i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c i = fls_shift ((int N - int i) * a) (c' i)", "using i"], ["proof (prove)\nusing this:\n  i < N\n  coeff p i \\<noteq> 0\n  - fpxs_val (coeff p i) / (rat_of_nat N - rat_of_nat i) = r\n\ngoal (1 subgoal):\n 1. c i = fls_shift ((int N - int i) * a) (c' i)", "by (simp add: c'_def ring_distribs fls_X_intpow_times_conv_shift\n                         flip: fls_shifted_times_simps(2))"], ["proof (state)\nthis:\n  c i = fls_shift ((int N - int i) * a) (c' i)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  c i = fls_shift ((int N - int i) * a) (c' i)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"fls_subdegree \\<dots> = fls_subdegree (c' i) - (int N - int i) * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fls_subdegree (fls_shift ((int N - int i) * a) (c' i)) =\n    fls_subdegree (c' i) - (int N - int i) * a", "by (subst fls_shift_subdegree) auto"], ["proof (state)\nthis:\n  fls_subdegree (fls_shift ((int N - int i) * a) (c' i)) =\n  fls_subdegree (c' i) - (int N - int i) * a\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  rat_of_int (fls_subdegree (c' i) - (int N - int i) * a) =\n  - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b", "have \"fls_subdegree (c' i) = 0\""], ["proof (prove)\nusing this:\n  rat_of_int (fls_subdegree (c' i) - (int N - int i) * a) =\n  - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b\n\ngoal (1 subgoal):\n 1. fls_subdegree (c' i) = 0", "using \\<open>b > 0\\<close>"], ["proof (prove)\nusing this:\n  rat_of_int (fls_subdegree (c' i) - (int N - int i) * a) =\n  - r * (rat_of_nat N - rat_of_nat i) * rat_of_nat b\n  0 < b\n\ngoal (1 subgoal):\n 1. fls_subdegree (c' i) = 0", "by (simp add: ab(2))"], ["proof (state)\nthis:\n  fls_subdegree (c' i) = 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "hence \"subdegree (coeff p' i) = 0\""], ["proof (prove)\nusing this:\n  fls_subdegree (c' i) = 0\n\ngoal (1 subgoal):\n 1. subdegree (coeff p' i) = 0", "by (simp flip: c''_eq add: fls_subdegree_fls_to_fps coeff_p')"], ["proof (state)\nthis:\n  subdegree (coeff p' i) = 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  subdegree (coeff p' i) = 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"coeff p' i \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p' i \\<noteq> 0", "using \\<open>c' i \\<noteq> 0\\<close> c' coeff_p'"], ["proof (prove)\nusing this:\n  c' i \\<noteq> 0\n  c' ?i = fps_to_fls (c'' ?i)\n  coeff p' = c''\n\ngoal (1 subgoal):\n 1. coeff p' i \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  coeff p' i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  subdegree (coeff p' i) = 0\n  coeff p' i \\<noteq> 0", "have \"coeff p' i $ 0 \\<noteq> 0\""], ["proof (prove)\nusing this:\n  subdegree (coeff p' i) = 0\n  coeff p' i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. coeff p' i $ 0 \\<noteq> (0::'a)", "using subdegree_eq_0_iff"], ["proof (prove)\nusing this:\n  subdegree (coeff p' i) = 0\n  coeff p' i \\<noteq> 0\n  (subdegree ?f = 0) = (?f = 0 \\<or> ?f $ 0 \\<noteq> (0::?'a))\n\ngoal (1 subgoal):\n 1. coeff p' i $ 0 \\<noteq> (0::'a)", "by blast"], ["proof (state)\nthis:\n  coeff p' i $ 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  coeff p' i $ 0 \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"coeff p' i $ 0 = coeff p'_proj i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p' i $ 0 = coeff p'_proj i", "by (simp add: p'_proj_def reduce_fps_poly_def)"], ["proof (state)\nthis:\n  coeff p' i $ 0 = coeff p'_proj i\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "also"], ["proof (state)\nthis:\n  coeff p' i $ 0 = coeff p'_proj i\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. coeff p'_proj i = (0::'a)", "by (subst *, subst coeff_linear_poly_power) (use i \\<open>x = 0\\<close> in auto)"], ["proof (state)\nthis:\n  coeff p'_proj i = (0::'a)\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N \\<Longrightarrow> False", "finally"], ["proof (chain)\npicking this:\n  (0::'a) \\<noteq> (0::'a)", "show False"], ["proof (prove)\nusing this:\n  (0::'a) \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p'_proj \\<noteq> [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "text \\<open>\n      We can thus obtain our second root \\<open>y\\<close> from the factorisation:\n    \\<close>"], ["proof (state)\nthis:\n  p'_proj \\<noteq> [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "assume *: \"\\<not>(\\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = 0)\""], ["proof (state)\nthis:\n  \\<nexists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "have \"p'_proj \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p'_proj \\<noteq> 0", "by simp"], ["proof (state)\nthis:\n  p'_proj \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  p'_proj \\<noteq> 0", "obtain A where A: \"size A = degree p'_proj\"\n                             \"p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:-x, 1:])\""], ["proof (prove)\nusing this:\n  p'_proj \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>size A = degree p'_proj;\n         p'_proj =\n         smult (lead_coeff p'_proj)\n          (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using alg_closed_imp_factorization[of p'_proj]"], ["proof (prove)\nusing this:\n  p'_proj \\<noteq> 0\n  p'_proj \\<noteq> 0 \\<Longrightarrow>\n  \\<exists>A.\n     size A = degree p'_proj \\<and>\n     p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\n\ngoal (1 subgoal):\n 1. (\\<And>A.\n        \\<lbrakk>size A = degree p'_proj;\n         p'_proj =\n         smult (lead_coeff p'_proj)\n          (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  size A = degree p'_proj\n  p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "have \"set_mset A = {x. poly p'_proj x = 0}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset A = {x. poly p'_proj x = (0::'a)}", "using lc_p'_proj"], ["proof (prove)\nusing this:\n  monic p'_proj\n\ngoal (1 subgoal):\n 1. set_mset A = {x. poly p'_proj x = (0::'a)}", "by (subst A) (auto simp: poly_prod_mset)"], ["proof (state)\nthis:\n  set_mset A = {x. poly p'_proj x = (0::'a)}\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  set_mset A = {x. poly p'_proj x = (0::'a)}\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "have \"\\<dots> = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x. poly p'_proj x = (0::'a)} = {x}", "using x *"], ["proof (prove)\nusing this:\n  poly p'_proj x = (0::'a)\n  \\<nexists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. {x. poly p'_proj x = (0::'a)} = {x}", "by auto"], ["proof (state)\nthis:\n  {x. poly p'_proj x = (0::'a)} = {x}\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  set_mset A = {x}", "have \"A = replicate_mset N x\""], ["proof (prove)\nusing this:\n  set_mset A = {x}\n\ngoal (1 subgoal):\n 1. A = replicate_mset N x", "using set_mset_subset_singletonD[of A x] A(1)"], ["proof (prove)\nusing this:\n  set_mset A = {x}\n  set_mset A \\<subseteq> {x} \\<Longrightarrow> A = replicate_mset (size A) x\n  size A = degree p'_proj\n\ngoal (1 subgoal):\n 1. A = replicate_mset N x", "by simp"], ["proof (state)\nthis:\n  A = replicate_mset N x\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "with A(2)"], ["proof (chain)\npicking this:\n  p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\n  A = replicate_mset N x", "have \"p'_proj = [:- x, 1:] ^ N\""], ["proof (prove)\nusing this:\n  p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\n  A = replicate_mset N x\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N", "using lc_p'_proj"], ["proof (prove)\nusing this:\n  p'_proj = smult (lead_coeff p'_proj) (\\<Prod>x\\<in>#A. [:- x, 1::'a:])\n  A = replicate_mset N x\n  monic p'_proj\n\ngoal (1 subgoal):\n 1. p'_proj = [:- x, 1::'a:] ^ N", "by simp"], ["proof (state)\nthis:\n  p'_proj = [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. \\<nexists>y.\n       x \\<noteq> y \\<and> poly p'_proj y = (0::'a) \\<Longrightarrow>\n    False", "with not_only_one_root"], ["proof (chain)\npicking this:\n  p'_proj \\<noteq> [:- x, 1::'a:] ^ N\n  p'_proj = [:- x, 1::'a:] ^ N", "show False"], ["proof (prove)\nusing this:\n  p'_proj \\<noteq> [:- x, 1::'a:] ^ N\n  p'_proj = [:- x, 1::'a:] ^ N\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)", "obtain y where \"x \\<noteq> y\" \"poly p'_proj y = 0\""], ["proof (prove)\nusing this:\n  \\<exists>y. x \\<noteq> y \\<and> poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>x \\<noteq> y; poly p'_proj y = (0::'a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> y\n  poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "text \\<open>\n      It now follows easily that \\<^term>\\<open>p'_proj\\<close> splits into non-trivial and coprime factors:\n    \\<close>"], ["proof (state)\nthis:\n  x \\<noteq> y\n  poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<And>g h.\n        \\<lbrakk>0 < degree g; 0 < degree h; coprime g h;\n         p'_proj = g * h\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule alg_closed_imp_poly_splits_coprime)"], ["proof (state)\ngoal (5 subgoals):\n 1. 1 < degree ?p\n 2. poly ?p ?x = (0::?'a)\n 3. poly ?p ?y = (0::?'a)\n 4. ?x \\<noteq> ?y\n 5. \\<And>r s.\n       \\<lbrakk>0 < degree r; 0 < degree s; coprime r s; ?p = r * s\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"degree p'_proj > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < degree p'_proj", "using deg_p"], ["proof (prove)\nusing this:\n  1 < degree p\n\ngoal (1 subgoal):\n 1. 1 < degree p'_proj", "by (simp add: N_def)"], ["proof (state)\nthis:\n  1 < degree p'_proj\n\ngoal (4 subgoals):\n 1. poly p'_proj ?x = (0::'a)\n 2. poly p'_proj ?y = (0::'a)\n 3. ?x \\<noteq> ?y\n 4. \\<And>r s.\n       \\<lbrakk>0 < degree r; 0 < degree s; coprime r s;\n        p'_proj = r * s\\<rbrakk>\n       \\<Longrightarrow> thesis", "show \"x \\<noteq> y\" \"poly p'_proj x = 0\" \"poly p'_proj y = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<noteq> y &&& poly p'_proj x = (0::'a) &&& poly p'_proj y = (0::'a)", "by fact+"], ["proof (state)\nthis:\n  x \\<noteq> y\n  poly p'_proj x = (0::'a)\n  poly p'_proj y = (0::'a)\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<lbrakk>0 < degree r; 0 < degree s; coprime r s;\n        p'_proj = r * s\\<rbrakk>\n       \\<Longrightarrow> thesis", "qed (use that in metis)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < degree g\n  0 < degree h\n  coprime g h\n  p'_proj = g * h\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>\n    By Hensel's lemma, these factors give rise to corresponding factors of \\<open>p'\\<close>:\n  \\<close>"], ["proof (state)\nthis:\n  0 < degree g\n  0 < degree h\n  coprime g h\n  p'_proj = g * h\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "interpret hensel: fps_hensel p' p'_proj g h"], ["proof (prove)\ngoal (1 subgoal):\n 1. fps_hensel p' g h &&& p'_proj \\<equiv> reduce_fps_poly p'", "proof unfold_locales"], ["proof (state)\ngoal (6 subgoals):\n 1. monic p'\n 2. reduce_fps_poly p' = g * h\n 3. coprime g h\n 4. 0 < degree g\n 5. 0 < degree h\n 6. p'_proj \\<equiv> reduce_fps_poly p'", "show \"lead_coeff p' = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monic p'", "using lc_p'"], ["proof (prove)\nusing this:\n  monic p'\n\ngoal (1 subgoal):\n 1. monic p'", "by simp"], ["proof (state)\nthis:\n  monic p'\n\ngoal (5 subgoals):\n 1. reduce_fps_poly p' = g * h\n 2. coprime g h\n 3. 0 < degree g\n 4. 0 < degree h\n 5. p'_proj \\<equiv> reduce_fps_poly p'", "qed (use gh \\<open>coprime g h\\<close> in \\<open>simp_all add: p'_proj_def\\<close>)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "text \\<open>All that remains now is to undo the variable substitutions we did above:\\<close>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "have \"p = [:C:] * lift_poly hensel.G * lift_poly hensel.H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [:C:] * lift_poly hensel.G * lift_poly hensel.H", "unfolding p_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. smult C (lift_poly p') = [:C:] * lift_poly hensel.G * lift_poly hensel.H", "by (subst hensel.F_splits) (simp add: hom_distribs)"], ["proof (state)\nthis:\n  p = [:C:] * lift_poly hensel.G * lift_poly hensel.H\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       \\<lbrakk>1 < degree p; monic p; coeff p (degree p - 1) = 0;\n        coeff p 0 \\<noteq> 0\\<rbrakk>\n       \\<Longrightarrow> \\<not> irreducible p", "thus \"\\<not>irreducible p\""], ["proof (prove)\nusing this:\n  p = [:C:] * lift_poly hensel.G * lift_poly hensel.H\n\ngoal (1 subgoal):\n 1. \\<not> irreducible p", "by (rule reducible_polyI) (use hensel.deg_G hensel.deg_H gh in simp_all)"], ["proof (state)\nthis:\n  \\<not> irreducible p\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\n  We do not actually show that this is the algebraic closure since this cannot be stated\n  idiomatically in the typeclass setting and is probably not very useful either, but it can\n  be motivated like this:\n\n  Suppose we have an algebraically closed extension $L$ of the field of Laurent series. Clearly,\n  $X^{a/b}\\in L$ for any integer \\<open>a\\<close> and any positive integer \\<open>b\\<close> since\n  $(X^{a/b})^b - X^a = 0$. But any Puiseux series $F(X)$ with root order \\<open>b\\<close> can\n  be written as\n  \\[F(X) = \\sum_{k=0}^{b-1} X^{k/b} F_k(X)\\]\n  where the Laurent series $F_k(X)$ are defined as follows:\n  \\[F_k(X) := \\sum_{n = n_{0,k}}^\\infty [X^{n + k/b}] F(X) X^n\\]\n  Thus, $F(X)$ can be written as a finite sum of products of elements in $L$ and must therefore\n  also be in $L$. Thus, the Puiseux series are all contained in $L$.\n\\<close>"], ["", "subsection \\<open>Metric and topology\\<close>"], ["", "text \\<open>\n  Formal Puiseux series form a metric space with the usual metric for formal series:\n  Two series are ``close'' to one another if they have many initial coefficients in common.\n\\<close>"], ["", "instantiation fpxs :: (zero) norm\nbegin"], ["", "definition norm_fpxs :: \"'a fpxs \\<Rightarrow> real\" where\n  \"norm f = (if f = 0 then 0 else 2 powr (-of_rat (fpxs_val f)))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, norm_class)", ".."], ["", "end"], ["", "instantiation fpxs :: (group_add) dist\nbegin"], ["", "definition dist_fpxs :: \"'a fpxs \\<Rightarrow> 'a fpxs \\<Rightarrow> real\" where\n  \"dist f g = (if f = g then 0 else 2 powr (-of_rat (fpxs_val (f - g))))\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, dist_class)", ".."], ["", "end"], ["", "instantiation fpxs :: (group_add) metric_space\nbegin"], ["", "definition uniformity_fpxs_def [code del]:\n  \"(uniformity :: ('a fpxs \\<times> 'a fpxs) filter) = (INF e\\<in>{0 <..}. principal {(x, y). dist x y < e})\""], ["", "definition open_fpxs_def [code del]:\n  \"open (U :: 'a fpxs set) \\<longleftrightarrow> (\\<forall>x\\<in>U. eventually (\\<lambda>(x', y). x' = x \\<longrightarrow> y \\<in> U) uniformity)\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, metric_space_class)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 2. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 3. \\<And>x y. (dist x y = 0) = (x = y)\n 4. \\<And>x y z. dist x y \\<le> dist x z + dist y z", "fix f g h :: \"'a fpxs\""], ["proof (state)\ngoal (4 subgoals):\n 1. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 2. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 3. \\<And>x y. (dist x y = 0) = (x = y)\n 4. \\<And>x y z. dist x y \\<le> dist x z + dist y z", "show \"dist f g \\<le> dist f h + dist g h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist f g \\<le> dist f h + dist g h", "proof (cases \"f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h\n 2. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "case True"], ["proof (state)\nthis:\n  f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h\n\ngoal (2 subgoals):\n 1. f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h\n 2. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "have \"dist f g \\<le> 2 powr -real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist f g\n    \\<le> 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))", "using fpxs_val_add_ge[of \"f - h\" \"h - g\"] True"], ["proof (prove)\nusing this:\n  f - h + (h - g) \\<noteq> 0 \\<Longrightarrow>\n  min (fpxs_val (f - h)) (fpxs_val (h - g)) \\<le> fpxs_val (f - h + (h - g))\n  f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h\n\ngoal (1 subgoal):\n 1. dist f g\n    \\<le> 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))", "by (auto simp: algebra_simps fpxs_val_minus_commute dist_fpxs_def of_rat_less_eq)"], ["proof (state)\nthis:\n  dist f g\n  \\<le> 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\n\ngoal (2 subgoals):\n 1. f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h\n 2. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "also"], ["proof (state)\nthis:\n  dist f g\n  \\<le> 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\n\ngoal (2 subgoals):\n 1. f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h\n 2. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "have \"\\<dots> \\<le> dist f h + dist g h\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\n    \\<le> dist f h + dist g h", "using True"], ["proof (prove)\nusing this:\n  f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h\n\ngoal (1 subgoal):\n 1. 2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\n    \\<le> dist f h + dist g h", "by (simp add: dist_fpxs_def min_def)"], ["proof (state)\nthis:\n  2 powr - real_of_rat (min (fpxs_val (f - h)) (fpxs_val (g - h)))\n  \\<le> dist f h + dist g h\n\ngoal (2 subgoals):\n 1. f \\<noteq> g \\<and> f \\<noteq> h \\<and> g \\<noteq> h \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h\n 2. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "finally"], ["proof (chain)\npicking this:\n  dist f g \\<le> dist f h + dist g h", "show ?thesis"], ["proof (prove)\nusing this:\n  dist f g \\<le> dist f h + dist g h\n\ngoal (1 subgoal):\n 1. dist f g \\<le> dist f h + dist g h", "."], ["proof (state)\nthis:\n  dist f g \\<le> dist f h + dist g h\n\ngoal (1 subgoal):\n 1. \\<not> (f \\<noteq> g \\<and>\n            f \\<noteq> h \\<and> g \\<noteq> h) \\<Longrightarrow>\n    dist f g \\<le> dist f h + dist g h", "qed (auto simp: dist_fpxs_def fpxs_val_minus_commute)"], ["proof (state)\nthis:\n  dist f g \\<le> dist f h + dist g h\n\ngoal (3 subgoals):\n 1. uniformity = (INF e\\<in>{0<..}. principal {(x, y). dist x y < e})\n 2. \\<And>U.\n       open U =\n       (\\<forall>x\\<in>U.\n           \\<forall>\\<^sub>F (x', y) in uniformity.\n              x' = x \\<longrightarrow> y \\<in> U)\n 3. \\<And>x y. (dist x y = 0) = (x = y)", "qed (simp_all add: uniformity_fpxs_def open_fpxs_def dist_fpxs_def)"], ["", "end"], ["", "instance fpxs :: (group_add) dist_norm"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a fpxs, dist_norm_class)", "by standard (auto simp: dist_fpxs_def norm_fpxs_def)"], ["", "end"]]}