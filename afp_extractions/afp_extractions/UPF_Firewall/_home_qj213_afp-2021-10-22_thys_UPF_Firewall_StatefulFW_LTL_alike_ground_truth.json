{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall/StatefulFW/LTL_alike.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall", "problem_names": ["lemma holds_mono : \"\\<guillemotleft>q\\<guillemotright> s \\<Longrightarrow> \\<guillemotleft>q\\<guillemotright> (s @ t)\"", "lemma always_is_listall : \"(\\<box> \\<guillemotleft>p\\<guillemotright>) (t) = list_all (p) (t)\"", "lemma eventually_is_listex : \"(\\<diamondsuit> \\<guillemotleft>p\\<guillemotright>) (t) = list_ex (p) (t)\"", "lemma not_before_superfluous: \n  \"not_before p q = before (Not o p) q\"", "lemma before_vs_until: \n\"(before p q) = ((\\<box>\\<guillemotleft>p\\<guillemotright>) U \\<guillemotleft>q\\<guillemotright>)\""], "translations": [["", "lemma holds_mono : \"\\<guillemotleft>q\\<guillemotright> s \\<Longrightarrow> \\<guillemotleft>q\\<guillemotright> (s @ t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<guillemotleft>q\\<guillemotright> s \\<Longrightarrow>\n    \\<guillemotleft>q\\<guillemotright> (s @ t)", "by(cases \"s\",simp_all)"], ["", "fun always :: \"('\\<alpha> list \\<Rightarrow> bool) \\<Rightarrow> '\\<alpha> list \\<Rightarrow> bool\" (\"\\<box>\")\nwhere \n   \"always p [] = True\"\n|  \"always p (a # S) = ((p (a # S)) \\<and> always p S)\""], ["", "text\\<open>\n  Always is a generalization of the \\verb+list_all+ combinator from the List-library; if arguing \n  locally, this paves the way to a wealth of library lemmas. \n\\<close>"], ["", "lemma always_is_listall : \"(\\<box> \\<guillemotleft>p\\<guillemotright>) (t) = list_all (p) (t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<box> \\<guillemotleft>p\\<guillemotright> t = list_all p t", "by(induct \"t\", simp_all)"], ["", "fun eventually :: \"('\\<alpha> list \\<Rightarrow> bool) \\<Rightarrow> '\\<alpha> list \\<Rightarrow> bool\" (\"\\<diamondsuit>\")\nwhere \n   \"eventually p [] = False\"\n|  \"eventually p (a # S) = ((p (a # S)) \\<or> eventually p S)\""], ["", "text\\<open>\n  Eventually is a generalization of the \\verb+list_ex+ combinator from the List-library; if arguing \n  locally, this paves the way to a wealth of library lemmas. \n\\<close>"], ["", "lemma eventually_is_listex : \"(\\<diamondsuit> \\<guillemotleft>p\\<guillemotright>) (t) = list_ex (p) (t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<diamondsuit> \\<guillemotleft>p\\<guillemotright> t = list_ex p t", "by(induct \"t\", simp_all)"], ["", "text\\<open>\n  The next two constants will help us later in defining the state transitions. The constant \n  \\<open>before\\<close> is \\<open>True\\<close> if for all elements which appear before the first element \n  for which  \\<open>q\\<close> holds, \\<open>p\\<close> must hold.\n\\<close>"], ["", "fun before :: \"('\\<alpha> \\<Rightarrow> bool) \\<Rightarrow> ('\\<alpha> \\<Rightarrow> bool) \\<Rightarrow> '\\<alpha> list \\<Rightarrow> bool\" \nwhere \n  \"before p q [] = False\"\n| \"before p q (a # S) = (q a \\<or> (p a \\<and> (before p q S)))\""], ["", "text\\<open>\n  Analogously there is an operator \\<open>not_before\\<close> which returns\n  \\<open>True\\<close> if for all elements which appear before the first\n  element for which \\<open>q\\<close> holds, \\<open>p\\<close> must not hold.\n\\<close>"], ["", "fun not_before :: \"('\\<alpha> \\<Rightarrow> bool) \\<Rightarrow> ('\\<alpha> \\<Rightarrow> bool) \\<Rightarrow> '\\<alpha> list \\<Rightarrow> bool\" \nwhere  \n  \"not_before p q [] = False\"\n| \"not_before p q (a # S) = (q a \\<or> (\\<not> (p a) \\<and> (not_before p q S)))\""], ["", "lemma not_before_superfluous: \n  \"not_before p q = before (Not o p) q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. not_before p q = before (Not \\<circ> p) q", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. not_before p q x = before (Not \\<circ> p) q x", "subgoal for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. not_before p q n = before (Not \\<circ> p) q n", "apply(induct_tac \"n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. not_before p q [] = before (Not \\<circ> p) q []\n 2. \\<And>a list.\n       not_before p q list = before (Not \\<circ> p) q list \\<Longrightarrow>\n       not_before p q (a # list) = before (Not \\<circ> p) q (a # list)", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>General \"before\":\\<close>"], ["", "fun until :: \"('\\<alpha> list \\<Rightarrow> bool) \\<Rightarrow> ('\\<alpha> list \\<Rightarrow> bool) \\<Rightarrow> '\\<alpha> list \\<Rightarrow> bool\" (infixl \"U\" 66)\nwhere \n  \"until p q [] = False\"\n| \"until p q (a # S) = (\\<exists> s t. a # S= s @ t \\<and> p s \\<and>  q t)\""], ["", "text\\<open>This leads to this amazingly tricky proof:\\<close>"], ["", "lemma before_vs_until: \n\"(before p q) = ((\\<box>\\<guillemotleft>p\\<guillemotright>) U \\<guillemotleft>q\\<guillemotright>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "have A:\"\\<And>a. q a \\<Longrightarrow> (\\<exists>s t. [a] = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       q a \\<Longrightarrow>\n       \\<exists>s t.\n          [a] = s @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n          \\<guillemotleft>q\\<guillemotright> t", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       q a \\<Longrightarrow>\n       \\<exists>t.\n          [a] = [] @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> [] \\<and>\n          \\<guillemotleft>q\\<guillemotright> t", "apply(rule_tac x=\"[a]\" in exI, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  q ?a \\<Longrightarrow>\n  \\<exists>s t.\n     [?a] = s @ t \\<and>\n     \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n     \\<guillemotleft>q\\<guillemotright> t\n\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "have B:\"\\<And>a. (\\<exists>s t. [a] = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t) \\<Longrightarrow> q a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<exists>s t.\n          [a] = s @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n          \\<guillemotleft>q\\<guillemotright> t \\<Longrightarrow>\n       q a", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s t.\n       \\<lbrakk>[a] = s @ t; \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t\\<rbrakk>\n       \\<Longrightarrow> q a", "apply(case_tac \"t=[]\", auto simp:List.neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a s y ys.\n       \\<lbrakk>[a] = s @ y # ys;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s; q y\\<rbrakk>\n       \\<Longrightarrow> q a", "apply(case_tac \"s=[]\", auto simp:List.neq_Nil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s t.\n     [?a] = s @ t \\<and>\n     \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n     \\<guillemotleft>q\\<guillemotright> t \\<Longrightarrow>\n  q ?a\n\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "have C:\"\\<And>a aa list.(q a \\<or> p a \\<and> (\\<exists>s t. aa # list = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t)) \n                         \\<Longrightarrow> (\\<exists>s t. a # aa # list = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa list.\n       q a \\<or>\n       p a \\<and>\n       (\\<exists>s t.\n           aa # list = s @ t \\<and>\n           \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n           \\<guillemotleft>q\\<guillemotright> t) \\<Longrightarrow>\n       \\<exists>s t.\n          a # aa # list = s @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n          \\<guillemotleft>q\\<guillemotright> t", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa list.\n       q a \\<Longrightarrow>\n       \\<exists>s t.\n          a # aa # list = s @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n          \\<guillemotleft>q\\<guillemotright> t\n 2. \\<And>a aa list s t.\n       \\<lbrakk>p a; aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa ta.\n                            a # s @ t = sa @ ta \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             sa \\<and>\n                            \\<guillemotleft>q\\<guillemotright> ta", "apply(rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa list.\n       q a \\<Longrightarrow>\n       \\<exists>t.\n          a # aa # list = [] @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> [] \\<and>\n          \\<guillemotleft>q\\<guillemotright> t\n 2. \\<And>a aa list s t.\n       \\<lbrakk>p a; aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa ta.\n                            a # s @ t = sa @ ta \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             sa \\<and>\n                            \\<guillemotleft>q\\<guillemotright> ta", "apply(rule_tac x=\"a # aa # list\" in exI, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa list s t.\n       \\<lbrakk>p a; aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sa ta.\n                            a # s @ t = sa @ ta \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             sa \\<and>\n                            \\<guillemotleft>q\\<guillemotright> ta", "apply(rule_tac x=\"a # s\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa list s t.\n       \\<lbrakk>p a; aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ta.\n                            a # s @ t = (a # s) @ ta \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             (a # s) \\<and>\n                            \\<guillemotleft>q\\<guillemotright> ta", "apply(rule_tac x=\"t\" in exI,simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  q ?a \\<or>\n  p ?a \\<and>\n  (\\<exists>s t.\n      ?aa # ?list = s @ t \\<and>\n      \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n      \\<guillemotleft>q\\<guillemotright> t) \\<Longrightarrow>\n  \\<exists>s t.\n     ?a # ?aa # ?list = s @ t \\<and>\n     \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n     \\<guillemotleft>q\\<guillemotright> t\n\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "have D:\"\\<And>a aa list.(\\<exists>s t. a # aa # list = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t)\n                         \\<Longrightarrow> (q a \\<or> p a \\<and> (\\<exists>s t. aa # list = s @ t \\<and> \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and> \\<guillemotleft>q\\<guillemotright> t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa list.\n       \\<exists>s t.\n          a # aa # list = s @ t \\<and>\n          \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n          \\<guillemotleft>q\\<guillemotright> t \\<Longrightarrow>\n       q a \\<or>\n       p a \\<and>\n       (\\<exists>s t.\n           aa # list = s @ t \\<and>\n           \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n           \\<guillemotleft>q\\<guillemotright> t)", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a aa list s t.\n       \\<lbrakk>a # aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t; \\<not> q a\\<rbrakk>\n       \\<Longrightarrow> p a\n 2. \\<And>a aa list s t.\n       \\<lbrakk>a # aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t; \\<not> q a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s t.\n                            aa # list = s @ t \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             s \\<and>\n                            \\<guillemotleft>q\\<guillemotright> t", "apply(case_tac \"s\", auto simp:List.neq_Nil_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa list s t.\n       \\<lbrakk>a # aa # list = s @ t;\n        \\<box> \\<guillemotleft>p\\<guillemotright> s;\n        \\<guillemotleft>q\\<guillemotright> t; \\<not> q a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s t.\n                            aa # list = s @ t \\<and>\n                            \\<box> \\<guillemotleft>p\\<guillemotright>\n                             s \\<and>\n                            \\<guillemotleft>q\\<guillemotright> t", "apply(case_tac \"s\", auto simp:List.neq_Nil_conv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>s t.\n     ?a # ?aa # ?list = s @ t \\<and>\n     \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n     \\<guillemotleft>q\\<guillemotright> t \\<Longrightarrow>\n  q ?a \\<or>\n  p ?a \\<and>\n  (\\<exists>s t.\n      ?aa # ?list = s @ t \\<and>\n      \\<box> \\<guillemotleft>p\\<guillemotright> s \\<and>\n      \\<guillemotleft>q\\<guillemotright> t)\n\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. before p q =\n    \\<box> \\<guillemotleft>p\\<guillemotright> U\n    \\<guillemotleft>q\\<guillemotright>", "apply(rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       before p q x =\n       (\\<box> \\<guillemotleft>p\\<guillemotright> U\n        \\<guillemotleft>q\\<guillemotright>)\n        x", "subgoal for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. before p q n =\n    (\\<box> \\<guillemotleft>p\\<guillemotright> U\n     \\<guillemotleft>q\\<guillemotright>)\n     n", "apply(induct_tac \"n\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. before p q [] =\n    (\\<box> \\<guillemotleft>p\\<guillemotright> U\n     \\<guillemotleft>q\\<guillemotright>)\n     []\n 2. \\<And>a list.\n       before p q list =\n       (\\<box> \\<guillemotleft>p\\<guillemotright> U\n        \\<guillemotleft>q\\<guillemotright>)\n        list \\<Longrightarrow>\n       before p q (a # list) =\n       (\\<box> \\<guillemotleft>p\\<guillemotright> U\n        \\<guillemotleft>q\\<guillemotright>)\n        (a # list)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       before p q list =\n       (\\<box> \\<guillemotleft>p\\<guillemotright> U\n        \\<guillemotleft>q\\<guillemotright>)\n        list \\<Longrightarrow>\n       before p q (a # list) =\n       (\\<box> \\<guillemotleft>p\\<guillemotright> U\n        \\<guillemotleft>q\\<guillemotright>)\n        (a # list)", "subgoal for x xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. before p q xs =\n    (\\<box> \\<guillemotleft>p\\<guillemotright> U\n     \\<guillemotleft>q\\<guillemotright>)\n     xs \\<Longrightarrow>\n    before p q (x # xs) =\n    (\\<box> \\<guillemotleft>p\\<guillemotright> U\n     \\<guillemotleft>q\\<guillemotright>)\n     (x # xs)", "apply(case_tac \"xs\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>before p q xs =\n             (\\<box> \\<guillemotleft>p\\<guillemotright> U\n              \\<guillemotleft>q\\<guillemotright>)\n              xs;\n     xs = []\\<rbrakk>\n    \\<Longrightarrow> before p q (x # xs) =\n                      (\\<box> \\<guillemotleft>p\\<guillemotright> U\n                       \\<guillemotleft>q\\<guillemotright>)\n                       (x # xs)\n 2. \\<And>a list.\n       \\<lbrakk>before p q xs =\n                (\\<box> \\<guillemotleft>p\\<guillemotright> U\n                 \\<guillemotleft>q\\<guillemotright>)\n                 xs;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> before p q (x # xs) =\n                         (\\<box> \\<guillemotleft>p\\<guillemotright> U\n                          \\<guillemotleft>q\\<guillemotright>)\n                          (x # xs)", "apply(simp,rule iffI,erule A, erule B)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>before p q xs =\n                (\\<box> \\<guillemotleft>p\\<guillemotright> U\n                 \\<guillemotleft>q\\<guillemotright>)\n                 xs;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> before p q (x # xs) =\n                         (\\<box> \\<guillemotleft>p\\<guillemotright> U\n                          \\<guillemotleft>q\\<guillemotright>)\n                          (x # xs)", "apply(simp,rule iffI,erule C, erule D)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  before p q =\n  \\<box> \\<guillemotleft>p\\<guillemotright> U\n  \\<guillemotleft>q\\<guillemotright>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}