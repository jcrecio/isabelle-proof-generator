{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall/StatefulFW/FTPVOIP.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall", "problem_names": ["lemmas FTPVOIP_ST_simps = Let_def in_subnet_def src_def dest_def\nsubnet_of_int_def id_def FTPVOIP_port_open_def\n FTPVOIP_is_init_def FTPVOIP_is_data_def FTPVOIP_is_port_request_def FTPVOIP_is_close_def p_accept_def content_def  PortCombinators exI\n NetworkCore.id_def adr\\<^sub>i\\<^sub>pLemmas"], "translations": [["", "lemmas FTPVOIP_ST_simps = Let_def in_subnet_def src_def dest_def\nsubnet_of_int_def id_def FTPVOIP_port_open_def\n FTPVOIP_is_init_def FTPVOIP_is_data_def FTPVOIP_is_port_request_def FTPVOIP_is_close_def p_accept_def content_def  PortCombinators exI\n NetworkCore.id_def adr\\<^sub>i\\<^sub>pLemmas"], ["", "datatype ftp_states2 = FS0 | FS1 | FS2 | FS3"], ["", "datatype voip_states2 = V0 | V1 | V2 | V3 | V4 | V5"], ["", "text\\<open>\n  The constant \\<open>is_voip\\<close> checks if a trace corresponds to a\n  legal VoIP protocol, given the IP-addresses of the three entities,\n  the ID, and the two dynamic ports. \n\\<close>"], ["", "fun FTPVOIP_is_voip :: \"voip_states2 \\<Rightarrow> address \\<Rightarrow> address \\<Rightarrow> address \\<Rightarrow> id \\<Rightarrow> port \\<Rightarrow>\n                port \\<Rightarrow>  (adr\\<^sub>i\\<^sub>p, ftpvoip) history \\<Rightarrow> bool\"\nwhere\n \"FTPVOIP_is_voip H s d g i p1 p2 [] = (H = V5)\"\n|\"FTPVOIP_is_voip H s d g i p1 p2 (x#InL) = \n  (((\\<lambda> (id,sr,de,co). \n (((id = i \\<and> \n(H = V4 \\<and> ((sr = (s,1719) \\<and> de = (g,1719) \\<and> co = ARQ \\<and>\n    FTPVOIP_is_voip V5 s d g i p1 p2 InL))) \\<or>\n(H = V0 \\<and> sr = (g,1719) \\<and> de = (s,1719) \\<and> co = ARJ \\<and>\n    FTPVOIP_is_voip V4 s d g i p1 p2 InL) \\<or>\n(H = V3 \\<and> sr = (g,1719) \\<and> de = (s,1719) \\<and> co = ACF d \\<and>\n    FTPVOIP_is_voip V4 s d g i p1 p2 InL) \\<or>\n(H = V2 \\<and> sr = (s,1720) \\<and> de = (d,1720) \\<and> co = Setup p1 \\<and>\n    FTPVOIP_is_voip V3 s d g i p1 p2 InL) \\<or>\n(H = V1 \\<and> sr = (d,1720) \\<and> de = (s,1720) \\<and> co = Connect p2 \\<and>\n    FTPVOIP_is_voip V2 s d g i p1 p2 InL) \\<or>\n(H = V1 \\<and> sr = (s,p1) \\<and> de = (d,p2) \\<and> co = Stream \\<and>\n    FTPVOIP_is_voip V1 s d g i p1 p2 InL) \\<or>\n(H = V1 \\<and> sr = (d,p2) \\<and> de = (s,p1) \\<and> co = Stream \\<and>\n    FTPVOIP_is_voip V1 s d g i p1 p2 InL) \\<or>\n(H = V0 \\<and> sr = (d,1720) \\<and> de = (s,1720) \\<and> co = Fin \\<and>\n    FTPVOIP_is_voip V1 s d g i p1 p2 InL) \\<or>\n(H = V0 \\<and> sr = (s,1720) \\<and> de = (d,1720) \\<and> co = Fin \\<and>\n    FTPVOIP_is_voip V1 s d g i p1 p2 InL)))))) x)\""], ["", "text\\<open>\n  Finally, \\<open>NB_voip\\<close> returns the set of protocol traces which\n  correspond to a correct protocol run given the three addresses, the\n  ID, and the two dynamic ports.\n\\<close>"], ["", "definition \n  FTPVOIP_NB_voip :: \"address \\<Rightarrow> address \\<Rightarrow> address \\<Rightarrow> id  \\<Rightarrow> port \\<Rightarrow> port \\<Rightarrow>\n              (adr\\<^sub>i\\<^sub>p, ftpvoip) history set\" where\n  \"FTPVOIP_NB_voip s d g i p1 p2= {x. (FTPVOIP_is_voip V0 s d g i p1 p2 x)}\""], ["", "fun\n  FTPVOIP_is_ftp :: \"ftp_states2 \\<Rightarrow> adr\\<^sub>i\\<^sub>p  \\<Rightarrow> adr\\<^sub>i\\<^sub>p \\<Rightarrow> id \\<Rightarrow> port \\<Rightarrow>\n            (adr\\<^sub>i\\<^sub>p, ftpvoip) history \\<Rightarrow> bool\"\nwhere\n \"FTPVOIP_is_ftp H c s i p [] = (H=FS3)\"\n|\"FTPVOIP_is_ftp H c s i p (x#InL) = (snd s = 21  \\<and>((\\<lambda> (id,sr,de,co). (((id = i \\<and> (\n   (H=FS2 \\<and> sr = c \\<and> de = s \\<and> co = ftp_init \\<and> FTPVOIP_is_ftp FS3 c s i p InL) \\<or> \n   (H=FS1 \\<and> sr = c \\<and> de = s \\<and> co = ftp_port_request p \\<and>  FTPVOIP_is_ftp FS2 c s i p InL) \\<or> \n   (H=FS1 \\<and> sr = s \\<and> de = (fst c,p) \\<and> co= ftp_data \\<and> FTPVOIP_is_ftp FS1 c s i p InL) \\<or> \n   (H=FS0 \\<and> sr = c \\<and> de = s \\<and> co = ftp_close  \\<and> FTPVOIP_is_ftp FS1 c s i p InL) ))))) x))\""], ["", "definition \n  FTPVOIP_NB_ftp :: \"adr\\<^sub>i\\<^sub>p src \\<Rightarrow> adr\\<^sub>i\\<^sub>p dest \\<Rightarrow> id \\<Rightarrow> port  \\<Rightarrow> (adr\\<^sub>i\\<^sub>p, ftpvoip) history set\" where\n \"FTPVOIP_NB_ftp s d i p = {x. (FTPVOIP_is_ftp FS0 s d i p x)}\""], ["", "definition \n  ftp_voip_interleaved :: \"adr\\<^sub>i\\<^sub>p src \\<Rightarrow> adr\\<^sub>i\\<^sub>p dest \\<Rightarrow> id \\<Rightarrow> port  \\<Rightarrow>\n                           address \\<Rightarrow> address \\<Rightarrow> address \\<Rightarrow> id  \\<Rightarrow> port \\<Rightarrow> port \\<Rightarrow>\n                           (adr\\<^sub>i\\<^sub>p, ftpvoip) history set\" \n\nwhere\n  \"ftp_voip_interleaved s1 d1 i1 p1 vs vd vg vi vp1 vp2 = \n      {x. (FTPVOIP_is_ftp FS0 s1 d1 i1 p1 (packet_with_id x i1)) \\<and>\n          (FTPVOIP_is_voip V0 vs vd vg vi vp1 vp2 (packet_with_id x vi))}\""], ["", "end"]]}