{"file_name": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall/PacketFilter/NetworkCore.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/UPF_Firewall", "problem_names": ["lemma either: \"\\<lbrakk>a \\<noteq> tcp;a \\<noteq> udp\\<rbrakk> \\<Longrightarrow> False\"", "lemma either2[simp]: \"(a \\<noteq> tcp) = (a = udp)\"", "lemma either3[simp]: \"(a \\<noteq> udp) = (a = tcp)\"", "lemma in_subnet: \n  \"(a, e) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\"", "lemma src_in_subnet: \n  \"src(q,(a,e),r,t) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\"", "lemma dest_in_subnet: \n  \"dest (q,r,((a),e),t) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\"", "lemmas packet_defs = in_subnet_def id_def content_def src_def dest_def"], "translations": [["", "lemma either: \"\\<lbrakk>a \\<noteq> tcp;a \\<noteq> udp\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<noteq> tcp; a \\<noteq> udp\\<rbrakk> \\<Longrightarrow> False", "by (case_tac \"a\",simp_all)"], ["", "lemma either2[simp]: \"(a \\<noteq> tcp) = (a = udp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<noteq> tcp) = (a = udp)", "by (case_tac \"a\",simp_all)"], ["", "lemma either3[simp]: \"(a \\<noteq> udp) = (a = tcp)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<noteq> udp) = (a = tcp)", "by (case_tac \"a\",simp_all)"], ["", "text\\<open>\n  The following two constants give the source and destination port number of a packet. Address \n  representations using port numbers need to provide a definition for these types.\n\\<close>"], ["", "consts src_port :: \"('\\<alpha>::adr,'\\<beta>) packet \\<Rightarrow> '\\<gamma>::port\""], ["", "consts dest_port :: \"('\\<alpha>::adr,'\\<beta>) packet \\<Rightarrow> '\\<gamma>::port\""], ["", "consts src_protocol :: \"('\\<alpha>::adr,'\\<beta>) packet \\<Rightarrow> protocol\""], ["", "consts dest_protocol :: \"('\\<alpha>::adr,'\\<beta>) packet \\<Rightarrow> protocol\""], ["", "text\\<open>A subnetwork (or simply a network) is a set of sets of addresses.\\<close>"], ["", "type_synonym '\\<alpha> net = \"'\\<alpha> set set\""], ["", "text\\<open>The relation {in\\_subnet} (\\<open>\\<sqsubset>\\<close>) checks if an address is in a specific network.\\<close>"], ["", "definition\n  in_subnet :: \"'\\<alpha>::adr \\<Rightarrow> '\\<alpha> net \\<Rightarrow> bool\"  (infixl \"\\<sqsubset>\" 100)  where\n  \"in_subnet a S = (\\<exists> s \\<in> S. a \\<in> s)\""], ["", "text\\<open>The following lemmas will be useful later.\\<close>"], ["", "lemma in_subnet: \n  \"(a, e) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, e) \\<sqsubset> {{(x1, y). P x1 y}} = P a e", "by (simp add: in_subnet_def)"], ["", "lemma src_in_subnet: \n  \"src(q,(a,e),r,t) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. src (q, (a, e), r, t) \\<sqsubset> {{(x1, y). P x1 y}} = P a e", "by (simp add: in_subnet_def in_subnet src_def)"], ["", "lemma dest_in_subnet: \n  \"dest (q,r,((a),e),t) \\<sqsubset> {{(x1,y). P x1 y}} = P a e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dest (q, r, (a, e), t) \\<sqsubset> {{(x1, y). P x1 y}} = P a e", "by (simp add: in_subnet_def in_subnet dest_def)"], ["", "text\\<open>\n  Address models should provide a definition for the following constant, returning a network \n  consisting of the input address only. \n\\<close>"], ["", "consts subnet_of :: \"'\\<alpha>::adr \\<Rightarrow> '\\<alpha> net\""], ["", "lemmas packet_defs = in_subnet_def id_def content_def src_def dest_def"], ["", "end"]]}