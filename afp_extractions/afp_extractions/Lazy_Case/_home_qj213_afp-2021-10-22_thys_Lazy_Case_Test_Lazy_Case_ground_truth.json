{"file_name": "/home/qj213/afp-2021-10-22/thys/Lazy_Case/Test_Lazy_Case.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lazy_Case", "problem_names": ["lemma map_tree[code]:\n  \"map_tree f t = (case t of Node \\<Rightarrow> Node | Fork x ts \\<Rightarrow> Fork (f x) (map (map_tree f) ts))\""], "translations": [["", "lemma map_tree[code]:\n  \"map_tree f t = (case t of Node \\<Rightarrow> Node | Fork x ts \\<Rightarrow> Fork (f x) (map (map_tree f) ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_tree f t =\n    (case t of Node \\<Rightarrow> Node\n     | Fork x ts \\<Rightarrow> Fork (f x) (map (map_tree f) ts))", "by (induction t) auto"], ["", "text \\<open>The generated code uses neither target-language \\texttt{if-then-else} nor match expressions.\\<close>"], ["", "export_code test test' test'' fac map_tree in SML"], ["", "(*<*)"], ["", "ML\\<open>\nfun get_code_eqs ctxt const =\n  let\n    val thy = Proof_Context.theory_of ctxt\n    val graph = #eqngr (Code_Preproc.obtain true { ctxt = ctxt, consts = [const], terms = [] })\n    fun mk_eqs name = name\n      |> Code_Preproc.cert graph\n      |> Code.equations_of_cert thy ||> these\n      |> pair name\n  in\n    AList.lookup (=) (maps (map mk_eqs) (rev (Graph.strong_conn graph))) const\n    |> the |> snd\n    |> map (fst o snd)\n    |> map_filter I\n  end\n\nfun check_absence ctxt const =\n  let\n    val forbidden =\n      @{const_name HOL.If} :: map (fst o dest_Const o #casex) (Ctr_Sugar.ctr_sugars_of ctxt)\n    val check = exists_subterm (fn Const (c, _) => member (=) forbidden c | _ => false)\n  in\n    get_code_eqs ctxt const\n    |> map Thm.prop_of\n    |> forall (not o check)\n    |> @{assert}\n  end\n\\<close>"], ["", "ML_val\\<open>check_absence @{context} @{const_name fac}: unit\\<close>"], ["", "ML_val\\<open>check_absence @{context} @{const_name test}: unit\\<close>"], ["", "ML_val\\<open>check_absence @{context} @{const_name test'}: unit\\<close>"], ["", "ML_val\\<open>check_absence @{context} @{const_name test''}: unit\\<close>"], ["", "ML_val\\<open>check_absence @{context} @{const_name map_tree}: unit\\<close>"], ["", "(*>*)"], ["", "end"]]}