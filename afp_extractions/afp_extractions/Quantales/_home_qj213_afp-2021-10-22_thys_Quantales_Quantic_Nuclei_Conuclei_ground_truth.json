{"file_name": "/home/qj213/afp-2021-10-22/thys/Quantales/Quantic_Nuclei_Conuclei.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Quantales", "problem_names": ["lemma nuc_lax: \"nucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)\"", "lemma \"nucleus f \\<Longrightarrow> f \\<bottom> = \\<bottom>\"", "lemma \"conucleus f \\<Longrightarrow> f \\<top> = \\<top>\"", "lemma nuc_prop1: \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (x \\<cdot> f y)\"", "lemma nuc_prop2: \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (f x \\<cdot> y)\"", "lemma nuc_comp_prop: \"nucleus f \\<Longrightarrow>  f (f x \\<cdot> f y) = f (x \\<cdot> y)\"", "lemma nucleus_alt_def1: \"nucleus f \\<Longrightarrow> f x \\<rightarrow> f y = x \\<rightarrow> f y\"", "lemma nucleus_alt_def2: \"nucleus f \\<Longrightarrow> f y \\<leftarrow> f x = f y \\<leftarrow> x\"", "lemma nucleus_alt_def3: \n  fixes f :: \"'a::unital_quantale \\<Rightarrow> 'a\"\n  shows \"\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y \\<Longrightarrow> \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x \\<Longrightarrow> nucleus f\"", "lemma nucleus_alt_def: \n  fixes f :: \"'a::unital_quantale \\<Rightarrow> 'a\"\n  shows \"nucleus f = (\\<forall> x y. f x \\<rightarrow> f y = x \\<rightarrow> f y \\<and> f y \\<leftarrow> f x = f y \\<leftarrow> x)\"", "lemma nucleus_alt_def_cor1: \"nucleus f \\<Longrightarrow> f (x \\<rightarrow> y) \\<le> x \\<rightarrow> f y\"", "lemma nucleus_alt_def_cor2: \"nucleus f \\<Longrightarrow> f (y \\<leftarrow> x) \\<le> f y \\<leftarrow> x\"", "lemma nucleus_ab_unital: \n  fixes f :: \"'a::ab_unital_quantale \\<Rightarrow> 'a\"\n  shows \"nucleus f = (\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y)\"", "lemma nuc_comp_assoc: \"nucleus f \\<Longrightarrow> f (x \\<cdot> f (y \\<cdot> z)) = f (f (x \\<cdot> y) \\<cdot> z)\"", "lemma nuc_Sup_closed: \"nucleus f \\<Longrightarrow> f \\<circ> Sup \\<circ> (`) f = (f \\<circ> Sup)\"", "lemma nuc_Sup_closed_var: \"nucleus f \\<Longrightarrow> f (\\<Squnion>x \\<in> X. f x) = f (\\<Squnion>X)\"", "lemma nuc_Inf_closed: \"nucleus f \\<Longrightarrow> Sup_closed_set (Fix f)\"", "lemma nuc_Inf_closed: \"nucleus f \\<Longrightarrow> Inf_closed_set (Fix f)\"", "lemma nuc_comp_distl: \"nucleus f \\<Longrightarrow> f (x \\<cdot> f (\\<Squnion>Y)) = f (\\<Squnion>y \\<in> Y. f (x \\<cdot> y))\"", "lemma nuc_comp_distr: \"nucleus f \\<Longrightarrow> f (f (\\<Squnion>X) \\<cdot> y) = f (\\<Squnion>x \\<in> X. f (x \\<cdot> y))\"", "lemma \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f x \\<cdot> f y\"", "lemma nuc_bres_closed: \"nucleus f \\<Longrightarrow> f (f x \\<rightarrow> f y) = f x \\<rightarrow> f y\"", "lemma \"nucleus f \\<Longrightarrow> f (x \\<rightarrow> y) = f x \\<rightarrow> f y\"", "lemma nuc_fres_closed: \"nucleus f \\<Longrightarrow> f (f x \\<leftarrow> f y) = f x \\<leftarrow> f y\"", "lemma nuc_fres_closed: \"nucleus f \\<Longrightarrow> f (x \\<leftarrow> y) = f x \\<leftarrow> f y\"", "lemma nuc_inf_closed: \"nucleus f \\<Longrightarrow> inf_closed_set (Fix f)\"", "lemma nuc_inf_closed_var: \"nucleus f \\<Longrightarrow> f (f x \\<sqinter> f y) = f x \\<sqinter> f y\"", "lemma nucleus_cl_op: \"nucleus (cl_op::'a::quantale_with_nuc \\<Rightarrow> 'a)\"", "lemma unucleus_cl_op: \"unucleus (cl_op::'a::unital_quantale_with_nuc \\<Rightarrow> 'a)\"", "lemma nuc_hom: \"Abs_cl_op_im \\<circ> cl_op \\<in> quantale_homset\"", "lemma quant_morph_nuc:\n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"f \\<in> quantale_homset\" \n  shows \"nucleus ((radj f) \\<circ> f)\"", "lemma surj_quantale_hom_bij_on: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"surj f\"\n  and \"f \\<in> quantale_homset\"\n  shows \"bij_betw f (range (radj f \\<circ> f)) UNIV\"", "lemma surj_comp_pres_iso: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"f \\<in> quantale_homset\"\n  shows \"f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y\"", "lemma nuc_bres_pres: \"nucleus f \\<Longrightarrow> y \\<in> Fix f \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f\"", "lemma nuc_fres_pres: \"nucleus f \\<Longrightarrow> y \\<in> Fix f \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f\"", "lemma lax_aux: \n  fixes X :: \"'a::quantale set\"\n  assumes \"\\<forall>x.\\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\nshows \"\\<Sqinter>{z \\<in> X. x \\<le> z} \\<cdot> \\<Sqinter>{z \\<in> X. y \\<le> z} \\<le> \\<Sqinter>{z \\<in> X. x \\<cdot> y \\<le> z}\"", "lemma Inf_closed_res_nuc: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Inf_closed_set X\"\n  and  \"\\<forall>x. \\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\n  shows \"nucleus (\\<lambda>y. \\<Sqinter>{x \\<in> X. y \\<le> x})\"", "lemma Inf_closed_res_Fix: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Inf_closed_set X\"\n  and  \"\\<forall>x. \\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\nshows \"X = Fix (\\<lambda>y. \\<Sqinter>{x \\<in> X. y \\<le> x})\"", "lemma down_set_lax_morph: \"(\\<down> \\<circ> Sup) (X::'a::quantale set) \\<cdot> (\\<down> \\<circ> Sup) Y \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)\"", "lemma downset_Sup_nuc: \"nucleus (\\<down> \\<circ> (Sup::'a::quantale set \\<Rightarrow> 'a))\"", "lemma downset_surj: \"surj_on \\<down> (range (\\<down> \\<circ> Sup))\"", "lemma downset_Sup_pres_var: \"\\<down> (\\<Squnion>X) = (\\<down> \\<circ> Sup) (\\<Down> (X::'a::quantale set))\"", "lemma downset_Sup_pres: \"\\<down> (\\<Squnion>X) = (\\<down> \\<circ> Sup) (\\<Union> (\\<down> ` (X::'a::quantale set)))\"", "lemma downset_comp_pres: \"\\<down> ((x::'a::quantale) \\<cdot> y) = (\\<down> \\<circ> Sup) (\\<down>x \\<cdot> \\<down>y)\"", "lemma conuc_lax: \"conucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)\"", "lemma conuc_Sup_closed: \"conucleus f \\<Longrightarrow> f \\<circ> Sup \\<circ> (`) f = Sup \\<circ> (`) f\"", "lemma conuc_comp_closed: \"conucleus f \\<Longrightarrow> f (f x \\<cdot> f y) = f x \\<cdot> f y\"", "lemma conuc_Sup_qclosed: \"conucleus f \\<Longrightarrow> Sup_closed_set (Fix f) \\<and> comp_closed_set (Fix f)\"", "lemma lax_aux2: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"\\<Squnion>{z \\<in> X. z \\<le> x} \\<cdot> \\<Squnion>{z \\<in> X. z \\<le> y} \\<le> \\<Squnion>{z \\<in> X. z \\<le> x \\<cdot> y}\"", "lemma subquantale_conucleus: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"conucleus (\\<lambda>x. \\<Squnion>{y \\<in> X. y \\<le> x})\"", "lemma subquantale_Fix: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"X = Fix (\\<lambda>x. \\<Squnion>{y \\<in> X. y \\<le> x})\""], "translations": [["", "lemma nuc_lax: \"nucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)", "by (simp add: nucleus_def)"], ["", "definition unucleus :: \"('a::unital_quantale \\<Rightarrow> 'a::unital_quantale) \\<Rightarrow> bool\" where \n  \"unucleus f = (nucleus f \\<and> 1 \\<le> f 1)\""], ["", "lemma \"nucleus f \\<Longrightarrow> f \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> bot_pres f", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> bot_pres f", "oops"], ["", "lemma \"conucleus f \\<Longrightarrow> f \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow> top_pres f", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow> top_pres f", "oops"], ["", "lemma nuc_prop1: \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (x \\<cdot> f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (x \\<cdot> f y)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) \\<le> f (x \\<cdot> f y)\n 2. nucleus f \\<Longrightarrow> f (x \\<cdot> f y) \\<le> f (x \\<cdot> y)", "apply (simp add: clop_extensive_var clop_iso_var nucleus_def psrpq.mult_isol)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> f y) \\<le> f (x \\<cdot> y)", "by (metis clop_alt clop_extensive_var dual_order.trans nucleus_def psrpq.mult_isol_var)"], ["", "lemma nuc_prop2: \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (f x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f (f x \\<cdot> y)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) \\<le> f (f x \\<cdot> y)\n 2. nucleus f \\<Longrightarrow> f (f x \\<cdot> y) \\<le> f (x \\<cdot> y)", "apply (simp add: clop_extensive_var clop_iso_var nsrnq.mult_isor nucleus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (f x \\<cdot> y) \\<le> f (x \\<cdot> y)", "by (metis (mono_tags, hide_lams) clop_alt nuc_prop1 nucleus_def)"], ["", "lemma nuc_comp_prop: \"nucleus f \\<Longrightarrow>  f (f x \\<cdot> f y) = f (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (f x \\<cdot> f y) = f (x \\<cdot> y)", "using nuc_prop1 nuc_prop2"], ["proof (prove)\nusing this:\n  nucleus ?f \\<Longrightarrow> ?f (?x \\<cdot> ?y) = ?f (?x \\<cdot> ?f ?y)\n  nucleus ?f \\<Longrightarrow> ?f (?x \\<cdot> ?y) = ?f (?f ?x \\<cdot> ?y)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (f x \\<cdot> f y) = f (x \\<cdot> y)", "by force"], ["", "lemma nucleus_alt_def1: \"nucleus f \\<Longrightarrow> f x \\<rightarrow> f y = x \\<rightarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f x \\<rightarrow> f y = x \\<rightarrow> f y", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y\n 2. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "assume h: \"nucleus f\""], ["proof (state)\nthis:\n  nucleus f\n\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y\n 2. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "hence \"x \\<le> f x\""], ["proof (prove)\nusing this:\n  nucleus f\n\ngoal (1 subgoal):\n 1. x \\<le> f x", "by (simp add: clop_def nucleus_def clop_extensive_var)"], ["proof (state)\nthis:\n  x \\<le> f x\n\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y\n 2. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "thus \"f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y\""], ["proof (prove)\nusing this:\n  x \\<le> f x\n\ngoal (1 subgoal):\n 1. f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y", "by (simp add: bres_anti)"], ["proof (state)\nthis:\n  f x \\<rightarrow> f y \\<le> x \\<rightarrow> f y\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "have \"f x \\<cdot> (x \\<rightarrow> f y) \\<le> f x \\<cdot> f (x \\<rightarrow> f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<cdot> (x \\<rightarrow> f y)\n    \\<le> f x \\<cdot> f (x \\<rightarrow> f y)", "using clop_extensive_var h nucleus_def proto_pre_quantale_class.mult_isol"], ["proof (prove)\nusing this:\n  clop ?f \\<Longrightarrow> ?x \\<le> ?f ?x\n  nucleus f\n  nucleus ?f =\n  (clop ?f \\<and> (\\<forall>x y. ?f x \\<cdot> ?f y \\<le> ?f (x \\<cdot> y)))\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. f x \\<cdot> (x \\<rightarrow> f y)\n    \\<le> f x \\<cdot> f (x \\<rightarrow> f y)", "by blast"], ["proof (state)\nthis:\n  f x \\<cdot> (x \\<rightarrow> f y)\n  \\<le> f x \\<cdot> f (x \\<rightarrow> f y)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "also"], ["proof (state)\nthis:\n  f x \\<cdot> (x \\<rightarrow> f y)\n  \\<le> f x \\<cdot> f (x \\<rightarrow> f y)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "have \"... \\<le> f (x \\<cdot> (x \\<rightarrow> f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<cdot> f (x \\<rightarrow> f y)\n    \\<le> f (x \\<cdot> (x \\<rightarrow> f y))", "by (simp add: h nuc_lax)"], ["proof (state)\nthis:\n  f x \\<cdot> f (x \\<rightarrow> f y)\n  \\<le> f (x \\<cdot> (x \\<rightarrow> f y))\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "also"], ["proof (state)\nthis:\n  f x \\<cdot> f (x \\<rightarrow> f y)\n  \\<le> f (x \\<cdot> (x \\<rightarrow> f y))\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "have \"... \\<le> f (f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (x \\<cdot> (x \\<rightarrow> f y)) \\<le> f (f y)", "using h"], ["proof (prove)\nusing this:\n  nucleus f\n\ngoal (1 subgoal):\n 1. f (x \\<cdot> (x \\<rightarrow> f y)) \\<le> f (f y)", "by (simp add: bres_canc1 nucleus_def clop_iso_var)"], ["proof (state)\nthis:\n  f (x \\<cdot> (x \\<rightarrow> f y)) \\<le> f (f y)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "finally"], ["proof (chain)\npicking this:\n  f x \\<cdot> (x \\<rightarrow> f y) \\<le> f (f y)", "have \"f x \\<cdot> (x \\<rightarrow> f y) \\<le> f y\""], ["proof (prove)\nusing this:\n  f x \\<cdot> (x \\<rightarrow> f y) \\<le> f (f y)\n\ngoal (1 subgoal):\n 1. f x \\<cdot> (x \\<rightarrow> f y) \\<le> f y", "using h"], ["proof (prove)\nusing this:\n  f x \\<cdot> (x \\<rightarrow> f y) \\<le> f (f y)\n  nucleus f\n\ngoal (1 subgoal):\n 1. f x \\<cdot> (x \\<rightarrow> f y) \\<le> f y", "by (metis clop_alt dual_order.trans nucleus_def order_refl)"], ["proof (state)\nthis:\n  f x \\<cdot> (x \\<rightarrow> f y) \\<le> f y\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "thus \"x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y\""], ["proof (prove)\nusing this:\n  f x \\<cdot> (x \\<rightarrow> f y) \\<le> f y\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y", "by (simp add: bres_galois_imp)"], ["proof (state)\nthis:\n  x \\<rightarrow> f y \\<le> f x \\<rightarrow> f y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nucleus_alt_def2: \"nucleus f \\<Longrightarrow> f y \\<leftarrow> f x = f y \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f y \\<leftarrow> f x = f y \\<leftarrow> x", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x\n 2. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "assume h: \"nucleus f\""], ["proof (state)\nthis:\n  nucleus f\n\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x\n 2. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "hence \"x \\<le> f x\""], ["proof (prove)\nusing this:\n  nucleus f\n\ngoal (1 subgoal):\n 1. x \\<le> f x", "by (simp add: clop_extensive_var nucleus_def)"], ["proof (state)\nthis:\n  x \\<le> f x\n\ngoal (2 subgoals):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x\n 2. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "thus \"f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x\""], ["proof (prove)\nusing this:\n  x \\<le> f x\n\ngoal (1 subgoal):\n 1. f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x", "by (simp add: fres_anti)"], ["proof (state)\nthis:\n  f y \\<leftarrow> f x \\<le> f y \\<leftarrow> x\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "have \"(f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y \\<leftarrow> x) \\<cdot> f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f y \\<leftarrow> x) \\<cdot> f x\n    \\<le> f (f y \\<leftarrow> x) \\<cdot> f x", "using clop_extensive_var h nsrnq.mult_isor nucleus_def"], ["proof (prove)\nusing this:\n  clop ?f \\<Longrightarrow> ?x \\<le> ?f ?x\n  nucleus f\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n  nucleus ?f =\n  (clop ?f \\<and> (\\<forall>x y. ?f x \\<cdot> ?f y \\<le> ?f (x \\<cdot> y)))\n\ngoal (1 subgoal):\n 1. (f y \\<leftarrow> x) \\<cdot> f x\n    \\<le> f (f y \\<leftarrow> x) \\<cdot> f x", "by blast"], ["proof (state)\nthis:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y \\<leftarrow> x) \\<cdot> f x\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "also"], ["proof (state)\nthis:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y \\<leftarrow> x) \\<cdot> f x\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "have \"... \\<le> f ((f y \\<leftarrow> x) \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (f y \\<leftarrow> x) \\<cdot> f x\n    \\<le> f ((f y \\<leftarrow> x) \\<cdot> x)", "by (simp add: h nuc_lax)"], ["proof (state)\nthis:\n  f (f y \\<leftarrow> x) \\<cdot> f x\n  \\<le> f ((f y \\<leftarrow> x) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "also"], ["proof (state)\nthis:\n  f (f y \\<leftarrow> x) \\<cdot> f x\n  \\<le> f ((f y \\<leftarrow> x) \\<cdot> x)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "have \"... \\<le> f (f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ((f y \\<leftarrow> x) \\<cdot> x) \\<le> f (f y)", "using clop_iso_var fres_canc1 h nucleus_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>clop ?f; ?x \\<le> ?y\\<rbrakk> \\<Longrightarrow> ?f ?x \\<le> ?f ?y\n  (?y \\<leftarrow> ?x) \\<cdot> ?x \\<le> ?y\n  nucleus f\n  nucleus ?f =\n  (clop ?f \\<and> (\\<forall>x y. ?f x \\<cdot> ?f y \\<le> ?f (x \\<cdot> y)))\n\ngoal (1 subgoal):\n 1. f ((f y \\<leftarrow> x) \\<cdot> x) \\<le> f (f y)", "by blast"], ["proof (state)\nthis:\n  f ((f y \\<leftarrow> x) \\<cdot> x) \\<le> f (f y)\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "finally"], ["proof (chain)\npicking this:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y)", "have \"(f y \\<leftarrow> x) \\<cdot> f x \\<le> f y\""], ["proof (prove)\nusing this:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y)\n\ngoal (1 subgoal):\n 1. (f y \\<leftarrow> x) \\<cdot> f x \\<le> f y", "using h"], ["proof (prove)\nusing this:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f (f y)\n  nucleus f\n\ngoal (1 subgoal):\n 1. (f y \\<leftarrow> x) \\<cdot> f x \\<le> f y", "by (metis clop_alt dual_order.trans nucleus_def order_refl)"], ["proof (state)\nthis:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f y\n\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "thus \"f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x\""], ["proof (prove)\nusing this:\n  (f y \\<leftarrow> x) \\<cdot> f x \\<le> f y\n\ngoal (1 subgoal):\n 1. f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  f y \\<leftarrow> x \\<le> f y \\<leftarrow> f x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nucleus_alt_def3: \n  fixes f :: \"'a::unital_quantale \\<Rightarrow> 'a\"\n  shows \"\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y \\<Longrightarrow> \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x \\<Longrightarrow> nucleus f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "assume h1: \"\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y\"\n  and h2: \"\\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\""], ["proof (state)\nthis:\n  \\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y\n  \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "hence ext: \"\\<forall>x. x \\<le> f x\""], ["proof (prove)\nusing this:\n  \\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y\n  \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\n\ngoal (1 subgoal):\n 1. \\<forall>x. x \\<le> f x", "by (metis (full_types) fres_galois fres_one mult.left_neutral)"], ["proof (state)\nthis:\n  \\<forall>x. x \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "have iso: \"\\<forall>x y. x \\<le> y \\<longrightarrow> f x \\<le> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. x \\<le> y \\<longrightarrow> f x \\<le> f y", "by (metis (full_types) bres_galois dual_order.trans h1 ext nsrnqo.mult_oner)"], ["proof (state)\nthis:\n  \\<forall>x y. x \\<le> y \\<longrightarrow> f x \\<le> f y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "have trans: \"\\<forall>x. f (f x) \\<le> f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. f (f x) \\<le> f x", "by (metis fres_canc2 fres_galois h2 nsrnqo.mult_onel)"], ["proof (state)\nthis:\n  \\<forall>x. f (f x) \\<le> f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "have lax: \"\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)", "by (metis h1 h2 bres_galois ext fres_galois)"], ["proof (state)\nthis:\n  \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y;\n     \\<forall>x y. f y \\<leftarrow> f x = f y \\<leftarrow> x\\<rbrakk>\n    \\<Longrightarrow> nucleus f", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f", "by (simp add: clop_def iso lax le_funI ext trans monoI nucleus_def)"], ["proof (state)\nthis:\n  nucleus f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nucleus_alt_def: \n  fixes f :: \"'a::unital_quantale \\<Rightarrow> 'a\"\n  shows \"nucleus f = (\\<forall> x y. f x \\<rightarrow> f y = x \\<rightarrow> f y \\<and> f y \\<leftarrow> f x = f y \\<leftarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f =\n    (\\<forall>x y.\n        f x \\<rightarrow> f y = x \\<rightarrow> f y \\<and>\n        f y \\<leftarrow> f x = f y \\<leftarrow> x)", "using nucleus_alt_def1 nucleus_alt_def2 nucleus_alt_def3"], ["proof (prove)\nusing this:\n  nucleus ?f \\<Longrightarrow>\n  ?f ?x \\<rightarrow> ?f ?y = ?x \\<rightarrow> ?f ?y\n  nucleus ?f \\<Longrightarrow>\n  ?f ?y \\<leftarrow> ?f ?x = ?f ?y \\<leftarrow> ?x\n  \\<lbrakk>\\<forall>x y. ?f x \\<rightarrow> ?f y = x \\<rightarrow> ?f y;\n   \\<forall>x y. ?f y \\<leftarrow> ?f x = ?f y \\<leftarrow> x\\<rbrakk>\n  \\<Longrightarrow> nucleus ?f\n\ngoal (1 subgoal):\n 1. nucleus f =\n    (\\<forall>x y.\n        f x \\<rightarrow> f y = x \\<rightarrow> f y \\<and>\n        f y \\<leftarrow> f x = f y \\<leftarrow> x)", "by blast"], ["", "lemma nucleus_alt_def_cor1: \"nucleus f \\<Longrightarrow> f (x \\<rightarrow> y) \\<le> x \\<rightarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (x \\<rightarrow> y) \\<le> x \\<rightarrow> f y", "by (metis bres_galois bres_iso clop_extensive_var fres_galois nucleus_alt_def2 nucleus_def)"], ["", "lemma nucleus_alt_def_cor2: \"nucleus f \\<Longrightarrow> f (y \\<leftarrow> x) \\<le> f y \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (y \\<leftarrow> x) \\<le> f y \\<leftarrow> x", "by (metis bres_galois clop_extensive_var fres_galois fres_iso nucleus_alt_def1 nucleus_def)"], ["", "lemma nucleus_ab_unital: \n  fixes f :: \"'a::ab_unital_quantale \\<Rightarrow> 'a\"\n  shows \"nucleus f = (\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f = (\\<forall>x y. f x \\<rightarrow> f y = x \\<rightarrow> f y)", "by (simp add: bres_fres_eq nucleus_alt_def)"], ["", "lemma nuc_comp_assoc: \"nucleus f \\<Longrightarrow> f (x \\<cdot> f (y \\<cdot> z)) = f (f (x \\<cdot> y) \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (x \\<cdot> f (y \\<cdot> z)) = f (f (x \\<cdot> y) \\<cdot> z)", "by (metis mult.assoc nuc_prop1 nuc_prop2)"], ["", "lemma nuc_Sup_closed: \"nucleus f \\<Longrightarrow> f \\<circ> Sup \\<circ> (`) f = (f \\<circ> Sup)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f \\<circ> Sup \\<circ> (`) f = f \\<circ> Sup", "apply (simp add: nucleus_def fun_eq_iff, safe, rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>clop f;\n        \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Squnion> (f ` x)) \\<le> f (\\<Squnion> x)\n 2. \\<And>x.\n       \\<lbrakk>clop f;\n        \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Squnion> x) \\<le> f (\\<Squnion> (f ` x))", "apply (meson SUP_least Sup_upper clop_alt clop_def monoD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>clop f;\n        \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\\<rbrakk>\n       \\<Longrightarrow> f (\\<Squnion> x) \\<le> f (\\<Squnion> (f ` x))", "by (simp add: SUP_upper2 Sup_le_iff clop_extensive_var clop_iso_var)"], ["", "lemma nuc_Sup_closed_var: \"nucleus f \\<Longrightarrow> f (\\<Squnion>x \\<in> X. f x) = f (\\<Squnion>X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (\\<Squnion> (f ` X)) = f (\\<Squnion> X)", "by (metis nuc_Sup_closed o_apply)"], ["", "lemma nuc_Inf_closed: \"nucleus f \\<Longrightarrow> Sup_closed_set (Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> Sup_closed_set (Fix f)", "(* nitpick *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> Sup_closed_set (Fix f)", "oops"], ["", "lemma nuc_Inf_closed: \"nucleus f \\<Longrightarrow> Inf_closed_set (Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> Inf_closed_set (Fix f)", "by (simp add: clop_Inf_closed nucleus_def)"], ["", "lemma nuc_comp_distl: \"nucleus f \\<Longrightarrow> f (x \\<cdot> f (\\<Squnion>Y)) = f (\\<Squnion>y \\<in> Y. f (x \\<cdot> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (x \\<cdot> f (\\<Squnion> Y)) = f (\\<Squnion>y\\<in>Y. f (x \\<cdot> y))", "by (metis Sup_distl image_image nuc_Sup_closed_var nuc_prop1)"], ["", "lemma nuc_comp_distr: \"nucleus f \\<Longrightarrow> f (f (\\<Squnion>X) \\<cdot> y) = f (\\<Squnion>x \\<in> X. f (x \\<cdot> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (f (\\<Squnion> X) \\<cdot> y) = f (\\<Squnion>x\\<in>X. f (x \\<cdot> y))", "by (metis image_image Sup_distr nuc_Sup_closed_var nuc_prop2)"], ["", "lemma \"nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f x \\<cdot> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f x \\<cdot> f y", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<cdot> y) = f x \\<cdot> f y", "oops"], ["", "lemma nuc_bres_closed: \"nucleus f \\<Longrightarrow> f (f x \\<rightarrow> f y) = f x \\<rightarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (f x \\<rightarrow> f y) = f x \\<rightarrow> f y", "unfolding nucleus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. clop f \\<and>\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<Longrightarrow>\n    f (f x \\<rightarrow> f y) = f x \\<rightarrow> f y", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>clop f;\n     \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\\<rbrakk>\n    \\<Longrightarrow> f (f x \\<rightarrow> f y) = f x \\<rightarrow> f y", "by (smt clop_closure clop_extensive_var nucleus_alt_def_cor1 nucleus_def order_class.order.antisym rangeI)"], ["", "lemma \"nucleus f \\<Longrightarrow> f (x \\<rightarrow> y) = f x \\<rightarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (x \\<rightarrow> y) = f x \\<rightarrow> f y", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (x \\<rightarrow> y) = f x \\<rightarrow> f y", "oops"], ["", "lemma nuc_fres_closed: \"nucleus f \\<Longrightarrow> f (f x \\<leftarrow> f y) = f x \\<leftarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow>\n    f (f x \\<leftarrow> f y) = f x \\<leftarrow> f y", "unfolding nucleus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. clop f \\<and>\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<Longrightarrow>\n    f (f x \\<leftarrow> f y) = f x \\<leftarrow> f y", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>clop f;\n     \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)\\<rbrakk>\n    \\<Longrightarrow> f (f x \\<leftarrow> f y) = f x \\<leftarrow> f y", "by (smt clop_closure clop_extensive_var eq_iff nucleus_alt_def_cor2 nucleus_def rangeI)"], ["", "lemma nuc_fres_closed: \"nucleus f \\<Longrightarrow> f (x \\<leftarrow> y) = f x \\<leftarrow> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<leftarrow> y) = f x \\<leftarrow> f y", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (x \\<leftarrow> y) = f x \\<leftarrow> f y", "oops"], ["", "lemma nuc_inf_closed: \"nucleus f \\<Longrightarrow> inf_closed_set (Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> inf_closed_set (Fix f)", "by (simp add: Inf_inf_closed nuc_Inf_closed)"], ["", "lemma nuc_inf_closed_var: \"nucleus f \\<Longrightarrow> f (f x \\<sqinter> f y) = f x \\<sqinter> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus f \\<Longrightarrow> f (f x \\<sqinter> f y) = f x \\<sqinter> f y", "by (smt antisym_conv clop_alt clop_extensive_var inf_le2 inf_sup_ord(1) le_inf_iff nucleus_def)"], ["", "text \\<open>Taken together these facts show that, for $f:Q\\to Q$, $f[Q]$ forms a quantale with \ncomposition $f\\, (-\\cdot -)$ and sup $f\\, (\\bigsqcup -)$, and that $f:Q\\to f[Q]$ is a quantale morphism. \nThis is the first part of Theorem 3.1.1 in Rosenthal's book.\\<close>"], ["", "class quantale_with_nuc = quantale + cl_op +\n  assumes cl_op_nuc: \"cl_op x \\<cdot> cl_op y \\<le> cl_op (x \\<cdot> y)\"\n\nbegin"], ["", "subclass clattice_with_clop"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.clattice_with_clop (\\<le>) (<) cl_op Inf Sup (\\<sqinter>)\n     (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "end"], ["", "class unital_quantale_with_nuc = quantale_with_nuc + unital_quantale +\n  assumes one_nuc: \"1 \\<le> cl_op 1\""], ["", "lemma nucleus_cl_op: \"nucleus (cl_op::'a::quantale_with_nuc \\<Rightarrow> 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus cl_op", "by (simp add: cl_op_class.clop_iso cl_op_nuc  clop_def clop_ext le_funI monoI nucleus_def)"], ["", "lemma unucleus_cl_op: \"unucleus (cl_op::'a::unital_quantale_with_nuc \\<Rightarrow> 'a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unucleus cl_op", "by (simp add: nucleus_cl_op one_nuc unucleus_def)"], ["", "instantiation cl_op_im :: (quantale_with_nuc) quantale\nbegin"], ["", "lift_definition times_cl_op_im :: \"'a::quantale_with_nuc cl_op_im \\<Rightarrow> 'a cl_op_im \\<Rightarrow> 'a cl_op_im\" is \"\\<lambda>x y. cl_op (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a1 a2.\n       \\<lbrakk>a1 \\<in> range cl_op; a2 \\<in> range cl_op\\<rbrakk>\n       \\<Longrightarrow> cl_op (a1 \\<cdot> a2) \\<in> range cl_op", "by simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a cl_op_im, quantale_class)", "by (intro_classes; transfer, auto simp: nuc_comp_assoc nuc_comp_distr nucleus_cl_op nuc_comp_distl)"], ["", "end"], ["", "instantiation cl_op_im :: (unital_quantale_with_nuc) unital_quantale\nbegin"], ["", "lift_definition one_cl_op_im :: \"'a::unital_quantale_with_nuc cl_op_im\" is \"cl_op 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cl_op (1::'a) \\<in> range cl_op", "by simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a cl_op_im, unital_quantale_class)", "by (intro_classes; transfer) (metis clop_closure nsrnqo.mult_onel nuc_prop2 nucleus_cl_op nucleus_def nsrnqo.mult_oner nuc_prop1)+"], ["", "end"], ["", "text \\<open>The usefulness of these theorems remains unclear; it seems difficult to make them collaborate with concrete nuclei.\\<close>"], ["", "lemma nuc_hom: \"Abs_cl_op_im \\<circ> cl_op \\<in> quantale_homset\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs_cl_op_im \\<circ> cl_op \\<in> quantale_homset", "unfolding quantale_homset_iff comp_def fun_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x y.\n        Abs_cl_op_im (cl_op (x \\<cdot> y)) =\n        Abs_cl_op_im (cl_op x) \\<cdot> Abs_cl_op_im (cl_op y)) \\<and>\n    (\\<forall>x.\n        Abs_cl_op_im (cl_op (\\<Squnion> x)) =\n        (\\<Squnion>x\\<in>x. Abs_cl_op_im (cl_op x)))", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       Abs_cl_op_im (cl_op (x \\<cdot> y)) =\n       Abs_cl_op_im (cl_op x) \\<cdot> Abs_cl_op_im (cl_op y)\n 2. \\<And>x.\n       Abs_cl_op_im (cl_op (\\<Squnion> x)) =\n       (\\<Squnion>x\\<in>x. Abs_cl_op_im (cl_op x))", "apply (metis (no_types, lifting) Abs_cl_op_im_inverse Rep_cl_op_im_inverse nuc_comp_prop nucleus_cl_op rangeI times_cl_op_im.rep_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Abs_cl_op_im (cl_op (\\<Squnion> x)) =\n       (\\<Squnion>x\\<in>x. Abs_cl_op_im (cl_op x))", "unfolding Sup_cl_op_im_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Abs_cl_op_im (cl_op (\\<Squnion> x)) =\n       map_fun ((`) Rep_cl_op_im) Abs_cl_op_im\n        (\\<lambda>X. cl_op (\\<Squnion> X))\n        ((\\<lambda>x. Abs_cl_op_im (cl_op x)) ` x)", "by (smt Abs_cl_op_im_inverse SUP_cong image_image map_fun_apply nuc_Sup_closed_var nucleus_cl_op rangeI)"], ["", "text \\<open>This finishes the first statement of Theorem 3.1.1. The second part follows. It states that for every \nsurjective quantale homomorphism there is a nucleus such that the range of the nucleus is isomorphic to the range of the surjection.\\<close>"], ["", "lemma quant_morph_nuc:\n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"f \\<in> quantale_homset\" \n  shows \"nucleus ((radj f) \\<circ> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "let ?\\<phi> = \"(radj f) \\<circ> f\""], ["proof (state)\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "have adj: \"f \\<stileturn> (radj f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<stileturn> radj f", "by (simp add: assms quantale_hom_radj)"], ["proof (state)\nthis:\n  f \\<stileturn> radj f\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "hence a: \"clop ?\\<phi>\""], ["proof (prove)\nusing this:\n  f \\<stileturn> radj f\n\ngoal (1 subgoal):\n 1. clop (radj f \\<circ> f)", "by (simp add: clop_adj)"], ["proof (state)\nthis:\n  clop (radj f \\<circ> f)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "{"], ["proof (state)\nthis:\n  clop (radj f \\<circ> f)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "have \"f (?\\<phi> x \\<cdot> ?\\<phi> y) = (f \\<circ> ?\\<phi>) x \\<cdot> (f \\<circ> ?\\<phi>) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y) =\n    (f \\<circ> (radj f \\<circ> f)) x \\<cdot>\n    (f \\<circ> (radj f \\<circ> f)) y", "by (metis assms comp_eq_dest_lhs quantale_homset_iff)"], ["proof (state)\nthis:\n  f ((radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y) =\n  (f \\<circ> (radj f \\<circ> f)) x \\<cdot> (f \\<circ> (radj f \\<circ> f)) y\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "also"], ["proof (state)\nthis:\n  f ((radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y) =\n  (f \\<circ> (radj f \\<circ> f)) x \\<cdot> (f \\<circ> (radj f \\<circ> f)) y\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "have \"... = f x \\<cdot> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<circ> (radj f \\<circ> f)) x \\<cdot>\n    (f \\<circ> (radj f \\<circ> f)) y =\n    f x \\<cdot> f y", "by (simp add: adj adj_cancel_eq1 fun.map_comp)"], ["proof (state)\nthis:\n  (f \\<circ> (radj f \\<circ> f)) x \\<cdot>\n  (f \\<circ> (radj f \\<circ> f)) y =\n  f x \\<cdot> f y\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "also"], ["proof (state)\nthis:\n  (f \\<circ> (radj f \\<circ> f)) x \\<cdot>\n  (f \\<circ> (radj f \\<circ> f)) y =\n  f x \\<cdot> f y\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "have \"... = f (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<cdot> f y = f (x \\<cdot> y)", "by (metis assms quantale_homset_iff)"], ["proof (state)\nthis:\n  f x \\<cdot> f y = f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "finally"], ["proof (chain)\npicking this:\n  f ((radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y) = f (x \\<cdot> y)", "have \"?\\<phi> x \\<cdot> ?\\<phi> y \\<le> ?\\<phi> (x \\<cdot> y)\""], ["proof (prove)\nusing this:\n  f ((radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y) = f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. (radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y\n    \\<le> (radj f \\<circ> f) (x \\<cdot> y)", "by (metis adj adj_def comp_apply order_refl)"], ["proof (state)\nthis:\n  (radj f \\<circ> f) x \\<cdot> (radj f \\<circ> f) y\n  \\<le> (radj f \\<circ> f) (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "}"], ["proof (state)\nthis:\n  (radj f \\<circ> f) ?x2 \\<cdot> (radj f \\<circ> f) ?y2\n  \\<le> (radj f \\<circ> f) (?x2 \\<cdot> ?y2)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (radj f \\<circ> f) ?x2 \\<cdot> (radj f \\<circ> f) ?y2\n  \\<le> (radj f \\<circ> f) (?x2 \\<cdot> ?y2)\n\ngoal (1 subgoal):\n 1. nucleus (radj f \\<circ> f)", "by (simp add: a nucleus_def)"], ["proof (state)\nthis:\n  nucleus (radj f \\<circ> f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma surj_quantale_hom_bij_on: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"surj f\"\n  and \"f \\<in> quantale_homset\"\n  shows \"bij_betw f (range (radj f \\<circ> f)) UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f (range (radj f \\<circ> f)) UNIV", "using assms quantale_homset_iff surj_Sup_pres_bij_on"], ["proof (prove)\nusing this:\n  top_pres ((`) f)\n  f \\<in> quantale_homset\n  (?f \\<in> quantale_homset) = (comp_pres ?f \\<and> Sup_pres ?f)\n  \\<lbrakk>top_pres ((`) ?f); Sup_pres ?f\\<rbrakk>\n  \\<Longrightarrow> bij_betw ?f (range (radj ?f \\<circ> ?f)) UNIV\n\ngoal (1 subgoal):\n 1. bij_betw f (range (radj f \\<circ> f)) UNIV", "by blast"], ["", "text \\<open>This establishes the bijection, extending a similar fact about closure operators and complete lattices (surj-Sup-pres-bij). \nIt remains to show that $f$ is a quantale morphism, that is, it preserves Sups and compositions of closed elements with operations \ndefined as in the previous instantiation statement. Sup-preservation holds already for closure operators on complete lattices (surj-Sup-pres-iso).\nHence it remains to prove preservation of compositions.\\<close>"], ["", "lemma surj_comp_pres_iso: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  assumes \"f \\<in> quantale_homset\"\n  shows \"f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "have \"f \\<stileturn> (radj f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<stileturn> radj f", "by (simp add: assms quantale_hom_radj)"], ["proof (state)\nthis:\n  f \\<stileturn> radj f\n\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "hence \"f ((radj f \\<circ> f) (x \\<cdot> y)) = f (x \\<cdot> y)\""], ["proof (prove)\nusing this:\n  f \\<stileturn> radj f\n\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f (x \\<cdot> y)", "by (metis adj_cancel_eq1 comp_eq_dest_lhs)"], ["proof (state)\nthis:\n  f ((radj f \\<circ> f) (x \\<cdot> y)) = f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "thus ?thesis"], ["proof (prove)\nusing this:\n  f ((radj f \\<circ> f) (x \\<cdot> y)) = f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "using assms quantale_homset_iff"], ["proof (prove)\nusing this:\n  f ((radj f \\<circ> f) (x \\<cdot> y)) = f (x \\<cdot> y)\n  f \\<in> quantale_homset\n  (?f \\<in> quantale_homset) = (comp_pres ?f \\<and> Sup_pres ?f)\n\ngoal (1 subgoal):\n 1. f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y", "by auto"], ["proof (state)\nthis:\n  f ((radj f \\<circ> f) (x \\<cdot> y)) = f x \\<cdot> f y\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>This establishes the quantale isomorphism and finishes the proof of Theorem 3.1.1.\\<close>"], ["", "text \\<open>Next I prove Theorem 3.1.2 in Rosenthal's book. nuc-Inf-closed shows that $\\mathit{Fix}\\, f$ is Inf-closed. Hence the two following \nlemmas show one direction.\\<close>"], ["", "lemma nuc_bres_pres: \"nucleus f \\<Longrightarrow> y \\<in> Fix f \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f", "assume a1: \"nucleus f\""], ["proof (state)\nthis:\n  nucleus f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f", "assume a2: \"y \\<in> Fix f\""], ["proof (state)\nthis:\n  y \\<in> Fix f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f", "have \"clop f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clop f", "using a1"], ["proof (prove)\nusing this:\n  nucleus f\n\ngoal (1 subgoal):\n 1. clop f", "by (simp add: nucleus_def)"], ["proof (state)\nthis:\n  clop f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> x \\<rightarrow> y \\<in> Fix f", "thus ?thesis"], ["proof (prove)\nusing this:\n  clop f\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<in> Fix f", "using a2 a1"], ["proof (prove)\nusing this:\n  clop f\n  y \\<in> Fix f\n  nucleus f\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<in> Fix f", "by (metis clop_Fix_range clop_closure clop_extensive_var dual_order.antisym nucleus_alt_def_cor1)"], ["proof (state)\nthis:\n  x \\<rightarrow> y \\<in> Fix f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nuc_fres_pres: \"nucleus f \\<Longrightarrow> y \\<in> Fix f \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f", "assume a1: \"nucleus f\""], ["proof (state)\nthis:\n  nucleus f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f", "assume a2: \"y \\<in> Fix f\""], ["proof (state)\nthis:\n  y \\<in> Fix f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f", "have \"clop f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clop f", "using a1"], ["proof (prove)\nusing this:\n  nucleus f\n\ngoal (1 subgoal):\n 1. clop f", "by (simp add: nucleus_def)"], ["proof (state)\nthis:\n  clop f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nucleus f; y \\<in> Fix f\\<rbrakk>\n    \\<Longrightarrow> y \\<leftarrow> x \\<in> Fix f", "thus ?thesis"], ["proof (prove)\nusing this:\n  clop f\n\ngoal (1 subgoal):\n 1. y \\<leftarrow> x \\<in> Fix f", "using a2 a1"], ["proof (prove)\nusing this:\n  clop f\n  y \\<in> Fix f\n  nucleus f\n\ngoal (1 subgoal):\n 1. y \\<leftarrow> x \\<in> Fix f", "by (metis antisym_conv clop_Fix_range clop_closure clop_extensive_var nucleus_alt_def_cor2)"], ["proof (state)\nthis:\n  y \\<leftarrow> x \\<in> Fix f\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lax_aux: \n  fixes X :: \"'a::quantale set\"\n  assumes \"\\<forall>x.\\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\nshows \"\\<Sqinter>{z \\<in> X. x \\<le> z} \\<cdot> \\<Sqinter>{z \\<in> X. y \\<le> z} \\<le> \\<Sqinter>{z \\<in> X. x \\<cdot> y \\<le> z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "let ?\\<phi> = \"\\<lambda>x. \\<Sqinter>{w \\<in> X. x \\<le> w}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "assume a: \"x \\<cdot> y \\<le> z\"\n  and b: \"z \\<in> X\""], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z\n  z \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence c: \"x \\<le> z \\<leftarrow> y\""], ["proof (prove)\nusing this:\n  x \\<cdot> y \\<le> z\n  z \\<in> X\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  x \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence \"z \\<leftarrow> y \\<in> X\""], ["proof (prove)\nusing this:\n  x \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. z \\<leftarrow> y \\<in> X", "by (simp add: assms(2) b)"], ["proof (state)\nthis:\n  z \\<leftarrow> y \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence \"?\\<phi> x \\<le> z \\<leftarrow> y\""], ["proof (prove)\nusing this:\n  z \\<leftarrow> y \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {w \\<in> X. x \\<le> w} \\<le> z \\<leftarrow> y", "by (simp add: Inf_lower c)"], ["proof (state)\nthis:\n  \\<Sqinter> {w \\<in> X. x \\<le> w} \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence d: \"y \\<le> ?\\<phi> x \\<rightarrow> z\""], ["proof (prove)\nusing this:\n  \\<Sqinter> {w \\<in> X. x \\<le> w} \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. y \\<le> \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z", "by (simp add: bres_galois_imp fres_galois)"], ["proof (state)\nthis:\n  y \\<le> \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence \"?\\<phi> x  \\<rightarrow> z \\<in> X\""], ["proof (prove)\nusing this:\n  y \\<le> \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z \\<in> X", "by (simp add: assms(1) b)"], ["proof (state)\nthis:\n  \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "hence \"?\\<phi> x \\<cdot> ?\\<phi> y \\<le> z\""], ["proof (prove)\nusing this:\n  \\<Sqinter> {w \\<in> X. x \\<le> w} \\<rightarrow> z \\<in> X\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {w \\<in> X. x \\<le> w} \\<cdot>\n    \\<Sqinter> {w \\<in> X. y \\<le> w}\n    \\<le> z", "by (simp add: Inf_lower d bres_galois)"], ["proof (state)\nthis:\n  \\<Sqinter> {w \\<in> X. x \\<le> w} \\<cdot>\n  \\<Sqinter> {w \\<in> X. y \\<le> w}\n  \\<le> z\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<cdot> y \\<le> ?z2; ?z2 \\<in> X\\<rbrakk>\n  \\<Longrightarrow> \\<Sqinter> {w \\<in> X. x \\<le> w} \\<cdot>\n                    \\<Sqinter> {w \\<in> X. y \\<le> w}\n                    \\<le> ?z2\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x \\<cdot> y \\<le> ?z2; ?z2 \\<in> X\\<rbrakk>\n  \\<Longrightarrow> \\<Sqinter> {w \\<in> X. x \\<le> w} \\<cdot>\n                    \\<Sqinter> {w \\<in> X. y \\<le> w}\n                    \\<le> ?z2\n\ngoal (1 subgoal):\n 1. \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n    \\<Sqinter> {z \\<in> X. y \\<le> z}\n    \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}", "by (simp add: le_Inf_iff)"], ["proof (state)\nthis:\n  \\<Sqinter> {z \\<in> X. x \\<le> z} \\<cdot>\n  \\<Sqinter> {z \\<in> X. y \\<le> z}\n  \\<le> \\<Sqinter> {z \\<in> X. x \\<cdot> y \\<le> z}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Inf_closed_res_nuc: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Inf_closed_set X\"\n  and  \"\\<forall>x. \\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\n  shows \"nucleus (\\<lambda>y. \\<Sqinter>{x \\<in> X. y \\<le> x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus (\\<lambda>y. \\<Sqinter> {x \\<in> X. y \\<le> x})", "unfolding nucleus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. clop (\\<lambda>y. \\<Sqinter> {x \\<in> X. y \\<le> x}) \\<and>\n    (\\<forall>x y.\n        \\<Sqinter> {xa \\<in> X. x \\<le> xa} \\<cdot>\n        \\<Sqinter> {x \\<in> X. y \\<le> x}\n        \\<le> \\<Sqinter> {xa \\<in> X. x \\<cdot> y \\<le> xa})", "by (simp add: Inf_closed_clop assms lax_aux)"], ["", "lemma Inf_closed_res_Fix: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Inf_closed_set X\"\n  and  \"\\<forall>x. \\<forall>y \\<in> X. x \\<rightarrow> y \\<in> X\"\n  and \"\\<forall>x. \\<forall>y \\<in> X. y \\<leftarrow> x \\<in> X\"\nshows \"X = Fix (\\<lambda>y. \\<Sqinter>{x \\<in> X. y \\<le> x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Fix (\\<lambda>y. \\<Sqinter> {x \\<in> X. y \\<le> x})", "unfolding Fix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X = {x. \\<Sqinter> {xa \\<in> X. x \\<le> xa} = x}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow> \\<Sqinter> {xa \\<in> X. x \\<le> xa} = x\n 2. \\<And>x.\n       \\<Sqinter> {xa \\<in> X. x \\<le> xa} = x \\<Longrightarrow> x \\<in> X", "apply (rule antisym, simp_all add: Inf_lower le_Inf_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<Sqinter> {xa \\<in> X. x \\<le> xa} = x \\<Longrightarrow> x \\<in> X", "by (metis (no_types, lifting) Inf_closed_set_def assms(1) mem_Collect_eq subsetI)"], ["", "text \\<open>This finishes the proof of Theorem 3.1.2\\<close>"], ["", "subsection \\<open>A Representation Theorem\\<close>"], ["", "text \\<open>The final proofs for nuclei lead to Rosenthal's representation theorem for quantales (Theorem 3.1.2).\\<close>"], ["", "lemma down_set_lax_morph: \"(\\<down> \\<circ> Sup) (X::'a::quantale set) \\<cdot> (\\<down> \\<circ> Sup) Y \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y\n    \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y\n    \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)", "have \"\\<Squnion>((\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y) = \\<Squnion>(X \\<cdot> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> ((\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y) =\n    \\<Squnion> (X \\<cdot> Y)", "by (smt Sup_downset_adj adj_cancel_eq1 comp_apply comp_dist_mix)"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y) =\n  \\<Squnion> (X \\<cdot> Y)\n\ngoal (1 subgoal):\n 1. (\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y\n    \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Squnion> ((\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y) =\n  \\<Squnion> (X \\<cdot> Y)\n\ngoal (1 subgoal):\n 1. (\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y\n    \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)", "by (simp add: Sup_downset_adj_var eq_iff)"], ["proof (state)\nthis:\n  (\\<down> \\<circ> Sup) X \\<cdot> (\\<down> \\<circ> Sup) Y\n  \\<subseteq> (\\<down> \\<circ> Sup) (X \\<cdot> Y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma downset_Sup_nuc: \"nucleus (\\<down> \\<circ> (Sup::'a::quantale set \\<Rightarrow> 'a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nucleus (\\<down> \\<circ> Sup)", "using Sup_downset_adj clop_adj down_set_lax_morph nucleus_def"], ["proof (prove)\nusing this:\n  Sup \\<stileturn> \\<down>\n  ?f \\<stileturn> ?g \\<Longrightarrow> clop (?g \\<circ> ?f)\n  (\\<down> \\<circ> Sup) ?X \\<cdot> (\\<down> \\<circ> Sup) ?Y\n  \\<subseteq> (\\<down> \\<circ> Sup) (?X \\<cdot> ?Y)\n  nucleus ?f =\n  (clop ?f \\<and> (\\<forall>x y. ?f x \\<cdot> ?f y \\<le> ?f (x \\<cdot> y)))\n\ngoal (1 subgoal):\n 1. nucleus (\\<down> \\<circ> Sup)", "by blast"], ["", "lemma downset_surj: \"surj_on \\<down> (range (\\<down> \\<circ> Sup))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. surj_on \\<down> (range (\\<down> \\<circ> Sup))", "using surj_on_def"], ["proof (prove)\nusing this:\n  surj_on ?f ?Y = (\\<forall>y\\<in>?Y. \\<exists>x. y = ?f x)\n\ngoal (1 subgoal):\n 1. surj_on \\<down> (range (\\<down> \\<circ> Sup))", "by fastforce"], ["", "text \\<open>In addition, $\\downarrow$ is injective by Lemma downset-inj. Hence it is a bijection between the quantale and the powerset quantale. \nIt remains to show that $\\downarrow$ is a quantale morphism.\\<close>"], ["", "lemma downset_Sup_pres_var: \"\\<down> (\\<Squnion>X) = (\\<down> \\<circ> Sup) (\\<Down> (X::'a::quantale set))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down> (\\<Squnion> X) = (\\<down> \\<circ> Sup) (\\<Down> X)", "unfolding comp_def downset_prop downset_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {y. y \\<le> \\<Squnion> X} =\n    {y. y \\<le> \\<Squnion> {y. Bex X ((\\<le>) y)}}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<le> \\<Squnion> X \\<Longrightarrow>\n       x \\<le> \\<Squnion> {y. Bex X ((\\<le>) y)}\n 2. \\<And>x.\n       x \\<le> \\<Squnion> {y. Bex X ((\\<le>) y)} \\<Longrightarrow>\n       x \\<le> \\<Squnion> X", "apply (smt Sup_subset_mono dual_order.refl mem_Collect_eq order_subst1 subset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<le> \\<Squnion> {y. Bex X ((\\<le>) y)} \\<Longrightarrow>\n       x \\<le> \\<Squnion> X", "by (smt Sup_mono le_iff_inf le_infI2 mem_Collect_eq)"], ["", "lemma downset_Sup_pres: \"\\<down> (\\<Squnion>X) = (\\<down> \\<circ> Sup) (\\<Union> (\\<down> ` (X::'a::quantale set)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down> (\\<Squnion> X) = (\\<down> \\<circ> Sup) (\\<Union> (\\<down> ` X))", "by (metis downset_Sup_pres_var downset_set_prop_var)"], ["", "lemma downset_comp_pres: \"\\<down> ((x::'a::quantale) \\<cdot> y) = (\\<down> \\<circ> Sup) (\\<down>x \\<cdot> \\<down>y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<down> (x \\<cdot> y) =\n    (\\<down> \\<circ> Sup) (\\<down> x \\<cdot> \\<down> y)", "by (metis (no_types, hide_lams) Sup_downset_adj_var comp_apply comp_dist_mix downset_iso_iff dual_order.antisym order_refl)"], ["", "text \\<open>This finishes the proof of Theorem 3.1.2.\\<close>"], ["", "subsection \\<open>Conuclei\\<close>"], ["", "definition conucleus :: \"('a::quantale \\<Rightarrow> 'a::quantale) \\<Rightarrow> bool\" where\n  \"conucleus f = (coclop f \\<and> (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)))\""], ["", "lemma conuc_lax: \"conucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow> f x \\<cdot> f y \\<le> f (x \\<cdot> y)", "by (simp add: conucleus_def)"], ["", "definition uconucleus :: \"('a::unital_quantale \\<Rightarrow> 'a::unital_quantale) \\<Rightarrow> bool\" where \n  \"uconucleus f = (conucleus f \\<and> f 1 \\<le> 1)\""], ["", "text \\<open>Next I prove Theorem 3.1.3.\\<close>"], ["", "lemma conuc_Sup_closed: \"conucleus f \\<Longrightarrow> f \\<circ> Sup \\<circ> (`) f = Sup \\<circ> (`) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow>\n    f \\<circ> Sup \\<circ> (`) f = Sup \\<circ> (`) f", "unfolding conucleus_def fun_eq_iff comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coclop f \\<and>\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<Longrightarrow>\n    \\<forall>x. f (\\<Squnion> (f ` x)) = \\<Squnion> (f ` x)", "by (smt coclop_coextensive_var coclop_idem coclop_iso image_comp image_image le_iff_sup mono_SUP sup.orderE)"], ["", "lemma conuc_comp_closed: \"conucleus f \\<Longrightarrow> f (f x \\<cdot> f y) = f x \\<cdot> f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow> f (f x \\<cdot> f y) = f x \\<cdot> f y", "unfolding conucleus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coclop f \\<and>\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<Longrightarrow>\n    f (f x \\<cdot> f y) = f x \\<cdot> f y", "by (metis antisym_conv coclop_coextensive_var coclop_idem_var)"], ["", "text \\<open>The sets of fixpoints of conuclei are closed under Sups and composition; hence they form subquantales.\\<close>"], ["", "lemma conuc_Sup_qclosed: \"conucleus f \\<Longrightarrow> Sup_closed_set (Fix f) \\<and> comp_closed_set (Fix f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow>\n    Sup_closed_set (Fix f) \\<and> comp_closed_set (Fix f)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. conucleus f \\<Longrightarrow> Sup_closed_set (Fix f)\n 2. conucleus f \\<Longrightarrow> comp_closed_set (Fix f)", "apply (simp add: coclop_Sup_closed conucleus_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus f \\<Longrightarrow> comp_closed_set (Fix f)", "unfolding conucleus_def comp_closed_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coclop f \\<and>\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<Longrightarrow>\n    \\<forall>x\\<in>Fix f. \\<forall>y\\<in>Fix f. x \\<cdot> y \\<in> Fix f", "by (metis coclop_coclosure coclop_coclosure_set coclop_coextensive_var dual_order.antisym)"], ["", "text \\<open>This shows that the subset $\\mathit{Fix} f$ of a quantale, for conucleus $f$, is closed under Sups and composition. \nIt is therefore a subquantale. $f:f[Q]\\to Q$ is an embedding. As before, this could be shown by formalising a type class of quantales with a conucleus operation,\nconverting the range of the conucleus into a type and providing a sublocale proof. First, this would require showing that the coclosed \nelements of a complete lattice form a complete sublattice. Relative to the proofs for closure operators and nuclei there is nothing to \nbe learned. I provide this proof in the section on left-sided elements, where the conucleus can be expressed within the language of quantales.\\<close>"], ["", "text \\<open>The second part of Theorem 3.1.3 states that every subquantale of a given quantale is equal to $\\mathit{Fix} f$ for some conucleus $f$.\\<close>"], ["", "lemma lax_aux2: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"\\<Squnion>{z \\<in> X. z \\<le> x} \\<cdot> \\<Squnion>{z \\<in> X. z \\<le> y} \\<le> \\<Squnion>{z \\<in> X. z \\<le> x \\<cdot> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "let ?\\<phi> = \"\\<lambda>x. \\<Squnion>{z \\<in> X. z \\<le> x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "have \"?\\<phi> x \\<cdot> ?\\<phi> y = \\<Squnion>{\\<Squnion>{v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w. w \\<in> X \\<and> w \\<le> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y} =\n    \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n                w \\<in> X \\<and> w \\<le> y}", "by (simp add: Sup_distr Sup_distl setcompr_eq_image)"], ["proof (state)\nthis:\n  \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n  \\<Squnion> {z \\<in> X. z \\<le> y} =\n  \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n              w \\<in> X \\<and> w \\<le> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "also"], ["proof (state)\nthis:\n  \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n  \\<Squnion> {z \\<in> X. z \\<le> y} =\n  \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n              w \\<in> X \\<and> w \\<le> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "have \"... = \\<Squnion>{v \\<cdot> w |v w. v \\<in> X \\<and> v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n                w \\<in> X \\<and> w \\<le> y} =\n    \\<Squnion> {v \\<cdot> w |v w.\n                v \\<in> X \\<and>\n                v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n                w \\<in> X \\<and> w \\<le> y}\n    \\<le> \\<Squnion> {v \\<cdot> w |v w.\n                      v \\<in> X \\<and>\n                      v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n 2. \\<Squnion> {v \\<cdot> w |v w.\n                v \\<in> X \\<and>\n                v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n    \\<le> \\<Squnion> {\\<Squnion> {v \\<cdot> w |v.\n                                  v \\<in> X \\<and> v \\<le> x} |\n                      w. w \\<in> X \\<and> w \\<le> y}", "apply (rule Sup_least, clarsimp, smt Collect_mono_iff Sup_subset_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {v \\<cdot> w |v w.\n                v \\<in> X \\<and>\n                v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n    \\<le> \\<Squnion> {\\<Squnion> {v \\<cdot> w |v.\n                                  v \\<in> X \\<and> v \\<le> x} |\n                      w. w \\<in> X \\<and> w \\<le> y}", "by (rule Sup_least, clarsimp, smt Sup_upper2 eq_iff mem_Collect_eq)"], ["proof (state)\nthis:\n  \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n              w \\<in> X \\<and> w \\<le> y} =\n  \\<Squnion> {v \\<cdot> w |v w.\n              v \\<in> X \\<and> v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "also"], ["proof (state)\nthis:\n  \\<Squnion> {\\<Squnion> {v \\<cdot> w |v. v \\<in> X \\<and> v \\<le> x} |w.\n              w \\<in> X \\<and> w \\<le> y} =\n  \\<Squnion> {v \\<cdot> w |v w.\n              v \\<in> X \\<and> v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "have \"... \\<le> ?\\<phi> (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {v \\<cdot> w |v w.\n                v \\<in> X \\<and>\n                v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "by (smt Collect_mono_iff Sup_subset_mono assms(2) comp_closed_set_def psrpq.mult_isol_var)"], ["proof (state)\nthis:\n  \\<Squnion> {v \\<cdot> w |v w.\n              v \\<in> X \\<and> v \\<le> x \\<and> w \\<in> X \\<and> w \\<le> y}\n  \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "finally"], ["proof (chain)\npicking this:\n  \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n  \\<Squnion> {z \\<in> X. z \\<le> y}\n  \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n  \\<Squnion> {z \\<in> X. z \\<le> y}\n  \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}\n\ngoal (1 subgoal):\n 1. \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n    \\<Squnion> {z \\<in> X. z \\<le> y}\n    \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}", "by force"], ["proof (state)\nthis:\n  \\<Squnion> {z \\<in> X. z \\<le> x} \\<cdot>\n  \\<Squnion> {z \\<in> X. z \\<le> y}\n  \\<le> \\<Squnion> {z \\<in> X. z \\<le> x \\<cdot> y}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subquantale_conucleus: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"conucleus (\\<lambda>x. \\<Squnion>{y \\<in> X. y \\<le> x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. conucleus (\\<lambda>x. \\<Squnion> {y \\<in> X. y \\<le> x})", "unfolding conucleus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. coclop (\\<lambda>x. \\<Squnion> {y \\<in> X. y \\<le> x}) \\<and>\n    (\\<forall>x y.\n        \\<Squnion> {y \\<in> X. y \\<le> x} \\<cdot>\n        \\<Squnion> {ya \\<in> X. ya \\<le> y}\n        \\<le> \\<Squnion> {ya \\<in> X. ya \\<le> x \\<cdot> y})", "by (safe, simp_all add: Sup_closed_coclop assms(1) assms(2) lax_aux2)"], ["", "lemma subquantale_Fix: \n  fixes X :: \"'a::quantale set\"\n  assumes \"Sup_closed_set X\"\n  and \"comp_closed_set X\"\n  shows \"X = Fix (\\<lambda>x. \\<Squnion>{y \\<in> X. y \\<le> x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Fix (\\<lambda>x. \\<Squnion> {y \\<in> X. y \\<le> x})", "unfolding Fix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. X = {x. \\<Squnion> {y \\<in> X. y \\<le> x} = x}", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> X \\<Longrightarrow> \\<Squnion> {y \\<in> X. y \\<le> x} = x\n 2. \\<And>x.\n       \\<Squnion> {y \\<in> X. y \\<le> x} = x \\<Longrightarrow> x \\<in> X", "apply (metis (mono_tags, lifting) Sup_least Sup_upper antisym mem_Collect_eq order_refl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<Squnion> {y \\<in> X. y \\<le> x} = x \\<Longrightarrow> x \\<in> X", "by (metis (no_types, lifting) Sup_closed_set_def assms(1) mem_Collect_eq subsetI)"], ["", "text \\<open>This finishes the proof of Theorem 3.1.3\\<close>"], ["", "end"]]}