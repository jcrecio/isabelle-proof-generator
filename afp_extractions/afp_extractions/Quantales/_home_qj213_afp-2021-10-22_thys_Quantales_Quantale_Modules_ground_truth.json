{"file_name": "/home/qj213/afp-2021-10-22/thys/Quantales/Quantale_Modules.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Quantales", "problem_names": ["lemma act_morph1: \"\\<alpha> (x \\<cdot> y) = (\\<alpha> x) \\<circ> (\\<alpha> y)\"", "lemma act_morph2 [simp]: \"\\<alpha> 1 = id\"", "lemma emp_act [simp]: \"\\<alpha> (\\<Squnion>{}) p = \\<bottom>\"", "lemma emp_act_var [simp]: \"\\<alpha> \\<bottom> p = \\<bottom>\"", "lemma act_emp [simp]: \"\\<alpha> x (\\<Squnion>{}) = \\<bottom>\"", "lemma act_emp_var [simp]: \"\\<alpha> x \\<bottom> = \\<bottom>\"", "lemma act_sup_distl: \"\\<alpha> x (p \\<squnion> q) = (\\<alpha> x p) \\<squnion> (\\<alpha> x q)\"", "lemma act_sup_distr: \"\\<alpha> (x \\<squnion> y) p = (\\<alpha> x p) \\<squnion> (\\<alpha> y p)\"", "lemma act_sup_distr_var: \"\\<alpha> (x \\<squnion> y) = (\\<alpha> x) \\<squnion> (\\<alpha> y)\"", "lemma sd_distr: \"sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}\"", "lemma sd_distl_aux: \"Y \\<noteq> {} \\<Longrightarrow> p \\<squnion> (\\<Squnion>y \\<in> Y. \\<alpha> x (snd y)) = (\\<Squnion>y \\<in> Y. p \\<squnion> \\<alpha> x (snd y))\"", "lemma sd_distl: \"Y \\<noteq> {} \\<Longrightarrow> sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}\"", "lemma sd_unitl [simp]: \"sd_prod sd_unit x = x\"", "lemma sd_unitr [simp]: \"sd_prod x sd_unit = x\"", "lemma \"sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}\"", "lemma \"sd_prod x bot_prod = bot_prod\"", "lemma sd_power_zero [simp]: \"sd_power x 0 = (1,\\<bottom>)\"", "lemma sd_power_prop_aux: \"\\<alpha> (x ^ 0) y \\<squnion> (\\<Squnion>{\\<alpha> (x ^ k) y |k.  0 < k \\<and> k \\<le> Suc i}) = \\<Squnion>{\\<alpha> (x ^ k) y |k. k \\<le> Suc i}\"", "lemma sd_power_prop1 [simp]: \"sd_power (x,y) (Suc i) = (x ^ (Suc i), \\<Squnion>{\\<alpha> (x ^ k) y|k. k \\<le> i})\"", "lemma sd_power_prop2 [simp]: \"sd_power (x,y) i = (x ^ i, \\<Squnion>{\\<alpha> (x ^ k) y|k. k < i})\"", "lemma sdstar_prop: \"sd_star (x,y) = (qstar x, \\<alpha> (qstar x) y)\""], "translations": [["", "lemma act_morph1: \"\\<alpha> (x \\<cdot> y) = (\\<alpha> x) \\<circ> (\\<alpha> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (x \\<cdot> y) = \\<alpha> x \\<circ> \\<alpha> y", "by (simp add: fun_eq_iff act1)"], ["", "lemma act_morph2 [simp]: \"\\<alpha> 1 = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (1::'a) = id", "by (simp add: fun_eq_iff)"], ["", "lemma emp_act [simp]: \"\\<alpha> (\\<Squnion>{}) p = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (\\<Squnion> {}) p = \\<bottom>", "by (simp only: act3, force)"], ["", "lemma emp_act_var [simp]: \"\\<alpha> \\<bottom> p = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> \\<bottom> p = \\<bottom>", "using emp_act"], ["proof (prove)\nusing this:\n  \\<alpha> (\\<Squnion> {}) ?p = \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<bottom> p = \\<bottom>", "by auto"], ["", "lemma act_emp [simp]: \"\\<alpha> x (\\<Squnion>{}) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> x (\\<Squnion> {}) = \\<bottom>", "by (simp only: act4, force)"], ["", "lemma act_emp_var [simp]: \"\\<alpha> x \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot_pres (\\<alpha> x)", "using act_emp"], ["proof (prove)\nusing this:\n  \\<alpha> ?x (\\<Squnion> {}) = \\<bottom>\n\ngoal (1 subgoal):\n 1. bot_pres (\\<alpha> x)", "by auto"], ["", "lemma act_sup_distl: \"\\<alpha> x (p \\<squnion> q) = (\\<alpha> x p) \\<squnion> (\\<alpha> x q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> x (p \\<squnion> q) = \\<alpha> x p \\<squnion> \\<alpha> x q", "by (metis (mono_tags, lifting) act4 image_insert image_is_empty sup_Sup)"], ["", "lemma act_sup_distr: \"\\<alpha> (x \\<squnion> y) p = (\\<alpha> x p) \\<squnion> (\\<alpha> y p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (x \\<squnion> y) p = \\<alpha> x p \\<squnion> \\<alpha> y p", "by (metis (no_types, lifting) SUP_insert Sup_empty Sup_insert act3 sup_bot_right)"], ["", "lemma act_sup_distr_var: \"\\<alpha> (x \\<squnion> y) = (\\<alpha> x) \\<squnion> (\\<alpha> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (x \\<squnion> y) = \\<alpha> x \\<squnion> \\<alpha> y", "by (simp add: fun_eq_iff act_sup_distr)"], ["", "subsection \\<open>Semidirect Products and Weak Quantales\\<close>"], ["", "text \\<open>Next, the semidirect product of a  unital quantale and a complete lattice is defined. \\<close>"], ["", "definition \"sd_prod x y = (fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y))\""], ["", "lemma sd_distr: \"sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"sd_prod (Sup_prod X) y = sd_prod ((\\<Squnion>x \\<in> X. fst x), (\\<Squnion>x \\<in> X. snd x)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y =\n    sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y", "by (simp add: Sup_prod_def)"], ["proof (state)\nthis:\n  sd_prod (Sup_prod X) y =\n  sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "also"], ["proof (state)\nthis:\n  sd_prod (Sup_prod X) y =\n  sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"... = ((\\<Squnion>x \\<in> X. fst x) \\<cdot> fst y, (\\<Squnion>x \\<in> X. snd x) \\<squnion> (\\<alpha> (\\<Squnion>x \\<in> X. fst x) (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y =\n    (\\<Squnion> (fst ` X) \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     \\<alpha> (\\<Squnion> (fst ` X)) (snd y))", "by (simp add: sd_prod_def)"], ["proof (state)\nthis:\n  sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y =\n  (\\<Squnion> (fst ` X) \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion> \\<alpha> (\\<Squnion> (fst ` X)) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "also"], ["proof (state)\nthis:\n  sd_prod (\\<Squnion> (fst ` X), \\<Squnion> (snd ` X)) y =\n  (\\<Squnion> (fst ` X) \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion> \\<alpha> (\\<Squnion> (fst ` X)) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"... = ((\\<Squnion>x \\<in> X. (fst x \\<cdot> fst y)), (\\<Squnion>x \\<in> X. snd x) \\<squnion> (\\<alpha> (\\<Squnion>x \\<in> X. fst x) (snd y)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion> (fst ` X) \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n    (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     \\<alpha> (\\<Squnion> (fst ` X)) (snd y))", "by (simp add: Sup_distr image_comp)"], ["proof (state)\nthis:\n  (\\<Squnion> (fst ` X) \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion> \\<alpha> (\\<Squnion> (fst ` X)) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "also"], ["proof (state)\nthis:\n  (\\<Squnion> (fst ` X) \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion> \\<alpha> (\\<Squnion> (fst ` X)) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"... = ((\\<Squnion>x \\<in> X. (fst x \\<cdot> fst y)), (\\<Squnion>x \\<in> X. snd x) \\<squnion> (\\<Squnion>x \\<in> X. (\\<alpha> (fst x) (snd y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n    (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y)))", "by (simp add: act3 image_comp)"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y)))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "also"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   \\<alpha> (\\<Squnion> (fst ` X)) (snd y)) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y)))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"... = ((\\<Squnion>x \\<in> X. (fst x \\<cdot> fst y)), (\\<Squnion>x \\<in> X. (snd x \\<squnion> (\\<alpha> (fst x) (snd y)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y))) =\n    (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y))", "using complete_lattice_class.SUP_sup_distrib"], ["proof (prove)\nusing this:\n  \\<Squnion> (?f ` ?A) \\<squnion> \\<Squnion> (?g ` ?A) =\n  (\\<Squnion>a\\<in>?A. ?f a \\<squnion> ?g a)\n\ngoal (1 subgoal):\n 1. (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion> (snd ` X) \\<squnion>\n     (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y))) =\n    (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y))", "by fastforce"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y))) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "also"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion> (snd ` X) \\<squnion>\n   (\\<Squnion>x\\<in>X. \\<alpha> (fst x) (snd y))) =\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y))\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "have \"... = Sup_prod {(fst x \\<cdot> fst y, snd x \\<squnion> (\\<alpha> (fst x) (snd y))) |x. x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n     \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n    Sup_prod\n     {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |x.\n      x \\<in> X}", "apply (unfold Sup_prod_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y) =\n    \\<Squnion> (fst `\n                {(fst x \\<cdot> fst y,\n                  snd x \\<squnion> \\<alpha> (fst x) (snd y)) |\n                 x. x \\<in> X})\n 2. (\\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n    \\<Squnion> (snd `\n                {(fst x \\<cdot> fst y,\n                  snd x \\<squnion> \\<alpha> (fst x) (snd y)) |\n                 x. x \\<in> X})", "by ( simp add: SUP_Sup_eq, rule_tac f=Sup in arg_cong, force)+"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<in>X. fst x \\<cdot> fst y,\n   \\<Squnion>x\\<in>X. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |x.\n    x \\<in> X}\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "finally"], ["proof (chain)\npicking this:\n  sd_prod (Sup_prod X) y =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |x.\n    x \\<in> X}", "show ?thesis"], ["proof (prove)\nusing this:\n  sd_prod (Sup_prod X) y =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |x.\n    x \\<in> X}\n\ngoal (1 subgoal):\n 1. sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}", "by (simp add: sd_prod_def)"], ["proof (state)\nthis:\n  sd_prod (Sup_prod X) y = Sup_prod {sd_prod x y |x. x \\<in> X}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sd_distl_aux: \"Y \\<noteq> {} \\<Longrightarrow> p \\<squnion> (\\<Squnion>y \\<in> Y. \\<alpha> x (snd y)) = (\\<Squnion>y \\<in> Y. p \\<squnion> \\<alpha> x (snd y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    p \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y)) =\n    (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    p \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y))\n    \\<le> (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))\n 2. Y \\<noteq> {} \\<Longrightarrow>\n    (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))\n    \\<le> p \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y))", "apply (rule sup_least, metis SUP_bot_conv(2) SUP_const SUP_upper2 sup_ge1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y))\n    \\<le> (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))\n 2. Y \\<noteq> {} \\<Longrightarrow>\n    (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))\n    \\<le> p \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y))", "apply (rule Sup_least, force simp: SUP_upper2 image_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    (\\<Squnion>y\\<in>Y. p \\<squnion> \\<alpha> x (snd y))\n    \\<le> p \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> x (snd y))", "by (rule Sup_least, safe, metis Sup_upper image_iff sup.idem sup.mono sup_ge2)"], ["", "lemma sd_distl: \"Y \\<noteq> {} \\<Longrightarrow> sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "assume a: \"Y \\<noteq> {}\""], ["proof (state)\nthis:\n  Y \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"sd_prod x (Sup_prod Y) = sd_prod x ((\\<Squnion>y \\<in> Y. fst y), (\\<Squnion>y \\<in> Y. snd y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x (Sup_prod Y) =\n    sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y))", "by (simp add: Sup_prod_def)"], ["proof (state)\nthis:\n  sd_prod x (Sup_prod Y) =\n  sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "also"], ["proof (state)\nthis:\n  sd_prod x (Sup_prod Y) =\n  sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"... = ((fst x) \\<cdot> (\\<Squnion>y \\<in> Y. fst y), (snd x \\<squnion> (\\<alpha> (fst x) (\\<Squnion>y \\<in> Y. snd y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y)) =\n    (fst x \\<cdot> \\<Squnion> (fst ` Y),\n     snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))", "by (simp add: sd_prod_def)"], ["proof (state)\nthis:\n  sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y)) =\n  (fst x \\<cdot> \\<Squnion> (fst ` Y),\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "also"], ["proof (state)\nthis:\n  sd_prod x (\\<Squnion> (fst ` Y), \\<Squnion> (snd ` Y)) =\n  (fst x \\<cdot> \\<Squnion> (fst ` Y),\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"... = ((\\<Squnion>y \\<in> Y. fst x \\<cdot> fst y), (snd x \\<squnion> (\\<alpha> (fst x) (\\<Squnion>y \\<in> Y. snd y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (fst x \\<cdot> \\<Squnion> (fst ` Y),\n     snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n    (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))", "by (simp add: Sup_distl image_comp)"], ["proof (state)\nthis:\n  (fst x \\<cdot> \\<Squnion> (fst ` Y),\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "also"], ["proof (state)\nthis:\n  (fst x \\<cdot> \\<Squnion> (fst ` Y),\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"... = ((\\<Squnion>y \\<in> Y. fst x \\<cdot> fst y), (snd x \\<squnion> (\\<Squnion>y \\<in> Y. \\<alpha> (fst x) (snd y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n    (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y)))", "by (simp add: act4 image_comp)"], ["proof (state)\nthis:\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "also"], ["proof (state)\nthis:\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> \\<alpha> (fst x) (\\<Squnion> (snd ` Y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y)))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"... = ((\\<Squnion>y \\<in> Y. fst x \\<cdot> fst y), (\\<Squnion>y \\<in> Y. snd x \\<squnion> (\\<alpha> (fst x) (snd y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y))) =\n    (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y))", "using a sd_distl_aux"], ["proof (prove)\nusing this:\n  Y \\<noteq> {}\n  ?Y \\<noteq> {} \\<Longrightarrow>\n  ?p \\<squnion> (\\<Squnion>y\\<in>?Y. \\<alpha> ?x (snd y)) =\n  (\\<Squnion>y\\<in>?Y. ?p \\<squnion> \\<alpha> ?x (snd y))\n\ngoal (1 subgoal):\n 1. (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y))) =\n    (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y))", "by blast"], ["proof (state)\nthis:\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "also"], ["proof (state)\nthis:\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   snd x \\<squnion> (\\<Squnion>y\\<in>Y. \\<alpha> (fst x) (snd y))) =\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y))\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "have \"... = Sup_prod {(fst x \\<cdot> fst y, snd x \\<squnion> (\\<alpha> (fst x) (snd y))) |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n     \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n    Sup_prod\n     {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |y.\n      y \\<in> Y}", "apply (unfold Sup_prod_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y) =\n    \\<Squnion> (fst `\n                {(fst x \\<cdot> fst y,\n                  snd x \\<squnion> \\<alpha> (fst x) (snd y)) |\n                 y. y \\<in> Y})\n 2. (\\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n    \\<Squnion> (snd `\n                {(fst x \\<cdot> fst y,\n                  snd x \\<squnion> \\<alpha> (fst x) (snd y)) |\n                 y. y \\<in> Y})", "by ( simp add: SUP_Sup_eq, rule_tac f=Sup in arg_cong, force)+"], ["proof (state)\nthis:\n  (\\<Squnion>y\\<in>Y. fst x \\<cdot> fst y,\n   \\<Squnion>y\\<in>Y. snd x \\<squnion> \\<alpha> (fst x) (snd y)) =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |y.\n    y \\<in> Y}\n\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "finally"], ["proof (chain)\npicking this:\n  sd_prod x (Sup_prod Y) =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |y.\n    y \\<in> Y}", "show ?thesis"], ["proof (prove)\nusing this:\n  sd_prod x (Sup_prod Y) =\n  Sup_prod\n   {(fst x \\<cdot> fst y, snd x \\<squnion> \\<alpha> (fst x) (snd y)) |y.\n    y \\<in> Y}\n\ngoal (1 subgoal):\n 1. sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "by (simp add: sd_prod_def)"], ["proof (state)\nthis:\n  sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"sd_unit = (1,\\<bottom>)\""], ["", "lemma sd_unitl [simp]: \"sd_prod sd_unit x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod sd_unit x = x", "by (simp add: sd_prod_def sd_unit_def)"], ["", "lemma sd_unitr [simp]: \"sd_prod x sd_unit = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x sd_unit = x", "by (simp add: sd_prod_def sd_unit_def)"], ["", "text \\<open>The following counterexamples rule out that semidirect products of quantales and complete lattices form quantales.\nThe reason is that the right annihilation law fails.\\<close>"], ["", "lemma \"sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "(*nitpick[show_all,expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x (Sup_prod Y) = Sup_prod {sd_prod x y |y. y \\<in> Y}", "oops"], ["", "lemma \"sd_prod x bot_prod = bot_prod\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x bot_prod = bot_prod", "(*nitpick[show_all,expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_prod x bot_prod = bot_prod", "oops"], ["", "text \\<open>However one can show that semidirect products of (unital) quantales with complete lattices form weak (unital) quantales. \nThis provides an example of how weak quantales arise quite naturally.\\<close>"], ["", "sublocale dp_quantale: weak_quantale sd_prod Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod top_prod"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.weak_quantale sd_prod Inf_prod Sup_prod inf_prod less_eq_prod\n     less_prod sup_prod bot_prod top_prod", "apply unfold_locales"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b c. sd_prod (sd_prod a b) c = sd_prod a (sd_prod b c)\n 2. \\<And>X y.\n       sd_prod (Sup_prod X) y = Sup_prod ((\\<lambda>x. sd_prod x y) ` X)\n 3. \\<And>Y x.\n       Y \\<noteq> {} \\<Longrightarrow>\n       sd_prod x (Sup_prod Y) = Sup_prod (sd_prod x ` Y)", "apply (simp add: act1 act_sup_distl mult.assoc sd_prod_def sup_assoc)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>X y.\n       sd_prod (Sup_prod X) y = Sup_prod ((\\<lambda>x. sd_prod x y) ` X)\n 2. \\<And>Y x.\n       Y \\<noteq> {} \\<Longrightarrow>\n       sd_prod x (Sup_prod Y) = Sup_prod (sd_prod x ` Y)", "apply (metis Setcompr_eq_image sd_distr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y x.\n       Y \\<noteq> {} \\<Longrightarrow>\n       sd_prod x (Sup_prod Y) = Sup_prod (sd_prod x ` Y)", "by (metis Setcompr_eq_image sd_distl)"], ["", "sublocale dpu_quantale: unital_weak_quantale sd_unit sd_prod Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod top_prod"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_weak_quantale sd_unit sd_prod Inf_prod Sup_prod inf_prod\n     less_eq_prod less_prod sup_prod bot_prod top_prod", "by unfold_locales simp_all"], ["", "subsection \\<open>The Star in Semidirect Products\\<close>"], ["", "text \\<open>I define the star operation for a semidirect product of a quantale and a complete lattice, \nand prove a characteristic property.\\<close>"], ["", "abbreviation \"sd_power \\<equiv> dpu_quantale.power\""], ["", "abbreviation \"sd_star \\<equiv> dpu_quantale.qstar\""], ["", "lemma sd_power_zero [simp]: \"sd_power x 0 = (1,\\<bottom>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_power x 0 = (1::'a, \\<bottom>)", "using sd_unit_def"], ["proof (prove)\nusing this:\n  sd_unit = (1::?'c, \\<bottom>)\n\ngoal (1 subgoal):\n 1. sd_power x 0 = (1::'a, \\<bottom>)", "by simp"], ["", "lemma sd_power_prop_aux: \"\\<alpha> (x ^ 0) y \\<squnion> (\\<Squnion>{\\<alpha> (x ^ k) y |k.  0 < k \\<and> k \\<le> Suc i}) = \\<Squnion>{\\<alpha> (x ^ k) y |k. k \\<le> Suc i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> (x ^ 0) y \\<squnion>\n    \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i} =\n    \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i}", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<alpha> (x ^ 0) y \\<squnion>\n    \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i}\n    \\<le> \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i}\n 2. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i}\n    \\<le> \\<alpha> (x ^ 0) y \\<squnion>\n          \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i}", "apply (rule sup_least, intro Sup_upper, blast, intro Sup_mono, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i}\n    \\<le> \\<alpha> (x ^ 0) y \\<squnion>\n          \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i}", "apply (rule Sup_least, safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa k.\n       k \\<le> Suc i \\<Longrightarrow>\n       \\<alpha> (x ^ k) y\n       \\<le> \\<alpha> (x ^ 0) y \\<squnion>\n             \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i}", "by (metis (mono_tags, lifting) Sup_insert Sup_upper insert_iff le_0_eq linorder_not_le mem_Collect_eq)"], ["", "lemma sd_power_prop1 [simp]: \"sd_power (x,y) (Suc i) = (x ^ (Suc i), \\<Squnion>{\\<alpha> (x ^ k) y|k. k \\<le> i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. sd_power (x, y) (Suc 0) =\n    (x ^ Suc 0, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> 0})\n 2. \\<And>i.\n       sd_power (x, y) (Suc i) =\n       (x ^ Suc i,\n        \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n       sd_power (x, y) (Suc (Suc i)) =\n       (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. sd_power (x, y) (Suc 0) =\n    (x ^ Suc 0, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> 0})\n 2. \\<And>i.\n       sd_power (x, y) (Suc i) =\n       (x ^ Suc i,\n        \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n       sd_power (x, y) (Suc (Suc i)) =\n       (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc 0) =\n    (x ^ Suc 0, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> 0})", "by auto"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc 0) =\n  (x ^ Suc 0, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> 0})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       sd_power (x, y) (Suc i) =\n       (x ^ Suc i,\n        \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n       sd_power (x, y) (Suc (Suc i)) =\n       (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       sd_power (x, y) (Suc i) =\n       (x ^ Suc i,\n        \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n       sd_power (x, y) (Suc (Suc i)) =\n       (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "case (Suc i)"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc i) =\n  (x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       sd_power (x, y) (Suc i) =\n       (x ^ Suc i,\n        \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n       sd_power (x, y) (Suc (Suc i)) =\n       (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "thus ?case"], ["proof (prove)\nusing this:\n  sd_power (x, y) (Suc i) =\n  (x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i,\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n    sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "assume \"sd_power (x,y) (Suc i) = (x ^ Suc i, \\<Squnion>{\\<alpha> (x ^ k) y |k. k \\<le> i})\""], ["proof (state)\nthis:\n  sd_power (x, y) (Suc i) =\n  (x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i,\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n    sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "hence \"sd_power (x,y) (Suc (Suc i)) = (x ^ Suc (Suc i), \\<alpha> (x ^ 0) y \\<squnion> (\\<Squnion>{\\<alpha> (x ^ (Suc k)) y |k. k \\<le> i}))\""], ["proof (prove)\nusing this:\n  sd_power (x, y) (Suc i) =\n  (x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i),\n     \\<alpha> (x ^ 0) y \\<squnion>\n     \\<Squnion> {\\<alpha> (x ^ Suc k) y |k. k \\<le> i})", "apply (simp add: sd_prod_def act1 act4)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> fst (sd_power (x, y) i) = x \\<cdot> x ^ i \\<and>\n    y \\<squnion> \\<alpha> x (snd (sd_power (x, y) i)) =\n    \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i} \\<Longrightarrow>\n    y \\<squnion>\n    \\<Squnion> (\\<alpha> x ` {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n    y \\<squnion> \\<Squnion> {\\<alpha> x (\\<alpha> (x ^ k) y) |k. k \\<le> i}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> fst (sd_power (x, y) i) = x \\<cdot> x ^ i;\n     y \\<squnion> \\<alpha> x (snd (sd_power (x, y) i)) =\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}\\<rbrakk>\n    \\<Longrightarrow> y \\<squnion>\n                      \\<Squnion> (\\<alpha> x `\n                                  {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n                      y \\<squnion>\n                      \\<Squnion> {\\<alpha> x (\\<alpha> (x ^ k) y) |k.\n                                  k \\<le> i}", "by (metis act4 image_Collect image_image)"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ Suc k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i,\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n    sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "also"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ Suc k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i,\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n    sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "have \"... = (x ^ Suc (Suc i), \\<alpha> (x ^ 0) y \\<squnion> (\\<Squnion>{\\<alpha> (x ^ k) y |k.  0 < k \\<and> k \\<le> Suc i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x ^ Suc (Suc i),\n     \\<alpha> (x ^ 0) y \\<squnion>\n     \\<Squnion> {\\<alpha> (x ^ Suc k) y |k. k \\<le> i}) =\n    (x ^ Suc (Suc i),\n     \\<alpha> (x ^ 0) y \\<squnion>\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i})", "by (metis (no_types, hide_lams) Suc_le_eq Suc_le_mono le_0_eq not0_implies_Suc zero_less_Suc)"], ["proof (state)\nthis:\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ Suc k) y |k. k \\<le> i}) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc i) =\n    (x ^ Suc i,\n     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) \\<Longrightarrow>\n    sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "finally"], ["proof (chain)\npicking this:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i})", "show ?thesis"], ["proof (prove)\nusing this:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i})\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "using sd_power_prop_aux"], ["proof (prove)\nusing this:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i),\n   \\<alpha> (x ^ 0) y \\<squnion>\n   \\<Squnion> {\\<alpha> (x ^ k) y |k. 0 < k \\<and> k \\<le> Suc i})\n  \\<alpha> (?x ^ 0) ?y \\<squnion>\n  \\<Squnion> {\\<alpha> (?x ^ k) ?y |k. 0 < k \\<and> k \\<le> Suc ?i} =\n  \\<Squnion> {\\<alpha> (?x ^ k) ?y |k. k \\<le> Suc ?i}\n\ngoal (1 subgoal):\n 1. sd_power (x, y) (Suc (Suc i)) =\n    (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})", "by simp"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sd_power (x, y) (Suc (Suc i)) =\n  (x ^ Suc (Suc i), \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> Suc i})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sd_power_prop2 [simp]: \"sd_power (x,y) i = (x ^ i, \\<Squnion>{\\<alpha> (x ^ k) y|k. k < i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_power (x, y) i = (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})", "apply (case_tac i)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    sd_power (x, y) i = (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       sd_power (x, y) i =\n       (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})", "using sd_unit_def"], ["proof (prove)\nusing this:\n  sd_unit = (1::?'c, \\<bottom>)\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    sd_power (x, y) i = (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       sd_power (x, y) i =\n       (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       sd_power (x, y) i =\n       (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})", "using le_simps(2) unital_quantale_module.sd_power_prop1 unital_quantale_module_axioms"], ["proof (prove)\nusing this:\n  (?m < Suc ?n) = (?m \\<le> ?n)\n  unital_quantale_module ?act \\<Longrightarrow>\n  power.power sd_unit (unital_quantale_module.sd_prod ?act) (?x, ?y)\n   (Suc ?i) =\n  (?x ^ Suc ?i, \\<Squnion> {?act (?x ^ k) ?y |k. k \\<le> ?i})\n  unital_quantale_module \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       sd_power (x, y) i =\n       (x ^ i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k < i})", "by fastforce"], ["", "lemma sdstar_prop: \"sd_star (x,y) = (qstar x, \\<alpha> (qstar x) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "have \"sd_star (x,y) = sup_prod (1,\\<bottom>) (Sup_prod {sd_power (x,y) (Suc i) |i. True})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sd_star (x, y) =\n    sup_prod (1::'a, \\<bottom>)\n     (Sup_prod {sd_power (x, y) (Suc i) |i. True})", "by (metis dpu_quantale.Sup_iter_unfold dpu_quantale.qstar_def full_SetCompr_eq sd_power_zero)"], ["proof (state)\nthis:\n  sd_star (x, y) =\n  sup_prod (1::'a, \\<bottom>) (Sup_prod {sd_power (x, y) (Suc i) |i. True})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "also"], ["proof (state)\nthis:\n  sd_star (x, y) =\n  sup_prod (1::'a, \\<bottom>) (Sup_prod {sd_power (x, y) (Suc i) |i. True})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "have \"... = sup_prod (1,\\<bottom>) (Sup_prod {(x^(Suc i), \\<Squnion>{\\<alpha> (x ^ k) y|k. k \\<le> i}) |i. True})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_prod (1::'a, \\<bottom>)\n     (Sup_prod {sd_power (x, y) (Suc i) |i. True}) =\n    sup_prod (1::'a, \\<bottom>)\n     (Sup_prod\n       {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i.\n        True})", "using sd_power_prop1"], ["proof (prove)\nusing this:\n  sd_power (?x, ?y) (Suc ?i) =\n  (?x ^ Suc ?i, \\<Squnion> {\\<alpha> (?x ^ k) ?y |k. k \\<le> ?i})\n\ngoal (1 subgoal):\n 1. sup_prod (1::'a, \\<bottom>)\n     (Sup_prod {sd_power (x, y) (Suc i) |i. True}) =\n    sup_prod (1::'a, \\<bottom>)\n     (Sup_prod\n       {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i.\n        True})", "by auto"], ["proof (state)\nthis:\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod {sd_power (x, y) (Suc i) |i. True}) =\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod\n     {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i. True})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "also"], ["proof (state)\nthis:\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod {sd_power (x, y) (Suc i) |i. True}) =\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod\n     {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i. True})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "have \"... = (1 \\<squnion>( \\<Squnion>i. x ^ (Suc i)), (\\<Squnion>i. \\<Squnion>{\\<alpha> (x ^ k) y|k. k \\<le> i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_prod (1::'a, \\<bottom>)\n     (Sup_prod\n       {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i.\n        True}) =\n    ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n     \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "apply (unfold sup_prod_def Sup_prod_def, safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst (1::'a, \\<bottom>) \\<squnion>\n    fst (\\<Squnion> (fst `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True}),\n         \\<Squnion> (snd `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True})) =\n    (1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i)\n 2. snd (1::'a, \\<bottom>) \\<squnion>\n    snd (\\<Squnion> (fst `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True}),\n         \\<Squnion> (snd `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True})) =\n    (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "apply (simp, rule_tac f=\"\\<lambda>x. 1 \\<squnion> x\" in arg_cong)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Squnion> (fst `\n                {uu_.\n                 \\<exists>i.\n                    uu_ =\n                    (x \\<cdot> x ^ i,\n                     \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})}) =\n    (\\<Squnion>xa. x \\<cdot> x ^ xa)\n 2. snd (1::'a, \\<bottom>) \\<squnion>\n    snd (\\<Squnion> (fst `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True}),\n         \\<Squnion> (snd `\n                     {(x ^ Suc i,\n                       \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |\n                      i. True})) =\n    (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "by (simp add: SUP_Sup_eq, rule_tac f=Sup in arg_cong, force)+"], ["proof (state)\nthis:\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod\n     {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i.\n      True}) =\n  ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n   \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "also"], ["proof (state)\nthis:\n  sup_prod (1::'a, \\<bottom>)\n   (Sup_prod\n     {(x ^ Suc i, \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) |i.\n      True}) =\n  ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n   \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "have \"... = (qstar x, (\\<Squnion>i. \\<Squnion>{\\<alpha> (x ^ k) y|k. k \\<le> i}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n     \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n    (qstar x, \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "by (safe, metis (no_types) fSup_unfold power_0 qstar_def)"], ["proof (state)\nthis:\n  ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n   \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n  (qstar x, \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "also"], ["proof (state)\nthis:\n  ((1::'a) \\<squnion> (\\<Squnion>i. x ^ Suc i),\n   \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n  (qstar x, \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "have \"... = (qstar x, (\\<Squnion>i. \\<alpha> (x ^ i) y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (qstar x, \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n    (qstar x, \\<Squnion>i. \\<alpha> (x ^ i) y)", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n    (\\<Squnion>i. \\<alpha> (x ^ i) y)", "apply (rule antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})\n    \\<le> (\\<Squnion>i. \\<alpha> (x ^ i) y)\n 2. (\\<Squnion>i. \\<alpha> (x ^ i) y)\n    \\<le> (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "apply (safe intro!: Sup_least, simp add: Sup_upper)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa i.\n       i \\<in> UNIV \\<Longrightarrow>\n       \\<alpha> (x ^ i) y\n       \\<le> (\\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i})", "by (metis (mono_tags, lifting) SUP_upper2 Sup_upper mem_Collect_eq order_refl)"], ["proof (state)\nthis:\n  (qstar x, \\<Squnion>i. \\<Squnion> {\\<alpha> (x ^ k) y |k. k \\<le> i}) =\n  (qstar x, \\<Squnion>i. \\<alpha> (x ^ i) y)\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "finally"], ["proof (chain)\npicking this:\n  sd_star (x, y) = (qstar x, \\<Squnion>i. \\<alpha> (x ^ i) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  sd_star (x, y) = (qstar x, \\<Squnion>i. \\<alpha> (x ^ i) y)\n\ngoal (1 subgoal):\n 1. sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)", "by (simp add: qstar_def act3 image_comp)"], ["proof (state)\nthis:\n  sd_star (x, y) = (qstar x, \\<alpha> (qstar x) y)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}