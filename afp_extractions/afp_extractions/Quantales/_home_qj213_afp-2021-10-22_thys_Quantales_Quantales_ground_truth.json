{"file_name": "/home/qj213/afp-2021-10-22/thys/Quantales/Quantales.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Quantales", "problem_names": ["lemma Sup_pres_multr: \"Sup_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\"", "lemma sup_pres_multr: \"sup_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\"", "lemma bot_pres_multr: \"bot_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\"", "lemma mult_botl [simp]: \"\\<bottom> \\<cdot> x = \\<bottom>\"", "lemma sup_distr: \"(x \\<squnion> y) \\<cdot> z = (x \\<cdot> z) \\<squnion> (y \\<cdot> z)\"", "lemma mult_isor: \"x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z\"", "lemma bres_galois_imp: \"x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z\"", "lemma fres_galois: \"(x \\<cdot> y \\<le> z) = (x \\<le> z \\<leftarrow> y)\"", "lemma fres_adj: \"(\\<lambda>(x::'a::proto_near_quantale). x \\<cdot> y) \\<stileturn> (\\<lambda>x. x \\<leftarrow> y)\"", "lemma fres_canc1: \"(y \\<leftarrow> x) \\<cdot> x \\<le> y\"", "lemma fres_canc2: \"y \\<le> (y \\<cdot> x) \\<leftarrow> x\"", "lemma inf_fres: \"y \\<cdot> x = \\<Sqinter>{z. y \\<le> z \\<leftarrow> x}\"", "lemma bres_iso: \"x \\<le> y \\<Longrightarrow> z \\<rightarrow> x \\<le> z \\<rightarrow> y\"", "lemma bres_anti: \"x \\<le> y \\<Longrightarrow> y \\<rightarrow> z \\<le> x \\<rightarrow> z\"", "lemma fres_iso: \"x \\<le> y \\<Longrightarrow> x \\<leftarrow> z \\<le> y \\<leftarrow> z\"", "lemma bres_top_top [simp]: \"\\<top> \\<rightarrow> \\<top> = \\<top>\"", "lemma fres_top_top [simp]: \"\\<top> \\<leftarrow> \\<top> = \\<top>\"", "lemma bres_bot_bot [simp]: \"\\<bottom> \\<rightarrow> \\<bottom> = \\<top>\"", "lemma left_sided_localp: \"\\<top> \\<cdot> y = y \\<Longrightarrow> x \\<cdot> y \\<le> y\"", "lemma fres_sol: \"((y \\<leftarrow> x) \\<cdot> x = y) = (\\<exists>z. z \\<cdot> x = y)\"", "lemma sol_fres: \"((y \\<cdot> x) \\<leftarrow> x = y) = (\\<exists>z. y = z \\<leftarrow> x)\"", "lemma sup_subdistl: \"(x \\<cdot> y) \\<squnion> (x \\<cdot> z) \\<le> x \\<cdot> (y \\<squnion> z)\"", "lemma mult_isol: \"x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y\"", "lemma fres_anti: \"x \\<le> y \\<Longrightarrow> z \\<leftarrow> y \\<le> z \\<leftarrow> x\"", "lemma  sup_distl: \"x \\<cdot> (y \\<squnion> z) = (x \\<cdot> y) \\<squnion> (x \\<cdot> z)\"", "lemma \"y \\<le> x \\<rightarrow> z \\<longrightarrow> x \\<cdot> y \\<le> z\"", "lemma Sup_pres_multl: \"Sup_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\"", "lemma sup_pres_multl: \"sup_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\"", "lemma bot_pres_multl: \"bot_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\"", "lemma mult_botr [simp]: \"x \\<cdot> \\<bottom> = \\<bottom>\"", "lemma bres_galois: \"x \\<cdot> y \\<le> z \\<longleftrightarrow> y \\<le> x \\<rightarrow> z\"", "lemma bres_adj: \"(\\<lambda>(y::'a::proto_quantale). x \\<cdot> y) \\<stileturn> (\\<lambda>y. x \\<rightarrow> y)\"", "lemma bres_canc1: \"x \\<cdot> (x \\<rightarrow> y) \\<le> y\"", "lemma bres_canc2: \"y \\<le> x \\<rightarrow> (x \\<cdot> y)\"", "lemma  inf_bres: \"x \\<cdot> y = \\<Sqinter>{z. y \\<le> x \\<rightarrow> z}\"", "lemma bres_sol: \"(x \\<cdot> (x \\<rightarrow> y) = y) = (\\<exists>z. x \\<cdot> z = y)\"", "lemma sol_bres: \"(x \\<rightarrow> (x \\<cdot> y) = y) = (\\<exists>z. y = x \\<rightarrow> z)\"", "lemma bres_fres_clop: \"clop (\\<lambda>x::'a::proto_quantale. y \\<leftarrow> (x \\<rightarrow> y))\"", "lemma fres_bres_clop: \"clop (\\<lambda>x::'a::proto_quantale. (y \\<leftarrow> x) \\<rightarrow> y)\"", "lemma fres_curry: \"(z \\<leftarrow> y) \\<leftarrow> x = z \\<leftarrow> (x \\<cdot> y)\"", "lemma iter_ref [simp]: \"iter x \\<le> 1\"", "lemma le_top: \"x \\<le> \\<top> \\<cdot> x\"", "lemma top_times_top [simp]: \"\\<top> \\<cdot> \\<top> = \\<top>\"", "lemma bres_one: \"1 \\<le> x \\<rightarrow> x\"", "lemma fres_one: \"1 \\<le> x \\<leftarrow> x\"", "lemma fres_interchange: \"z \\<cdot> (x \\<leftarrow> y) \\<le> (z \\<cdot> x) \\<leftarrow> y\"", "lemma h_w1: \"x \\<le> x' \\<Longrightarrow>  x' \\<cdot> y \\<le> z \\<Longrightarrow> x \\<cdot> y \\<le> z\"", "lemma h_w2: \"x \\<cdot> y \\<le> z' \\<Longrightarrow> z' \\<le> z \\<Longrightarrow> x \\<cdot> y \\<le> z\"", "lemma h_seq: \"x \\<cdot> v \\<le> z \\<Longrightarrow> y \\<cdot> w \\<le> v \\<Longrightarrow> x \\<cdot> y \\<cdot> w \\<le> z\"", "lemma h_sup: \"x \\<cdot> w \\<le> z \\<Longrightarrow> y \\<cdot> w \\<le> z \\<Longrightarrow> (x \\<squnion> y) \\<cdot> w \\<le> z\"", "lemma h_Sup: \"\\<forall>x \\<in> X. x \\<cdot> w \\<le> z \\<Longrightarrow> \\<Squnion>X \\<cdot> w \\<le> z\"", "lemma \"x \\<cdot> \\<bottom> = \\<bottom>\"", "lemma (in unital_weak_quantale) \"x \\<cdot> \\<bottom> = \\<bottom>\"", "lemma Inf_subdistl: \"x \\<cdot> \\<Sqinter>Y \\<le> (\\<Sqinter>y \\<in> Y. x \\<cdot> y)\"", "lemma Inf_subdistr: \"\\<Sqinter> X \\<cdot> y \\<le> (\\<Sqinter>x \\<in> X. x \\<cdot> y)\"", "lemma fres_bot_bot [simp]: \"\\<bottom> \\<leftarrow> \\<bottom> = \\<top>\"", "lemma bres_interchange: \"(x \\<rightarrow> y) \\<cdot> z \\<le> x \\<rightarrow> (y \\<cdot> z)\"", "lemma bres_curry: \"x \\<rightarrow> (y \\<rightarrow> z) = (y \\<cdot> x) \\<rightarrow> z\"", "lemma fres_bres: \"x \\<rightarrow> (y \\<leftarrow> z) = (x \\<rightarrow> y) \\<leftarrow> z\"", "lemma bres_fres_eq: \"x \\<rightarrow> y = y \\<leftarrow> x\"", "lemma cba_bres1: \"x \\<sqinter> y \\<le> z \\<longleftrightarrow> x \\<le> cba_quantale.bres y z\"", "lemma cba_bres2: \"x \\<le> -y \\<squnion> z \\<longleftrightarrow> x \\<le> cba_quantale.bres y z\"", "lemma cba_bres_prop: \"cba_quantale.bres x y = -x \\<squnion> y\"", "lemma quantale_homset_iff: \"f \\<in> quantale_homset = (comp_pres f \\<and> Sup_pres f)\"", "lemma unital_quantale_homset_iff: \"f \\<in> unital_quantale_homset = (comp_pres f \\<and> Sup_pres f \\<and> un_pres f)\"", "lemma \"f \\<in> quantale_homset \\<Longrightarrow> Inf_pres f\"", "lemma quantale_hom_q_pres: \"f \\<in> quantale_homset \\<Longrightarrow> Sup_closed_set (range f) \\<and> comp_closed_set (range f)\"", "lemma \"f \\<in> quantale_homset \\<Longrightarrow> Inf_closed_set (range f)\"", "lemma quantale_hom_radj: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> f \\<stileturn> radj f\"", "lemma quantale_hom_prop1: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y\"", "lemma quantale_hom_prop2: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x\"", "lemma quantale_closed_maps_iff: \"f \\<in> quantale_closed_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y))\"", "lemma quantale_closed_Sup_maps_iff: \"f \\<in> quantale_closed_Sup_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f)\"", "lemma quantale_closed_unital_maps_iff: \"f \\<in> quantale_closed_unital_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> 1 \\<le> f 1)\"", "lemma quantale_closed_unital_Sup_maps_iff: \"f \\<in> quantale_closed_unital_Sup_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f \\<and> 1 \\<le> f 1)\"", "lemma quantale_hom_closed_map:\n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"(f \\<in> quantale_homset) \\<Longrightarrow> (radj f \\<in> quantale_closed_maps)\"", "lemma unital_quantale_hom_closed_unital_map:\n  fixes f :: \"'a::unital_quantale_with_dual \\<Rightarrow> 'b::unital_quantale_with_dual\"\n  shows \"(f \\<in> unital_quantale_homset) \\<Longrightarrow> (radj f \\<in> quantale_closed_unital_maps)\""], "translations": [["", "lemma Sup_pres_multr: \"Sup_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_pres (\\<lambda>z. z \\<cdot> y)", "unfolding fun_eq_iff comp_def Sup_distr"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       (\\<Squnion>x\\<in>x. x \\<cdot> y) = (\\<Squnion>z\\<in>x. z \\<cdot> y)", "by simp"], ["", "lemma sup_pres_multr: \"sup_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x ya.\n       (x \\<squnion> ya) \\<cdot> y = x \\<cdot> y \\<squnion> ya \\<cdot> y", "using Sup_pres_multr Sup_sup_pres"], ["proof (prove)\nusing this:\n  Sup_pres (\\<lambda>z. z \\<cdot> ?y)\n  Sup_pres ?f \\<Longrightarrow> sup_pres ?f\n\ngoal (1 subgoal):\n 1. \\<forall>x ya.\n       (x \\<squnion> ya) \\<cdot> y = x \\<cdot> y \\<squnion> ya \\<cdot> y", "by fastforce"], ["", "lemma bot_pres_multr: \"bot_pres (\\<lambda>(z::'a::proto_near_quantale). z \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> y = \\<bottom>", "by (metis SUP_empty Sup_distr Sup_empty)"], ["", "context proto_near_quantale\nbegin"], ["", "lemma mult_botl [simp]: \"\\<bottom> \\<cdot> x = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = \\<bottom>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = \\<bottom>", "have \"\\<bottom> \\<cdot> x = (\\<Squnion>a\\<in>{}. a \\<cdot> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = (\\<Squnion>a\\<in>{}. a \\<cdot> x)", "using Sup_distr Sup_empty"], ["proof (prove)\nusing this:\n  \\<Squnion> ?X \\<cdot> ?y = (\\<Squnion>x\\<in>?X. x \\<cdot> ?y)\n  \\<Squnion> {} = \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = (\\<Squnion>a\\<in>{}. a \\<cdot> x)", "by blast"], ["proof (state)\nthis:\n  \\<bottom> \\<cdot> x = (\\<Squnion>a\\<in>{}. a \\<cdot> x)\n\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = \\<bottom>", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<bottom> \\<cdot> x = (\\<Squnion>a\\<in>{}. a \\<cdot> x)\n\ngoal (1 subgoal):\n 1. \\<bottom> \\<cdot> x = \\<bottom>", "by simp"], ["proof (state)\nthis:\n  \\<bottom> \\<cdot> x = \\<bottom>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sup_distr: \"(x \\<squnion> y) \\<cdot> z = (x \\<cdot> z) \\<squnion> (y \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<squnion> y) \\<cdot> z = x \\<cdot> z \\<squnion> y \\<cdot> z", "by (smt SUP_empty SUP_insert Sup_distr sup_Sup sup_bot.right_neutral)"], ["", "lemma mult_isor: \"x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<cdot> z \\<le> y \\<cdot> z", "by (metis sup.absorb_iff1 sup_distr)"], ["", "text \\<open>Left and right residuals can be defined in every proto-nearquantale.\\<close>"], ["", "definition bres :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixr \"\\<rightarrow>\" 60) where \n  \"x \\<rightarrow> z = \\<Squnion>{y. x \\<cdot> y \\<le> z}\""], ["", "definition fres :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixl \"\\<leftarrow>\" 60) where \n  \"z \\<leftarrow> y = \\<Squnion>{x. x \\<cdot> y \\<le> z}\""], ["", "text \\<open>The left one is a right adjoint  to composition. For the right one, additional assumptions are needed\\<close>"], ["", "lemma bres_galois_imp: \"x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z", "by (simp add: Sup_upper bres_def)"], ["", "lemma fres_galois: \"(x \\<cdot> y \\<le> z) = (x \\<le> z \\<leftarrow> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y \\<le> z) = (x \\<le> z \\<leftarrow> y)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<cdot> y \\<le> z \\<Longrightarrow> x \\<le> z \\<leftarrow> y\n 2. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "show \"x \\<cdot> y \\<le> z \\<Longrightarrow> x \\<le> z \\<leftarrow> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<Longrightarrow> x \\<le> z \\<leftarrow> y", "by (simp add: Sup_upper fres_def)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z \\<Longrightarrow> x \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "assume \"x \\<le> z \\<leftarrow> y\""], ["proof (state)\nthis:\n  x \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "hence \"x \\<cdot> y \\<le> \\<Squnion>{x. x \\<cdot> y \\<le> z} \\<cdot> y\""], ["proof (prove)\nusing this:\n  x \\<le> z \\<leftarrow> y\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y", "by (simp add: fres_def mult_isor)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "also"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "have \"... = \\<Squnion>{x \\<cdot> y |x. x \\<cdot> y \\<le> z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y =\n    \\<Squnion> {x \\<cdot> y |x. x \\<cdot> y \\<le> z}", "by (simp add: Sup_distr setcompr_eq_image)"], ["proof (state)\nthis:\n  \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y =\n  \\<Squnion> {x \\<cdot> y |x. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "also"], ["proof (state)\nthis:\n  \\<Squnion> {x. x \\<cdot> y \\<le> z} \\<cdot> y =\n  \\<Squnion> {x \\<cdot> y |x. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "have \"... \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {x \\<cdot> y |x. x \\<cdot> y \\<le> z} \\<le> z", "by (rule Sup_least, auto)"], ["proof (state)\nthis:\n  \\<Squnion> {x \\<cdot> y |x. x \\<cdot> y \\<le> z} \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<le> z \\<leftarrow> y \\<Longrightarrow> x \\<cdot> y \\<le> z", "finally"], ["proof (chain)\npicking this:\n  x \\<cdot> y \\<le> z", "show \"x \\<cdot> y \\<le> z\""], ["proof (prove)\nusing this:\n  x \\<cdot> y \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z", "."], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma fres_adj: \"(\\<lambda>(x::'a::proto_near_quantale). x \\<cdot> y) \\<stileturn> (\\<lambda>x. x \\<leftarrow> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x \\<cdot> y) \\<stileturn> (\\<lambda>x. x \\<leftarrow> y)", "by (simp add: adj_def fres_galois)"], ["", "context proto_near_quantale\nbegin"], ["", "lemma fres_canc1: \"(y \\<leftarrow> x) \\<cdot> x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<leftarrow> x) \\<cdot> x \\<le> y", "by (simp add: fres_galois)"], ["", "lemma fres_canc2: \"y \\<le> (y \\<cdot> x) \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> y \\<cdot> x \\<leftarrow> x", "using fres_galois"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n\ngoal (1 subgoal):\n 1. y \\<le> y \\<cdot> x \\<leftarrow> x", "by force"], ["", "lemma inf_fres: \"y \\<cdot> x = \\<Sqinter>{z. y \\<le> z \\<leftarrow> x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<cdot> x = \\<Sqinter> {z. y \\<le> z \\<leftarrow> x}", "by (metis (mono_tags, lifting) fres_canc2 Inf_eqI fres_galois mem_Collect_eq)"], ["", "lemma bres_iso: \"x \\<le> y \\<Longrightarrow> z \\<rightarrow> x \\<le> z \\<rightarrow> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<rightarrow> x \\<le> z \\<rightarrow> y", "using Sup_le_iff bres_def bres_galois_imp"], ["proof (prove)\nusing this:\n  (\\<Squnion> ?A \\<le> ?b) = (\\<forall>a\\<in>?A. a \\<le> ?b)\n  ?x \\<rightarrow> ?z = \\<Squnion> {y. ?x \\<cdot> y \\<le> ?z}\n  ?x \\<cdot> ?y \\<le> ?z \\<Longrightarrow> ?y \\<le> ?x \\<rightarrow> ?z\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<rightarrow> x \\<le> z \\<rightarrow> y", "by force"], ["", "lemma bres_anti: \"x \\<le> y \\<Longrightarrow> y \\<rightarrow> z \\<le> x \\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> y \\<rightarrow> z \\<le> x \\<rightarrow> z", "by (smt Sup_le_iff bres_def bres_galois_imp fres_galois order_trans mem_Collect_eq)"], ["", "lemma fres_iso: \"x \\<le> y \\<Longrightarrow> x \\<leftarrow> z \\<le> y \\<leftarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<leftarrow> z \\<le> y \\<leftarrow> z", "using fres_galois dual_order.trans"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> x \\<leftarrow> z \\<le> y \\<leftarrow> z", "by blast"], ["", "lemma bres_top_top [simp]: \"\\<top> \\<rightarrow> \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top> \\<rightarrow> \\<top> = \\<top>", "by (simp add: bres_galois_imp dual_order.antisym)"], ["", "lemma fres_top_top [simp]: \"\\<top> \\<leftarrow> \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top> \\<leftarrow> \\<top> = \\<top>", "using fres_galois top_greatest top_le"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n  ?a \\<le> \\<top>\n  \\<top> \\<le> ?a \\<Longrightarrow> ?a = \\<top>\n\ngoal (1 subgoal):\n 1. \\<top> \\<leftarrow> \\<top> = \\<top>", "by blast"], ["", "lemma bres_bot_bot [simp]: \"\\<bottom> \\<rightarrow> \\<bottom> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<rightarrow> \\<bottom> = \\<top>", "by (simp add: bres_galois_imp top_le)"], ["", "lemma left_sided_localp: \"\\<top> \\<cdot> y = y \\<Longrightarrow> x \\<cdot> y \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top> \\<cdot> y = y \\<Longrightarrow> x \\<cdot> y \\<le> y", "by (metis mult_isor top_greatest)"], ["", "lemma fres_sol: \"((y \\<leftarrow> x) \\<cdot> x = y) = (\\<exists>z. z \\<cdot> x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((y \\<leftarrow> x) \\<cdot> x = y) = (\\<exists>z. z \\<cdot> x = y)", "using dual_order.antisym fres_canc1 fres_canc2 mult_isor"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<le> ?a; ?a \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?a = ?b\n  (?y \\<leftarrow> ?x) \\<cdot> ?x \\<le> ?y\n  ?y \\<le> ?y \\<cdot> ?x \\<leftarrow> ?x\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<cdot> ?z \\<le> ?y \\<cdot> ?z\n\ngoal (1 subgoal):\n 1. ((y \\<leftarrow> x) \\<cdot> x = y) = (\\<exists>z. z \\<cdot> x = y)", "by fastforce"], ["", "lemma sol_fres: \"((y \\<cdot> x) \\<leftarrow> x = y) = (\\<exists>z. y = z \\<leftarrow> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<cdot> x \\<leftarrow> x = y) = (\\<exists>z. y = z \\<leftarrow> x)", "by (metis fres_canc1 fres_canc2 fres_sol eq_iff fres_galois)"], ["", "end"], ["", "class proto_pre_quantale = proto_near_quantale + \n  assumes Sup_subdistl: \"(\\<Squnion>y \\<in> Y. x \\<cdot> y) \\<le> x \\<cdot> \\<Squnion>Y\"\n    \nbegin"], ["", "lemma sup_subdistl: \"(x \\<cdot> y) \\<squnion> (x \\<cdot> z) \\<le> x \\<cdot> (y \\<squnion> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<squnion> x \\<cdot> z \\<le> x \\<cdot> (y \\<squnion> z)", "by (smt SUP_empty SUP_insert Sup_subdistl sup_Sup sup_bot_right)"], ["", "lemma mult_isol: \"x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<cdot> x \\<le> z \\<cdot> y", "by (metis le_iff_sup le_sup_iff sup_subdistl)"], ["", "lemma fres_anti: \"x \\<le> y \\<Longrightarrow> z \\<leftarrow> y \\<le> z \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<leftarrow> y \\<le> z \\<leftarrow> x", "using dual_order.trans fres_galois mult_isol"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. x \\<le> y \\<Longrightarrow> z \\<leftarrow> y \\<le> z \\<leftarrow> x", "by blast"], ["", "end"], ["", "class weak_proto_quantale = proto_near_quantale +\n  assumes weak_Sup_distl: \"Y \\<noteq> {} \\<Longrightarrow> x \\<cdot> \\<Squnion>Y = (\\<Squnion>y \\<in> Y. x \\<cdot> y)\" \n\nbegin"], ["", "subclass proto_pre_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.proto_pre_quantale Inf Sup (\\<sqinter>) (\\<le>) (<) (\\<squnion>)\n     \\<bottom> \\<top> (\\<cdot>)", "proof unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Y. \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "have a: \"\\<And>x Y. Y = {} \\<Longrightarrow> (\\<Squnion>y \\<in> Y. x \\<cdot> y) \\<le> x \\<cdot> \\<Squnion>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x Y.\n       Y = {} \\<Longrightarrow>\n       \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "by simp"], ["proof (state)\nthis:\n  ?Y = {} \\<Longrightarrow>\n  \\<Squnion> ((\\<cdot>) ?x ` ?Y) \\<le> ?x \\<cdot> \\<Squnion> ?Y\n\ngoal (1 subgoal):\n 1. \\<And>x Y. \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "have b: \"\\<And>x Y. Y \\<noteq> {} \\<Longrightarrow> (\\<Squnion>y \\<in> Y. x \\<cdot> y) \\<le> x \\<cdot> \\<Squnion>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x Y.\n       Y \\<noteq> {} \\<Longrightarrow>\n       \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "by (simp add: weak_Sup_distl)"], ["proof (state)\nthis:\n  ?Y \\<noteq> {} \\<Longrightarrow>\n  \\<Squnion> ((\\<cdot>) ?x ` ?Y) \\<le> ?x \\<cdot> \\<Squnion> ?Y\n\ngoal (1 subgoal):\n 1. \\<And>x Y. \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "show  \"\\<And>x Y. (\\<Squnion>y \\<in> Y. x \\<cdot> y) \\<le> x \\<cdot> \\<Squnion>Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x Y. \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "using a b"], ["proof (prove)\nusing this:\n  ?Y = {} \\<Longrightarrow>\n  \\<Squnion> ((\\<cdot>) ?x ` ?Y) \\<le> ?x \\<cdot> \\<Squnion> ?Y\n  ?Y \\<noteq> {} \\<Longrightarrow>\n  \\<Squnion> ((\\<cdot>) ?x ` ?Y) \\<le> ?x \\<cdot> \\<Squnion> ?Y\n\ngoal (1 subgoal):\n 1. \\<And>x Y. \\<Squnion> ((\\<cdot>) x ` Y) \\<le> x \\<cdot> \\<Squnion> Y", "by blast"], ["proof (state)\nthis:\n  \\<Squnion> ((\\<cdot>) ?x ` ?Y) \\<le> ?x \\<cdot> \\<Squnion> ?Y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  sup_distl: \"x \\<cdot> (y \\<squnion> z) = (x \\<cdot> y) \\<squnion> (x \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> (y \\<squnion> z) = x \\<cdot> y \\<squnion> x \\<cdot> z", "using weak_Sup_distl[where Y=\"{y, z}\"]"], ["proof (prove)\nusing this:\n  insert y (\\<eta> z) \\<noteq> {} \\<Longrightarrow>\n  ?x \\<cdot> \\<Squnion> insert y (\\<eta> z) =\n  \\<Squnion> ((\\<cdot>) ?x ` insert y (\\<eta> z))\n\ngoal (1 subgoal):\n 1. x \\<cdot> (y \\<squnion> z) = x \\<cdot> y \\<squnion> x \\<cdot> z", "by (fastforce intro!: Sup_eqI)"], ["", "lemma \"y \\<le> x \\<rightarrow> z \\<longrightarrow> x \\<cdot> y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<longrightarrow> x \\<cdot> y \\<le> z", "(* nitpick [expect = genuine] *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<longrightarrow> x \\<cdot> y \\<le> z", "oops"], ["", "end"], ["", "class proto_quantale = proto_near_quantale +\n  assumes Sup_distl: \"x \\<cdot> \\<Squnion>Y = (\\<Squnion>y \\<in> Y. x \\<cdot> y)\""], ["", "lemma Sup_pres_multl: \"Sup_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_pres ((\\<cdot>) x)", "unfolding fun_eq_iff comp_def Sup_distl"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       \\<Squnion> ((\\<cdot>) x ` xa) = \\<Squnion> ((\\<cdot>) x ` xa)", "by simp"], ["", "lemma sup_pres_multl: \"sup_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_pres ((\\<cdot>) x)", "by (metis (no_types, lifting) SUP_insert Sup_distl Sup_empty Sup_insert sup_bot_right)"], ["", "lemma bot_pres_multl: \"bot_pres (\\<lambda>(z::'a::proto_quantale). x \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot_pres ((\\<cdot>) x)", "by (metis SUP_empty Sup_distl Sup_empty)"], ["", "context proto_quantale\nbegin"], ["", "subclass weak_proto_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.weak_proto_quantale Inf Sup (\\<sqinter>) (\\<le>) (<) (\\<squnion>)\n     \\<bottom> \\<top> (\\<cdot>)", "by standard (simp add: Sup_distl)"], ["", "lemma mult_botr [simp]: \"x \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<bottom> = \\<bottom>", "by (smt image_empty Sup_distl Sup_empty)"], ["", "text \\<open>Now there is also an adjunction for the other residual.\\<close>"], ["", "lemma bres_galois: \"x \\<cdot> y \\<le> z \\<longleftrightarrow> y \\<le> x \\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> y \\<le> z) = (y \\<le> x \\<rightarrow> z)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z\n 2. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "show \"x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z", "by (simp add: Sup_upper bres_def)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z \\<Longrightarrow> y \\<le> x \\<rightarrow> z\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "assume \"y \\<le> x \\<rightarrow> z\""], ["proof (state)\nthis:\n  y \\<le> x \\<rightarrow> z\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "hence \"x \\<cdot> y \\<le> x \\<cdot> \\<Squnion>{y. x \\<cdot> y \\<le> z}\""], ["proof (prove)\nusing this:\n  y \\<le> x \\<rightarrow> z\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z}", "by (simp add: bres_def mult_isol)"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "also"], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "have \"... = \\<Squnion>{x \\<cdot> y |y. x \\<cdot> y \\<le> z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z} =\n    \\<Squnion> {x \\<cdot> y |y. x \\<cdot> y \\<le> z}", "by (simp add: Sup_distl setcompr_eq_image)"], ["proof (state)\nthis:\n  x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z} =\n  \\<Squnion> {x \\<cdot> y |y. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "also"], ["proof (state)\nthis:\n  x \\<cdot> \\<Squnion> {y. x \\<cdot> y \\<le> z} =\n  \\<Squnion> {x \\<cdot> y |y. x \\<cdot> y \\<le> z}\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "have \"... \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Squnion> {x \\<cdot> y |y. x \\<cdot> y \\<le> z} \\<le> z", "by (rule Sup_least, safe)"], ["proof (state)\nthis:\n  \\<Squnion> {x \\<cdot> y |y. x \\<cdot> y \\<le> z} \\<le> z\n\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> z \\<Longrightarrow> x \\<cdot> y \\<le> z", "finally"], ["proof (chain)\npicking this:\n  x \\<cdot> y \\<le> z", "show \"x \\<cdot> y \\<le> z\""], ["proof (prove)\nusing this:\n  x \\<cdot> y \\<le> z\n\ngoal (1 subgoal):\n 1. x \\<cdot> y \\<le> z", "."], ["proof (state)\nthis:\n  x \\<cdot> y \\<le> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma bres_adj: \"(\\<lambda>(y::'a::proto_quantale). x \\<cdot> y) \\<stileturn> (\\<lambda>y. x \\<rightarrow> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<cdot>) x \\<stileturn> (\\<rightarrow>) x", "by (simp add: adj_def bres_galois)"], ["", "context proto_quantale\nbegin"], ["", "lemma bres_canc1: \"x \\<cdot> (x \\<rightarrow> y) \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> (x \\<rightarrow> y) \\<le> y", "by (simp add: bres_galois)"], ["", "lemma bres_canc2: \"y \\<le> x \\<rightarrow> (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<rightarrow> x \\<cdot> y", "by (simp add: bres_galois_imp)"], ["", "lemma  inf_bres: \"x \\<cdot> y = \\<Sqinter>{z. y \\<le> x \\<rightarrow> z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> y = \\<Sqinter> {z. y \\<le> x \\<rightarrow> z}", "using bres_galois fres_galois inf_fres"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?y \\<le> ?x \\<rightarrow> ?z)\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n  ?y \\<cdot> ?x = \\<Sqinter> {z. ?y \\<le> z \\<leftarrow> ?x}\n\ngoal (1 subgoal):\n 1. x \\<cdot> y = \\<Sqinter> {z. y \\<le> x \\<rightarrow> z}", "by force"], ["", "lemma bres_sol: \"(x \\<cdot> (x \\<rightarrow> y) = y) = (\\<exists>z. x \\<cdot> z = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> (x \\<rightarrow> y) = y) = (\\<exists>z. x \\<cdot> z = y)", "using bres_galois antisym mult_isol"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?y \\<le> ?x \\<rightarrow> ?z)\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?x\\<rbrakk> \\<Longrightarrow> ?x = ?y\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n\ngoal (1 subgoal):\n 1. (x \\<cdot> (x \\<rightarrow> y) = y) = (\\<exists>z. x \\<cdot> z = y)", "by force"], ["", "lemma sol_bres: \"(x \\<rightarrow> (x \\<cdot> y) = y) = (\\<exists>z. y = x \\<rightarrow> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<rightarrow> x \\<cdot> y = y) = (\\<exists>z. y = x \\<rightarrow> z)", "by (metis bres_canc1 bres_canc2 bres_iso eq_iff)"], ["", "end"], ["", "lemma bres_fres_clop: \"clop (\\<lambda>x::'a::proto_quantale. y \\<leftarrow> (x \\<rightarrow> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clop (\\<lambda>x. y \\<leftarrow> (x \\<rightarrow> y))", "unfolding clop_def comp_def mono_def le_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. id x \\<le> y \\<leftarrow> (x \\<rightarrow> y)) \\<and>\n    (\\<forall>x ya.\n        x \\<le> ya \\<longrightarrow>\n        y \\<leftarrow> (x \\<rightarrow> y)\n        \\<le> y \\<leftarrow> (ya \\<rightarrow> y)) \\<and>\n    (\\<forall>x.\n        y \\<leftarrow>\n        ((y \\<leftarrow> (x \\<rightarrow> y)) \\<rightarrow> y)\n        \\<le> y \\<leftarrow> (x \\<rightarrow> y))", "by (metis bres_anti bres_canc1 bres_galois_imp fres_anti fres_galois id_apply)"], ["", "lemma fres_bres_clop: \"clop (\\<lambda>x::'a::proto_quantale. (y \\<leftarrow> x) \\<rightarrow> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. clop (\\<lambda>x. (y \\<leftarrow> x) \\<rightarrow> y)", "unfolding clop_def comp_def mono_def le_fun_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x. id x \\<le> (y \\<leftarrow> x) \\<rightarrow> y) \\<and>\n    (\\<forall>x ya.\n        x \\<le> ya \\<longrightarrow>\n        (y \\<leftarrow> x) \\<rightarrow> y\n        \\<le> (y \\<leftarrow> ya) \\<rightarrow> y) \\<and>\n    (\\<forall>x.\n        (y \\<leftarrow> ((y \\<leftarrow> x) \\<rightarrow> y)) \\<rightarrow>\n        y\n        \\<le> (y \\<leftarrow> x) \\<rightarrow> y)", "by (metis bres_anti bres_canc1 bres_galois_imp fres_anti fres_canc1 fres_galois id_apply)"], ["", "subsection \\<open>Families of Quantales\\<close>"], ["", "class near_quantale = proto_near_quantale + semigroup_mult"], ["", "sublocale near_quantale \\<subseteq> nsrnq: near_dioid \"(\\<squnion>)\" \"(\\<cdot>)\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.near_dioid (\\<squnion>) (\\<cdot>) (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a b c. a \\<squnion> b \\<squnion> c = a \\<squnion> (b \\<squnion> c)\n 2. \\<And>a b. a \\<squnion> b = b \\<squnion> a\n 3. \\<And>x y z.\n       (x \\<squnion> y) \\<cdot> z = x \\<cdot> z \\<squnion> y \\<cdot> z\n 4. \\<And>x y. (x \\<le> y) = (x \\<squnion> y = y)\n 5. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 6. \\<And>x. x \\<squnion> x = x", "apply (simp add: sup_assoc)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>a b. a \\<squnion> b = b \\<squnion> a\n 2. \\<And>x y z.\n       (x \\<squnion> y) \\<cdot> z = x \\<cdot> z \\<squnion> y \\<cdot> z\n 3. \\<And>x y. (x \\<le> y) = (x \\<squnion> y = y)\n 4. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 5. \\<And>x. x \\<squnion> x = x", "apply (simp add: sup_commute)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y z.\n       (x \\<squnion> y) \\<cdot> z = x \\<cdot> z \\<squnion> y \\<cdot> z\n 2. \\<And>x y. (x \\<le> y) = (x \\<squnion> y = y)\n 3. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)\n 4. \\<And>x. x \\<squnion> x = x", "apply (simp_all add: sup_distr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. (x \\<le> y) = (x \\<squnion> y = y)\n 2. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "apply (simp add: le_iff_sup)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> x \\<noteq> y)", "by auto"], ["", "context near_quantale\nbegin"], ["", "lemma fres_curry: \"(z \\<leftarrow> y) \\<leftarrow> x = z \\<leftarrow> (x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<leftarrow> y \\<leftarrow> x = z \\<leftarrow> x \\<cdot> y", "by (metis eq_iff fres_canc1 fres_galois mult_assoc)"], ["", "end"], ["", "class unital_near_quantale = near_quantale + monoid_mult"], ["", "sublocale unital_near_quantale \\<subseteq> nsrnqo: near_dioid_one \"(\\<squnion>)\" \"(\\<cdot>)\" \"1\"\"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.near_dioid_one (\\<squnion>) (\\<cdot>) (1::'a) (\\<le>) (<)", "by (unfold_locales, simp_all)"], ["", "context unital_near_quantale\nbegin"], ["", "definition iter :: \"'a \\<Rightarrow> 'a\" where\n  \"iter x \\<equiv> \\<Sqinter>i. x ^ i\""], ["", "lemma iter_ref [simp]: \"iter x \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iter x \\<le> (1::'a)", "by (metis iter_def Inf_lower power.power_0 rangeI)"], ["", "lemma le_top: \"x \\<le> \\<top> \\<cdot> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<le> \\<top> \\<cdot> x", "by (metis mult.left_neutral mult_isor top_greatest)"], ["", "lemma top_times_top [simp]: \"\\<top> \\<cdot> \\<top> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<top> \\<cdot> \\<top> = \\<top>", "by (simp add: le_top top_le)"], ["", "lemma bres_one: \"1 \\<le> x \\<rightarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> x \\<rightarrow> x", "by (simp add: bres_galois_imp)"], ["", "lemma fres_one: \"1 \\<le> x \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> x \\<leftarrow> x", "using fres_galois"], ["proof (prove)\nusing this:\n  (?x \\<cdot> ?y \\<le> ?z) = (?x \\<le> ?z \\<leftarrow> ?y)\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> x \\<leftarrow> x", "by fastforce"], ["", "end"], ["", "class pre_quantale = proto_pre_quantale + semigroup_mult \n\nbegin"], ["", "subclass near_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.near_quantale (\\<cdot>) Inf Sup (\\<sqinter>) (\\<le>) (<)\n     (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "lemma fres_interchange: \"z \\<cdot> (x \\<leftarrow> y) \\<le> (z \\<cdot> x) \\<leftarrow> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<cdot> (x \\<leftarrow> y) \\<le> z \\<cdot> x \\<leftarrow> y", "using Sup_upper fres_canc1 fres_def mult_isol mult_assoc"], ["proof (prove)\nusing this:\n  ?x \\<in> ?A \\<Longrightarrow> ?x \\<le> \\<Squnion> ?A\n  (?y \\<leftarrow> ?x) \\<cdot> ?x \\<le> ?y\n  ?z \\<leftarrow> ?y = \\<Squnion> {x. x \\<cdot> ?y \\<le> ?z}\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. z \\<cdot> (x \\<leftarrow> y) \\<le> z \\<cdot> x \\<leftarrow> y", "by fastforce"], ["", "end"], ["", "sublocale pre_quantale \\<subseteq>  psrpq: pre_dioid \"(\\<squnion>)\" \"(\\<cdot>)\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.pre_dioid (\\<squnion>) (\\<cdot>) (\\<le>) (<)", "by (unfold_locales, simp add: mult_isol)"], ["", "class unital_pre_quantale = pre_quantale + monoid_mult\n\nbegin"], ["", "subclass unital_near_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_near_quantale (1::'a) (\\<cdot>) Inf Sup (\\<sqinter>)\n     (\\<le>) (<) (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "text \\<open>Abstract rules of Hoare logic without the star can be derived.\\<close>"], ["", "lemma h_w1: \"x \\<le> x' \\<Longrightarrow>  x' \\<cdot> y \\<le> z \\<Longrightarrow> x \\<cdot> y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<le> x'; x' \\<cdot> y \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<le> z", "by (simp add: fres_galois)"], ["", "lemma h_w2: \"x \\<cdot> y \\<le> z' \\<Longrightarrow> z' \\<le> z \\<Longrightarrow> x \\<cdot> y \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> y \\<le> z'; z' \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<le> z", "using order_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<le> ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x \\<le> ?z\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> y \\<le> z'; z' \\<le> z\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<le> z", "by blast"], ["", "lemma h_seq: \"x \\<cdot> v \\<le> z \\<Longrightarrow> y \\<cdot> w \\<le> v \\<Longrightarrow> x \\<cdot> y \\<cdot> w \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> v \\<le> z; y \\<cdot> w \\<le> v\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<cdot> w \\<le> z", "using dual_order.trans mult_isol mult_assoc"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<le> ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c \\<le> ?a\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<cdot> ?x \\<le> ?z \\<cdot> ?y\n  ?a \\<cdot> ?b \\<cdot> ?c = ?a \\<cdot> (?b \\<cdot> ?c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> v \\<le> z; y \\<cdot> w \\<le> v\\<rbrakk>\n    \\<Longrightarrow> x \\<cdot> y \\<cdot> w \\<le> z", "by presburger"], ["", "lemma h_sup: \"x \\<cdot> w \\<le> z \\<Longrightarrow> y \\<cdot> w \\<le> z \\<Longrightarrow> (x \\<squnion> y) \\<cdot> w \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<cdot> w \\<le> z; y \\<cdot> w \\<le> z\\<rbrakk>\n    \\<Longrightarrow> (x \\<squnion> y) \\<cdot> w \\<le> z", "by (simp add: fres_galois)"], ["", "lemma h_Sup: \"\\<forall>x \\<in> X. x \\<cdot> w \\<le> z \\<Longrightarrow> \\<Squnion>X \\<cdot> w \\<le> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>X. x \\<cdot> w \\<le> z \\<Longrightarrow>\n    \\<Squnion> X \\<cdot> w \\<le> z", "by (simp add: Sup_least fres_galois)"], ["", "end"], ["", "sublocale unital_pre_quantale \\<subseteq>  psrpqo: pre_dioid_one \"(\\<squnion>)\" \"(\\<cdot>)\" \"1\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.pre_dioid_one (\\<squnion>) (\\<cdot>) (1::'a) (\\<le>) (<)", ".."], ["", "class weak_quantale = weak_proto_quantale + semigroup_mult\n\nbegin"], ["", "subclass pre_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.pre_quantale (\\<cdot>) Inf Sup (\\<sqinter>) (\\<le>) (<)\n     (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "text \\<open>The following counterexample shows an important consequence of weakness: \nthe absence of right annihilation.\\<close>"], ["", "lemma \"x \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<bottom> = \\<bottom>", "(*nitpick[expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<bottom> = \\<bottom>", "oops"], ["", "end"], ["", "class unital_weak_quantale = weak_quantale + monoid_mult"], ["", "lemma (in unital_weak_quantale) \"x \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<bottom> = \\<bottom>", "(*nitpick[expect=genuine]*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<bottom> = \\<bottom>", "oops"], ["", "subclass (in unital_weak_quantale) unital_pre_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_pre_quantale (1::'a) (\\<cdot>) Inf Sup (\\<sqinter>) (\\<le>)\n     (<) (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "sublocale unital_weak_quantale \\<subseteq>  wswq: dioid_one_zerol \"(\\<squnion>)\" \"(\\<cdot>)\" \"1\" \"\\<bottom>\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.dioid_one_zerol (\\<squnion>) (\\<cdot>) (1::'a) \\<bottom> (\\<le>)\n     (<)", "by (unfold_locales, simp_all add: sup_distl)"], ["", "class quantale = proto_quantale + semigroup_mult \n  \nbegin"], ["", "subclass weak_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.weak_quantale (\\<cdot>) Inf Sup (\\<sqinter>) (\\<le>) (<)\n     (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "lemma Inf_subdistl: \"x \\<cdot> \\<Sqinter>Y \\<le> (\\<Sqinter>y \\<in> Y. x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> \\<Sqinter> Y \\<le> \\<Sqinter> ((\\<cdot>) x ` Y)", "by (auto intro!: Inf_greatest Inf_lower mult_isol)"], ["", "lemma Inf_subdistr: \"\\<Sqinter> X \\<cdot> y \\<le> (\\<Sqinter>x \\<in> X. x \\<cdot> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> X \\<cdot> y \\<le> (\\<Sqinter>x\\<in>X. x \\<cdot> y)", "by (auto intro!: Inf_greatest Inf_lower mult_isor)"], ["", "lemma fres_bot_bot [simp]: \"\\<bottom> \\<leftarrow> \\<bottom> = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<bottom> \\<leftarrow> \\<bottom> = \\<top>", "by (simp add: fres_def)"], ["", "lemma bres_interchange: \"(x \\<rightarrow> y) \\<cdot> z \\<le> x \\<rightarrow> (y \\<cdot> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<rightarrow> y) \\<cdot> z \\<le> x \\<rightarrow> y \\<cdot> z", "by (metis bres_canc1 bres_galois mult_isor mult_assoc)"], ["", "lemma bres_curry: \"x \\<rightarrow> (y \\<rightarrow> z) = (y \\<cdot> x) \\<rightarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<rightarrow> z = y \\<cdot> x \\<rightarrow> z", "by (metis bres_canc1 bres_galois dual_order.antisym mult_assoc)"], ["", "lemma fres_bres: \"x \\<rightarrow> (y \\<leftarrow> z) = (x \\<rightarrow> y) \\<leftarrow> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "have \"(w \\<le> x \\<rightarrow> (y \\<leftarrow> z)) = (x \\<cdot> w \\<le> y \\<leftarrow> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n    (x \\<cdot> w \\<le> y \\<leftarrow> z)", "by (simp add: bres_galois)"], ["proof (state)\nthis:\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (x \\<cdot> w \\<le> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "also"], ["proof (state)\nthis:\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (x \\<cdot> w \\<le> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "have \"... = (x \\<cdot> w \\<cdot> z \\<le> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> w \\<le> y \\<leftarrow> z) = (x \\<cdot> w \\<cdot> z \\<le> y)", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  (x \\<cdot> w \\<le> y \\<leftarrow> z) = (x \\<cdot> w \\<cdot> z \\<le> y)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "also"], ["proof (state)\nthis:\n  (x \\<cdot> w \\<le> y \\<leftarrow> z) = (x \\<cdot> w \\<cdot> z \\<le> y)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "have \"... = (w \\<cdot> z \\<le> x \\<rightarrow> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<cdot> w \\<cdot> z \\<le> y) = (w \\<cdot> z \\<le> x \\<rightarrow> y)", "by (simp add: bres_galois mult_assoc)"], ["proof (state)\nthis:\n  (x \\<cdot> w \\<cdot> z \\<le> y) = (w \\<cdot> z \\<le> x \\<rightarrow> y)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "also"], ["proof (state)\nthis:\n  (x \\<cdot> w \\<cdot> z \\<le> y) = (w \\<cdot> z \\<le> x \\<rightarrow> y)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "have \"... = (w \\<le> (x \\<rightarrow> y) \\<leftarrow> z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (w \\<cdot> z \\<le> x \\<rightarrow> y) =\n    (w \\<le> x \\<rightarrow> y \\<leftarrow> z)", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  (w \\<cdot> z \\<le> x \\<rightarrow> y) =\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "finally"], ["proof (chain)\npicking this:\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z)", "have \"(w \\<le> x \\<rightarrow> (y \\<leftarrow> z)) = (w \\<le> (x \\<rightarrow> y) \\<leftarrow> z)\""], ["proof (prove)\nusing this:\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n    (w \\<le> x \\<rightarrow> y \\<leftarrow> z)", "."], ["proof (state)\nthis:\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (w \\<le> x \\<rightarrow> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "}"], ["proof (state)\nthis:\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "thus ?thesis"], ["proof (prove)\nusing this:\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "using eq_iff"], ["proof (prove)\nusing this:\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z) =\n  (?w2 \\<le> x \\<rightarrow> y \\<leftarrow> z)\n  (?x = ?y) = (?x \\<le> ?y \\<and> ?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z", "by blast"], ["proof (state)\nthis:\n  x \\<rightarrow> y \\<leftarrow> z = x \\<rightarrow> y \\<leftarrow> z\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class quantale_with_dual = quantale + complete_lattice_with_dual"], ["", "class unital_quantale = quantale + monoid_mult"], ["", "class unital_quantale_with_dual = unital_quantale + quantale_with_dual"], ["", "subclass (in unital_quantale) unital_weak_quantale"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_weak_quantale (1::'a) (\\<cdot>) Inf Sup (\\<sqinter>)\n     (\\<le>) (<) (\\<squnion>) \\<bottom> \\<top>", ".."], ["", "sublocale unital_quantale \\<subseteq> wswq: dioid_one_zero \"(\\<squnion>)\" \"(\\<cdot>)\" \"1\" \"\\<bottom>\" \"(\\<le>)\" \"(<)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.dioid_one_zero (\\<squnion>) (\\<cdot>) (1::'a) \\<bottom> (\\<le>)\n     (<)", "by (unfold_locales, simp)"], ["", "class ab_quantale = quantale + ab_semigroup_mult\n\nbegin"], ["", "lemma bres_fres_eq: \"x \\<rightarrow> y = y \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y = y \\<leftarrow> x", "by (simp add: fres_def bres_def mult_commute)"], ["", "end"], ["", "class ab_unital_quantale = ab_quantale + unital_quantale"], ["", "sublocale complete_heyting_algebra \\<subseteq> chaq: ab_unital_quantale \"(\\<sqinter>)\" _ _ _ _ _ _ _ _ \\<top>"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.ab_unital_quantale (\\<sqinter>) Inf Sup (\\<sqinter>) (\\<le>) (<)\n     (\\<squnion>) \\<bottom> \\<top> \\<top>", "by (unfold_locales, simp add: inf.assoc, simp_all add: inf.assoc ch_dist inf.commute)"], ["", "class distrib_quantale = quantale + distrib_lattice"], ["", "class bool_quantale = quantale + complete_boolean_algebra_alt"], ["", "class distrib_unital_quantale = unital_quantale + distrib_lattice"], ["", "class bool_unital_quantale = unital_quantale + complete_boolean_algebra_alt"], ["", "class distrib_ab_quantale = distrib_quantale + ab_quantale"], ["", "class bool_ab_quantale = bool_quantale + ab_quantale"], ["", "class distrib_ab_unital_quantale = distrib_quantale + unital_quantale"], ["", "class bool_ab_unital_quantale = bool_ab_quantale + unital_quantale"], ["", "sublocale complete_boolean_algebra \\<subseteq> cba_quantale: bool_ab_unital_quantale inf _ _ _ _ _ _ _ _ _ _ \\<top>"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.bool_ab_unital_quantale (\\<sqinter>) Inf Sup (\\<sqinter>) (\\<le>)\n     (<) (\\<squnion>) \\<bottom> \\<top> (-) uminus \\<top>", "by (unfold_locales, simp add: inf.assoc, simp_all add: inf.commute Setcompr_eq_image inf_Sup Sup_inf)"], ["", "context complete_boolean_algebra\nbegin"], ["", "text \\<open>In this setting, residuation is classical implication.\\<close>"], ["", "lemma cba_bres1: \"x \\<sqinter> y \\<le> z \\<longleftrightarrow> x \\<le> cba_quantale.bres y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<sqinter> y \\<le> z) =\n    (x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) y z)", "using cba_quantale.bres_galois inf.commute"], ["proof (prove)\nusing this:\n  (?x \\<sqinter> ?y \\<le> ?z) =\n  (?y \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) ?x ?z)\n  ?a \\<sqinter> ?b = ?b \\<sqinter> ?a\n\ngoal (1 subgoal):\n 1. (x \\<sqinter> y \\<le> z) =\n    (x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) y z)", "by fastforce"], ["", "lemma cba_bres2: \"x \\<le> -y \\<squnion> z \\<longleftrightarrow> x \\<le> cba_quantale.bres y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<le> - y \\<squnion> z) =\n    (x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) y z)", "using cba_bres1 shunt1"], ["proof (prove)\nusing this:\n  (?x \\<sqinter> ?y \\<le> ?z) =\n  (?x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) ?y ?z)\n  (?x \\<sqinter> ?y \\<le> ?z) = (?x \\<le> - ?y \\<squnion> ?z)\n\ngoal (1 subgoal):\n 1. (x \\<le> - y \\<squnion> z) =\n    (x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) y z)", "by auto"], ["", "lemma cba_bres_prop: \"cba_quantale.bres x y = -x \\<squnion> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) x y = - x \\<squnion> y", "using cba_bres2 eq_iff"], ["proof (prove)\nusing this:\n  (?x \\<le> - ?y \\<squnion> ?z) =\n  (?x \\<le> proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) ?y ?z)\n  (?x = ?y) = (?x \\<le> ?y \\<and> ?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. proto_near_quantale.bres Sup (\\<le>) (\\<sqinter>) x y = - x \\<squnion> y", "by blast"], ["", "end"], ["", "subsection \\<open>Quantales Based on Sup-Lattices and Inf-Lattices\\<close>"], ["", "text \\<open>These classes are defined for convenience in instantiation and interpretation proofs, or likewise. \nThey are useful, e.g., in the context of predicate transformers, where only one of Sup or Inf may be well behaved.\\<close>"], ["", "class Sup_quantale = Sup_lattice + semigroup_mult + \n  assumes Supq_distr: \"\\<Squnion>X \\<cdot> y = (\\<Squnion>x \\<in> X. x \\<cdot> y)\"\n  and Supq_distl: \"x \\<cdot> \\<Squnion>Y = (\\<Squnion>y \\<in> Y. x \\<cdot> y)\""], ["", "class unital_Sup_quantale = Sup_quantale + monoid_mult"], ["", "class Inf_quantale = Inf_lattice + monoid_mult + \n  assumes Supq_distr: \"\\<Sqinter>X \\<cdot> y = (\\<Sqinter>x \\<in> X. x \\<cdot> y)\"\n  and Supq_distl: \"x \\<cdot> \\<Sqinter>Y = (\\<Sqinter>y \\<in> Y. x \\<cdot> y)\""], ["", "class unital_Inf_quantale = Inf_quantale + monoid_mult"], ["", "sublocale Inf_quantale \\<subseteq> qdual: Sup_quantale _ Inf \"(\\<ge>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.Sup_quantale (\\<cdot>) Inf (\\<lambda>x y. y \\<le> x)", "by (unfold_locales, simp_all add: Supq_distr Supq_distl)"], ["", "sublocale unital_Inf_quantale \\<subseteq> uqdual: unital_Sup_quantale _ _ Inf  \"(\\<ge>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_Sup_quantale (1::'a) (\\<cdot>) Inf\n     (\\<lambda>x y. y \\<le> x)", ".."], ["", "sublocale Sup_quantale \\<subseteq> supq: quantale _ Infs Sup_class.Sup infs \"(\\<le>)\" le sups bots tops"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.quantale (\\<cdot>) Infs Sup infs (\\<le>) le sups bots tops", "by (unfold_locales, simp_all add: Supq_distr Supq_distl)"], ["", "sublocale unital_Sup_quantale \\<subseteq> usupq: unital_quantale _ _ Infs Sup_class.Sup infs \"(\\<le>)\" le sups bots tops"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_quantale (1::'a) (\\<cdot>) Infs Sup infs (\\<le>) le sups\n     bots tops", ".."], ["", "subsection \\<open>Products of Quantales\\<close>"], ["", "definition \"Inf_prod X = ((\\<Sqinter>x \\<in> X. fst x), (\\<Sqinter>x \\<in> X. snd x))\""], ["", "definition \"inf_prod x y = (fst x \\<sqinter> fst y, snd x \\<sqinter> snd y)\""], ["", "definition \"bot_prod = (bot,bot)\""], ["", "definition \"Sup_prod X = ((\\<Squnion>x \\<in> X. fst x), (\\<Squnion>x \\<in> X. snd x))\""], ["", "definition \"sup_prod x y = (fst x \\<squnion> fst y, snd x \\<squnion> snd y)\""], ["", "definition \"top_prod = (top,top)\""], ["", "definition \"less_eq_prod x y \\<equiv> less_eq (fst x) (fst y) \\<and> less_eq (snd x) (snd y)\""], ["", "definition \"less_prod x y \\<equiv> less_eq (fst x) (fst y) \\<and> less_eq (snd x) (snd y) \\<and> x \\<noteq> y\""], ["", "definition \"times_prod' x y = (fst x \\<cdot> fst y, snd x \\<cdot> snd y)\""], ["", "definition \"one_prod = (1,1)\""], ["", "definition \"dual_prod x = (\\<partial> (fst x),\\<partial> (snd x))\""], ["", "interpretation prod: complete_lattice Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod \"top_prod :: ('a::complete_lattice \\<times> 'b::complete_lattice)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.complete_lattice Inf_prod Sup_prod inf_prod less_eq_prod less_prod\n     sup_prod bot_prod top_prod", "by standard (auto simp add: Inf_prod_def Sup_prod_def inf_prod_def sup_prod_def bot_prod_def top_prod_def less_eq_prod_def less_prod_def Sup_distl Sup_distr intro: Inf_lower Inf_greatest Sup_upper Sup_least)"], ["", "interpretation prod: complete_lattice_with_dual Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod \"top_prod :: ('a::complete_lattice_with_dual \\<times> 'b::complete_lattice_with_dual)\" dual_prod"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.complete_lattice_with_dual Inf_prod Sup_prod inf_prod less_eq_prod\n     less_prod sup_prod bot_prod top_prod dual_prod", "by standard (simp_all add: dual_prod_def fun_eq_iff inj_def Sup_prod_def Inf_prod_def inj_dual_iff Sup_dual_def_var image_comp)"], ["", "interpretation prod: proto_near_quantale Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod \"top_prod :: ('a::proto_near_quantale \\<times> 'b::proto_near_quantale)\" times_prod'"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.proto_near_quantale Inf_prod Sup_prod inf_prod less_eq_prod\n     less_prod sup_prod bot_prod top_prod times_prod'", "by standard (simp add: times_prod'_def Sup_prod_def Sup_distr image_comp)"], ["", "interpretation prod: proto_quantale Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod \"top_prod :: ('a::proto_quantale \\<times> 'b::proto_quantale)\" times_prod'"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.proto_quantale Inf_prod Sup_prod inf_prod less_eq_prod less_prod\n     sup_prod bot_prod top_prod times_prod'", "by standard (simp add: times_prod'_def Sup_prod_def less_eq_prod_def Sup_distl image_comp)"], ["", "interpretation prod: unital_quantale one_prod times_prod' Inf_prod Sup_prod inf_prod less_eq_prod less_prod sup_prod bot_prod \"top_prod :: ('a::unital_quantale \\<times> 'b::unital_quantale)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. class.unital_quantale one_prod times_prod' Inf_prod Sup_prod inf_prod\n     less_eq_prod less_prod sup_prod bot_prod top_prod", "by standard (simp_all add: one_prod_def times_prod'_def ac_simps image_comp)"], ["", "subsection \\<open>Quantale Morphisms\\<close>"], ["", "text \\<open>There are various ways of defining quantale morphisms, depending on the application. Following Rosenthal, \nI present the most important one.\\<close>"], ["", "abbreviation comp_pres :: \"('a::times \\<Rightarrow> 'b::times) \\<Rightarrow> bool\" where\n  \"comp_pres f \\<equiv> (\\<forall>x y. f (x \\<cdot> y) = f x \\<cdot> f y)\""], ["", "abbreviation un_pres :: \"('a::one \\<Rightarrow> 'b::one) \\<Rightarrow> bool\" where\n  \"un_pres f \\<equiv> (f 1 = 1)\""], ["", "definition \"comp_closed_set X = (\\<forall>x \\<in> X. \\<forall>y \\<in> X. x \\<cdot> y \\<in> X)\""], ["", "definition \"un_closed_set X = (1 \\<in> X)\""], ["", "definition quantale_homset :: \"('a::quantale \\<Rightarrow> 'b::quantale) set\" where\n  \"quantale_homset = {f. comp_pres f \\<and> Sup_pres f}\""], ["", "lemma quantale_homset_iff: \"f \\<in> quantale_homset = (comp_pres f \\<and> Sup_pres f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> quantale_homset) = (comp_pres f \\<and> Sup_pres f)", "unfolding quantale_homset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. comp_pres f \\<and> Sup_pres f}) =\n    (comp_pres f \\<and> Sup_pres f)", "by clarsimp"], ["", "definition unital_quantale_homset :: \"('a::unital_quantale \\<Rightarrow> 'b::unital_quantale) set\" where\n  \"unital_quantale_homset = {f. comp_pres f \\<and> Sup_pres f \\<and> un_pres f}\""], ["", "lemma unital_quantale_homset_iff: \"f \\<in> unital_quantale_homset = (comp_pres f \\<and> Sup_pres f \\<and> un_pres f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> unital_quantale_homset) =\n    (comp_pres f \\<and> Sup_pres f \\<and> un_pres f)", "unfolding unital_quantale_homset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. comp_pres f \\<and> Sup_pres f \\<and> un_pres f}) =\n    (comp_pres f \\<and> Sup_pres f \\<and> un_pres f)", "by clarsimp"], ["", "text \\<open>Though Infs can be defined from Sups in any quantale, quantale morphisms do not generally preserve Infs.\nA different kind of morphism is needed if this is to be guaranteed.\\<close>"], ["", "lemma \"f \\<in> quantale_homset \\<Longrightarrow> Inf_pres f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> Inf_pres f", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> Inf_pres f", "oops"], ["", "text \\<open>The images of quantale morphisms are closed under compositions and Sups, hence they form quantales.\\<close>"], ["", "lemma quantale_hom_q_pres: \"f \\<in> quantale_homset \\<Longrightarrow> Sup_closed_set (range f) \\<and> comp_closed_set (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    Sup_closed_set (range f) \\<and> comp_closed_set (range f)", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. f \\<in> quantale_homset \\<Longrightarrow> Sup_closed_set (range f)\n 2. f \\<in> quantale_homset \\<Longrightarrow> comp_closed_set (range f)", "apply (simp add: Sup_pres_Sup_closed quantale_homset_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> comp_closed_set (range f)", "unfolding quantale_homset_iff comp_closed_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_pres f \\<and> Sup_pres f \\<Longrightarrow>\n    \\<forall>x\\<in>range f.\n       \\<forall>y\\<in>range f. x \\<cdot> y \\<in> range f", "by (metis (no_types, lifting) imageE range_eqI)"], ["", "text \\<open>Yet the image need not be Inf-closed.\\<close>"], ["", "lemma \"f \\<in> quantale_homset \\<Longrightarrow> Inf_closed_set (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> Inf_closed_set (range f)", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> Inf_closed_set (range f)", "oops"], ["", "text \\<open>Of course Sups are preserved by quantale-morphisms, hence they are the same in subsets as in the original set.\nInfs in the subset, however, exist, since they subset forms a quantale in which Infs can be defined, but these are generally\ndifferent from the Infs in the superstructure. \n\nThis fact is hidden in Isabelle's definition of complete lattices, where Infs are axiomatised. There is no easy way in general to\nshow that images of quantale morphisms form quantales, though the statement for Sup-quantales is straightforward. I show this for quantic nuclei \nand left-sided elements.\\<close>"], ["", "typedef (overloaded) ('a,'b) quantale_homset = \"quantale_homset::('a::quantale \\<Rightarrow> 'b::quantale) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "have a: \"comp_pres (\\<lambda>x::'a::quantale. bot::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. \\<bottom> = \\<bottom> \\<cdot> \\<bottom>", "by simp"], ["proof (state)\nthis:\n  \\<forall>x y. \\<bottom> = \\<bottom> \\<cdot> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "have b: \"Sup_pres (\\<lambda>x::'a::quantale. bot::'b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup_pres (\\<lambda>x. \\<bottom>)", "unfolding fun_eq_iff comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x. \\<bottom> = (\\<Squnion>x\\<in>x. \\<bottom>)", "by simp"], ["proof (state)\nthis:\n  Sup_pres (\\<lambda>x. \\<bottom>)\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "hence \"(\\<lambda>x::'a::quantale. bot::'b) \\<in> quantale_homset\""], ["proof (prove)\nusing this:\n  Sup_pres (\\<lambda>x. \\<bottom>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. \\<bottom>) \\<in> quantale_homset", "by (simp add: quantale_homset_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x. \\<bottom>) \\<in> quantale_homset\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. \\<bottom>) \\<in> quantale_homset\n\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> quantale_homset", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. x \\<in> quantale_homset\n\ngoal:\nNo subgoals!", "qed"], ["", "setup_lifting type_definition_quantale_homset"], ["", "text \\<open>Interestingly, the following type is not (gobally) inhabited.\\<close>"], ["", "typedef (overloaded) ('a,'b) unital_quantale_homset = \"unital_quantale_homset::('a::unital_quantale \\<Rightarrow> 'b::unital_quantale) set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> unital_quantale_homset", "(*nitpick*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> unital_quantale_homset", "oops"], ["", "lemma quantale_hom_radj: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> f \\<stileturn> radj f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow> f \\<stileturn> radj f", "unfolding quantale_homset_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. comp_pres f \\<and> Sup_pres f \\<Longrightarrow> f \\<stileturn> radj f", "by (simp add: Sup_pres_ladj_aux)"], ["", "lemma quantale_hom_prop1: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "assume h: \"f \\<in> quantale_homset\""], ["proof (state)\nthis:\n  f \\<in> quantale_homset\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "have \"f x \\<cdot> f (radj f (f x \\<rightarrow> y)) \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<cdot> f (radj f (f x \\<rightarrow> y)) \\<le> y", "by (meson h adj_def bres_galois order_refl quantale_hom_radj)"], ["proof (state)\nthis:\n  f x \\<cdot> f (radj f (f x \\<rightarrow> y)) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence \"f (x \\<cdot> radj f (f x \\<rightarrow> y)) \\<le> y\""], ["proof (prove)\nusing this:\n  f x \\<cdot> f (radj f (f x \\<rightarrow> y)) \\<le> y\n\ngoal (1 subgoal):\n 1. f (x \\<cdot> radj f (f x \\<rightarrow> y)) \\<le> y", "by (metis h quantale_homset_iff)"], ["proof (state)\nthis:\n  f (x \\<cdot> radj f (f x \\<rightarrow> y)) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence \"x \\<cdot> radj f (f x \\<rightarrow> y) \\<le> radj f y\""], ["proof (prove)\nusing this:\n  f (x \\<cdot> radj f (f x \\<rightarrow> y)) \\<le> y\n\ngoal (1 subgoal):\n 1. x \\<cdot> radj f (f x \\<rightarrow> y) \\<le> radj f y", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  f (x \\<cdot> radj f (f x \\<rightarrow> y)) \\<le> y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. x \\<cdot> radj f (f x \\<rightarrow> y) \\<le> radj f y", "by blast"], ["proof (state)\nthis:\n  x \\<cdot> radj f (f x \\<rightarrow> y) \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence le: \"radj f (f x \\<rightarrow> y) \\<le> x \\<rightarrow> radj f y\""], ["proof (prove)\nusing this:\n  x \\<cdot> radj f (f x \\<rightarrow> y) \\<le> radj f y\n\ngoal (1 subgoal):\n 1. radj f (f x \\<rightarrow> y) \\<le> x \\<rightarrow> radj f y", "by (simp add: bres_galois)"], ["proof (state)\nthis:\n  radj f (f x \\<rightarrow> y) \\<le> x \\<rightarrow> radj f y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "have \"x \\<cdot> (x \\<rightarrow> radj f y) \\<le> radj f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> (x \\<rightarrow> radj f y) \\<le> radj f y", "by (simp add: bres_canc1)"], ["proof (state)\nthis:\n  x \\<cdot> (x \\<rightarrow> radj f y) \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence  \"f (x \\<cdot> (x \\<rightarrow> radj f y)) \\<le> y\""], ["proof (prove)\nusing this:\n  x \\<cdot> (x \\<rightarrow> radj f y) \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f (x \\<cdot> (x \\<rightarrow> radj f y)) \\<le> y", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  x \\<cdot> (x \\<rightarrow> radj f y) \\<le> radj f y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. f (x \\<cdot> (x \\<rightarrow> radj f y)) \\<le> y", "by blast"], ["proof (state)\nthis:\n  f (x \\<cdot> (x \\<rightarrow> radj f y)) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence \"f x \\<cdot> f (x \\<rightarrow> radj f y) \\<le> y\""], ["proof (prove)\nusing this:\n  f (x \\<cdot> (x \\<rightarrow> radj f y)) \\<le> y\n\ngoal (1 subgoal):\n 1. f x \\<cdot> f (x \\<rightarrow> radj f y) \\<le> y", "by (metis h quantale_homset_iff)"], ["proof (state)\nthis:\n  f x \\<cdot> f (x \\<rightarrow> radj f y) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence \"f (x \\<rightarrow> radj f y) \\<le> f x \\<rightarrow> y\""], ["proof (prove)\nusing this:\n  f x \\<cdot> f (x \\<rightarrow> radj f y) \\<le> y\n\ngoal (1 subgoal):\n 1. f (x \\<rightarrow> radj f y) \\<le> f x \\<rightarrow> y", "by (simp add: bres_galois)"], ["proof (state)\nthis:\n  f (x \\<rightarrow> radj f y) \\<le> f x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "hence \"x \\<rightarrow> radj f y \\<le> radj f (f x \\<rightarrow> y)\""], ["proof (prove)\nusing this:\n  f (x \\<rightarrow> radj f y) \\<le> f x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> radj f y \\<le> radj f (f x \\<rightarrow> y)", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  f (x \\<rightarrow> radj f y) \\<le> f x \\<rightarrow> y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> radj f y \\<le> radj f (f x \\<rightarrow> y)", "by blast"], ["proof (state)\nthis:\n  x \\<rightarrow> radj f y \\<le> radj f (f x \\<rightarrow> y)\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<rightarrow> radj f y \\<le> radj f (f x \\<rightarrow> y)\n\ngoal (1 subgoal):\n 1. radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y", "by (simp add: dual_order.antisym le)"], ["proof (state)\nthis:\n  radj f (f x \\<rightarrow> y) = x \\<rightarrow> radj f y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma quantale_hom_prop2: \n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"f \\<in> quantale_homset \\<Longrightarrow> radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "assume h: \"f \\<in> quantale_homset\""], ["proof (state)\nthis:\n  f \\<in> quantale_homset\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "have \"f (radj f (y \\<leftarrow> f x)) \\<cdot> f x \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (radj f (y \\<leftarrow> f x)) \\<cdot> f x \\<le> y", "by (meson adj_def fres_galois h order_refl quantale_hom_radj)"], ["proof (state)\nthis:\n  f (radj f (y \\<leftarrow> f x)) \\<cdot> f x \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence \"f (radj f (y \\<leftarrow> f x) \\<cdot> x) \\<le> y\""], ["proof (prove)\nusing this:\n  f (radj f (y \\<leftarrow> f x)) \\<cdot> f x \\<le> y\n\ngoal (1 subgoal):\n 1. f (radj f (y \\<leftarrow> f x) \\<cdot> x) \\<le> y", "by (metis h quantale_homset_iff)"], ["proof (state)\nthis:\n  f (radj f (y \\<leftarrow> f x) \\<cdot> x) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence \"radj f (y \\<leftarrow> f x) \\<cdot> x\\<le> radj f y\""], ["proof (prove)\nusing this:\n  f (radj f (y \\<leftarrow> f x) \\<cdot> x) \\<le> y\n\ngoal (1 subgoal):\n 1. radj f (y \\<leftarrow> f x) \\<cdot> x \\<le> radj f y", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  f (radj f (y \\<leftarrow> f x) \\<cdot> x) \\<le> y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. radj f (y \\<leftarrow> f x) \\<cdot> x \\<le> radj f y", "by blast"], ["proof (state)\nthis:\n  radj f (y \\<leftarrow> f x) \\<cdot> x \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence le: \"radj f (y \\<leftarrow> f x) \\<le> radj f y \\<leftarrow> x\""], ["proof (prove)\nusing this:\n  radj f (y \\<leftarrow> f x) \\<cdot> x \\<le> radj f y\n\ngoal (1 subgoal):\n 1. radj f (y \\<leftarrow> f x) \\<le> radj f y \\<leftarrow> x", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  radj f (y \\<leftarrow> f x) \\<le> radj f y \\<leftarrow> x\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "have \"(radj f y \\<leftarrow> x) \\<cdot> x \\<le> radj f y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (radj f y \\<leftarrow> x) \\<cdot> x \\<le> radj f y", "by (simp add: fres_canc1)"], ["proof (state)\nthis:\n  (radj f y \\<leftarrow> x) \\<cdot> x \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence  \"f ((radj f y \\<leftarrow> x) \\<cdot> x) \\<le> y\""], ["proof (prove)\nusing this:\n  (radj f y \\<leftarrow> x) \\<cdot> x \\<le> radj f y\n\ngoal (1 subgoal):\n 1. f ((radj f y \\<leftarrow> x) \\<cdot> x) \\<le> y", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  (radj f y \\<leftarrow> x) \\<cdot> x \\<le> radj f y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. f ((radj f y \\<leftarrow> x) \\<cdot> x) \\<le> y", "by blast"], ["proof (state)\nthis:\n  f ((radj f y \\<leftarrow> x) \\<cdot> x) \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence \"f (radj f y \\<leftarrow> x) \\<cdot> f x\\<le> y\""], ["proof (prove)\nusing this:\n  f ((radj f y \\<leftarrow> x) \\<cdot> x) \\<le> y\n\ngoal (1 subgoal):\n 1. f (radj f y \\<leftarrow> x) \\<cdot> f x \\<le> y", "by (metis h quantale_homset_iff)"], ["proof (state)\nthis:\n  f (radj f y \\<leftarrow> x) \\<cdot> f x \\<le> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence \"f (radj f y \\<leftarrow> x) \\<le> y \\<leftarrow> f x\""], ["proof (prove)\nusing this:\n  f (radj f y \\<leftarrow> x) \\<cdot> f x \\<le> y\n\ngoal (1 subgoal):\n 1. f (radj f y \\<leftarrow> x) \\<le> y \\<leftarrow> f x", "by (simp add: fres_galois)"], ["proof (state)\nthis:\n  f (radj f y \\<leftarrow> x) \\<le> y \\<leftarrow> f x\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "hence \"radj f y \\<leftarrow> x\\<le> radj f (y \\<leftarrow> f x)\""], ["proof (prove)\nusing this:\n  f (radj f y \\<leftarrow> x) \\<le> y \\<leftarrow> f x\n\ngoal (1 subgoal):\n 1. radj f y \\<leftarrow> x \\<le> radj f (y \\<leftarrow> f x)", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  f (radj f y \\<leftarrow> x) \\<le> y \\<leftarrow> f x\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. radj f y \\<leftarrow> x \\<le> radj f (y \\<leftarrow> f x)", "by blast"], ["proof (state)\nthis:\n  radj f y \\<leftarrow> x \\<le> radj f (y \\<leftarrow> f x)\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "thus ?thesis"], ["proof (prove)\nusing this:\n  radj f y \\<leftarrow> x \\<le> radj f (y \\<leftarrow> f x)\n\ngoal (1 subgoal):\n 1. radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x", "by (simp add: dual_order.antisym le)"], ["proof (state)\nthis:\n  radj f (y \\<leftarrow> f x) = radj f y \\<leftarrow> x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition quantale_closed_maps :: \"('a::quantale \\<Rightarrow> 'b::quantale) set\" where\n  \"quantale_closed_maps = {f. (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y))}\""], ["", "lemma quantale_closed_maps_iff: \"f \\<in> quantale_closed_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> quantale_closed_maps) =\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y))", "unfolding quantale_closed_maps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. \\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)}) =\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y))", "by clarsimp"], ["", "definition quantale_closed_Sup_maps :: \"('a::quantale \\<Rightarrow> 'b::quantale) set\" where\n  \"quantale_closed_Sup_maps = {f. (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and> Sup_pres f}\""], ["", "lemma quantale_closed_Sup_maps_iff: \"f \\<in> quantale_closed_Sup_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> quantale_closed_Sup_maps) =\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f)", "unfolding quantale_closed_Sup_maps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. (\\<forall>x y.\n                     f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and>\n                 Sup_pres f}) =\n    (\\<forall>x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f)", "by clarsimp"], ["", "definition quantale_closed_unital_maps :: \"('a::unital_quantale \\<Rightarrow> 'b::unital_quantale) set\" where\n  \"quantale_closed_unital_maps = {f. (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and> 1 \\<le> f 1}\""], ["", "lemma quantale_closed_unital_maps_iff: \"f \\<in> quantale_closed_unital_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> 1 \\<le> f 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> quantale_closed_unital_maps) =\n    (\\<forall>x y.\n        f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and>\n        (1::'b) \\<le> f (1::'a))", "unfolding quantale_closed_unital_maps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. (\\<forall>x y.\n                     f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and>\n                 (1::'b) \\<le> f (1::'a)}) =\n    (\\<forall>x y.\n        f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and>\n        (1::'b) \\<le> f (1::'a))", "by clarsimp"], ["", "definition quantale_closed_unital_Sup_maps :: \"('a::unital_quantale \\<Rightarrow> 'b::unital_quantale) set\" where\n  \"quantale_closed_unital_Sup_maps = {f. (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and> Sup_pres f \\<and> 1 \\<le> f 1}\""], ["", "lemma quantale_closed_unital_Sup_maps_iff: \"f \\<in> quantale_closed_unital_Sup_maps = (\\<forall> x y. f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and> Sup_pres f \\<and> 1 \\<le> f 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> quantale_closed_unital_Sup_maps) =\n    (\\<forall>x y.\n        f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and>\n        Sup_pres f \\<and> (1::'b) \\<le> f (1::'a))", "unfolding quantale_closed_unital_Sup_maps_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<in> {f. (\\<forall>x y.\n                     f x \\<cdot> f y \\<le> f (x \\<cdot> y)) \\<and>\n                 Sup_pres f \\<and> (1::'b) \\<le> f (1::'a)}) =\n    (\\<forall>x y.\n        f x \\<cdot> f y \\<le> f (x \\<cdot> y) \\<and>\n        Sup_pres f \\<and> (1::'b) \\<le> f (1::'a))", "by clarsimp"], ["", "text \\<open>Closed maps are the right adjoints of quantale morphisms.\\<close>"], ["", "lemma quantale_hom_closed_map:\n  fixes f :: \"'a::quantale_with_dual \\<Rightarrow> 'b::quantale_with_dual\"\n  shows \"(f \\<in> quantale_homset) \\<Longrightarrow> (radj f \\<in> quantale_closed_maps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "assume h: \"f \\<in> quantale_homset\""], ["proof (state)\nthis:\n  f \\<in> quantale_homset\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "have \"\\<forall>x y. f (radj f x) \\<cdot> f (radj f y) \\<le> x \\<cdot> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y. f (radj f x) \\<cdot> f (radj f y) \\<le> x \\<cdot> y", "by (metis adj_def h order_refl psrpq.mult_isol_var quantale_hom_radj)"], ["proof (state)\nthis:\n  \\<forall>x y. f (radj f x) \\<cdot> f (radj f y) \\<le> x \\<cdot> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "hence \"\\<forall>x y. f (radj f x \\<cdot> radj f y) \\<le> x \\<cdot> y\""], ["proof (prove)\nusing this:\n  \\<forall>x y. f (radj f x) \\<cdot> f (radj f y) \\<le> x \\<cdot> y\n\ngoal (1 subgoal):\n 1. \\<forall>x y. f (radj f x \\<cdot> radj f y) \\<le> x \\<cdot> y", "by (metis h quantale_homset_iff)"], ["proof (state)\nthis:\n  \\<forall>x y. f (radj f x \\<cdot> radj f y) \\<le> x \\<cdot> y\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "hence \"\\<forall>x y. radj f x \\<cdot> radj f y \\<le> radj f (x \\<cdot> y)\""], ["proof (prove)\nusing this:\n  \\<forall>x y. f (radj f x \\<cdot> radj f y) \\<le> x \\<cdot> y\n\ngoal (1 subgoal):\n 1. \\<forall>x y. radj f x \\<cdot> radj f y \\<le> radj f (x \\<cdot> y)", "using adj_def h quantale_hom_radj"], ["proof (prove)\nusing this:\n  \\<forall>x y. f (radj f x \\<cdot> radj f y) \\<le> x \\<cdot> y\n  ?f \\<stileturn> ?g = (\\<forall>x y. (?f x \\<le> y) = (x \\<le> ?g y))\n  f \\<in> quantale_homset\n  ?f \\<in> quantale_homset \\<Longrightarrow> ?f \\<stileturn> radj ?f\n\ngoal (1 subgoal):\n 1. \\<forall>x y. radj f x \\<cdot> radj f y \\<le> radj f (x \\<cdot> y)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x y. radj f x \\<cdot> radj f y \\<le> radj f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. f \\<in> quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_maps", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x y. radj f x \\<cdot> radj f y \\<le> radj f (x \\<cdot> y)\n\ngoal (1 subgoal):\n 1. radj f \\<in> quantale_closed_maps", "by (simp add: quantale_closed_maps_iff)"], ["proof (state)\nthis:\n  radj f \\<in> quantale_closed_maps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unital_quantale_hom_closed_unital_map:\n  fixes f :: \"'a::unital_quantale_with_dual \\<Rightarrow> 'b::unital_quantale_with_dual\"\n  shows \"(f \\<in> unital_quantale_homset) \\<Longrightarrow> (radj f \\<in> quantale_closed_unital_maps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> unital_quantale_homset \\<Longrightarrow>\n    radj f \\<in> quantale_closed_unital_maps", "by (metis (no_types, hide_lams) adj_def order_refl quantale_closed_maps_iff quantale_closed_unital_maps_iff quantale_hom_closed_map quantale_hom_radj quantale_homset_iff unital_quantale_homset_iff)"], ["", "end"]]}