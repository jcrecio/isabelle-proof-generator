{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/Planarity/Planar_Complete.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma c_K5_not_comb_planar: \"\\<not>comb_planar c_K5\"", "lemma pverts_c_K5: \"pverts c_K5 = {0..4}\"", "lemma parcs_c_K5: \"parcs c_K5 = {(u,v). u \\<in> {0..4} \\<and> v \\<in> {0..4} \\<and> u \\<noteq> v}\"", "lemmas c_K5_simps = pverts_c_K5 parcs_c_K5", "lemma complete_c_K5: \"K\\<^bsub>5\\<^esub> c_K5\"", "lemma c_K33_not_comb_planar: \"\\<not>comb_planar c_K33\"", "lemma complete_c_K33: \"K\\<^bsub>3,3\\<^esub> c_K33\"", "lemma (in digraph_map) wrap_wrap_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes f: \"f \\<in> arcs G \\<rightarrow> arcs G\" and g: \"g \\<in> arcs G \\<rightarrow> arcs G\"\n  shows \"wrap_iso_arcs hom f (wrap_iso_arcs hom g x) = wrap_iso_arcs hom (f o g) x\"", "lemma (in digraph_map) face_cycle_succ_iso:\n  assumes hom: \"digraph_isomorphism hom\" \"x \\<in> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph_map.face_cycle_succ (map_iso hom) x = wrap_iso_arcs hom face_cycle_succ x\"", "lemma (in digraph_map) face_cycle_set_iso:\n  assumes hom: \"digraph_isomorphism hom\" \"x \\<in> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph_map.face_cycle_set (map_iso hom) x = iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)\"", "lemma (in digraph_map) face_cycle_sets_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom) = (\\<lambda>x. iso_arcs hom ` x) ` face_cycle_sets\"", "lemma (in digraph_map) card_face_cycle_sets_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  shows \"card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) = card face_cycle_sets\"", "lemma (in digraph_map) euler_char_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.euler_char (app_iso hom G) (map_iso hom) = euler_char\"", "lemma (in digraph_map) euler_genus_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.euler_genus (app_iso hom G) (map_iso hom) = euler_genus\"", "lemma (in wf_digraph) comb_planar_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"comb_planar (app_iso hom G) \\<longleftrightarrow> comb_planar G\"", "lemma (in loopfree_digraph) loopfree_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"loopfree_digraph (app_iso hom G)\"", "lemma (in nomulti_digraph) nomulti_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"nomulti_digraph (app_iso hom G)\"", "lemma (in pre_digraph) symmetricI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"symmetric G\"\n  shows \"symmetric (app_iso hom G)\"", "lemma (in sym_digraph) sym_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"sym_digraph (app_iso hom G)\"", "lemma (in graph) graphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"graph (app_iso hom G)\"", "lemma (in wf_digraph) graph_app_iso_eq:\n  assumes \"digraph_isomorphism hom\"\n  shows \"graph (app_iso hom G) \\<longleftrightarrow> graph G\"", "lemma (in pre_digraph) arcs_ends_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"arcs_ends (app_iso hom G) = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G\"", "lemma inj_onI_pair:\n  assumes \"inj_on f S\" \"T \\<subseteq> S \\<times> S\"\n  shows \"inj_on (\\<lambda>(u,v). (f u, f v)) T\"", "lemma (in wf_digraph) complete_digraph_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"K\\<^bsub>n\\<^esub> (app_iso hom G) \\<longleftrightarrow> K\\<^bsub>n\\<^esub> G\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in pre_digraph) mk_iso_simps[simp]:\n  \"iso_verts (mk_iso fv fa) = fv\"\n  \"iso_arcs (mk_iso fv fa) = fa\"", "lemma (in wf_digraph) digraph_isomorphism_mk_iso:\n  assumes \"inj_on fv (verts G)\" \"inj_on fa (arcs G)\"\n  shows \"digraph_isomorphism (mk_iso fv fa)\"", "lemma inj_on_pairself:\n  assumes \"inj_on f S\" and \"T \\<subseteq> S \\<times> S\"\n  shows \"inj_on (pairself f) T\"", "lemma (in pre_digraph) mk_iso_simps_nomulti[simp]:\n  \"iso_verts (mk_iso_nomulti G H fv) = fv\"\n  \"iso_head (mk_iso_nomulti G H fv) = head H\"\n  \"iso_tail (mk_iso_nomulti G H fv) = tail H\"", "lemma (in nomulti_digraph)  \n  assumes \"nomulti_digraph H\"\n  assumes fv: \"inj_on fv (verts G)\" \"verts H = fv ` verts G\" and arcs_ends: \"arcs_ends H = pairself fv ` arcs_ends G\"\n  shows digraph_isomorphism_mk_iso_nomulti: \"digraph_isomorphism (mk_iso_nomulti G H fv)\" (is \"?t_multi\")\n    and ap_iso_mk_iso_nomulti_eq: \"app_iso (mk_iso_nomulti G H fv) G = H\" (is \"?t_app\")\n    and digraph_iso_mk_iso_nomulti: \"digraph_iso G H\" (is \"?t_iso\")", "lemma complete_digraph_are_iso:\n  assumes \"K\\<^bsub>n\\<^esub> G\" \"K\\<^bsub>n\\<^esub> H\" shows \"digraph_iso G H\"", "lemma pairself_image_prod:\n  \"pairself f ` (A \\<times> B) = f ` A \\<times> f ` B\"", "lemma complete_bipartite_digraph_are_iso:\n  assumes \"K\\<^bsub>m,n\\<^esub> G\" \"K\\<^bsub>m,n\\<^esub> H\" shows \"digraph_iso G H\"", "lemma K5_not_comb_planar:\n  assumes \"K\\<^bsub>5\\<^esub> G\" shows \"\\<not>comb_planar G\"", "lemma K33_not_comb_planar:\n  assumes \"K\\<^bsub>3,3\\<^esub> G\" shows \"\\<not>comb_planar G\""], "translations": [["", "lemma c_K5_not_comb_planar: \"\\<not>comb_planar c_K5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> comb_planar (with_proj c_K5)", "by (subst comb_planar_impl_correct) eval+"], ["", "lemma pverts_c_K5: \"pverts c_K5 = {0..4}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pverts c_K5 = {0..4}", "by (simp add: c_K5_list_def list_digraph_ext_def)"], ["", "lemma parcs_c_K5: \"parcs c_K5 = {(u,v). u \\<in> {0..4} \\<and> v \\<in> {0..4} \\<and> u \\<noteq> v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parcs c_K5 =\n    {(u, v). u \\<in> {0..4} \\<and> v \\<in> {0..4} \\<and> u \\<noteq> v}", "by (auto simp: c_K5_list_def list_digraph_ext_def)"], ["", "lemmas c_K5_simps = pverts_c_K5 parcs_c_K5"], ["", "lemma complete_c_K5: \"K\\<^bsub>5\\<^esub> c_K5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub> (with_proj c_K5)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub> (with_proj c_K5)", "interpret K5: pair_graph c_K5"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph c_K5", "by eval"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub> (with_proj c_K5)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>5\\<^esub> (with_proj c_K5)", "unfolding complete_digraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (with_proj c_K5) \\<and>\n    card (verts (with_proj c_K5)) = 5 \\<and>\n    arcs_ends (with_proj c_K5) =\n    {(u, v).\n     (u, v)\n     \\<in> verts (with_proj c_K5) \\<times> verts (with_proj c_K5) \\<and>\n     u \\<noteq> v}", "by (auto simp: c_K5_simps)"], ["proof (state)\nthis:\n  K\\<^bsub>5\\<^esub> (with_proj c_K5)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>A concrete K33 graph\\<close>"], ["", "definition \"c_K33_list \\<equiv> ([0..5], [(x,y). x <- [0..5], y <- [0..5], even x \\<longleftrightarrow> odd y])\""], ["", "abbreviation c_K33 :: \"int pair_pre_digraph\" where\n  \"c_K33 \\<equiv> list_digraph c_K33_list\""], ["", "lemma c_K33_not_comb_planar: \"\\<not>comb_planar c_K33\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> comb_planar (with_proj c_K33)", "by (subst comb_planar_impl_correct) eval+"], ["", "lemma complete_c_K33: \"K\\<^bsub>3,3\\<^esub> c_K33\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub> (with_proj c_K33)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub> (with_proj c_K33)", "interpret K33: pair_graph c_K33"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_graph c_K33", "by eval"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub> (with_proj c_K33)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>3,3\\<^esub> (with_proj c_K33)", "unfolding complete_bipartite_digraph_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (with_proj c_K33) \\<and>\n    (\\<exists>U V.\n        verts (with_proj c_K33) = U \\<union> V \\<and>\n        U \\<inter> V = {} \\<and>\n        card U = 3 \\<and>\n        card V = 3 \\<and>\n        arcs_ends (with_proj c_K33) = U \\<times> V \\<union> V \\<times> U)", "apply (intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. graph (with_proj c_K33)\n 2. \\<exists>U V.\n       verts (with_proj c_K33) = U \\<union> V \\<and>\n       U \\<inter> V = {} \\<and>\n       card U = 3 \\<and>\n       card V = 3 \\<and>\n       arcs_ends (with_proj c_K33) = U \\<times> V \\<union> V \\<times> U", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>U V.\n       verts (with_proj c_K33) = U \\<union> V \\<and>\n       U \\<inter> V = {} \\<and>\n       card U = 3 \\<and>\n       card V = 3 \\<and>\n       arcs_ends (with_proj c_K33) = U \\<times> V \\<union> V \\<times> U", "apply (rule exI[of _ \"{0,2,4}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>V.\n       verts (with_proj c_K33) = {0, 2, 4} \\<union> V \\<and>\n       {0, 2, 4} \\<inter> V = {} \\<and>\n       card {0, 2, 4} = 3 \\<and>\n       card V = 3 \\<and>\n       arcs_ends (with_proj c_K33) =\n       {0, 2, 4} \\<times> V \\<union> V \\<times> {0, 2, 4}", "apply (rule exI[of _ \"{1,3,5}\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. verts (with_proj c_K33) = {0, 2, 4} \\<union> {1, 3, 5} \\<and>\n    {0, 2, 4} \\<inter> {1, 3, 5} = {} \\<and>\n    card {0, 2, 4} = 3 \\<and>\n    card {1, 3, 5} = 3 \\<and>\n    arcs_ends (with_proj c_K33) =\n    {0, 2, 4} \\<times> {1, 3, 5} \\<union> {1, 3, 5} \\<times> {0, 2, 4}", "unfolding c_K33_list_def list_digraph_simps with_proj_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fst ([0..5],\n              concat\n               (map (\\<lambda>x.\n                        concat\n                         (map (\\<lambda>y.\n                                  if even x = odd y then [(x, y)] else [])\n                           [0..5]))\n                 [0..5]))) =\n    {0, 2, 4} \\<union> {1, 3, 5} \\<and>\n    {0, 2, 4} \\<inter> {1, 3, 5} = {} \\<and>\n    card {0, 2, 4} = 3 \\<and>\n    card {1, 3, 5} = 3 \\<and>\n    set (snd ([0..5],\n              concat\n               (map (\\<lambda>x.\n                        concat\n                         (map (\\<lambda>y.\n                                  if even x = odd y then [(x, y)] else [])\n                           [0..5]))\n                 [0..5]))) =\n    {0, 2, 4} \\<times> {1, 3, 5} \\<union> {1, 3, 5} \\<times> {0, 2, 4}", "apply eval"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  K\\<^bsub>3,3\\<^esub> (with_proj c_K33)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Generalization to arbitrary Kuratowski Graphs\\<close>"], ["", "subsubsection \\<open>Number of Face Cycles is a Graph Invariant\\<close>"], ["", "lemma (in digraph_map) wrap_wrap_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  assumes f: \"f \\<in> arcs G \\<rightarrow> arcs G\" and g: \"g \\<in> arcs G \\<rightarrow> arcs G\"\n  shows \"wrap_iso_arcs hom f (wrap_iso_arcs hom g x) = wrap_iso_arcs hom (f o g) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (wrap_iso_arcs hom g x) =\n    wrap_iso_arcs hom (f \\<circ> g) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (wrap_iso_arcs hom g x) =\n    wrap_iso_arcs hom (f \\<circ> g) x", "have \"\\<And>x. x \\<in> arcs G \\<Longrightarrow> g x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> g x \\<in> arcs G", "using g"], ["proof (prove)\nusing this:\n  g \\<in> arcs G \\<rightarrow> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> arcs G \\<Longrightarrow> g x \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  ?x4 \\<in> arcs G \\<Longrightarrow> g ?x4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (wrap_iso_arcs hom g x) =\n    wrap_iso_arcs hom (f \\<circ> g) x", "with hom f"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  f \\<in> arcs G \\<rightarrow> arcs G\n  ?x4 \\<in> arcs G \\<Longrightarrow> g ?x4 \\<in> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  f \\<in> arcs G \\<rightarrow> arcs G\n  ?x4 \\<in> arcs G \\<Longrightarrow> g ?x4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (wrap_iso_arcs hom g x) =\n    wrap_iso_arcs hom (f \\<circ> g) x", "by (cases \"x \\<in> iso_arcs hom ` arcs G\") (auto simp: wrap_iso_arcs_def perm_restrict_simps)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f (wrap_iso_arcs hom g x) =\n  wrap_iso_arcs hom (f \\<circ> g) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) face_cycle_succ_iso:\n  assumes hom: \"digraph_isomorphism hom\" \"x \\<in> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph_map.face_cycle_succ (map_iso hom) x = wrap_iso_arcs hom face_cycle_succ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_succ (map_iso hom) x =\n    wrap_iso_arcs hom face_cycle_succ x", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  x \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_succ (map_iso hom) x =\n    wrap_iso_arcs hom face_cycle_succ x", "by (simp add: pre_digraph_map.face_cycle_succ_def map_iso_def wrap_wrap_iso)"], ["", "lemma (in digraph_map) face_cycle_set_iso:\n  assumes hom: \"digraph_isomorphism hom\" \"x \\<in> iso_arcs hom ` arcs G\"\n  shows \"pre_digraph_map.face_cycle_set (map_iso hom) x = iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_set (map_iso hom) x =\n    iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_set (map_iso hom) x =\n    iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)", "have *: \"\\<And>x y. x \\<in> orbit face_cycle_succ y \\<Longrightarrow> y \\<in> arcs G \\<Longrightarrow> x \\<in> arcs G\"\n          \"\\<And>x. x \\<in> arcs G \\<Longrightarrow> x \\<in> orbit face_cycle_succ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> orbit face_cycle_succ y; y \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> x \\<in> arcs G) &&&\n    (\\<And>x.\n        x \\<in> arcs G \\<Longrightarrow> x \\<in> orbit face_cycle_succ x)", "using face_cycle_set_def"], ["proof (prove)\nusing this:\n  face_cycle_set ?a = orbit face_cycle_succ ?a\n\ngoal (1 subgoal):\n 1. (\\<And>x y.\n        \\<lbrakk>x \\<in> orbit face_cycle_succ y; y \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> x \\<in> arcs G) &&&\n    (\\<And>x.\n        x \\<in> arcs G \\<Longrightarrow> x \\<in> orbit face_cycle_succ x)", "by (auto simp: in_face_cycle_setD)"], ["proof (state)\nthis:\n  \\<lbrakk>?x4 \\<in> orbit face_cycle_succ ?y4; ?y4 \\<in> arcs G\\<rbrakk>\n  \\<Longrightarrow> ?x4 \\<in> arcs G\n  ?x4 \\<in> arcs G \\<Longrightarrow> ?x4 \\<in> orbit face_cycle_succ ?x4\n\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_set (map_iso hom) x =\n    iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_set (map_iso hom) x =\n    iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  x \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_set (map_iso hom) x =\n    iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)", "unfolding pre_digraph_map.face_cycle_set_def"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  x \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. orbit (pre_digraph_map.face_cycle_succ (map_iso hom)) x =\n    iso_arcs hom ` orbit face_cycle_succ (iso_arcs (inv_iso hom) x)", "by (subst orbit_FOO[where g'=\"pre_digraph_map.face_cycle_succ (map_iso hom)\"])\n       (auto simp: * face_cycle_succ_iso)"], ["proof (state)\nthis:\n  pre_digraph_map.face_cycle_set (map_iso hom) x =\n  iso_arcs hom ` face_cycle_set (iso_arcs (inv_iso hom) x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) face_cycle_sets_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom) = (\\<lambda>x. iso_arcs hom ` x) ` face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom) =\n    (`) (iso_arcs hom) ` face_cycle_sets", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom) =\n    (`) (iso_arcs hom) ` face_cycle_sets", "by (auto simp: pre_digraph_map.face_cycle_sets_def face_cycle_set_iso) (auto simp: face_cycle_set_iso intro: rev_image_eqI)"], ["", "lemma (in digraph_map) card_face_cycle_sets_iso:\n  assumes hom: \"digraph_isomorphism hom\"\n  shows \"card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) = card face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n    card face_cycle_sets", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n    card face_cycle_sets", "have \"inj_on ((`) (iso_arcs hom)) face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) (iso_arcs hom)) face_cycle_sets", "by (rule inj_on_f_imageI digraph_isomorphism_inj_on_arcs hom in_face_cycle_setsD)+"], ["proof (state)\nthis:\n  inj_on ((`) (iso_arcs hom)) face_cycle_sets\n\ngoal (1 subgoal):\n 1. card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n    card face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  inj_on ((`) (iso_arcs hom)) face_cycle_sets", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on ((`) (iso_arcs hom)) face_cycle_sets\n\ngoal (1 subgoal):\n 1. card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n    card face_cycle_sets", "using hom"], ["proof (prove)\nusing this:\n  inj_on ((`) (iso_arcs hom)) face_cycle_sets\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n    card face_cycle_sets", "by (simp add: face_cycle_sets_iso card_image)"], ["proof (state)\nthis:\n  card (pre_digraph_map.face_cycle_sets (app_iso hom G) (map_iso hom)) =\n  card face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Combinatorial planarity is a Graph Invariant\\<close>"], ["", "lemma (in digraph_map) euler_char_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.euler_char (app_iso hom G) (map_iso hom) = euler_char\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_char (app_iso hom G) (map_iso hom) = euler_char", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_char (app_iso hom G) (map_iso hom) = euler_char", "by (auto simp: pre_digraph_map.euler_char_def card_face_cycle_sets_iso)"], ["", "lemma (in digraph_map) euler_genus_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"pre_digraph_map.euler_genus (app_iso hom G) (map_iso hom) = euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_genus (app_iso hom G) (map_iso hom) = euler_genus", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_genus (app_iso hom G) (map_iso hom) = euler_genus", "by (auto simp: pre_digraph_map.euler_genus_def euler_char_iso)"], ["", "lemma (in wf_digraph) comb_planar_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"comb_planar (app_iso hom G) \\<longleftrightarrow> comb_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) = comb_planar G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G\n 2. comb_planar G \\<Longrightarrow> comb_planar (app_iso hom G)", "assume \"comb_planar G\""], ["proof (state)\nthis:\n  comb_planar G\n\ngoal (2 subgoals):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G\n 2. comb_planar G \\<Longrightarrow> comb_planar (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  comb_planar G", "obtain M where \"digraph_map G M\" \"pre_digraph_map.euler_genus G M = 0\""], ["proof (prove)\nusing this:\n  comb_planar G\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>digraph_map G M;\n         pre_digraph_map.euler_genus G M = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: comb_planar_def)"], ["proof (state)\nthis:\n  digraph_map G M\n  pre_digraph_map.euler_genus G M = 0\n\ngoal (2 subgoals):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G\n 2. comb_planar G \\<Longrightarrow> comb_planar (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  digraph_map G M\n  pre_digraph_map.euler_genus G M = 0", "have \"digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom)\"\n      \"pre_digraph_map.euler_genus (app_iso hom G) (pre_digraph_map.map_iso G M hom) = 0\""], ["proof (prove)\nusing this:\n  digraph_map G M\n  pre_digraph_map.euler_genus G M = 0\n\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom) &&&\n    pre_digraph_map.euler_genus (app_iso hom G)\n     (pre_digraph_map.map_iso G M hom) =\n    0", "using assms"], ["proof (prove)\nusing this:\n  digraph_map G M\n  pre_digraph_map.euler_genus G M = 0\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom) &&&\n    pre_digraph_map.euler_genus (app_iso hom G)\n     (pre_digraph_map.map_iso G M hom) =\n    0", "by (auto intro: digraph_map.digraph_map_isoI simp: digraph_map.euler_genus_iso)"], ["proof (state)\nthis:\n  digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom)\n  pre_digraph_map.euler_genus (app_iso hom G)\n   (pre_digraph_map.map_iso G M hom) =\n  0\n\ngoal (2 subgoals):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G\n 2. comb_planar G \\<Longrightarrow> comb_planar (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom)\n  pre_digraph_map.euler_genus (app_iso hom G)\n   (pre_digraph_map.map_iso G M hom) =\n  0", "show \"comb_planar (app_iso hom G)\""], ["proof (prove)\nusing this:\n  digraph_map (app_iso hom G) (pre_digraph_map.map_iso G M hom)\n  pre_digraph_map.euler_genus (app_iso hom G)\n   (pre_digraph_map.map_iso G M hom) =\n  0\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G)", "by (metis comb_planar_def)"], ["proof (state)\nthis:\n  comb_planar (app_iso hom G)\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "let ?G = \"app_iso hom G\""], ["proof (state)\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "assume \"comb_planar ?G\""], ["proof (state)\nthis:\n  comb_planar (app_iso hom G)\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "then"], ["proof (chain)\npicking this:\n  comb_planar (app_iso hom G)", "obtain M where \"digraph_map ?G M\"\n      \"pre_digraph_map.euler_genus ?G M = 0\""], ["proof (prove)\nusing this:\n  comb_planar (app_iso hom G)\n\ngoal (1 subgoal):\n 1. (\\<And>M.\n        \\<lbrakk>digraph_map (app_iso hom G) M;\n         pre_digraph_map.euler_genus (app_iso hom G) M = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: comb_planar_def)"], ["proof (state)\nthis:\n  digraph_map (app_iso hom G) M\n  pre_digraph_map.euler_genus (app_iso hom G) M = 0\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "moreover"], ["proof (state)\nthis:\n  digraph_map (app_iso hom G) M\n  pre_digraph_map.euler_genus (app_iso hom G) M = 0\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "have \"pre_digraph.digraph_isomorphism ?G (inv_iso hom)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "by (rule digraph_isomorphism_invI)"], ["proof (state)\nthis:\n  pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "ultimately"], ["proof (chain)\npicking this:\n  digraph_map (app_iso hom G) M\n  pre_digraph_map.euler_genus (app_iso hom G) M = 0\n  pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)", "have \"digraph_map (app_iso (inv_iso hom) ?G) (pre_digraph_map.map_iso ?G M (inv_iso hom))\"\n      \"pre_digraph_map.euler_genus (app_iso (inv_iso hom) ?G) (pre_digraph_map.map_iso ?G M (inv_iso hom)) = 0\""], ["proof (prove)\nusing this:\n  digraph_map (app_iso hom G) M\n  pre_digraph_map.euler_genus (app_iso hom G) M = 0\n  pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\n\ngoal (1 subgoal):\n 1. digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n     (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) &&&\n    pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n     (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n    0", "using assms"], ["proof (prove)\nusing this:\n  digraph_map (app_iso hom G) M\n  pre_digraph_map.euler_genus (app_iso hom G) M = 0\n  pre_digraph.digraph_isomorphism (app_iso hom G) (inv_iso hom)\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n     (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) &&&\n    pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n     (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n    0", "by (auto intro: digraph_map.digraph_map_isoI simp only: digraph_map.euler_genus_iso)"], ["proof (state)\nthis:\n  digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom))\n  pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n  0\n\ngoal (1 subgoal):\n 1. comb_planar (app_iso hom G) \\<Longrightarrow> comb_planar G", "then"], ["proof (chain)\npicking this:\n  digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom))\n  pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n  0", "show \"comb_planar G\""], ["proof (prove)\nusing this:\n  digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom))\n  pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n  0\n\ngoal (1 subgoal):\n 1. comb_planar G", "using assms"], ["proof (prove)\nusing this:\n  digraph_map (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom))\n  pre_digraph_map.euler_genus (app_iso (inv_iso hom) (app_iso hom G))\n   (pre_digraph_map.map_iso (app_iso hom G) M (inv_iso hom)) =\n  0\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. comb_planar G", "by (auto simp: comb_planar_def)"], ["proof (state)\nthis:\n  comb_planar G\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Completeness is a Graph Invariant\\<close>"], ["", "lemma (in loopfree_digraph) loopfree_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"loopfree_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "interpret iG: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "by (rule wf_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "using assms digraph_isomorphism_inj_on_verts[OF assms]"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  inj_on (iso_verts hom) (verts G)\n\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "by unfold_locales (auto simp: iso_verts_tail iso_verts_head dest: inj_onD no_loops)"], ["proof (state)\nthis:\n  loopfree_digraph (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in nomulti_digraph) nomulti_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"nomulti_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "interpret iG: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "by (rule wf_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "by unfold_locales (auto simp: iso_verts_tail iso_verts_head arc_to_ends_def no_multi_arcs dest: inj_onD)"], ["proof (state)\nthis:\n  nomulti_digraph (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) symmetricI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  assumes \"symmetric G\"\n  shows \"symmetric (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symmetric (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (app_iso hom G)", "let ?G = \"app_iso hom G\""], ["proof (state)\ngoal (1 subgoal):\n 1. symmetric (app_iso hom G)", "have \"sym (arcs_ends ?G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym (arcs_ends (app_iso hom G))", "proof (rule symI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "fix u v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "assume \"u \\<rightarrow>\\<^bsub>?G\\<^esub> v\""], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> v\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> v", "obtain a where a: \"a \\<in> arcs ?G\" \"tail ?G a = u\" \"head ?G a = v\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> v\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> arcs (app_iso hom G); tail (app_iso hom G) a = u;\n         head (app_iso hom G) a = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> arcs (app_iso hom G)\n  tail (app_iso hom G) a = u\n  head (app_iso hom G) a = v\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs (app_iso hom G)\n  tail (app_iso hom G) a = u\n  head (app_iso hom G) a = v", "obtain a0 where a0: \"a0 \\<in> arcs G\" \"a = iso_arcs hom a0\""], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n  tail (app_iso hom G) a = u\n  head (app_iso hom G) a = v\n\ngoal (1 subgoal):\n 1. (\\<And>a0.\n        \\<lbrakk>a0 \\<in> arcs G; a = iso_arcs hom a0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "with \\<open>symmetric G\\<close>"], ["proof (chain)\npicking this:\n  symmetric G\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0", "obtain b0 where \"b0 \\<in> arcs G\" \"tail G b0 = head G a0\" \"head G b0 = tail G a0\""], ["proof (prove)\nusing this:\n  symmetric G\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n\ngoal (1 subgoal):\n 1. (\\<And>b0.\n        \\<lbrakk>b0 \\<in> arcs G; tail G b0 = head G a0;\n         head G b0 = tail G a0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: symmetric_def arcs_ends_conv elim: symE)"], ["proof (state)\nthis:\n  b0 \\<in> arcs G\n  tail G b0 = head G a0\n  head G b0 = tail G a0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "moreover"], ["proof (state)\nthis:\n  b0 \\<in> arcs G\n  tail G b0 = head G a0\n  head G b0 = tail G a0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "define b where \"b = iso_arcs hom b0\""], ["proof (state)\nthis:\n  b = iso_arcs hom b0\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "ultimately"], ["proof (chain)\npicking this:\n  b0 \\<in> arcs G\n  tail G b0 = head G a0\n  head G b0 = tail G a0\n  b = iso_arcs hom b0", "have \"b \\<in> iso_arcs hom ` arcs G\" \"tail ?G b = v\" \"head ?G b = u\""], ["proof (prove)\nusing this:\n  b0 \\<in> arcs G\n  tail G b0 = head G a0\n  head G b0 = tail G a0\n  b = iso_arcs hom b0\n\ngoal (1 subgoal):\n 1. b \\<in> iso_arcs hom ` arcs G &&&\n    tail (app_iso hom G) b = v &&& head (app_iso hom G) b = u", "using a a0 assms"], ["proof (prove)\nusing this:\n  b0 \\<in> arcs G\n  tail G b0 = head G a0\n  head G b0 = tail G a0\n  b = iso_arcs hom b0\n  a \\<in> arcs (app_iso hom G)\n  tail (app_iso hom G) a = u\n  head (app_iso hom G) a = v\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n  digraph_isomorphism hom\n  symmetric G\n\ngoal (1 subgoal):\n 1. b \\<in> iso_arcs hom ` arcs G &&&\n    tail (app_iso hom G) b = v &&& head (app_iso hom G) b = u", "by (auto simp: iso_verts_tail iso_verts_head)"], ["proof (state)\nthis:\n  b \\<in> iso_arcs hom ` arcs G\n  tail (app_iso hom G) b = v\n  head (app_iso hom G) b = u\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       a \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> b \\<Longrightarrow>\n       b \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> a", "then"], ["proof (chain)\npicking this:\n  b \\<in> iso_arcs hom ` arcs G\n  tail (app_iso hom G) b = v\n  head (app_iso hom G) b = u", "show \"v \\<rightarrow>\\<^bsub>?G\\<^esub> u\""], ["proof (prove)\nusing this:\n  b \\<in> iso_arcs hom ` arcs G\n  tail (app_iso hom G) b = v\n  head (app_iso hom G) b = u\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> u", "by (auto simp: arcs_ends_conv)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^bsub>app_iso hom G\\<^esub> u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sym (arcs_ends (app_iso hom G))\n\ngoal (1 subgoal):\n 1. symmetric (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  sym (arcs_ends (app_iso hom G))", "show ?thesis"], ["proof (prove)\nusing this:\n  sym (arcs_ends (app_iso hom G))\n\ngoal (1 subgoal):\n 1. symmetric (app_iso hom G)", "by (simp add: symmetric_def)"], ["proof (state)\nthis:\n  symmetric (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in sym_digraph) sym_digraphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"sym_digraph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "interpret iG: wf_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wf_digraph (app_iso hom G)", "by (rule wf_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "by unfold_locales (intro symmetricI_app_iso sym_arcs)"], ["proof (state)\nthis:\n  sym_digraph (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in graph) graphI_app_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"graph (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "interpret iG: fin_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "by (rule fin_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "interpret iG: loopfree_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. loopfree_digraph (app_iso hom G)", "by (rule loopfree_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "interpret iG: nomulti_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. nomulti_digraph (app_iso hom G)", "by (rule nomulti_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "interpret iG: sym_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. sym_digraph (app_iso hom G)", "by (rule sym_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "by intro_locales"], ["proof (state)\nthis:\n  graph (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in wf_digraph) graph_app_iso_eq:\n  assumes \"digraph_isomorphism hom\"\n  shows \"graph (app_iso hom G) \\<longleftrightarrow> graph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. graph (app_iso hom G) = graph G", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. graph (app_iso hom G) = graph G", "by (metis app_iso_inv digraph_isomorphism_invI graph.graphI_app_iso)"], ["", "lemma (in pre_digraph) arcs_ends_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"arcs_ends (app_iso hom G) = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends (app_iso hom G) =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. arcs_ends (app_iso hom G) =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ` arcs_ends G", "by (auto simp: arcs_ends_conv image_image iso_verts_tail iso_verts_head cong: image_cong)"], ["", "lemma inj_onI_pair:\n  assumes \"inj_on f S\" \"T \\<subseteq> S \\<times> S\"\n  shows \"inj_on (\\<lambda>(u,v). (f u, f v)) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(u, v). (f u, f v)) T", "using assms"], ["proof (prove)\nusing this:\n  inj_on f S\n  T \\<subseteq> S \\<times> S\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(u, v). (f u, f v)) T", "by (intro inj_onI) (auto dest: inj_onD)"], ["", "lemma (in wf_digraph) complete_digraph_iso:\n  assumes \"digraph_isomorphism hom\"\n  shows \"K\\<^bsub>n\\<^esub> (app_iso hom G) \\<longleftrightarrow> K\\<^bsub>n\\<^esub> G\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) = K\\<^bsub>n\\<^esub> G", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "assume \"?L\""], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> (app_iso hom G)\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  K\\<^bsub>n\\<^esub> (app_iso hom G)", "interpret iG: graph \"app_iso hom G\""], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> (app_iso hom G)\n\ngoal (1 subgoal):\n 1. graph (app_iso hom G)", "by (simp add: complete_digraph_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "have \"{(u, v). u \\<in> iso_verts hom ` verts G \\<and> v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v}\n        = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` {(u,v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v}\" (is \"?L = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, v).\n     u \\<in> iso_verts hom ` verts G \\<and>\n     v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v).\n     u \\<in> verts G \\<and>\n     v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v}", "by auto"], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v).\n   u \\<in> verts G \\<and>\n   v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "also"], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v).\n   u \\<in> verts G \\<and>\n   v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "have \"\\<dots> = (\\<lambda>(u,v). (iso_verts hom u, iso_verts hom v)) ` {(u,v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v).\n     u \\<in> verts G \\<and>\n     v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v} =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "using digraph_isomorphism_inj_on_verts[OF assms]"], ["proof (prove)\nusing this:\n  inj_on (iso_verts hom) (verts G)\n\ngoal (1 subgoal):\n 1. (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v).\n     u \\<in> verts G \\<and>\n     v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v} =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "by (auto dest: inj_onD)"], ["proof (state)\nthis:\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v).\n   u \\<in> verts G \\<and>\n   v \\<in> verts G \\<and> iso_verts hom u \\<noteq> iso_verts hom v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "finally"], ["proof (chain)\npicking this:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "have \"?L = \\<dots>\""], ["proof (prove)\nusing this:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. {(u, v).\n     u \\<in> iso_verts hom ` verts G \\<and>\n     v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n    (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "."], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "}"], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "note X = this"], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "{"], ["proof (state)\nthis:\n  {(u, v).\n   u \\<in> iso_verts hom ` verts G \\<and>\n   v \\<in> iso_verts hom ` verts G \\<and> u \\<noteq> v} =\n  (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "fix A"], ["proof (state)\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "assume A: \"A \\<subseteq> verts G \\<times> verts G\""], ["proof (state)\nthis:\n  A \\<subseteq> verts G \\<times> verts G\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  A \\<subseteq> verts G \\<times> verts G", "have \"inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) A\""], ["proof (prove)\nusing this:\n  A \\<subseteq> verts G \\<times> verts G\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) A", "using A digraph_isomorphism_inj_on_verts[OF assms]"], ["proof (prove)\nusing this:\n  A \\<subseteq> verts G \\<times> verts G\n  A \\<subseteq> verts G \\<times> verts G\n  inj_on (iso_verts hom) (verts G)\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) A", "by (intro inj_onI_pair)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) A\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "}"], ["proof (state)\nthis:\n  ?A5 \\<subseteq> verts G \\<times> verts G \\<Longrightarrow>\n  inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ?A5\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "note Y = this"], ["proof (state)\nthis:\n  ?A5 \\<subseteq> verts G \\<times> verts G \\<Longrightarrow>\n  inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v)) ?A5\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "have \"(arcs_ends G \\<union> {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}) \\<subseteq> verts G \\<times> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends G \\<union>\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n    \\<subseteq> verts G \\<times> verts G", "by auto"], ["proof (state)\nthis:\n  arcs_ends G \\<union>\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n  \\<subseteq> verts G \\<times> verts G\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "note Y' = Y[OF this]"], ["proof (state)\nthis:\n  inj_on (\\<lambda>(u, v). (iso_verts hom u, iso_verts hom v))\n   (arcs_ends G \\<union>\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v})\n\ngoal (2 subgoals):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G) \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> G\n 2. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "show ?R"], ["proof (prove)\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> G", "using assms \\<open>?L\\<close>"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  K\\<^bsub>n\\<^esub> (app_iso hom G)\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> G", "by (simp add: complete_digraph_def X arcs_ends_iso graph_app_iso_eq inj_on_Un_image_eq_iff Y')"], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> G\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "assume \"?R\""], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> G\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> G \\<Longrightarrow>\n    K\\<^bsub>n\\<^esub> (app_iso hom G)", "then"], ["proof (chain)\npicking this:\n  K\\<^bsub>n\\<^esub> G", "show ?L"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. K\\<^bsub>n\\<^esub> (app_iso hom G)", "by (fastforce simp add: complete_digraph_def arcs_ends_iso graph_app_iso_eq)"], ["proof (state)\nthis:\n  K\\<^bsub>n\\<^esub> (app_iso hom G)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Conclusion\\<close>"], ["", "definition (in pre_digraph)\n  mk_iso :: \"('a \\<Rightarrow> 'c) \\<Rightarrow> ('b \\<Rightarrow> 'd) \\<Rightarrow> ('a, 'b, 'c, 'd) digraph_isomorphism\"\nwhere\n  \"mk_iso fv fa \\<equiv> \\<lparr> iso_verts = fv, iso_arcs = fa,\n    iso_head = fv o head G o the_inv_into (arcs G) fa,\n    iso_tail = fv o tail G o the_inv_into (arcs G) fa \\<rparr>\""], ["", "lemma (in pre_digraph) mk_iso_simps[simp]:\n  \"iso_verts (mk_iso fv fa) = fv\"\n  \"iso_arcs (mk_iso fv fa) = fa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_verts (mk_iso fv fa) = fv &&& iso_arcs (mk_iso fv fa) = fa", "by (auto simp: mk_iso_def)"], ["", "lemma (in wf_digraph) digraph_isomorphism_mk_iso:\n  assumes \"inj_on fv (verts G)\" \"inj_on fa (arcs G)\"\n  shows \"digraph_isomorphism (mk_iso fv fa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso fv fa)", "using assms"], ["proof (prove)\nusing this:\n  inj_on fv (verts G)\n  inj_on fa (arcs G)\n\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso fv fa)", "by (auto simp: digraph_isomorphism_def mk_iso_def the_inv_into_f_f wf_digraph)"], ["", "definition \"pairself f \\<equiv> \\<lambda>x. case x of (u,v) \\<Rightarrow> (f u, f v)\""], ["", "lemma inj_on_pairself:\n  assumes \"inj_on f S\" and \"T \\<subseteq> S \\<times> S\"\n  shows \"inj_on (pairself f) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (pairself f) T", "using assms"], ["proof (prove)\nusing this:\n  inj_on f S\n  T \\<subseteq> S \\<times> S\n\ngoal (1 subgoal):\n 1. inj_on (pairself f) T", "unfolding pairself_def"], ["proof (prove)\nusing this:\n  inj_on f S\n  T \\<subseteq> S \\<times> S\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. case x of (u, v) \\<Rightarrow> (f u, f v)) T", "by (rule inj_onI_pair)"], ["", "definition\n  mk_iso_nomulti :: \"('a,'b) pre_digraph \\<Rightarrow> ('c,'d) pre_digraph \\<Rightarrow> ('a \\<Rightarrow> 'c) \\<Rightarrow> ('a, 'b, 'c, 'd) digraph_isomorphism\"\nwhere\n  \"mk_iso_nomulti G H fv \\<equiv> \\<lparr>\n    iso_verts = fv,\n    iso_arcs = the_inv_into (arcs H) (arc_to_ends H) o pairself fv o arc_to_ends G,\n    iso_head = head H,\n    iso_tail = tail H\n  \\<rparr>\""], ["", "lemma (in pre_digraph) mk_iso_simps_nomulti[simp]:\n  \"iso_verts (mk_iso_nomulti G H fv) = fv\"\n  \"iso_head (mk_iso_nomulti G H fv) = head H\"\n  \"iso_tail (mk_iso_nomulti G H fv) = tail H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_verts (mk_iso_nomulti G H fv) = fv &&&\n    iso_head (mk_iso_nomulti G H fv) = head H &&&\n    iso_tail (mk_iso_nomulti G H fv) = tail H", "by (auto simp: mk_iso_nomulti_def)"], ["", "lemma (in nomulti_digraph)  \n  assumes \"nomulti_digraph H\"\n  assumes fv: \"inj_on fv (verts G)\" \"verts H = fv ` verts G\" and arcs_ends: \"arcs_ends H = pairself fv ` arcs_ends G\"\n  shows digraph_isomorphism_mk_iso_nomulti: \"digraph_isomorphism (mk_iso_nomulti G H fv)\" (is \"?t_multi\")\n    and ap_iso_mk_iso_nomulti_eq: \"app_iso (mk_iso_nomulti G H fv) G = H\" (is \"?t_app\")\n    and digraph_iso_mk_iso_nomulti: \"digraph_iso G H\" (is \"?t_iso\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso_nomulti G H fv) &&&\n    app_iso (mk_iso_nomulti G H fv) G = H &&& digraph_iso G H", "using assms"], ["proof (prove)\nusing this:\n  nomulti_digraph H\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso_nomulti G H fv) &&&\n    app_iso (mk_iso_nomulti G H fv) G = H &&& digraph_iso G H", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "interpret H: nomulti_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. nomulti_digraph H", "by fact"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "let ?fa = \"iso_arcs (mk_iso_nomulti G H fv)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "have fa: \"bij_betw ?fa (arcs G) (arcs H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "have \"bij_betw (arc_to_ends G) (arcs G) (arcs_ends G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (arc_to_ends G) (arcs G) (arcs_ends G)", "by (auto simp: bij_betw_def inj_on_arc_to_ends arcs_ends_def)"], ["proof (state)\nthis:\n  bij_betw (arc_to_ends G) (arcs G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "also"], ["proof (state)\nthis:\n  bij_betw (arc_to_ends G) (arcs G) (arcs_ends G)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "have \"bij_betw (pairself fv) (arcs_ends G) (arcs_ends H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (pairself fv) (arcs_ends G) (arcs_ends H)", "using arcs_ends"], ["proof (prove)\nusing this:\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. bij_betw (pairself fv) (arcs_ends G) (arcs_ends H)", "by (auto simp: bij_betw_def arcs_ends_def arc_to_ends_def intro: fv inj_on_pairself)"], ["proof (state)\nthis:\n  bij_betw (pairself fv) (arcs_ends G) (arcs_ends H)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "also (bij_betw_trans)"], ["proof (state)\nthis:\n  bij_betw (pairself fv) (arcs_ends G) (arcs_ends H)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "have \"bij_betw (the_inv_into (arcs H) (arc_to_ends H)) (arcs_ends H) (arcs H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (the_inv_into (arcs H) (arc_to_ends H)) (arcs_ends H) (arcs H)", "by (auto simp: bij_betw_def the_inv_into_into H.inj_on_arc_to_ends arcs_ends_def inj_on_the_inv_into)"], ["proof (state)\nthis:\n  bij_betw (the_inv_into (arcs H) (arc_to_ends H)) (arcs_ends H) (arcs H)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "finally (bij_betw_trans)"], ["proof (chain)\npicking this:\n  bij_betw\n   (the_inv_into (arcs H) (arc_to_ends H) \\<circ>\n    (pairself fv \\<circ> arc_to_ends G))\n   (arcs G) (arcs H)", "show ?thesis"], ["proof (prove)\nusing this:\n  bij_betw\n   (the_inv_into (arcs H) (arc_to_ends H) \\<circ>\n    (pairself fv \\<circ> arc_to_ends G))\n   (arcs G) (arcs H)\n\ngoal (1 subgoal):\n 1. bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)", "by (simp add: mk_iso_nomulti_def o_assoc)"], ["proof (state)\nthis:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "moreover"], ["proof (state)\nthis:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "{"], ["proof (state)\nthis:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "fix a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "assume \"a \\<in> arcs G\""], ["proof (state)\nthis:\n  a \\<in> arcs G\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs G", "have \"pairself fv (arc_to_ends G a) \\<in> arcs_ends H\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. pairself fv (arc_to_ends G a) \\<in> arcs_ends H", "using arcs_ends"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. pairself fv (arc_to_ends G a) \\<in> arcs_ends H", "by (auto simp: arcs_ends_def)"], ["proof (state)\nthis:\n  pairself fv (arc_to_ends G a) \\<in> arcs_ends H\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  pairself fv (arc_to_ends G a) \\<in> arcs_ends H", "obtain b where \"(pairself fv (arc_to_ends G a)) = arc_to_ends H b\" \"b \\<in> arcs H\""], ["proof (prove)\nusing this:\n  pairself fv (arc_to_ends G a) \\<in> arcs_ends H\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>pairself fv (arc_to_ends G a) = arc_to_ends H b;\n         b \\<in> arcs H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: arcs_ends_def)"], ["proof (state)\nthis:\n  pairself fv (arc_to_ends G a) = arc_to_ends H b\n  b \\<in> arcs H\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  pairself fv (arc_to_ends G a) = arc_to_ends H b\n  b \\<in> arcs H", "have \"fv (tail G a) = tail H (?fa a)\" \"fv (head G a) = head H (?fa a)\""], ["proof (prove)\nusing this:\n  pairself fv (arc_to_ends G a) = arc_to_ends H b\n  b \\<in> arcs H\n\ngoal (1 subgoal):\n 1. fv (tail G a) = tail H (iso_arcs (mk_iso_nomulti G H fv) a) &&&\n    fv (head G a) = head H (iso_arcs (mk_iso_nomulti G H fv) a)", "by (auto simp: mk_iso_nomulti_def the_inv_into_f_f H.inj_on_arc_to_ends)\n        (auto simp: pairself_def arc_to_ends_def)"], ["proof (state)\nthis:\n  fv (tail G a) = tail H (iso_arcs (mk_iso_nomulti G H fv) a)\n  fv (head G a) = head H (iso_arcs (mk_iso_nomulti G H fv) a)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "}"], ["proof (state)\nthis:\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (tail G ?a6) = tail H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (head G ?a6) = head H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_isomorphism (mk_iso_nomulti G H fv)\n 2. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> app_iso (mk_iso_nomulti G H fv) G = H\n 3. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "ultimately"], ["proof (chain)\npicking this:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (tail G ?a6) = tail H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (head G ?a6) = head H (iso_arcs (mk_iso_nomulti G H fv) ?a6)", "show ?t_multi ?t_app"], ["proof (prove)\nusing this:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (tail G ?a6) = tail H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (head G ?a6) = head H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso_nomulti G H fv) &&&\n    app_iso (mk_iso_nomulti G H fv) G = H", "using fv"], ["proof (prove)\nusing this:\n  bij_betw (iso_arcs (mk_iso_nomulti G H fv)) (arcs G) (arcs H)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (tail G ?a6) = tail H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n  ?a6 \\<in> arcs G \\<Longrightarrow>\n  fv (head G ?a6) = head H (iso_arcs (mk_iso_nomulti G H fv) ?a6)\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n\ngoal (1 subgoal):\n 1. digraph_isomorphism (mk_iso_nomulti G H fv) &&&\n    app_iso (mk_iso_nomulti G H fv) G = H", "by (auto simp: digraph_isomorphism_def bij_betw_def wf_digraph)"], ["proof (state)\nthis:\n  digraph_isomorphism (mk_iso_nomulti G H fv)\n  app_iso (mk_iso_nomulti G H fv) G = H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>nomulti_digraph H; inj_on fv (verts G); verts H = fv ` verts G;\n     arcs_ends H = pairself fv ` arcs_ends G\\<rbrakk>\n    \\<Longrightarrow> digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  digraph_isomorphism (mk_iso_nomulti G H fv)\n  app_iso (mk_iso_nomulti G H fv) G = H", "show ?t_iso"], ["proof (prove)\nusing this:\n  digraph_isomorphism (mk_iso_nomulti G H fv)\n  app_iso (mk_iso_nomulti G H fv) G = H\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  digraph_iso G H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma complete_digraph_are_iso:\n  assumes \"K\\<^bsub>n\\<^esub> G\" \"K\\<^bsub>n\\<^esub> H\" shows \"digraph_iso G H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "interpret G: graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n  K\\<^bsub>n\\<^esub> H\n\ngoal (1 subgoal):\n 1. graph G", "by (simp add: complete_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "interpret H: graph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph H", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n  K\\<^bsub>n\\<^esub> H\n\ngoal (1 subgoal):\n 1. graph H", "by (simp add: complete_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>n\\<^esub> G\n  K\\<^bsub>n\\<^esub> H", "have \"card (verts G) = n\" \"card (verts H) = n\""], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n  K\\<^bsub>n\\<^esub> H\n\ngoal (1 subgoal):\n 1. card (verts G) = n &&& card (verts H) = n", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  card (verts G) = n\n  card (verts H) = n\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "with G.finite_verts H.finite_verts"], ["proof (chain)\npicking this:\n  finite (verts G)\n  finite (verts H)\n  card (verts G) = n\n  card (verts H) = n", "obtain fv where \"bij_betw fv (verts G) (verts H)\""], ["proof (prove)\nusing this:\n  finite (verts G)\n  finite (verts H)\n  card (verts G) = n\n  card (verts H) = n\n\ngoal (1 subgoal):\n 1. (\\<And>fv.\n        bij_betw fv (verts G) (verts H) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis finite_same_card_bij)"], ["proof (state)\nthis:\n  bij_betw fv (verts G) (verts H)\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  bij_betw fv (verts G) (verts H)", "have fv: \"inj_on fv (verts G)\" \"verts H = fv ` verts G\""], ["proof (prove)\nusing this:\n  bij_betw fv (verts G) (verts H)\n\ngoal (1 subgoal):\n 1. inj_on fv (verts G) &&& verts H = fv ` verts G", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"arcs_ends H = {(u,v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends H =\n    {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "using \\<open>K\\<^bsub>n\\<^esub> H\\<close>"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> H\n\ngoal (1 subgoal):\n 1. arcs_ends H =\n    {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  arcs_ends H =\n  {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "also"], ["proof (state)\nthis:\n  arcs_ends H =\n  {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"\\<dots> = pairself fv ` {(u,v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v} =\n    pairself fv `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "assume \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "then"], ["proof (chain)\npicking this:\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "have \"fst x \\<in> fv ` verts G\" \"snd x \\<in> fv ` verts G\" \"fst x \\<noteq> snd x\""], ["proof (prove)\nusing this:\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. fst x \\<in> fv ` verts G &&&\n    snd x \\<in> fv ` verts G &&& fst x \\<noteq> snd x", "using fv"], ["proof (prove)\nusing this:\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n\ngoal (1 subgoal):\n 1. fst x \\<in> fv ` verts G &&&\n    snd x \\<in> fv ` verts G &&& fst x \\<noteq> snd x", "by auto"], ["proof (state)\nthis:\n  fst x \\<in> fv ` verts G\n  snd x \\<in> fv ` verts G\n  fst x \\<noteq> snd x\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "then"], ["proof (chain)\npicking this:\n  fst x \\<in> fv ` verts G\n  snd x \\<in> fv ` verts G\n  fst x \\<noteq> snd x", "obtain u v where \"fst x = fv u\" \"snd x = fv v\" \"u \\<in> verts G\" \"v \\<in> verts G\""], ["proof (prove)\nusing this:\n  fst x \\<in> fv ` verts G\n  snd x \\<in> fv ` verts G\n  fst x \\<noteq> snd x\n\ngoal (1 subgoal):\n 1. (\\<And>u v.\n        \\<lbrakk>fst x = fv u; snd x = fv v; u \\<in> verts G;\n         v \\<in> verts G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fst x = fv u\n  snd x = fv v\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "then"], ["proof (chain)\npicking this:\n  fst x = fv u\n  snd x = fv v\n  u \\<in> verts G\n  v \\<in> verts G", "have \"(fst x, snd x) \\<in> ?R\""], ["proof (prove)\nusing this:\n  fst x = fv u\n  snd x = fv v\n  u \\<in> verts G\n  v \\<in> verts G\n\ngoal (1 subgoal):\n 1. (fst x, snd x)\n    \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "using \\<open>x \\<in> ?L\\<close>"], ["proof (prove)\nusing this:\n  fst x = fv u\n  snd x = fv v\n  u \\<in> verts G\n  v \\<in> verts G\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. (fst x, snd x)\n    \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "by (auto simp: pairself_def)"], ["proof (state)\nthis:\n  (fst x, snd x)\n  \\<in> pairself fv `\n        {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and>\n                v \\<in> verts H \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "then"], ["proof (chain)\npicking this:\n  (fst x, snd x)\n  \\<in> pairself fv `\n        {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  (fst x, snd x)\n  \\<in> pairself fv `\n        {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. x \\<in> pairself fv `\n            {(u, v).\n             u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "by auto"], ["proof (state)\nthis:\n  x \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               {(u, v).\n                u \\<in> verts G \\<and>\n                v \\<in> verts G \\<and> u \\<noteq> v} \\<Longrightarrow>\n       x \\<in> {(u, v).\n                u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "then"], ["proof (chain)\npicking this:\n  x \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. x \\<in> {(u, v).\n             u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "using fv"], ["proof (prove)\nusing this:\n  x \\<in> pairself fv `\n          {(u, v).\n           u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n\ngoal (1 subgoal):\n 1. x \\<in> {(u, v).\n             u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}", "by (auto simp: pairself_def dest: inj_onD)"], ["proof (state)\nthis:\n  x \\<in> {(u, v).\n           u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v} =\n  pairself fv `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "also"], ["proof (state)\nthis:\n  {(u, v). u \\<in> verts H \\<and> v \\<in> verts H \\<and> u \\<noteq> v} =\n  pairself fv `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v}\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"\\<dots> = pairself fv ` arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairself fv `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v} =\n    pairself fv ` arcs_ends G", "using \\<open>K\\<^bsub>n\\<^esub> G\\<close>"], ["proof (prove)\nusing this:\n  K\\<^bsub>n\\<^esub> G\n\ngoal (1 subgoal):\n 1. pairself fv `\n    {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v} =\n    pairself fv ` arcs_ends G", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  pairself fv `\n  {(u, v). u \\<in> verts G \\<and> v \\<in> verts G \\<and> u \\<noteq> v} =\n  pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "finally"], ["proof (chain)\npicking this:\n  arcs_ends H = pairself fv ` arcs_ends G", "have arcs_ends: \"arcs_ends H = pairself fv ` arcs_ends G\""], ["proof (prove)\nusing this:\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. arcs_ends H = pairself fv ` arcs_ends G", "."], ["proof (state)\nthis:\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G H", "using H.nomulti_digraph fv arcs_ends"], ["proof (prove)\nusing this:\n  nomulti_digraph H\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "by (rule G.digraph_iso_mk_iso_nomulti)"], ["proof (state)\nthis:\n  digraph_iso G H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pairself_image_prod:\n  \"pairself f ` (A \\<times> B) = f ` A \\<times> f ` B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairself f ` (A \\<times> B) = f ` A \\<times> f ` B", "by (auto simp: pairself_def)"], ["", "lemma complete_bipartite_digraph_are_iso:\n  assumes \"K\\<^bsub>m,n\\<^esub> G\" \"K\\<^bsub>m,n\\<^esub> H\" shows \"digraph_iso G H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "interpret G: graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H\n\ngoal (1 subgoal):\n 1. graph G", "by (simp add: complete_bipartite_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "interpret H: graph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph H", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H\n\ngoal (1 subgoal):\n 1. graph H", "by (simp add: complete_bipartite_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_iso G H", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H", "obtain GU GV where G_parts: \"verts G = GU \\<union> GV\" \"GU \\<inter> GV = {}\"\n      \"card GU = m\" \"card GV = n\" \"arcs_ends G = GU \\<times> GV \\<union> GV \\<times> GU\""], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H\n\ngoal (1 subgoal):\n 1. (\\<And>GU GV.\n        \\<lbrakk>verts G = GU \\<union> GV; GU \\<inter> GV = {}; card GU = m;\n         card GV = n;\n         arcs_ends G = GU \\<times> GV \\<union> GV \\<times> GU\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  verts G = GU \\<union> GV\n  GU \\<inter> GV = {}\n  card GU = m\n  card GV = n\n  arcs_ends G = GU \\<times> GV \\<union> GV \\<times> GU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "from assms"], ["proof (chain)\npicking this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H", "obtain HU HV where H_parts: \"verts H = HU \\<union> HV\" \"HU \\<inter> HV = {}\"\n      \"card HU = m\" \"card HV = n\" \"arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\""], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> G\n  K\\<^bsub>m,n\\<^esub> H\n\ngoal (1 subgoal):\n 1. (\\<And>HU HV.\n        \\<lbrakk>verts H = HU \\<union> HV; HU \\<inter> HV = {}; card HU = m;\n         card HV = n;\n         arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  verts H = HU \\<union> HV\n  HU \\<inter> HV = {}\n  card HU = m\n  card HV = n\n  arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have fin: \"finite GU\" \"finite GV\" \"finite HU\" \"finite HV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (finite GU &&& finite GV) &&& finite HU &&& finite HV", "using G_parts H_parts G.finite_verts H.finite_verts"], ["proof (prove)\nusing this:\n  verts G = GU \\<union> GV\n  GU \\<inter> GV = {}\n  card GU = m\n  card GV = n\n  arcs_ends G = GU \\<times> GV \\<union> GV \\<times> GU\n  verts H = HU \\<union> HV\n  HU \\<inter> HV = {}\n  card HU = m\n  card HV = n\n  arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\n  finite (verts G)\n  finite (verts H)\n\ngoal (1 subgoal):\n 1. (finite GU &&& finite GV) &&& finite HU &&& finite HV", "by simp_all"], ["proof (state)\nthis:\n  finite GU\n  finite GV\n  finite HU\n  finite HV\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "obtain fv_U where fv_U: \"bij_betw fv_U GU HU\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fv_U.\n        bij_betw fv_U GU HU \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>card GU = _\\<close> \\<open>card HU = _\\<close> \\<open>finite GU\\<close> \\<open>finite HU\\<close>"], ["proof (prove)\nusing this:\n  card GU = m\n  card HU = m\n  finite GU\n  finite HU\n\ngoal (1 subgoal):\n 1. (\\<And>fv_U.\n        bij_betw fv_U GU HU \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis finite_same_card_bij)"], ["proof (state)\nthis:\n  bij_betw fv_U GU HU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "obtain fv_V where fv_V: \"bij_betw fv_V GV HV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>fv_V.\n        bij_betw fv_V GV HV \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>card GV = _\\<close> \\<open>card HV = _\\<close> \\<open>finite GV\\<close> \\<open>finite HV\\<close>"], ["proof (prove)\nusing this:\n  card GV = n\n  card HV = n\n  finite GV\n  finite HV\n\ngoal (1 subgoal):\n 1. (\\<And>fv_V.\n        bij_betw fv_V GV HV \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis finite_same_card_bij)"], ["proof (state)\nthis:\n  bij_betw fv_V GV HV\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "define fv where \"fv x = (if x \\<in> GU then fv_U x else fv_V x)\" for x"], ["proof (state)\nthis:\n  fv ?x = (if ?x \\<in> GU then fv_U ?x else fv_V ?x)\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"\\<And>x. x \\<in> GV \\<Longrightarrow> x \\<notin> GU\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> GV \\<Longrightarrow> x \\<notin> GU", "using \\<open>GU \\<inter> GV = {}\\<close>"], ["proof (prove)\nusing this:\n  GU \\<inter> GV = {}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> GV \\<Longrightarrow> x \\<notin> GU", "by blast"], ["proof (state)\nthis:\n  ?x1 \\<in> GV \\<Longrightarrow> ?x1 \\<notin> GU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  ?x1 \\<in> GV \\<Longrightarrow> ?x1 \\<notin> GU", "have bij_fv_UV: \"bij_betw fv GU HU\" \"bij_betw fv GV HV\""], ["proof (prove)\nusing this:\n  ?x1 \\<in> GV \\<Longrightarrow> ?x1 \\<notin> GU\n\ngoal (1 subgoal):\n 1. bij_betw fv GU HU &&& bij_betw fv GV HV", "using fv_U fv_V"], ["proof (prove)\nusing this:\n  ?x1 \\<in> GV \\<Longrightarrow> ?x1 \\<notin> GU\n  bij_betw fv_U GU HU\n  bij_betw fv_V GV HV\n\ngoal (1 subgoal):\n 1. bij_betw fv GU HU &&& bij_betw fv GV HV", "by (auto simp: fv_def cong: bij_betw_cong)"], ["proof (state)\nthis:\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  bij_betw fv GU HU\n  bij_betw fv GV HV", "have \"bij_betw fv (verts G) (verts H)\""], ["proof (prove)\nusing this:\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n\ngoal (1 subgoal):\n 1. bij_betw fv (verts G) (verts H)", "unfolding \\<open>verts G = _\\<close> \\<open>verts H = _\\<close>"], ["proof (prove)\nusing this:\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n\ngoal (1 subgoal):\n 1. bij_betw fv (GU \\<union> GV) (HU \\<union> HV)", "using \\<open>HU \\<inter> _ = {}\\<close>"], ["proof (prove)\nusing this:\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n  HU \\<inter> HV = {}\n\ngoal (1 subgoal):\n 1. bij_betw fv (GU \\<union> GV) (HU \\<union> HV)", "by (rule bij_betw_combine)"], ["proof (state)\nthis:\n  bij_betw fv (verts G) (verts H)\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "then"], ["proof (chain)\npicking this:\n  bij_betw fv (verts G) (verts H)", "have fv: \"inj_on fv (verts G)\" \"verts H = fv ` verts G\""], ["proof (prove)\nusing this:\n  bij_betw fv (verts G) (verts H)\n\ngoal (1 subgoal):\n 1. inj_on fv (verts G) &&& verts H = fv ` verts G", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU", "using \\<open>K\\<^bsub>m,n\\<^esub> H\\<close> H_parts"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> H\n  verts H = HU \\<union> HV\n  HU \\<inter> HV = {}\n  card HU = m\n  card HV = n\n  arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (1 subgoal):\n 1. arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU", "by (auto simp: complete_digraph_def)"], ["proof (state)\nthis:\n  arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "also"], ["proof (state)\nthis:\n  arcs_ends H = HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"\\<dots> = pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. HU \\<times> HV \\<union> HV \\<times> HU =\n    pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU \\<Longrightarrow>\n       x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU \\<Longrightarrow>\n       x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "assume \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU \\<Longrightarrow>\n       x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "then"], ["proof (chain)\npicking this:\n  x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "have \"(fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV) \\<or> (fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU)\""], ["proof (prove)\nusing this:\n  x \\<in> HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal (1 subgoal):\n 1. fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV \\<or>\n    fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU", "using bij_fv_UV"], ["proof (prove)\nusing this:\n  x \\<in> HU \\<times> HV \\<union> HV \\<times> HU\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n\ngoal (1 subgoal):\n 1. fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV \\<or>\n    fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU", "by (auto simp: bij_betw_def)"], ["proof (state)\nthis:\n  fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV \\<or>\n  fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU \\<Longrightarrow>\n       x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n 2. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "then"], ["proof (chain)\npicking this:\n  fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV \\<or>\n  fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  fst x \\<in> fv ` GU \\<and> snd x \\<in> fv ` GV \\<or>\n  fst x \\<in> fv ` GV \\<and> snd x \\<in> fv ` GU\n\ngoal (1 subgoal):\n 1. x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)", "by (cases x) (auto simp: pairself_image_prod image_Un)"], ["proof (state)\nthis:\n  x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> pairself fv `\n               (GU \\<times> GV \\<union> GV \\<times> GU) \\<Longrightarrow>\n       x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "then"], ["proof (chain)\npicking this:\n  x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n\ngoal (1 subgoal):\n 1. x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "using bij_fv_UV"], ["proof (prove)\nusing this:\n  x \\<in> pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n  bij_betw fv GU HU\n  bij_betw fv GV HV\n\ngoal (1 subgoal):\n 1. x \\<in> HU \\<times> HV \\<union> HV \\<times> HU", "by (auto simp: pairself_image_prod image_Un bij_betw_def)"], ["proof (state)\nthis:\n  x \\<in> HU \\<times> HV \\<union> HV \\<times> HU\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  HU \\<times> HV \\<union> HV \\<times> HU =\n  pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "also"], ["proof (state)\nthis:\n  HU \\<times> HV \\<union> HV \\<times> HU =\n  pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU)\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "have \"\\<dots> = pairself fv ` arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU) =\n    pairself fv ` arcs_ends G", "using \\<open>K\\<^bsub>m,n\\<^esub> G\\<close> G_parts"], ["proof (prove)\nusing this:\n  K\\<^bsub>m,n\\<^esub> G\n  verts G = GU \\<union> GV\n  GU \\<inter> GV = {}\n  card GU = m\n  card GV = n\n  arcs_ends G = GU \\<times> GV \\<union> GV \\<times> GU\n\ngoal (1 subgoal):\n 1. pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU) =\n    pairself fv ` arcs_ends G", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\nthis:\n  pairself fv ` (GU \\<times> GV \\<union> GV \\<times> GU) =\n  pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "finally"], ["proof (chain)\npicking this:\n  arcs_ends H = pairself fv ` arcs_ends G", "have arcs_ends: \"arcs_ends H = pairself fv ` arcs_ends G\""], ["proof (prove)\nusing this:\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. arcs_ends H = pairself fv ` arcs_ends G", "."], ["proof (state)\nthis:\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G H", "using H.nomulti_digraph fv arcs_ends"], ["proof (prove)\nusing this:\n  nomulti_digraph H\n  inj_on fv (verts G)\n  verts H = fv ` verts G\n  arcs_ends H = pairself fv ` arcs_ends G\n\ngoal (1 subgoal):\n 1. digraph_iso G H", "by (rule G.digraph_iso_mk_iso_nomulti)"], ["proof (state)\nthis:\n  digraph_iso G H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma K5_not_comb_planar:\n  assumes \"K\\<^bsub>5\\<^esub> G\" shows \"\\<not>comb_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "interpret graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> G\n\ngoal (1 subgoal):\n 1. graph G", "by (auto simp: complete_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "have \"digraph_iso G c_K5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G (with_proj c_K5)", "using assms complete_c_K5"], ["proof (prove)\nusing this:\n  K\\<^bsub>5\\<^esub> G\n  K\\<^bsub>5\\<^esub> (with_proj c_K5)\n\ngoal (1 subgoal):\n 1. digraph_iso G (with_proj c_K5)", "by (rule complete_digraph_are_iso)"], ["proof (state)\nthis:\n  digraph_iso G (with_proj c_K5)\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "then"], ["proof (chain)\npicking this:\n  digraph_iso G (with_proj c_K5)", "obtain hom where hom: \"digraph_isomorphism hom\" \"app_iso hom G = c_K5\""], ["proof (prove)\nusing this:\n  digraph_iso G (with_proj c_K5)\n\ngoal (1 subgoal):\n 1. (\\<And>hom.\n        \\<lbrakk>digraph_isomorphism hom;\n         app_iso hom G = with_proj c_K5\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K5\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "then"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K5", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K5\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "using c_K5_not_comb_planar comb_planar_iso"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K5\n  \\<not> comb_planar (with_proj c_K5)\n  digraph_isomorphism ?hom \\<Longrightarrow>\n  comb_planar (app_iso ?hom G) = comb_planar G\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "by fastforce"], ["proof (state)\nthis:\n  \\<not> comb_planar G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma K33_not_comb_planar:\n  assumes \"K\\<^bsub>3,3\\<^esub> G\" shows \"\\<not>comb_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "interpret graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  K\\<^bsub>3,3\\<^esub> G\n\ngoal (1 subgoal):\n 1. graph G", "by (auto simp: complete_bipartite_digraph_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "have \"digraph_iso G c_K33\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_iso G (with_proj c_K33)", "using assms complete_c_K33"], ["proof (prove)\nusing this:\n  K\\<^bsub>3,3\\<^esub> G\n  K\\<^bsub>3,3\\<^esub> (with_proj c_K33)\n\ngoal (1 subgoal):\n 1. digraph_iso G (with_proj c_K33)", "by (rule complete_bipartite_digraph_are_iso)"], ["proof (state)\nthis:\n  digraph_iso G (with_proj c_K33)\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "then"], ["proof (chain)\npicking this:\n  digraph_iso G (with_proj c_K33)", "obtain hom where hom: \"digraph_isomorphism hom\" \"app_iso hom G = c_K33\""], ["proof (prove)\nusing this:\n  digraph_iso G (with_proj c_K33)\n\ngoal (1 subgoal):\n 1. (\\<And>hom.\n        \\<lbrakk>digraph_isomorphism hom;\n         app_iso hom G = with_proj c_K33\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: digraph_iso_def)"], ["proof (state)\nthis:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K33\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "then"], ["proof (chain)\npicking this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K33", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K33\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "using c_K33_not_comb_planar comb_planar_iso"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n  app_iso hom G = with_proj c_K33\n  \\<not> comb_planar (with_proj c_K33)\n  digraph_isomorphism ?hom \\<Longrightarrow>\n  comb_planar (app_iso ?hom G) = comb_planar G\n\ngoal (1 subgoal):\n 1. \\<not> comb_planar G", "by fastforce"], ["proof (state)\nthis:\n  \\<not> comb_planar G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}