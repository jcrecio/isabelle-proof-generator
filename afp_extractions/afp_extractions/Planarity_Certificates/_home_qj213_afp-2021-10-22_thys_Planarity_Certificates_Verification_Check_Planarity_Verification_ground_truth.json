{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/Verification/Check_Planarity_Verification.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma mkg_simps:\n  \"verts (mk_graph IG) = set (ig_verts IG)\"\n  \"tail (mk_graph IG) = ig_tail IG\"\n  \"head (mk_graph IG) = ig_head IG\"", "lemma arcs_mkg: \"arcs (mk_graph IG) = {0..< length (ig_edges IG)}\"", "lemma arc_to_ends_mkg: \"arc_to_ends (mk_graph IG) a = ig_edges IG ! a\"", "lemma mkm_simps:\n  \"edge_rev (mk_map G iM) = perm_restrict (im_rev iM) (arcs G)\"\n  \"edge_succ (mk_map G iM) = perm_restrict (im_succ iM) (arcs G)\"", "lemma es_eq_im: \"a \\<in> arcs (mk_graph iG) \\<Longrightarrow> edge_succ (mk_map (mk_graph iG) iM) a = im_succ iM a\"", "lemma trivial_label: \"P \\<Longrightarrow> CTXT IC CT OC P\"", "lemma ovalidNF_wp:\n  assumes \"ovalidNF P c (\\<lambda>r s. r = x)\"\n  shows \"ovalidNF (\\<lambda>s. Q x s \\<and> P s) c Q\"", "lemma bij_betwI_finite_dom:\n  assumes \"finite A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>a. a \\<in> A \\<Longrightarrow> g (f a) = a\"\n  shows \"bij_betw f A A\"", "lemma permutesI_finite_dom:\n  assumes \"finite A\"\n  assumes \"f \\<in> A \\<rightarrow> A\"\n  assumes \"\\<And>a. a \\<notin> A \\<Longrightarrow> f a = a\"\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> g (f a) = a\"\n  shows \"f permutes A\"", "lemma orbit_ss:\n  assumes \"f \\<in> A \\<rightarrow> A\" \"a \\<in> A\"\n  shows \"orbit f a \\<subseteq> A\"", "lemma segment_eq_orbit:\n  assumes \"y \\<notin> orbit f x\" shows \"segment f x y = orbit f x\"", "lemma funpow_in_funcset:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" shows \"(f ^^ n) x \\<in> A\"", "lemma funpow_eq_funcset:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\"\n  shows \"(f ^^ n) x = (g ^^ n) x\"", "lemma funpow_dist1_eq_funcset:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\"\n  shows \"funpow_dist1 f x y = funpow_dist1 g x y\"", "lemma segment_cong0:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\" shows \"segment f x y = segment g x y\"", "lemma rev_ok_final:\n  assumes wf_iG: \"wf_digraph (mk_graph iG)\"\n  assumes rev: \"is_map_rev_ok_inv iG iM rev_i rev_ok\" \"is_map_final iG rev_i rev_ok\"\n  shows \"rev_ok \\<longleftrightarrow> bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma succ_ok_tail_eq:\n    \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> ig_tail iG (im_succ iM i) = ig_tail iG i \"", "lemma succ_ok_imp_pred:\n    \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> im_pred iM (im_succ iM i) = i\"", "lemma succ_ok_imp_permutes:\n    assumes \"succ_ok\"\n    shows \"edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\"", "lemma es_A2A: \"succ_ok \\<Longrightarrow> edge_succ (mk_map (mk_graph iG) iM) \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)\"", "lemma im_succ_le_length: \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> im_succ iM i < length (ig_edges iG)\"", "lemma orbit_es_eq_im:\n    \"succ_ok \\<Longrightarrow> a \\<in> arcs (mk_graph iG) \\<Longrightarrow> orbit (edge_succ (mk_map (mk_graph iG) iM)) a = orbit (im_succ iM) a\"", "lemma segment_es_eq_im:\n    \"succ_ok \\<Longrightarrow> a \\<in> arcs (mk_graph iG) \\<Longrightarrow> segment (edge_succ (mk_map (mk_graph iG) iM)) a b = segment (im_succ iM) a b\"", "lemma in_orbit_im_succE:\n    assumes \"j \\<in> orbit (im_succ iM) i\" \"succ_ok\" \"i < length (ig_edges iG)\"\n    obtains \"ig_tail iG j = ig_tail iG i\" \"j < length (ig_edges iG)\"", "lemma self_in_orbit_im_succ:\n    assumes \"succ_ok\" \"i < length (ig_edges iG)\" shows \"i \\<in> orbit (im_succ iM) i\"", "lemma ok_imp_digraph:\n    assumes rev_ok succ_ok so_ok\n    shows \"digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\"", "lemma digraph_imp_ok:\n    assumes dm: \"digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\"\n    assumes pred: \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> im_pred iM (im_succ iM i) = i\"\n    obtains rev_ok succ_ok so_ok", "lemma all_less_Suc_eq: \"(\\<forall>x < Suc n. P x) \\<longleftrightarrow> (\\<forall>x < n. P x) \\<and> P n\"", "lemma in_orbit_imp_in_segment:\n  assumes \"y \\<in> orbit f x\" \"x \\<noteq> y\" \"bij f\" shows \"y \\<in> segment f x (f y)\"", "lemma ovalidNF_is_map: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> wf_digraph (mk_graph iG))\n    (is_map iG iM)\n  (\\<lambda>r s. r \\<longleftrightarrow> digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and> (\\<forall>i < length (ig_edges iG). im_pred iM (im_succ iM i) = i))\n\"", "lemma (in sym_digraph) in_arcs_empty_iff:\n  \"in_arcs G v = {} \\<longleftrightarrow> out_arcs G v = {}\"", "lemma take_nth_distinct:\n  \"\\<lbrakk>distinct xs; n < length xs; xs ! n \\<in> set (take n xs)\\<rbrakk> \\<Longrightarrow> False\"", "lemma ovalidNF_isolated_nodes: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> sym_digraph (mk_graph iG))\n    (isolated_nodes iG)\n  (\\<lambda>r s. r = (card (pre_digraph.isolated_verts (mk_graph iG))))\"", "lemma finite_fcs_upto: \"finite (fcs_upto iM i)\"", "lemma card_orbit_eq_funpow_dist1:\n  assumes \"x \\<in> orbit f x\" shows \"card (orbit f x) = funpow_dist1 f x x\"", "lemma funpow_dist1_le:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> orbit f x\"\n  shows \"funpow_dist1 f x y \\<le> funpow_dist1 f x x\"", "lemma funpow_dist1_le_card:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> orbit f x\"\n  shows \"funpow_dist1 f x y \\<le> card (orbit f x)\"", "lemma (in digraph_map) funpow_dist1_le_card_fcs:\n  assumes \"b \\<in> face_cycle_set a\"\n  shows \"funpow_dist1 face_cycle_succ a b \\<le> card (face_cycle_set a)\"", "lemma funpow_dist1_f_eq:\n  assumes \"b \\<in> orbit f a\" \"a \\<in> orbit f a\" \"a \\<noteq> b\"\n  shows \"funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\"", "lemma (in -) funpow_dist1_less_f:\n  assumes \"b \\<in> orbit f a\" \"a \\<in> orbit f a\" \"a \\<noteq> b\"\n  shows \"funpow_dist1 f a b < funpow_dist1 f a (f b)\"", "lemma ovalidNF_face_cycles: \"\n  ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM)\n    (face_cycles iG iM)\n  (\\<lambda>r s. r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))\n\"", "lemma ovalidNF_euler_genus: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> digraph_map (mk_graph iG) iM \\<and> c = card (pre_digraph.sccs (mk_graph iG)))\n    (euler_genus iG iM c)\n  (\\<lambda>r s. r = pre_digraph_map.euler_genus (mk_graph iG) iM)\n\"", "lemma ovalidNF_certify: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> fin_digraph (mk_graph iG) \\<and> c = card (pre_digraph.sccs (mk_graph iG)))\n    (certify iG iM c)\n  (\\<lambda>r s. r \\<longleftrightarrow> pre_digraph_map.euler_genus (mk_graph iG) (mk_map (mk_graph iG) iM) = 0\n    \\<and> digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\n    \\<and> (\\<forall>i < length (ig_edges iG). im_pred iM (im_succ iM i) = i) )\n\""], "translations": [["", "lemma mkg_simps:\n  \"verts (mk_graph IG) = set (ig_verts IG)\"\n  \"tail (mk_graph IG) = ig_tail IG\"\n  \"head (mk_graph IG) = ig_head IG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts (mk_graph IG) = set (fst IG) &&&\n    tail (mk_graph IG) = ig_tail IG &&& head (mk_graph IG) = ig_head IG", "by (auto simp: mk_graph_def)"], ["", "lemma arcs_mkg: \"arcs (mk_graph IG) = {0..< length (ig_edges IG)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs (mk_graph IG) = {0..<length (snd IG)}", "by (auto simp: mk_graph_def)"], ["", "lemma arc_to_ends_mkg: \"arc_to_ends (mk_graph IG) a = ig_edges IG ! a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_ends (mk_graph IG) a = snd IG ! a", "by (auto simp: arc_to_ends_def mkg_simps ig_tail_def ig_head_def)"], ["", "definition mk_map :: \"(_, nat) pre_digraph \\<Rightarrow> IMap \\<Rightarrow> nat pre_map\" where\n  \"mk_map G iM \\<equiv> \\<lparr>\n    edge_rev = perm_restrict (im_rev iM) (arcs G),\n    edge_succ = perm_restrict (im_succ iM) (arcs G)\n  \\<rparr>\""], ["", "lemma mkm_simps:\n  \"edge_rev (mk_map G iM) = perm_restrict (im_rev iM) (arcs G)\"\n  \"edge_succ (mk_map G iM) = perm_restrict (im_succ iM) (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev (mk_map G iM) = perm_restrict (im_rev iM) (arcs G) &&&\n    edge_succ (mk_map G iM) = perm_restrict (im_succ iM) (arcs G)", "by (auto simp: mk_map_def)"], ["", "lemma es_eq_im: \"a \\<in> arcs (mk_graph iG) \\<Longrightarrow> edge_succ (mk_map (mk_graph iG) iM) a = im_succ iM a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n    edge_succ (mk_map (mk_graph iG) iM) a = im_succ iM a", "by (auto simp: mkm_simps arcs_mkg perm_restrict_simps)"], ["", "subsection \\<open>Implementation\\<close>"], ["", "definition \"is_map iG iM \\<equiv>\n  DO ecnt \\<leftarrow> oreturn (length (snd iG));\n     vcnt \\<leftarrow> oreturn (length (fst iG));\n     (i, revOk) \\<leftarrow> owhile\n      (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n      (\\<lambda>(i, ok).\n        DO\n          j \\<leftarrow> oreturn (im_rev iM i);\n          revIn \\<leftarrow> oreturn (j < length (ig_edges iG));\n          revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n          revRevs \\<leftarrow> oreturn (ig_edges iG ! j = prod.swap (ig_edges iG ! i));\n          invol \\<leftarrow> oreturn (im_rev iM j = i);\n          oreturn (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n        OD)\n      (0, True);\n     (i, succPerm) \\<leftarrow> owhile\n      (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n      (\\<lambda>(i, ok).\n        DO\n          j \\<leftarrow> oreturn (im_succ iM i);\n          succIn \\<leftarrow> oreturn (j < length (ig_edges iG));\n          succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n          isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n          oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n        OD)\n      (0, True);\n     (i, succOrbits, V, A) \\<leftarrow> owhile\n      (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n      (\\<lambda>(i, ok, V, A).\n        DO\n          (x,V,A) \\<leftarrow> ocondition (\\<lambda>_. ig_tail iG i \\<in> V)\n            (oreturn (i \\<in> A, V, A))\n            (DO\n              (A',j) \\<leftarrow> owhile\n                (\\<lambda>(A',j) s. j \\<notin> A')\n                (\\<lambda>(A',j). DO\n                    A' \\<leftarrow> oreturn (insert j A');\n                    j \\<leftarrow> oreturn (im_succ iM j);\n                    oreturn (A', j)\n                  OD)\n                ({},i);\n              V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n              oreturn (True,V,A \\<union> A')\n            OD);\n          oreturn (i + 1, x, V, A)\n        OD)\n      (0, True, {}, {});\n     oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n  OD\n\""], ["", "definition isolated_nodes :: \"IGraph \\<Rightarrow> _ \\<Rightarrow> nat option\" where\n\"isolated_nodes iG \\<equiv>\n  DO ecnt \\<leftarrow> oreturn (length (snd iG));\n     vcnt \\<leftarrow> oreturn (length (fst iG));\n     (i, nz) \\<leftarrow>\n     owhile\n      (\\<lambda>(i, nz) a. i < vcnt)\n      (\\<lambda>(i, nz).\n          DO v \\<leftarrow> oreturn (fst iG ! i);\n             j \\<leftarrow> oreturn 0;\n             ret \\<leftarrow> ocondition (\\<lambda>s. j < ecnt) (oreturn (ig_tail iG j \\<noteq> v)) (oreturn False);\n             ret \\<leftarrow> ocondition (\\<lambda>s. ret) (oreturn (ig_head iG j \\<noteq> v)) (oreturn ret);\n             (j, _) \\<leftarrow>\n             owhile\n              (\\<lambda>(j, cond) a. cond)\n              (\\<lambda>(j, cond).\n                  DO j \\<leftarrow> oreturn (j + 1);\n                     cond \\<leftarrow> ocondition (\\<lambda>s. j < ecnt) (oreturn (ig_tail iG j \\<noteq> v)) (oreturn False);\n                     cond \\<leftarrow> ocondition (\\<lambda>s. cond) (oreturn (ig_head iG j \\<noteq> v)) (oreturn cond);\n                     oreturn (j, cond)\n                  OD)\n              (j, ret);\n             nz \\<leftarrow> oreturn (if j = ecnt then nz + 1 else nz);\n             oreturn (i + 1, nz)\n          OD)\n      (0, 0);\n     oreturn nz\n  OD\""], ["", "definition face_cycles :: \"IGraph \\<Rightarrow> nat pre_map \\<Rightarrow> _  \\<Rightarrow> nat option\" where\n\"face_cycles iG iM \\<equiv>\n  DO ecnt \\<leftarrow> oreturn (length (snd iG));\n     (edge_info, c, i) \\<leftarrow>\n     owhile\n      (\\<lambda>(edge_info, c, i) s. i < ecnt)\n      (\\<lambda>(edge_info, c, i).\n          DO (edge_info, c) \\<leftarrow>\n             ocondition (\\<lambda>s. i \\<notin> edge_info)\n              (DO j \\<leftarrow> oreturn i;\n                  edge_info \\<leftarrow> oreturn (insert j edge_info);\n                  ret' \\<leftarrow> oreturn (pre_digraph_map.face_cycle_succ iM j);\n                  (edge_info, j) \\<leftarrow>\n                  owhile\n                   (\\<lambda>(edge_info, j) s. i \\<noteq> j)\n                   (\\<lambda>(edge_info, j).\n                       oreturn (insert j edge_info, pre_digraph_map.face_cycle_succ iM j))\n                   (edge_info, ret');\n                  oreturn (edge_info, c + 1)\n               OD)\n              (oreturn (edge_info, c));\n             oreturn (edge_info, c, i + 1)\n          OD)\n      ({}, 0, 0);\n     oreturn c\n  OD\""], ["", "definition \"euler_genus iG iM c \\<equiv>\n   DO n \\<leftarrow> oreturn (length (ig_edges iG));\n      m \\<leftarrow> oreturn (length (ig_verts iG));\n      nz \\<leftarrow> isolated_nodes iG;\n      fc \\<leftarrow> face_cycles iG iM;\n      oreturn ((int n div 2 + 2 * int c - int m - int nz - int fc) div 2)\n   OD\""], ["", "definition \"certify iG iM c \\<equiv>\n  DO\n     map \\<leftarrow> is_map iG iM;\n     ocondition (\\<lambda>_. map)\n       (DO\n          gen \\<leftarrow> euler_genus iG (mk_map (mk_graph iG) iM) c;\n          oreturn (gen = 0)\n       OD)\n       (oreturn False)\n  OD\""], ["", "subsection \\<open>Verification\\<close>"], ["", "context begin"], ["", "interpretation Labeling_Syntax"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma trivial_label: \"P \\<Longrightarrow> CTXT IC CT OC P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow> Case_Labeling.CTXT IC CT OC P", "unfolding LABEL_simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow> P", "."], ["", "end"], ["", "lemma ovalidNF_wp:\n  assumes \"ovalidNF P c (\\<lambda>r s. r = x)\"\n  shows \"ovalidNF (\\<lambda>s. Q x s \\<and> P s) c Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. Q x s \\<and> P s) c Q", "using assms"], ["proof (prove)\nusing this:\n  ovalidNF P c (\\<lambda>r s. r = x)\n\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. Q x s \\<and> P s) c Q", "unfolding ovalidNF_def"], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P s \\<longrightarrow>\n     c s \\<noteq> None \\<and>\n     (\\<forall>r. c s = Some r \\<longrightarrow> r = x)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       Q x s \\<and> P s \\<longrightarrow>\n       c s \\<noteq> None \\<and>\n       (\\<forall>r. c s = Some r \\<longrightarrow> Q r s)", "by auto"], ["", "subsubsection \\<open>@{term is_map}\\<close>"], ["", "definition \"is_map_rev_ok_inv iG iM k ok \\<equiv> ok \\<longleftrightarrow> (\\<forall>i < k.\n  im_rev iM i < length (ig_edges iG)\n  \\<and> ig_edges iG ! im_rev iM i = prod.swap (ig_edges iG ! i)\n  \\<and> im_rev iM i \\<noteq> i\n  \\<and> im_rev iM (im_rev iM i) = i)\n\""], ["", "definition \"is_map_succ_perm_inv iG iM k ok \\<equiv> ok \\<longleftrightarrow> (\\<forall>i < k.\n  im_succ iM i < length (ig_edges iG)\n  \\<and> ig_tail iG (im_succ iM i) = ig_tail iG i\n  \\<and> im_pred iM (im_succ iM i) = i)\n\""], ["", "definition \"is_map_succ_orbits_inv iG iM k ok V A \\<equiv>\n  A = (\\<Union>i<(if ok then k else k - 1). orbit (im_succ iM) i) \\<and>\n  V = {ig_tail iG i | i. i<(if ok then k else k - 1)} \\<and>\n  ok = (\\<forall>i < k. \\<forall>j < k. ig_tail iG i = ig_tail iG j \\<longrightarrow> j \\<in> orbit (im_succ iM) i)\n\""], ["", "definition \"is_map_succ_orbits_inner_inv iG iM i j A' \\<equiv>\n  A' = (if i = j \\<and> i \\<notin> A' then {} else {i} \\<union> segment (im_succ iM) i j)\n  \\<and> j \\<in> orbit (im_succ iM) i\n\""], ["", "definition \"is_map_final iG k ok \\<equiv> (ok \\<longrightarrow> k = length (ig_edges iG)) \\<and> k \\<le> length (ig_edges iG)\""], ["", "lemma bij_betwI_finite_dom:\n  assumes \"finite A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>a. a \\<in> A \\<Longrightarrow> g (f a) = a\"\n  shows \"bij_betw f A A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bij_betw f A A", "have \"inj_on f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A", "by (metis assms(3) inj_onI)"], ["proof (state)\nthis:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. bij_betw f A A", "moreover"], ["proof (state)\nthis:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. bij_betw f A A", "then"], ["proof (chain)\npicking this:\n  inj_on f A", "have \"f ` A = A\""], ["proof (prove)\nusing this:\n  inj_on f A\n\ngoal (1 subgoal):\n 1. f ` A = A", "by (metis Pi_iff assms(1-2) endo_inj_surj image_subsetI)"], ["proof (state)\nthis:\n  f ` A = A\n\ngoal (1 subgoal):\n 1. bij_betw f A A", "ultimately"], ["proof (chain)\npicking this:\n  inj_on f A\n  f ` A = A", "show ?thesis"], ["proof (prove)\nusing this:\n  inj_on f A\n  f ` A = A\n\ngoal (1 subgoal):\n 1. bij_betw f A A", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on f A\n  f ` A = A\n\ngoal (1 subgoal):\n 1. inj_on f A \\<and> f ` A = A", "by simp"], ["proof (state)\nthis:\n  bij_betw f A A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma permutesI_finite_dom:\n  assumes \"finite A\"\n  assumes \"f \\<in> A \\<rightarrow> A\"\n  assumes \"\\<And>a. a \\<notin> A \\<Longrightarrow> f a = a\"\n  assumes \"\\<And>a. a \\<in> A \\<Longrightarrow> g (f a) = a\"\n  shows \"f permutes A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f permutes A", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  f \\<in> A \\<rightarrow> A\n  ?a \\<notin> A \\<Longrightarrow> f ?a = ?a\n  ?a \\<in> A \\<Longrightarrow> g (f ?a) = ?a\n\ngoal (1 subgoal):\n 1. f permutes A", "by (intro bij_imp_permutes bij_betwI_finite_dom)"], ["", "lemma orbit_ss:\n  assumes \"f \\<in> A \\<rightarrow> A\" \"a \\<in> A\"\n  shows \"orbit f a \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "assume \"x \\<in> orbit f a\""], ["proof (state)\nthis:\n  x \\<in> orbit f a\n\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "then"], ["proof (chain)\npicking this:\n  x \\<in> orbit f a", "have \"x \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> orbit f a\n\ngoal (1 subgoal):\n 1. x \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> orbit f a\n  f \\<in> A \\<rightarrow> A\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by induct auto"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> orbit f a \\<Longrightarrow> ?x2 \\<in> A\n\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> orbit f a \\<Longrightarrow> ?x2 \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> orbit f a \\<Longrightarrow> ?x2 \\<in> A\n\ngoal (1 subgoal):\n 1. orbit f a \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  orbit f a \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma segment_eq_orbit:\n  assumes \"y \\<notin> orbit f x\" shows \"segment f x y = orbit f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment f x y = orbit f x", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa. xa \\<in> segment f x y \\<Longrightarrow> xa \\<in> orbit f x\n 2. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "fix z"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa. xa \\<in> segment f x y \\<Longrightarrow> xa \\<in> orbit f x\n 2. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "assume \"z \\<in> segment f x y\""], ["proof (state)\nthis:\n  z \\<in> segment f x y\n\ngoal (2 subgoals):\n 1. \\<And>xa. xa \\<in> segment f x y \\<Longrightarrow> xa \\<in> orbit f x\n 2. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "then"], ["proof (chain)\npicking this:\n  z \\<in> segment f x y", "show \"z \\<in> orbit f x\""], ["proof (prove)\nusing this:\n  z \\<in> segment f x y\n\ngoal (1 subgoal):\n 1. z \\<in> orbit f x", "by (rule segmentD_orbit)"], ["proof (state)\nthis:\n  z \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "fix z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "assume \"z \\<in> orbit f x\""], ["proof (state)\nthis:\n  z \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. \\<And>xa. xa \\<in> orbit f x \\<Longrightarrow> xa \\<in> segment f x y", "then"], ["proof (chain)\npicking this:\n  z \\<in> orbit f x", "show \"z \\<in> segment f x y\""], ["proof (prove)\nusing this:\n  z \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. z \\<in> segment f x y", "using assms"], ["proof (prove)\nusing this:\n  z \\<in> orbit f x\n  y \\<notin> orbit f x\n\ngoal (1 subgoal):\n 1. z \\<in> segment f x y", "by induct (auto intro: segment.intros orbit_eqI elim: orbit.cases)"], ["proof (state)\nthis:\n  z \\<in> segment f x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma funpow_in_funcset:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" shows \"(f ^^ n) x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ n) x \\<in> A", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. (f ^^ n) x \\<in> A", "by (induct n) auto"], ["", "lemma funpow_eq_funcset:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\"\n  shows \"(f ^^ n) x = (g ^^ n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ n) x = (g ^^ n) x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n  ?y \\<in> A \\<Longrightarrow> f ?y = g ?y\n\ngoal (1 subgoal):\n 1. (f ^^ n) x = (g ^^ n) x", "by (induct n) (auto, metis funpow_in_funcset)"], ["", "lemma funpow_dist1_eq_funcset:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\"\n  shows \"funpow_dist1 f x y = funpow_dist1 g x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "have \"y = (f ^^ funpow_dist1 f x y) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y = (f ^^ funpow_dist1 f x y) x", "by (metis assms(1) funpow_dist1_prop)"], ["proof (state)\nthis:\n  y = (f ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "also"], ["proof (state)\nthis:\n  y = (f ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "have \"\\<dots> = (g ^^ funpow_dist1 f x y) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ funpow_dist1 f x y) x = (g ^^ funpow_dist1 f x y) x", "by (metis assms(2-) funpow_eq_funcset)"], ["proof (state)\nthis:\n  (f ^^ funpow_dist1 f x y) x = (g ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "finally"], ["proof (chain)\npicking this:\n  y = (g ^^ funpow_dist1 f x y) x", "have *: \"y = (g ^^ funpow_dist1 f x y) x\""], ["proof (prove)\nusing this:\n  y = (g ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. y = (g ^^ funpow_dist1 f x y) x", "."], ["proof (state)\nthis:\n  y = (g ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "then"], ["proof (chain)\npicking this:\n  y = (g ^^ funpow_dist1 f x y) x", "have \"(g ^^ funpow_dist1 g x y) x = y\""], ["proof (prove)\nusing this:\n  y = (g ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. (g ^^ funpow_dist1 g x y) x = y", "by (metis funpow_dist1_prop1 zero_less_Suc)"], ["proof (state)\nthis:\n  (g ^^ funpow_dist1 g x y) x = y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "with *"], ["proof (chain)\npicking this:\n  y = (g ^^ funpow_dist1 f x y) x\n  (g ^^ funpow_dist1 g x y) x = y", "have gf: \"funpow_dist1 g x y \\<le> funpow_dist1 f x y\""], ["proof (prove)\nusing this:\n  y = (g ^^ funpow_dist1 f x y) x\n  (g ^^ funpow_dist1 g x y) x = y\n\ngoal (1 subgoal):\n 1. funpow_dist1 g x y \\<le> funpow_dist1 f x y", "by (metis funpow_dist1_least not_le zero_less_Suc)"], ["proof (state)\nthis:\n  funpow_dist1 g x y \\<le> funpow_dist1 f x y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "have \"(f ^^ funpow_dist1 g x y) x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ funpow_dist1 g x y) x = y", "using \\<open>(g ^^ funpow_dist1 g x y) x = y\\<close>"], ["proof (prove)\nusing this:\n  (g ^^ funpow_dist1 g x y) x = y\n\ngoal (1 subgoal):\n 1. (f ^^ funpow_dist1 g x y) x = y", "by (metis assms(2-) funpow_eq_funcset)"], ["proof (state)\nthis:\n  (f ^^ funpow_dist1 g x y) x = y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "then"], ["proof (chain)\npicking this:\n  (f ^^ funpow_dist1 g x y) x = y", "have fg: \"funpow_dist1 f x y \\<le> funpow_dist1 g x y\""], ["proof (prove)\nusing this:\n  (f ^^ funpow_dist1 g x y) x = y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> funpow_dist1 g x y", "using \\<open>y = (f ^^ _) x\\<close>"], ["proof (prove)\nusing this:\n  (f ^^ funpow_dist1 g x y) x = y\n  y = (f ^^ funpow_dist1 f x y) x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> funpow_dist1 g x y", "by (metis funpow_dist1_least not_le zero_less_Suc)"], ["proof (state)\nthis:\n  funpow_dist1 f x y \\<le> funpow_dist1 g x y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "from gf fg"], ["proof (chain)\npicking this:\n  funpow_dist1 g x y \\<le> funpow_dist1 f x y\n  funpow_dist1 f x y \\<le> funpow_dist1 g x y", "show ?thesis"], ["proof (prove)\nusing this:\n  funpow_dist1 g x y \\<le> funpow_dist1 f x y\n  funpow_dist1 f x y \\<le> funpow_dist1 g x y\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y = funpow_dist1 g x y", "by simp"], ["proof (state)\nthis:\n  funpow_dist1 f x y = funpow_dist1 g x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma segment_cong0:\n  assumes \"x \\<in> A\" \"f \\<in> A \\<rightarrow> A\" \"\\<And>y. y \\<in> A \\<Longrightarrow> f y = g y\" shows \"segment f x y = segment g x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment f x y = segment g x y", "proof (cases \"y \\<in> orbit f x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "case True"], ["proof (state)\nthis:\n  y \\<in> orbit f x\n\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "moreover"], ["proof (state)\nthis:\n  y \\<in> orbit f x\n\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n  ?y \\<in> A \\<Longrightarrow> f ?y = g ?y", "have \"orbit f x = orbit g x\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n  ?y \\<in> A \\<Longrightarrow> f ?y = g ?y\n\ngoal (1 subgoal):\n 1. orbit f x = orbit g x", "by (rule orbit_cong0)"], ["proof (state)\nthis:\n  orbit f x = orbit g x\n\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "moreover"], ["proof (state)\nthis:\n  orbit f x = orbit g x\n\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "have \"(f ^^ n) x = (g ^^ n) x \\<and> (f ^^ n) x \\<in> A\" for n"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ n) x = (g ^^ n) x \\<and> (f ^^ n) x \\<in> A", "by (induct n rule: nat.induct) (insert assms, auto)"], ["proof (state)\nthis:\n  (f ^^ ?n) x = (g ^^ ?n) x \\<and> (f ^^ ?n) x \\<in> A\n\ngoal (2 subgoals):\n 1. y \\<in> orbit f x \\<Longrightarrow> segment f x y = segment g x y\n 2. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "ultimately"], ["proof (chain)\npicking this:\n  y \\<in> orbit f x\n  orbit f x = orbit g x\n  (f ^^ ?n) x = (g ^^ ?n) x \\<and> (f ^^ ?n) x \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> orbit f x\n  orbit f x = orbit g x\n  (f ^^ ?n) x = (g ^^ ?n) x \\<and> (f ^^ ?n) x \\<in> A\n\ngoal (1 subgoal):\n 1. segment f x y = segment g x y", "using True"], ["proof (prove)\nusing this:\n  y \\<in> orbit f x\n  orbit f x = orbit g x\n  (f ^^ ?n) x = (g ^^ ?n) x \\<and> (f ^^ ?n) x \\<in> A\n  y \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. segment f x y = segment g x y", "by (auto simp: segment_altdef funpow_dist1_eq_funcset[OF _ assms])"], ["proof (state)\nthis:\n  segment f x y = segment g x y\n\ngoal (1 subgoal):\n 1. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "case False"], ["proof (state)\nthis:\n  y \\<notin> orbit f x\n\ngoal (1 subgoal):\n 1. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "moreover"], ["proof (state)\nthis:\n  y \\<notin> orbit f x\n\ngoal (1 subgoal):\n 1. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "from assms"], ["proof (chain)\npicking this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n  ?y \\<in> A \\<Longrightarrow> f ?y = g ?y", "have \"orbit f x = orbit g x\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  f \\<in> A \\<rightarrow> A\n  ?y \\<in> A \\<Longrightarrow> f ?y = g ?y\n\ngoal (1 subgoal):\n 1. orbit f x = orbit g x", "by (rule orbit_cong0)"], ["proof (state)\nthis:\n  orbit f x = orbit g x\n\ngoal (1 subgoal):\n 1. y \\<notin> orbit f x \\<Longrightarrow> segment f x y = segment g x y", "ultimately"], ["proof (chain)\npicking this:\n  y \\<notin> orbit f x\n  orbit f x = orbit g x", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<notin> orbit f x\n  orbit f x = orbit g x\n\ngoal (1 subgoal):\n 1. segment f x y = segment g x y", "by (simp add: segment_eq_orbit)"], ["proof (state)\nthis:\n  segment f x y = segment g x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_ok_final:\n  assumes wf_iG: \"wf_digraph (mk_graph iG)\"\n  assumes rev: \"is_map_rev_ok_inv iG iM rev_i rev_ok\" \"is_map_final iG rev_i rev_ok\"\n  shows \"rev_ok \\<longleftrightarrow> bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_ok =\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "assume \"rev_ok\""], ["proof (state)\nthis:\n  rev_ok\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "interpret wf_digraph \"mk_graph iG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (mk_graph iG)", "by (rule wf_iG)"], ["proof (state)\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "have rev_inv_sep:\n      \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> im_rev iM i < length (ig_edges iG)\"\n      \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> ig_edges iG ! im_rev iM i = prod.swap (ig_edges iG ! i)\"\n      \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> im_rev iM i \\<noteq> i\"\n      \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> im_rev iM (im_rev iM i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>i.\n         i < length (snd iG) \\<Longrightarrow>\n         im_rev iM i < length (snd iG)) &&&\n     (\\<And>i.\n         i < length (snd iG) \\<Longrightarrow>\n         snd iG ! im_rev iM i = prod.swap (snd iG ! i))) &&&\n    (\\<And>i.\n        i < length (snd iG) \\<Longrightarrow> im_rev iM i \\<noteq> i) &&&\n    (\\<And>i.\n        i < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM i) = i)", "using rev \\<open>rev_ok\\<close>"], ["proof (prove)\nusing this:\n  is_map_rev_ok_inv iG iM rev_i rev_ok\n  is_map_final iG rev_i rev_ok\n  rev_ok\n\ngoal (1 subgoal):\n 1. ((\\<And>i.\n         i < length (snd iG) \\<Longrightarrow>\n         im_rev iM i < length (snd iG)) &&&\n     (\\<And>i.\n         i < length (snd iG) \\<Longrightarrow>\n         snd iG ! im_rev iM i = prod.swap (snd iG ! i))) &&&\n    (\\<And>i.\n        i < length (snd iG) \\<Longrightarrow> im_rev iM i \\<noteq> i) &&&\n    (\\<And>i.\n        i < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM i) = i)", "by (auto simp: is_map_rev_ok_inv_def is_map_final_def)"], ["proof (state)\nthis:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "moreover"], ["proof (state)\nthis:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "{"], ["proof (state)\nthis:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "assume \"i < length (ig_edges iG)\""], ["proof (state)\nthis:\n  i < length (snd iG)\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "then"], ["proof (chain)\npicking this:\n  i < length (snd iG)", "have \"ig_tail iG (im_rev iM i) = ig_head iG i\""], ["proof (prove)\nusing this:\n  i < length (snd iG)\n\ngoal (1 subgoal):\n 1. ig_tail iG (im_rev iM i) = ig_head iG i", "using rev_inv_sep(2)"], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n\ngoal (1 subgoal):\n 1. ig_tail iG (im_rev iM i) = ig_head iG i", "by (cases \"ig_edges iG ! i\") (auto simp: ig_head_def ig_tail_def)"], ["proof (state)\nthis:\n  ig_tail iG (im_rev iM i) = ig_head iG i\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "}"], ["proof (state)\nthis:\n  ?i3 < length (snd iG) \\<Longrightarrow>\n  ig_tail iG (im_rev iM ?i3) = ig_head iG ?i3\n\ngoal (2 subgoals):\n 1. rev_ok \\<Longrightarrow>\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n 2. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "ultimately"], ["proof (chain)\npicking this:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n  ?i3 < length (snd iG) \\<Longrightarrow>\n  ig_tail iG (im_rev iM ?i3) = ig_head iG ?i3", "show ?R"], ["proof (prove)\nusing this:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n  ?i3 < length (snd iG) \\<Longrightarrow>\n  ig_tail iG (im_rev iM ?i3) = ig_head iG ?i3\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "using wf"], ["proof (prove)\nusing this:\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 < length (snd iG)\n  ?i1 < length (snd iG) \\<Longrightarrow>\n  snd iG ! im_rev iM ?i1 = prod.swap (snd iG ! ?i1)\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM ?i1 \\<noteq> ?i1\n  ?i1 < length (snd iG) \\<Longrightarrow> im_rev iM (im_rev iM ?i1) = ?i1\n  ?i3 < length (snd iG) \\<Longrightarrow>\n  ig_tail iG (im_rev iM ?i3) = ig_head iG ?i3\n  wf {(x, y). x < y}\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "by unfold_locales (auto simp: mkg_simps arcs_mkg mkm_simps perm_restrict_def)"], ["proof (state)\nthis:\n  bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "assume ?R"], ["proof (state)\nthis:\n  bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "let ?rev = \"perm_restrict (im_rev iM) (arcs (mk_graph iG))\""], ["proof (state)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "interpret bidirected_digraph \"mk_graph iG\" \"perm_restrict (im_rev iM) (arcs (mk_graph iG))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (perm_restrict (im_rev iM) (arcs (mk_graph iG)))", "using \\<open>?R\\<close>"], ["proof (prove)\nusing this:\n  bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (perm_restrict (im_rev iM) (arcs (mk_graph iG)))", "by (simp add: mkm_simps mkg_simps)"], ["proof (state)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "have \"\\<And>a. a \\<in> arcs (mk_graph iG) \\<Longrightarrow> ?rev a \\<in> arcs (mk_graph iG)\"\n       \"\\<And>a. a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n        arc_to_ends (mk_graph iG) (?rev a) = prod.swap (arc_to_ends (mk_graph iG) a)\"\n       \"\\<And>a. a \\<in> arcs (mk_graph iG) \\<Longrightarrow> ?rev a \\<noteq> a\"\n       \"\\<And>a. a \\<in> arcs (mk_graph iG) \\<Longrightarrow> ?rev (?rev a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<And>a.\n         a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n         perm_restrict (im_rev iM) (arcs (mk_graph iG)) a\n         \\<in> arcs (mk_graph iG)) &&&\n     (\\<And>a.\n         a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n         arc_to_ends (mk_graph iG)\n          (perm_restrict (im_rev iM) (arcs (mk_graph iG)) a) =\n         prod.swap (arc_to_ends (mk_graph iG) a))) &&&\n    (\\<And>a.\n        a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n        perm_restrict (im_rev iM) (arcs (mk_graph iG)) a \\<noteq> a) &&&\n    (\\<And>a.\n        a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n        perm_restrict (im_rev iM) (arcs (mk_graph iG))\n         (perm_restrict (im_rev iM) (arcs (mk_graph iG)) a) =\n        a)", "by (auto simp: arev_dom)"], ["proof (state)\nthis:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1\n  \\<in> arcs (mk_graph iG)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  arc_to_ends (mk_graph iG)\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  prod.swap (arc_to_ends (mk_graph iG) ?a1)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1 \\<noteq> ?a1\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG))\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  ?a1\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<Longrightarrow>\n    rev_ok", "then"], ["proof (chain)\npicking this:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1\n  \\<in> arcs (mk_graph iG)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  arc_to_ends (mk_graph iG)\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  prod.swap (arc_to_ends (mk_graph iG) ?a1)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1 \\<noteq> ?a1\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG))\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  ?a1", "show rev_ok"], ["proof (prove)\nusing this:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1\n  \\<in> arcs (mk_graph iG)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  arc_to_ends (mk_graph iG)\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  prod.swap (arc_to_ends (mk_graph iG) ?a1)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1 \\<noteq> ?a1\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG))\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  ?a1\n\ngoal (1 subgoal):\n 1. rev_ok", "using rev"], ["proof (prove)\nusing this:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1\n  \\<in> arcs (mk_graph iG)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  arc_to_ends (mk_graph iG)\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  prod.swap (arc_to_ends (mk_graph iG) ?a1)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1 \\<noteq> ?a1\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG))\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  ?a1\n  is_map_rev_ok_inv iG iM rev_i rev_ok\n  is_map_final iG rev_i rev_ok\n\ngoal (1 subgoal):\n 1. rev_ok", "unfolding is_map_rev_ok_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1\n  \\<in> arcs (mk_graph iG)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  arc_to_ends (mk_graph iG)\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  prod.swap (arc_to_ends (mk_graph iG) ?a1)\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1 \\<noteq> ?a1\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  perm_restrict (im_rev iM) (arcs (mk_graph iG))\n   (perm_restrict (im_rev iM) (arcs (mk_graph iG)) ?a1) =\n  ?a1\n  rev_ok =\n  (\\<forall>i<rev_i.\n      im_rev iM i < length (snd iG) \\<and>\n      snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n      im_rev iM i \\<noteq> i \\<and> im_rev iM (im_rev iM i) = i)\n  (rev_ok \\<longrightarrow> rev_i = length (snd iG)) \\<and>\n  rev_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. rev_ok", "by (simp add: perm_restrict_simps arcs_mkg arc_to_ends_mkg)"], ["proof (state)\nthis:\n  rev_ok\n\ngoal:\nNo subgoals!", "qed"], ["", "locale is_map_postcondition0 =\n  fixes iG iM rev_ok succ_i succ_ok\n  assumes succ_perm: \"is_map_succ_perm_inv iG iM succ_i succ_ok\" \"is_map_final iG succ_i succ_ok\"\nbegin"], ["", "lemma succ_ok_tail_eq:\n    \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> ig_tail iG (im_succ iM i) = ig_tail iG i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> ig_tail iG (im_succ iM i) = ig_tail iG i", "using succ_perm"], ["proof (prove)\nusing this:\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> ig_tail iG (im_succ iM i) = ig_tail iG i", "unfolding is_map_succ_perm_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  succ_ok =\n  (\\<forall>i<succ_i.\n      im_succ iM i < length (snd iG) \\<and>\n      ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n      im_pred iM (im_succ iM i) = i)\n  (succ_ok \\<longrightarrow> succ_i = length (snd iG)) \\<and>\n  succ_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> ig_tail iG (im_succ iM i) = ig_tail iG i", "by auto"], ["", "lemma succ_ok_imp_pred:\n    \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> im_pred iM (im_succ iM i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> im_pred iM (im_succ iM i) = i", "using succ_perm"], ["proof (prove)\nusing this:\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> im_pred iM (im_succ iM i) = i", "unfolding is_map_succ_perm_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  succ_ok =\n  (\\<forall>i<succ_i.\n      im_succ iM i < length (snd iG) \\<and>\n      ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n      im_pred iM (im_succ iM i) = i)\n  (succ_ok \\<longrightarrow> succ_i = length (snd iG)) \\<and>\n  succ_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> im_pred iM (im_succ iM i) = i", "by auto"], ["", "lemma succ_ok_imp_permutes:\n    assumes \"succ_ok\"\n    shows \"edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)", "from assms"], ["proof (chain)\npicking this:\n  succ_ok", "have \"\\<forall>a \\<in> arcs (mk_graph iG). edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)\""], ["proof (prove)\nusing this:\n  succ_ok\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>arcs (mk_graph iG).\n       edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)", "using succ_perm"], ["proof (prove)\nusing this:\n  succ_ok\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>arcs (mk_graph iG).\n       edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)", "unfolding is_map_succ_perm_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  succ_ok\n  succ_ok =\n  (\\<forall>i<succ_i.\n      im_succ iM i < length (snd iG) \\<and>\n      ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n      im_pred iM (im_succ iM i) = i)\n  (succ_ok \\<longrightarrow> succ_i = length (snd iG)) \\<and>\n  succ_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>arcs (mk_graph iG).\n       edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)", "by (auto simp: mkg_simps mkm_simps arcs_mkg perm_restrict_def)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>arcs (mk_graph iG).\n     edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)", "with succ_ok_imp_pred[OF assms]"], ["proof (chain)\npicking this:\n  ?i < length (snd iG) \\<Longrightarrow> im_pred iM (im_succ iM ?i) = ?i\n  \\<forall>a\\<in>arcs (mk_graph iG).\n     edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i < length (snd iG) \\<Longrightarrow> im_pred iM (im_succ iM ?i) = ?i\n  \\<forall>a\\<in>arcs (mk_graph iG).\n     edge_succ (mk_map (mk_graph iG) iM) a \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)", "by - (rule permutesI_finite_dom[where g=\"im_pred iM\"], auto simp: perm_restrict_simps mkm_simps arcs_mkg)"], ["proof (state)\nthis:\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma es_A2A: \"succ_ok \\<Longrightarrow> edge_succ (mk_map (mk_graph iG) iM) \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_ok \\<Longrightarrow>\n    edge_succ (mk_map (mk_graph iG) iM)\n    \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)", "using succ_ok_imp_permutes"], ["proof (prove)\nusing this:\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. succ_ok \\<Longrightarrow>\n    edge_succ (mk_map (mk_graph iG) iM)\n    \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)", "by (auto dest: permutes_in_image)"], ["", "lemma im_succ_le_length: \"succ_ok \\<Longrightarrow> i < length (ig_edges iG) \\<Longrightarrow> im_succ iM i < length (ig_edges iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> im_succ iM i < length (snd iG)", "using is_map_final_def is_map_succ_perm_inv_def succ_perm(1) succ_perm(2)"], ["proof (prove)\nusing this:\n  is_map_final ?iG ?k ?ok \\<equiv>\n  (?ok \\<longrightarrow> ?k = length (snd ?iG)) \\<and>\n  ?k \\<le> length (snd ?iG)\n  is_map_succ_perm_inv ?iG ?iM ?k ?ok \\<equiv>\n  ?ok =\n  (\\<forall>i<?k.\n      im_succ ?iM i < length (snd ?iG) \\<and>\n      ig_tail ?iG (im_succ ?iM i) = ig_tail ?iG i \\<and>\n      im_pred ?iM (im_succ ?iM i) = i)\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; i < length (snd iG)\\<rbrakk>\n    \\<Longrightarrow> im_succ iM i < length (snd iG)", "by auto"], ["", "lemma orbit_es_eq_im:\n    \"succ_ok \\<Longrightarrow> a \\<in> arcs (mk_graph iG) \\<Longrightarrow> orbit (edge_succ (mk_map (mk_graph iG) iM)) a = orbit (im_succ iM) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; a \\<in> arcs (mk_graph iG)\\<rbrakk>\n    \\<Longrightarrow> orbit (edge_succ (mk_map (mk_graph iG) iM)) a =\n                      orbit (im_succ iM) a", "using _ es_A2A es_eq_im"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM)\n  \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)\n  ?a \\<in> arcs (mk_graph ?iG) \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph ?iG) ?iM) ?a = im_succ ?iM ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; a \\<in> arcs (mk_graph iG)\\<rbrakk>\n    \\<Longrightarrow> orbit (edge_succ (mk_map (mk_graph iG) iM)) a =\n                      orbit (im_succ iM) a", "by (rule orbit_cong0)"], ["", "lemma segment_es_eq_im:\n    \"succ_ok \\<Longrightarrow> a \\<in> arcs (mk_graph iG) \\<Longrightarrow> segment (edge_succ (mk_map (mk_graph iG) iM)) a b = segment (im_succ iM) a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; a \\<in> arcs (mk_graph iG)\\<rbrakk>\n    \\<Longrightarrow> segment (edge_succ (mk_map (mk_graph iG) iM)) a b =\n                      segment (im_succ iM) a b", "using _ es_A2A es_eq_im"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM)\n  \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)\n  ?a \\<in> arcs (mk_graph ?iG) \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph ?iG) ?iM) ?a = im_succ ?iM ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>succ_ok; a \\<in> arcs (mk_graph iG)\\<rbrakk>\n    \\<Longrightarrow> segment (edge_succ (mk_map (mk_graph iG) iM)) a b =\n                      segment (im_succ iM) a b", "by (rule segment_cong0)"], ["", "lemma in_orbit_im_succE:\n    assumes \"j \\<in> orbit (im_succ iM) i\" \"succ_ok\" \"i < length (ig_edges iG)\"\n    obtains \"ig_tail iG j = ig_tail iG i\" \"j < length (ig_edges iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>ig_tail iG j = ig_tail iG i; j < length (snd iG)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms es_A2A"], ["proof (prove)\nusing this:\n  j \\<in> orbit (im_succ iM) i\n  succ_ok\n  i < length (snd iG)\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM)\n  \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>ig_tail iG j = ig_tail iG i; j < length (snd iG)\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by induct (force simp add: succ_ok_tail_eq es_eq_im arcs_mkg)+"], ["", "lemma self_in_orbit_im_succ:\n    assumes \"succ_ok\" \"i < length (ig_edges iG)\" shows \"i \\<in> orbit (im_succ iM) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) i", "have \"i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "using assms succ_ok_imp_permutes"], ["proof (prove)\nusing this:\n  succ_ok\n  i < length (snd iG)\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "by (intro permutation_self_in_orbit) (auto simp: permutation_permutes arcs_mkg)"], ["proof (state)\nthis:\n  i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) i", "with assms"], ["proof (chain)\npicking this:\n  succ_ok\n  i < length (snd iG)\n  i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "show ?thesis"], ["proof (prove)\nusing this:\n  succ_ok\n  i < length (snd iG)\n  i \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) i", "by (simp add:orbit_es_eq_im arcs_mkg)"], ["proof (state)\nthis:\n  i \\<in> orbit (im_succ iM) i\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale is_map_postcondition = is_map_postcondition0 +\n  fixes so_i so_ok V A\n  assumes rev: \"rev_ok \\<longleftrightarrow> bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\"\n  assumes succ_orbits: \"is_map_succ_orbits_inv iG iM so_i so_ok V A\" \"succ_ok \\<longrightarrow> is_map_final iG so_i so_ok\"\nbegin"], ["", "lemma ok_imp_digraph:\n    assumes rev_ok succ_ok so_ok\n    shows \"digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "interpret bidirected_digraph \"mk_graph iG\" \"edge_rev (mk_map (mk_graph iG) iM)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "using \\<open>rev_ok\\<close>"], ["proof (prove)\nusing this:\n  rev_ok\n\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "by (simp add: rev)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "from \\<open>succ_ok\\<close>"], ["proof (chain)\npicking this:\n  succ_ok", "have perm: \"edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\""], ["proof (prove)\nusing this:\n  succ_ok\n\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)", "by (simp add: succ_ok_imp_permutes)"], ["proof (state)\nthis:\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "from \\<open>succ_ok\\<close>"], ["proof (chain)\npicking this:\n  succ_ok", "have ig_tail: \"\\<And>a. a \\<in> arcs (mk_graph iG) \\<Longrightarrow> ig_tail iG (im_succ iM a) = ig_tail iG a\""], ["proof (prove)\nusing this:\n  succ_ok\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n       ig_tail iG (im_succ iM a) = ig_tail iG a", "by (simp_all add: succ_ok_tail_eq arcs_mkg)"], ["proof (state)\nthis:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?a1) = ig_tail iG ?a1\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "{"], ["proof (state)\nthis:\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?a1) = ig_tail iG ?a1\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "assume \"v \\<in> verts (mk_graph iG)\" \"out_arcs (mk_graph iG) v \\<noteq> {}\""], ["proof (state)\nthis:\n  v \\<in> verts (mk_graph iG)\n  out_arcs (mk_graph iG) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts (mk_graph iG)\n  out_arcs (mk_graph iG) v \\<noteq> {}", "obtain a where a: \"a \\<in> arcs (mk_graph iG)\" \"tail (mk_graph iG) a = v\""], ["proof (prove)\nusing this:\n  v \\<in> verts (mk_graph iG)\n  out_arcs (mk_graph iG) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> arcs (mk_graph iG);\n         tail (mk_graph iG) a = v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto metis"], ["proof (state)\nthis:\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v", "have \"out_arcs (mk_graph iG) v = {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\""], ["proof (prove)\nusing this:\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n\ngoal (1 subgoal):\n 1. out_arcs (mk_graph iG) v =\n    {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}", "by (auto simp: mkg_simps)"], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) v =\n  {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "also"], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) v =\n  {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "have \"\\<dots> \\<subseteq> orbit (im_succ iM) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n    \\<subseteq> orbit (im_succ iM) a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n    \\<subseteq> orbit (im_succ iM) a", "have \"(\\<forall>i<length (snd iG). \\<forall>j<length (snd iG).\n            ig_tail iG i = ig_tail iG j \\<longrightarrow> j \\<in> orbit (im_succ iM) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (snd iG).\n       \\<forall>j<length (snd iG).\n          ig_tail iG i = ig_tail iG j \\<longrightarrow>\n          j \\<in> orbit (im_succ iM) i", "using \\<open>succ_ok \\<close>\\<open>so_ok\\<close> succ_orbits"], ["proof (prove)\nusing this:\n  succ_ok\n  so_ok\n  is_map_succ_orbits_inv iG iM so_i so_ok V A\n  succ_ok \\<longrightarrow> is_map_final iG so_i so_ok\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (snd iG).\n       \\<forall>j<length (snd iG).\n          ig_tail iG i = ig_tail iG j \\<longrightarrow>\n          j \\<in> orbit (im_succ iM) i", "unfolding is_map_succ_orbits_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  succ_ok\n  so_ok\n  A =\n  \\<Union>\n   (orbit (im_succ iM) ` {..<if so_ok then so_i else so_i - 1}) \\<and>\n  V = {ig_tail iG i |i. i < (if so_ok then so_i else so_i - 1)} \\<and>\n  so_ok =\n  (\\<forall>i<so_i.\n      \\<forall>j<so_i.\n         ig_tail iG i = ig_tail iG j \\<longrightarrow>\n         j \\<in> orbit (im_succ iM) i)\n  succ_ok \\<longrightarrow>\n  (so_ok \\<longrightarrow> so_i = length (snd iG)) \\<and>\n  so_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (snd iG).\n       \\<forall>j<length (snd iG).\n          ig_tail iG i = ig_tail iG j \\<longrightarrow>\n          j \\<in> orbit (im_succ iM) i", "by metis"], ["proof (state)\nthis:\n  \\<forall>i<length (snd iG).\n     \\<forall>j<length (snd iG).\n        ig_tail iG i = ig_tail iG j \\<longrightarrow>\n        j \\<in> orbit (im_succ iM) i\n\ngoal (1 subgoal):\n 1. {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n    \\<subseteq> orbit (im_succ iM) a", "with a"], ["proof (chain)\npicking this:\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n  \\<forall>i<length (snd iG).\n     \\<forall>j<length (snd iG).\n        ig_tail iG i = ig_tail iG j \\<longrightarrow>\n        j \\<in> orbit (im_succ iM) i", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n  \\<forall>i<length (snd iG).\n     \\<forall>j<length (snd iG).\n        ig_tail iG i = ig_tail iG j \\<longrightarrow>\n        j \\<in> orbit (im_succ iM) i\n\ngoal (1 subgoal):\n 1. {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n    \\<subseteq> orbit (im_succ iM) a", "by (auto simp: arcs_mkg)"], ["proof (state)\nthis:\n  {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n  \\<subseteq> orbit (im_succ iM) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {b \\<in> arcs (mk_graph iG). ig_tail iG a = ig_tail iG b}\n  \\<subseteq> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "finally"], ["proof (chain)\npicking this:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a", "have \"out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\""], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a", "."], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "moreover"], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "have \"orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "assume \"x \\<in> orbit (im_succ iM) a\""], ["proof (state)\nthis:\n  x \\<in> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "then"], ["proof (chain)\npicking this:\n  x \\<in> orbit (im_succ iM) a", "have \"tail (mk_graph iG) x = v\""], ["proof (prove)\nusing this:\n  x \\<in> orbit (im_succ iM) a\n\ngoal (1 subgoal):\n 1. tail (mk_graph iG) x = v", "using a ig_tail"], ["proof (prove)\nusing this:\n  x \\<in> orbit (im_succ iM) a\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n  ?a1 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?a1) = ig_tail iG ?a1\n\ngoal (1 subgoal):\n 1. tail (mk_graph iG) x = v", "apply induct"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>a \\<in> arcs (mk_graph iG); tail (mk_graph iG) a = v;\n     \\<And>a.\n        a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n        ig_tail iG (im_succ iM a) = ig_tail iG a\\<rbrakk>\n    \\<Longrightarrow> tail (mk_graph iG) (im_succ iM a) = v\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> orbit (im_succ iM) a;\n        \\<lbrakk>a \\<in> arcs (mk_graph iG); tail (mk_graph iG) a = v;\n         \\<And>a.\n            a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n            ig_tail iG (im_succ iM a) = ig_tail iG a\\<rbrakk>\n        \\<Longrightarrow> tail (mk_graph iG) y = v;\n        a \\<in> arcs (mk_graph iG); tail (mk_graph iG) a = v;\n        \\<And>a.\n           a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n           ig_tail iG (im_succ iM a) = ig_tail iG a\\<rbrakk>\n       \\<Longrightarrow> tail (mk_graph iG) (im_succ iM y) = v", "apply (auto simp: mkg_simps intro: orbit.intros)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> orbit (im_succ iM) a; a \\<in> arcs (mk_graph iG);\n        ig_tail iG a = ig_tail iG y;\n        \\<And>a.\n           a \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n           ig_tail iG (im_succ iM a) = ig_tail iG a;\n        v = ig_tail iG y\\<rbrakk>\n       \\<Longrightarrow> ig_tail iG (im_succ iM y) = ig_tail iG y", "by (metis \\<open>succ_ok\\<close> contra_subsetD orbit_es_eq_im permutes_orbit_subset perm)"], ["proof (state)\nthis:\n  tail (mk_graph iG) x = v\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "}"], ["proof (state)\nthis:\n  ?x3 \\<in> orbit (im_succ iM) a \\<Longrightarrow>\n  tail (mk_graph iG) ?x3 = v\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "moreover"], ["proof (state)\nthis:\n  ?x3 \\<in> orbit (im_succ iM) a \\<Longrightarrow>\n  tail (mk_graph iG) ?x3 = v\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "have \"orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)", "using _ a(1)"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  a \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)", "apply (rule orbit_ss)"], ["proof (prove)\ngoal (1 subgoal):\n 1. im_succ iM \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)", "using assms arcs_mkg is_map_final_def is_map_succ_perm_inv_def succ_perm(1) succ_perm(2)"], ["proof (prove)\nusing this:\n  rev_ok\n  succ_ok\n  so_ok\n  arcs (mk_graph ?IG) = {0..<length (snd ?IG)}\n  is_map_final ?iG ?k ?ok \\<equiv>\n  (?ok \\<longrightarrow> ?k = length (snd ?iG)) \\<and>\n  ?k \\<le> length (snd ?iG)\n  is_map_succ_perm_inv ?iG ?iM ?k ?ok \\<equiv>\n  ?ok =\n  (\\<forall>i<?k.\n      im_succ ?iM i < length (snd ?iG) \\<and>\n      ig_tail ?iG (im_succ ?iM i) = ig_tail ?iG i \\<and>\n      im_pred ?iM (im_succ ?iM i) = i)\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n\ngoal (1 subgoal):\n 1. im_succ iM \\<in> arcs (mk_graph iG) \\<rightarrow> arcs (mk_graph iG)", "by auto"], ["proof (state)\nthis:\n  orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "ultimately"], ["proof (chain)\npicking this:\n  ?x3 \\<in> orbit (im_succ iM) a \\<Longrightarrow>\n  tail (mk_graph iG) ?x3 = v\n  orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x3 \\<in> orbit (im_succ iM) a \\<Longrightarrow>\n  tail (mk_graph iG) ?x3 = v\n  orbit (im_succ iM) a \\<subseteq> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "by auto"], ["proof (state)\nthis:\n  orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "ultimately"], ["proof (chain)\npicking this:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n  orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v", "have \"out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a\""], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n  orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v\n\ngoal (1 subgoal):\n 1. out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a", "using \\<open>succ_ok\\<close> a"], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v \\<subseteq> orbit (im_succ iM) a\n  orbit (im_succ iM) a \\<subseteq> out_arcs (mk_graph iG) v\n  succ_ok\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n\ngoal (1 subgoal):\n 1. out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a", "by (auto simp: orbit_es_eq_im)"], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "then"], ["proof (chain)\npicking this:\n  out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a", "have \"cyclic_on (edge_succ (mk_map (mk_graph iG) iM)) (out_arcs (mk_graph iG) v)\""], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n     (out_arcs (mk_graph iG) v)", "unfolding cyclic_on_def"], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>out_arcs (mk_graph iG) v.\n       out_arcs (mk_graph iG) v =\n       orbit (edge_succ (mk_map (mk_graph iG) iM)) s", "using a"], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) v = orbit (edge_succ (mk_map (mk_graph iG) iM)) a\n  a \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) a = v\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>out_arcs (mk_graph iG) v.\n       out_arcs (mk_graph iG) v =\n       orbit (edge_succ (mk_map (mk_graph iG) iM)) s", "by force"], ["proof (state)\nthis:\n  cyclic_on (edge_succ (mk_map (mk_graph iG) iM)) (out_arcs (mk_graph iG) v)\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v3 \\<in> verts (mk_graph iG);\n   out_arcs (mk_graph iG) ?v3 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n                     (out_arcs (mk_graph iG) ?v3)\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "with perm"], ["proof (chain)\npicking this:\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  \\<lbrakk>?v3 \\<in> verts (mk_graph iG);\n   out_arcs (mk_graph iG) ?v3 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n                     (out_arcs (mk_graph iG) ?v3)", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  \\<lbrakk>?v3 \\<in> verts (mk_graph iG);\n   out_arcs (mk_graph iG) ?v3 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n                     (out_arcs (mk_graph iG) ?v3)\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "using \\<open>rev_ok\\<close>"], ["proof (prove)\nusing this:\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  \\<lbrakk>?v3 \\<in> verts (mk_graph iG);\n   out_arcs (mk_graph iG) ?v3 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n                     (out_arcs (mk_graph iG) ?v3)\n  rev_ok\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "by unfold_locales (auto simp: mkg_simps arcs_mkg)"], ["proof (state)\nthis:\n  digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma digraph_imp_ok:\n    assumes dm: \"digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\"\n    assumes pred: \"\\<And>i. i < length (ig_edges iG) \\<Longrightarrow> im_pred iM (im_succ iM i) = i\"\n    obtains rev_ok succ_ok so_ok"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    rev_ok\n 2. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    succ_ok\n 3. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    so_ok", "interpret dm: digraph_map \"mk_graph iG\" \"mk_map (mk_graph iG) iM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)", "by (fact dm)"], ["proof (state)\ngoal (3 subgoals):\n 1. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    rev_ok\n 2. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    succ_ok\n 3. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    so_ok", "show rev_ok"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_ok", "unfolding rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "by unfold_locales"], ["proof (state)\nthis:\n  rev_ok\n\ngoal (2 subgoals):\n 1. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    succ_ok\n 2. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    so_ok", "show succ_ok"], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_ok", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. succ_ok", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. succ_ok", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. succ_ok", "assume \"i \\<in> arcs (mk_graph iG)\""], ["proof (state)\nthis:\n  i \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. succ_ok", "then"], ["proof (chain)\npicking this:\n  i \\<in> arcs (mk_graph iG)", "have\n            \"edge_succ (mk_map (mk_graph iG) iM) i \\<in> arcs (mk_graph iG)\"\n            \"tail (mk_graph iG) (edge_succ (mk_map (mk_graph iG) iM) i) = tail (mk_graph iG) i\""], ["proof (prove)\nusing this:\n  i \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. edge_succ (mk_map (mk_graph iG) iM) i \\<in> arcs (mk_graph iG) &&&\n    tail (mk_graph iG) (edge_succ (mk_map (mk_graph iG) iM) i) =\n    tail (mk_graph iG) i", "by auto"], ["proof (state)\nthis:\n  edge_succ (mk_map (mk_graph iG) iM) i \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) (edge_succ (mk_map (mk_graph iG) iM) i) =\n  tail (mk_graph iG) i\n\ngoal (1 subgoal):\n 1. succ_ok", "then"], ["proof (chain)\npicking this:\n  edge_succ (mk_map (mk_graph iG) iM) i \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) (edge_succ (mk_map (mk_graph iG) iM) i) =\n  tail (mk_graph iG) i", "have\n            \"im_succ iM i < length (snd iG)\"\n            \"ig_tail iG (im_succ iM i) = ig_tail iG i\""], ["proof (prove)\nusing this:\n  edge_succ (mk_map (mk_graph iG) iM) i \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) (edge_succ (mk_map (mk_graph iG) iM) i) =\n  tail (mk_graph iG) i\n\ngoal (1 subgoal):\n 1. im_succ iM i < length (snd iG) &&&\n    ig_tail iG (im_succ iM i) = ig_tail iG i", "unfolding es_eq_im[OF \\<open>i \\<in> arcs _\\<close>]"], ["proof (prove)\nusing this:\n  im_succ iM i \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) (im_succ iM i) = tail (mk_graph iG) i\n\ngoal (1 subgoal):\n 1. im_succ iM i < length (snd iG) &&&\n    ig_tail iG (im_succ iM i) = ig_tail iG i", "by (auto simp: arcs_mkg mkg_simps)"], ["proof (state)\nthis:\n  im_succ iM i < length (snd iG)\n  ig_tail iG (im_succ iM i) = ig_tail iG i\n\ngoal (1 subgoal):\n 1. succ_ok", "}"], ["proof (state)\nthis:\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  im_succ iM ?i3 < length (snd iG)\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?i3) = ig_tail iG ?i3\n\ngoal (1 subgoal):\n 1. succ_ok", "then"], ["proof (chain)\npicking this:\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  im_succ iM ?i3 < length (snd iG)\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?i3) = ig_tail iG ?i3", "have \"(\\<forall>i<length (ig_edges iG).\n        im_succ iM i < length (snd iG) \\<and>\n        ig_tail iG (im_succ iM i) = ig_tail iG i \\<and> im_pred iM (im_succ iM i) = i)\""], ["proof (prove)\nusing this:\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  im_succ iM ?i3 < length (snd iG)\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?i3) = ig_tail iG ?i3\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (snd iG).\n       im_succ iM i < length (snd iG) \\<and>\n       ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n       im_pred iM (im_succ iM i) = i", "using pred"], ["proof (prove)\nusing this:\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  im_succ iM ?i3 < length (snd iG)\n  ?i3 \\<in> arcs (mk_graph iG) \\<Longrightarrow>\n  ig_tail iG (im_succ iM ?i3) = ig_tail iG ?i3\n  ?i < length (snd iG) \\<Longrightarrow> im_pred iM (im_succ iM ?i) = ?i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (snd iG).\n       im_succ iM i < length (snd iG) \\<and>\n       ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n       im_pred iM (im_succ iM i) = i", "by (auto simp: arcs_mkg es_eq_im)"], ["proof (state)\nthis:\n  \\<forall>i<length (snd iG).\n     im_succ iM i < length (snd iG) \\<and>\n     ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n     im_pred iM (im_succ iM i) = i\n\ngoal (1 subgoal):\n 1. succ_ok", "with succ_perm"], ["proof (chain)\npicking this:\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n  \\<forall>i<length (snd iG).\n     im_succ iM i < length (snd iG) \\<and>\n     ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n     im_pred iM (im_succ iM i) = i", "show ?thesis"], ["proof (prove)\nusing this:\n  is_map_succ_perm_inv iG iM succ_i succ_ok\n  is_map_final iG succ_i succ_ok\n  \\<forall>i<length (snd iG).\n     im_succ iM i < length (snd iG) \\<and>\n     ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n     im_pred iM (im_succ iM i) = i\n\ngoal (1 subgoal):\n 1. succ_ok", "unfolding is_map_succ_perm_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  succ_ok =\n  (\\<forall>i<succ_i.\n      im_succ iM i < length (snd iG) \\<and>\n      ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n      im_pred iM (im_succ iM i) = i)\n  (succ_ok \\<longrightarrow> succ_i = length (snd iG)) \\<and>\n  succ_i \\<le> length (snd iG)\n  \\<forall>i<length (snd iG).\n     im_succ iM i < length (snd iG) \\<and>\n     ig_tail iG (im_succ iM i) = ig_tail iG i \\<and>\n     im_pred iM (im_succ iM i) = i\n\ngoal (1 subgoal):\n 1. succ_ok", "by simp"], ["proof (state)\nthis:\n  succ_ok\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  succ_ok\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>rev_ok; succ_ok; so_ok\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    so_ok", "show so_ok"], ["proof (prove)\ngoal (1 subgoal):\n 1. so_ok", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. so_ok", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. so_ok", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. so_ok", "assume \"i < length (ig_edges iG)\" \"j < length (ig_edges iG)\" \"ig_tail iG i = ig_tail iG j\""], ["proof (state)\nthis:\n  i < length (snd iG)\n  j < length (snd iG)\n  ig_tail iG i = ig_tail iG j\n\ngoal (1 subgoal):\n 1. so_ok", "then"], ["proof (chain)\npicking this:\n  i < length (snd iG)\n  j < length (snd iG)\n  ig_tail iG i = ig_tail iG j", "have A: \"i \\<in> arcs (mk_graph iG)\" \"j \\<in> arcs (mk_graph iG)\" \"tail (mk_graph iG) i = tail (mk_graph iG) j\""], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  j < length (snd iG)\n  ig_tail iG i = ig_tail iG j\n\ngoal (1 subgoal):\n 1. i \\<in> arcs (mk_graph iG) &&&\n    j \\<in> arcs (mk_graph iG) &&&\n    tail (mk_graph iG) i = tail (mk_graph iG) j", "by (auto simp: mkg_simps arcs_mkg)"], ["proof (state)\nthis:\n  i \\<in> arcs (mk_graph iG)\n  j \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) i = tail (mk_graph iG) j\n\ngoal (1 subgoal):\n 1. so_ok", "then"], ["proof (chain)\npicking this:\n  i \\<in> arcs (mk_graph iG)\n  j \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) i = tail (mk_graph iG) j", "have \"cyclic_on (edge_succ (mk_map (mk_graph iG) iM)) (out_arcs (mk_graph iG) (tail (mk_graph iG) i))\""], ["proof (prove)\nusing this:\n  i \\<in> arcs (mk_graph iG)\n  j \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) i = tail (mk_graph iG) j\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n     (out_arcs (mk_graph iG) (tail (mk_graph iG) i))", "by (auto intro!: dm.edge_succ_cyclic)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n   (out_arcs (mk_graph iG) (tail (mk_graph iG) i))\n\ngoal (1 subgoal):\n 1. so_ok", "then"], ["proof (chain)\npicking this:\n  cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n   (out_arcs (mk_graph iG) (tail (mk_graph iG) i))", "have \"orbit (edge_succ (mk_map (mk_graph iG) iM)) i = out_arcs (mk_graph iG) (ig_tail iG i)\""], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ (mk_map (mk_graph iG) iM))\n   (out_arcs (mk_graph iG) (tail (mk_graph iG) i))\n\ngoal (1 subgoal):\n 1. orbit (edge_succ (mk_map (mk_graph iG) iM)) i =\n    out_arcs (mk_graph iG) (ig_tail iG i)", "by (simp add: \\<open>i \\<in> arcs (mk_graph iG)\\<close> mkg_simps orbit_cyclic_eq3)"], ["proof (state)\nthis:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i =\n  out_arcs (mk_graph iG) (ig_tail iG i)\n\ngoal (1 subgoal):\n 1. so_ok", "then"], ["proof (chain)\npicking this:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i =\n  out_arcs (mk_graph iG) (ig_tail iG i)", "have \"j \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\""], ["proof (prove)\nusing this:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i =\n  out_arcs (mk_graph iG) (ig_tail iG i)\n\ngoal (1 subgoal):\n 1. j \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "using A"], ["proof (prove)\nusing this:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i =\n  out_arcs (mk_graph iG) (ig_tail iG i)\n  i \\<in> arcs (mk_graph iG)\n  j \\<in> arcs (mk_graph iG)\n  tail (mk_graph iG) i = tail (mk_graph iG) j\n\ngoal (1 subgoal):\n 1. j \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "by (simp add: mkg_simps)"], ["proof (state)\nthis:\n  j \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (1 subgoal):\n 1. so_ok", "also"], ["proof (state)\nthis:\n  j \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (1 subgoal):\n 1. so_ok", "have \"orbit (edge_succ (mk_map (mk_graph iG) iM)) i = orbit (im_succ iM) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (edge_succ (mk_map (mk_graph iG) iM)) i = orbit (im_succ iM) i", "using \\<open>i \\<in> arcs _\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. orbit (edge_succ (mk_map (mk_graph iG) iM)) i = orbit (im_succ iM) i", "by (rule orbit_cong0) (fastforce, simp add: es_eq_im)"], ["proof (state)\nthis:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i = orbit (im_succ iM) i\n\ngoal (1 subgoal):\n 1. so_ok", "finally"], ["proof (chain)\npicking this:\n  j \\<in> orbit (im_succ iM) i", "have \"j \\<in> orbit (im_succ iM) i\""], ["proof (prove)\nusing this:\n  j \\<in> orbit (im_succ iM) i\n\ngoal (1 subgoal):\n 1. j \\<in> orbit (im_succ iM) i", "."], ["proof (state)\nthis:\n  j \\<in> orbit (im_succ iM) i\n\ngoal (1 subgoal):\n 1. so_ok", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i3 < length (snd iG); ?j3 < length (snd iG);\n   ig_tail iG ?i3 = ig_tail iG ?j3\\<rbrakk>\n  \\<Longrightarrow> ?j3 \\<in> orbit (im_succ iM) ?i3\n\ngoal (1 subgoal):\n 1. so_ok", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i3 < length (snd iG); ?j3 < length (snd iG);\n   ig_tail iG ?i3 = ig_tail iG ?j3\\<rbrakk>\n  \\<Longrightarrow> ?j3 \\<in> orbit (im_succ iM) ?i3", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i3 < length (snd iG); ?j3 < length (snd iG);\n   ig_tail iG ?i3 = ig_tail iG ?j3\\<rbrakk>\n  \\<Longrightarrow> ?j3 \\<in> orbit (im_succ iM) ?i3\n\ngoal (1 subgoal):\n 1. so_ok", "using succ_orbits"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i3 < length (snd iG); ?j3 < length (snd iG);\n   ig_tail iG ?i3 = ig_tail iG ?j3\\<rbrakk>\n  \\<Longrightarrow> ?j3 \\<in> orbit (im_succ iM) ?i3\n  is_map_succ_orbits_inv iG iM so_i so_ok V A\n  succ_ok \\<longrightarrow> is_map_final iG so_i so_ok\n\ngoal (1 subgoal):\n 1. so_ok", "unfolding is_map_succ_orbits_inv_def is_map_final_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i3 < length (snd iG); ?j3 < length (snd iG);\n   ig_tail iG ?i3 = ig_tail iG ?j3\\<rbrakk>\n  \\<Longrightarrow> ?j3 \\<in> orbit (im_succ iM) ?i3\n  A =\n  \\<Union>\n   (orbit (im_succ iM) ` {..<if so_ok then so_i else so_i - 1}) \\<and>\n  V = {ig_tail iG i |i. i < (if so_ok then so_i else so_i - 1)} \\<and>\n  so_ok =\n  (\\<forall>i<so_i.\n      \\<forall>j<so_i.\n         ig_tail iG i = ig_tail iG j \\<longrightarrow>\n         j \\<in> orbit (im_succ iM) i)\n  succ_ok \\<longrightarrow>\n  (so_ok \\<longrightarrow> so_i = length (snd iG)) \\<and>\n  so_i \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. so_ok", "by safe (simp_all only: \\<open>succ_ok\\<close> simp_thms)"], ["proof (state)\nthis:\n  so_ok\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  so_ok\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma all_less_Suc_eq: \"(\\<forall>x < Suc n. P x) \\<longleftrightarrow> (\\<forall>x < n. P x) \\<and> P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x<Suc n. P x) = ((\\<forall>x<n. P x) \\<and> P n)", "by (auto elim: less_SucE)"], ["", "lemma in_orbit_imp_in_segment:\n  assumes \"y \\<in> orbit f x\" \"x \\<noteq> y\" \"bij f\" shows \"y \\<in> segment f x (f y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> segment f x (f y)", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> orbit f x\n  x \\<noteq> y\n  bij f\n\ngoal (1 subgoal):\n 1. y \\<in> segment f x (f y)", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> f x; bij f\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment f x (f (f x))\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> orbit f x;\n        \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n        \\<Longrightarrow> y \\<in> segment f x (f y);\n        x \\<noteq> f y; bij f\\<rbrakk>\n       \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "case base"], ["proof (state)\nthis:\n  x \\<noteq> f x\n  bij f\n\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<noteq> f x; bij f\\<rbrakk>\n    \\<Longrightarrow> f x \\<in> segment f x (f (f x))\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> orbit f x;\n        \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n        \\<Longrightarrow> y \\<in> segment f x (f y);\n        x \\<noteq> f y; bij f\\<rbrakk>\n       \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> f x\n  bij f", "show ?case"], ["proof (prove)\nusing this:\n  x \\<noteq> f x\n  bij f\n\ngoal (1 subgoal):\n 1. f x \\<in> segment f x (f (f x))", "by (auto intro: segment.intros simp: bij_iff)"], ["proof (state)\nthis:\n  f x \\<in> segment f x (f (f x))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> orbit f x;\n        \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n        \\<Longrightarrow> y \\<in> segment f x (f y);\n        x \\<noteq> f y; bij f\\<rbrakk>\n       \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> orbit f x;\n        \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n        \\<Longrightarrow> y \\<in> segment f x (f y);\n        x \\<noteq> f y; bij f\\<rbrakk>\n       \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "case (step y)"], ["proof (state)\nthis:\n  y \\<in> orbit f x\n  \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n  \\<Longrightarrow> y \\<in> segment f x (f y)\n  x \\<noteq> f y\n  bij f\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> orbit f x;\n        \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n        \\<Longrightarrow> y \\<in> segment f x (f y);\n        x \\<noteq> f y; bij f\\<rbrakk>\n       \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. f y \\<in> segment f x (f (f y))", "proof (cases \"x = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> f y \\<in> segment f x (f (f y))\n 2. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow> f y \\<in> segment f x (f (f y))\n 2. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "then"], ["proof (chain)\npicking this:\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. f y \\<in> segment f x (f (f y))", "using step"], ["proof (prove)\nusing this:\n  x = y\n  y \\<in> orbit f x\n  \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n  \\<Longrightarrow> y \\<in> segment f x (f y)\n  x \\<noteq> f y\n  bij f\n\ngoal (1 subgoal):\n 1. f y \\<in> segment f x (f (f y))", "by (auto intro: segment.intros simp: bij_iff)"], ["proof (state)\nthis:\n  f y \\<in> segment f x (f (f y))\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "with step"], ["proof (chain)\npicking this:\n  y \\<in> orbit f x\n  \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n  \\<Longrightarrow> y \\<in> segment f x (f y)\n  x \\<noteq> f y\n  bij f\n  x \\<noteq> y", "have \"f y \\<noteq> f (f y)\""], ["proof (prove)\nusing this:\n  y \\<in> orbit f x\n  \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n  \\<Longrightarrow> y \\<in> segment f x (f y)\n  x \\<noteq> f y\n  bij f\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. f y \\<noteq> f (f y)", "by (metis bij_is_inj inv_f_f not_in_segment2)"], ["proof (state)\nthis:\n  f y \\<noteq> f (f y)\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow> f y \\<in> segment f x (f (f y))", "then"], ["proof (chain)\npicking this:\n  f y \\<noteq> f (f y)", "show ?thesis"], ["proof (prove)\nusing this:\n  f y \\<noteq> f (f y)\n\ngoal (1 subgoal):\n 1. f y \\<in> segment f x (f (f y))", "using step False"], ["proof (prove)\nusing this:\n  f y \\<noteq> f (f y)\n  y \\<in> orbit f x\n  \\<lbrakk>x \\<noteq> y; bij f\\<rbrakk>\n  \\<Longrightarrow> y \\<in> segment f x (f y)\n  x \\<noteq> f y\n  bij f\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. f y \\<in> segment f x (f (f y))", "by (auto intro: segment.intros segment_step_2 bij_is_inj)"], ["proof (state)\nthis:\n  f y \\<in> segment f x (f (f y))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f y \\<in> segment f x (f (f y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ovalidNF_is_map: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> wf_digraph (mk_graph iG))\n    (is_map iG iM)\n  (\\<lambda>r s. r \\<longleftrightarrow> digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and> (\\<forall>i < length (ig_edges iG). im_pred iM (im_succ iM i) = i))\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (is_map iG iM)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "unfolding is_map_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, revOk) \\<leftarrow>\n         owhile (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_rev iM i);\n                 revIn \\<leftarrow> oreturn (j < length (snd iG));\n                 revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n                 revRevs \\<leftarrow>\n                 oreturn (snd iG ! j = prod.swap (snd iG ! i));\n                 invol \\<leftarrow> oreturn (im_rev iM j = i);\n                 oreturn\n                  (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n              OD)\n          (0, True);\n         (i, succPerm) \\<leftarrow>\n         owhile (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_succ iM i);\n                 succIn \\<leftarrow> oreturn (j < length (snd iG));\n                 succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n                 isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n                 oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n              OD)\n          (0, True);\n         (i, succOrbits, V, A) \\<leftarrow>\n         owhile\n          (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n          (\\<lambda>(i, ok, V, A).\n              DO (x, V, A) \\<leftarrow>\n                 ocondition (\\<lambda>_. ig_tail iG i \\<in> V)\n                  (oreturn (i \\<in> A, V, A))\n                  (DO (A', j) \\<leftarrow>\n                      owhile (\\<lambda>(A', j) s. j \\<notin> A')\n                       (\\<lambda>(A', j).\n                           DO A' \\<leftarrow> oreturn (insert j A');\n                              j \\<leftarrow> oreturn (im_succ iM j);\n                              oreturn (A', j)\n                           OD)\n                       ({}, i);\n                      V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n                      oreturn (True, V, A \\<union> A')\n                   OD);\n                 oreturn (i + 1, x, V, A)\n              OD)\n          (0, True, {}, {});\n         oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "apply (rewrite\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(i, ok) s. is_map_rev_ok_inv iG iM i ok\n        \\<and> i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n      (measure (\\<lambda>(i, ok). ecnt - i))\n    \" owhile_inv_def[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, revOk) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_rev iM i);\n                 revIn \\<leftarrow> oreturn (j < length (snd iG));\n                 revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n                 revRevs \\<leftarrow>\n                 oreturn (snd iG ! j = prod.swap (snd iG ! i));\n                 invol \\<leftarrow> oreturn (im_rev iM j = i);\n                 oreturn\n                  (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_rev_ok_inv iG iM i ok \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succPerm) \\<leftarrow>\n         owhile (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_succ iM i);\n                 succIn \\<leftarrow> oreturn (j < length (snd iG));\n                 succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n                 isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n                 oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n              OD)\n          (0, True);\n         (i, succOrbits, V, A) \\<leftarrow>\n         owhile\n          (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n          (\\<lambda>(i, ok, V, A).\n              DO (x, V, A) \\<leftarrow>\n                 ocondition (\\<lambda>_. ig_tail iG i \\<in> V)\n                  (oreturn (i \\<in> A, V, A))\n                  (DO (A', j) \\<leftarrow>\n                      owhile (\\<lambda>(A', j) s. j \\<notin> A')\n                       (\\<lambda>(A', j).\n                           DO A' \\<leftarrow> oreturn (insert j A');\n                              j \\<leftarrow> oreturn (im_succ iM j);\n                              oreturn (A', j)\n                           OD)\n                       ({}, i);\n                      V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n                      oreturn (True, V, A \\<union> A')\n                   OD);\n                 oreturn (i + 1, x, V, A)\n              OD)\n          (0, True, {}, {});\n         oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "apply (rewrite\n    in \"owhile_inv _ _ _ _ _ |>> (\\<lambda>(rev_i, rev_ok). \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(i, ok) s. is_map_succ_perm_inv iG iM i ok\n        \\<and> rev_ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n        \\<and> i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n      (measure (\\<lambda>(i, ok). ecnt - i))\n    \" owhile_inv_def[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, revOk) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_rev iM i);\n                 revIn \\<leftarrow> oreturn (j < length (snd iG));\n                 revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n                 revRevs \\<leftarrow>\n                 oreturn (snd iG ! j = prod.swap (snd iG ! i));\n                 invol \\<leftarrow> oreturn (im_rev iM j = i);\n                 oreturn\n                  (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_rev_ok_inv iG iM i ok \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succPerm) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_succ iM i);\n                 succIn \\<leftarrow> oreturn (j < length (snd iG));\n                 succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n                 isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n                 oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_succ_perm_inv iG iM i ok \\<and>\n              revOk =\n              bidirected_digraph (mk_graph iG)\n               (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succOrbits, V, A) \\<leftarrow>\n         owhile\n          (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n          (\\<lambda>(i, ok, V, A).\n              DO (x, V, A) \\<leftarrow>\n                 ocondition (\\<lambda>_. ig_tail iG i \\<in> V)\n                  (oreturn (i \\<in> A, V, A))\n                  (DO (A', j) \\<leftarrow>\n                      owhile (\\<lambda>(A', j) s. j \\<notin> A')\n                       (\\<lambda>(A', j).\n                           DO A' \\<leftarrow> oreturn (insert j A');\n                              j \\<leftarrow> oreturn (im_succ iM j);\n                              oreturn (A', j)\n                           OD)\n                       ({}, i);\n                      V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n                      oreturn (True, V, A \\<union> A')\n                   OD);\n                 oreturn (i + 1, x, V, A)\n              OD)\n          (0, True, {}, {});\n         oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "apply (rewrite\n    in \"owhile_inv _ _ _ _ _ |>> (\\<lambda>(succ_i, succ_ok). \\<hole>)\"\n    in \"owhile_inv _ _ _ _ _ |>> (\\<lambda>(rev_i, rev_ok). \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(i, ok, V, A) s. is_map_succ_orbits_inv iG iM i ok V A\n        \\<and> rev_ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n        \\<and> is_map_succ_perm_inv iG iM succ_i succ_ok \\<and> is_map_final iG succ_i succ_ok\n        \\<and> i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n      (measure (\\<lambda>(i, ok, V, A). ecnt - i))\n    \" owhile_inv_def[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, revOk) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_rev iM i);\n                 revIn \\<leftarrow> oreturn (j < length (snd iG));\n                 revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n                 revRevs \\<leftarrow>\n                 oreturn (snd iG ! j = prod.swap (snd iG ! i));\n                 invol \\<leftarrow> oreturn (im_rev iM j = i);\n                 oreturn\n                  (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_rev_ok_inv iG iM i ok \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succPerm) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_succ iM i);\n                 succIn \\<leftarrow> oreturn (j < length (snd iG));\n                 succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n                 isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n                 oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_succ_perm_inv iG iM i ok \\<and>\n              revOk =\n              bidirected_digraph (mk_graph iG)\n               (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succOrbits, V, A) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv\n          (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n          (\\<lambda>(i, ok, V, A).\n              DO (x, V, A) \\<leftarrow>\n                 ocondition (\\<lambda>_. ig_tail iG i \\<in> V)\n                  (oreturn (i \\<in> A, V, A))\n                  (DO (A', j) \\<leftarrow>\n                      owhile (\\<lambda>(A', j) s. j \\<notin> A')\n                       (\\<lambda>(A', j).\n                           DO A' \\<leftarrow> oreturn (insert j A');\n                              j \\<leftarrow> oreturn (im_succ iM j);\n                              oreturn (A', j)\n                           OD)\n                       ({}, i);\n                      V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n                      oreturn (True, V, A \\<union> A')\n                   OD);\n                 oreturn (i + 1, x, V, A)\n              OD)\n          (0, True, {}, {})\n          (\\<lambda>(ia, ok, V, A) s.\n              is_map_succ_orbits_inv iG iM ia ok V A \\<and>\n              revOk =\n              bidirected_digraph (mk_graph iG)\n               (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n              is_map_succ_perm_inv iG iM i succPerm \\<and>\n              is_map_final iG i succPerm \\<and>\n              ia \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok, V, A). ecnt - i));\n         oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "apply (rewrite\n    in \"owhile_inv _ (\\<lambda>(i, ok, V, A). \\<hole>) _ _ _\"\n    in \"owhile_inv _ _ _ _ _ |>> (\\<lambda>(succ_i, succ_ok). \\<hole>)\"\n    in \"owhile_inv _ _ _ _ _ |>> (\\<lambda>(rev_i, rev_ok). \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(A', j) s. is_map_succ_orbits_inner_inv iG iM i j A'\n        \\<and> ig_tail iG i \\<notin> V \\<and> succ_ok \\<and> ok \\<and> is_map_succ_orbits_inv iG iM i ok V A\n        \\<and> rev_ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n        \\<and> is_map_succ_perm_inv iG iM succ_i succ_ok \\<and> is_map_final iG succ_i succ_ok\n        \\<and> i < ecnt \\<and> wf_digraph (mk_graph iG))\n      (measure (\\<lambda>(A',j). length (ig_edges iG) - card A'))\n    \" owhile_inv_def[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. distinct (fst iG) \\<and> wf_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, revOk) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_rev iM i);\n                 revIn \\<leftarrow> oreturn (j < length (snd iG));\n                 revNeq \\<leftarrow> oreturn (j \\<noteq> i);\n                 revRevs \\<leftarrow>\n                 oreturn (snd iG ! j = prod.swap (snd iG ! i));\n                 invol \\<leftarrow> oreturn (im_rev iM j = i);\n                 oreturn\n                  (i + 1, revIn \\<and> revNeq \\<and> revRevs \\<and> invol)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_rev_ok_inv iG iM i ok \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succPerm) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, ok) s. i < ecnt \\<and> ok)\n          (\\<lambda>(i, ok).\n              DO j \\<leftarrow> oreturn (im_succ iM i);\n                 succIn \\<leftarrow> oreturn (j < length (snd iG));\n                 succEnd \\<leftarrow> oreturn (ig_tail iG i = ig_tail iG j);\n                 isPerm \\<leftarrow> oreturn (im_pred iM j = i);\n                 oreturn (i + 1, succIn \\<and> succEnd \\<and> isPerm)\n              OD)\n          (0, True)\n          (\\<lambda>(i, ok) s.\n              is_map_succ_perm_inv iG iM i ok \\<and>\n              revOk =\n              bidirected_digraph (mk_graph iG)\n               (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n              i \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok). ecnt - i));\n         (i, succOrbits, V, A) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv\n          (\\<lambda>(i, ok, V, A) s. i < ecnt \\<and> succPerm \\<and> ok)\n          (\\<lambda>(ia, ok, V, A).\n              DO (x, V, A) \\<leftarrow>\n                 ocondition (\\<lambda>_. ig_tail iG ia \\<in> V)\n                  (oreturn (ia \\<in> A, V, A))\n                  (DO (A', j) \\<leftarrow>\n                      AutoCorres_Misc.owhile_inv\n                       (\\<lambda>(A', j) s. j \\<notin> A')\n                       (\\<lambda>(A', j).\n                           DO A' \\<leftarrow> oreturn (insert j A');\n                              j \\<leftarrow> oreturn (im_succ iM j);\n                              oreturn (A', j)\n                           OD)\n                       ({}, ia)\n                       (\\<lambda>(A', j) s.\n                           is_map_succ_orbits_inner_inv iG iM ia j A' \\<and>\n                           ig_tail iG ia \\<notin> V \\<and>\n                           succPerm \\<and>\n                           ok \\<and>\n                           is_map_succ_orbits_inv iG iM ia ok V A \\<and>\n                           revOk =\n                           bidirected_digraph (mk_graph iG)\n                            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                           is_map_succ_perm_inv iG iM i succPerm \\<and>\n                           is_map_final iG i succPerm \\<and>\n                           ia < ecnt \\<and> wf_digraph (mk_graph iG))\n                       (measure\n                         (\\<lambda>(A', j). length (snd iG) - card A'));\n                      V \\<leftarrow> oreturn (insert (ig_tail iG j) V);\n                      oreturn (True, V, A \\<union> A')\n                   OD);\n                 oreturn (ia + 1, x, V, A)\n              OD)\n          (0, True, {}, {})\n          (\\<lambda>(ia, ok, V, A) s.\n              is_map_succ_orbits_inv iG iM ia ok V A \\<and>\n              revOk =\n              bidirected_digraph (mk_graph iG)\n               (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n              is_map_succ_perm_inv iG iM i succPerm \\<and>\n              is_map_final iG i succPerm \\<and>\n              ia \\<le> ecnt \\<and> wf_digraph (mk_graph iG))\n          (measure (\\<lambda>(i, ok, V, A). ecnt - i));\n         oreturn (revOk \\<and> succPerm \\<and> succOrbits)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "proof vcg_casify"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 13 subgoals...", "let ?es = \"edge_succ (mk_map (mk_graph iG) iM)\""], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 13 subgoals...", "{"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 13 subgoals...", "case weaken"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (13 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG)", "show ?case"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (1 subgoal):\n 1. is_map_rev_ok_inv iG iM 0 True \\<and>\n    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)", "by (auto simp: is_map_rev_ok_inv_def)"], ["proof (state)\nthis:\n  is_map_rev_ok_inv iG iM 0 True \\<and>\n  0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "}"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG) \\<Longrightarrow>\n  is_map_rev_ok_inv iG iM 0 True \\<and>\n  0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG) \\<Longrightarrow>\n  is_map_rev_ok_inv iG iM 0 True \\<and>\n  0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "case (while i ok)"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "{"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "case weaken"], ["proof (state)\nthis:\n  i < length (snd iG) \\<and> ok\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (12 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b s sa.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         a < length (snd iG) \\<and> b; sa = s\\<rbrakk>\n        \\<Longrightarrow> (is_map_rev_ok_inv iG iM (a + 1)\n                            (im_rev iM a < length (snd iG) \\<and>\n                             im_rev iM a \\<noteq> a \\<and>\n                             snd iG ! im_rev iM a =\n                             prod.swap (snd iG ! a) \\<and>\n                             im_rev iM (im_rev iM a) = a) \\<and>\n                           a + 1 \\<le> length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG)) \\<and>\n                          ((a + 1,\n                            im_rev iM a < length (snd iG) \\<and>\n                            im_rev iM a \\<noteq> a \\<and>\n                            snd iG ! im_rev iM a =\n                            prod.swap (snd iG ! a) \\<and>\n                            im_rev iM (im_rev iM a) = a),\n                           a, b)\n                          \\<in> measure\n                                 (\\<lambda>(i, ok). length (snd iG) - i)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  i < length (snd iG) \\<and> ok\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s", "show ?case"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> ok\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. (is_map_rev_ok_inv iG iM (i + 1)\n      (im_rev iM i < length (snd iG) \\<and>\n       im_rev iM i \\<noteq> i \\<and>\n       snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n       im_rev iM (im_rev iM i) = i) \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1,\n      im_rev iM i < length (snd iG) \\<and>\n      im_rev iM i \\<noteq> i \\<and>\n      snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n      im_rev iM (im_rev iM i) = i),\n     i, ok)\n    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)", "by (auto simp: is_map_rev_ok_inv_def elim: less_SucE)"], ["proof (state)\nthis:\n  (is_map_rev_ok_inv iG iM (i + 1)\n    (im_rev iM i < length (snd iG) \\<and>\n     im_rev iM i \\<noteq> i \\<and>\n     snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n     im_rev iM (im_rev iM i) = i) \\<and>\n   i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n  ((i + 1,\n    im_rev iM i < length (snd iG) \\<and>\n    im_rev iM i \\<noteq> i \\<and>\n    snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n    im_rev iM (im_rev iM i) = i),\n   i, ok)\n  \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (11 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\nA total of 11 subgoals...", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> ok;\n   is_map_rev_ok_inv iG iM i ok \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = ?s2\\<rbrakk>\n  \\<Longrightarrow> (is_map_rev_ok_inv iG iM (i + 1)\n                      (im_rev iM i < length (snd iG) \\<and>\n                       im_rev iM i \\<noteq> i \\<and>\n                       snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n                       im_rev iM (im_rev iM i) = i) \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1,\n                      im_rev iM i < length (snd iG) \\<and>\n                      im_rev iM i \\<noteq> i \\<and>\n                      snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n                      im_rev iM (im_rev iM i) = i),\n                     i, ok)\n                    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (11 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\nA total of 11 subgoals...", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> ok;\n   is_map_rev_ok_inv iG iM i ok \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = ?s2\\<rbrakk>\n  \\<Longrightarrow> (is_map_rev_ok_inv iG iM (i + 1)\n                      (im_rev iM i < length (snd iG) \\<and>\n                       im_rev iM i \\<noteq> i \\<and>\n                       snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n                       im_rev iM (im_rev iM i) = i) \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1,\n                      im_rev iM i < length (snd iG) \\<and>\n                      im_rev iM i \\<noteq> i \\<and>\n                      snd iG ! im_rev iM i = prod.swap (snd iG ! i) \\<and>\n                      im_rev iM (im_rev iM i) = i),\n                     i, ok)\n                    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (11 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\nA total of 11 subgoals...", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (11 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba.\n       wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 9. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 10. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\nA total of 11 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))", "by auto"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (10 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 10. \\<And>a b s.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         \\<not> (a < length (snd iG) \\<and> b)\\<rbrakk>\n        \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                          b =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          0 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)", "}"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (10 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 10. \\<And>a b s.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         \\<not> (a < length (snd iG) \\<and> b)\\<rbrakk>\n        \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                          b =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          0 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)", "{"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (10 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 10. \\<And>a b s.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         \\<not> (a < length (snd iG) \\<and> b)\\<rbrakk>\n        \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                          b =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          0 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)", "case postcondition"], ["proof (state)\nthis:\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n\ngoal (10 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 10. \\<And>a b s.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         \\<not> (a < length (snd iG) \\<and> b)\\<rbrakk>\n        \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                          b =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          0 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)", "then"], ["proof (chain)\npicking this:\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)", "have \"ok \\<longleftrightarrow> bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\""], ["proof (prove)\nusing this:\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n\ngoal (1 subgoal):\n 1. ok =\n    bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "by (intro rev_ok_final) (auto simp: is_map_final_def)"], ["proof (state)\nthis:\n  ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n\ngoal (10 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))\n 10. \\<And>a b s.\n        \\<lbrakk>is_map_rev_ok_inv iG iM a b \\<and>\n                 a \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n         \\<not> (a < length (snd iG) \\<and> b)\\<rbrakk>\n        \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                          b =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          0 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)", "with postcondition"], ["proof (chain)\npicking this:\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n  ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))", "show ?case"], ["proof (prove)\nusing this:\n  is_map_rev_ok_inv iG iM i ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n  ok = bidirected_digraph (mk_graph iG) (edge_rev (mk_map (mk_graph iG) iM))\n\ngoal (1 subgoal):\n 1. is_map_succ_perm_inv iG iM 0 True \\<and>\n    ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)", "by (auto simp: is_map_succ_perm_inv_def)"], ["proof (state)\nthis:\n  is_map_succ_perm_inv iG iM 0 True \\<and>\n  ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_rev_ok_inv iG iM i ok \\<and>\n           i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (i < length (snd iG) \\<and> ok)\\<rbrakk>\n  \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                    ok =\n                    bidirected_digraph (mk_graph iG)\n                     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_rev_ok_inv iG iM ?i2 ?ok2 \\<and>\n           ?i2 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (?i2 < length (snd iG) \\<and> ?ok2)\\<rbrakk>\n  \\<Longrightarrow> is_map_succ_perm_inv iG iM 0 True \\<and>\n                    ?ok2 =\n                    bidirected_digraph (mk_graph iG)\n                     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "case (bind _ rev_ok)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "case (while i ok)"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "case weaken"], ["proof (state)\nthis:\n  i < length (snd iG) \\<and> ok\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (9 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s sa.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        aa < length (snd iG) \\<and> ba; sa = s\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_perm_inv iG iM (aa + 1)\n                           (im_succ iM aa < length (snd iG) \\<and>\n                            ig_tail iG aa =\n                            ig_tail iG (im_succ iM aa) \\<and>\n                            im_pred iM (im_succ iM aa) = aa) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          aa + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((aa + 1,\n                           im_succ iM aa < length (snd iG) \\<and>\n                           ig_tail iG aa = ig_tail iG (im_succ iM aa) \\<and>\n                           im_pred iM (im_succ iM aa) = aa),\n                          aa, ba)\n                         \\<in> measure\n                                (\\<lambda>(i, ok). length (snd iG) - i)\n 8. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 9. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "then"], ["proof (chain)\npicking this:\n  i < length (snd iG) \\<and> ok\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s", "show ?case"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> ok\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. (is_map_succ_perm_inv iG iM (i + 1)\n      (im_succ iM i < length (snd iG) \\<and>\n       ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n       im_pred iM (im_succ iM i) = i) \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1,\n      im_succ iM i < length (snd iG) \\<and>\n      ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n      im_pred iM (im_succ iM i) = i),\n     i, ok)\n    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)", "by (auto simp: is_map_succ_perm_inv_def elim: less_SucE)"], ["proof (state)\nthis:\n  (is_map_succ_perm_inv iG iM (i + 1)\n    (im_succ iM i < length (snd iG) \\<and>\n     ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n     im_pred iM (im_succ iM i) = i) \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n  ((i + 1,\n    im_succ iM i < length (snd iG) \\<and>\n    ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n    im_pred iM (im_succ iM i) = i),\n   i, ok)\n  \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (8 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 8. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> ok;\n   is_map_succ_perm_inv iG iM i ok \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = ?s2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_perm_inv iG iM (i + 1)\n                      (im_succ iM i < length (snd iG) \\<and>\n                       ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n                       im_pred iM (im_succ iM i) = i) \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1,\n                      im_succ iM i < length (snd iG) \\<and>\n                      ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n                      im_pred iM (im_succ iM i) = i),\n                     i, ok)\n                    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (8 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 8. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> ok;\n   is_map_succ_perm_inv iG iM i ok \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = ?s2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_perm_inv iG iM (i + 1)\n                      (im_succ iM i < length (snd iG) \\<and>\n                       ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n                       im_pred iM (im_succ iM i) = i) \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1,\n                      im_succ iM i < length (snd iG) \\<and>\n                      ig_tail iG i = ig_tail iG (im_succ iM i) \\<and>\n                      im_pred iM (im_succ iM i) = i),\n                     i, ok)\n                    \\<in> measure (\\<lambda>(i, ok). length (snd iG) - i)\n\ngoal (8 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 8. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)\n 8. \\<And>a b. wf (measure (\\<lambda>(i, ok). length (snd iG) - i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))", "by auto"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (7 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)", "}"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (7 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)", "{"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, ok) \\<Rightarrow> length (snd iG) - i))\n\ngoal (7 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)", "case postcondition"], ["proof (state)\nthis:\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n\ngoal (7 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))\n 7. \\<And>a b i revOk aa ba s.\n       \\<lbrakk>is_map_succ_perm_inv iG iM aa ba \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                aa \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (aa < length (snd iG) \\<and> ba)\\<rbrakk>\n       \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                         revOk =\n                         bidirected_digraph (mk_graph iG)\n                          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                         is_map_succ_perm_inv iG iM aa ba \\<and>\n                         is_map_final iG aa ba \\<and>\n                         0 \\<le> length (snd iG) \\<and>\n                         wf_digraph (mk_graph iG)", "then"], ["proof (chain)\npicking this:\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)", "show ?case"], ["proof (prove)\nusing this:\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> ok)\n\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM i ok \\<and>\n    is_map_final iG i ok \\<and>\n    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)", "by (auto simp: is_map_final_def is_map_succ_orbits_inv_def)"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM i ok \\<and>\n  is_map_final iG i ok \\<and>\n  0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_perm_inv iG iM i ok \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (i < length (snd iG) \\<and> ok)\\<rbrakk>\n  \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                    rev_ok =\n                    bidirected_digraph (mk_graph iG)\n                     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                    is_map_succ_perm_inv iG iM i ok \\<and>\n                    is_map_final iG i ok \\<and>\n                    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_perm_inv iG iM ?ia2 ?ok2 \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           ?ia2 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (?ia2 < length (snd iG) \\<and> ?ok2)\\<rbrakk>\n  \\<Longrightarrow> is_map_succ_orbits_inv iG iM 0 True {} {} \\<and>\n                    rev_ok =\n                    bidirected_digraph (mk_graph iG)\n                     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                    is_map_succ_perm_inv iG iM ?ia2 ?ok2 \\<and>\n                    is_map_final iG ?ia2 ?ok2 \\<and>\n                    0 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case (bind succ_i succ_ok)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case (while i ok V A)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case weaken"], ["proof (state)\nthis:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s", "interpret pc0: is_map_postcondition0 iG iM rev_ok succ_i succ_ok"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. is_map_postcondition0 iG iM succ_i succ_ok", "by unfold_locales auto"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from weaken.loop_cond"], ["proof (chain)\npicking this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok", "have \"i < length (ig_edges iG)\" succ_ok ok"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n\ngoal (1 subgoal):\n 1. i < length (snd iG) &&& succ_ok &&& ok", "by auto"], ["proof (state)\nthis:\n  i < length (snd iG)\n  succ_ok\n  ok\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "with weaken.loop_inv"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  i < length (snd iG)\n  succ_ok\n  ok", "have\n            V: \"V = {ig_tail iG k |k. k < i}\" and\n            A: \"A = (\\<Union> k<i. orbit (im_succ iM) k)\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  i < length (snd iG)\n  succ_ok\n  ok\n\ngoal (1 subgoal):\n 1. V = {ig_tail iG k |k. k < i} &&&\n    A = \\<Union> (orbit (im_succ iM) ` {..<i})", "by (simp_all add: is_map_succ_orbits_inv_def)"], ["proof (state)\nthis:\n  V = {ig_tail iG k |k. k < i}\n  A = \\<Union> (orbit (im_succ iM) ` {..<i})\n\ngoal (6 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s sa.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        ab < length (snd iG) \\<and> succPerm \\<and> ac; sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if ig_tail iG ab \\<in> ad\n                           then (is_map_succ_orbits_inv iG iM (ab + 1)\n                                  (ab \\<in> bb) ad bb \\<and>\n                                 revOk =\n                                 bidirected_digraph (mk_graph iG)\n                                  (edge_rev\n                                    (mk_map (mk_graph iG) iM)) \\<and>\n                                 is_map_succ_perm_inv iG iM ia\n                                  succPerm \\<and>\n                                 is_map_final iG ia succPerm \\<and>\n                                 ab + 1 \\<le> length (snd iG) \\<and>\n                                 wf_digraph (mk_graph iG)) \\<and>\n                                ((ab + 1, ab \\<in> bb, ad, bb), ab, ac, ad,\n                                 bb)\n                                \\<in> measure\n (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n                           else is_map_succ_orbits_inner_inv iG iM ab ab\n                                 {} \\<and>\n                                ig_tail iG ab \\<notin> ad \\<and>\n                                succPerm \\<and>\n                                ac \\<and>\n                                is_map_succ_orbits_inv iG iM ab ac ad\n                                 bb \\<and>\n                                revOk =\n                                bidirected_digraph (mk_graph iG)\n                                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                                is_map_succ_perm_inv iG iM ia\n                                 succPerm \\<and>\n                                is_map_final iG ia succPerm \\<and>\n                                ab < length (snd iG) \\<and>\n                                wf_digraph (mk_graph iG))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 6. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. BRANCH\n     (if ig_tail iG i \\<in> V\n      then (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n            rev_ok =\n            bidirected_digraph (mk_graph iG)\n             (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n            is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n            is_map_final iG succ_i succ_ok \\<and>\n            i + 1 \\<le> length (snd iG) \\<and>\n            wf_digraph (mk_graph iG)) \\<and>\n           ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n           \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n      else is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n           ig_tail iG i \\<notin> V \\<and>\n           succ_ok \\<and>\n           ok \\<and>\n           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i < length (snd iG) \\<and> wf_digraph (mk_graph iG))", "proof branch_casify"], ["proof (state)\ngoal (2 subgoals):\n 1. ig_tail iG i \\<in> V \\<Longrightarrow>\n    (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n 2. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "case \"then\""], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. ig_tail iG i \\<in> V \\<Longrightarrow>\n    (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n 2. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "case g"], ["proof (state)\nthis:\n  ig_tail iG i \\<in> V\n\ngoal (2 subgoals):\n 1. ig_tail iG i \\<in> V \\<Longrightarrow>\n    (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n 2. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "have V': \"V = {ig_tail iG ia |ia. ia < (if i \\<in> A then Suc i else Suc i - 1)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. V =\n    {ig_tail iG iaa |iaa. iaa < (if i \\<in> A then Suc i else Suc i - 1)}", "using g \\<open>V = _\\<close>"], ["proof (prove)\nusing this:\n  ig_tail iG i \\<in> V\n  V = {ig_tail iG k |k. k < i}\n\ngoal (1 subgoal):\n 1. V =\n    {ig_tail iG iaa |iaa. iaa < (if i \\<in> A then Suc i else Suc i - 1)}", "by (auto elim: less_SucE)"], ["proof (state)\nthis:\n  V = {ig_tail iG iaa |iaa. iaa < (if i \\<in> A then Suc i else Suc i - 1)}\n\ngoal (2 subgoals):\n 1. ig_tail iG i \\<in> V \\<Longrightarrow>\n    (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n 2. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "have \"is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "proof (cases \"i \\<in> A\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "case True"], ["proof (state)\nthis:\n  i \\<in> A\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "obtain j where j: \"j < i\" \"i \\<in> orbit (im_succ iM) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < i; i \\<in> orbit (im_succ iM) j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using True \\<open>A = _\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> A\n  A = \\<Union> (orbit (im_succ iM) ` {..<i})\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < i; i \\<in> orbit (im_succ iM) j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j < i\n  i \\<in> orbit (im_succ iM) j\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "have i_in_less_i: \"\\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x", "using True \\<open>A = _\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> A\n  A = \\<Union> (orbit (im_succ iM) ` {..<i})\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "have A': \"A = (\\<Union> i<if True then Suc i else Suc i - 1. orbit (im_succ iM) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A =\n    \\<Union> (orbit (im_succ iM) ` {..<if True then Suc i else Suc i - 1})", "using True"], ["proof (prove)\nusing this:\n  i \\<in> A\n\ngoal (1 subgoal):\n 1. A =\n    \\<Union> (orbit (im_succ iM) ` {..<if True then Suc i else Suc i - 1})", "unfolding \\<open>A = _\\<close>"], ["proof (prove)\nusing this:\n  i \\<in> \\<Union> (orbit (im_succ iM) ` {..<i})\n\ngoal (1 subgoal):\n 1. \\<Union> (orbit (im_succ iM) ` {..<i}) =\n    \\<Union> (orbit (im_succ iM) ` {..<if True then Suc i else Suc i - 1})", "by (auto 4 3 intro: orbit_trans elim: less_SucE)"], ["proof (state)\nthis:\n  A = \\<Union> (orbit (im_succ iM) ` {..<if True then Suc i else Suc i - 1})\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "have X: \"\\<forall>k<i. \\<forall>l<i. ig_tail iG k = ig_tail iG l \\<longrightarrow> l \\<in> orbit (im_succ iM) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<i.\n       \\<forall>l<i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "using weaken"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. \\<forall>k<i.\n       \\<forall>l<i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "unfolding is_map_succ_orbits_inv_def"], ["proof (prove)\nusing this:\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  (A = \\<Union> (orbit (im_succ iM) ` {..<if ok then i else i - 1}) \\<and>\n   V = {ig_tail iG i |i. i < (if ok then i else i - 1)} \\<and>\n   ok =\n   (\\<forall>i<i.\n       \\<forall>j<i.\n          ig_tail iG i = ig_tail iG j \\<longrightarrow>\n          j \\<in> orbit (im_succ iM) i)) \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. \\<forall>k<i.\n       \\<forall>l<i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "by metis"], ["proof (state)\nthis:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "moreover"], ["proof (state)\nthis:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "{"], ["proof (state)\nthis:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "fix j"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "assume j: \"j < i\" \"ig_tail iG j = ig_tail iG i\""], ["proof (state)\nthis:\n  j < i\n  ig_tail iG j = ig_tail iG i\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "from i_in_less_i"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x", "obtain k where k: \"k < i\" \"i \\<in> orbit (im_succ iM) k\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>{..<i}. i \\<in> orbit (im_succ iM) x\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>k < i; i \\<in> orbit (im_succ iM) k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  k < i\n  i \\<in> orbit (im_succ iM) k\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "then"], ["proof (chain)\npicking this:\n  k < i\n  i \\<in> orbit (im_succ iM) k", "have \"ig_tail iG k = ig_tail iG i\""], ["proof (prove)\nusing this:\n  k < i\n  i \\<in> orbit (im_succ iM) k\n\ngoal (1 subgoal):\n 1. ig_tail iG k = ig_tail iG i", "using \\<open>succ_ok\\<close> \\<open>i < _\\<close>"], ["proof (prove)\nusing this:\n  k < i\n  i \\<in> orbit (im_succ iM) k\n  succ_ok\n  i < length (snd iG)\n\ngoal (1 subgoal):\n 1. ig_tail iG k = ig_tail iG i", "by (auto elim: pc0.in_orbit_im_succE)"], ["proof (state)\nthis:\n  ig_tail iG k = ig_tail iG i\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "then"], ["proof (chain)\npicking this:\n  ig_tail iG k = ig_tail iG i", "have \"k \\<in> orbit (im_succ iM) j\""], ["proof (prove)\nusing this:\n  ig_tail iG k = ig_tail iG i\n\ngoal (1 subgoal):\n 1. k \\<in> orbit (im_succ iM) j", "using j \\<open>ig_tail iG k = _\\<close> k X"], ["proof (prove)\nusing this:\n  ig_tail iG k = ig_tail iG i\n  j < i\n  ig_tail iG j = ig_tail iG i\n  ig_tail iG k = ig_tail iG i\n  k < i\n  i \\<in> orbit (im_succ iM) k\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (1 subgoal):\n 1. k \\<in> orbit (im_succ iM) j", "by auto"], ["proof (state)\nthis:\n  k \\<in> orbit (im_succ iM) j\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "then"], ["proof (chain)\npicking this:\n  k \\<in> orbit (im_succ iM) j", "have \"i \\<in> orbit (im_succ iM) j\""], ["proof (prove)\nusing this:\n  k \\<in> orbit (im_succ iM) j\n\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) j", "using k"], ["proof (prove)\nusing this:\n  k \\<in> orbit (im_succ iM) j\n  k < i\n  i \\<in> orbit (im_succ iM) k\n\ngoal (1 subgoal):\n 1. i \\<in> orbit (im_succ iM) j", "by (auto intro: orbit_trans)"], ["proof (state)\nthis:\n  i \\<in> orbit (im_succ iM) j\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?ja2 < i; ig_tail iG ?ja2 = ig_tail iG i\\<rbrakk>\n  \\<Longrightarrow> i \\<in> orbit (im_succ iM) ?ja2\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n  \\<lbrakk>?ja2 < i; ig_tail iG ?ja2 = ig_tail iG i\\<rbrakk>\n  \\<Longrightarrow> i \\<in> orbit (im_succ iM) ?ja2", "have \"\\<forall>k<Suc i. \\<forall>l<Suc i. ig_tail iG k = ig_tail iG l \\<longrightarrow> l \\<in> orbit (im_succ iM) k\""], ["proof (prove)\nusing this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n  \\<lbrakk>?ja2 < i; ig_tail iG ?ja2 = ig_tail iG i\\<rbrakk>\n  \\<Longrightarrow> i \\<in> orbit (im_succ iM) ?ja2\n\ngoal (1 subgoal):\n 1. \\<forall>k<Suc i.\n       \\<forall>l<Suc i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "unfolding all_less_Suc_eq"], ["proof (prove)\nusing this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n  \\<lbrakk>?ja2 < i; ig_tail iG ?ja2 = ig_tail iG i\\<rbrakk>\n  \\<Longrightarrow> i \\<in> orbit (im_succ iM) ?ja2\n\ngoal (1 subgoal):\n 1. (\\<forall>k<i.\n        (\\<forall>l<i.\n            ig_tail iG k = ig_tail iG l \\<longrightarrow>\n            l \\<in> orbit (im_succ iM) k) \\<and>\n        (ig_tail iG k = ig_tail iG i \\<longrightarrow>\n         i \\<in> orbit (im_succ iM) k)) \\<and>\n    (\\<forall>l<i.\n        ig_tail iG i = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) i) \\<and>\n    (ig_tail iG i = ig_tail iG i \\<longrightarrow>\n     i \\<in> orbit (im_succ iM) i)", "using \\<open>i < _\\<close> \\<open>succ_ok\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n  \\<lbrakk>?ja2 < i; ig_tail iG ?ja2 = ig_tail iG i\\<rbrakk>\n  \\<Longrightarrow> i \\<in> orbit (im_succ iM) ?ja2\n  i < length (snd iG)\n  succ_ok\n\ngoal (1 subgoal):\n 1. (\\<forall>k<i.\n        (\\<forall>l<i.\n            ig_tail iG k = ig_tail iG l \\<longrightarrow>\n            l \\<in> orbit (im_succ iM) k) \\<and>\n        (ig_tail iG k = ig_tail iG i \\<longrightarrow>\n         i \\<in> orbit (im_succ iM) k)) \\<and>\n    (\\<forall>l<i.\n        ig_tail iG i = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) i) \\<and>\n    (ig_tail iG i = ig_tail iG i \\<longrightarrow>\n     i \\<in> orbit (im_succ iM) i)", "by (auto intro: orbit_swap pc0.self_in_orbit_im_succ)"], ["proof (state)\nthis:\n  \\<forall>k<Suc i.\n     \\<forall>l<Suc i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (2 subgoals):\n 1. i \\<in> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n 2. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "with True"], ["proof (chain)\npicking this:\n  i \\<in> A\n  \\<forall>k<Suc i.\n     \\<forall>l<Suc i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<in> A\n  \\<forall>k<Suc i.\n     \\<forall>l<Suc i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "by (simp only: A' V' simp_thms is_map_succ_orbits_inv_def)"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "case False"], ["proof (state)\nthis:\n  i \\<notin> A\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "from V g"], ["proof (chain)\npicking this:\n  V = {ig_tail iG k |k. k < i}\n  ig_tail iG i \\<in> V", "obtain j where j: \"j < i\" \"ig_tail iG j = ig_tail iG i\""], ["proof (prove)\nusing this:\n  V = {ig_tail iG k |k. k < i}\n  ig_tail iG i \\<in> V\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < i; ig_tail iG j = ig_tail iG i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j < i\n  ig_tail iG j = ig_tail iG i\n\ngoal (1 subgoal):\n 1. i \\<notin> A \\<Longrightarrow>\n    is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "with False"], ["proof (chain)\npicking this:\n  i \\<notin> A\n  j < i\n  ig_tail iG j = ig_tail iG i", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<notin> A\n  j < i\n  ig_tail iG j = ig_tail iG i\n\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "by (auto 0 3 simp: is_map_succ_orbits_inv_def V' A intro: exI[where x=j] exI[where x=i])"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n\ngoal (2 subgoals):\n 1. ig_tail iG i \\<in> V \\<Longrightarrow>\n    (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n 2. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "then"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A", "show ?case"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)", "using weaken"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM (Suc i) (i \\<in> A) V A\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)", "by auto"], ["proof (state)\nthis:\n  (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n  ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n  \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (1 subgoal):\n 1. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "case \"else\""], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "case g"], ["proof (state)\nthis:\n  ig_tail iG i \\<notin> V\n\ngoal (1 subgoal):\n 1. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "have \"is_map_succ_orbits_inner_inv iG iM i i {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inner_inv iG iM i i {}", "unfolding is_map_succ_orbits_inner_inv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {} =\n    (if i = i \\<and> i \\<notin> {} then {}\n     else {i} \\<union> segment (im_succ iM) i i) \\<and>\n    i \\<in> orbit (im_succ iM) i", "using \\<open>succ_ok\\<close> \\<open>i < _\\<close>"], ["proof (prove)\nusing this:\n  succ_ok\n  i < length (snd iG)\n\ngoal (1 subgoal):\n 1. {} =\n    (if i = i \\<and> i \\<notin> {} then {}\n     else {i} \\<union> segment (im_succ iM) i i) \\<and>\n    i \\<in> orbit (im_succ iM) i", "by (auto simp: pc0.self_in_orbit_im_succ)"], ["proof (state)\nthis:\n  is_map_succ_orbits_inner_inv iG iM i i {}\n\ngoal (1 subgoal):\n 1. ig_tail iG i \\<notin> V \\<Longrightarrow>\n    is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "with g weaken"], ["proof (chain)\npicking this:\n  ig_tail iG i \\<notin> V\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n  is_map_succ_orbits_inner_inv iG iM i i {}", "show ?case"], ["proof (prove)\nusing this:\n  ig_tail iG i \\<notin> V\n  i < length (snd iG) \\<and> succ_ok \\<and> ok\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sa = s\n  is_map_succ_orbits_inner_inv iG iM i i {}\n\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n    ig_tail iG i \\<notin> V \\<and>\n    succ_ok \\<and>\n    ok \\<and>\n    is_map_succ_orbits_inv iG iM i ok V A \\<and>\n    rev_ok =\n    bidirected_digraph (mk_graph iG)\n     (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n    is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n    is_map_final iG succ_i succ_ok \\<and>\n    i < length (snd iG) \\<and> wf_digraph (mk_graph iG)", "by blast"], ["proof (state)\nthis:\n  is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  BRANCH\n   (if ig_tail iG i \\<in> V\n    then (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A) V A \\<and>\n          rev_ok =\n          bidirected_digraph (mk_graph iG)\n           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n          is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n          is_map_final iG succ_i succ_ok \\<and>\n          i + 1 \\<le> length (snd iG) \\<and>\n          wf_digraph (mk_graph iG)) \\<and>\n         ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n         \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n    else is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n         ig_tail iG i \\<notin> V \\<and>\n         succ_ok \\<and>\n         ok \\<and>\n         is_map_succ_orbits_inv iG iM i ok V A \\<and>\n         rev_ok =\n         bidirected_digraph (mk_graph iG)\n          (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n         is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n         is_map_final iG succ_i succ_ok \\<and>\n         i < length (snd iG) \\<and> wf_digraph (mk_graph iG))\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> succ_ok \\<and> ok;\n   is_map_succ_orbits_inv iG iM i ok V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = s\\<rbrakk>\n  \\<Longrightarrow> BRANCH\n                     (if ig_tail iG i \\<in> V\n                      then (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A)\n                             V A \\<and>\n                            rev_ok =\n                            bidirected_digraph (mk_graph iG)\n                             (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                            is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                            is_map_final iG succ_i succ_ok \\<and>\n                            i + 1 \\<le> length (snd iG) \\<and>\n                            wf_digraph (mk_graph iG)) \\<and>\n                           ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n                           \\<in> measure\n                                  (\\<lambda>(i, ok, V, A).\nlength (snd iG) - i)\n                      else is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n                           ig_tail iG i \\<notin> V \\<and>\n                           succ_ok \\<and>\n                           ok \\<and>\n                           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n                           rev_ok =\n                           bidirected_digraph (mk_graph iG)\n                            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                           is_map_final iG succ_i succ_ok \\<and>\n                           i < length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG))\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG) \\<and> succ_ok \\<and> ok;\n   is_map_succ_orbits_inv iG iM i ok V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sa2 = s\\<rbrakk>\n  \\<Longrightarrow> BRANCH\n                     (if ig_tail iG i \\<in> V\n                      then (is_map_succ_orbits_inv iG iM (i + 1) (i \\<in> A)\n                             V A \\<and>\n                            rev_ok =\n                            bidirected_digraph (mk_graph iG)\n                             (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                            is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                            is_map_final iG succ_i succ_ok \\<and>\n                            i + 1 \\<le> length (snd iG) \\<and>\n                            wf_digraph (mk_graph iG)) \\<and>\n                           ((i + 1, i \\<in> A, V, A), i, ok, V, A)\n                           \\<in> measure\n                                  (\\<lambda>(i, ok, V, A).\nlength (snd iG) - i)\n                      else is_map_succ_orbits_inner_inv iG iM i i {} \\<and>\n                           ig_tail iG i \\<notin> V \\<and>\n                           succ_ok \\<and>\n                           ok \\<and>\n                           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n                           rev_ok =\n                           bidirected_digraph (mk_graph iG)\n                            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                           is_map_final iG succ_i succ_ok \\<and>\n                           i < length (snd iG) \\<and>\n                           wf_digraph (mk_graph iG))\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case \"if\""], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case else"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case (while A' i')"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case weaken"], ["proof (state)\nthis:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa", "interpret pc0: is_map_postcondition0 iG iM rev_ok succ_i succ_ok"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. is_map_postcondition0 iG iM succ_i succ_ok", "by unfold_locales auto"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"succ_ok\" \"i < length (ig_edges iG)\" \"i' \\<in> orbit (im_succ iM) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. succ_ok &&& i < length (snd iG) &&& i' \\<in> orbit (im_succ iM) i", "using weaken"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. succ_ok &&& i < length (snd iG) &&& i' \\<in> orbit (im_succ iM) i", "by (auto simp: is_map_succ_orbits_inner_inv_def)"], ["proof (state)\nthis:\n  succ_ok\n  i < length (snd iG)\n  i' \\<in> orbit (im_succ iM) i\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"i' < length (ig_edges iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' < length (snd iG)", "using \\<open>i' \\<in> _\\<close> \\<open>succ_ok\\<close> \\<open>i < _\\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> orbit (im_succ iM) i\n  succ_ok\n  i < length (snd iG)\n\ngoal (1 subgoal):\n 1. i' < length (snd iG)", "by (rule pc0.in_orbit_im_succE)"], ["proof (state)\nthis:\n  i' < length (snd iG)\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  i' < length (snd iG)\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "assume \"i' \\<in> orbit (im_succ iM) i\" \"i \\<noteq> i'\""], ["proof (state)\nthis:\n  i' \\<in> orbit (im_succ iM) i\n  i \\<noteq> i'\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i' \\<in> orbit (im_succ iM) i\n  i \\<noteq> i'", "have \"i' \\<in> orbit (?es) i\""], ["proof (prove)\nusing this:\n  i' \\<in> orbit (im_succ iM) i\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. i' \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "by (subst pc0.orbit_es_eq_im) (auto simp add: \\<open>succ_ok\\<close> \\<open>i < _\\<close> arcs_mkg)"], ["proof (state)\nthis:\n  i' \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i' \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i", "have \"i' \\<in> segment (?es) i (?es i')\""], ["proof (prove)\nusing this:\n  i' \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n\ngoal (1 subgoal):\n 1. i' \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n              (edge_succ (mk_map (mk_graph iG) iM) i')", "using \\<open>i \\<noteq> i'\\<close> pc0.succ_ok_imp_permutes \\<open>succ_ok \\<close>"], ["proof (prove)\nusing this:\n  i' \\<in> orbit (edge_succ (mk_map (mk_graph iG) iM)) i\n  i \\<noteq> i'\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  succ_ok\n\ngoal (1 subgoal):\n 1. i' \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n              (edge_succ (mk_map (mk_graph iG) iM) i')", "by (intro in_orbit_imp_in_segment) (auto simp: permutes_conv_has_dom)"], ["proof (state)\nthis:\n  i' \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n            (edge_succ (mk_map (mk_graph iG) iM) i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i' \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n            (edge_succ (mk_map (mk_graph iG) iM) i')", "have \"i' \\<in> segment (im_succ iM) i (im_succ iM i')\""], ["proof (prove)\nusing this:\n  i' \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n            (edge_succ (mk_map (mk_graph iG) iM) i')\n\ngoal (1 subgoal):\n 1. i' \\<in> segment (im_succ iM) i (im_succ iM i')", "by (subst pc0.segment_es_eq_im[symmetric] es_eq_im[symmetric];\n                  auto simp add: \\<open>succ_ok\\<close> \\<open>i < _\\<close> \\<open>i' < _\\<close> arcs_mkg)+"], ["proof (state)\nthis:\n  i' \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i' \\<in> orbit (im_succ iM) i; i \\<noteq> i'\\<rbrakk>\n  \\<Longrightarrow> i' \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "note X = this"], ["proof (state)\nthis:\n  \\<lbrakk>i' \\<in> orbit (im_succ iM) i; i \\<noteq> i'\\<rbrakk>\n  \\<Longrightarrow> i' \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i' \\<in> orbit (im_succ iM) i; i \\<noteq> i'\\<rbrakk>\n  \\<Longrightarrow> i' \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "fix x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "assume \"x \\<in> segment (im_succ iM) i i'\" \"i \\<noteq> i'\""], ["proof (state)\nthis:\n  x \\<in> segment (im_succ iM) i i'\n  i \\<noteq> i'\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment (im_succ iM) i i'\n  i \\<noteq> i'", "have \"x \\<in> segment (?es) i i'\""], ["proof (prove)\nusing this:\n  x \\<in> segment (im_succ iM) i i'\n  i \\<noteq> i'\n\ngoal (1 subgoal):\n 1. x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i i'", "by (subst pc0.segment_es_eq_im) (auto simp add: \\<open>succ_ok\\<close> \\<open>i < _\\<close> \\<open>i' < _\\<close> arcs_mkg)"], ["proof (state)\nthis:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i i'\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i i'", "have \"x \\<in> segment (?es) i (?es i')\""], ["proof (prove)\nusing this:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i i'\n\ngoal (1 subgoal):\n 1. x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n             (edge_succ (mk_map (mk_graph iG) iM) i')", "using \\<open>i \\<noteq> i'\\<close> pc0.succ_ok_imp_permutes \\<open>succ_ok \\<close>"], ["proof (prove)\nusing this:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i i'\n  i \\<noteq> i'\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  succ_ok\n\ngoal (1 subgoal):\n 1. x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n             (edge_succ (mk_map (mk_graph iG) iM) i')", "by (auto simp: permutes_conv_has_dom bij_is_inj intro: segment_step_2)"], ["proof (state)\nthis:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n           (edge_succ (mk_map (mk_graph iG) iM) i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n           (edge_succ (mk_map (mk_graph iG) iM) i')", "have \"x \\<in> segment (im_succ iM) i (im_succ iM i')\""], ["proof (prove)\nusing this:\n  x \\<in> segment (edge_succ (mk_map (mk_graph iG) iM)) i\n           (edge_succ (mk_map (mk_graph iG) iM) i')\n\ngoal (1 subgoal):\n 1. x \\<in> segment (im_succ iM) i (im_succ iM i')", "by (subst pc0.segment_es_eq_im[symmetric] es_eq_im[symmetric];\n                  auto simp add: \\<open>succ_ok\\<close> \\<open>i < _\\<close> \\<open>i' < _\\<close> arcs_mkg)+"], ["proof (state)\nthis:\n  x \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> segment (im_succ iM) i i'; i \\<noteq> i'\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "note Y = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x2 \\<in> segment (im_succ iM) i i'; i \\<noteq> i'\\<rbrakk>\n  \\<Longrightarrow> ?x2 \\<in> segment (im_succ iM) i (im_succ iM i')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have Z: \"is_map_succ_orbits_inner_inv iG iM i (im_succ iM i') (insert i' A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inner_inv iG iM i (im_succ iM i') (insert i' A')", "using weaken"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inner_inv iG iM i (im_succ iM i') (insert i' A')", "unfolding is_map_succ_orbits_inner_inv_def"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  (A' =\n   (if i = i' \\<and> i \\<notin> A' then {}\n    else {i} \\<union> segment (im_succ iM) i i') \\<and>\n   i' \\<in> orbit (im_succ iM) i) \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. insert i' A' =\n    (if i = im_succ iM i' \\<and> i \\<notin> insert i' A' then {}\n     else {i} \\<union> segment (im_succ iM) i (im_succ iM i')) \\<and>\n    im_succ iM i' \\<in> orbit (im_succ iM) i", "by (auto dest: segment_step_2D X Y simp: orbit.intros segment1_empty split: if_splits)"], ["proof (state)\nthis:\n  is_map_succ_orbits_inner_inv iG iM i (im_succ iM i') (insert i' A')\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"A' \\<subseteq> orbit (im_succ iM) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A' \\<subseteq> orbit (im_succ iM) i", "using weaken"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. A' \\<subseteq> orbit (im_succ iM) i", "unfolding is_map_succ_orbits_inner_inv_def"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  (A' =\n   (if i = i' \\<and> i \\<notin> A' then {}\n    else {i} \\<union> segment (im_succ iM) i i') \\<and>\n   i' \\<in> orbit (im_succ iM) i) \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n\ngoal (1 subgoal):\n 1. A' \\<subseteq> orbit (im_succ iM) i", "by (auto simp: pc0.self_in_orbit_im_succ dest: segmentD_orbit split: if_splits)"], ["proof (state)\nthis:\n  A' \\<subseteq> orbit (im_succ iM) i\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "also"], ["proof (state)\nthis:\n  A' \\<subseteq> orbit (im_succ iM) i\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"\\<dots> \\<subseteq> arcs (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (im_succ iM) i \\<subseteq> arcs (mk_graph iG)", "by (rule orbit_ss) (auto simp: arcs_mkg pc0.im_succ_le_length \\<open>succ_ok\\<close> \\<open>i < _\\<close>)"], ["proof (state)\nthis:\n  orbit (im_succ iM) i \\<subseteq> arcs (mk_graph iG)\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "finally"], ["proof (chain)\npicking this:\n  A' \\<subseteq> arcs (mk_graph iG)", "have \"card A' < card (arcs (mk_graph iG))\" \"finite A'\""], ["proof (prove)\nusing this:\n  A' \\<subseteq> arcs (mk_graph iG)\n\ngoal (1 subgoal):\n 1. card A' < card (arcs (mk_graph iG)) &&& finite A'", "using \\<open>i' \\<notin> A'\\<close>  \\<open>i' < _\\<close>"], ["proof (prove)\nusing this:\n  A' \\<subseteq> arcs (mk_graph iG)\n  i' \\<notin> A'\n  i' < length (snd iG)\n\ngoal (1 subgoal):\n 1. card A' < card (arcs (mk_graph iG)) &&& finite A'", "by - (intro psubset_card_mono, auto simp: arcs_mkg intro: finite_subset)"], ["proof (state)\nthis:\n  card A' < card (arcs (mk_graph iG))\n  finite A'\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  card A' < card (arcs (mk_graph iG))\n  finite A'", "have \"card A' < length (ig_edges iG)\""], ["proof (prove)\nusing this:\n  card A' < card (arcs (mk_graph iG))\n  finite A'\n\ngoal (1 subgoal):\n 1. card A' < length (snd iG)", "by (simp add: arcs_mkg)"], ["proof (state)\nthis:\n  card A' < length (snd iG)\n\ngoal (5 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa sb.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        bc \\<notin> ae; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM x\n                           (im_succ iM bc) (insert bc ae) \\<and>\n                          ig_tail iG x \\<notin> xb \\<and>\n                          succPerm \\<and>\n                          xa \\<and>\n                          is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x < length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((insert bc ae, im_succ iM bc), ae, bc)\n                         \\<in> measure\n                                (\\<lambda>(A', j).\n                                    length (snd iG) - card A')\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 5. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inner_inv iG iM i (im_succ iM i')\n      (insert i' A') \\<and>\n     ig_tail iG i \\<notin> V \\<and>\n     succ_ok \\<and>\n     ok \\<and>\n     is_map_succ_orbits_inv iG iM i ok V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i < length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((insert i' A', im_succ iM i'), A', i')\n    \\<in> measure (\\<lambda>(A', j). length (snd iG) - card A')", "using weaken Z \\<open>card A' < length _\\<close>"], ["proof (prove)\nusing this:\n  i' \\<notin> A'\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  sb = sa\n  is_map_succ_orbits_inner_inv iG iM i (im_succ iM i') (insert i' A')\n  card A' < length (snd iG)\n\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inner_inv iG iM i (im_succ iM i')\n      (insert i' A') \\<and>\n     ig_tail iG i \\<notin> V \\<and>\n     succ_ok \\<and>\n     ok \\<and>\n     is_map_succ_orbits_inv iG iM i ok V A \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i < length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((insert i' A', im_succ iM i'), A', i')\n    \\<in> measure (\\<lambda>(A', j). length (snd iG) - card A')", "by (auto simp: card_insert_if \\<open>finite A'\\<close>)"], ["proof (state)\nthis:\n  (is_map_succ_orbits_inner_inv iG iM i (im_succ iM i')\n    (insert i' A') \\<and>\n   ig_tail iG i \\<notin> V \\<and>\n   succ_ok \\<and>\n   ok \\<and>\n   is_map_succ_orbits_inv iG iM i ok V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i < length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n  ((insert i' A', im_succ iM i'), A', i')\n  \\<in> measure (\\<lambda>(A', j). length (snd iG) - card A')\n\ngoal (4 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i' \\<notin> A';\n   is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n   ig_tail iG i \\<notin> V \\<and>\n   succ_ok \\<and>\n   ok \\<and>\n   is_map_succ_orbits_inv iG iM i ok V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sb2 = ?sa2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM i (im_succ iM i')\n                      (insert i' A') \\<and>\n                     ig_tail iG i \\<notin> V \\<and>\n                     succ_ok \\<and>\n                     ok \\<and>\n                     is_map_succ_orbits_inv iG iM i ok V A \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i < length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((insert i' A', im_succ iM i'), A', i')\n                    \\<in> measure\n                           (\\<lambda>(A', j). length (snd iG) - card A')\n\ngoal (4 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i' \\<notin> A';\n   is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n   ig_tail iG i \\<notin> V \\<and>\n   succ_ok \\<and>\n   ok \\<and>\n   is_map_succ_orbits_inv iG iM i ok V A \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   ?sb2 = ?sa2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inner_inv iG iM i (im_succ iM i')\n                      (insert i' A') \\<and>\n                     ig_tail iG i \\<notin> V \\<and>\n                     succ_ok \\<and>\n                     ok \\<and>\n                     is_map_succ_orbits_inv iG iM i ok V A \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i < length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((insert i' A', im_succ iM i'), A', i')\n                    \\<in> measure\n                           (\\<lambda>(A', j). length (snd iG) - card A')\n\ngoal (4 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc.\n       wf (measure (\\<lambda>(A', j). length (snd iG) - card A'))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 4. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a.\n             case a of (A', j) \\<Rightarrow> length (snd iG) - card A'))", "by simp"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (A', j) \\<Rightarrow> length (snd iG) - card A'))\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (A', j) \\<Rightarrow> length (snd iG) - card A'))\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (A', j) \\<Rightarrow> length (snd iG) - card A'))\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case postcondition"], ["proof (state)\nthis:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "interpret pc0: is_map_postcondition0 iG iM rev_ok succ_i succ_ok"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. is_map_postcondition0 iG iM succ_i succ_ok", "by unfold_locales auto"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from postcondition"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "have \"ok\" \"succ_ok\" \"i < length (ig_edges iG)\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. ok &&& succ_ok &&& i < length (snd iG)", "by simp_all"], ["proof (state)\nthis:\n  ok\n  succ_ok\n  i < length (snd iG)\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from postcondition"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "have \"i' \\<in> A'\"\n              \"A' = (if i = i' \\<and> i \\<notin> A' then {} else {i} \\<union> segment (im_succ iM) i i')\"\n              \"i' \\<in> orbit (im_succ iM) i\"\n              \"ig_tail iG i \\<notin> V\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. (i' \\<in> A' &&&\n     A' =\n     (if i = i' \\<and> i \\<notin> A' then {}\n      else {i} \\<union> segment (im_succ iM) i i')) &&&\n    i' \\<in> orbit (im_succ iM) i &&& ig_tail iG i \\<notin> V", "by (simp_all add: is_map_succ_orbits_inner_inv_def)"], ["proof (state)\nthis:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "moreover"], ["proof (state)\nthis:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V", "have \"i = i'\""], ["proof (prove)\nusing this:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V\n\ngoal (1 subgoal):\n 1. i = i'", "by (simp split: if_splits add: not_in_segment2)"], ["proof (state)\nthis:\n  i = i'\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "ultimately"], ["proof (chain)\npicking this:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V\n  i = i'", "have \"A' = {i} \\<union> segment (im_succ iM) i i\""], ["proof (prove)\nusing this:\n  i' \\<in> A'\n  A' =\n  (if i = i' \\<and> i \\<notin> A' then {}\n   else {i} \\<union> segment (im_succ iM) i i')\n  i' \\<in> orbit (im_succ iM) i\n  ig_tail iG i \\<notin> V\n  i = i'\n\ngoal (1 subgoal):\n 1. A' = {i} \\<union> segment (im_succ iM) i i", "by simp"], ["proof (state)\nthis:\n  A' = {i} \\<union> segment (im_succ iM) i i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "also"], ["proof (state)\nthis:\n  A' = {i} \\<union> segment (im_succ iM) i i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"segment (im_succ iM) i i = segment ?es i i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment (im_succ iM) i i =\n    segment (edge_succ (mk_map (mk_graph iG) iM)) i i", "by (auto simp: pc0.segment_es_eq_im \\<open>succ_ok\\<close> \\<open>i < _\\<close> arcs_mkg)"], ["proof (state)\nthis:\n  segment (im_succ iM) i i =\n  segment (edge_succ (mk_map (mk_graph iG) iM)) i i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "also"], ["proof (state)\nthis:\n  segment (im_succ iM) i i =\n  segment (edge_succ (mk_map (mk_graph iG) iM)) i i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"\\<dots> = orbit ?es i - {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment (edge_succ (mk_map (mk_graph iG) iM)) i i =\n    orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i}", "using pc0.succ_ok_imp_permutes \\<open>succ_ok\\<close>"], ["proof (prove)\nusing this:\n  succ_ok \\<Longrightarrow>\n  edge_succ (mk_map (mk_graph iG) iM) permutes arcs (mk_graph iG)\n  succ_ok\n\ngoal (1 subgoal):\n 1. segment (edge_succ (mk_map (mk_graph iG) iM)) i i =\n    orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i}", "by (auto simp: permutation_permutes arcs_mkg intro!: segment_x_x_eq)"], ["proof (state)\nthis:\n  segment (edge_succ (mk_map (mk_graph iG) iM)) i i =\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i}\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "also"], ["proof (state)\nthis:\n  segment (edge_succ (mk_map (mk_graph iG) iM)) i i =\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i}\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"\\<dots> = orbit (im_succ iM) i - {i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i} =\n    orbit (im_succ iM) i - {i}", "by (auto simp: pc0.orbit_es_eq_im \\<open>succ_ok\\<close> \\<open>i < _\\<close> arcs_mkg)"], ["proof (state)\nthis:\n  orbit (edge_succ (mk_map (mk_graph iG) iM)) i - {i} =\n  orbit (im_succ iM) i - {i}\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "finally"], ["proof (chain)\npicking this:\n  A' = {i} \\<union> (orbit (im_succ iM) i - {i})", "have A': \"A' = orbit (im_succ iM) i\""], ["proof (prove)\nusing this:\n  A' = {i} \\<union> (orbit (im_succ iM) i - {i})\n\ngoal (1 subgoal):\n 1. A' = orbit (im_succ iM) i", "using \\<open>i < _\\<close> \\<open>succ_ok\\<close>"], ["proof (prove)\nusing this:\n  A' = {i} \\<union> (orbit (im_succ iM) i - {i})\n  i < length (snd iG)\n  succ_ok\n\ngoal (1 subgoal):\n 1. A' = orbit (im_succ iM) i", "by (auto simp: pc0.self_in_orbit_im_succ)"], ["proof (state)\nthis:\n  A' = orbit (im_succ iM) i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from postcondition"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "have \"A = (\\<Union>k<i. orbit (im_succ iM) k)\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. A = \\<Union> (orbit (im_succ iM) ` {..<i})", "unfolding is_map_succ_orbits_inner_inv_def"], ["proof (prove)\nusing this:\n  (A' =\n   (if i = i' \\<and> i \\<notin> A' then {}\n    else {i} \\<union> segment (im_succ iM) i i') \\<and>\n   i' \\<in> orbit (im_succ iM) i) \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. A = \\<Union> (orbit (im_succ iM) ` {..<i})", "by (simp add: is_map_succ_orbits_inv_def)"], ["proof (state)\nthis:\n  A = \\<Union> (orbit (im_succ iM) ` {..<i})\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"A \\<union> A' = (\\<Union>k<Suc i. orbit (im_succ iM) k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<union> A' = \\<Union> (orbit (im_succ iM) ` {..<Suc i})", "unfolding A' \\<open>A = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (orbit (im_succ iM) ` {..<i}) \\<union> orbit (im_succ iM) i =\n    \\<Union> (orbit (im_succ iM) ` {..<Suc i})", "by (auto 2 3 elim: less_SucE)"], ["proof (state)\nthis:\n  A \\<union> A' = \\<Union> (orbit (im_succ iM) ` {..<Suc i})\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from postcondition"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "have \"V = {ig_tail iG ia |ia. ia < i}\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. V = {ig_tail iG iaa |iaa. iaa < i}", "by (auto simp: \\<open>ok\\<close> is_map_succ_orbits_inv_def)"], ["proof (state)\nthis:\n  V = {ig_tail iG iaa |iaa. iaa < i}\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  V = {ig_tail iG iaa |iaa. iaa < i}", "have V': \"insert (ig_tail iG i') V = {ig_tail iG ia |ia. ia < Suc i}\""], ["proof (prove)\nusing this:\n  V = {ig_tail iG iaa |iaa. iaa < i}\n\ngoal (1 subgoal):\n 1. insert (ig_tail iG i') V = {ig_tail iG iaa |iaa. iaa < Suc i}", "by (auto simp add: \\<open>i = i'\\<close> elim: less_SucE)"], ["proof (state)\nthis:\n  insert (ig_tail iG i') V = {ig_tail iG iaa |iaa. iaa < Suc i}\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have *: \"\\<And>k. k < i \\<Longrightarrow> ig_tail iG k \\<noteq> ig_tail iG i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k. k < i \\<Longrightarrow> ig_tail iG k \\<noteq> ig_tail iG i", "using \\<open>V = _\\<close> \\<open>ig_tail iG i \\<notin> V\\<close>"], ["proof (prove)\nusing this:\n  V = {ig_tail iG iaa |iaa. iaa < i}\n  ig_tail iG i \\<notin> V\n\ngoal (1 subgoal):\n 1. \\<And>k. k < i \\<Longrightarrow> ig_tail iG k \\<noteq> ig_tail iG i", "by auto"], ["proof (state)\nthis:\n  ?k < i \\<Longrightarrow> ig_tail iG ?k \\<noteq> ig_tail iG i\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "from postcondition"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'", "have \"(\\<forall>k<i. \\<forall>l<i. ig_tail iG k = ig_tail iG l \\<longrightarrow> l \\<in> orbit (im_succ iM) k)\""], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n\ngoal (1 subgoal):\n 1. \\<forall>k<i.\n       \\<forall>l<i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "by (simp add: is_map_succ_orbits_inv_def \\<open>ok\\<close>)"], ["proof (state)\nthis:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k", "have X: \"(\\<forall>k<Suc i. \\<forall>l<Suc i. ig_tail iG k = ig_tail iG l \\<longrightarrow> l \\<in> orbit (im_succ iM) k)\""], ["proof (prove)\nusing this:\n  \\<forall>k<i.\n     \\<forall>l<i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (1 subgoal):\n 1. \\<forall>k<Suc i.\n       \\<forall>l<Suc i.\n          ig_tail iG k = ig_tail iG l \\<longrightarrow>\n          l \\<in> orbit (im_succ iM) k", "by (auto simp add: all_less_Suc_eq pc0.self_in_orbit_im_succ \\<open>succ_ok\\<close> \\<open>i < _\\<close> dest: *)"], ["proof (state)\nthis:\n  \\<forall>k<Suc i.\n     \\<forall>l<Suc i.\n        ig_tail iG k = ig_tail iG l \\<longrightarrow>\n        l \\<in> orbit (im_succ iM) k\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "have \"is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V) (A \\<union> A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n     (A \\<union> A')", "unfolding is_map_succ_orbits_inv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<union> A' =\n    \\<Union>\n     (orbit (im_succ iM) ` {..<if True then i + 1 else i + 1 - 1}) \\<and>\n    insert (ig_tail iG i') V =\n    {ig_tail iG i |i. i < (if True then i + 1 else i + 1 - 1)} \\<and>\n    True =\n    (\\<forall>i<i + 1.\n        \\<forall>j<i + 1.\n           ig_tail iG i = ig_tail iG j \\<longrightarrow>\n           j \\<in> orbit (im_succ iM) i)", "by (simp add: \\<open>A \\<union> A' = _\\<close> V' X)"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n   (A \\<union> A')\n\ngoal (3 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s x y xa ya xb yb ae bc\n       sa.\n       \\<lbrakk>is_map_succ_orbits_inner_inv iG iM x bc ae \\<and>\n                ig_tail iG x \\<notin> xb \\<and>\n                succPerm \\<and>\n                xa \\<and>\n                is_map_succ_orbits_inv iG iM x xa xb yb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                x < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> bc \\<notin> ae\\<rbrakk>\n       \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (x + 1) True\n                           (insert (ig_tail iG bc) xb)\n                           (yb \\<union> ae) \\<and>\n                          revOk =\n                          bidirected_digraph (mk_graph iG)\n                           (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                          is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                          is_map_final iG ia succPerm \\<and>\n                          x + 1 \\<le> length (snd iG) \\<and>\n                          wf_digraph (mk_graph iG)) \\<and>\n                         ((x + 1, True, insert (ig_tail iG bc) xb,\n                           yb \\<union> ae),\n                          x, xa, xb, yb)\n                         \\<in> measure\n                                (\\<lambda>(i, ok, V, A).\n                                    length (snd iG) - i)\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 3. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "then"], ["proof (chain)\npicking this:\n  is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n   (A \\<union> A')", "show ?case"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n   (A \\<union> A')\n\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n      (A \\<union> A') \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, True, insert (ig_tail iG i') V, A \\<union> A'), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)", "using postcondition \\<open>i < _\\<close>"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n   (A \\<union> A')\n  is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n  ig_tail iG i \\<notin> V \\<and>\n  succ_ok \\<and>\n  ok \\<and>\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i < length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> i' \\<notin> A'\n  i < length (snd iG)\n\ngoal (1 subgoal):\n 1. (is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n      (A \\<union> A') \\<and>\n     rev_ok =\n     bidirected_digraph (mk_graph iG)\n      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n     is_map_final iG succ_i succ_ok \\<and>\n     i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n    ((i + 1, True, insert (ig_tail iG i') V, A \\<union> A'), i, ok, V, A)\n    \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)", "by auto"], ["proof (state)\nthis:\n  (is_map_succ_orbits_inv iG iM (i + 1) True (insert (ig_tail iG i') V)\n    (A \\<union> A') \\<and>\n   rev_ok =\n   bidirected_digraph (mk_graph iG)\n    (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n   is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n   is_map_final iG succ_i succ_ok \\<and>\n   i + 1 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)) \\<and>\n  ((i + 1, True, insert (ig_tail iG i') V, A \\<union> A'), i, ok, V, A)\n  \\<in> measure (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inner_inv iG iM i i' A' \\<and>\n           ig_tail iG i \\<notin> V \\<and>\n           succ_ok \\<and>\n           ok \\<and>\n           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> i' \\<notin> A'\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (i + 1) True\n                      (insert (ig_tail iG i') V) (A \\<union> A') \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1, True, insert (ig_tail iG i') V, A \\<union> A'),\n                     i, ok, V, A)\n                    \\<in> measure\n                           (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inner_inv iG iM i ?i'2 ?A'2 \\<and>\n           ig_tail iG i \\<notin> V \\<and>\n           succ_ok \\<and>\n           ok \\<and>\n           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> ?i'2 \\<notin> ?A'2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (i + 1) True\n                      (insert (ig_tail iG ?i'2) V) (A \\<union> ?A'2) \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1, True, insert (ig_tail iG ?i'2) V,\n                      A \\<union> ?A'2),\n                     i, ok, V, A)\n                    \\<in> measure\n                           (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inner_inv iG iM i ?i'2 ?A'2 \\<and>\n           ig_tail iG i \\<notin> V \\<and>\n           succ_ok \\<and>\n           ok \\<and>\n           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> ?i'2 \\<notin> ?A'2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (i + 1) True\n                      (insert (ig_tail iG ?i'2) V) (A \\<union> ?A'2) \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1, True, insert (ig_tail iG ?i'2) V,\n                      A \\<union> ?A'2),\n                     i, ok, V, A)\n                    \\<in> measure\n                           (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inner_inv iG iM i ?i'2 ?A'2 \\<and>\n           ig_tail iG i \\<notin> V \\<and>\n           succ_ok \\<and>\n           ok \\<and>\n           is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i < length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> ?i'2 \\<notin> ?A'2\\<rbrakk>\n  \\<Longrightarrow> (is_map_succ_orbits_inv iG iM (i + 1) True\n                      (insert (ig_tail iG ?i'2) V) (A \\<union> ?A'2) \\<and>\n                     rev_ok =\n                     bidirected_digraph (mk_graph iG)\n                      (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                     is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n                     is_map_final iG succ_i succ_ok \\<and>\n                     i + 1 \\<le> length (snd iG) \\<and>\n                     wf_digraph (mk_graph iG)) \\<and>\n                    ((i + 1, True, insert (ig_tail iG ?i'2) V,\n                      A \\<union> ?A'2),\n                     i, ok, V, A)\n                    \\<in> measure\n                           (\\<lambda>(i, ok, V, A). length (snd iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb.\n       wf (measure (\\<lambda>(i, ok, V, A). length (snd iG) - i))\n 2. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a.\n             case a of (i, ok, V, A) \\<Rightarrow> length (snd iG) - i))", "by auto"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (i, ok, V, A) \\<Rightarrow> length (snd iG) - i))\n\ngoal (1 subgoal):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "}"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (i, ok, V, A) \\<Rightarrow> length (snd iG) - i))\n\ngoal (1 subgoal):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "{"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a.\n           case a of (i, ok, V, A) \\<Rightarrow> length (snd iG) - i))\n\ngoal (1 subgoal):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "case postcondition"], ["proof (state)\nthis:\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> succ_ok \\<and> ok)\n\ngoal (1 subgoal):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "interpret pc: is_map_postcondition iG iM rev_ok succ_i succ_ok i ok V A"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_map_postcondition iG iM rev_ok succ_i succ_ok i ok V A", "using postcondition"], ["proof (prove)\nusing this:\n  is_map_succ_orbits_inv iG iM i ok V A \\<and>\n  rev_ok =\n  bidirected_digraph (mk_graph iG)\n   (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n  is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n  is_map_final iG succ_i succ_ok \\<and>\n  i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG)\n  \\<not> (i < length (snd iG) \\<and> succ_ok \\<and> ok)\n\ngoal (1 subgoal):\n 1. is_map_postcondition iG iM rev_ok succ_i succ_ok i ok V A", "by unfold_locales (auto simp: is_map_final_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b i revOk aa ba ia succPerm ab ac ad bb s.\n       \\<lbrakk>is_map_succ_orbits_inv iG iM ab ac ad bb \\<and>\n                revOk =\n                bidirected_digraph (mk_graph iG)\n                 (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n                is_map_succ_perm_inv iG iM ia succPerm \\<and>\n                is_map_final iG ia succPerm \\<and>\n                ab \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n        \\<not> (ab < length (snd iG) \\<and> succPerm \\<and> ac)\\<rbrakk>\n       \\<Longrightarrow> (revOk \\<and> succPerm \\<and> ac) =\n                         (digraph_map (mk_graph iG)\n                           (mk_map (mk_graph iG) iM) \\<and>\n                          (\\<forall>i<length (snd iG).\n                              im_pred iM (im_succ iM i) = i))", "show ?case (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev_ok \\<and> succ_ok \\<and> ok) =\n    (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n     (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i))", "by (auto simp add: pc.ok_imp_digraph dest: pc.succ_ok_imp_pred elim: pc.digraph_imp_ok)"], ["proof (state)\nthis:\n  (rev_ok \\<and> succ_ok \\<and> ok) =\n  (digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n   (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i))\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inv iG iM i ok V A \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           i \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (i < length (snd iG) \\<and> succ_ok \\<and> ok)\\<rbrakk>\n  \\<Longrightarrow> (rev_ok \\<and> succ_ok \\<and> ok) =\n                    (digraph_map (mk_graph iG)\n                      (mk_map (mk_graph iG) iM) \\<and>\n                     (\\<forall>i<length (snd iG).\n                         im_pred iM (im_succ iM i) = i))\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_map_succ_orbits_inv iG iM ?ia2 ?ok2 ?V2 ?A2 \\<and>\n           rev_ok =\n           bidirected_digraph (mk_graph iG)\n            (edge_rev (mk_map (mk_graph iG) iM)) \\<and>\n           is_map_succ_perm_inv iG iM succ_i succ_ok \\<and>\n           is_map_final iG succ_i succ_ok \\<and>\n           ?ia2 \\<le> length (snd iG) \\<and> wf_digraph (mk_graph iG);\n   \\<not> (?ia2 < length (snd iG) \\<and> succ_ok \\<and> ?ok2)\\<rbrakk>\n  \\<Longrightarrow> (rev_ok \\<and> succ_ok \\<and> ?ok2) =\n                    (digraph_map (mk_graph iG)\n                      (mk_map (mk_graph iG) iM) \\<and>\n                     (\\<forall>i<length (snd iG).\n                         im_pred iM (im_succ iM i) = i))\n\ngoal:\nNo subgoals!", "qed"], ["", "declare ovalidNF_is_map[THEN ovalidNF_wp, THEN trivial_label, vcg_l]"], ["", "subsubsection \\<open>@{term isolated_nodes}\\<close>"], ["", "definition \"inv_isolated_nodes s iG vcnt ecnt \\<equiv>\n  vcnt = length (ig_verts iG)\n  \\<and> ecnt = length (ig_edges iG)\n  \\<and> distinct (ig_verts iG)\n  \\<and> sym_digraph (mk_graph iG)\n  \""], ["", "definition \"inv_isolated_nodes_outer iG i nz \\<equiv>\n  nz = card (pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (take i (ig_verts iG)))\""], ["", "definition \"inv_isolated_nodes_inner iG v j \\<equiv>\n  \\<forall>k < j. v \\<noteq> ig_tail iG k \\<and> v \\<noteq> ig_head iG k\""], ["", "lemma (in sym_digraph) in_arcs_empty_iff:\n  \"in_arcs G v = {} \\<longleftrightarrow> out_arcs G v = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (in_arcs G v = {}) = (out_arcs G v = {})", "by (auto simp: out_arcs_def in_arcs_def)\n     (metis graph_symmetric in_arcs_imp_in_arcs_ends reachableE)+"], ["", "lemma take_nth_distinct:\n  \"\\<lbrakk>distinct xs; n < length xs; xs ! n \\<in> set (take n xs)\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>distinct xs; n < length xs;\n     xs ! n \\<in> set (take n xs)\\<rbrakk>\n    \\<Longrightarrow> False", "by (fastforce simp: distinct_conv_nth in_set_conv_nth)"], ["", "lemma ovalidNF_isolated_nodes: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> sym_digraph (mk_graph iG))\n    (isolated_nodes iG)\n  (\\<lambda>r s. r = (card (pre_digraph.isolated_verts (mk_graph iG))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s. distinct (fst iG) \\<and> sym_digraph (mk_graph iG))\n     (isolated_nodes iG)\n     (\\<lambda>r s. r = card (pre_digraph.isolated_verts (mk_graph iG)))", "unfolding isolated_nodes_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s. distinct (fst iG) \\<and> sym_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, nz) \\<leftarrow>\n         owhile (\\<lambda>(i, nz) a. i < vcnt)\n          (\\<lambda>(i, nz).\n              DO v \\<leftarrow> oreturn (fst iG ! i);\n                 j \\<leftarrow> oreturn 0;\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. j < ecnt)\n                  (oreturn (ig_tail iG j \\<noteq> v)) (oreturn False);\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. ret)\n                  (oreturn (ig_head iG j \\<noteq> v)) (oreturn ret);\n                 (j, uu_) \\<leftarrow>\n                 owhile (\\<lambda>(j, cond) a. cond)\n                  (\\<lambda>(j, cond).\n                      DO j \\<leftarrow> oreturn (j + 1);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. j < ecnt)\n                          (oreturn (ig_tail iG j \\<noteq> v))\n                          (oreturn False);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. cond)\n                          (oreturn (ig_head iG j \\<noteq> v))\n                          (oreturn cond);\n                         oreturn (j, cond)\n                      OD)\n                  (j, ret);\n                 nz \\<leftarrow> oreturn (if j = ecnt then nz + 1 else nz);\n                 oreturn (i + 1, nz)\n              OD)\n          (0, 0);\n         oreturn nz\n      OD)\n     (\\<lambda>r s. r = card (pre_digraph.isolated_verts (mk_graph iG)))", "apply (rewrite\n    in \"oreturn (length (ig_verts iG)) |>> (\\<lambda>vcnt. \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(i, nz) s. inv_isolated_nodes s iG vcnt ecnt\n            \\<and> inv_isolated_nodes_outer iG i nz\n            \\<and> i \\<le> vcnt)\n      (measure (\\<lambda>(i, nz). vcnt - i))\n    \" owhile_inv_def[symmetric] )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s. distinct (fst iG) \\<and> sym_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, nz) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, nz) a. i < vcnt)\n          (\\<lambda>(i, nz).\n              DO v \\<leftarrow> oreturn (fst iG ! i);\n                 j \\<leftarrow> oreturn 0;\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. j < ecnt)\n                  (oreturn (ig_tail iG j \\<noteq> v)) (oreturn False);\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. ret)\n                  (oreturn (ig_head iG j \\<noteq> v)) (oreturn ret);\n                 (j, uu_) \\<leftarrow>\n                 owhile (\\<lambda>(j, cond) a. cond)\n                  (\\<lambda>(j, cond).\n                      DO j \\<leftarrow> oreturn (j + 1);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. j < ecnt)\n                          (oreturn (ig_tail iG j \\<noteq> v))\n                          (oreturn False);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. cond)\n                          (oreturn (ig_head iG j \\<noteq> v))\n                          (oreturn cond);\n                         oreturn (j, cond)\n                      OD)\n                  (j, ret);\n                 nz \\<leftarrow> oreturn (if j = ecnt then nz + 1 else nz);\n                 oreturn (i + 1, nz)\n              OD)\n          (0, 0)\n          (\\<lambda>(i, nz) s.\n              inv_isolated_nodes s iG vcnt ecnt \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and> i \\<le> vcnt)\n          (measure (\\<lambda>(i, nz). vcnt - i));\n         oreturn nz\n      OD)\n     (\\<lambda>r s. r = card (pre_digraph.isolated_verts (mk_graph iG)))", "apply (rewrite\n    in \"oreturn (fst iG ! i) |>> (\\<lambda>v. \\<hole>)\"\n    in \"owhile_inv _ (\\<lambda>(i, nz). \\<hole>)\"\n    in \"oreturn (length (ig_verts iG)) |>> (\\<lambda>vcnt. \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n      (\\<lambda>(j, ret) s. inv_isolated_nodes s iG vcnt ecnt\n           \\<and> inv_isolated_nodes_inner iG v j\n           \\<and> inv_isolated_nodes_outer iG i nz\n           \\<and> v = ig_verts iG ! i\n           \\<and> ret = (j < ecnt \\<and> ig_tail iG j \\<noteq> v \\<and> ig_head iG j \\<noteq> v)\n           \\<and> i < vcnt\n           \\<and> j \\<le> ecnt)\n      (measure (\\<lambda>(j, ret). ecnt - j))\n    \" owhile_inv_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s. distinct (fst iG) \\<and> sym_digraph (mk_graph iG))\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         vcnt \\<leftarrow> oreturn (length (fst iG));\n         (i, nz) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(i, nz) a. i < vcnt)\n          (\\<lambda>(i, nz).\n              DO v \\<leftarrow> oreturn (fst iG ! i);\n                 j \\<leftarrow> oreturn 0;\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. j < ecnt)\n                  (oreturn (ig_tail iG j \\<noteq> v)) (oreturn False);\n                 ret \\<leftarrow>\n                 ocondition (\\<lambda>s. ret)\n                  (oreturn (ig_head iG j \\<noteq> v)) (oreturn ret);\n                 (j, uu_) \\<leftarrow>\n                 AutoCorres_Misc.owhile_inv (\\<lambda>(j, cond) a. cond)\n                  (\\<lambda>(j, cond).\n                      DO j \\<leftarrow> oreturn (j + 1);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. j < ecnt)\n                          (oreturn (ig_tail iG j \\<noteq> v))\n                          (oreturn False);\n                         cond \\<leftarrow>\n                         ocondition (\\<lambda>s. cond)\n                          (oreturn (ig_head iG j \\<noteq> v))\n                          (oreturn cond);\n                         oreturn (j, cond)\n                      OD)\n                  (j, ret)\n                  (\\<lambda>(j, ret) s.\n                      inv_isolated_nodes s iG vcnt ecnt \\<and>\n                      inv_isolated_nodes_inner iG v j \\<and>\n                      inv_isolated_nodes_outer iG i nz \\<and>\n                      v = fst iG ! i \\<and>\n                      ret =\n                      (j < ecnt \\<and>\n                       ig_tail iG j \\<noteq> v \\<and>\n                       ig_head iG j \\<noteq> v) \\<and>\n                      i < vcnt \\<and> j \\<le> ecnt)\n                  (measure (\\<lambda>(j, ret). ecnt - j));\n                 nz \\<leftarrow> oreturn (if j = ecnt then nz + 1 else nz);\n                 oreturn (i + 1, nz)\n              OD)\n          (0, 0)\n          (\\<lambda>(i, nz) s.\n              inv_isolated_nodes s iG vcnt ecnt \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and> i \\<le> vcnt)\n          (measure (\\<lambda>(i, nz). vcnt - i));\n         oreturn nz\n      OD)\n     (\\<lambda>r s. r = card (pre_digraph.isolated_verts (mk_graph iG)))", "proof vcg_casify"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))\n 7. \\<And>s.\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG) \\<Longrightarrow>\n       inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n       inv_isolated_nodes_outer iG 0 0 \\<and> 0 \\<le> length (fst iG)", "case (weaken s)"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and> sym_digraph (mk_graph iG)\n\ngoal (7 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))\n 7. \\<And>s.\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG) \\<Longrightarrow>\n       inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n       inv_isolated_nodes_outer iG 0 0 \\<and> 0 \\<le> length (fst iG)", "then"], ["proof (chain)\npicking this:\n  distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "show ?case"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and> sym_digraph (mk_graph iG)\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n    inv_isolated_nodes_outer iG 0 0 \\<and> 0 \\<le> length (fst iG)", "by (auto simp: inv_isolated_nodes_def inv_isolated_nodes_outer_def)"], ["proof (state)\nthis:\n  inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG 0 0 \\<and> 0 \\<le> length (fst iG)\n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case (while i nz)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case (weaken s')"], ["proof (state)\nthis:\n  i < length (fst iG)\n  inv_isolated_nodes s' iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  s' = s\n\ngoal (6 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b s sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        a < length (fst iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if 0 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG 0 \\<noteq> fst iG ! a\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_tail iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n                           else BRANCH\n                                 (if False\n                                  then inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n (ig_head iG 0 \\<noteq> fst iG ! a) =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n                                  else inv_isolated_nodes sa iG\n  (length (fst iG)) (length (snd iG)) \\<and>\n inv_isolated_nodes_inner iG (fst iG ! a) 0 \\<and>\n inv_isolated_nodes_outer iG a b \\<and>\n fst iG ! a = fst iG ! a \\<and>\n False =\n (0 < length (snd iG) \\<and>\n  ig_tail iG 0 \\<noteq> fst iG ! a \\<and>\n  ig_head iG 0 \\<noteq> fst iG ! a) \\<and>\n a < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n 5. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 6. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "then"], ["proof (chain)\npicking this:\n  i < length (fst iG)\n  inv_isolated_nodes s' iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  s' = s", "show ?case"], ["proof (prove)\nusing this:\n  i < length (fst iG)\n  inv_isolated_nodes s' iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. BRANCH\n     (if 0 < length (snd iG)\n      then BRANCH\n            (if ig_tail iG 0 \\<noteq> fst iG ! i\n             then inv_isolated_nodes s' iG (length (fst iG))\n                   (length (snd iG)) \\<and>\n                  inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                  inv_isolated_nodes_outer iG i nz \\<and>\n                  fst iG ! i = fst iG ! i \\<and>\n                  (ig_head iG 0 \\<noteq> fst iG ! i) =\n                  (0 < length (snd iG) \\<and>\n                   ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                   ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                  i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n             else inv_isolated_nodes s' iG (length (fst iG))\n                   (length (snd iG)) \\<and>\n                  inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                  inv_isolated_nodes_outer iG i nz \\<and>\n                  fst iG ! i = fst iG ! i \\<and>\n                  (ig_tail iG 0 \\<noteq> fst iG ! i) =\n                  (0 < length (snd iG) \\<and>\n                   ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                   ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                  i < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n      else BRANCH\n            (if False\n             then inv_isolated_nodes s' iG (length (fst iG))\n                   (length (snd iG)) \\<and>\n                  inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                  inv_isolated_nodes_outer iG i nz \\<and>\n                  fst iG ! i = fst iG ! i \\<and>\n                  (ig_head iG 0 \\<noteq> fst iG ! i) =\n                  (0 < length (snd iG) \\<and>\n                   ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                   ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                  i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n             else inv_isolated_nodes s' iG (length (fst iG))\n                   (length (snd iG)) \\<and>\n                  inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                  inv_isolated_nodes_outer iG i nz \\<and>\n                  fst iG ! i = fst iG ! i \\<and>\n                  False =\n                  (0 < length (snd iG) \\<and>\n                   ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                   ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                  i < length (fst iG) \\<and> 0 \\<le> length (snd iG)))", "unfolding BRANCH_def"], ["proof (prove)\nusing this:\n  i < length (fst iG)\n  inv_isolated_nodes s' iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. if 0 < length (snd iG)\n    then if ig_tail iG 0 \\<noteq> fst iG ! i\n         then inv_isolated_nodes s' iG (length (fst iG))\n               (length (snd iG)) \\<and>\n              inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and>\n              fst iG ! i = fst iG ! i \\<and>\n              (ig_head iG 0 \\<noteq> fst iG ! i) =\n              (0 < length (snd iG) \\<and>\n               ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n               ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n              i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n         else inv_isolated_nodes s' iG (length (fst iG))\n               (length (snd iG)) \\<and>\n              inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and>\n              fst iG ! i = fst iG ! i \\<and>\n              (ig_tail iG 0 \\<noteq> fst iG ! i) =\n              (0 < length (snd iG) \\<and>\n               ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n               ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n              i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n    else if False\n         then inv_isolated_nodes s' iG (length (fst iG))\n               (length (snd iG)) \\<and>\n              inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and>\n              fst iG ! i = fst iG ! i \\<and>\n              (ig_head iG 0 \\<noteq> fst iG ! i) =\n              (0 < length (snd iG) \\<and>\n               ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n               ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n              i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n         else inv_isolated_nodes s' iG (length (fst iG))\n               (length (snd iG)) \\<and>\n              inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n              inv_isolated_nodes_outer iG i nz \\<and>\n              fst iG ! i = fst iG ! i \\<and>\n              False =\n              (0 < length (snd iG) \\<and>\n               ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n               ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n              i < length (fst iG) \\<and> 0 \\<le> length (snd iG)", "by (auto simp: inv_isolated_nodes_inner_def)"], ["proof (state)\nthis:\n  BRANCH\n   (if 0 < length (snd iG)\n    then BRANCH\n          (if ig_tail iG 0 \\<noteq> fst iG ! i\n           then inv_isolated_nodes s' iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                inv_isolated_nodes_outer iG i nz \\<and>\n                fst iG ! i = fst iG ! i \\<and>\n                (ig_head iG 0 \\<noteq> fst iG ! i) =\n                (0 < length (snd iG) \\<and>\n                 ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                 ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n           else inv_isolated_nodes s' iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                inv_isolated_nodes_outer iG i nz \\<and>\n                fst iG ! i = fst iG ! i \\<and>\n                (ig_tail iG 0 \\<noteq> fst iG ! i) =\n                (0 < length (snd iG) \\<and>\n                 ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                 ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                i < length (fst iG) \\<and> 0 \\<le> length (snd iG))\n    else BRANCH\n          (if False\n           then inv_isolated_nodes s' iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                inv_isolated_nodes_outer iG i nz \\<and>\n                fst iG ! i = fst iG ! i \\<and>\n                (ig_head iG 0 \\<noteq> fst iG ! i) =\n                (0 < length (snd iG) \\<and>\n                 ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                 ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                i < length (fst iG) \\<and> 0 \\<le> length (snd iG)\n           else inv_isolated_nodes s' iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! i) 0 \\<and>\n                inv_isolated_nodes_outer iG i nz \\<and>\n                fst iG ! i = fst iG ! i \\<and>\n                False =\n                (0 < length (snd iG) \\<and>\n                 ig_tail iG 0 \\<noteq> fst iG ! i \\<and>\n                 ig_head iG 0 \\<noteq> fst iG ! i) \\<and>\n                i < length (fst iG) \\<and> 0 \\<le> length (snd iG)))\n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case bind"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case bind"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case (while j cond)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "{"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case invariant"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "{"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case weaken"], ["proof (state)\nthis:\n  cond\n  inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  sb = sa\n\ngoal (5 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa sb.\n       \\<lbrakk>inv_isolated_nodes sb iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if aa + 1 < length (snd iG)\n                           then BRANCH\n                                 (if ig_tail iG (aa + 1) \\<noteq> fst iG ! x\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_tail iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_tail iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n                           else BRANCH\n                                 (if False\n                                  then (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  (ig_head iG (aa + 1) \\<noteq> fst iG ! x) =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, ig_head iG (aa + 1) \\<noteq> fst iG ! x), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n                                  else (inv_isolated_nodes sb iG\n   (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! x) (aa + 1) \\<and>\n  inv_isolated_nodes_outer iG x y \\<and>\n  fst iG ! x = fst iG ! x \\<and>\n  False =\n  (aa + 1 < length (snd iG) \\<and>\n   ig_tail iG (aa + 1) \\<noteq> fst iG ! x \\<and>\n   ig_head iG (aa + 1) \\<noteq> fst iG ! x) \\<and>\n  x < length (fst iG) \\<and> aa + 1 \\<le> length (snd iG)) \\<and>\n ((aa + 1, False), aa, ba)\n \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n 2. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 3. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 4. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 5. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. BRANCH\n     (if j + 1 < length (snd iG)\n      then BRANCH\n            (if ig_tail iG (j + 1) \\<noteq> fst iG ! i\n             then (inv_isolated_nodes sb iG (length (fst iG))\n                    (length (snd iG)) \\<and>\n                   inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                   inv_isolated_nodes_outer iG i nz \\<and>\n                   fst iG ! i = fst iG ! i \\<and>\n                   (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                   (j + 1 < length (snd iG) \\<and>\n                    ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                    ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                   i < length (fst iG) \\<and>\n                   j + 1 \\<le> length (snd iG)) \\<and>\n                  ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                  \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n             else (inv_isolated_nodes sb iG (length (fst iG))\n                    (length (snd iG)) \\<and>\n                   inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                   inv_isolated_nodes_outer iG i nz \\<and>\n                   fst iG ! i = fst iG ! i \\<and>\n                   (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                   (j + 1 < length (snd iG) \\<and>\n                    ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                    ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                   i < length (fst iG) \\<and>\n                   j + 1 \\<le> length (snd iG)) \\<and>\n                  ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                  \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n      else BRANCH\n            (if False\n             then (inv_isolated_nodes sb iG (length (fst iG))\n                    (length (snd iG)) \\<and>\n                   inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                   inv_isolated_nodes_outer iG i nz \\<and>\n                   fst iG ! i = fst iG ! i \\<and>\n                   (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                   (j + 1 < length (snd iG) \\<and>\n                    ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                    ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                   i < length (fst iG) \\<and>\n                   j + 1 \\<le> length (snd iG)) \\<and>\n                  ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                  \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n             else (inv_isolated_nodes sb iG (length (fst iG))\n                    (length (snd iG)) \\<and>\n                   inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                   inv_isolated_nodes_outer iG i nz \\<and>\n                   fst iG ! i = fst iG ! i \\<and>\n                   False =\n                   (j + 1 < length (snd iG) \\<and>\n                    ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                    ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                   i < length (fst iG) \\<and>\n                   j + 1 \\<le> length (snd iG)) \\<and>\n                  ((j + 1, False), j, cond)\n                  \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))", "proof branch_casify"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 3. \\<lbrakk>\\<not> j + 1 < length (snd iG); \\<not> False\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       False =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, False), j, cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "case \"else\""], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 3. \\<lbrakk>\\<not> j + 1 < length (snd iG); \\<not> False\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       False =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, False), j, cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "case \"else\""], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 3. \\<lbrakk>\\<not> j + 1 < length (snd iG); \\<not> False\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       False =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, False), j, cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "case g"], ["proof (state)\nthis:\n  \\<not> j + 1 < length (snd iG)\n  \\<not> False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 3. \\<lbrakk>\\<not> j + 1 < length (snd iG); \\<not> False\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       False =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, False), j, cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "with weaken"], ["proof (chain)\npicking this:\n  cond\n  inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  sb = sa\n  \\<not> j + 1 < length (snd iG)\n  \\<not> False", "have \"length (ig_edges iG) = j + 1\""], ["proof (prove)\nusing this:\n  cond\n  inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  sb = sa\n  \\<not> j + 1 < length (snd iG)\n  \\<not> False\n\ngoal (1 subgoal):\n 1. length (snd iG) = j + 1", "by linarith"], ["proof (state)\nthis:\n  length (snd iG) = j + 1\n\ngoal (3 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 3. \\<lbrakk>\\<not> j + 1 < length (snd iG); \\<not> False\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       False =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, False), j, cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "with weaken"], ["proof (chain)\npicking this:\n  cond\n  inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  sb = sa\n  length (snd iG) = j + 1", "show ?case"], ["proof (prove)\nusing this:\n  cond\n  inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  sb = sa\n  length (snd iG) = j + 1\n\ngoal (1 subgoal):\n 1. (inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n     inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n     inv_isolated_nodes_outer iG i nz \\<and>\n     fst iG ! i = fst iG ! i \\<and>\n     False =\n     (j + 1 < length (snd iG) \\<and>\n      ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n      ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n     i < length (fst iG) \\<and> j + 1 \\<le> length (snd iG)) \\<and>\n    ((j + 1, False), j, cond)\n    \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "by (auto simp: inv_isolated_nodes_inner_def elim: less_SucE)"], ["proof (state)\nthis:\n  (inv_isolated_nodes sb iG (length (fst iG)) (length (snd iG)) \\<and>\n   inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n   inv_isolated_nodes_outer iG i nz \\<and>\n   fst iG ! i = fst iG ! i \\<and>\n   False =\n   (j + 1 < length (snd iG) \\<and>\n    ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n    ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n   i < length (fst iG) \\<and> j + 1 \\<le> length (snd iG)) \\<and>\n  ((j + 1, False), j, cond)\n  \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j + 1 < length (snd iG);\n     ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n 2. \\<lbrakk>j + 1 < length (snd iG);\n     \\<not> ig_tail iG (j + 1) \\<noteq> fst iG ! i\\<rbrakk>\n    \\<Longrightarrow> (inv_isolated_nodes sb iG (length (fst iG))\n                        (length (snd iG)) \\<and>\n                       inv_isolated_nodes_inner iG (fst iG ! i)\n                        (j + 1) \\<and>\n                       inv_isolated_nodes_outer iG i nz \\<and>\n                       fst iG ! i = fst iG ! i \\<and>\n                       (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                       (j + 1 < length (snd iG) \\<and>\n                        ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                        ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                       i < length (fst iG) \\<and>\n                       j + 1 \\<le> length (snd iG)) \\<and>\n                      ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j,\n                       cond)\n                      \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)", "qed (insert weaken, auto simp: inv_isolated_nodes_inner_def elim: less_SucE)"], ["proof (state)\nthis:\n  BRANCH\n   (if j + 1 < length (snd iG)\n    then BRANCH\n          (if ig_tail iG (j + 1) \\<noteq> fst iG ! i\n           then (inv_isolated_nodes sb iG (length (fst iG))\n                  (length (snd iG)) \\<and>\n                 inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                 inv_isolated_nodes_outer iG i nz \\<and>\n                 fst iG ! i = fst iG ! i \\<and>\n                 (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                 (j + 1 < length (snd iG) \\<and>\n                  ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                  ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                 i < length (fst iG) \\<and>\n                 j + 1 \\<le> length (snd iG)) \\<and>\n                ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n           else (inv_isolated_nodes sb iG (length (fst iG))\n                  (length (snd iG)) \\<and>\n                 inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                 inv_isolated_nodes_outer iG i nz \\<and>\n                 fst iG ! i = fst iG ! i \\<and>\n                 (ig_tail iG (j + 1) \\<noteq> fst iG ! i) =\n                 (j + 1 < length (snd iG) \\<and>\n                  ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                  ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                 i < length (fst iG) \\<and>\n                 j + 1 \\<le> length (snd iG)) \\<and>\n                ((j + 1, ig_tail iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j))\n    else BRANCH\n          (if False\n           then (inv_isolated_nodes sb iG (length (fst iG))\n                  (length (snd iG)) \\<and>\n                 inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                 inv_isolated_nodes_outer iG i nz \\<and>\n                 fst iG ! i = fst iG ! i \\<and>\n                 (ig_head iG (j + 1) \\<noteq> fst iG ! i) =\n                 (j + 1 < length (snd iG) \\<and>\n                  ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                  ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                 i < length (fst iG) \\<and>\n                 j + 1 \\<le> length (snd iG)) \\<and>\n                ((j + 1, ig_head iG (j + 1) \\<noteq> fst iG ! i), j, cond)\n                \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)\n           else (inv_isolated_nodes sb iG (length (fst iG))\n                  (length (snd iG)) \\<and>\n                 inv_isolated_nodes_inner iG (fst iG ! i) (j + 1) \\<and>\n                 inv_isolated_nodes_outer iG i nz \\<and>\n                 fst iG ! i = fst iG ! i \\<and>\n                 False =\n                 (j + 1 < length (snd iG) \\<and>\n                  ig_tail iG (j + 1) \\<noteq> fst iG ! i \\<and>\n                  ig_head iG (j + 1) \\<noteq> fst iG ! i) \\<and>\n                 i < length (fst iG) \\<and>\n                 j + 1 \\<le> length (snd iG)) \\<and>\n                ((j + 1, False), j, cond)\n                \\<in> measure (\\<lambda>(j, ret). length (snd iG) - j)))\n\ngoal (4 subgoals):\n 1. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 2. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 3. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 4. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>cond;\n   inv_isolated_nodes ?sb2 iG (length (fst iG)) (length (snd iG)) \\<and>\n   inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n   inv_isolated_nodes_outer iG i nz \\<and>\n   fst iG ! i = fst iG ! i \\<and>\n   cond =\n   (j < length (snd iG) \\<and>\n    ig_tail iG j \\<noteq> fst iG ! i \\<and>\n    ig_head iG j \\<noteq> fst iG ! i) \\<and>\n   i < length (fst iG) \\<and> j \\<le> length (snd iG);\n   ?sb2 = sa\\<rbrakk>\n  \\<Longrightarrow> BRANCH\n                     (if j + 1 < length (snd iG)\n                      then BRANCH\n                            (if ig_tail iG (j + 1) \\<noteq> fst iG ! i\n                             then (inv_isolated_nodes ?sb2 iG\n                                    (length (fst iG))\n                                    (length (snd iG)) \\<and>\n                                   inv_isolated_nodes_inner iG (fst iG ! i)\n                                    (j + 1) \\<and>\n                                   inv_isolated_nodes_outer iG i nz \\<and>\n                                   fst iG ! i = fst iG ! i \\<and>\n                                   (ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) =\n                                   (j + 1 < length (snd iG) \\<and>\n                                    ig_tail iG (j + 1) \\<noteq>\n                                    fst iG ! i \\<and>\n                                    ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) \\<and>\n                                   i < length (fst iG) \\<and>\n                                   j + 1 \\<le> length (snd iG)) \\<and>\n                                  ((j + 1,\n                                    ig_head iG (j + 1) \\<noteq> fst iG ! i),\n                                   j, cond)\n                                  \\<in> measure\n   (\\<lambda>(j, ret). length (snd iG) - j)\n                             else (inv_isolated_nodes ?sb2 iG\n                                    (length (fst iG))\n                                    (length (snd iG)) \\<and>\n                                   inv_isolated_nodes_inner iG (fst iG ! i)\n                                    (j + 1) \\<and>\n                                   inv_isolated_nodes_outer iG i nz \\<and>\n                                   fst iG ! i = fst iG ! i \\<and>\n                                   (ig_tail iG (j + 1) \\<noteq>\n                                    fst iG ! i) =\n                                   (j + 1 < length (snd iG) \\<and>\n                                    ig_tail iG (j + 1) \\<noteq>\n                                    fst iG ! i \\<and>\n                                    ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) \\<and>\n                                   i < length (fst iG) \\<and>\n                                   j + 1 \\<le> length (snd iG)) \\<and>\n                                  ((j + 1,\n                                    ig_tail iG (j + 1) \\<noteq> fst iG ! i),\n                                   j, cond)\n                                  \\<in> measure\n   (\\<lambda>(j, ret). length (snd iG) - j))\n                      else BRANCH\n                            (if False\n                             then (inv_isolated_nodes ?sb2 iG\n                                    (length (fst iG))\n                                    (length (snd iG)) \\<and>\n                                   inv_isolated_nodes_inner iG (fst iG ! i)\n                                    (j + 1) \\<and>\n                                   inv_isolated_nodes_outer iG i nz \\<and>\n                                   fst iG ! i = fst iG ! i \\<and>\n                                   (ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) =\n                                   (j + 1 < length (snd iG) \\<and>\n                                    ig_tail iG (j + 1) \\<noteq>\n                                    fst iG ! i \\<and>\n                                    ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) \\<and>\n                                   i < length (fst iG) \\<and>\n                                   j + 1 \\<le> length (snd iG)) \\<and>\n                                  ((j + 1,\n                                    ig_head iG (j + 1) \\<noteq> fst iG ! i),\n                                   j, cond)\n                                  \\<in> measure\n   (\\<lambda>(j, ret). length (snd iG) - j)\n                             else (inv_isolated_nodes ?sb2 iG\n                                    (length (fst iG))\n                                    (length (snd iG)) \\<and>\n                                   inv_isolated_nodes_inner iG (fst iG ! i)\n                                    (j + 1) \\<and>\n                                   inv_isolated_nodes_outer iG i nz \\<and>\n                                   fst iG ! i = fst iG ! i \\<and>\n                                   False =\n                                   (j + 1 < length (snd iG) \\<and>\n                                    ig_tail iG (j + 1) \\<noteq>\n                                    fst iG ! i \\<and>\n                                    ig_head iG (j + 1) \\<noteq>\n                                    fst iG ! i) \\<and>\n                                   i < length (fst iG) \\<and>\n                                   j + 1 \\<le> length (snd iG)) \\<and>\n                                  ((j + 1, False), j, cond)\n                                  \\<in> measure\n   (\\<lambda>(j, ret). length (snd iG) - j)))\n\ngoal (4 subgoals):\n 1. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 2. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 3. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 4. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 2. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 3. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 4. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a b s x y ra rb aa ba.\n       wf (measure (\\<lambda>(j, ret). length (snd iG) - j))\n 2. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 3. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 4. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a. case a of (j, ret) \\<Rightarrow> length (snd iG) - j))", "by auto"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (j, ret) \\<Rightarrow> length (snd iG) - j))\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case postcondition"], ["proof (state)\nthis:\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "interpret G: sym_digraph \"mk_graph iG\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sym_digraph (mk_graph iG)", "using postcondition"], ["proof (prove)\nusing this:\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. sym_digraph (mk_graph iG)", "by (simp add: inv_isolated_nodes_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "have ?var"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n    \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)", "using postcondition"], ["proof (prove)\nusing this:\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n    \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)", "by auto"], ["proof (state)\nthis:\n  ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n  \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "let ?v = \"ig_verts iG ! i\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "{"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "assume A: \"j = length (snd iG)\""], ["proof (state)\nthis:\n  j = length (snd iG)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "have \"?v \\<in> pre_digraph.isolated_verts (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst iG ! i \\<in> G.isolated_verts", "using A postcondition"], ["proof (prove)\nusing this:\n  j = length (snd iG)\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. fst iG ! i \\<in> G.isolated_verts", "by (auto simp: pre_digraph.isolated_verts_def mkg_simps inv_isolated_nodes_inner_def arcs_mkg)"], ["proof (state)\nthis:\n  fst iG ! i \\<in> G.isolated_verts\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "have \"distinct (ig_verts iG)\" \"?v = ig_verts iG ! i\" \"i < length (ig_verts iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (fst iG) &&& fst iG ! i = fst iG ! i &&& i < length (fst iG)", "using postcondition"], ["proof (prove)\nusing this:\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. distinct (fst iG) &&& fst iG ! i = fst iG ! i &&& i < length (fst iG)", "by (auto simp: inv_isolated_nodes_def)"], ["proof (state)\nthis:\n  distinct (fst iG)\n  fst iG ! i = fst iG ! i\n  i < length (fst iG)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "then"], ["proof (chain)\npicking this:\n  distinct (fst iG)\n  fst iG ! i = fst iG ! i\n  i < length (fst iG)", "have \"?v \\<notin> set (take i (ig_verts iG))\""], ["proof (prove)\nusing this:\n  distinct (fst iG)\n  fst iG ! i = fst iG ! i\n  i < length (fst iG)\n\ngoal (1 subgoal):\n 1. fst iG ! i \\<notin> set (take i (fst iG))", "by (metis take_nth_distinct)"], ["proof (state)\nthis:\n  fst iG ! i \\<notin> set (take i (fst iG))\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "have \"Suc (card (pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (take i (fst iG))))\n              = card (insert ?v (pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (take i (fst iG))))\" (is \"_ = card ?S\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n    card\n     (insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))))", "using \\<open>?v \\<notin> _\\<close>"], ["proof (prove)\nusing this:\n  fst iG ! i \\<notin> set (take i (fst iG))\n\ngoal (1 subgoal):\n 1. Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n    card\n     (insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))))", "by simp"], ["proof (state)\nthis:\n  Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n  card\n   (insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))))\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "also"], ["proof (state)\nthis:\n  Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n  card\n   (insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))))\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "have \"?S = pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (take (Suc i) (fst iG))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))) =\n    G.isolated_verts \\<inter> set (take (Suc i) (fst iG))", "using \\<open>?v \\<in> _\\<close> \\<open>i < _\\<close> \\<open>?v = _\\<close>"], ["proof (prove)\nusing this:\n  fst iG ! i \\<in> G.isolated_verts\n  i < length (fst iG)\n  fst iG ! i = fst iG ! i\n\ngoal (1 subgoal):\n 1. insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))) =\n    G.isolated_verts \\<inter> set (take (Suc i) (fst iG))", "by (auto simp: take_Suc_conv_app_nth)"], ["proof (state)\nthis:\n  insert (fst iG ! i) (G.isolated_verts \\<inter> set (take i (fst iG))) =\n  G.isolated_verts \\<inter> set (take (Suc i) (fst iG))\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "finally"], ["proof (chain)\npicking this:\n  Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n  card (G.isolated_verts \\<inter> set (take (Suc i) (fst iG)))", "have \"inv_isolated_nodes_outer iG (Suc i) (Suc nz)\""], ["proof (prove)\nusing this:\n  Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n  card (G.isolated_verts \\<inter> set (take (Suc i) (fst iG)))\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes_outer iG (Suc i) (Suc nz)", "using postcondition"], ["proof (prove)\nusing this:\n  Suc (card (G.isolated_verts \\<inter> set (take i (fst iG)))) =\n  card (G.isolated_verts \\<inter> set (take (Suc i) (fst iG)))\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes_outer iG (Suc i) (Suc nz)", "by (auto simp: inv_isolated_nodes_outer_def)"], ["proof (state)\nthis:\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "}"], ["proof (state)\nthis:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "moreover"], ["proof (state)\nthis:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "{"], ["proof (state)\nthis:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "assume A: \"j \\<noteq> length (snd iG)\""], ["proof (state)\nthis:\n  j \\<noteq> length (snd iG)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "then"], ["proof (chain)\npicking this:\n  j \\<noteq> length (snd iG)", "have *: \"j \\<in> (out_arcs (mk_graph iG) ?v \\<union> in_arcs (mk_graph iG) ?v)\""], ["proof (prove)\nusing this:\n  j \\<noteq> length (snd iG)\n\ngoal (1 subgoal):\n 1. j \\<in> out_arcs (mk_graph iG) (fst iG ! i) \\<union>\n            in_arcs (mk_graph iG) (fst iG ! i)", "using postcondition"], ["proof (prove)\nusing this:\n  j \\<noteq> length (snd iG)\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. j \\<in> out_arcs (mk_graph iG) (fst iG ! i) \\<union>\n            in_arcs (mk_graph iG) (fst iG ! i)", "by (auto simp: arcs_mkg mkg_simps ig_tail_def ig_head_def)"], ["proof (state)\nthis:\n  j \\<in> out_arcs (mk_graph iG) (fst iG ! i) \\<union>\n          in_arcs (mk_graph iG) (fst iG ! i)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "then"], ["proof (chain)\npicking this:\n  j \\<in> out_arcs (mk_graph iG) (fst iG ! i) \\<union>\n          in_arcs (mk_graph iG) (fst iG ! i)", "have \"out_arcs (mk_graph iG) ?v \\<noteq> {}\""], ["proof (prove)\nusing this:\n  j \\<in> out_arcs (mk_graph iG) (fst iG ! i) \\<union>\n          in_arcs (mk_graph iG) (fst iG ! i)\n\ngoal (1 subgoal):\n 1. out_arcs (mk_graph iG) (fst iG ! i) \\<noteq> {}", "by (auto simp del: in_in_arcs_conv in_out_arcs_conv)\n               (auto simp: G.in_arcs_empty_iff[symmetric])"], ["proof (state)\nthis:\n  out_arcs (mk_graph iG) (fst iG ! i) \\<noteq> {}\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "then"], ["proof (chain)\npicking this:\n  out_arcs (mk_graph iG) (fst iG ! i) \\<noteq> {}", "have \"?v \\<notin> pre_digraph.isolated_verts (mk_graph iG)\""], ["proof (prove)\nusing this:\n  out_arcs (mk_graph iG) (fst iG ! i) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. fst iG ! i \\<notin> G.isolated_verts", "by (auto simp: pre_digraph.isolated_verts_def)"], ["proof (state)\nthis:\n  fst iG ! i \\<notin> G.isolated_verts\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "then"], ["proof (chain)\npicking this:\n  fst iG ! i \\<notin> G.isolated_verts", "have \"inv_isolated_nodes_outer iG (Suc i) nz\""], ["proof (prove)\nusing this:\n  fst iG ! i \\<notin> G.isolated_verts\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes_outer iG (Suc i) nz", "using postcondition"], ["proof (prove)\nusing this:\n  fst iG ! i \\<notin> G.isolated_verts\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes_outer iG (Suc i) nz", "by (auto simp: inv_isolated_nodes_outer_def take_Suc_conv_app_nth)"], ["proof (state)\nthis:\n  inv_isolated_nodes_outer iG (Suc i) nz\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "}"], ["proof (state)\nthis:\n  j \\<noteq> length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) nz\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "ultimately"], ["proof (chain)\npicking this:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n  j \\<noteq> length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) nz", "have ?inv"], ["proof (prove)\nusing this:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n  j \\<noteq> length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) nz\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n    inv_isolated_nodes_outer iG (i + 1)\n     (if j = length (snd iG) then nz + 1 else nz) \\<and>\n    i + 1 \\<le> length (fst iG)", "using postcondition"], ["proof (prove)\nusing this:\n  j = length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) (Suc nz)\n  j \\<noteq> length (snd iG) \\<Longrightarrow>\n  inv_isolated_nodes_outer iG (Suc i) nz\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and>\n  fst iG ! i = fst iG ! i \\<and>\n  cond =\n  (j < length (snd iG) \\<and>\n   ig_tail iG j \\<noteq> fst iG ! i \\<and>\n   ig_head iG j \\<noteq> fst iG ! i) \\<and>\n  i < length (fst iG) \\<and> j \\<le> length (snd iG)\n  \\<not> cond\n\ngoal (1 subgoal):\n 1. inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n    inv_isolated_nodes_outer iG (i + 1)\n     (if j = length (snd iG) then nz + 1 else nz) \\<and>\n    i + 1 \\<le> length (fst iG)", "by auto"], ["proof (state)\nthis:\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG (i + 1)\n   (if j = length (snd iG) then nz + 1 else nz) \\<and>\n  i + 1 \\<le> length (fst iG)\n\ngoal (3 subgoals):\n 1. \\<And>a b s x y ra rb aa ba sa.\n       \\<lbrakk>inv_isolated_nodes sa iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_inner iG (fst iG ! x) aa \\<and>\n                inv_isolated_nodes_outer iG x y \\<and>\n                fst iG ! x = fst iG ! x \\<and>\n                ba =\n                (aa < length (snd iG) \\<and>\n                 ig_tail iG aa \\<noteq> fst iG ! x \\<and>\n                 ig_head iG aa \\<noteq> fst iG ! x) \\<and>\n                x < length (fst iG) \\<and> aa \\<le> length (snd iG);\n        \\<not> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_isolated_nodes sa iG (length (fst iG))\n                           (length (snd iG)) \\<and>\n                          inv_isolated_nodes_outer iG (x + 1)\n                           (if aa = length (snd iG) then y + 1\n                            else y) \\<and>\n                          x + 1 \\<le> length (fst iG)) \\<and>\n                         ((x + 1,\n                           if aa = length (snd iG) then y + 1 else y),\n                          x, y)\n                         \\<in> measure\n                                (\\<lambda>(i, nz). length (fst iG) - i)\n 2. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 3. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "from \\<open>?var\\<close> \\<open>?inv\\<close>"], ["proof (chain)\npicking this:\n  ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n  \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG (i + 1)\n   (if j = length (snd iG) then nz + 1 else nz) \\<and>\n  i + 1 \\<le> length (fst iG)", "show ?case"], ["proof (prove)\nusing this:\n  ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n  \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n  inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG (i + 1)\n   (if j = length (snd iG) then nz + 1 else nz) \\<and>\n  i + 1 \\<le> length (fst iG)\n\ngoal (1 subgoal):\n 1. (inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n     inv_isolated_nodes_outer iG (i + 1)\n      (if j = length (snd iG) then nz + 1 else nz) \\<and>\n     i + 1 \\<le> length (fst iG)) \\<and>\n    ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n    \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)", "by blast"], ["proof (state)\nthis:\n  (inv_isolated_nodes sa iG (length (fst iG)) (length (snd iG)) \\<and>\n   inv_isolated_nodes_outer iG (i + 1)\n    (if j = length (snd iG) then nz + 1 else nz) \\<and>\n   i + 1 \\<le> length (fst iG)) \\<and>\n  ((i + 1, if j = length (snd iG) then nz + 1 else nz), i, nz)\n  \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 2. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card G.isolated_verts", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_isolated_nodes ?sa2 iG (length (fst iG))\n            (length (snd iG)) \\<and>\n           inv_isolated_nodes_inner iG (fst iG ! i) j \\<and>\n           inv_isolated_nodes_outer iG i nz \\<and>\n           fst iG ! i = fst iG ! i \\<and>\n           cond =\n           (j < length (snd iG) \\<and>\n            ig_tail iG j \\<noteq> fst iG ! i \\<and>\n            ig_head iG j \\<noteq> fst iG ! i) \\<and>\n           i < length (fst iG) \\<and> j \\<le> length (snd iG);\n   \\<not> cond\\<rbrakk>\n  \\<Longrightarrow> (inv_isolated_nodes ?sa2 iG (length (fst iG))\n                      (length (snd iG)) \\<and>\n                     inv_isolated_nodes_outer iG (i + 1)\n                      (if j = length (snd iG) then nz + 1 else nz) \\<and>\n                     i + 1 \\<le> length (fst iG)) \\<and>\n                    ((i + 1, if j = length (snd iG) then nz + 1 else nz), i,\n                     nz)\n                    \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 2. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_isolated_nodes ?sa2 iG (length (fst iG))\n            (length (snd iG)) \\<and>\n           inv_isolated_nodes_inner iG (fst iG ! i) ?j5 \\<and>\n           inv_isolated_nodes_outer iG i nz \\<and>\n           fst iG ! i = fst iG ! i \\<and>\n           ?cond5 =\n           (?j5 < length (snd iG) \\<and>\n            ig_tail iG ?j5 \\<noteq> fst iG ! i \\<and>\n            ig_head iG ?j5 \\<noteq> fst iG ! i) \\<and>\n           i < length (fst iG) \\<and> ?j5 \\<le> length (snd iG);\n   \\<not> ?cond5\\<rbrakk>\n  \\<Longrightarrow> (inv_isolated_nodes ?sa2 iG (length (fst iG))\n                      (length (snd iG)) \\<and>\n                     inv_isolated_nodes_outer iG (i + 1)\n                      (if ?j5 = length (snd iG) then nz + 1 else nz) \\<and>\n                     i + 1 \\<le> length (fst iG)) \\<and>\n                    ((i + 1, if ?j5 = length (snd iG) then nz + 1 else nz),\n                     i, nz)\n                    \\<in> measure (\\<lambda>(i, nz). length (fst iG) - i)\n\ngoal (2 subgoals):\n 1. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 2. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 2. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case wf"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a b. wf (measure (\\<lambda>(i, nz). length (fst iG) - i))\n 2. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure\n         (\\<lambda>a. case a of (i, nz) \\<Rightarrow> length (fst iG) - i))", "by auto"], ["proof (state)\nthis:\n  wf (measure\n       (\\<lambda>a. case a of (i, nz) \\<Rightarrow> length (fst iG) - i))\n\ngoal (1 subgoal):\n 1. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "case postcondition"], ["proof (state)\nthis:\n  inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  \\<not> i < length (fst iG)\n\ngoal (1 subgoal):\n 1. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "have \"pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (fst iG) = pre_digraph.isolated_verts (mk_graph iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (fst iG) =\n    pre_digraph.isolated_verts (mk_graph iG)", "by (auto simp: pre_digraph.isolated_verts_def mkg_simps)"], ["proof (state)\nthis:\n  pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (fst iG) =\n  pre_digraph.isolated_verts (mk_graph iG)\n\ngoal (1 subgoal):\n 1. \\<And>a b s.\n       \\<lbrakk>inv_isolated_nodes s iG (length (fst iG))\n                 (length (snd iG)) \\<and>\n                inv_isolated_nodes_outer iG a b \\<and>\n                a \\<le> length (fst iG);\n        \\<not> a < length (fst iG)\\<rbrakk>\n       \\<Longrightarrow> b = card (pre_digraph.isolated_verts (mk_graph iG))", "with postcondition"], ["proof (chain)\npicking this:\n  inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  \\<not> i < length (fst iG)\n  pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (fst iG) =\n  pre_digraph.isolated_verts (mk_graph iG)", "show ?case"], ["proof (prove)\nusing this:\n  inv_isolated_nodes s iG (length (fst iG)) (length (snd iG)) \\<and>\n  inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG)\n  \\<not> i < length (fst iG)\n  pre_digraph.isolated_verts (mk_graph iG) \\<inter> set (fst iG) =\n  pre_digraph.isolated_verts (mk_graph iG)\n\ngoal (1 subgoal):\n 1. nz = card (pre_digraph.isolated_verts (mk_graph iG))", "by (auto simp: inv_isolated_nodes_def inv_isolated_nodes_outer_def)"], ["proof (state)\nthis:\n  nz = card (pre_digraph.isolated_verts (mk_graph iG))\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_isolated_nodes ?s2 iG (length (fst iG))\n            (length (snd iG)) \\<and>\n           inv_isolated_nodes_outer iG i nz \\<and> i \\<le> length (fst iG);\n   \\<not> i < length (fst iG)\\<rbrakk>\n  \\<Longrightarrow> nz = card (pre_digraph.isolated_verts (mk_graph iG))\n\ngoal:\nNo subgoals!", "qed"], ["", "declare ovalidNF_isolated_nodes[THEN ovalidNF_wp, THEN trivial_label, vcg_l]"], ["", "subsubsection \\<open>@{term face_cycles}\\<close>"], ["", "definition \"inv_face_cycles s iG iM ecnt \\<equiv>\n  ecnt = length (ig_edges iG)\n  \\<and> digraph_map (mk_graph iG) iM\n  \""], ["", "definition fcs_upto :: \"nat pre_map \\<Rightarrow> nat \\<Rightarrow> nat set set\" where\n  \"fcs_upto iM i \\<equiv> {pre_digraph_map.face_cycle_set iM k | k. k < i}\""], ["", "definition \"inv_face_cycles_outer s iG iM i c edge_info \\<equiv>\n  let fcs = fcs_upto iM i in\n  c = card fcs\n  \\<and> (\\<forall>k < length (ig_edges iG). k \\<in> edge_info \\<longleftrightarrow> k \\<in> \\<Union>fcs)\""], ["", "definition \"inv_face_cycles_inner s iG iM i j c edge_info \\<equiv>\n  j \\<in> pre_digraph_map.face_cycle_set iM i\n  \\<and> c = card (fcs_upto iM i)\n  \\<and> i \\<notin> \\<Union>(fcs_upto iM i)\n  \\<and> (\\<forall>k < length (ig_edges iG). k \\<in> edge_info \\<longleftrightarrow>\n    (k \\<in> \\<Union>(fcs_upto iM i)\n    \\<or> (\\<exists>l < funpow_dist1 (pre_digraph_map.face_cycle_succ iM) i j. (pre_digraph_map.face_cycle_succ iM ^^ l) i = k)))\""], ["", "lemma finite_fcs_upto: \"finite (fcs_upto iM i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fcs_upto iM i)", "by (auto simp: fcs_upto_def)"], ["", "lemma card_orbit_eq_funpow_dist1:\n  assumes \"x \\<in> orbit f x\" shows \"card (orbit f x) = funpow_dist1 f x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "have \"card (orbit f x) = card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (orbit f x) =\n    card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x})", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. card (orbit f x) =\n    card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x})", "by (simp only: orbit_conv_funpow_dist1[symmetric])"], ["proof (state)\nthis:\n  card (orbit f x) =\n  card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x})\n\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "also"], ["proof (state)\nthis:\n  card (orbit f x) =\n  card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x})\n\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "have \"\\<dots> = card {0..<funpow_dist1 f x x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x}) =\n    card {0..<funpow_dist1 f x x}", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x}) =\n    card {0..<funpow_dist1 f x x}", "by (intro card_image inj_on_funpow_dist1)"], ["proof (state)\nthis:\n  card ((\\<lambda>n. (f ^^ n) x) ` {0..<funpow_dist1 f x x}) =\n  card {0..<funpow_dist1 f x x}\n\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "finally"], ["proof (chain)\npicking this:\n  card (orbit f x) = card {0..<funpow_dist1 f x x}", "show ?thesis"], ["proof (prove)\nusing this:\n  card (orbit f x) = card {0..<funpow_dist1 f x x}\n\ngoal (1 subgoal):\n 1. card (orbit f x) = funpow_dist1 f x x", "by simp"], ["proof (state)\nthis:\n  card (orbit f x) = funpow_dist1 f x x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma funpow_dist1_le:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> orbit f x\"\n  shows \"funpow_dist1 f x y \\<le> funpow_dist1 f x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> funpow_dist1 f x x", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> orbit f x\n  x \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> funpow_dist1 f x x", "by (intro funpow_dist1_le_self funpow_dist1_prop) simp_all"], ["", "lemma funpow_dist1_le_card:\n  assumes \"y \\<in> orbit f x\" \"x \\<in> orbit f x\"\n  shows \"funpow_dist1 f x y \\<le> card (orbit f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> card (orbit f x)", "using funpow_dist1_le[OF assms]"], ["proof (prove)\nusing this:\n  funpow_dist1 f x y \\<le> funpow_dist1 f x x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> card (orbit f x)", "using assms"], ["proof (prove)\nusing this:\n  funpow_dist1 f x y \\<le> funpow_dist1 f x x\n  y \\<in> orbit f x\n  x \\<in> orbit f x\n\ngoal (1 subgoal):\n 1. funpow_dist1 f x y \\<le> card (orbit f x)", "by (simp add: card_orbit_eq_funpow_dist1)"], ["", "lemma (in digraph_map) funpow_dist1_le_card_fcs:\n  assumes \"b \\<in> face_cycle_set a\"\n  shows \"funpow_dist1 face_cycle_succ a b \\<le> card (face_cycle_set a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 face_cycle_succ a b \\<le> card (face_cycle_set a)", "by (metis assms face_cycle_set_def face_cycle_set_self funpow_dist1_le_card)"], ["", "lemma funpow_dist1_f_eq:\n  assumes \"b \\<in> orbit f a\" \"a \\<in> orbit f a\" \"a \\<noteq> b\"\n  shows \"funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "have f_inj: \"inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}", "by (rule inj_on_funpow_dist1) (rule assms)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "have \"funpow_dist1 f a b \\<le> funpow_dist1 f a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a b \\<le> funpow_dist1 f a a", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> orbit f a\n  a \\<in> orbit f a\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a b \\<le> funpow_dist1 f a a", "by (intro funpow_dist1_le)"], ["proof (state)\nthis:\n  funpow_dist1 f a b \\<le> funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "moreover"], ["proof (state)\nthis:\n  funpow_dist1 f a b \\<le> funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "have \"funpow_dist1 f a b \\<noteq> funpow_dist1 f a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a b \\<noteq> funpow_dist1 f a a", "by (metis assms funpow_dist1_prop)"], ["proof (state)\nthis:\n  funpow_dist1 f a b \\<noteq> funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "ultimately"], ["proof (chain)\npicking this:\n  funpow_dist1 f a b \\<le> funpow_dist1 f a a\n  funpow_dist1 f a b \\<noteq> funpow_dist1 f a a", "have f_less: \"funpow_dist1 f a b < funpow_dist1 f a a\""], ["proof (prove)\nusing this:\n  funpow_dist1 f a b \\<le> funpow_dist1 f a a\n  funpow_dist1 f a b \\<noteq> funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a b < funpow_dist1 f a a", "by simp"], ["proof (state)\nthis:\n  funpow_dist1 f a b < funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "have f_Suc_eq: \"(f ^^ Suc (funpow_dist1 f a b)) a = f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ Suc (funpow_dist1 f a b)) a = f b", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> orbit f a\n  a \\<in> orbit f a\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (f ^^ Suc (funpow_dist1 f a b)) a = f b", "by (metis funpow.simps(2) o_apply funpow_dist1_prop)"], ["proof (state)\nthis:\n  (f ^^ Suc (funpow_dist1 f a b)) a = f b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "proof (cases \"f b = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f b = a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\n 2. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "case True"], ["proof (state)\nthis:\n  f b = a\n\ngoal (2 subgoals):\n 1. f b = a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\n 2. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "then"], ["proof (chain)\npicking this:\n  f b = a", "show ?thesis"], ["proof (prove)\nusing this:\n  f b = a\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "by (metis Suc_lessI f_Suc_eq f_less assms(2) funpow.simps(1) funpow_neq_less_funpow_dist1 id_apply old.nat.distinct(1) zero_less_Suc)"], ["proof (state)\nthis:\n  funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\n\ngoal (1 subgoal):\n 1. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "case False"], ["proof (state)\nthis:\n  f b \\<noteq> a\n\ngoal (1 subgoal):\n 1. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "then"], ["proof (chain)\npicking this:\n  f b \\<noteq> a", "have *: \"Suc (funpow_dist1 f a b) < funpow_dist1 f a a\""], ["proof (prove)\nusing this:\n  f b \\<noteq> a\n\ngoal (1 subgoal):\n 1. Suc (funpow_dist1 f a b) < funpow_dist1 f a a", "using f_Suc_eq"], ["proof (prove)\nusing this:\n  f b \\<noteq> a\n  (f ^^ Suc (funpow_dist1 f a b)) a = f b\n\ngoal (1 subgoal):\n 1. Suc (funpow_dist1 f a b) < funpow_dist1 f a a", "by (metis assms(2) f_less funpow_dist1_prop le_less_Suc_eq less_Suc_eq_le not_less_eq)"], ["proof (state)\nthis:\n  Suc (funpow_dist1 f a b) < funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "from f_inj"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}", "have **: \"\\<And>n. n < funpow_dist1 f a a \\<Longrightarrow> n \\<noteq> Suc (funpow_dist1 f a b) \\<Longrightarrow> (f ^^ n) a \\<noteq> f b\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < funpow_dist1 f a a;\n        n \\<noteq> Suc (funpow_dist1 f a b)\\<rbrakk>\n       \\<Longrightarrow> (f ^^ n) a \\<noteq> f b", "using f_Suc_eq"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>n. (f ^^ n) a) {0..<funpow_dist1 f a a}\n  (f ^^ Suc (funpow_dist1 f a b)) a = f b\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < funpow_dist1 f a a;\n        n \\<noteq> Suc (funpow_dist1 f a b)\\<rbrakk>\n       \\<Longrightarrow> (f ^^ n) a \\<noteq> f b", "by (auto dest!: inj_onD) (metis * assms(2) f_Suc_eq funpow_neq_less_funpow_dist1)"], ["proof (state)\nthis:\n  \\<lbrakk>?n < funpow_dist1 f a a;\n   ?n \\<noteq> Suc (funpow_dist1 f a b)\\<rbrakk>\n  \\<Longrightarrow> (f ^^ ?n) a \\<noteq> f b\n\ngoal (1 subgoal):\n 1. f b \\<noteq> a \\<Longrightarrow>\n    funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "assume A: \"\\<not>?thesis\""], ["proof (state)\nthis:\n  funpow_dist1 f a (f b) \\<noteq> Suc (funpow_dist1 f a b)\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "have \"(f ^^ (funpow_dist1 f a (f b))) a  = f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ funpow_dist1 f a (f b)) a = f b", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> orbit f a\n  a \\<in> orbit f a\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. (f ^^ funpow_dist1 f a (f b)) a = f b", "by (intro funpow_dist1_prop) (simp add: orbit.intros)"], ["proof (state)\nthis:\n  (f ^^ funpow_dist1 f a (f b)) a = f b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "with A **"], ["proof (chain)\npicking this:\n  funpow_dist1 f a (f b) \\<noteq> Suc (funpow_dist1 f a b)\n  \\<lbrakk>?n < funpow_dist1 f a a;\n   ?n \\<noteq> Suc (funpow_dist1 f a b)\\<rbrakk>\n  \\<Longrightarrow> (f ^^ ?n) a \\<noteq> f b\n  (f ^^ funpow_dist1 f a (f b)) a = f b", "have \"funpow_dist1 f a a \\<le> (funpow_dist1 f a (f b))\""], ["proof (prove)\nusing this:\n  funpow_dist1 f a (f b) \\<noteq> Suc (funpow_dist1 f a b)\n  \\<lbrakk>?n < funpow_dist1 f a a;\n   ?n \\<noteq> Suc (funpow_dist1 f a b)\\<rbrakk>\n  \\<Longrightarrow> (f ^^ ?n) a \\<noteq> f b\n  (f ^^ funpow_dist1 f a (f b)) a = f b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a a \\<le> funpow_dist1 f a (f b)", "by (metis less_Suc_eq_le not_less_eq)"], ["proof (state)\nthis:\n  funpow_dist1 f a a \\<le> funpow_dist1 f a (f b)\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  funpow_dist1 f a a \\<le> funpow_dist1 f a (f b)", "have \"Suc (funpow_dist1 f a b) < (funpow_dist1 f a (f b))\""], ["proof (prove)\nusing this:\n  funpow_dist1 f a a \\<le> funpow_dist1 f a (f b)\n\ngoal (1 subgoal):\n 1. Suc (funpow_dist1 f a b) < funpow_dist1 f a (f b)", "using *"], ["proof (prove)\nusing this:\n  funpow_dist1 f a a \\<le> funpow_dist1 f a (f b)\n  Suc (funpow_dist1 f a b) < funpow_dist1 f a a\n\ngoal (1 subgoal):\n 1. Suc (funpow_dist1 f a b) < funpow_dist1 f a (f b)", "by linarith"], ["proof (state)\nthis:\n  Suc (funpow_dist1 f a b) < funpow_dist1 f a (f b)\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  Suc (funpow_dist1 f a b) < funpow_dist1 f a (f b)", "have \"(f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b\""], ["proof (prove)\nusing this:\n  Suc (funpow_dist1 f a b) < funpow_dist1 f a (f b)\n\ngoal (1 subgoal):\n 1. (f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b", "by (intro funpow_dist1_least) simp_all"], ["proof (state)\nthis:\n  (f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a (f b) \\<noteq>\n    Suc (funpow_dist1 f a b) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b", "show False"], ["proof (prove)\nusing this:\n  (f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b\n\ngoal (1 subgoal):\n 1. False", "using f_Suc_eq"], ["proof (prove)\nusing this:\n  (f ^^ Suc (funpow_dist1 f a b)) a \\<noteq> f b\n  (f ^^ Suc (funpow_dist1 f a b)) a = f b\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  funpow_dist1 f a (f b) = Suc (funpow_dist1 f a b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in -) funpow_dist1_less_f:\n  assumes \"b \\<in> orbit f a\" \"a \\<in> orbit f a\" \"a \\<noteq> b\"\n  shows \"funpow_dist1 f a b < funpow_dist1 f a (f b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 f a b < funpow_dist1 f a (f b)", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> orbit f a\n  a \\<in> orbit f a\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. funpow_dist1 f a b < funpow_dist1 f a (f b)", "by (simp add: funpow_dist1_f_eq)"], ["", "lemma ovalidNF_face_cycles: \"\n  ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM)\n    (face_cycles iG iM)\n  (\\<lambda>r s. r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM) (face_cycles iG iM)\n     (\\<lambda>r s.\n         r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))", "unfolding face_cycles_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM)\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         (edge_info, c, i) \\<leftarrow>\n         owhile (\\<lambda>(edge_info, c, i) s. i < ecnt)\n          (\\<lambda>(edge_info, c, i).\n              DO (edge_info, c) \\<leftarrow>\n                 ocondition (\\<lambda>s. i \\<notin> edge_info)\n                  (DO j \\<leftarrow> oreturn i;\n                      edge_info \\<leftarrow> oreturn (insert j edge_info);\n                      ret' \\<leftarrow>\n                      oreturn (pre_digraph_map.face_cycle_succ iM j);\n                      (edge_info, j) \\<leftarrow>\n                      owhile (\\<lambda>(edge_info, j) s. i \\<noteq> j)\n                       (\\<lambda>(edge_info, j).\n                           oreturn\n                            (insert j edge_info,\n                             pre_digraph_map.face_cycle_succ iM j))\n                       (edge_info, ret');\n                      oreturn (edge_info, c + 1)\n                   OD)\n                  (oreturn (edge_info, c));\n                 oreturn (edge_info, c, i + 1)\n              OD)\n          ({}, 0, 0);\n         oreturn c\n      OD)\n     (\\<lambda>r s.\n         r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))", "apply (rewrite\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n          (\\<lambda>(edge_info, c, i) s. inv_face_cycles s iG iM ecnt\n            \\<and> inv_face_cycles_outer s iG iM i c edge_info\n            \\<and> i \\<le> ecnt)\n          (measure (\\<lambda>(edge_info, c, i). ecnt - i))\n      \" owhile_inv_def[symmetric]\n  )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM)\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         (edge_info, c, i) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(edge_info, c, i) s. i < ecnt)\n          (\\<lambda>(edge_info, c, i).\n              DO (edge_info, c) \\<leftarrow>\n                 ocondition (\\<lambda>s. i \\<notin> edge_info)\n                  (DO j \\<leftarrow> oreturn i;\n                      edge_info \\<leftarrow> oreturn (insert j edge_info);\n                      ret' \\<leftarrow>\n                      oreturn (pre_digraph_map.face_cycle_succ iM j);\n                      (edge_info, j) \\<leftarrow>\n                      owhile (\\<lambda>(edge_info, j) s. i \\<noteq> j)\n                       (\\<lambda>(edge_info, j).\n                           oreturn\n                            (insert j edge_info,\n                             pre_digraph_map.face_cycle_succ iM j))\n                       (edge_info, ret');\n                      oreturn (edge_info, c + 1)\n                   OD)\n                  (oreturn (edge_info, c));\n                 oreturn (edge_info, c, i + 1)\n              OD)\n          ({}, 0, 0)\n          (\\<lambda>(edge_info, c, i) s.\n              inv_face_cycles s iG iM ecnt \\<and>\n              inv_face_cycles_outer s iG iM i c edge_info \\<and>\n              i \\<le> ecnt)\n          (measure (\\<lambda>(edge_info, c, i). ecnt - i));\n         oreturn c\n      OD)\n     (\\<lambda>r s.\n         r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))", "apply (rewrite\n    in \"owhile_inv _ (\\<lambda>(_, c, i). \\<hole>)\"\n    in \"oreturn (length (ig_edges iG)) |>> (\\<lambda>ecnt. \\<hole>)\"\n    to \"owhile_inv _ _ _\n          (\\<lambda>(edge_info, j) s. inv_face_cycles s iG iM ecnt\n            \\<and> inv_face_cycles_inner s iG iM i j c edge_info\n            \\<and> i < ecnt)\n          (measure (\\<lambda>(edge_info, j). card (pre_digraph_map.face_cycle_set iM i) - funpow_dist1 (pre_digraph_map.face_cycle_succ iM) i j))\n      \" owhile_inv_def[symmetric]\n  )"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. digraph_map (mk_graph iG) iM)\n     (DO ecnt \\<leftarrow> oreturn (length (snd iG));\n         (edge_info, c, i) \\<leftarrow>\n         AutoCorres_Misc.owhile_inv (\\<lambda>(edge_info, c, i) s. i < ecnt)\n          (\\<lambda>(edge_info, c, i).\n              DO (edge_info, c) \\<leftarrow>\n                 ocondition (\\<lambda>s. i \\<notin> edge_info)\n                  (DO j \\<leftarrow> oreturn i;\n                      edge_info \\<leftarrow> oreturn (insert j edge_info);\n                      ret' \\<leftarrow>\n                      oreturn (pre_digraph_map.face_cycle_succ iM j);\n                      (edge_info, j) \\<leftarrow>\n                      AutoCorres_Misc.owhile_inv\n                       (\\<lambda>(edge_info, j) s. i \\<noteq> j)\n                       (\\<lambda>(edge_info, j).\n                           oreturn\n                            (insert j edge_info,\n                             pre_digraph_map.face_cycle_succ iM j))\n                       (edge_info, ret')\n                       (\\<lambda>(edge_info, j) s.\n                           inv_face_cycles s iG iM ecnt \\<and>\n                           inv_face_cycles_inner s iG iM i j c\n                            edge_info \\<and>\n                           i < ecnt)\n                       (measure\n                         (\\<lambda>(edge_info, j).\n                             card (pre_digraph_map.face_cycle_set iM i) -\n                             funpow_dist1\n                              (pre_digraph_map.face_cycle_succ iM) i j));\n                      oreturn (edge_info, c + 1)\n                   OD)\n                  (oreturn (edge_info, c));\n                 oreturn (edge_info, c, i + 1)\n              OD)\n          ({}, 0, 0)\n          (\\<lambda>(edge_info, c, i) s.\n              inv_face_cycles s iG iM ecnt \\<and>\n              inv_face_cycles_outer s iG iM i c edge_info \\<and>\n              i \\<le> ecnt)\n          (measure (\\<lambda>(edge_info, c, i). ecnt - i));\n         oreturn c\n      OD)\n     (\\<lambda>r s.\n         r = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))", "proof vcg_casify"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n 7. \\<And>s.\n       digraph_map (mk_graph iG) iM \\<Longrightarrow>\n       inv_face_cycles s iG iM (length (snd iG)) \\<and>\n       inv_face_cycles_outer s iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)", "{"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n 7. \\<And>s.\n       digraph_map (mk_graph iG) iM \\<Longrightarrow>\n       inv_face_cycles s iG iM (length (snd iG)) \\<and>\n       inv_face_cycles_outer s iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)", "case (weaken s)"], ["proof (state)\nthis:\n  digraph_map (mk_graph iG) iM\n\ngoal (7 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n 7. \\<And>s.\n       digraph_map (mk_graph iG) iM \\<Longrightarrow>\n       inv_face_cycles s iG iM (length (snd iG)) \\<and>\n       inv_face_cycles_outer s iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)", "then"], ["proof (chain)\npicking this:\n  digraph_map (mk_graph iG) iM", "show ?case"], ["proof (prove)\nusing this:\n  digraph_map (mk_graph iG) iM\n\ngoal (1 subgoal):\n 1. inv_face_cycles s iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_outer s iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)", "by (auto simp add: inv_face_cycles_def inv_face_cycles_outer_def fcs_upto_def)"], ["proof (state)\nthis:\n  inv_face_cycles s iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "}"], ["proof (state)\nthis:\n  digraph_map (mk_graph iG) iM \\<Longrightarrow>\n  inv_face_cycles ?s2 iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer ?s2 iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "{"], ["proof (state)\nthis:\n  digraph_map (mk_graph iG) iM \\<Longrightarrow>\n  inv_face_cycles ?s2 iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer ?s2 iG iM 0 0 {} \\<and> 0 \\<le> length (snd iG)\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "case (while edge_info c i)"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "{"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "case (postcondition s)"], ["proof (state)\nthis:\n  inv_face_cycles s iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s iG iM i c edge_info \\<and> i \\<le> length (snd iG)\n  \\<not> i < length (snd iG)\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "moreover"], ["proof (state)\nthis:\n  inv_face_cycles s iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s iG iM i c edge_info \\<and> i \\<le> length (snd iG)\n  \\<not> i < length (snd iG)\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "have \"fcs_upto iM (length (ig_edges iG))\n          = pre_digraph_map.face_cycle_sets (mk_graph iG) iM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fcs_upto iM (length (snd iG)) =\n    pre_digraph_map.face_cycle_sets (mk_graph iG) iM", "by (auto simp: pre_digraph_map.face_cycle_sets_def arcs_mkg fcs_upto_def)"], ["proof (state)\nthis:\n  fcs_upto iM (length (snd iG)) =\n  pre_digraph_map.face_cycle_sets (mk_graph iG) iM\n\ngoal (6 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 6. \\<And>a aa b s.\n       \\<lbrakk>inv_face_cycles s iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer s iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        \\<not> b < length (snd iG)\\<rbrakk>\n       \\<Longrightarrow> aa =\n                         card\n                          (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "ultimately"], ["proof (chain)\npicking this:\n  inv_face_cycles s iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s iG iM i c edge_info \\<and> i \\<le> length (snd iG)\n  \\<not> i < length (snd iG)\n  fcs_upto iM (length (snd iG)) =\n  pre_digraph_map.face_cycle_sets (mk_graph iG) iM", "show ?case"], ["proof (prove)\nusing this:\n  inv_face_cycles s iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s iG iM i c edge_info \\<and> i \\<le> length (snd iG)\n  \\<not> i < length (snd iG)\n  fcs_upto iM (length (snd iG)) =\n  pre_digraph_map.face_cycle_sets (mk_graph iG) iM\n\ngoal (1 subgoal):\n 1. c = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)", "by (auto simp: inv_face_cycles_outer_def Let_def)"], ["proof (state)\nthis:\n  c = card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_face_cycles ?s2 iG iM (length (snd iG)) \\<and>\n           inv_face_cycles_outer ?s2 iG iM i c edge_info \\<and>\n           i \\<le> length (snd iG);\n   \\<not> i < length (snd iG)\\<rbrakk>\n  \\<Longrightarrow> c =\n                    card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>inv_face_cycles ?s2 iG iM (length (snd iG)) \\<and>\n           inv_face_cycles_outer ?s2 iG iM i c edge_info \\<and>\n           i \\<le> length (snd iG);\n   \\<not> i < length (snd iG)\\<rbrakk>\n  \\<Longrightarrow> c =\n                    card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM)\n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (invariant s)"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (weaken s')"], ["proof (state)\nthis:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (pre_digraph_map.face_cycle_succ iM b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "interpret G: digraph_map \"mk_graph iG\" iM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "using weaken"], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "by (auto simp: inv_face_cycles_def)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b s sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_outer sa iG iM b aa a \\<and>\n                b \\<le> length (snd iG);\n        b < length (snd iG); sa = s\\<rbrakk>\n       \\<Longrightarrow> BRANCH\n                          (if b \\<notin> a\n                           then inv_face_cycles sa iG iM\n                                 (length (snd iG)) \\<and>\n                                inv_face_cycles_inner sa iG iM b\n                                 (G.face_cycle_succ b) aa\n                                 (insert b a) \\<and>\n                                b < length (snd iG)\n                           else (inv_face_cycles sa iG iM\n                                  (length (snd iG)) \\<and>\n                                 inv_face_cycles_outer sa iG iM (b + 1) aa\n                                  a \\<and>\n                                 b + 1 \\<le> length (snd iG)) \\<and>\n                                ((a, aa, b + 1), a, aa, b)\n                                \\<in> measure\n (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n 5. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. BRANCH\n     (if i \\<notin> edge_info\n      then inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n           inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n            (insert i edge_info) \\<and>\n           i < length (snd iG)\n      else (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n            inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n            i + 1 \\<le> length (snd iG)) \\<and>\n           ((edge_info, c, i + 1), edge_info, c, i)\n           \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "proof branch_casify"], ["proof (state)\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "case else"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "case g"], ["proof (state)\nthis:\n  \\<not> i \\<notin> edge_info\n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "then"], ["proof (chain)\npicking this:\n  \\<not> i \\<notin> edge_info", "have \"G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}\""], ["proof (prove)\nusing this:\n  \\<not> i \\<notin> edge_info\n\ngoal (1 subgoal):\n 1. G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}", "using weaken"], ["proof (prove)\nusing this:\n  \\<not> i \\<notin> edge_info\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}", "by (auto simp: inv_face_cycles_outer_def fcs_upto_def dest: G.face_cycle_eq)"], ["proof (state)\nthis:\n  G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}\n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}", "have \"{G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}\""], ["proof (prove)\nusing this:\n  G.face_cycle_set i \\<in> {G.face_cycle_set k |k. k < i}\n\ngoal (1 subgoal):\n 1. {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}", "by (auto elim: less_SucE)"], ["proof (state)\nthis:\n  {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}\n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "then"], ["proof (chain)\npicking this:\n  {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}", "have \"inv_face_cycles_outer s' iG iM (i + 1) c edge_info\""], ["proof (prove)\nusing this:\n  {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}\n\ngoal (1 subgoal):\n 1. inv_face_cycles_outer s' iG iM (i + 1) c edge_info", "using weaken"], ["proof (prove)\nusing this:\n  {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. inv_face_cycles_outer s' iG iM (i + 1) c edge_info", "unfolding inv_face_cycles_outer_def"], ["proof (prove)\nusing this:\n  {G.face_cycle_set k |k. k < Suc i} = {G.face_cycle_set k |k. k < i}\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  (let fcs = fcs_upto iM i\n   in c = card fcs \\<and>\n      (\\<forall>k<length (snd iG).\n          (k \\<in> edge_info) = (k \\<in> \\<Union> fcs))) \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. let fcs = fcs_upto iM (i + 1)\n    in c = card fcs \\<and>\n       (\\<forall>k<length (snd iG).\n           (k \\<in> edge_info) = (k \\<in> \\<Union> fcs))", "by (auto simp: fcs_upto_def)"], ["proof (state)\nthis:\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info\n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "then"], ["proof (chain)\npicking this:\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info", "have ?inv"], ["proof (prove)\nusing this:\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n    i + 1 \\<le> length (snd iG)", "using weaken"], ["proof (prove)\nusing this:\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n    i + 1 \\<le> length (snd iG)", "by auto"], ["proof (state)\nthis:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n  i + 1 \\<le> length (snd iG)\n\ngoal (2 subgoals):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)\n 2. \\<not> i \\<notin> edge_info \\<Longrightarrow>\n    (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "then"], ["proof (chain)\npicking this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n  i + 1 \\<le> length (snd iG)", "show ?case"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n  i + 1 \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "using weaken"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n  i + 1 \\<le> length (snd iG)\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c, i + 1), edge_info, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "by auto"], ["proof (state)\nthis:\n  (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n   i + 1 \\<le> length (snd iG)) \\<and>\n  ((edge_info, c, i + 1), edge_info, c, i)\n  \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "case \"then\""], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "case g"], ["proof (state)\nthis:\n  i \\<notin> edge_info\n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "have fd1_triv: \"\\<And>f x. funpow_dist1 f x (f x) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x. funpow_dist1 f x (f x) = 1", "by (simp add: funpow_dist_0)"], ["proof (state)\nthis:\n  funpow_dist1 ?f1 ?x1 (?f1 ?x1) = 1\n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "have fcs_in: \"G.face_cycle_succ i \\<in> G.face_cycle_set i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ i \\<in> G.face_cycle_set i", "by (simp add: G.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ i \\<in> G.face_cycle_set i\n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "have i_not_in_fcs: \"i \\<notin> \\<Union>(fcs_upto iM i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<notin> \\<Union> (fcs_upto iM i)", "using g weaken"], ["proof (prove)\nusing this:\n  i \\<notin> edge_info\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. i \\<notin> \\<Union> (fcs_upto iM i)", "by (auto simp: inv_face_cycles_outer_def fcs_upto_def)"], ["proof (state)\nthis:\n  i \\<notin> \\<Union> (fcs_upto iM i)\n\ngoal (1 subgoal):\n 1. i \\<notin> edge_info \\<Longrightarrow>\n    inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "from weaken"], ["proof (chain)\npicking this:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s", "show ?case"], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM i c edge_info \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n     (insert i edge_info) \\<and>\n    i < length (snd iG)", "unfolding inv_face_cycles_inner_def inv_face_cycles_outer_def"], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  (let fcs = fcs_upto iM i\n   in c = card fcs \\<and>\n      (\\<forall>k<length (snd iG).\n          (k \\<in> edge_info) = (k \\<in> \\<Union> fcs))) \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    (G.face_cycle_succ i \\<in> G.face_cycle_set i \\<and>\n     c = card (fcs_upto iM i) \\<and>\n     i \\<notin> \\<Union> (fcs_upto iM i) \\<and>\n     (\\<forall>k<length (snd iG).\n         (k \\<in> insert i edge_info) =\n         (k \\<in> \\<Union> (fcs_upto iM i) \\<or>\n          (\\<exists>l<funpow_dist1 G.face_cycle_succ i\n                       (G.face_cycle_succ i).\n              (G.face_cycle_succ ^^ l) i = k)))) \\<and>\n    i < length (snd iG)", "using i_not_in_fcs"], ["proof (prove)\nusing this:\n  i < length (snd iG)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  (let fcs = fcs_upto iM i\n   in c = card fcs \\<and>\n      (\\<forall>k<length (snd iG).\n          (k \\<in> edge_info) = (k \\<in> \\<Union> fcs))) \\<and>\n  i \\<le> length (snd iG)\n  s' = s\n  i \\<notin> \\<Union> (fcs_upto iM i)\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    (G.face_cycle_succ i \\<in> G.face_cycle_set i \\<and>\n     c = card (fcs_upto iM i) \\<and>\n     i \\<notin> \\<Union> (fcs_upto iM i) \\<and>\n     (\\<forall>k<length (snd iG).\n         (k \\<in> insert i edge_info) =\n         (k \\<in> \\<Union> (fcs_upto iM i) \\<or>\n          (\\<exists>l<funpow_dist1 G.face_cycle_succ i\n                       (G.face_cycle_succ i).\n              (G.face_cycle_succ ^^ l) i = k)))) \\<and>\n    i < length (snd iG)", "by (auto simp: fd1_triv fcs_in fcs_upto_def)"], ["proof (state)\nthis:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n   (insert i edge_info) \\<and>\n  i < length (snd iG)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  BRANCH\n   (if i \\<notin> edge_info\n    then inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n         inv_face_cycles_inner s' iG iM i (G.face_cycle_succ i) c\n          (insert i edge_info) \\<and>\n         i < length (snd iG)\n    else (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n          inv_face_cycles_outer s' iG iM (i + 1) c edge_info \\<and>\n          i + 1 \\<le> length (snd iG)) \\<and>\n         ((edge_info, c, i + 1), edge_info, c, i)\n         \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG);\n   inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_outer ?s'2 iG iM i c edge_info \\<and>\n   i \\<le> length (snd iG);\n   ?s'2 = s\\<rbrakk>\n  \\<Longrightarrow> BRANCH\n                     (if i \\<notin> edge_info\n                      then inv_face_cycles ?s'2 iG iM\n                            (length (snd iG)) \\<and>\n                           inv_face_cycles_inner ?s'2 iG iM i\n                            (pre_digraph_map.face_cycle_succ iM i) c\n                            (insert i edge_info) \\<and>\n                           i < length (snd iG)\n                      else (inv_face_cycles ?s'2 iG iM\n                             (length (snd iG)) \\<and>\n                            inv_face_cycles_outer ?s'2 iG iM (i + 1) c\n                             edge_info \\<and>\n                            i + 1 \\<le> length (snd iG)) \\<and>\n                           ((edge_info, c, i + 1), edge_info, c, i)\n                           \\<in> measure\n                                  (\\<lambda>(edge_info, c, y).\nlength (snd iG) - y))\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>i < length (snd iG);\n   inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_outer ?s'2 iG iM i c edge_info \\<and>\n   i \\<le> length (snd iG);\n   ?s'2 = s\\<rbrakk>\n  \\<Longrightarrow> BRANCH\n                     (if i \\<notin> edge_info\n                      then inv_face_cycles ?s'2 iG iM\n                            (length (snd iG)) \\<and>\n                           inv_face_cycles_inner ?s'2 iG iM i\n                            (pre_digraph_map.face_cycle_succ iM i) c\n                            (insert i edge_info) \\<and>\n                           i < length (snd iG)\n                      else (inv_face_cycles ?s'2 iG iM\n                             (length (snd iG)) \\<and>\n                            inv_face_cycles_outer ?s'2 iG iM (i + 1) c\n                             edge_info \\<and>\n                            i + 1 \\<le> length (snd iG)) \\<and>\n                           ((edge_info, c, i + 1), edge_info, c, i)\n                           \\<in> measure\n                                  (\\<lambda>(edge_info, c, y).\nlength (snd iG) - y))\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case \"if\""], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case \"then\""], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (while edge_info j)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (postcondition s')"], ["proof (state)\nthis:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "interpret G: digraph_map \"mk_graph iG\" iM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "using postcondition"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "by (auto simp: inv_face_cycles_def)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have ?var"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((edge_info, c + 1, i + 1), edge_info__, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "using postcondition"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. ((edge_info, c + 1, i + 1), edge_info__, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "by auto"], ["proof (state)\nthis:\n  ((edge_info, c + 1, i + 1), edge_info__, c, i)\n  \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have fu_Suc: \"fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}", "by (auto simp: fcs_upto_def elim: less_SucE)"], ["proof (state)\nthis:\n  fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "moreover"], ["proof (state)\nthis:\n  fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have \"G.face_cycle_set j \\<notin> fcs_upto iM j\" \"c  = card (fcs_upto iM j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set j \\<notin> fcs_upto iM j &&& c = card (fcs_upto iM j)", "using postcondition"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. G.face_cycle_set j \\<notin> fcs_upto iM j &&& c = card (fcs_upto iM j)", "by (auto simp: inv_face_cycles_inner_def)"], ["proof (state)\nthis:\n  G.face_cycle_set j \\<notin> fcs_upto iM j\n  c = card (fcs_upto iM j)\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "ultimately"], ["proof (chain)\npicking this:\n  fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}\n  G.face_cycle_set j \\<notin> fcs_upto iM j\n  c = card (fcs_upto iM j)", "have \"Suc c = card (fcs_upto iM (Suc j))\""], ["proof (prove)\nusing this:\n  fcs_upto iM (Suc j) = fcs_upto iM j \\<union> {G.face_cycle_set j}\n  G.face_cycle_set j \\<notin> fcs_upto iM j\n  c = card (fcs_upto iM j)\n\ngoal (1 subgoal):\n 1. Suc c = card (fcs_upto iM (Suc j))", "by (simp add: finite_fcs_upto)"], ["proof (state)\nthis:\n  Suc c = card (fcs_upto iM (Suc j))\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have *: \"\\<forall>k<length (snd iG). k \\<in> edge_info \\<longleftrightarrow> (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "have *: \"j \\<in> orbit G.face_cycle_succ j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<in> orbit G.face_cycle_succ j", "by (simp add: G.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  j \\<in> orbit G.face_cycle_succ j\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "have \"\\<And>k. (\\<exists>l<funpow_dist1 G.face_cycle_succ j j. (G.face_cycle_succ ^^ l) j = k) \\<longleftrightarrow> (k \\<in> G.face_cycle_set j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n           (G.face_cycle_succ ^^ l) j = k) =\n       (k \\<in> G.face_cycle_set j)", "by (auto simp: G.face_cycle_set_def orbit_conv_funpow_dist1[OF *])"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n      (G.face_cycle_succ ^^ l) j = ?k1) =\n  (?k1 \\<in> G.face_cycle_set j)\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "moreover"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n      (G.face_cycle_succ ^^ l) j = ?k1) =\n  (?k1 \\<in> G.face_cycle_set j)\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "from postcondition"], ["proof (chain)\npicking this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j", "have \"inv_face_cycles_inner s' iG iM j j c edge_info\""], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. inv_face_cycles_inner s' iG iM j j c edge_info", "by auto"], ["proof (state)\nthis:\n  inv_face_cycles_inner s' iG iM j j c edge_info\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n      (G.face_cycle_succ ^^ l) j = ?k1) =\n  (?k1 \\<in> G.face_cycle_set j)\n  inv_face_cycles_inner s' iG iM j j c edge_info", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n      (G.face_cycle_succ ^^ l) j = ?k1) =\n  (?k1 \\<in> G.face_cycle_set j)\n  inv_face_cycles_inner s' iG iM j j c edge_info\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)", "unfolding inv_face_cycles_inner_def fu_Suc"], ["proof (prove)\nusing this:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n      (G.face_cycle_succ ^^ l) j = ?k1) =\n  (?k1 \\<in> G.face_cycle_set j)\n  j \\<in> G.face_cycle_set j \\<and>\n  c = card (fcs_upto iM j) \\<and>\n  j \\<notin> \\<Union> (fcs_upto iM j) \\<and>\n  (\\<forall>k<length (snd iG).\n      (k \\<in> edge_info) =\n      (k \\<in> \\<Union> (fcs_upto iM j) \\<or>\n       (\\<exists>l<funpow_dist1 G.face_cycle_succ j j.\n           (G.face_cycle_succ ^^ l) j = k)))\n\ngoal (1 subgoal):\n 1. \\<forall>k<length (snd iG).\n       (k \\<in> edge_info) =\n       (\\<exists>x\\<in>fcs_upto iM j \\<union> {G.face_cycle_set j}.\n           k \\<in> x)", "by auto"], ["proof (state)\nthis:\n  \\<forall>k<length (snd iG).\n     (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>k<length (snd iG).\n     (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have ?inv"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n    i + 1 \\<le> length (snd iG)", "using postcondition *"], ["proof (prove)\nusing this:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s' iG iM i j c edge_info \\<and> i < length (snd iG)\n  \\<not> i \\<noteq> j\n  \\<forall>k<length (snd iG).\n     (k \\<in> edge_info) = (\\<exists>x\\<in>fcs_upto iM (Suc j). k \\<in> x)\n\ngoal (1 subgoal):\n 1. inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n    i + 1 \\<le> length (snd iG)", "by (auto simp: inv_face_cycles_outer_def \\<open>Suc c = _\\<close>)"], ["proof (state)\nthis:\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n  i + 1 \\<le> length (snd iG)\n\ngoal (4 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b s x y xa ya ab ba sa.\n       \\<lbrakk>inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sa iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        \\<not> ya \\<noteq> ba\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sa iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_outer sa iG iM (ya + 1) (xa + 1)\n                           ab \\<and>\n                          ya + 1 \\<le> length (snd iG)) \\<and>\n                         ((ab, xa + 1, ya + 1), x, xa, ya)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, c, y).\n                                    length (snd iG) - y)\n 4. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "with \\<open>?var\\<close>"], ["proof (chain)\npicking this:\n  ((edge_info, c + 1, i + 1), edge_info__, c, i)\n  \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n  i + 1 \\<le> length (snd iG)", "show ?case"], ["proof (prove)\nusing this:\n  ((edge_info, c + 1, i + 1), edge_info__, c, i)\n  \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n  inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n  i + 1 \\<le> length (snd iG)\n\ngoal (1 subgoal):\n 1. (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n     i + 1 \\<le> length (snd iG)) \\<and>\n    ((edge_info, c + 1, i + 1), edge_info__, c, i)\n    \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)", "by blast"], ["proof (state)\nthis:\n  (inv_face_cycles s' iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_outer s' iG iM (i + 1) (c + 1) edge_info \\<and>\n   i + 1 \\<le> length (snd iG)) \\<and>\n  ((edge_info, c + 1, i + 1), edge_info__, c, i)\n  \\<in> measure (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n           inv_face_cycles_inner ?s'2 iG iM i j c edge_info \\<and>\n           i < length (snd iG);\n   \\<not> i \\<noteq> j\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_outer ?s'2 iG iM (i + 1) (c + 1)\n                      edge_info \\<and>\n                     i + 1 \\<le> length (snd iG)) \\<and>\n                    ((edge_info, c + 1, i + 1), edge_info__, c, i)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n           inv_face_cycles_inner ?s'2 iG iM i j c edge_info \\<and>\n           i < length (snd iG);\n   \\<not> i \\<noteq> j\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s'2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_outer ?s'2 iG iM (i + 1) (c + 1)\n                      edge_info \\<and>\n                     i + 1 \\<le> length (snd iG)) \\<and>\n                    ((edge_info, c + 1, i + 1), edge_info__, c, i)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, c, y). length (snd iG) - y)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (invariant s')"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "case (weaken s'')"], ["proof (state)\nthis:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i j c edge_info \\<and> i < length (snd iG)\n  s'' = s'\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (pre_digraph_map.face_cycle_succ iM ba) xa\n                           (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab,\n                           pre_digraph_map.face_cycle_succ iM ba),\n                          ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card\n                                     (pre_digraph_map.face_cycle_set iM\n ya) -\n                                    funpow_dist1\n                                     (pre_digraph_map.face_cycle_succ iM) ya\n                                     j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "interpret G: digraph_map \"mk_graph iG\" iM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "using weaken"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i j c edge_info \\<and> i < length (snd iG)\n  s'' = s'\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "by (auto simp: inv_face_cycles_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have \"j \\<in> G.face_cycle_set i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<in> G.face_cycle_set i", "using weaken"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i j c edge_info \\<and> i < length (snd iG)\n  s'' = s'\n\ngoal (1 subgoal):\n 1. j \\<in> G.face_cycle_set i", "by (auto simp: inv_face_cycles_inner_def)"], ["proof (state)\nthis:\n  j \\<in> G.face_cycle_set i\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "then"], ["proof (chain)\npicking this:\n  j \\<in> G.face_cycle_set i", "have \"j \\<in> arcs (mk_graph iG)\""], ["proof (prove)\nusing this:\n  j \\<in> G.face_cycle_set i\n\ngoal (1 subgoal):\n 1. j \\<in> arcs (mk_graph iG)", "by (metis G.face_cycle_set_def G.funpow_face_cycle_succ_no_arc G.in_face_cycle_setD\n                  funpow_dist1_prop weaken.loop_cond)"], ["proof (state)\nthis:\n  j \\<in> arcs (mk_graph iG)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have A: \"j \\<in> pre_digraph_map.face_cycle_set iM i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<in> G.face_cycle_set i", "using weaken"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i j c edge_info \\<and> i < length (snd iG)\n  s'' = s'\n\ngoal (1 subgoal):\n 1. j \\<in> G.face_cycle_set i", "by (auto simp: inv_face_cycles_inner_def)"], ["proof (state)\nthis:\n  j \\<in> G.face_cycle_set i\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "then"], ["proof (chain)\npicking this:\n  j \\<in> G.face_cycle_set i", "have A': \"(G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i j) i = j\""], ["proof (prove)\nusing this:\n  j \\<in> G.face_cycle_set i\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i j) i = j", "by (intro funpow_dist1_prop) (simp add: G.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i j) i = j\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "{"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i j) i = j\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "fix k"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have *: \"\\<And>i n f x . i < n \\<Longrightarrow> \\<exists>j<n. (f ^^ j) x = (f ^^ i) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i n f x.\n       i < n \\<Longrightarrow> \\<exists>j<n. (f ^^ j) x = (f ^^ i) x", "by auto"], ["proof (state)\nthis:\n  ?i1 < ?n1 \\<Longrightarrow>\n  \\<exists>j<?n1. (?f1 ^^ j) ?x1 = (?f1 ^^ ?i1) ?x1\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have \"(\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j). (G.face_cycle_succ ^^ l) i = k)\n                    \\<longleftrightarrow> (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j). (G.face_cycle_succ ^^ l) i = k)\" (is \"?L \\<longleftrightarrow> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n        (G.face_cycle_succ ^^ l) i = k) =\n    (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n        (G.face_cycle_succ ^^ l) i = k)", "using A \\<open>i \\<noteq> j\\<close>"], ["proof (prove)\nusing this:\n  j \\<in> G.face_cycle_set i\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n        (G.face_cycle_succ ^^ l) i = k) =\n    (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n        (G.face_cycle_succ ^^ l) i = k)", "by (subst funpow_dist1_f_eq) (simp_all add: G.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n      (G.face_cycle_succ ^^ l) i = k)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "also"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n      (G.face_cycle_succ ^^ l) i = k)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have \"\\<dots> \\<longleftrightarrow> (\\<exists>l<funpow_dist1 G.face_cycle_succ i j. (G.face_cycle_succ ^^ l) i = k) \\<or> k = j\" (is \"_ \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n        (G.face_cycle_succ ^^ l) i = k) =\n    ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n         (G.face_cycle_succ ^^ l) i = k) \\<or>\n     k = j)", "using A'"], ["proof (prove)\nusing this:\n  (G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i j) i = j\n\ngoal (1 subgoal):\n 1. (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n        (G.face_cycle_succ ^^ l) i = k) =\n    ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n         (G.face_cycle_succ ^^ l) i = k) \\<or>\n     k = j)", "by (fastforce elim: less_SucE\n                    intro: * exI[where x=\"(funpow_dist1 G.face_cycle_succ i j)\"])"], ["proof (state)\nthis:\n  (\\<exists>l<Suc (funpow_dist1 G.face_cycle_succ i j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = k) \\<or>\n   k = j)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "finally"], ["proof (chain)\npicking this:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = k) \\<or>\n   k = j)", "have \"?L \\<longleftrightarrow> ?R\""], ["proof (prove)\nusing this:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = k) \\<or>\n   k = j)\n\ngoal (1 subgoal):\n 1. (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n        (G.face_cycle_succ ^^ l) i = k) =\n    ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n         (G.face_cycle_succ ^^ l) i = k) \\<or>\n     k = j)", "."], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = k) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = k) \\<or>\n   k = j)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = ?k3) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = ?k3) \\<or>\n   ?k3 = j)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "note B = this"], ["proof (state)\nthis:\n  (\\<exists>l<funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j).\n      (G.face_cycle_succ ^^ l) i = ?k3) =\n  ((\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n       (G.face_cycle_succ ^^ l) i = ?k3) \\<or>\n   ?k3 = j)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have ?inv"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n     (insert j edge_info) \\<and>\n    i < length (snd iG)", "using weaken"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i j c edge_info \\<and> i < length (snd iG)\n  s'' = s'\n\ngoal (1 subgoal):\n 1. inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n    inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n     (insert j edge_info) \\<and>\n    i < length (snd iG)", "unfolding inv_face_cycles_inner_def B"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  (j \\<in> G.face_cycle_set i \\<and>\n   c = card (fcs_upto iM i) \\<and>\n   i \\<notin> \\<Union> (fcs_upto iM i) \\<and>\n   (\\<forall>k<length (snd iG).\n       (k \\<in> edge_info) =\n       (k \\<in> \\<Union> (fcs_upto iM i) \\<or>\n        (\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n            (G.face_cycle_succ ^^ l) i = k)))) \\<and>\n  i < length (snd iG)\n  s'' = s'\n\ngoal (1 subgoal):\n 1. inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n    (G.face_cycle_succ j \\<in> G.face_cycle_set i \\<and>\n     c = card (fcs_upto iM i) \\<and>\n     i \\<notin> \\<Union> (fcs_upto iM i) \\<and>\n     (\\<forall>k<length (snd iG).\n         (k \\<in> insert j edge_info) =\n         (k \\<in> \\<Union> (fcs_upto iM i) \\<or>\n          (\\<exists>l<funpow_dist1 G.face_cycle_succ i j.\n              (G.face_cycle_succ ^^ l) i = k) \\<or>\n          k = j))) \\<and>\n    i < length (snd iG)", "by (auto simp: G.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n   (insert j edge_info) \\<and>\n  i < length (snd iG)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have X: \"funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "have \"funpow_dist1 G.face_cycle_succ i j \\<le> funpow_dist1 G.face_cycle_succ i i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j\n    \\<le> funpow_dist1 G.face_cycle_succ i i", "using _ _ A"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  j \\<in> G.face_cycle_set i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j\n    \\<le> funpow_dist1 G.face_cycle_succ i i", "unfolding G.face_cycle_set_def"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  j \\<in> orbit G.face_cycle_succ i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j\n    \\<le> funpow_dist1 G.face_cycle_succ i i", "apply (rule funpow_dist1_le_self)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (G.face_cycle_succ ^^ funpow_dist1 G.face_cycle_succ i i) i = i\n 2. 0 < funpow_dist1 G.face_cycle_succ i i", "apply (rule funpow_dist1_prop)"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> orbit G.face_cycle_succ i\n 2. 0 < funpow_dist1 G.face_cycle_succ i i", "unfolding G.face_cycle_set_def[symmetric]"], ["proof (prove)\ngoal (2 subgoals):\n 1. i \\<in> G.face_cycle_set i\n 2. 0 < funpow_dist1 G.face_cycle_succ i i", "by simp_all"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j\n  \\<le> funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "moreover"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j\n  \\<le> funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "have \"funpow_dist1 G.face_cycle_succ i j \\<noteq> funpow_dist1 G.face_cycle_succ i i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j \\<noteq>\n    funpow_dist1 G.face_cycle_succ i i", "by (metis A G.face_cycle_set_def G.face_cycle_set_self funpow_dist1_prop\n                    weaken.loop_cond)"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j \\<noteq>\n  funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "ultimately"], ["proof (chain)\npicking this:\n  funpow_dist1 G.face_cycle_succ i j\n  \\<le> funpow_dist1 G.face_cycle_succ i i\n  funpow_dist1 G.face_cycle_succ i j \\<noteq>\n  funpow_dist1 G.face_cycle_succ i i", "have \"funpow_dist1 G.face_cycle_succ i j < funpow_dist1 G.face_cycle_succ i i\""], ["proof (prove)\nusing this:\n  funpow_dist1 G.face_cycle_succ i j\n  \\<le> funpow_dist1 G.face_cycle_succ i i\n  funpow_dist1 G.face_cycle_succ i j \\<noteq>\n  funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < funpow_dist1 G.face_cycle_succ i i", "by simp"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j < funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "also"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j < funpow_dist1 G.face_cycle_succ i i\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "have \"\\<dots> \\<le> card (G.face_cycle_set i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i i \\<le> card (G.face_cycle_set i)", "by (rule G.funpow_dist1_le_card_fcs) simp"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i i \\<le> card (G.face_cycle_set i)\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "finally"], ["proof (chain)\npicking this:\n  funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "show ?thesis"], ["proof (prove)\nusing this:\n  funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)\n\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)", "."], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "have ?var"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n    \\<in> measure\n           (\\<lambda>(edge_info, j).\n               card (G.face_cycle_set i) -\n               funpow_dist1 G.face_cycle_succ i j)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (G.face_cycle_set i) -\n    funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j)\n    < card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j", "using _ X"], ["proof (prove)\nusing this:\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  funpow_dist1 G.face_cycle_succ i j < card (G.face_cycle_set i)\n\ngoal (1 subgoal):\n 1. card (G.face_cycle_set i) -\n    funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j)\n    < card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j", "apply (rule diff_less_mono2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ i j\n    < funpow_dist1 G.face_cycle_succ i (G.face_cycle_succ j)", "apply (rule funpow_dist1_less_f)"], ["proof (prove)\ngoal (3 subgoals):\n 1. j \\<in> orbit G.face_cycle_succ i\n 2. i \\<in> orbit G.face_cycle_succ i\n 3. i \\<noteq> j", "using \\<open>i \\<noteq> j\\<close> A"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  j \\<in> G.face_cycle_set i\n\ngoal (3 subgoals):\n 1. j \\<in> orbit G.face_cycle_succ i\n 2. i \\<in> orbit G.face_cycle_succ i\n 3. i \\<noteq> j", "by (auto simp: G.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n  \\<in> measure\n         (\\<lambda>(edge_info, j).\n             card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j)\n\ngoal (3 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba sa sb.\n       \\<lbrakk>inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                inv_face_cycles_inner sb iG iM ya ba xa ab \\<and>\n                ya < length (snd iG);\n        ya \\<noteq> ba; sb = sa\\<rbrakk>\n       \\<Longrightarrow> (inv_face_cycles sb iG iM (length (snd iG)) \\<and>\n                          inv_face_cycles_inner sb iG iM ya\n                           (G.face_cycle_succ ba) xa (insert ba ab) \\<and>\n                          ya < length (snd iG)) \\<and>\n                         ((insert ba ab, G.face_cycle_succ ba), ab, ba)\n                         \\<in> measure\n                                (\\<lambda>(edge_info, j).\n                                    card (G.face_cycle_set ya) -\n                                    funpow_dist1 G.face_cycle_succ ya j)\n 2. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 3. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "with \\<open>?inv\\<close>"], ["proof (chain)\npicking this:\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n   (insert j edge_info) \\<and>\n  i < length (snd iG)\n  ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n  \\<in> measure\n         (\\<lambda>(edge_info, j).\n             card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j)", "show ?case"], ["proof (prove)\nusing this:\n  inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n  inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n   (insert j edge_info) \\<and>\n  i < length (snd iG)\n  ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n  \\<in> measure\n         (\\<lambda>(edge_info, j).\n             card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j)\n\ngoal (1 subgoal):\n 1. (inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n     inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n      (insert j edge_info) \\<and>\n     i < length (snd iG)) \\<and>\n    ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n    \\<in> measure\n           (\\<lambda>(edge_info, j).\n               card (G.face_cycle_set i) -\n               funpow_dist1 G.face_cycle_succ i j)", "by blast"], ["proof (state)\nthis:\n  (inv_face_cycles s'' iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner s'' iG iM i (G.face_cycle_succ j) c\n    (insert j edge_info) \\<and>\n   i < length (snd iG)) \\<and>\n  ((insert j edge_info, G.face_cycle_succ j), edge_info, j)\n  \\<in> measure\n         (\\<lambda>(edge_info, j).\n             card (G.face_cycle_set i) - funpow_dist1 G.face_cycle_succ i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (G.face_cycle_set ya) -\n                funpow_dist1 G.face_cycle_succ ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<noteq> j;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM i j c edge_info \\<and>\n   i < length (snd iG);\n   ?s''2 = s'\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM i\n                      (pre_digraph_map.face_cycle_succ iM j) c\n                      (insert j edge_info) \\<and>\n                     i < length (snd iG)) \\<and>\n                    ((insert j edge_info,\n                      pre_digraph_map.face_cycle_succ iM j),\n                     edge_info, j)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card (pre_digraph_map.face_cycle_set iM i) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<noteq> j;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM i j c edge_info \\<and>\n   i < length (snd iG);\n   ?s''2 = ?s'5\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM i\n                      (pre_digraph_map.face_cycle_succ iM j) c\n                      (insert j edge_info) \\<and>\n                     i < length (snd iG)) \\<and>\n                    ((insert j edge_info,\n                      pre_digraph_map.face_cycle_succ iM j),\n                     edge_info, j)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card (pre_digraph_map.face_cycle_set iM i) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<noteq> ?j8;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM i ?j8 c ?edge_infoa8 \\<and>\n   i < length (snd iG);\n   ?s''2 = ?s'5\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM i\n                      (pre_digraph_map.face_cycle_succ iM ?j8) c\n                      (insert ?j8 ?edge_infoa8) \\<and>\n                     i < length (snd iG)) \\<and>\n                    ((insert ?j8 ?edge_infoa8,\n                      pre_digraph_map.face_cycle_succ iM ?j8),\n                     ?edge_infoa8, ?j8)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card (pre_digraph_map.face_cycle_set iM i) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<noteq> ?j8;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM i ?j8 c ?edge_infoa8 \\<and>\n   i < length (snd iG);\n   ?s''2 = ?s'5\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM i\n                      (pre_digraph_map.face_cycle_succ iM ?j8) c\n                      (insert ?j8 ?edge_infoa8) \\<and>\n                     i < length (snd iG)) \\<and>\n                    ((insert ?j8 ?edge_infoa8,\n                      pre_digraph_map.face_cycle_succ iM ?j8),\n                     ?edge_infoa8, ?j8)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card (pre_digraph_map.face_cycle_set iM i) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<noteq> ?j8;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM i ?j8 c ?edge_infoa8 \\<and>\n   i < length (snd iG);\n   ?s''2 = ?s'5\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM i\n                      (pre_digraph_map.face_cycle_succ iM ?j8) c\n                      (insert ?j8 ?edge_infoa8) \\<and>\n                     i < length (snd iG)) \\<and>\n                    ((insert ?j8 ?edge_infoa8,\n                      pre_digraph_map.face_cycle_succ iM ?j8),\n                     ?edge_infoa8, ?j8)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card (pre_digraph_map.face_cycle_set iM i) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) i j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?i11 \\<noteq> ?j8;\n   inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n   inv_face_cycles_inner ?s''2 iG iM ?i11 ?j8 ?c11 ?edge_infoa8 \\<and>\n   ?i11 < length (snd iG);\n   ?s''2 = ?s'5\\<rbrakk>\n  \\<Longrightarrow> (inv_face_cycles ?s''2 iG iM (length (snd iG)) \\<and>\n                     inv_face_cycles_inner ?s''2 iG iM ?i11\n                      (pre_digraph_map.face_cycle_succ iM ?j8) ?c11\n                      (insert ?j8 ?edge_infoa8) \\<and>\n                     ?i11 < length (snd iG)) \\<and>\n                    ((insert ?j8 ?edge_infoa8,\n                      pre_digraph_map.face_cycle_succ iM ?j8),\n                     ?edge_infoa8, ?j8)\n                    \\<in> measure\n                           (\\<lambda>(edge_info, j).\n                               card\n                                (pre_digraph_map.face_cycle_set iM ?i11) -\n                               funpow_dist1\n                                (pre_digraph_map.face_cycle_succ iM) ?i11 j)\n\ngoal (2 subgoals):\n 1. \\<And>a aa b s x y xa ya ab ba.\n       wf (measure\n            (\\<lambda>(edge_info, j).\n                card (pre_digraph_map.face_cycle_set iM ya) -\n                funpow_dist1 (pre_digraph_map.face_cycle_succ iM) ya j))\n 2. \\<And>a aa b.\n       wf (measure (\\<lambda>(edge_info, c, y). length (snd iG) - y))", "qed auto"], ["", "declare ovalidNF_face_cycles[THEN ovalidNF_wp, THEN trivial_label, vcg_l]"], ["", "lemma ovalidNF_euler_genus: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> digraph_map (mk_graph iG) iM \\<and> c = card (pre_digraph.sccs (mk_graph iG)))\n    (euler_genus iG iM c)\n  (\\<lambda>r s. r = pre_digraph_map.euler_genus (mk_graph iG) iM)\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s.\n         distinct (fst iG) \\<and>\n         digraph_map (mk_graph iG) iM \\<and>\n         c = card (pre_digraph.sccs (mk_graph iG)))\n     (euler_genus iG iM c)\n     (\\<lambda>r s. r = pre_digraph_map.euler_genus (mk_graph iG) iM)", "unfolding euler_genus_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s.\n         distinct (fst iG) \\<and>\n         digraph_map (mk_graph iG) iM \\<and>\n         c = card (pre_digraph.sccs (mk_graph iG)))\n     (DO n \\<leftarrow> oreturn (length (snd iG));\n         m \\<leftarrow> oreturn (length (fst iG));\n         nz \\<leftarrow> isolated_nodes iG;\n         fc \\<leftarrow> face_cycles iG iM;\n         oreturn ((int n div 2 + 2 * int c - int m - int nz - int fc) div 2)\n      OD)\n     (\\<lambda>r s. r = pre_digraph_map.euler_genus (mk_graph iG) iM)", "proof vcg_casify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       digraph_map (mk_graph iG) iM \\<and>\n       c = card (pre_digraph.sccs (mk_graph iG)) \\<Longrightarrow>\n       ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n         int (card (pre_digraph.isolated_verts (mk_graph iG))) -\n         int (card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))) div\n        2 =\n        pre_digraph_map.euler_genus (mk_graph iG) iM \\<and>\n        digraph_map (mk_graph iG) iM) \\<and>\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "case weaken"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and>\n  digraph_map (mk_graph iG) iM \\<and>\n  c = card (pre_digraph.sccs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       digraph_map (mk_graph iG) iM \\<and>\n       c = card (pre_digraph.sccs (mk_graph iG)) \\<Longrightarrow>\n       ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n         int (card (pre_digraph.isolated_verts (mk_graph iG))) -\n         int (card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))) div\n        2 =\n        pre_digraph_map.euler_genus (mk_graph iG) iM \\<and>\n        digraph_map (mk_graph iG) iM) \\<and>\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "have \"distinct (ig_verts iG)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (fst iG)", "using weaken"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and>\n  digraph_map (mk_graph iG) iM \\<and>\n  c = card (pre_digraph.sccs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. distinct (fst iG)", "by simp"], ["proof (state)\nthis:\n  distinct (fst iG)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       digraph_map (mk_graph iG) iM \\<and>\n       c = card (pre_digraph.sccs (mk_graph iG)) \\<Longrightarrow>\n       ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n         int (card (pre_digraph.isolated_verts (mk_graph iG))) -\n         int (card (pre_digraph_map.face_cycle_sets (mk_graph iG) iM))) div\n        2 =\n        pre_digraph_map.euler_genus (mk_graph iG) iM \\<and>\n        digraph_map (mk_graph iG) iM) \\<and>\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "interpret G: digraph_map \"mk_graph iG\" iM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "using weaken"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and>\n  digraph_map (mk_graph iG) iM \\<and>\n  c = card (pre_digraph.sccs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. digraph_map (mk_graph iG) iM", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       digraph_map (mk_graph iG) iM \\<and> c = card G.sccs \\<Longrightarrow>\n       ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n         int (card G.isolated_verts) -\n         int (card G.face_cycle_sets)) div\n        2 =\n        G.euler_genus \\<and>\n        digraph_map (mk_graph iG) iM) \\<and>\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "have len_card:\n      \"length (ig_verts iG) = card (verts (mk_graph iG))\"\n      \"length (ig_edges iG) = card (arcs (mk_graph iG))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (fst iG) = card (verts (mk_graph iG)) &&&\n    length (snd iG) = card (arcs (mk_graph iG))", "using \\<open>distinct _\\<close>"], ["proof (prove)\nusing this:\n  distinct (fst iG)\n\ngoal (1 subgoal):\n 1. length (fst iG) = card (verts (mk_graph iG)) &&&\n    length (snd iG) = card (arcs (mk_graph iG))", "by (auto simp: mkg_simps arcs_mkg distinct_card)"], ["proof (state)\nthis:\n  length (fst iG) = card (verts (mk_graph iG))\n  length (snd iG) = card (arcs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       digraph_map (mk_graph iG) iM \\<and> c = card G.sccs \\<Longrightarrow>\n       ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n         int (card G.isolated_verts) -\n         int (card G.face_cycle_sets)) div\n        2 =\n        G.euler_genus \\<and>\n        digraph_map (mk_graph iG) iM) \\<and>\n       distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n      int (card G.isolated_verts) -\n      int (card G.face_cycle_sets)) div\n     2 =\n     G.euler_genus \\<and>\n     digraph_map (mk_graph iG) iM) \\<and>\n    distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "using weaken"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and>\n  digraph_map (mk_graph iG) iM \\<and> c = card G.sccs\n\ngoal (1 subgoal):\n 1. ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n      int (card G.isolated_verts) -\n      int (card G.face_cycle_sets)) div\n     2 =\n     G.euler_genus \\<and>\n     digraph_map (mk_graph iG) iM) \\<and>\n    distinct (fst iG) \\<and> sym_digraph (mk_graph iG)", "by (auto simp: G.euler_genus_def G.euler_char_def len_card)"], ["proof (state)\nthis:\n  ((int (length (snd iG)) div 2 + 2 * int c - int (length (fst iG)) -\n    int (card G.isolated_verts) -\n    int (card G.face_cycle_sets)) div\n   2 =\n   G.euler_genus \\<and>\n   digraph_map (mk_graph iG) iM) \\<and>\n  distinct (fst iG) \\<and> sym_digraph (mk_graph iG)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare ovalidNF_euler_genus[THEN ovalidNF_wp, THEN trivial_label, vcg_l]"], ["", "lemma ovalidNF_certify: \"\n  ovalidNF (\\<lambda>s. distinct (ig_verts iG) \\<and> fin_digraph (mk_graph iG) \\<and> c = card (pre_digraph.sccs (mk_graph iG)))\n    (certify iG iM c)\n  (\\<lambda>r s. r \\<longleftrightarrow> pre_digraph_map.euler_genus (mk_graph iG) (mk_map (mk_graph iG) iM) = 0\n    \\<and> digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM)\n    \\<and> (\\<forall>i < length (ig_edges iG). im_pred iM (im_succ iM i) = i) )\n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s.\n         distinct (fst iG) \\<and>\n         fin_digraph (mk_graph iG) \\<and>\n         c = card (pre_digraph.sccs (mk_graph iG)))\n     (certify iG iM c)\n     (\\<lambda>r s.\n         r =\n         (pre_digraph_map.euler_genus (mk_graph iG)\n           (mk_map (mk_graph iG) iM) =\n          0 \\<and>\n          digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "unfolding certify_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF\n     (\\<lambda>s.\n         distinct (fst iG) \\<and>\n         fin_digraph (mk_graph iG) \\<and>\n         c = card (pre_digraph.sccs (mk_graph iG)))\n     (DO map \\<leftarrow> is_map iG iM;\n         ocondition (\\<lambda>_. map)\n          (DO gen \\<leftarrow> euler_genus iG (mk_map (mk_graph iG) iM) c;\n              oreturn (gen = 0)\n           OD)\n          (oreturn False)\n      OD)\n     (\\<lambda>r s.\n         r =\n         (pre_digraph_map.euler_genus (mk_graph iG)\n           (mk_map (mk_graph iG) iM) =\n          0 \\<and>\n          digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)))", "proof vcg_casify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       fin_digraph (mk_graph iG) \\<and>\n       c = card (pre_digraph.sccs (mk_graph iG)) \\<Longrightarrow>\n       BRANCH\n        (if digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n            (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)\n         then (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0) =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i)) \\<and>\n              distinct (fst iG) \\<and>\n              digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n              c = card (pre_digraph.sccs (mk_graph iG))\n         else False =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i))) \\<and>\n       distinct (fst iG) \\<and> wf_digraph (mk_graph iG)", "case weaken"], ["proof (state)\nthis:\n  distinct (fst iG) \\<and>\n  fin_digraph (mk_graph iG) \\<and> c = card (pre_digraph.sccs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       fin_digraph (mk_graph iG) \\<and>\n       c = card (pre_digraph.sccs (mk_graph iG)) \\<Longrightarrow>\n       BRANCH\n        (if digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n            (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)\n         then (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0) =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i)) \\<and>\n              distinct (fst iG) \\<and>\n              digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n              c = card (pre_digraph.sccs (mk_graph iG))\n         else False =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i))) \\<and>\n       distinct (fst iG) \\<and> wf_digraph (mk_graph iG)", "then"], ["proof (chain)\npicking this:\n  distinct (fst iG) \\<and>\n  fin_digraph (mk_graph iG) \\<and> c = card (pre_digraph.sccs (mk_graph iG))", "interpret fin_digraph \"mk_graph iG\""], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and>\n  fin_digraph (mk_graph iG) \\<and> c = card (pre_digraph.sccs (mk_graph iG))\n\ngoal (1 subgoal):\n 1. fin_digraph (mk_graph iG)", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s.\n       distinct (fst iG) \\<and>\n       fin_digraph (mk_graph iG) \\<and> c = card sccs \\<Longrightarrow>\n       BRANCH\n        (if digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n            (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)\n         then (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0) =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i)) \\<and>\n              distinct (fst iG) \\<and>\n              digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n              c = card sccs\n         else False =\n              (pre_digraph_map.euler_genus (mk_graph iG)\n                (mk_map (mk_graph iG) iM) =\n               0 \\<and>\n               digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n               (\\<forall>i<length (snd iG).\n                   im_pred iM (im_succ iM i) = i))) \\<and>\n       distinct (fst iG) \\<and> wf_digraph (mk_graph iG)", "from weaken"], ["proof (chain)\npicking this:\n  distinct (fst iG) \\<and> fin_digraph (mk_graph iG) \\<and> c = card sccs", "show ?case"], ["proof (prove)\nusing this:\n  distinct (fst iG) \\<and> fin_digraph (mk_graph iG) \\<and> c = card sccs\n\ngoal (1 subgoal):\n 1. BRANCH\n     (if digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n         (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)\n      then (pre_digraph_map.euler_genus (mk_graph iG)\n             (mk_map (mk_graph iG) iM) =\n            0) =\n           (pre_digraph_map.euler_genus (mk_graph iG)\n             (mk_map (mk_graph iG) iM) =\n            0 \\<and>\n            digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n            (\\<forall>i<length (snd iG).\n                im_pred iM (im_succ iM i) = i)) \\<and>\n           distinct (fst iG) \\<and>\n           digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n           c = card sccs\n      else False =\n           (pre_digraph_map.euler_genus (mk_graph iG)\n             (mk_map (mk_graph iG) iM) =\n            0 \\<and>\n            digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n            (\\<forall>i<length (snd iG).\n                im_pred iM (im_succ iM i) = i))) \\<and>\n    distinct (fst iG) \\<and> wf_digraph (mk_graph iG)", "by (auto simp: BRANCH_def intro: wf_digraph)"], ["proof (state)\nthis:\n  BRANCH\n   (if digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n       (\\<forall>i<length (snd iG). im_pred iM (im_succ iM i) = i)\n    then (pre_digraph_map.euler_genus (mk_graph iG)\n           (mk_map (mk_graph iG) iM) =\n          0) =\n         (pre_digraph_map.euler_genus (mk_graph iG)\n           (mk_map (mk_graph iG) iM) =\n          0 \\<and>\n          digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG).\n              im_pred iM (im_succ iM i) = i)) \\<and>\n         distinct (fst iG) \\<and>\n         digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n         c = card sccs\n    else False =\n         (pre_digraph_map.euler_genus (mk_graph iG)\n           (mk_map (mk_graph iG) iM) =\n          0 \\<and>\n          digraph_map (mk_graph iG) (mk_map (mk_graph iG) iM) \\<and>\n          (\\<forall>i<length (snd iG).\n              im_pred iM (im_succ iM i) = i))) \\<and>\n  distinct (fst iG) \\<and> wf_digraph (mk_graph iG)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}