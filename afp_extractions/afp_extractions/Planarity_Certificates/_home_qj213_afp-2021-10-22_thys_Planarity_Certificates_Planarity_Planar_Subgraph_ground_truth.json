{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/Planarity/Planar_Subgraph.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma out_arcs_emptyD_dominates:\n  assumes \"out_arcs G x = {}\" shows \"\\<not>x \\<rightarrow>\\<^bsub>G\\<^esub> y\"", "lemma (in wf_digraph) reachable_refl_iff: \"u \\<rightarrow>\\<^sup>* u \\<longleftrightarrow> u \\<in> verts G\"", "lemma face_cycle_set_succ[simp]: \"face_cycle_set (face_cycle_succ a) = face_cycle_set a\"", "lemma face_cycle_succ_funpow_in[simp]:\n    \"(face_cycle_succ ^^ n) a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma segment_face_cycle_x_x_eq:\n    \"segment face_cycle_succ x x = face_cycle_set x - {x}\"", "lemma fcs_x_eq_x: \"face_cycle_succ x = x \\<longleftrightarrow> face_cycle_set x = {x}\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma (in bidirected_digraph) bidirected_digraph_del_arc:\n    \"bidirected_digraph (pre_digraph.del_arc (pre_digraph.del_arc G (arev a)) a) (perm_restrict arev (arcs G - {a , arev a}))\"", "lemma (in bidirected_digraph) bidirected_digraph_del_vert: \"bidirected_digraph (del_vert u) (perm_restrict arev (arcs (del_vert u)))\"", "lemma (in pre_digraph) ends_del_arc: \"arc_to_ends (del_arc u) = arc_to_ends G\"", "lemma (in pre_digraph) dominates_arcsD:\n  assumes \"v \\<rightarrow>\\<^bsub>del_arc u\\<^esub> w\" shows \"v \\<rightarrow>\\<^bsub>G\\<^esub> w\"", "lemma (in wf_digraph) reachable_del_arcD:\n  assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_arc u\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\"", "lemma (in fin_digraph) finite_isolated_verts[intro!]: \"finite isolated_verts\"", "lemma (in wf_digraph) isolated_verts_in_sccs:\n  assumes \"u \\<in> isolated_verts\" shows \"{u} \\<in> sccs_verts\"", "lemma (in digraph_map) in_face_cycle_sets:\n  \"a \\<in> arcs G \\<Longrightarrow> face_cycle_set a \\<in> face_cycle_sets\"", "lemma (in digraph_map) heads_face_cycle_set:\n  assumes \"a \\<in> arcs G\"\n  shows \"head G ` face_cycle_set a = tail G ` face_cycle_set a\" (is \"?L = ?R\")", "lemma (in pre_digraph) casI_nth:\n  assumes \"p \\<noteq> []\" \"u = tail G (hd p)\" \"v = head G (last p)\" \"\\<And>i. Suc i < length p \\<Longrightarrow> head G (p ! i) = tail G (p ! Suc i)\"\n  shows \"cas u p v\"", "lemma (in digraph_map) obtain_trail_in_fcs:\n  assumes \"a \\<in> arcs G\" \"a0 \\<in> face_cycle_set a\" \"an \\<in> face_cycle_set a\"\n  obtains p where \"trail (tail G a0) p (head G an)\" \"p \\<noteq> []\" \"hd p = a0\"  \"last p = an\"\n    \"set p \\<subseteq> face_cycle_set a\"", "lemma (in digraph_map) obtain_trail_in_fcs':\n  assumes \"a \\<in> arcs G\" \"u \\<in> tail G ` face_cycle_set a\" \"v \\<in> tail G ` face_cycle_set a\"\n  obtains p where \"trail u p v\" \"set p \\<subseteq> face_cycle_set a\"", "lemma u_isolated_in: \"in_arcs G u = {}\"", "lemma arcs_dv: \"arcs (del_vert u) = arcs G\"", "lemma out_arcs_dv: \"out_arcs (del_vert u) = out_arcs G\"", "lemma digraph_map_del_vert:\n    shows \"digraph_map (del_vert u) M\"", "lemma card_verts_dv: \"card (verts G) = Suc (card (verts (del_vert u)))\"", "lemma card_arcs_dv: \"card (arcs (del_vert u)) = card (arcs G)\"", "lemma isolated_verts_dv: \"H.isolated_verts = isolated_verts - {u}\"", "lemma u_in_isolated_verts: \"u \\<in> isolated_verts\"", "lemma card_isolated_verts_dv: \"card isolated_verts = Suc (card H.isolated_verts)\"", "lemma face_cycles_dv: \"H.face_cycle_sets = face_cycle_sets\"", "lemma euler_char_dv: \"euler_char = 1 + H.euler_char\"", "lemma adj_dv: \"v \\<rightarrow>\\<^bsub>del_vert u\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^bsub>G\\<^esub> w\"", "lemma reachable_del_vertD:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\"", "lemma reachable_del_vertI:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" \"u \\<noteq> v \\<or> u \\<noteq> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\"", "lemma G_reach_conv: \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w \\<or> (v = u \\<and> w = u)\"", "lemma sccs_verts_dv: \"H.sccs_verts = sccs_verts - {{u}}\" (is \"?L = ?R\")", "lemma card_sccs_verts_dv: \"card sccs_verts = Suc (card H.sccs_verts)\"", "lemma card_sccs_dv: \"card sccs = Suc (card H.sccs)\"", "lemma euler_genus_eq: \"H.euler_genus = euler_genus\"", "lemma\n    verts_H: \"verts H = verts G\" and\n    arcs_H:  \"arcs H = arcs G - {a, a'}\" and\n    tail_H: \"tail H = tail G\" and\n    head_H: \"head H = head G\" and\n    ends_H: \"arc_to_ends H = arc_to_ends G\"and\n    arcs_in: \"{a,a'} \\<subseteq> arcs G\" and\n    ends_in: \"{tail G a, head G a} \\<subseteq> verts G\"", "lemma cyclic_on_edge_succ:\n    assumes \"x \\<in> verts H\" \"out_arcs H x \\<noteq> {}\"\n    shows \"cyclic_on (edge_succ HM) (out_arcs H x)\"", "lemma digraph_map: \"digraph_map H HM\"", "lemma rev_H: \"bidel_arc.H G M a' = H\" (is ?t1)\n    and rev_HM: \"bidel_arc.HM G M a' = HM\" (is ?t2)", "lemma a_neq_a': \"a \\<noteq> a'\"", "lemma\n    arcs_G: \"arcs G = insert a (insert a' (arcs H))\" and\n    arcs_not_in: \"{a,a'} \\<inter> arcs H = {}\"", "lemma card_arcs_da: \"card (arcs G) = 2 + card (arcs H)\"", "lemma cas_da: \"H.cas = G.cas\"", "lemma reachable_daD:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\"", "lemma not_G_isolated_a: \"{tail G a, head G a} \\<inter> G.isolated_verts = {}\"", "lemma isolated_other_da:\n    assumes \"u \\<notin> {tail G a, head G a}\" shows \"u \\<in> H.isolated_verts \\<longleftrightarrow> u \\<in> G.isolated_verts\"", "lemma isolated_da_pre: \"H.isolated_verts = G.isolated_verts \\<union>\n      (if tail G a \\<in> H.isolated_verts then {tail G a} else {}) \\<union>\n      (if head G a \\<in> H.isolated_verts then {head G a} else {})\" (is \"?L = ?R\")", "lemma card_isolated_verts_da0:\n    \"card H.isolated_verts = card G.isolated_verts + card ({tail G a, head G a} \\<inter> H.isolated_verts)\"", "lemma segments_neq:\n    assumes \"segment G.face_cycle_succ a' a \\<noteq> {} \\<or> segment G.face_cycle_succ a a' \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a\"", "lemma H_fcs_eq_G_fcs:\n    assumes \"b \\<in> arcs G\" \"{b,G.face_cycle_succ b} \\<inter> {a,a'} = {}\" \n    shows \"H.face_cycle_succ b = G.face_cycle_succ b\"", "lemma face_cycle_set_other_da:\n    assumes \"{a, a'} \\<inter> G.face_cycle_set b = {}\" \"b \\<in> arcs G\"\n    shows \"H.face_cycle_set b = G.face_cycle_set b\"", "lemma in_face_cycle_set_other:\n    assumes \"S \\<in> G.face_cycle_sets\" \"{a, a'} \\<inter> S = {}\"\n    shows \"S \\<in> H.face_cycle_sets\"", "lemma H_fcs_in_G_fcs:\n    assumes \"b \\<in> arcs H - (G.face_cycle_set a \\<union> G.face_cycle_set a')\"\n    shows \"H.face_cycle_set b \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\"", "lemma face_cycle_sets_da0:\n    \"H.face_cycle_sets = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n      \\<union> H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'})\" (is \"?L = ?R\")", "lemma card_fcs_aa'_le: \"card {G.face_cycle_set a, G.face_cycle_set a'} \\<le> card G.face_cycle_sets\"", "lemma card_face_cycle_sets_da0:\n    \"card H.face_cycle_sets = card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'}\n      + card (H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'}))\"", "lemma a_in_o: \"a \\<in> orbit G.face_cycle_succ a'\"", "lemma segment_a'_a_in: \"segment G.face_cycle_succ a' a \\<subseteq> arcs H\" (is \"?seg \\<subseteq> _\")", "lemma segment_a'_a_neD:\n    assumes \"segment G.face_cycle_succ a' a \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets\" (is \"?seg \\<in> _\")", "lemma segment_a_a'_neD:\n    assumes \"segment G.face_cycle_succ a a' \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets\"", "lemma H_fcs_full:\n    assumes \"SS \\<subseteq> H.face_cycle_sets\" shows \"H.face_cycle_set ` (\\<Union>SS) = SS\"", "lemma card_fcs_gt_0: \"0 < card G.face_cycle_sets\"", "lemma card_face_cycle_sets_da':\n    \"card H.face_cycle_sets = card G.face_cycle_sets - 1\n      + card ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} - {{}})\"", "lemma diff_face_not_in: \"a \\<notin> G.face_cycle_set a'\" \"a' \\<notin> G.face_cycle_set a\"", "lemma H_fcs_eq_for_a:\n    assumes \"b \\<in> arcs H \\<inter> G.face_cycle_set a\"\n    shows \"H.face_cycle_set b = S\" (is \"?L = ?R\")", "lemma HJ_fcs_eq_for_a':\n    assumes \"b \\<in> arcs H \\<inter> G.face_cycle_set a'\"\n    shows \"H.face_cycle_set b = S\"", "lemma card_face_cycle_sets_da':\n    \"card H.face_cycle_sets = card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'} + (if S = {} then 0 else 1)\"", "lemma reach_a': \"tail G a' \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a'\"", "lemma\n    tail_a': \"tail G a' = head G a\" and\n    head_a': \"head G a' = tail G a\"", "lemma reachable_daI:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\"", "lemma reachable_da: \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\"", "lemma sccs_verts_da: \"H.sccs_verts = G.sccs_verts\"", "lemma card_sccs_da: \"card H.sccs = card G.sccs\"", "lemma H_awalkI: \"G.awalk u p v \\<Longrightarrow> {a,a'} \\<inter> set p = {} \\<Longrightarrow> H.awalk u p v\"", "lemma tail_neq_head: \"tail G a \\<noteq> head G a\"", "lemma scc_of_tail_neq_head: \"H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)\"", "lemma scc_of_G_tail:\n    assumes \"u \\<in> G.scc_of (tail G a)\"\n    shows \"H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\"", "lemma scc_of_other:\n    assumes \"u \\<notin> G.scc_of (tail G a)\"\n    shows \"H.scc_of u = G.scc_of u\"", "lemma scc_of_tail_inter:\n    \"tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)\"", "lemma scc_of_head_inter:\n    \"head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\"", "lemma G_scc_of_tail_not_in: \"G.scc_of (tail G a) \\<notin> H.sccs_verts\"", "lemma H_scc_of_a_not_in:\n    \"H.scc_of (tail G a) \\<notin> G.sccs_verts\" \"H.scc_of (head G a) \\<notin> G.sccs_verts\"", "lemma scc_verts_da:\n    \"H.sccs_verts = (G.sccs_verts - {G.scc_of (tail G a)}) \\<union> {H.scc_of (tail G a), H.scc_of (head G a)}\" (is \"?L = ?R\")", "lemma card_sccs_da: \"card H.sccs = Suc (card G.sccs)\"", "lemma G_edge_succ_a'_no_loop:\n    assumes no_loop_a: \"head G a \\<noteq> tail G a\" shows G_edge_succ_a': \"edge_succ M a' = a'\" (is ?t2)", "lemma G_face_cycle_succ_a_no_loop:\n    assumes no_loop_a: \"head G a \\<noteq> tail G a\" shows \"G.face_cycle_succ a = a'\"", "lemma face_cycle_succ_a_neigh: \"G.face_cycle_succ a_neigh = a\"", "lemma a_neigh_in: \"a_neigh \\<in> arcs G\"", "lemma a_neigh_neq_a: \"a_neigh \\<noteq> a\"", "lemma a_neigh_neq_a': \"a_neigh \\<noteq> a'\"", "lemma edge_rev_a_neigh_neq: \"edge_rev M a_neigh \\<noteq> a'\"", "lemma edge_succ_a_neq: \"edge_succ M a \\<noteq> a'\"", "lemma H_face_cycle_succ_a_neigh: \"H.face_cycle_succ a_neigh = G.face_cycle_succ a'\"", "lemma H_fcs_a_neigh: \"H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a\" (is \"?L = ?R\")", "lemma loop_a[simp]: \"head G a = tail G a\"", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (card G.isolated_verts)\"", "lemma\n    G_edge_succ_a[simp]: \"edge_succ M a = a'\" (is ?t1) and\n    G_edge_succ_a'[simp]: \"edge_succ M a' = a\" (is ?t2)", "lemma\n    G_face_cycle_succ_a[simp]: \"G.face_cycle_succ a = a\" and\n    G_face_cycle_succ_a'[simp]: \"G.face_cycle_succ a' = a'\"", "lemma\n    G_face_cycle_set_a[simp]: \"G.face_cycle_set a = {a}\" and\n    G_face_cycle_set_a'[simp]: \"G.face_cycle_set a' = {a'}\"", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (Suc (card H.face_cycle_sets))\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma no_loop_a: \"head G a \\<noteq> tail G a\"", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (Suc (card G.isolated_verts))\"", "lemma G_edge_succ_a'[simp]: \"edge_succ M a' = a'\"", "lemma G_edge_succ_a[simp]: \"edge_succ M a = a\"", "lemma\n    G_face_cycle_succ_a[simp]: \"G.face_cycle_succ a = a'\" and\n    G_face_cycle_succ_a'[simp]: \"G.face_cycle_succ a' = a\"", "lemma\n    G_face_cycle_set_a[simp]: \"G.face_cycle_set a = {a,a'}\" (is ?t1) and\n    G_face_cycle_set_a'[simp]: \"G.face_cycle_set a' = {a,a'}\" (is ?t2)", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (card H.face_cycle_sets)\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (card G.isolated_verts)\"", "lemma segment_a'_a_ne: \"segment G.face_cycle_succ a' a \\<noteq> {}\"", "lemma segment_a_a'_e: \"segment G.face_cycle_succ a a' = {}\"", "lemma card_face_cycle_sets_da: \"card H.face_cycle_sets = card G.face_cycle_sets\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma isolated_verts_da: \"H.isolated_verts = G.isolated_verts\"", "lemma segment_a'_a_ne': \"segment G.face_cycle_succ a' a \\<noteq> {}\"", "lemma segment_a_a'_ne': \"segment G.face_cycle_succ a a' \\<noteq> {}\"", "lemma card_face_cycle_sets_da: \"card H.face_cycle_sets = Suc (card G.face_cycle_sets)\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma isolated_verts_da: \"H.isolated_verts = G.isolated_verts\"", "lemma card_face_cycle_sets_da: \"Suc (card H.face_cycle_sets) \\<ge> (card G.face_cycle_sets)\"", "lemma euler_genus_da: \"H.euler_genus \\<le> G.euler_genus\"", "lemma fcs_not_triv: \"G.face_cycle_set a \\<noteq> {a} \\<or> G.face_cycle_set a' \\<noteq> {a'}\"", "lemma S_ne: \"S \\<noteq> {}\"", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (card H.face_cycle_sets)\"", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\"", "lemma euler_genus_da: \"H.euler_genus \\<le> G.euler_genus\"", "lemma digraph_map_rev_swap:\n    assumes \"arc_to_ends G a = arc_to_ends G b\" \"{a,b} \\<subseteq> arcs G\"\n    shows \"digraph_map G (rev_swap a b)\"", "lemma euler_genus_rev_swap:\n    assumes \"arc_to_ends G a = arc_to_ends G b\" \"{a,b} \\<subseteq> arcs G\"\n    shows \"pre_digraph_map.euler_genus G (rev_swap a b) = euler_genus\"", "lemma bidirected_subgraph_obtain:\n  assumes sg: \"subgraph H G\" \"arcs H \\<noteq> arcs G\"\n  assumes fin: \"finite (arcs G)\"\n  assumes bidir: \"\\<exists>rev. bidirected_digraph G rev\" \"\\<exists>rev. bidirected_digraph H rev\"\n  obtains a a' where \"{a,a'} \\<subseteq> arcs G - arcs H\" \"a' \\<noteq> a\"\n    \"tail G a' = head G a\" \"head G a'= tail G a\"", "lemma subgraph_euler_genus_le:\n  assumes G: \"subgraph H G\" \"digraph_map G GM\" and H: \"\\<exists>rev. bidirected_digraph H rev\"\n  obtains HM where \"digraph_map H HM\" \"pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\"", "lemma (in digraph_map) nonneg_euler_genus: \"0 \\<le> euler_genus\"", "lemma subgraph_comb_planar:\n  assumes \"subgraph G H\" \"comb_planar H\" \"\\<exists>rev. bidirected_digraph G rev\" shows \"comb_planar G\""], "translations": [["", "lemma out_arcs_emptyD_dominates:\n  assumes \"out_arcs G x = {}\" shows \"\\<not>x \\<rightarrow>\\<^bsub>G\\<^esub> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<notin> arcs_ends G", "using assms"], ["proof (prove)\nusing this:\n  out_arcs G x = {}\n\ngoal (1 subgoal):\n 1. (x, y) \\<notin> arcs_ends G", "by (auto simp: out_arcs_def)"], ["", "lemma (in wf_digraph) reachable_refl_iff: \"u \\<rightarrow>\\<^sup>* u \\<longleftrightarrow> u \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<rightarrow>\\<^sup>* u) = (u \\<in> verts G)", "by (auto simp: reachable_in_verts)"], ["", "context digraph_map begin"], ["", "lemma face_cycle_set_succ[simp]: \"face_cycle_set (face_cycle_succ a) = face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_set (face_cycle_succ a) = face_cycle_set a", "by (metis face_cycle_eq face_cycle_set_self face_cycle_succ_inD)"], ["", "lemma face_cycle_succ_funpow_in[simp]:\n    \"(face_cycle_succ ^^ n) a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((face_cycle_succ ^^ n) a \\<in> arcs G) = (a \\<in> arcs G)", "by (induct n) auto"], ["", "lemma segment_face_cycle_x_x_eq:\n    \"segment face_cycle_succ x x = face_cycle_set x - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment face_cycle_succ x x = face_cycle_set x - {x}", "unfolding face_cycle_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment face_cycle_succ x x = orbit face_cycle_succ x - {x}", "using face_cycle_succ_permutes finite_arcs permutation_permutes"], ["proof (prove)\nusing this:\n  face_cycle_succ permutes arcs G\n  finite (arcs G)\n  permutation ?p = (\\<exists>S. finite S \\<and> ?p permutes S)\n\ngoal (1 subgoal):\n 1. segment face_cycle_succ x x = orbit face_cycle_succ x - {x}", "by (intro segment_x_x_eq) blast"], ["", "lemma fcs_x_eq_x: \"face_cycle_succ x = x \\<longleftrightarrow> face_cycle_set x = {x}\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_succ x = x) = (face_cycle_set x = {x})", "unfolding face_cycle_set_def orbit_eq_singleton_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_succ x = x) = (face_cycle_succ x = x)", ".."], ["", "end"], ["", "lemma (in bidirected_digraph) bidirected_digraph_del_arc:\n    \"bidirected_digraph (pre_digraph.del_arc (pre_digraph.del_arc G (arev a)) a) (perm_restrict arev (arcs G - {a , arev a}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (pre_digraph.del_arc (del_arc (arev a)) a)\n     (perm_restrict arev (arcs G - {a, arev a}))", "proof unfold_locales"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 2. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       head (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 3. \\<And>aa.\n       (aa \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)) =\n       (perm_restrict arev (arcs G - {a, arev a}) aa \\<noteq> aa)\n 4. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       perm_restrict arev (arcs G - {a, arev a})\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       aa\n 5. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a)\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       head (pre_digraph.del_arc (del_arc (arev a)) a) aa", "fix b"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 2. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       head (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 3. \\<And>aa.\n       (aa \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)) =\n       (perm_restrict arev (arcs G - {a, arev a}) aa \\<noteq> aa)\n 4. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       perm_restrict arev (arcs G - {a, arev a})\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       aa\n 5. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a)\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       head (pre_digraph.del_arc (del_arc (arev a)) a) aa", "assume A: \"b \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)\""], ["proof (state)\nthis:\n  b \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)\n\ngoal (5 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 2. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       head (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 3. \\<And>aa.\n       (aa \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)) =\n       (perm_restrict arev (arcs G - {a, arev a}) aa \\<noteq> aa)\n 4. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       perm_restrict arev (arcs G - {a, arev a})\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       aa\n 5. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a)\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       head (pre_digraph.del_arc (del_arc (arev a)) a) aa", "have \"arev b \\<noteq> b \\<Longrightarrow> b \\<noteq> arev a \\<Longrightarrow> b \\<noteq> a \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b", "using bij_arev arev_dom"], ["proof (prove)\nusing this:\n  bij arev\n  (?a \\<in> arcs G) = (arev ?a \\<noteq> ?a)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n    \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b", "by (subst perm_restrict_simps) (auto simp: bij_iff)"], ["proof (state)\nthis:\n  \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b\n\ngoal (5 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 2. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       head (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 3. \\<And>aa.\n       (aa \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)) =\n       (perm_restrict arev (arcs G - {a, arev a}) aa \\<noteq> aa)\n 4. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       perm_restrict arev (arcs G - {a, arev a})\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       aa\n 5. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a)\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       head (pre_digraph.del_arc (del_arc (arev a)) a) aa", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b", "show \"perm_restrict arev (arcs G - {a, arev a}) (perm_restrict arev (arcs G - {a, arev a}) b) = b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b\n\ngoal (1 subgoal):\n 1. perm_restrict arev (arcs G - {a, arev a})\n     (perm_restrict arev (arcs G - {a, arev a}) b) =\n    b", "using A"], ["proof (prove)\nusing this:\n  \\<lbrakk>arev b \\<noteq> b; b \\<noteq> arev a; b \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> perm_restrict arev (arcs G - {a, arev a}) (arev b) = b\n  b \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)\n\ngoal (1 subgoal):\n 1. perm_restrict arev (arcs G - {a, arev a})\n     (perm_restrict arev (arcs G - {a, arev a}) b) =\n    b", "by (auto simp: pre_digraph.del_arc_simps perm_restrict_simps arev_dom)"], ["proof (state)\nthis:\n  perm_restrict arev (arcs G - {a, arev a})\n   (perm_restrict arev (arcs G - {a, arev a}) b) =\n  b\n\ngoal (4 subgoals):\n 1. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 2. \\<And>e.\n       e \\<in> arcs\n                (pre_digraph.del_arc (del_arc (arev a)) a) \\<Longrightarrow>\n       head (pre_digraph.del_arc (del_arc (arev a)) a) e\n       \\<in> verts (pre_digraph.del_arc (del_arc (arev a)) a)\n 3. \\<And>aa.\n       (aa \\<in> arcs (pre_digraph.del_arc (del_arc (arev a)) a)) =\n       (perm_restrict arev (arcs G - {a, arev a}) aa \\<noteq> aa)\n 4. \\<And>aa.\n       aa \\<in> arcs\n                 (pre_digraph.del_arc (del_arc (arev a))\n                   a) \\<Longrightarrow>\n       tail (pre_digraph.del_arc (del_arc (arev a)) a)\n        (perm_restrict arev (arcs G - {a, arev a}) aa) =\n       head (pre_digraph.del_arc (del_arc (arev a)) a) aa", "qed (auto simp: pre_digraph.del_arc_simps perm_restrict_simps arev_dom)"], ["", "lemma (in bidirected_digraph) bidirected_digraph_del_vert: \"bidirected_digraph (del_vert u) (perm_restrict arev (arcs (del_vert u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (del_vert u) (perm_restrict arev (arcs (del_vert u)))", "by unfold_locales (auto simp: del_vert_simps perm_restrict_simps arev_dom)"], ["", "lemma (in pre_digraph) ends_del_arc: \"arc_to_ends (del_arc u) = arc_to_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_ends (del_arc u) = arc_to_ends G", "by (simp add: arc_to_ends_def fun_eq_iff)"], ["", "lemma (in pre_digraph) dominates_arcsD:\n  assumes \"v \\<rightarrow>\\<^bsub>del_arc u\\<^esub> w\" shows \"v \\<rightarrow>\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^bsub>del_arc u\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow> w", "by (auto simp: arcs_ends_def ends_del_arc)"], ["", "lemma (in wf_digraph) reachable_del_arcD:\n  assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_arc u\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* w", "interpret H: wf_digraph \"del_arc u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph (del_arc u)", "by (rule wf_digraph_del_arc)"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* w", "from assms"], ["proof (chain)\npicking this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>del_arc u\\<^esub> w", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>del_arc u\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>* w", "by (induct) (auto dest: dominates_arcsD intro: adj_reachable_trans)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>* w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in fin_digraph) finite_isolated_verts[intro!]: \"finite isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite isolated_verts", "by (auto simp: isolated_verts_def)"], ["", "lemma (in wf_digraph) isolated_verts_in_sccs:\n  assumes \"u \\<in> isolated_verts\" shows \"{u} \\<in> sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {u} \\<in> sccs_verts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {u} \\<in> sccs_verts", "have \"v = u\" if \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> v\" for v"], ["proof (prove)\ngoal (1 subgoal):\n 1. v = u", "using that assms"], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>* v\n  u \\<in> isolated_verts\n\ngoal (1 subgoal):\n 1. v = u", "by induct (auto simp: arcs_ends_def arc_to_ends_def isolated_verts_def)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>* ?v3 \\<Longrightarrow> ?v3 = u\n\ngoal (1 subgoal):\n 1. {u} \\<in> sccs_verts", "with assms"], ["proof (chain)\npicking this:\n  u \\<in> isolated_verts\n  u \\<rightarrow>\\<^sup>* ?v3 \\<Longrightarrow> ?v3 = u", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> isolated_verts\n  u \\<rightarrow>\\<^sup>* ?v3 \\<Longrightarrow> ?v3 = u\n\ngoal (1 subgoal):\n 1. {u} \\<in> sccs_verts", "by (auto simp: sccs_verts_def isolated_verts_def)"], ["proof (state)\nthis:\n  {u} \\<in> sccs_verts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) in_face_cycle_sets:\n  \"a \\<in> arcs G \\<Longrightarrow> face_cycle_set a \\<in> face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> arcs G \\<Longrightarrow> face_cycle_set a \\<in> face_cycle_sets", "by (auto simp: face_cycle_sets_def)"], ["", "lemma (in digraph_map) heads_face_cycle_set:\n  assumes \"a \\<in> arcs G\"\n  shows \"head G ` face_cycle_set a = tail G ` face_cycle_set a\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. head G ` face_cycle_set a = tail G ` face_cycle_set a", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> head G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> tail G ` face_cycle_set a\n 2. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "fix u"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> head G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> tail G ` face_cycle_set a\n 2. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "assume \"u \\<in> ?L\""], ["proof (state)\nthis:\n  u \\<in> head G ` face_cycle_set a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> head G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> tail G ` face_cycle_set a\n 2. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  u \\<in> head G ` face_cycle_set a", "obtain b where \"b \\<in> face_cycle_set a\" \"head G b = u\""], ["proof (prove)\nusing this:\n  u \\<in> head G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> face_cycle_set a; head G b = u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> face_cycle_set a\n  head G b = u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> head G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> tail G ` face_cycle_set a\n 2. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  b \\<in> face_cycle_set a\n  head G b = u", "have \"face_cycle_succ b \\<in> face_cycle_set a\" \"tail G (face_cycle_succ b) = u\""], ["proof (prove)\nusing this:\n  b \\<in> face_cycle_set a\n  head G b = u\n\ngoal (1 subgoal):\n 1. face_cycle_succ b \\<in> face_cycle_set a &&&\n    tail G (face_cycle_succ b) = u", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> face_cycle_set a\n  head G b = u\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. face_cycle_succ b \\<in> face_cycle_set a &&&\n    tail G (face_cycle_succ b) = u", "by (auto simp: tail_face_cycle_succ face_cycle_succ_inI in_face_cycle_setD)"], ["proof (state)\nthis:\n  face_cycle_succ b \\<in> face_cycle_set a\n  tail G (face_cycle_succ b) = u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> head G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> tail G ` face_cycle_set a\n 2. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  face_cycle_succ b \\<in> face_cycle_set a\n  tail G (face_cycle_succ b) = u", "show \"u \\<in> ?R\""], ["proof (prove)\nusing this:\n  face_cycle_succ b \\<in> face_cycle_set a\n  tail G (face_cycle_succ b) = u\n\ngoal (1 subgoal):\n 1. u \\<in> tail G ` face_cycle_set a", "by auto"], ["proof (state)\nthis:\n  u \\<in> tail G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "fix u"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "assume \"u \\<in> ?R\""], ["proof (state)\nthis:\n  u \\<in> tail G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  u \\<in> tail G ` face_cycle_set a", "obtain b where \"b \\<in> face_cycle_set a\" \"tail G b = u\""], ["proof (prove)\nusing this:\n  u \\<in> tail G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>b \\<in> face_cycle_set a; tail G b = u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b \\<in> face_cycle_set a\n  tail G b = u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "moreover"], ["proof (state)\nthis:\n  b \\<in> face_cycle_set a\n  tail G b = u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  b \\<in> face_cycle_set a\n  tail G b = u", "obtain c where \"b = face_cycle_succ c\""], ["proof (prove)\nusing this:\n  b \\<in> face_cycle_set a\n  tail G b = u\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        b = face_cycle_succ c \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis face_cycle_succ_pred)"], ["proof (state)\nthis:\n  b = face_cycle_succ c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "ultimately"], ["proof (chain)\npicking this:\n  b \\<in> face_cycle_set a\n  tail G b = u\n  b = face_cycle_succ c", "have \"c \\<in> face_cycle_set a\" \"head G c = u\""], ["proof (prove)\nusing this:\n  b \\<in> face_cycle_set a\n  tail G b = u\n  b = face_cycle_succ c\n\ngoal (1 subgoal):\n 1. c \\<in> face_cycle_set a &&& head G c = u", "by (auto dest: face_cycle_succ_inD) (metis assms face_cycle_succ_no_arc in_face_cycle_setD tail_face_cycle_succ)"], ["proof (state)\nthis:\n  c \\<in> face_cycle_set a\n  head G c = u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> tail G ` face_cycle_set a \\<Longrightarrow>\n       x \\<in> head G ` face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  c \\<in> face_cycle_set a\n  head G c = u", "show \"u \\<in> ?L\""], ["proof (prove)\nusing this:\n  c \\<in> face_cycle_set a\n  head G c = u\n\ngoal (1 subgoal):\n 1. u \\<in> head G ` face_cycle_set a", "by auto"], ["proof (state)\nthis:\n  u \\<in> head G ` face_cycle_set a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in pre_digraph) casI_nth:\n  assumes \"p \\<noteq> []\" \"u = tail G (hd p)\" \"v = head G (last p)\" \"\\<And>i. Suc i < length p \\<Longrightarrow> head G (p ! i) = tail G (p ! Suc i)\"\n  shows \"cas u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cas u p v", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  u = tail G (hd p)\n  v = head G (last p)\n  Suc ?i3 < length p \\<Longrightarrow>\n  head G (p ! ?i3) = tail G (p ! Suc ?i3)\n\ngoal (1 subgoal):\n 1. cas u p v", "proof (induct p arbitrary: u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>[] \\<noteq> []; u = tail G (hd []); v = head G (last []);\n        \\<And>i.\n           Suc i < length [] \\<Longrightarrow>\n           head G ([] ! i) = tail G ([] ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u [] v\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "case Nil"], ["proof (state)\nthis:\n  [] \\<noteq> []\n  u = tail G (hd [])\n  v = head G (last [])\n  Suc ?i3 < length [] \\<Longrightarrow>\n  head G ([] ! ?i3) = tail G ([] ! Suc ?i3)\n\ngoal (2 subgoals):\n 1. \\<And>u.\n       \\<lbrakk>[] \\<noteq> []; u = tail G (hd []); v = head G (last []);\n        \\<And>i.\n           Suc i < length [] \\<Longrightarrow>\n           head G ([] ! i) = tail G ([] ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u [] v\n 2. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "then"], ["proof (chain)\npicking this:\n  [] \\<noteq> []\n  u = tail G (hd [])\n  v = head G (last [])\n  Suc ?i3 < length [] \\<Longrightarrow>\n  head G ([] ! ?i3) = tail G ([] ! Suc ?i3)", "show ?case"], ["proof (prove)\nusing this:\n  [] \\<noteq> []\n  u = tail G (hd [])\n  v = head G (last [])\n  Suc ?i3 < length [] \\<Longrightarrow>\n  head G ([] ! ?i3) = tail G ([] ! Suc ?i3)\n\ngoal (1 subgoal):\n 1. cas u [] v", "by simp"], ["proof (state)\nthis:\n  cas u [] v\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "case (Cons a p)"], ["proof (state)\nthis:\n  \\<lbrakk>p \\<noteq> []; ?u3 = tail G (hd p); v = head G (last p);\n   \\<And>i.\n      Suc i < length p \\<Longrightarrow>\n      head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n  \\<Longrightarrow> cas ?u3 p v\n  a # p \\<noteq> []\n  u = tail G (hd (a # p))\n  v = head G (last (a # p))\n  Suc ?i3 < length (a # p) \\<Longrightarrow>\n  head G ((a # p) ! ?i3) = tail G ((a # p) ! Suc ?i3)\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "have \"cas (head G a) p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cas (head G a) p v", "proof (cases \"p = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> cas (head G a) p v\n 2. p \\<noteq> [] \\<Longrightarrow> cas (head G a) p v", "case False"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> cas (head G a) p v\n 2. p \\<noteq> [] \\<Longrightarrow> cas (head G a) p v", "then"], ["proof (chain)\npicking this:\n  p \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. cas (head G a) p v", "using Cons.prems(1-3) Cons.prems(4)[of 0] Cons.prems(4)[of \"Suc i\" for i]"], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  a # p \\<noteq> []\n  u = tail G (hd (a # p))\n  v = head G (last (a # p))\n  Suc 0 < length (a # p) \\<Longrightarrow>\n  head G ((a # p) ! 0) = tail G ((a # p) ! Suc 0)\n  Suc (Suc ?i5) < length (a # p) \\<Longrightarrow>\n  head G ((a # p) ! Suc ?i5) = tail G ((a # p) ! Suc (Suc ?i5))\n\ngoal (1 subgoal):\n 1. cas (head G a) p v", "by (intro Cons) (simp_all add: hd_conv_nth)"], ["proof (state)\nthis:\n  cas (head G a) p v\n\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow> cas (head G a) p v", "qed (simp add: Cons)"], ["proof (state)\nthis:\n  cas (head G a) p v\n\ngoal (1 subgoal):\n 1. \\<And>a p u.\n       \\<lbrakk>\\<And>u.\n                   \\<lbrakk>p \\<noteq> []; u = tail G (hd p);\n                    v = head G (last p);\n                    \\<And>i.\n                       Suc i < length p \\<Longrightarrow>\n                       head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n                   \\<Longrightarrow> cas u p v;\n        a # p \\<noteq> []; u = tail G (hd (a # p));\n        v = head G (last (a # p));\n        \\<And>i.\n           Suc i < length (a # p) \\<Longrightarrow>\n           head G ((a # p) ! i) = tail G ((a # p) ! Suc i)\\<rbrakk>\n       \\<Longrightarrow> cas u (a # p) v", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>p \\<noteq> []; ?u3 = tail G (hd p); v = head G (last p);\n   \\<And>i.\n      Suc i < length p \\<Longrightarrow>\n      head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n  \\<Longrightarrow> cas ?u3 p v\n  a # p \\<noteq> []\n  u = tail G (hd (a # p))\n  v = head G (last (a # p))\n  Suc ?i3 < length (a # p) \\<Longrightarrow>\n  head G ((a # p) ! ?i3) = tail G ((a # p) ! Suc ?i3)\n  cas (head G a) p v", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> []; ?u3 = tail G (hd p); v = head G (last p);\n   \\<And>i.\n      Suc i < length p \\<Longrightarrow>\n      head G (p ! i) = tail G (p ! Suc i)\\<rbrakk>\n  \\<Longrightarrow> cas ?u3 p v\n  a # p \\<noteq> []\n  u = tail G (hd (a # p))\n  v = head G (last (a # p))\n  Suc ?i3 < length (a # p) \\<Longrightarrow>\n  head G ((a # p) ! ?i3) = tail G ((a # p) ! Suc ?i3)\n  cas (head G a) p v\n\ngoal (1 subgoal):\n 1. cas u (a # p) v", "by simp"], ["proof (state)\nthis:\n  cas u (a # p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) obtain_trail_in_fcs:\n  assumes \"a \\<in> arcs G\" \"a0 \\<in> face_cycle_set a\" \"an \\<in> face_cycle_set a\"\n  obtains p where \"trail (tail G a0) p (head G an)\" \"p \\<noteq> []\" \"hd p = a0\"  \"last p = an\"\n    \"set p \\<subseteq> face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have fcs_a: \"face_cycle_set a = orbit face_cycle_succ a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_set a = orbit face_cycle_succ a0", "using assms face_cycle_eq"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  a0 \\<in> face_cycle_set a\n  an \\<in> face_cycle_set a\n  ?b \\<in> face_cycle_set ?a \\<Longrightarrow>\n  face_cycle_set ?b = face_cycle_set ?a\n\ngoal (1 subgoal):\n 1. face_cycle_set a = orbit face_cycle_succ a0", "by (simp add: face_cycle_set_def)"], ["proof (state)\nthis:\n  face_cycle_set a = orbit face_cycle_succ a0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"a0 = (face_cycle_succ ^^ 0) a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a0 = (face_cycle_succ ^^ 0) a0", "by simp"], ["proof (state)\nthis:\n  a0 = (face_cycle_succ ^^ 0) a0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"an = (face_cycle_succ ^^ funpow_dist face_cycle_succ a0 an) a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an = (face_cycle_succ ^^ funpow_dist face_cycle_succ a0 an) a0", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  a0 \\<in> face_cycle_set a\n  an \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. an = (face_cycle_succ ^^ funpow_dist face_cycle_succ a0 an) a0", "by (simp add: fcs_a funpow_dist_prop)"], ["proof (state)\nthis:\n  an = (face_cycle_succ ^^ funpow_dist face_cycle_succ a0 an) a0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define p where \"p = map (\\<lambda>n. (face_cycle_succ ^^ n) a0) [0..<Suc (funpow_dist face_cycle_succ a0 an)]\""], ["proof (state)\nthis:\n  p =\n  map (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   [0..<Suc (funpow_dist face_cycle_succ a0 an)]\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have p_nth: \"\\<And>i. i < length p \\<Longrightarrow> p ! i = (face_cycle_succ ^^ i) a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length p \\<Longrightarrow> p ! i = (face_cycle_succ ^^ i) a0", "by (auto simp: p_def simp del: upt_Suc)"], ["proof (state)\nthis:\n  ?i4 < length p \\<Longrightarrow> p ! ?i4 = (face_cycle_succ ^^ ?i4) a0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have P2: \"p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> []", "by (simp add: p_def)"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have P3: \"hd p = a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd p = a0", "using \\<open>a0 = _\\<close>"], ["proof (prove)\nusing this:\n  a0 = (face_cycle_succ ^^ 0) a0\n\ngoal (1 subgoal):\n 1. hd p = a0", "by (auto simp: p_def hd_map simp del: upt_Suc)"], ["proof (state)\nthis:\n  hd p = a0\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have P4: \"last p = an\""], ["proof (prove)\ngoal (1 subgoal):\n 1. last p = an", "using \\<open>an = _\\<close>"], ["proof (prove)\nusing this:\n  an = (face_cycle_succ ^^ funpow_dist face_cycle_succ a0 an) a0\n\ngoal (1 subgoal):\n 1. last p = an", "by (simp add: p_def)"], ["proof (state)\nthis:\n  last p = an\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have P5: \"set p \\<subseteq> face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p \\<subseteq> face_cycle_set a", "unfolding p_def fcs_a orbit_altdef_permutation[OF permutation_face_cycle_succ]"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (map (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n          [0..<Suc (funpow_dist face_cycle_succ a0 an)])\n    \\<subseteq> {(face_cycle_succ ^^ n) a0 |n. True}", "by auto"], ["proof (state)\nthis:\n  set p \\<subseteq> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have P1: \"trail (tail G a0) p (head G an)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "have \"distinct p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct p", "have \"an \\<in> orbit face_cycle_succ a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. an \\<in> orbit face_cycle_succ a0", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  a0 \\<in> face_cycle_set a\n  an \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. an \\<in> orbit face_cycle_succ a0", "by (simp add: fcs_a)"], ["proof (state)\nthis:\n  an \\<in> orbit face_cycle_succ a0\n\ngoal (1 subgoal):\n 1. distinct p", "then"], ["proof (chain)\npicking this:\n  an \\<in> orbit face_cycle_succ a0", "have \"inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0) {0..funpow_dist face_cycle_succ a0 an}\""], ["proof (prove)\nusing this:\n  an \\<in> orbit face_cycle_succ a0\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n     {0..funpow_dist face_cycle_succ a0 an}", "by (rule inj_on_funpow_dist)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   {0..funpow_dist face_cycle_succ a0 an}\n\ngoal (1 subgoal):\n 1. distinct p", "also"], ["proof (state)\nthis:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   {0..funpow_dist face_cycle_succ a0 an}\n\ngoal (1 subgoal):\n 1. distinct p", "have \"{0..funpow_dist face_cycle_succ a0 an} = (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {0..funpow_dist face_cycle_succ a0 an} =\n    set [0..<Suc (funpow_dist face_cycle_succ a0 an)]", "by auto"], ["proof (state)\nthis:\n  {0..funpow_dist face_cycle_succ a0 an} =\n  set [0..<Suc (funpow_dist face_cycle_succ a0 an)]\n\ngoal (1 subgoal):\n 1. distinct p", "finally"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])", "have \"inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0) (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n     (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])", "."], ["proof (state)\nthis:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])\n\ngoal (1 subgoal):\n 1. distinct p", "then"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])", "show \"distinct p\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>n. (face_cycle_succ ^^ n) a0)\n   (set [0..<Suc (funpow_dist face_cycle_succ a0 an)])\n\ngoal (1 subgoal):\n 1. distinct p", "by (simp add: distinct_map p_def)"], ["proof (state)\nthis:\n  distinct p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct p\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "moreover"], ["proof (state)\nthis:\n  distinct p\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "have \"a0 \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a0 \\<in> arcs G", "by (metis assms(1-2) in_face_cycle_setD)"], ["proof (state)\nthis:\n  a0 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "then"], ["proof (chain)\npicking this:\n  a0 \\<in> arcs G", "have \"tail G a0 \\<in> verts G\""], ["proof (prove)\nusing this:\n  a0 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G a0 \\<in> verts G", "by simp"], ["proof (state)\nthis:\n  tail G a0 \\<in> verts G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "moreover"], ["proof (state)\nthis:\n  tail G a0 \\<in> verts G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "have \"set p \\<subseteq> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set p \\<subseteq> arcs G", "using P5"], ["proof (prove)\nusing this:\n  set p \\<subseteq> face_cycle_set a\n\ngoal (1 subgoal):\n 1. set p \\<subseteq> arcs G", "by (metis assms(1) in_face_cycle_setD subset_code(1))"], ["proof (state)\nthis:\n  set p \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "moreover"], ["proof (state)\nthis:\n  set p \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "then"], ["proof (chain)\npicking this:\n  set p \\<subseteq> arcs G", "have \"\\<And>i. Suc i < length p \\<Longrightarrow> p ! Suc i \\<in> arcs G\""], ["proof (prove)\nusing this:\n  set p \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>i. Suc i < length p \\<Longrightarrow> p ! Suc i \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  Suc ?i4 < length p \\<Longrightarrow> p ! Suc ?i4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "then"], ["proof (chain)\npicking this:\n  Suc ?i4 < length p \\<Longrightarrow> p ! Suc ?i4 \\<in> arcs G", "have \"\\<And>i. Suc i < length p \\<Longrightarrow> head G (p ! i) = tail G (p ! Suc i)\""], ["proof (prove)\nusing this:\n  Suc ?i4 < length p \\<Longrightarrow> p ! Suc ?i4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       Suc i < length p \\<Longrightarrow>\n       head G (p ! i) = tail G (p ! Suc i)", "by (auto simp: p_nth tail_face_cycle_succ)"], ["proof (state)\nthis:\n  Suc ?i4 < length p \\<Longrightarrow>\n  head G (p ! ?i4) = tail G (p ! Suc ?i4)\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "ultimately"], ["proof (chain)\npicking this:\n  distinct p\n  tail G a0 \\<in> verts G\n  set p \\<subseteq> arcs G\n  Suc ?i4 < length p \\<Longrightarrow>\n  head G (p ! ?i4) = tail G (p ! Suc ?i4)", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct p\n  tail G a0 \\<in> verts G\n  set p \\<subseteq> arcs G\n  Suc ?i4 < length p \\<Longrightarrow>\n  head G (p ! ?i4) = tail G (p ! Suc ?i4)\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "using P2 P3 P4"], ["proof (prove)\nusing this:\n  distinct p\n  tail G a0 \\<in> verts G\n  set p \\<subseteq> arcs G\n  Suc ?i4 < length p \\<Longrightarrow>\n  head G (p ! ?i4) = tail G (p ! Suc ?i4)\n  p \\<noteq> []\n  hd p = a0\n  last p = an\n\ngoal (1 subgoal):\n 1. trail (tail G a0) p (head G an)", "unfolding trail_def awalk_def"], ["proof (prove)\nusing this:\n  distinct p\n  tail G a0 \\<in> verts G\n  set p \\<subseteq> arcs G\n  Suc ?i4 < length p \\<Longrightarrow>\n  head G (p ! ?i4) = tail G (p ! Suc ?i4)\n  p \\<noteq> []\n  hd p = a0\n  last p = an\n\ngoal (1 subgoal):\n 1. (tail G a0 \\<in> verts G \\<and>\n     set p \\<subseteq> arcs G \\<and> cas (tail G a0) p (head G an)) \\<and>\n    distinct p", "by (auto intro: casI_nth)"], ["proof (state)\nthis:\n  trail (tail G a0) p (head G an)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  trail (tail G a0) p (head G an)\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail (tail G a0) p (head G an); p \\<noteq> []; hd p = a0;\n         last p = an; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from P1 P2 P3 P4 P5"], ["proof (chain)\npicking this:\n  trail (tail G a0) p (head G an)\n  p \\<noteq> []\n  hd p = a0\n  last p = an\n  set p \\<subseteq> face_cycle_set a", "show ?thesis"], ["proof (prove)\nusing this:\n  trail (tail G a0) p (head G an)\n  p \\<noteq> []\n  hd p = a0\n  last p = an\n  set p \\<subseteq> face_cycle_set a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) obtain_trail_in_fcs':\n  assumes \"a \\<in> arcs G\" \"u \\<in> tail G ` face_cycle_set a\" \"v \\<in> tail G ` face_cycle_set a\"\n  obtains p where \"trail u p v\" \"set p \\<subseteq> face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> arcs G\n  u \\<in> tail G ` face_cycle_set a\n  v \\<in> tail G ` face_cycle_set a", "obtain a0 where \"tail G a0 = u\" \"a0 \\<in> face_cycle_set a\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  u \\<in> tail G ` face_cycle_set a\n  v \\<in> tail G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>a0.\n        \\<lbrakk>tail G a0 = u; a0 \\<in> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tail G a0 = u\n  a0 \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  tail G a0 = u\n  a0 \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> arcs G\n  u \\<in> tail G ` face_cycle_set a\n  v \\<in> tail G ` face_cycle_set a", "obtain an where \"head G an = v\" \"an \\<in> face_cycle_set a\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  u \\<in> tail G ` face_cycle_set a\n  v \\<in> tail G ` face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>an.\n        \\<lbrakk>head G an = v; an \\<in> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: heads_face_cycle_set[symmetric])"], ["proof (state)\nthis:\n  head G an = v\n  an \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  tail G a0 = u\n  a0 \\<in> face_cycle_set a\n  head G an = v\n  an \\<in> face_cycle_set a", "obtain p where \"trail u p v\" \"set p \\<subseteq> face_cycle_set a\""], ["proof (prove)\nusing this:\n  tail G a0 = u\n  a0 \\<in> face_cycle_set a\n  head G an = v\n  an \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>a \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  tail G a0 = u\n  a0 \\<in> face_cycle_set a\n  head G an = v\n  an \\<in> face_cycle_set a\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis obtain_trail_in_fcs)"], ["proof (state)\nthis:\n  trail u p v\n  set p \\<subseteq> face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>trail u p v; set p \\<subseteq> face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  trail u p v\n  set p \\<subseteq> face_cycle_set a", "show ?thesis"], ["proof (prove)\nusing this:\n  trail u p v\n  set p \\<subseteq> face_cycle_set a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Deleting an isolated vertex\\<close>"], ["", "locale del_vert_props = digraph_map +\n  fixes u\n  assumes u_in: \"u \\<in> verts G\"\n  assumes u_isolated: \"out_arcs G u = {}\"\n\nbegin"], ["", "lemma u_isolated_in: \"in_arcs G u = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs G u = {}", "using u_isolated"], ["proof (prove)\nusing this:\n  out_arcs G u = {}\n\ngoal (1 subgoal):\n 1. in_arcs G u = {}", "by (simp add: in_arcs_eq)"], ["", "lemma arcs_dv: \"arcs (del_vert u) = arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs (del_vert u) = arcs G", "using u_isolated u_isolated_in"], ["proof (prove)\nusing this:\n  out_arcs G u = {}\n  in_arcs G u = {}\n\ngoal (1 subgoal):\n 1. arcs (del_vert u) = arcs G", "by (auto simp: del_vert_simps)"], ["", "lemma out_arcs_dv: \"out_arcs (del_vert u) = out_arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (del_vert u) = out_arcs G", "by (auto simp: fun_eq_iff arcs_dv tail_del_vert)"], ["", "lemma digraph_map_del_vert:\n    shows \"digraph_map (del_vert u) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "have \"perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M", "using has_dom_arev arcs_dv"], ["proof (prove)\nusing this:\n  has_dom (edge_rev M) (arcs G)\n  arcs (del_vert u) = arcs G\n\ngoal (1 subgoal):\n 1. perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M", "by (auto simp: perm_restrict_dom_subset)"], ["proof (state)\nthis:\n  perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M\n\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "then"], ["proof (chain)\npicking this:\n  perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M", "interpret H: bidirected_digraph \"del_vert u\" \"edge_rev M\""], ["proof (prove)\nusing this:\n  perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M\n\ngoal (1 subgoal):\n 1. bidirected_digraph (del_vert u) (edge_rev M)", "using bidirected_digraph_del_vert[of u]"], ["proof (prove)\nusing this:\n  perm_restrict (edge_rev M) (arcs (del_vert u)) = edge_rev M\n  bidirected_digraph (del_vert u)\n   (perm_restrict (edge_rev M) (arcs (del_vert u)))\n\ngoal (1 subgoal):\n 1. bidirected_digraph (del_vert u) (edge_rev M)", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "by unfold_locales (auto simp: arcs_dv edge_succ_permutes out_arcs_dv edge_succ_cyclic verts_del_vert)"], ["proof (state)\nthis:\n  digraph_map (del_vert u) M\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale del_vert_props \\<subseteq> H: digraph_map \"del_vert u\" M"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (del_vert u) M", "by (rule digraph_map_del_vert)"], ["", "context del_vert_props begin"], ["", "lemma card_verts_dv: \"card (verts G) = Suc (card (verts (del_vert u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (verts G) = Suc (card (verts (del_vert u)))", "by (auto simp: verts_del_vert) (rule card.remove, auto simp: u_in)"], ["", "lemma card_arcs_dv: \"card (arcs (del_vert u)) = card (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (arcs (del_vert u)) = card (arcs G)", "using u_isolated"], ["proof (prove)\nusing this:\n  out_arcs G u = {}\n\ngoal (1 subgoal):\n 1. card (arcs (del_vert u)) = card (arcs G)", "by (auto simp add: arcs_dv in_arcs_eq)"], ["", "lemma isolated_verts_dv: \"H.isolated_verts = isolated_verts - {u}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.isolated_verts = isolated_verts - {u}", "by (auto simp: isolated_verts_def H.isolated_verts_def verts_del_vert out_arcs_dv)"], ["", "lemma u_in_isolated_verts: \"u \\<in> isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> isolated_verts", "using u_in u_isolated"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  out_arcs G u = {}\n\ngoal (1 subgoal):\n 1. u \\<in> isolated_verts", "by (auto simp: isolated_verts_def)"], ["", "lemma card_isolated_verts_dv: \"card isolated_verts = Suc (card H.isolated_verts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card isolated_verts = Suc (card H.isolated_verts)", "by (simp add: isolated_verts_dv) (rule card.remove, auto simp: u_in_isolated_verts)"], ["", "lemma face_cycles_dv: \"H.face_cycle_sets = face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_sets = face_cycle_sets", "unfolding H.face_cycle_sets_def face_cycle_sets_def arcs_dv"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` arcs G = H.face_cycle_set ` arcs G", ".."], ["", "lemma euler_char_dv: \"euler_char = 1 + H.euler_char\""], ["proof (prove)\ngoal (1 subgoal):\n 1. euler_char = 1 + H.euler_char", "by (auto simp: euler_char_def H.euler_char_def card_arcs_dv card_verts_dv face_cycles_dv)"], ["", "lemma adj_dv: \"v \\<rightarrow>\\<^bsub>del_vert u\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<rightarrow>\\<^bsub>del_vert u\\<^esub> w) =\n    (v \\<rightarrow>\\<^bsub>G\\<^esub> w)", "by (auto simp: arcs_ends_def arcs_dv ends_del_vert)"], ["", "lemma reachable_del_vertD:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w", "by induct (auto simp: verts_del_vert adj_dv intro: adj_reachable_trans)"], ["", "lemma reachable_del_vertI:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" \"u \\<noteq> v \\<or> u \\<noteq> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n  u \\<noteq> v \\<or> u \\<noteq> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w;\n        u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n        y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w;\n        u \\<noteq> x \\<or> u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "case (step x y)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^bsub>G\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n  u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n  y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n  u \\<noteq> x \\<or> u \\<noteq> w\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w;\n        u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n        y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w;\n        u \\<noteq> x \\<or> u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "from \\<open>x \\<rightarrow>\\<^bsub>G\\<^esub> y\\<close>"], ["proof (chain)\npicking this:\n  x \\<rightarrow>\\<^bsub>G\\<^esub> y", "obtain a where \"a \\<in> arcs G\" \"head G a = y\""], ["proof (prove)\nusing this:\n  x \\<rightarrow>\\<^bsub>G\\<^esub> y\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>a \\<in> arcs G; head G a = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a \\<in> arcs G\n  head G a = y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w;\n        u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n        y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w;\n        u \\<noteq> x \\<or> u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs G\n  head G a = y", "have \"a \\<in> in_arcs G y\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  head G a = y\n\ngoal (1 subgoal):\n 1. a \\<in> in_arcs G y", "by auto"], ["proof (state)\nthis:\n  a \\<in> in_arcs G y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w;\n        u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n        y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w;\n        u \\<noteq> x \\<or> u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "then"], ["proof (chain)\npicking this:\n  a \\<in> in_arcs G y", "have \"y \\<noteq> u\""], ["proof (prove)\nusing this:\n  a \\<in> in_arcs G y\n\ngoal (1 subgoal):\n 1. y \\<noteq> u", "using u_isolated in_arcs_eq[of u]"], ["proof (prove)\nusing this:\n  a \\<in> in_arcs G y\n  out_arcs G u = {}\n  in_arcs G u = edge_rev M ` out_arcs G u\n\ngoal (1 subgoal):\n 1. y \\<noteq> u", "by auto"], ["proof (state)\nthis:\n  y \\<noteq> u\n\ngoal (2 subgoals):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n 2. \\<And>x y.\n       \\<lbrakk>x \\<rightarrow>\\<^bsub>G\\<^esub> y;\n        y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w;\n        u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n        y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w;\n        u \\<noteq> x \\<or> u \\<noteq> w\\<rbrakk>\n       \\<Longrightarrow> x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "with step"], ["proof (chain)\npicking this:\n  x \\<rightarrow>\\<^bsub>G\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n  u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n  y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n  u \\<noteq> x \\<or> u \\<noteq> w\n  y \\<noteq> u", "show ?case"], ["proof (prove)\nusing this:\n  x \\<rightarrow>\\<^bsub>G\\<^esub> y\n  y \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n  u \\<noteq> y \\<or> u \\<noteq> w \\<Longrightarrow>\n  y \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n  u \\<noteq> x \\<or> u \\<noteq> w\n  y \\<noteq> u\n\ngoal (1 subgoal):\n 1. x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "by (auto simp: adj_dv intro: H.adj_reachable_trans)"], ["proof (state)\nthis:\n  x \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w\n\ngoal (1 subgoal):\n 1. \\<lbrakk>w \\<in> verts G; u \\<noteq> w \\<or> u \\<noteq> w\\<rbrakk>\n    \\<Longrightarrow> w \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w", "qed (auto simp: verts_del_vert)"], ["", "lemma G_reach_conv: \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w \\<or> (v = u \\<and> w = u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w) =\n    (v \\<rightarrow>\\<^sup>*\\<^bsub>del_vert u\\<^esub> w \\<or>\n     v = u \\<and> w = u)", "by (auto dest: reachable_del_vertI reachable_del_vertD intro: u_in)"], ["", "lemma sccs_verts_dv: \"H.sccs_verts = sccs_verts - {{u}}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.sccs_verts = sccs_verts - {{u}}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.sccs_verts = sccs_verts - {{u}}", "have *:\"\\<And>S x. S \\<in> sccs_verts \\<Longrightarrow> S \\<notin> H.sccs_verts  \\<Longrightarrow> x \\<in> S \\<Longrightarrow> x = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x.\n       \\<lbrakk>S \\<in> sccs_verts; S \\<notin> H.sccs_verts;\n        x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x = u", "by (simp add: H.in_sccs_verts_conv_reachable in_sccs_verts_conv_reachable G_reach_conv)\n        (meson H.reachable_trans)"], ["proof (state)\nthis:\n  \\<lbrakk>?S4 \\<in> sccs_verts; ?S4 \\<notin> H.sccs_verts;\n   ?x4 \\<in> ?S4\\<rbrakk>\n  \\<Longrightarrow> ?x4 = u\n\ngoal (1 subgoal):\n 1. H.sccs_verts = sccs_verts - {{u}}", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.sccs_verts = sccs_verts - {{u}}", "by (auto dest: *) (auto simp: H.in_sccs_verts_conv_reachable in_sccs_verts_conv_reachable\n        G_reach_conv H.reachable_refl_iff verts_del_vert)"], ["proof (state)\nthis:\n  H.sccs_verts = sccs_verts - {{u}}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_sccs_verts_dv: \"card sccs_verts = Suc (card H.sccs_verts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card sccs_verts = Suc (card H.sccs_verts)", "unfolding sccs_verts_dv"], ["proof (prove)\ngoal (1 subgoal):\n 1. card sccs_verts = Suc (card (sccs_verts - {{u}}))", "by (rule card.remove) (auto simp: isolated_verts_in_sccs u_in_isolated_verts finite_sccs_verts)"], ["", "lemma card_sccs_dv: \"card sccs = Suc (card H.sccs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card sccs = Suc (card H.sccs)", "using card_sccs_verts_dv"], ["proof (prove)\nusing this:\n  card sccs_verts = Suc (card H.sccs_verts)\n\ngoal (1 subgoal):\n 1. card sccs = Suc (card H.sccs)", "by (simp add: card_sccs_verts H.card_sccs_verts)"], ["", "lemma euler_genus_eq: \"H.euler_genus = euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = euler_genus", "by (auto simp: pre_digraph_map.euler_genus_def card_sccs_dv card_isolated_verts_dv euler_char_dv)"], ["", "end"], ["", "subsection \\<open>Deleting an arc pair\\<close>"], ["", "locale bidel_arc = G: digraph_map +\n  fixes a\n  assumes a_in: \"a \\<in> arcs G\"\n\nbegin"], ["", "abbreviation \"a' \\<equiv> edge_rev M a\""], ["", "definition H :: \"('a,'b) pre_digraph\" where\n    \"H \\<equiv> pre_digraph.del_arc (pre_digraph.del_arc G a') a\""], ["", "definition HM :: \"'b pre_map\" where\n    \"HM = \n      \\<lparr> edge_rev = perm_restrict (edge_rev M) (arcs G - {a, a'})\n      , edge_succ = perm_rem a (perm_rem a' (edge_succ M))\n      \\<rparr>\""], ["", "lemma\n    verts_H: \"verts H = verts G\" and\n    arcs_H:  \"arcs H = arcs G - {a, a'}\" and\n    tail_H: \"tail H = tail G\" and\n    head_H: \"head H = head G\" and\n    ends_H: \"arc_to_ends H = arc_to_ends G\"and\n    arcs_in: \"{a,a'} \\<subseteq> arcs G\" and\n    ends_in: \"{tail G a, head G a} \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (verts H = verts G &&&\n     arcs H = arcs G - {a, a'} &&& tail H = tail G) &&&\n    (head H = head G &&& arc_to_ends H = arc_to_ends G) &&&\n    {a, a'} \\<subseteq> arcs G &&& {tail G a, head G a} \\<subseteq> verts G", "by (auto simp: H_def pre_digraph.del_arc_simps a_in arc_to_ends_def)"], ["", "lemma cyclic_on_edge_succ:\n    assumes \"x \\<in> verts H\" \"out_arcs H x \\<noteq> {}\"\n    shows \"cyclic_on (edge_succ HM) (out_arcs H x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H x)", "have oa_H: \"out_arcs H x = (out_arcs G x - {a'}) - {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs H x = out_arcs G x - {a'} - {a}", "by (auto simp: arcs_H tail_H)"], ["proof (state)\nthis:\n  out_arcs H x = out_arcs G x - {a'} - {a}\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H x)", "have \"cyclic_on (perm_rem a (perm_rem a' (edge_succ M))) (out_arcs G x - {a'} - {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (perm_rem a (perm_rem a' (edge_succ M)))\n     (out_arcs G x - {a'} - {a})", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> verts H\n  out_arcs H x \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cyclic_on (perm_rem a (perm_rem a' (edge_succ M)))\n     (out_arcs G x - {a'} - {a})", "by (intro cyclic_on_perm_rem G.edge_succ_cyclic) (auto simp: oa_H G.bij_edge_succ G.edge_succ_cyclic)"], ["proof (state)\nthis:\n  cyclic_on (perm_rem a (perm_rem a' (edge_succ M)))\n   (out_arcs G x - {a'} - {a})\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H x)", "then"], ["proof (chain)\npicking this:\n  cyclic_on (perm_rem a (perm_rem a' (edge_succ M)))\n   (out_arcs G x - {a'} - {a})", "show ?thesis"], ["proof (prove)\nusing this:\n  cyclic_on (perm_rem a (perm_rem a' (edge_succ M)))\n   (out_arcs G x - {a'} - {a})\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H x)", "by (simp add: HM_def oa_H)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ HM) (out_arcs H x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma digraph_map: \"digraph_map H HM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map H HM", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map H HM", "interpret fin_digraph H"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph H", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (pre_digraph.del_arc (G.del_arc a') a)", "by (rule fin_digraph.fin_digraph_del_arc) (rule G.fin_digraph_del_arc)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map H HM", "interpret bidirected_digraph H \"edge_rev HM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph H (edge_rev HM)", "unfolding H_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (pre_digraph.del_arc (G.del_arc a') a) (edge_rev HM)", "using G.bidirected_digraph_del_arc[of a]"], ["proof (prove)\nusing this:\n  bidirected_digraph (pre_digraph.del_arc (G.del_arc a') a)\n   (perm_restrict (edge_rev M) (arcs G - {a, a'}))\n\ngoal (1 subgoal):\n 1. bidirected_digraph (pre_digraph.del_arc (G.del_arc a') a) (edge_rev HM)", "by (auto simp: HM_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map H HM", "have *: \"insert a' (insert a (arcs H)) = arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert a' (insert a (arcs H)) = arcs G", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. insert a' (insert a (arcs H)) = arcs G", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  insert a' (insert a (arcs H)) = arcs G\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "have \"edge_succ HM permutes arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ HM permutes arcs H", "unfolding HM_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ\n     \\<lparr>edge_rev = perm_restrict (edge_rev M) (arcs G - {a, a'}),\n        edge_succ = perm_rem a (perm_rem a' (edge_succ M))\\<rparr> permutes\n    arcs H", "by (auto simp: * intro!: perm_rem_permutes G.edge_succ_permutes)"], ["proof (state)\nthis:\n  edge_succ HM permutes arcs H\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "moreover"], ["proof (state)\nthis:\n  edge_succ HM permutes arcs H\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "{"], ["proof (state)\nthis:\n  edge_succ HM permutes arcs H\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map H HM", "assume \"v \\<in> verts H\" \"out_arcs H v \\<noteq> {}\""], ["proof (state)\nthis:\n  v \\<in> verts H\n  out_arcs H v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts H\n  out_arcs H v \\<noteq> {}", "have \"cyclic_on (edge_succ HM) (out_arcs H v)\""], ["proof (prove)\nusing this:\n  v \\<in> verts H\n  out_arcs H v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ HM) (out_arcs H v)", "by (rule cyclic_on_edge_succ)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ HM) (out_arcs H v)\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v6 \\<in> verts H; out_arcs H ?v6 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ HM) (out_arcs H ?v6)\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "ultimately"], ["proof (chain)\npicking this:\n  edge_succ HM permutes arcs H\n  \\<lbrakk>?v6 \\<in> verts H; out_arcs H ?v6 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ HM) (out_arcs H ?v6)", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ HM permutes arcs H\n  \\<lbrakk>?v6 \\<in> verts H; out_arcs H ?v6 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ HM) (out_arcs H ?v6)\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "by unfold_locales"], ["proof (state)\nthis:\n  digraph_map H HM\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rev_H: \"bidel_arc.H G M a' = H\" (is ?t1)\n    and rev_HM: \"bidel_arc.HM G M a' = HM\" (is ?t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc.H G M a' = H &&& bidel_arc.HM G M a' = HM", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. bidel_arc.H G M a' = H\n 2. bidel_arc.HM G M a' = HM", "interpret rev: bidel_arc G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc G M a'", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. bidel_arc G M a'", "by unfold_locales simp"], ["proof (state)\ngoal (2 subgoals):\n 1. rev.H = H\n 2. rev.HM = HM", "show ?t1"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev.H = H", "by (rule pre_digraph.equality) (auto simp: rev.verts_H verts_H rev.arcs_H arcs_H\n        rev.tail_H tail_H rev.head_H head_H)"], ["proof (state)\nthis:\n  rev.H = H\n\ngoal (1 subgoal):\n 1. rev.HM = HM", "show ?t2"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev.HM = HM", "using G.edge_succ_permutes"], ["proof (prove)\nusing this:\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. rev.HM = HM", "by (intro pre_map.equality) (auto simp: HM_def rev.HM_def insert_commute\n        perm_rem_commutes permutes_conv_has_dom)"], ["proof (state)\nthis:\n  rev.HM = HM\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "sublocale bidel_arc \\<subseteq> H: digraph_map H HM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map H HM", "by (rule digraph_map)"], ["", "context bidel_arc begin"], ["", "lemma a_neq_a': \"a \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> a'", "by (metis G.arev_neq a_in)"], ["", "lemma\n    arcs_G: \"arcs G = insert a (insert a' (arcs H))\" and\n    arcs_not_in: \"{a,a'} \\<inter> arcs H = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs G = insert a (insert a' (arcs H)) &&& {a, a'} \\<inter> arcs H = {}", "using arcs_in"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. arcs G = insert a (insert a' (arcs H)) &&& {a, a'} \\<inter> arcs H = {}", "by (auto simp: arcs_H)"], ["", "lemma card_arcs_da: \"card (arcs G) = 2 + card (arcs H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (arcs G) = 2 + card (arcs H)", "using arcs_G arcs_not_in a_neq_a'"], ["proof (prove)\nusing this:\n  arcs G = insert a (insert a' (arcs H))\n  {a, a'} \\<inter> arcs H = {}\n  a \\<noteq> a'\n\ngoal (1 subgoal):\n 1. card (arcs G) = 2 + card (arcs H)", "by (auto simp: card_insert_if)"], ["", "lemma cas_da: \"H.cas = G.cas\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.cas = G.cas", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.cas = G.cas", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. H.cas = G.cas", "fix u p v"], ["proof (state)\ngoal (1 subgoal):\n 1. H.cas = G.cas", "have \"H.cas u p v = G.cas u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.cas u p v = G.cas u p v", "by (induct p arbitrary: u) (simp_all add: tail_H head_H)"], ["proof (state)\nthis:\n  H.cas u p v = G.cas u p v\n\ngoal (1 subgoal):\n 1. H.cas = G.cas", "}"], ["proof (state)\nthis:\n  H.cas ?u6 ?p6 ?v6 = G.cas ?u6 ?p6 ?v6\n\ngoal (1 subgoal):\n 1. H.cas = G.cas", "then"], ["proof (chain)\npicking this:\n  H.cas ?u6 ?p6 ?v6 = G.cas ?u6 ?p6 ?v6", "show ?thesis"], ["proof (prove)\nusing this:\n  H.cas ?u6 ?p6 ?v6 = G.cas ?u6 ?p6 ?v6\n\ngoal (1 subgoal):\n 1. H.cas = G.cas", "by (simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  H.cas = G.cas\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_daD:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w", "apply (rule G.reachable_del_arcD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>G.del_arc ?u\\<^esub> w", "apply (rule wf_digraph.reachable_del_arcD)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf_digraph (G.del_arc ?u)\n 2. v \\<rightarrow>\\<^sup>*\\<^bsub>pre_digraph.del_arc (G.del_arc ?u) ?u2\\<^esub> w", "apply (rule G.wf_digraph_del_arc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>pre_digraph.del_arc (G.del_arc ?u) ?u2\\<^esub> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>pre_digraph.del_arc (G.del_arc ?u) ?u2\\<^esub> w", "unfolding H_def"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>pre_digraph.del_arc (G.del_arc a') a\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>pre_digraph.del_arc (G.del_arc ?u) ?u2\\<^esub> w", "by assumption"], ["", "lemma not_G_isolated_a: \"{tail G a, head G a} \\<inter> G.isolated_verts = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {tail G a, head G a} \\<inter> G.isolated_verts = {}", "using a_in G.in_arcs_eq[of \"head G a\"]"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  in_arcs G (head G a) = edge_rev M ` out_arcs G (head G a)\n\ngoal (1 subgoal):\n 1. {tail G a, head G a} \\<inter> G.isolated_verts = {}", "by (auto simp: G.isolated_verts_def)"], ["", "lemma isolated_other_da:\n    assumes \"u \\<notin> {tail G a, head G a}\" shows \"u \\<in> H.isolated_verts \\<longleftrightarrow> u \\<in> G.isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (u \\<in> H.isolated_verts) = (u \\<in> G.isolated_verts)", "using assms"], ["proof (prove)\nusing this:\n  u \\<notin> {tail G a, head G a}\n\ngoal (1 subgoal):\n 1. (u \\<in> H.isolated_verts) = (u \\<in> G.isolated_verts)", "by (auto simp: pre_digraph.isolated_verts_def verts_H arcs_H tail_H out_arcs_def)"], ["", "lemma isolated_da_pre: \"H.isolated_verts = G.isolated_verts \\<union>\n      (if tail G a \\<in> H.isolated_verts then {tail G a} else {}) \\<union>\n      (if head G a \\<in> H.isolated_verts then {head G a} else {})\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.isolated_verts =\n    G.isolated_verts \\<union>\n    (if tail G a \\<in> H.isolated_verts then {tail G a} else {}) \\<union>\n    (if head G a \\<in> H.isolated_verts then {head G a} else {})", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.isolated_verts \\<Longrightarrow>\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a} else {})\n 2. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.isolated_verts \\<Longrightarrow>\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a} else {})\n 2. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "assume \"x \\<in> ?L\""], ["proof (state)\nthis:\n  x \\<in> H.isolated_verts\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.isolated_verts \\<Longrightarrow>\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a} else {})\n 2. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "then"], ["proof (chain)\npicking this:\n  x \\<in> H.isolated_verts", "show \"x \\<in> ?R\""], ["proof (prove)\nusing this:\n  x \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. x \\<in> G.isolated_verts \\<union>\n            (if tail G a \\<in> H.isolated_verts then {tail G a}\n             else {}) \\<union>\n            (if head G a \\<in> H.isolated_verts then {head G a} else {})", "by (cases \"x \\<in> {tail G a, head G a}\") (auto simp:isolated_other_da)"], ["proof (state)\nthis:\n  x \\<in> G.isolated_verts \\<union>\n          (if tail G a \\<in> H.isolated_verts then {tail G a}\n           else {}) \\<union>\n          (if head G a \\<in> H.isolated_verts then {head G a} else {})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> G.isolated_verts \\<union>\n          (if tail G a \\<in> H.isolated_verts then {tail G a}\n           else {}) \\<union>\n          (if head G a \\<in> H.isolated_verts then {head G a} else {})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.isolated_verts \\<union>\n               (if tail G a \\<in> H.isolated_verts then {tail G a}\n                else {}) \\<union>\n               (if head G a \\<in> H.isolated_verts then {head G a}\n                else {}) \\<Longrightarrow>\n       x \\<in> H.isolated_verts", "then"], ["proof (chain)\npicking this:\n  x \\<in> G.isolated_verts \\<union>\n          (if tail G a \\<in> H.isolated_verts then {tail G a}\n           else {}) \\<union>\n          (if head G a \\<in> H.isolated_verts then {head G a} else {})", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> G.isolated_verts \\<union>\n          (if tail G a \\<in> H.isolated_verts then {tail G a}\n           else {}) \\<union>\n          (if head G a \\<in> H.isolated_verts then {head G a} else {})\n\ngoal (1 subgoal):\n 1. x \\<in> H.isolated_verts", "using not_G_isolated_a"], ["proof (prove)\nusing this:\n  x \\<in> G.isolated_verts \\<union>\n          (if tail G a \\<in> H.isolated_verts then {tail G a}\n           else {}) \\<union>\n          (if head G a \\<in> H.isolated_verts then {head G a} else {})\n  {tail G a, head G a} \\<inter> G.isolated_verts = {}\n\ngoal (1 subgoal):\n 1. x \\<in> H.isolated_verts", "by (cases \"x \\<in> {tail G a, head G a}\") (auto simp:isolated_other_da split: if_splits)"], ["proof (state)\nthis:\n  x \\<in> H.isolated_verts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_isolated_verts_da0:\n    \"card H.isolated_verts = card G.isolated_verts + card ({tail G a, head G a} \\<inter> H.isolated_verts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.isolated_verts =\n    card G.isolated_verts +\n    card ({tail G a, head G a} \\<inter> H.isolated_verts)", "using not_G_isolated_a"], ["proof (prove)\nusing this:\n  {tail G a, head G a} \\<inter> G.isolated_verts = {}\n\ngoal (1 subgoal):\n 1. card H.isolated_verts =\n    card G.isolated_verts +\n    card ({tail G a, head G a} \\<inter> H.isolated_verts)", "by (subst isolated_da_pre) (auto simp: card_insert_if G.finite_isolated_verts)"], ["", "lemma segments_neq:\n    assumes \"segment G.face_cycle_succ a' a \\<noteq> {} \\<or> segment G.face_cycle_succ a a' \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a", "have bij_fcs: \"bij G.face_cycle_succ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij G.face_cycle_succ", "using G.face_cycle_succ_permutes"], ["proof (prove)\nusing this:\n  G.face_cycle_succ permutes arcs G\n\ngoal (1 subgoal):\n 1. bij G.face_cycle_succ", "by (auto simp: permutes_conv_has_dom)"], ["proof (state)\nthis:\n  bij G.face_cycle_succ\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a", "using segment_disj[OF a_neq_a' bij_fcs] assms"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a a' \\<inter> segment G.face_cycle_succ a' a =\n  {}\n  segment G.face_cycle_succ a' a \\<noteq> {} \\<or>\n  segment G.face_cycle_succ a a' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a", "by auto"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a a' \\<noteq> segment G.face_cycle_succ a' a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_fcs_eq_G_fcs:\n    assumes \"b \\<in> arcs G\" \"{b,G.face_cycle_succ b} \\<inter> {a,a'} = {}\" \n    shows \"H.face_cycle_succ b = G.face_cycle_succ b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_succ b = G.face_cycle_succ b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_succ b = G.face_cycle_succ b", "have \"edge_rev M b \\<notin> {a,a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev M b \\<notin> {a, a'}", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> arcs G\n  {b, G.face_cycle_succ b} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. edge_rev M b \\<notin> {a, a'}", "by auto (metis G.arev_arev)"], ["proof (state)\nthis:\n  edge_rev M b \\<notin> {a, a'}\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ b = G.face_cycle_succ b", "then"], ["proof (chain)\npicking this:\n  edge_rev M b \\<notin> {a, a'}", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_rev M b \\<notin> {a, a'}\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ b = G.face_cycle_succ b", "using assms"], ["proof (prove)\nusing this:\n  edge_rev M b \\<notin> {a, a'}\n  b \\<in> arcs G\n  {b, G.face_cycle_succ b} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ b = G.face_cycle_succ b", "unfolding G.face_cycle_succ_def H.face_cycle_succ_def"], ["proof (prove)\nusing this:\n  edge_rev M b \\<notin> {a, a'}\n  b \\<in> arcs G\n  {b, (edge_succ M \\<circ> edge_rev M) b} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. (edge_succ HM \\<circ> edge_rev HM) b =\n    (edge_succ M \\<circ> edge_rev M) b", "by (auto simp: HM_def perm_restrict_simps perm_rem_simps G.bij_edge_succ)"], ["proof (state)\nthis:\n  H.face_cycle_succ b = G.face_cycle_succ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma face_cycle_set_other_da:\n    assumes \"{a, a'} \\<inter> G.face_cycle_set b = {}\" \"b \\<in> arcs G\"\n    shows \"H.face_cycle_set b = G.face_cycle_set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "have \"\\<And>s. s \\<in> G.face_cycle_set b \\<Longrightarrow> b \\<in> arcs G \\<Longrightarrow> a \\<notin> G.face_cycle_set b \\<Longrightarrow> a' \\<notin> G.face_cycle_set b\n        \\<Longrightarrow> pre_digraph_map.face_cycle_succ HM s = G.face_cycle_succ s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>s \\<in> G.face_cycle_set b; b \\<in> arcs G;\n        a \\<notin> G.face_cycle_set b;\n        a' \\<notin> G.face_cycle_set b\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ s = G.face_cycle_succ s", "by (subst H_fcs_eq_G_fcs) (auto simp: G.in_face_cycle_setD G.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  \\<lbrakk>?s4 \\<in> G.face_cycle_set b; b \\<in> arcs G;\n   a \\<notin> G.face_cycle_set b; a' \\<notin> G.face_cycle_set b\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?s4 = G.face_cycle_succ ?s4\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?s4 \\<in> G.face_cycle_set b; b \\<in> arcs G;\n   a \\<notin> G.face_cycle_set b; a' \\<notin> G.face_cycle_set b\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?s4 = G.face_cycle_succ ?s4", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s4 \\<in> G.face_cycle_set b; b \\<in> arcs G;\n   a \\<notin> G.face_cycle_set b; a' \\<notin> G.face_cycle_set b\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?s4 = G.face_cycle_succ ?s4\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s4 \\<in> G.face_cycle_set b; b \\<in> arcs G;\n   a \\<notin> G.face_cycle_set b; a' \\<notin> G.face_cycle_set b\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?s4 = G.face_cycle_succ ?s4\n  {a, a'} \\<inter> G.face_cycle_set b = {}\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "unfolding pre_digraph_map.face_cycle_set_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s4 \\<in> orbit G.face_cycle_succ b; b \\<in> arcs G;\n   a \\<notin> orbit G.face_cycle_succ b;\n   a' \\<notin> orbit G.face_cycle_succ b\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?s4 = G.face_cycle_succ ?s4\n  {a, a'} \\<inter> orbit G.face_cycle_succ b = {}\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. orbit H.face_cycle_succ b = orbit G.face_cycle_succ b", "by (intro orbit_cong) (auto simp add: pre_digraph_map.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  H.face_cycle_set b = G.face_cycle_set b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_face_cycle_set_other:\n    assumes \"S \\<in> G.face_cycle_sets\" \"{a, a'} \\<inter> S = {}\"\n    shows \"S \\<in> H.face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "from assms"], ["proof (chain)\npicking this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}", "obtain b where \"S = G.face_cycle_set b\" \"b \\<in> arcs G\""], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>S = G.face_cycle_set b; b \\<in> arcs G\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.face_cycle_sets_def)"], ["proof (state)\nthis:\n  S = G.face_cycle_set b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "with assms"], ["proof (chain)\npicking this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n  S = G.face_cycle_set b\n  b \\<in> arcs G", "have \"S = H.face_cycle_set b\""], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n  S = G.face_cycle_set b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. S = H.face_cycle_set b", "by (simp add: face_cycle_set_other_da)"], ["proof (state)\nthis:\n  S = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "moreover"], ["proof (state)\nthis:\n  S = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "with assms"], ["proof (chain)\npicking this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n  S = H.face_cycle_set b", "have \"b \\<in> arcs H\""], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n  S = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. b \\<in> arcs H", "using \\<open>b \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets\n  {a, a'} \\<inter> S = {}\n  S = H.face_cycle_set b\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. b \\<in> arcs H", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  b \\<in> arcs H\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "ultimately"], ["proof (chain)\npicking this:\n  S = H.face_cycle_set b\n  b \\<in> arcs H", "show ?thesis"], ["proof (prove)\nusing this:\n  S = H.face_cycle_set b\n  b \\<in> arcs H\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "by (auto simp: H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_fcs_in_G_fcs:\n    assumes \"b \\<in> arcs H - (G.face_cycle_set a \\<union> G.face_cycle_set a')\"\n    shows \"H.face_cycle_set b \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "have \"H.face_cycle_set b = G.face_cycle_set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> arcs H - (G.face_cycle_set a \\<union> G.face_cycle_set a')\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b = G.face_cycle_set b", "by (intro face_cycle_set_other_da) (auto simp: arcs_H G.face_cycle_eq)"], ["proof (state)\nthis:\n  H.face_cycle_set b = G.face_cycle_set b\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "moreover"], ["proof (state)\nthis:\n  H.face_cycle_set b = G.face_cycle_set b\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "have \"G.face_cycle_set b \\<notin> {G.face_cycle_set a, G.face_cycle_set a'}\" \"b \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set b\n    \\<notin> {G.face_cycle_set a, G.face_cycle_set a'} &&&\n    b \\<in> arcs G", "using G.face_cycle_eq assms"], ["proof (prove)\nusing this:\n  ?b \\<in> G.face_cycle_set ?a \\<Longrightarrow>\n  G.face_cycle_set ?b = G.face_cycle_set ?a\n  b \\<in> arcs H - (G.face_cycle_set a \\<union> G.face_cycle_set a')\n\ngoal (1 subgoal):\n 1. G.face_cycle_set b\n    \\<notin> {G.face_cycle_set a, G.face_cycle_set a'} &&&\n    b \\<in> arcs G", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  G.face_cycle_set b \\<notin> {G.face_cycle_set a, G.face_cycle_set a'}\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "ultimately"], ["proof (chain)\npicking this:\n  H.face_cycle_set b = G.face_cycle_set b\n  G.face_cycle_set b \\<notin> {G.face_cycle_set a, G.face_cycle_set a'}\n  b \\<in> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  H.face_cycle_set b = G.face_cycle_set b\n  G.face_cycle_set b \\<notin> {G.face_cycle_set a, G.face_cycle_set a'}\n  b \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b\n    \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "by (auto simp: G.face_cycle_sets_def)"], ["proof (state)\nthis:\n  H.face_cycle_set b\n  \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma face_cycle_sets_da0:\n    \"H.face_cycle_sets = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n      \\<union> H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'})\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_sets =\n    G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_sets \\<Longrightarrow>\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n 2. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "fix S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_sets \\<Longrightarrow>\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n 2. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "assume \"S \\<in> ?L\""], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_sets\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_sets \\<Longrightarrow>\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n 2. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  S \\<in> H.face_cycle_sets", "obtain b where \"S = H.face_cycle_set b\" \"b \\<in> arcs H\""], ["proof (prove)\nusing this:\n  S \\<in> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>S = H.face_cycle_set b; b \\<in> arcs H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  S = H.face_cycle_set b\n  b \\<in> arcs H\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_sets \\<Longrightarrow>\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n 2. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  S = H.face_cycle_set b\n  b \\<in> arcs H", "show \"S \\<in> ?R\""], ["proof (prove)\nusing this:\n  S = H.face_cycle_set b\n  b \\<in> arcs H\n\ngoal (1 subgoal):\n 1. S \\<in> G.face_cycle_sets -\n            {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n            H.face_cycle_set `\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "using arcs_not_in H_fcs_in_G_fcs"], ["proof (prove)\nusing this:\n  S = H.face_cycle_set b\n  b \\<in> arcs H\n  {a, a'} \\<inter> arcs H = {}\n  ?b \\<in> arcs H -\n           (G.face_cycle_set a \\<union>\n            G.face_cycle_set a') \\<Longrightarrow>\n  H.face_cycle_set ?b\n  \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal (1 subgoal):\n 1. S \\<in> G.face_cycle_sets -\n            {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n            H.face_cycle_set `\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "by (cases \"b \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'\") auto"], ["proof (state)\nthis:\n  S \\<in> G.face_cycle_sets -\n          {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n          H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "assume \"S \\<in> ?R\""], ["proof (state)\nthis:\n  S \\<in> G.face_cycle_sets -\n          {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n          H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n               H.face_cycle_set `\n               (G.face_cycle_set a \\<union> G.face_cycle_set a' -\n                {a, a'}) \\<Longrightarrow>\n       x \\<in> H.face_cycle_sets", "show \"S \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "proof (cases \"S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<in> G.face_cycle_sets -\n            {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets\n 2. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "case True"], ["proof (state)\nthis:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal (2 subgoals):\n 1. S \\<in> G.face_cycle_sets -\n            {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets\n 2. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "have \"S \\<inter> {a,a'} = {}\""], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal (1 subgoal):\n 1. S \\<inter> {a, a'} = {}", "using G.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  G.face_cycle_set ?a = G.face_cycle_set ?b \\<or>\n  G.face_cycle_set ?a \\<inter> G.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. S \\<inter> {a, a'} = {}", "by (auto simp: G.face_cycle_sets_def)"], ["proof (state)\nthis:\n  S \\<inter> {a, a'} = {}\n\ngoal (2 subgoals):\n 1. S \\<in> G.face_cycle_sets -\n            {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets\n 2. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "with True"], ["proof (chain)\npicking this:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  S \\<inter> {a, a'} = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  S \\<in> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  S \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "by (intro in_face_cycle_set_other) auto"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "case False"], ["proof (state)\nthis:\n  S \\<notin> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  S \\<notin> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}", "have \"S \\<in> H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'})\""], ["proof (prove)\nusing this:\n  S \\<notin> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_set `\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "using \\<open>S \\<in> ?R\\<close>"], ["proof (prove)\nusing this:\n  S \\<notin> G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  S \\<in> G.face_cycle_sets -\n          {G.face_cycle_set a, G.face_cycle_set a'} \\<union>\n          H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_set `\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "by blast"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "moreover"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "have \"(G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'} \\<subseteq> arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n    \\<subseteq> arcs H", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n    \\<subseteq> arcs H", "by (auto simp: arcs_H dest: G.in_face_cycle_setD)"], ["proof (state)\nthis:\n  G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. S \\<notin> G.face_cycle_sets -\n               {G.face_cycle_set a, G.face_cycle_set a'} \\<Longrightarrow>\n    S \\<in> H.face_cycle_sets", "ultimately"], ["proof (chain)\npicking this:\n  S \\<in> H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  \\<subseteq> arcs H", "show ?thesis"], ["proof (prove)\nusing this:\n  S \\<in> H.face_cycle_set `\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_sets", "by (auto simp: H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_fcs_aa'_le: \"card {G.face_cycle_set a, G.face_cycle_set a'} \\<le> card G.face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {G.face_cycle_set a, G.face_cycle_set a'}\n    \\<le> card G.face_cycle_sets", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. card {G.face_cycle_set a, G.face_cycle_set a'}\n    \\<le> card G.face_cycle_sets", "by (intro card_mono) (auto simp: G.face_cycle_sets_def)"], ["", "lemma card_face_cycle_sets_da0:\n    \"card H.face_cycle_sets = card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'}\n      + card (H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a,a'}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     (H.face_cycle_set `\n      (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     (H.face_cycle_set `\n      (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))", "have face_cycle_sets_inter:\n      \"(G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter> H.face_cycle_set ` ((G.face_cycle_set a \\<union> G.face_cycle_set a') - {a, a'}) = {}\" (is \"?L \\<inter> ?R = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "define L R P\n        where \"L = ?L\" and \"R = ?R\" and \"P x \\<longleftrightarrow> x \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {}\"\n        for x"], ["proof (state)\nthis:\n  L = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  R =\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  P ?x =\n  (?x \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {})\n\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  L = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  R =\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  P ?x =\n  (?x \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {})", "have \"\\<And>x. x \\<in> L \\<Longrightarrow> P x\" \"\\<And>x. x \\<in> R \\<Longrightarrow> \\<not>P x\""], ["proof (prove)\nusing this:\n  L = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  R =\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  P ?x =\n  (?x \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {})\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> L \\<Longrightarrow> P x) &&&\n    (\\<And>x. x \\<in> R \\<Longrightarrow> \\<not> P x)", "using G.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  L = G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}\n  R =\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  P ?x =\n  (?x \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {})\n  G.face_cycle_set ?a = G.face_cycle_set ?b \\<or>\n  G.face_cycle_set ?a \\<inter> G.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> L \\<Longrightarrow> P x) &&&\n    (\\<And>x. x \\<in> R \\<Longrightarrow> \\<not> P x)", "by (auto simp: G.face_cycle_sets_def)"], ["proof (state)\nthis:\n  ?x4 \\<in> L \\<Longrightarrow> P ?x4\n  ?x4 \\<in> R \\<Longrightarrow> \\<not> P ?x4\n\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  ?x4 \\<in> L \\<Longrightarrow> P ?x4\n  ?x4 \\<in> R \\<Longrightarrow> \\<not> P ?x4", "have \"L \\<inter> R = {}\""], ["proof (prove)\nusing this:\n  ?x4 \\<in> L \\<Longrightarrow> P ?x4\n  ?x4 \\<in> R \\<Longrightarrow> \\<not> P ?x4\n\ngoal (1 subgoal):\n 1. L \\<inter> R = {}", "by blast"], ["proof (state)\nthis:\n  L \\<inter> R = {}\n\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "then"], ["proof (chain)\npicking this:\n  L \\<inter> R = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  L \\<inter> R = {}\n\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "unfolding L_def R_def"], ["proof (prove)\nusing this:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}\n\ngoal (1 subgoal):\n 1. (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n    H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    {}", "."], ["proof (state)\nthis:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     (H.face_cycle_set `\n      (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))", "then"], ["proof (chain)\npicking this:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}", "show ?thesis"], ["proof (prove)\nusing this:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     (H.face_cycle_set `\n      (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))", "using arcs_G"], ["proof (prove)\nusing this:\n  (G.face_cycle_sets - {G.face_cycle_set a, G.face_cycle_set a'}) \\<inter>\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  {}\n  arcs G = insert a (insert a' (arcs H))\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     (H.face_cycle_set `\n      (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))", "by (simp add: card_Diff_subset[symmetric] card_Un_disjoint[symmetric]\n        G.in_face_cycle_sets face_cycle_sets_da0)"], ["proof (state)\nthis:\n  card H.face_cycle_sets =\n  card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'} +\n  card\n   (H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bidel_arc_same_face = bidel_arc +\n  assumes same_face: \"G.face_cycle_set a' = G.face_cycle_set a\"\nbegin"], ["", "lemma a_in_o: \"a \\<in> orbit G.face_cycle_succ a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> orbit G.face_cycle_succ a'", "unfolding G.face_cycle_set_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> G.face_cycle_set a'", "by (simp add: same_face)"], ["", "lemma segment_a'_a_in: \"segment G.face_cycle_succ a' a \\<subseteq> arcs H\" (is \"?seg \\<subseteq> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "have \"?seg \\<subseteq> G.face_cycle_set a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'", "by (auto simp: G.face_cycle_set_def segmentD_orbit)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "moreover"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "have \"G.face_cycle_set a' \\<subseteq> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a' \\<subseteq> arcs G", "by (auto simp: G.face_cycle_set_altdef a_in)"], ["proof (state)\nthis:\n  G.face_cycle_set a' \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "ultimately"], ["proof (chain)\npicking this:\n  segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'\n  G.face_cycle_set a' \\<subseteq> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'\n  G.face_cycle_set a' \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "using a_in_o"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a \\<subseteq> G.face_cycle_set a'\n  G.face_cycle_set a' \\<subseteq> arcs G\n  a \\<in> orbit G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<subseteq> arcs H", "by (auto simp: arcs_H a_in not_in_segment1 not_in_segment2)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a' a \\<subseteq> arcs H\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma segment_a'_a_neD:\n    assumes \"segment G.face_cycle_succ a' a \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets\" (is \"?seg \\<in> _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "let ?b = \"G.face_cycle_succ a'\""], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "have fcs_a_neq_a': \"G.face_cycle_succ a' \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<noteq> a", "by (metis assms segment1_empty)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "have in_aG: \"\\<And>x. x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow> x \\<in> arcs G - {a,a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> arcs G - {a, a'}", "using not_in_segment1 not_in_segment2 segment_a'_a_in"], ["proof (prove)\nusing this:\n  ?y \\<in> orbit ?f ?x \\<Longrightarrow> ?x \\<notin> segment ?f ?x ?y\n  ?y \\<notin> segment ?f ?x ?y\n  segment G.face_cycle_succ a' a \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> arcs G - {a, a'}", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  ?x4 \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n  ?x4 \\<in> arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "{"], ["proof (state)\nthis:\n  ?x4 \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n  ?x4 \\<in> arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "assume A: \"x \\<in> segment G.face_cycle_succ a' a\" and B: \"G.face_cycle_succ x \\<noteq> a\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x \\<noteq> a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "from A"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a", "have \"G.face_cycle_succ x \\<noteq> a'\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<noteq> a'", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ (G.face_cycle_succ a') \\<noteq> a'\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        G.face_cycle_succ x \\<noteq> a';\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ (G.face_cycle_succ x) \\<noteq> a'", "case base"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ (G.face_cycle_succ a') \\<noteq> a'\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        G.face_cycle_succ x \\<noteq> a';\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ (G.face_cycle_succ x) \\<noteq> a'", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a' \\<noteq> a", "show ?case"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ (G.face_cycle_succ a') \\<noteq> a'", "by (metis a_neq_a' G.face_cycle_set_self not_in_segment1 G.face_cycle_set_def same_face segment.intros)"], ["proof (state)\nthis:\n  G.face_cycle_succ (G.face_cycle_succ a') \\<noteq> a'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        G.face_cycle_succ x \\<noteq> a';\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ (G.face_cycle_succ x) \\<noteq> a'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        G.face_cycle_succ x \\<noteq> a';\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ (G.face_cycle_succ x) \\<noteq> a'", "case step"], ["proof (state)\nthis:\n  x_ \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x_ \\<noteq> a'\n  G.face_cycle_succ x_ \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        G.face_cycle_succ x \\<noteq> a';\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ (G.face_cycle_succ x) \\<noteq> a'", "then"], ["proof (chain)\npicking this:\n  x_ \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x_ \\<noteq> a'\n  G.face_cycle_succ x_ \\<noteq> a", "show ?case"], ["proof (prove)\nusing this:\n  x_ \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x_ \\<noteq> a'\n  G.face_cycle_succ x_ \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ (G.face_cycle_succ x_) \\<noteq> a'", "by (metis a_in_o a_neq_a' not_in_segment1 segment.step)"], ["proof (state)\nthis:\n  G.face_cycle_succ (G.face_cycle_succ x_) \\<noteq> a'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<noteq> a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "with A B"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x \\<noteq> a\n  G.face_cycle_succ x \\<noteq> a'", "have \"{x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x \\<noteq> a\n  G.face_cycle_succ x \\<noteq> a'\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "using not_in_segment1[OF a_in_o] not_in_segment2[of a G.face_cycle_succ a']"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x \\<noteq> a\n  G.face_cycle_succ x \\<noteq> a'\n  a' \\<notin> segment G.face_cycle_succ a' a\n  a \\<notin> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "by safe"], ["proof (state)\nthis:\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "with in_aG"], ["proof (chain)\npicking this:\n  ?x4 \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n  ?x4 \\<in> arcs G - {a, a'}\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "have \"H.face_cycle_succ x = G.face_cycle_succ x\""], ["proof (prove)\nusing this:\n  ?x4 \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n  ?x4 \\<in> arcs G - {a, a'}\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ x = G.face_cycle_succ x", "by (intro H_fcs_eq_G_fcs) (auto intro: A)"], ["proof (state)\nthis:\n  H.face_cycle_succ x = G.face_cycle_succ x\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x6 \\<in> segment G.face_cycle_succ a' a;\n   G.face_cycle_succ ?x6 \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?x6 = G.face_cycle_succ ?x6\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "note fcs_x_eq = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x6 \\<in> segment G.face_cycle_succ a' a;\n   G.face_cycle_succ ?x6 \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?x6 = G.face_cycle_succ ?x6\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?x6 \\<in> segment G.face_cycle_succ a' a;\n   G.face_cycle_succ ?x6 \\<noteq> a\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?x6 = G.face_cycle_succ ?x6\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "assume A: \"x \\<in> segment G.face_cycle_succ a' a\" and B: \"G.face_cycle_succ x = a\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ x = a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "have \"G.face_cycle_succ a \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a \\<noteq> a", "using B in_aG[OF A] G.bij_face_cycle_succ"], ["proof (prove)\nusing this:\n  G.face_cycle_succ x = a\n  x \\<in> arcs G - {a, a'}\n  bij G.face_cycle_succ\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a \\<noteq> a", "by (auto simp: bij_eq_iff)"], ["proof (state)\nthis:\n  G.face_cycle_succ a \\<noteq> a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a \\<noteq> a", "have \"edge_succ M a \\<noteq> edge_rev M a\""], ["proof (prove)\nusing this:\n  G.face_cycle_succ a \\<noteq> a\n\ngoal (1 subgoal):\n 1. edge_succ M a \\<noteq> a'", "by (metis a_in_o G.arev_arev comp_apply G.face_cycle_succ_def not_in_segment1 segment.base)"], ["proof (state)\nthis:\n  edge_succ M a \\<noteq> a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  edge_succ M a \\<noteq> a'", "have \"H.face_cycle_succ x = G.face_cycle_succ a'\""], ["proof (prove)\nusing this:\n  edge_succ M a \\<noteq> a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ x = G.face_cycle_succ a'", "using in_aG[OF A] B G.bij_edge_succ"], ["proof (prove)\nusing this:\n  edge_succ M a \\<noteq> a'\n  x \\<in> arcs G - {a, a'}\n  G.face_cycle_succ x = a\n  bij (edge_succ M)\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ x = G.face_cycle_succ a'", "unfolding H.face_cycle_succ_def G.face_cycle_succ_def"], ["proof (prove)\nusing this:\n  edge_succ M a \\<noteq> a'\n  x \\<in> arcs G - {a, a'}\n  (edge_succ M \\<circ> edge_rev M) x = a\n  bij (edge_succ M)\n\ngoal (1 subgoal):\n 1. (edge_succ HM \\<circ> edge_rev HM) x =\n    (edge_succ M \\<circ> edge_rev M) a'", "by (auto simp: HM_def perm_restrict_simps perm_rem_conv G.arev_eq_iff)"], ["proof (state)\nthis:\n  H.face_cycle_succ x = G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?x6 \\<in> segment G.face_cycle_succ a' a;\n   G.face_cycle_succ ?x6 = a\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?x6 = G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "note fcs_last_x_eq = this"], ["proof (state)\nthis:\n  \\<lbrakk>?x6 \\<in> segment G.face_cycle_succ a' a;\n   G.face_cycle_succ ?x6 = a\\<rbrakk>\n  \\<Longrightarrow> H.face_cycle_succ ?x6 = G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "have \"segment G.face_cycle_succ a' a = H.face_cycle_set ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a = H.face_cycle_set (G.face_cycle_succ a')", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n 2. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n 2. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "assume \"x \\<in> segment G.face_cycle_succ a' a\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n 2. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a", "show \"x \\<in> H.face_cycle_set ?b\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set (G.face_cycle_succ a')", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ a' \\<in> H.face_cycle_set (G.face_cycle_succ a')\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        x \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x\n                         \\<in> H.face_cycle_set (G.face_cycle_succ a')", "case base"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ a' \\<in> H.face_cycle_set (G.face_cycle_succ a')\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        x \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x\n                         \\<in> H.face_cycle_set (G.face_cycle_succ a')", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a' \\<noteq> a", "show ?case"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<in> H.face_cycle_set (G.face_cycle_succ a')", "by auto"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<in> H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        x \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x\n                         \\<in> H.face_cycle_set (G.face_cycle_succ a')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        x \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x\n                         \\<in> H.face_cycle_set (G.face_cycle_succ a')", "case (step x)"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  G.face_cycle_succ x \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a;\n        x \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x\n                         \\<in> H.face_cycle_set (G.face_cycle_succ a')", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  G.face_cycle_succ x \\<noteq> a", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  G.face_cycle_succ x \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set (G.face_cycle_succ a')", "by (subst fcs_x_eq[symmetric]) (auto simp: H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "assume A: \"x \\<in> H.face_cycle_set ?b\""], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set (G.face_cycle_succ a') \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')", "show \"x \\<in> segment G.face_cycle_succ a' a\""], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        y \\<in> segment G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ y\n                         \\<in> segment G.face_cycle_succ a' a", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        y \\<in> segment G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ y\n                         \\<in> segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<in> segment G.face_cycle_succ a' a", "by (intro segment.base fcs_a_neq_a')"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        y \\<in> segment G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ y\n                         \\<in> segment G.face_cycle_succ a' a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        y \\<in> segment G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ y\n                         \\<in> segment G.face_cycle_succ a' a", "case (step x)"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> H.face_cycle_set (G.face_cycle_succ a');\n        y \\<in> segment G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> H.face_cycle_succ y\n                         \\<in> segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  x \\<in> segment G.face_cycle_succ a' a", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ x \\<in> segment G.face_cycle_succ a' a", "using fcs_a_neq_a'"], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set (G.face_cycle_succ a')\n  x \\<in> segment G.face_cycle_succ a' a\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ x \\<in> segment G.face_cycle_succ a' a", "by (cases \"G.face_cycle_succ x = a\") (auto simp: fcs_last_x_eq fcs_x_eq intro: segment.intros)"], ["proof (state)\nthis:\n  H.face_cycle_succ x \\<in> segment G.face_cycle_succ a' a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a' a = H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "then"], ["proof (chain)\npicking this:\n  segment G.face_cycle_succ a' a = H.face_cycle_set (G.face_cycle_succ a')", "show ?thesis"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a = H.face_cycle_set (G.face_cycle_succ a')\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "using segment_a'_a_in"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a = H.face_cycle_set (G.face_cycle_succ a')\n  segment G.face_cycle_succ a' a \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets", "by (auto simp:  H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a' a \\<in> H.face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma segment_a_a'_neD:\n    assumes \"segment G.face_cycle_succ a a' \\<noteq> {}\"\n    shows \"segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets", "interpret rev: bidel_arc_same_face G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_same_face G M a'", "using a_in same_face"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  G.face_cycle_set a' = G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. bidel_arc_same_face G M a'", "by unfold_locales simp_all"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets", "from assms"], ["proof (chain)\npicking this:\n  segment G.face_cycle_succ a a' \\<noteq> {}", "show ?thesis"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a a' \\<noteq> {}\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets", "using rev.segment_a'_a_neD"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a a' \\<noteq> {}\n  segment G.face_cycle_succ rev.a' a' \\<noteq> {} \\<Longrightarrow>\n  segment G.face_cycle_succ rev.a' a' \\<in> rev.H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets", "by (simp add: rev_H rev_HM)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a a' \\<in> H.face_cycle_sets\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_fcs_full:\n    assumes \"SS \\<subseteq> H.face_cycle_sets\" shows \"H.face_cycle_set ` (\\<Union>SS) = SS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "assume \"x \\<in> \\<Union>SS\""], ["proof (state)\nthis:\n  x \\<in> \\<Union> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<Union> SS", "obtain S where \"S \\<in> SS\" \"x \\<in> S\" \"S \\<in> H.face_cycle_sets\""], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> SS\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>S \\<in> SS; x \\<in> S; S \\<in> H.face_cycle_sets\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> \\<Union> SS\n  SS \\<subseteq> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>S \\<in> SS; x \\<in> S; S \\<in> H.face_cycle_sets\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  S \\<in> SS\n  x \\<in> S\n  S \\<in> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "then"], ["proof (chain)\npicking this:\n  S \\<in> SS\n  x \\<in> S\n  S \\<in> H.face_cycle_sets", "have \"H.face_cycle_set x = S\""], ["proof (prove)\nusing this:\n  S \\<in> SS\n  x \\<in> S\n  S \\<in> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x = S", "using H.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  S \\<in> SS\n  x \\<in> S\n  S \\<in> H.face_cycle_sets\n  H.face_cycle_set ?a = H.face_cycle_set ?b \\<or>\n  H.face_cycle_set ?a \\<inter> H.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x = S", "by (auto simp: H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  H.face_cycle_set x = S\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "then"], ["proof (chain)\npicking this:\n  H.face_cycle_set x = S", "have \"H.face_cycle_set x \\<in> SS\""], ["proof (prove)\nusing this:\n  H.face_cycle_set x = S\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x \\<in> SS", "using \\<open>S \\<in> SS\\<close>"], ["proof (prove)\nusing this:\n  H.face_cycle_set x = S\n  S \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x \\<in> SS", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set x \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "}"], ["proof (state)\nthis:\n  ?x6 \\<in> \\<Union> SS \\<Longrightarrow> H.face_cycle_set ?x6 \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "moreover"], ["proof (state)\nthis:\n  ?x6 \\<in> \\<Union> SS \\<Longrightarrow> H.face_cycle_set ?x6 \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "{"], ["proof (state)\nthis:\n  ?x6 \\<in> \\<Union> SS \\<Longrightarrow> H.face_cycle_set ?x6 \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "assume \"S \\<in> SS\""], ["proof (state)\nthis:\n  S \\<in> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "then"], ["proof (chain)\npicking this:\n  S \\<in> SS", "obtain x where \"x \\<in> arcs H\" \"S = H.face_cycle_set x\" \"x \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<in> SS\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> arcs H; S = H.face_cycle_set x; x \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  S \\<in> SS\n  SS \\<subseteq> H.face_cycle_sets\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> arcs H; S = H.face_cycle_set x; x \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: H.face_cycle_sets_def)"], ["proof (state)\nthis:\n  x \\<in> arcs H\n  S = H.face_cycle_set x\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs H\n  S = H.face_cycle_set x\n  x \\<in> S", "have \"S \\<in> H.face_cycle_set ` \\<Union>SS\""], ["proof (prove)\nusing this:\n  x \\<in> arcs H\n  S = H.face_cycle_set x\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_set ` \\<Union> SS", "using \\<open>S \\<in> SS\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> arcs H\n  S = H.face_cycle_set x\n  x \\<in> S\n  S \\<in> SS\n\ngoal (1 subgoal):\n 1. S \\<in> H.face_cycle_set ` \\<Union> SS", "by auto"], ["proof (state)\nthis:\n  S \\<in> H.face_cycle_set ` \\<Union> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "}"], ["proof (state)\nthis:\n  ?S6 \\<in> SS \\<Longrightarrow> ?S6 \\<in> H.face_cycle_set ` \\<Union> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "ultimately"], ["proof (chain)\npicking this:\n  ?x6 \\<in> \\<Union> SS \\<Longrightarrow> H.face_cycle_set ?x6 \\<in> SS\n  ?S6 \\<in> SS \\<Longrightarrow> ?S6 \\<in> H.face_cycle_set ` \\<Union> SS", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x6 \\<in> \\<Union> SS \\<Longrightarrow> H.face_cycle_set ?x6 \\<in> SS\n  ?S6 \\<in> SS \\<Longrightarrow> ?S6 \\<in> H.face_cycle_set ` \\<Union> SS\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` \\<Union> SS = SS", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set ` \\<Union> SS = SS\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_fcs_gt_0: \"0 < card G.face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < card G.face_cycle_sets", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. 0 < card G.face_cycle_sets", "by (auto simp: card_gt_0_iff dest: G.in_face_cycle_sets)"], ["", "lemma card_face_cycle_sets_da':\n    \"card H.face_cycle_sets = card G.face_cycle_sets - 1\n      + card ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} - {{}})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "have \"G.face_cycle_set a\n        = {a,a'} \\<union> segment G.face_cycle_succ a a' \\<union> segment G.face_cycle_succ a' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a =\n    {a, a'} \\<union> segment G.face_cycle_succ a a' \\<union>\n    segment G.face_cycle_succ a' a", "using a_neq_a' same_face"], ["proof (prove)\nusing this:\n  a \\<noteq> a'\n  G.face_cycle_set a' = G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a =\n    {a, a'} \\<union> segment G.face_cycle_succ a a' \\<union>\n    segment G.face_cycle_succ a' a", "by (intro cyclic_split_segment) (auto simp: G.face_cycle_succ_cyclic)"], ["proof (state)\nthis:\n  G.face_cycle_set a =\n  {a, a'} \\<union> segment G.face_cycle_succ a a' \\<union>\n  segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_set a =\n  {a, a'} \\<union> segment G.face_cycle_succ a a' \\<union>\n  segment G.face_cycle_succ a' a", "have *: \"G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'} = segment G.face_cycle_succ a a' \\<union> segment G.face_cycle_succ a' a\""], ["proof (prove)\nusing this:\n  G.face_cycle_set a =\n  {a, a'} \\<union> segment G.face_cycle_succ a a' \\<union>\n  segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'} =\n    segment G.face_cycle_succ a a' \\<union> segment G.face_cycle_succ a' a", "by (auto simp: same_face G.face_cycle_set_def[symmetric] not_in_segment1 not_in_segment2)"], ["proof (state)\nthis:\n  G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'} =\n  segment G.face_cycle_succ a a' \\<union> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "have **: \"H.face_cycle_set ` (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n        = (if segment G.face_cycle_succ a a' \\<noteq> {} then {segment G.face_cycle_succ a a'} else {})\n        \\<union> (if segment G.face_cycle_succ a' a \\<noteq> {} then {segment G.face_cycle_succ a' a} else {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set `\n    (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n    (if segment G.face_cycle_succ a a' \\<noteq> {}\n     then {segment G.face_cycle_succ a a'} else {}) \\<union>\n    (if segment G.face_cycle_succ a' a \\<noteq> {}\n     then {segment G.face_cycle_succ a' a} else {})", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set `\n    (segment G.face_cycle_succ a a' \\<union>\n     segment G.face_cycle_succ a' a) =\n    (if segment G.face_cycle_succ a a' \\<noteq> {}\n     then {segment G.face_cycle_succ a a'} else {}) \\<union>\n    (if segment G.face_cycle_succ a' a \\<noteq> {}\n     then {segment G.face_cycle_succ a' a} else {})", "using H_fcs_full[of \"{segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\"]"], ["proof (prove)\nusing this:\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set `\n  \\<Union>\n   {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a} =\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set `\n    (segment G.face_cycle_succ a a' \\<union>\n     segment G.face_cycle_succ a' a) =\n    (if segment G.face_cycle_succ a a' \\<noteq> {}\n     then {segment G.face_cycle_succ a a'} else {}) \\<union>\n    (if segment G.face_cycle_succ a' a \\<noteq> {}\n     then {segment G.face_cycle_succ a' a} else {})", "using H_fcs_full[of \"{segment G.face_cycle_succ a a'}\"]"], ["proof (prove)\nusing this:\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set `\n  \\<Union>\n   {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a} =\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n  {segment G.face_cycle_succ a a'}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set ` \\<Union> {segment G.face_cycle_succ a a'} =\n  {segment G.face_cycle_succ a a'}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set `\n    (segment G.face_cycle_succ a a' \\<union>\n     segment G.face_cycle_succ a' a) =\n    (if segment G.face_cycle_succ a a' \\<noteq> {}\n     then {segment G.face_cycle_succ a a'} else {}) \\<union>\n    (if segment G.face_cycle_succ a' a \\<noteq> {}\n     then {segment G.face_cycle_succ a' a} else {})", "using H_fcs_full[of \"{segment G.face_cycle_succ a' a}\"]"], ["proof (prove)\nusing this:\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set `\n  \\<Union>\n   {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a} =\n  {segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a}\n  {segment G.face_cycle_succ a a'}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set ` \\<Union> {segment G.face_cycle_succ a a'} =\n  {segment G.face_cycle_succ a a'}\n  {segment G.face_cycle_succ a' a}\n  \\<subseteq> H.face_cycle_sets \\<Longrightarrow>\n  H.face_cycle_set ` \\<Union> {segment G.face_cycle_succ a' a} =\n  {segment G.face_cycle_succ a' a}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set `\n    (segment G.face_cycle_succ a a' \\<union>\n     segment G.face_cycle_succ a' a) =\n    (if segment G.face_cycle_succ a a' \\<noteq> {}\n     then {segment G.face_cycle_succ a a'} else {}) \\<union>\n    (if segment G.face_cycle_succ a' a \\<noteq> {}\n     then {segment G.face_cycle_succ a' a} else {})", "by (auto simp add: segment_a_a'_neD segment_a'_a_neD)"], ["proof (state)\nthis:\n  H.face_cycle_set `\n  (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}) =\n  (if segment G.face_cycle_succ a a' \\<noteq> {}\n   then {segment G.face_cycle_succ a a'} else {}) \\<union>\n  (if segment G.face_cycle_succ a' a \\<noteq> {}\n   then {segment G.face_cycle_succ a' a} else {})\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "unfolding card_face_cycle_sets_da0 **"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    card\n     ((if segment G.face_cycle_succ a a' \\<noteq> {}\n       then {segment G.face_cycle_succ a a'} else {}) \\<union>\n      (if segment G.face_cycle_succ a' a \\<noteq> {}\n       then {segment G.face_cycle_succ a' a} else {})) =\n    card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}})", "by (simp add: same_face card_insert_if)"], ["proof (state)\nthis:\n  card H.face_cycle_sets =\n  card G.face_cycle_sets - 1 +\n  card\n   ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n    {{}})\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bidel_arc_diff_face = bidel_arc +\n  assumes diff_face: \"G.face_cycle_set a' \\<noteq> G.face_cycle_set a\"\nbegin"], ["", "definition S :: \"'b set\" where\n    \"S \\<equiv> segment G.face_cycle_succ a a \\<union> segment G.face_cycle_succ a' a'\""], ["", "lemma diff_face_not_in: \"a \\<notin> G.face_cycle_set a'\" \"a' \\<notin> G.face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> G.face_cycle_set a' &&& a' \\<notin> G.face_cycle_set a", "using diff_face G.face_cycle_eq"], ["proof (prove)\nusing this:\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n  ?b \\<in> G.face_cycle_set ?a \\<Longrightarrow>\n  G.face_cycle_set ?b = G.face_cycle_set ?a\n\ngoal (1 subgoal):\n 1. a \\<notin> G.face_cycle_set a' &&& a' \\<notin> G.face_cycle_set a", "by auto"], ["", "lemma H_fcs_eq_for_a:\n    assumes \"b \\<in> arcs H \\<inter> G.face_cycle_set a\"\n    shows \"H.face_cycle_set b = S\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "fix c"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "assume \"c \\<in> ?L\""], ["proof (state)\nthis:\n  c \\<in> H.face_cycle_set b\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  c \\<in> H.face_cycle_set b", "have \"c \\<in> arcs H\""], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. c \\<in> arcs H", "using assms"], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. c \\<in> arcs H", "by (auto dest: H.in_face_cycle_setD)"], ["proof (state)\nthis:\n  c \\<in> arcs H\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  c \\<in> arcs H\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have \"c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "assume A: \"\\<not>?thesis\""], ["proof (state)\nthis:\n  c \\<notin> G.face_cycle_set a \\<union> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  c \\<notin> G.face_cycle_set a \\<union> G.face_cycle_set a'", "have \"G.face_cycle_set c \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a') = {}\""], ["proof (prove)\nusing this:\n  c \\<notin> G.face_cycle_set a \\<union> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_set c \\<inter>\n    (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n    {}", "using G.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  c \\<notin> G.face_cycle_set a \\<union> G.face_cycle_set a'\n  G.face_cycle_set ?a = G.face_cycle_set ?b \\<or>\n  G.face_cycle_set ?a \\<inter> G.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set c \\<inter>\n    (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n    {}", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  G.face_cycle_set c \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  G.face_cycle_set c \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_set c \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}", "have \"G.face_cycle_set c = H.face_cycle_set c\""], ["proof (prove)\nusing this:\n  G.face_cycle_set c \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set c = H.face_cycle_set c", "using \\<open>c \\<in> arcs H\\<close>"], ["proof (prove)\nusing this:\n  G.face_cycle_set c \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n  c \\<in> arcs H\n\ngoal (1 subgoal):\n 1. G.face_cycle_set c = H.face_cycle_set c", "by (subst face_cycle_set_other_da) (auto simp: arcs_H)"], ["proof (state)\nthis:\n  G.face_cycle_set c = H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "also"], ["proof (state)\nthis:\n  G.face_cycle_set c = H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "have \"\\<dots> = H.face_cycle_set b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set c = H.face_cycle_set b", "using \\<open>c \\<in> ?L\\<close>"], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. H.face_cycle_set c = H.face_cycle_set b", "using H.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n  H.face_cycle_set ?a = H.face_cycle_set ?b \\<or>\n  H.face_cycle_set ?a \\<inter> H.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set c = H.face_cycle_set b", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set c = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. c \\<notin> G.face_cycle_set a \\<union>\n               G.face_cycle_set a' \\<Longrightarrow>\n    False", "finally"], ["proof (chain)\npicking this:\n  H.face_cycle_set b \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}", "show False"], ["proof (prove)\nusing this:\n  H.face_cycle_set b \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  H.face_cycle_set b \\<inter>\n  (G.face_cycle_set a \\<union> G.face_cycle_set a') =\n  {}\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> H.face_cycle_set b \\<Longrightarrow> x \\<in> S\n 2. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "ultimately"], ["proof (chain)\npicking this:\n  c \\<in> arcs H\n  c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'", "show \"c \\<in> ?R\""], ["proof (prove)\nusing this:\n  c \\<in> arcs H\n  c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. c \\<in> S", "unfolding S_def arcs_H G.segment_face_cycle_x_x_eq"], ["proof (prove)\nusing this:\n  c \\<in> arcs G - {a, a'}\n  c \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. c \\<in> G.face_cycle_set a - {a} \\<union> (G.face_cycle_set a' - {a'})", "by auto"], ["proof (state)\nthis:\n  c \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "assume \"x \\<in> ?R\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "from assms"], ["proof (chain)\npicking this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a", "have \"a \\<noteq> b\""], ["proof (prove)\nusing this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. a \\<noteq> b", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "from assms"], ["proof (chain)\npicking this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a", "have b_in: \"b \\<in> segment G.face_cycle_succ a a\""], ["proof (prove)\nusing this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. b \\<in> segment G.face_cycle_succ a a", "using G.segment_face_cycle_x_x_eq"], ["proof (prove)\nusing this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n  segment G.face_cycle_succ ?x ?x = G.face_cycle_set ?x - {?x}\n\ngoal (1 subgoal):\n 1. b \\<in> segment G.face_cycle_succ a a", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  b \\<in> segment G.face_cycle_succ a a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have fcs_a_neq_a: \"G.face_cycle_succ a \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a \\<noteq> a", "using assms \\<open>a \\<noteq> b\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a \\<noteq> a", "by (auto simp add: G.segment_face_cycle_x_x_eq G.fcs_x_eq_x)"], ["proof (state)\nthis:\n  G.face_cycle_succ a \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have split_seg: \"segment G.face_cycle_succ a a = segment G.face_cycle_succ a b \\<union> {b}\n        \\<union> segment G.face_cycle_succ b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a =\n    segment G.face_cycle_succ a b \\<union> {b} \\<union>\n    segment G.face_cycle_succ b a", "using b_in"], ["proof (prove)\nusing this:\n  b \\<in> segment G.face_cycle_succ a a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a =\n    segment G.face_cycle_succ a b \\<union> {b} \\<union>\n    segment G.face_cycle_succ b a", "by (intro segment_split)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a a =\n  segment G.face_cycle_succ a b \\<union> {b} \\<union>\n  segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have a_in_orb_a: \"a \\<in> orbit G.face_cycle_succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> orbit G.face_cycle_succ a", "by (simp add: G.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  a \\<in> orbit G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "define c where \"c = inv G.face_cycle_succ a\""], ["proof (state)\nthis:\n  c = inv G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have c_succ: \"G.face_cycle_succ c = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ c = a", "unfolding c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ (inv G.face_cycle_succ a) = a", "by (meson bij_inv_eq_iff permutation_bijective G.permutation_face_cycle_succ)"], ["proof (state)\nthis:\n  G.face_cycle_succ c = a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have c_in_aa: \"c \\<in> segment G.face_cycle_succ a a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> segment G.face_cycle_succ a a", "unfolding G.segment_face_cycle_x_x_eq c_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv G.face_cycle_succ a \\<in> G.face_cycle_set a - {a}", "using fcs_a_neq_a c_succ c_def"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a \\<noteq> a\n  G.face_cycle_succ c = a\n  c = inv G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. inv G.face_cycle_succ a \\<in> G.face_cycle_set a - {a}", "by force"], ["proof (state)\nthis:\n  c \\<in> segment G.face_cycle_succ a a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have c_in: \"c \\<in> {b} \\<union> segment G.face_cycle_succ b a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<in> {b} \\<union> segment G.face_cycle_succ b a", "using split_seg b_in c_succ c_in_aa"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a a =\n  segment G.face_cycle_succ a b \\<union> {b} \\<union>\n  segment G.face_cycle_succ b a\n  b \\<in> segment G.face_cycle_succ a a\n  G.face_cycle_succ c = a\n  c \\<in> segment G.face_cycle_succ a a\n\ngoal (1 subgoal):\n 1. c \\<in> {b} \\<union> segment G.face_cycle_succ b a", "by (auto dest: not_in_segment1[OF segmentD_orbit] intro: segment.intros)"], ["proof (state)\nthis:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "from c_in_aa"], ["proof (chain)\npicking this:\n  c \\<in> segment G.face_cycle_succ a a", "have \"c \\<in> arcs H\""], ["proof (prove)\nusing this:\n  c \\<in> segment G.face_cycle_succ a a\n\ngoal (1 subgoal):\n 1. c \\<in> arcs H", "unfolding G.segment_face_cycle_x_x_eq"], ["proof (prove)\nusing this:\n  c \\<in> G.face_cycle_set a - {a}\n\ngoal (1 subgoal):\n 1. c \\<in> arcs H", "using arcs_in c_succ diff_face"], ["proof (prove)\nusing this:\n  c \\<in> G.face_cycle_set a - {a}\n  {a, a'} \\<subseteq> arcs G\n  G.face_cycle_succ c = a\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. c \\<in> arcs H", "by (auto simp: arcs_H G.face_cycle_eq[of a'])"], ["proof (state)\nthis:\n  c \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have b_in_L: \"b \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> H.face_cycle_set b", "by auto"], ["proof (state)\nthis:\n  b \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  b \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "{"], ["proof (state)\nthis:\n  b \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "assume \"x \\<in> segment G.face_cycle_succ b a\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ b a", "have \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ b \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ b \\<in> H.face_cycle_set b\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "case base"], ["proof (state)\nthis:\n  G.face_cycle_succ b \\<noteq> a\n\ngoal (2 subgoals):\n 1. G.face_cycle_succ b \\<noteq> a \\<Longrightarrow>\n    G.face_cycle_succ b \\<in> H.face_cycle_set b\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ b \\<noteq> a", "show ?case"], ["proof (prove)\nusing this:\n  G.face_cycle_succ b \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ b \\<in> H.face_cycle_set b", "using assms diff_face_not_in(2)"], ["proof (prove)\nusing this:\n  G.face_cycle_succ b \\<noteq> a\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n  a' \\<notin> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ b \\<in> H.face_cycle_set b", "by (subst H_fcs_eq_G_fcs[symmetric])\n            (auto simp: arcs_H intro: H.face_cycle_succ_inI G.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ b \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "case (step x)"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ b a\n  x \\<in> H.face_cycle_set b\n  G.face_cycle_succ x \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "have \"G.face_cycle_succ x \\<notin> G.face_cycle_set a  \\<Longrightarrow> b \\<in> G.face_cycle_set a \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n     b \\<in> G.face_cycle_set a\\<rbrakk>\n    \\<Longrightarrow> False", "using step(1)"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n     b \\<in> G.face_cycle_set a\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis G.face_cycle_eq G.face_cycle_succ_inI pre_digraph_map.face_cycle_set_def segmentD_orbit)"], ["proof (state)\nthis:\n  \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n   b \\<in> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n   b \\<in> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "have \"x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "using step assms H.in_face_cycle_setD arcs_H"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ b a\n  x \\<in> H.face_cycle_set b\n  G.face_cycle_succ x \\<noteq> a\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n  \\<lbrakk>?y \\<in> H.face_cycle_set ?x; ?x \\<in> arcs H\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> arcs H\n  arcs H = arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs G", "have \"(G.face_cycle_succ x \\<notin> G.face_cycle_set a \\<Longrightarrow> b \\<in> G.face_cycle_set a \\<Longrightarrow> False) \\<Longrightarrow> {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\""], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n      b \\<in> G.face_cycle_set a\\<rbrakk>\n     \\<Longrightarrow> False) \\<Longrightarrow>\n    {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "using step(2,3) assms diff_face_not_in(2)  H.in_face_cycle_setD arcs_H"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  x \\<in> H.face_cycle_set b\n  G.face_cycle_succ x \\<noteq> a\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n  a' \\<notin> G.face_cycle_set a\n  \\<lbrakk>?y \\<in> H.face_cycle_set ?x; ?x \\<in> arcs H\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> arcs H\n  arcs H = arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n      b \\<in> G.face_cycle_set a\\<rbrakk>\n     \\<Longrightarrow> False) \\<Longrightarrow>\n    {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "by safe auto"], ["proof (state)\nthis:\n  (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n    b \\<in> G.face_cycle_set a\\<rbrakk>\n   \\<Longrightarrow> False) \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ b a;\n        x \\<in> H.face_cycle_set b; G.face_cycle_succ x \\<noteq> a\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set b", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n   b \\<in> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> False\n  x \\<in> arcs G\n  (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n    b \\<in> G.face_cycle_set a\\<rbrakk>\n   \\<Longrightarrow> False) \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n   b \\<in> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> False\n  x \\<in> arcs G\n  (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n    b \\<in> G.face_cycle_set a\\<rbrakk>\n   \\<Longrightarrow> False) \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set b", "using step"], ["proof (prove)\nusing this:\n  \\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n   b \\<in> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> False\n  x \\<in> arcs G\n  (\\<lbrakk>G.face_cycle_succ x \\<notin> G.face_cycle_set a;\n    b \\<in> G.face_cycle_set a\\<rbrakk>\n   \\<Longrightarrow> False) \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n  x \\<in> segment G.face_cycle_succ b a\n  x \\<in> H.face_cycle_set b\n  G.face_cycle_succ x \\<noteq> a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set b", "by (subst H_fcs_eq_G_fcs[symmetric]) (auto  intro: H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<in> H.face_cycle_set b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "}"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "note sba_in_L = this"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "{"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "assume A: \"x \\<in> segment G.face_cycle_succ a' a'\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a'\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a'", "have \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a'\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "from c_in"], ["proof (chain)\npicking this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a", "have \"c \\<in> ?L\""], ["proof (prove)\nusing this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. c \\<in> H.face_cycle_set b", "using b_in_L sba_in_L"], ["proof (prove)\nusing this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. c \\<in> H.face_cycle_set b", "by blast"], ["proof (state)\nthis:\n  c \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "have \"G.face_cycle_succ a' \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<noteq> a'", "using A"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<noteq> a'", "by (auto simp add: G.segment_face_cycle_x_x_eq G.fcs_x_eq_x)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a' \\<noteq> a'", "have *: \"G.face_cycle_succ a' = H.face_cycle_succ c\""], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' = H.face_cycle_succ c", "using a_neq_a' c_succ \\<open>c \\<in> arcs H\\<close>"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' \\<noteq> a'\n  a \\<noteq> a'\n  G.face_cycle_succ c = a\n  c \\<in> arcs H\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' = H.face_cycle_succ c", "unfolding G.face_cycle_succ_def H.face_cycle_succ_def arcs_H"], ["proof (prove)\nusing this:\n  (edge_succ M \\<circ> edge_rev M) a' \\<noteq> a'\n  a \\<noteq> a'\n  (edge_succ M \\<circ> edge_rev M) c = a\n  c \\<in> arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. (edge_succ M \\<circ> edge_rev M) a' =\n    (edge_succ HM \\<circ> edge_rev HM) c", "by (auto simp: HM_def perm_restrict_simps perm_rem_conv G.bij_edge_succ G.arev_eq_iff)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' = H.face_cycle_succ c\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "from A"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a' a'", "have \"x \\<in> H.face_cycle_set c\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a'\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set c", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a' \\<Longrightarrow>\n    G.face_cycle_succ a' \\<in> H.face_cycle_set c\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "case base"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (2 subgoals):\n 1. G.face_cycle_succ a' \\<noteq> a' \\<Longrightarrow>\n    G.face_cycle_succ a' \\<in> H.face_cycle_set c\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a' \\<noteq> a'", "show ?case"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<in> H.face_cycle_set c", "by (simp add: * H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<in> H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "case (step x)"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a' a'\n  x \\<in> H.face_cycle_set c\n  G.face_cycle_succ x \\<noteq> a'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "have \"x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "using\\<open>c \\<in> arcs H\\<close> step.hyps(2)"], ["proof (prove)\nusing this:\n  c \\<in> arcs H\n  x \\<in> H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "by (auto simp: arcs_H dest: H.in_face_cycle_setD)"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "moreover"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "have \"G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n    {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "using step(1) diff_face_not_in(1) G.face_cycle_succ_inI G.segment_face_cycle_x_x_eq"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a' a'\n  a \\<notin> G.face_cycle_set a'\n  ?x \\<in> G.face_cycle_set ?y \\<Longrightarrow>\n  G.face_cycle_succ ?x \\<in> G.face_cycle_set ?y\n  segment G.face_cycle_succ ?x ?x = G.face_cycle_set ?x - {?x}\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n    {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "by (auto simp: not_in_segment2)"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a' a';\n        x \\<in> H.face_cycle_set c; G.face_cycle_succ x \\<noteq> a'\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set c", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> arcs G\n  G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set c", "using step"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  G.face_cycle_succ x \\<noteq> a' \\<Longrightarrow>\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n  x \\<in> segment G.face_cycle_succ a' a'\n  x \\<in> H.face_cycle_set c\n  G.face_cycle_succ x \\<noteq> a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set c", "by (subst H_fcs_eq_G_fcs[symmetric]) (auto intro: H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<in> H.face_cycle_set c\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "also"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set c\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "have \"H.face_cycle_set c = ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set c = H.face_cycle_set b", "using \\<open>c \\<in> ?L\\<close> H.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n  H.face_cycle_set ?a = H.face_cycle_set ?b \\<or>\n  H.face_cycle_set ?a \\<inter> H.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set c = H.face_cycle_set b", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set c = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. x \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n    x \\<in> H.face_cycle_set b", "finally"], ["proof (chain)\npicking this:\n  x \\<in> H.face_cycle_set b", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "."], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "}"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "note sa'a'_in_L = this"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "moreover"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "{"], ["proof (state)\nthis:\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "assume A: \"x \\<in> segment G.face_cycle_succ a b\""], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "obtain d where \"d \\<in> ?L\" and d_succ: \"H.face_cycle_succ d = G.face_cycle_succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d.\n        \\<lbrakk>d \\<in> H.face_cycle_set b;\n         H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof (cases \"G.face_cycle_succ a' = a'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' = a'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  G.face_cycle_succ a' = a'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' = a'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "from c_in"], ["proof (chain)\npicking this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a", "have \"c \\<in> ?L\""], ["proof (prove)\nusing this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a\n\ngoal (1 subgoal):\n 1. c \\<in> H.face_cycle_set b", "using b_in_L sba_in_L"], ["proof (prove)\nusing this:\n  c \\<in> {b} \\<union> segment G.face_cycle_succ b a\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. c \\<in> H.face_cycle_set b", "by blast"], ["proof (state)\nthis:\n  c \\<in> H.face_cycle_set b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' = a'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  c \\<in> H.face_cycle_set b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' = a'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"H.face_cycle_succ c = G.face_cycle_succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_succ c = G.face_cycle_succ a", "using fcs_a_neq_a c_succ  a_neq_a' True \\<open>c \\<in> arcs H\\<close>"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a \\<noteq> a\n  G.face_cycle_succ c = a\n  a \\<noteq> a'\n  G.face_cycle_succ a' = a'\n  c \\<in> arcs H\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ c = G.face_cycle_succ a", "unfolding G.face_cycle_succ_def H.face_cycle_succ_def arcs_H"], ["proof (prove)\nusing this:\n  (edge_succ M \\<circ> edge_rev M) a \\<noteq> a\n  (edge_succ M \\<circ> edge_rev M) c = a\n  a \\<noteq> a'\n  (edge_succ M \\<circ> edge_rev M) a' = a'\n  c \\<in> arcs G - {a, a'}\n\ngoal (1 subgoal):\n 1. (edge_succ HM \\<circ> edge_rev HM) c =\n    (edge_succ M \\<circ> edge_rev M) a", "by (auto simp: HM_def perm_restrict_simps arcs_H perm_rem_conv G.bij_edge_succ G.arev_eq_iff)"], ["proof (state)\nthis:\n  H.face_cycle_succ c = G.face_cycle_succ a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' = a'\\<rbrakk>\n    \\<Longrightarrow> thesis\n 2. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  c \\<in> H.face_cycle_set b\n  H.face_cycle_succ c = G.face_cycle_succ a", "show ?thesis"], ["proof (prove)\nusing this:\n  c \\<in> H.face_cycle_set b\n  H.face_cycle_succ c = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "define d where \"d = inv G.face_cycle_succ a'\""], ["proof (state)\nthis:\n  d = inv G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "have d_succ: \"G.face_cycle_succ d = a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ d = a'", "unfolding d_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ (inv G.face_cycle_succ a') = a'", "by (meson bij_inv_eq_iff permutation_bijective G.permutation_face_cycle_succ)"], ["proof (state)\nthis:\n  G.face_cycle_succ d = a'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "have *: \"d \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<in> H.face_cycle_set b", "using sa'a'_in_L False"], ["proof (prove)\nusing this:\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  G.face_cycle_succ a' \\<noteq> a'\n\ngoal (1 subgoal):\n 1. d \\<in> H.face_cycle_set b", "by (metis DiffI d_succ empty_iff G.face_cycle_set_self G.face_cycle_set_succ insert_iff G.permutation_face_cycle_succ pre_digraph_map.face_cycle_set_def segment_x_x_eq)"], ["proof (state)\nthis:\n  d \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  d \\<in> H.face_cycle_set b", "have \"d \\<in> arcs H\""], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. d \\<in> arcs H", "using assms"], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. d \\<in> arcs H", "by (auto dest: H.in_face_cycle_setD)"], ["proof (state)\nthis:\n  d \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"H.face_cycle_succ d = G.face_cycle_succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_succ d = G.face_cycle_succ a", "using fcs_a_neq_a a_neq_a' \\<open>d \\<in> arcs H\\<close> d_succ"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a \\<noteq> a\n  a \\<noteq> a'\n  d \\<in> arcs H\n  G.face_cycle_succ d = a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ d = G.face_cycle_succ a", "unfolding G.face_cycle_succ_def H.face_cycle_succ_def arcs_H"], ["proof (prove)\nusing this:\n  (edge_succ M \\<circ> edge_rev M) a \\<noteq> a\n  a \\<noteq> a'\n  d \\<in> arcs G - {a, a'}\n  (edge_succ M \\<circ> edge_rev M) d = a'\n\ngoal (1 subgoal):\n 1. (edge_succ HM \\<circ> edge_rev HM) d =\n    (edge_succ M \\<circ> edge_rev M) a", "by (auto simp: HM_def perm_restrict_simps arcs_H perm_rem_conv G.bij_edge_succ G.arev_eq_iff)"], ["proof (state)\nthis:\n  H.face_cycle_succ d = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>d.\n                \\<lbrakk>d \\<in> H.face_cycle_set b;\n                 H.face_cycle_succ d = G.face_cycle_succ a\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     G.face_cycle_succ a' \\<noteq> a'\\<rbrakk>\n    \\<Longrightarrow> thesis", "with *"], ["proof (chain)\npicking this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a", "show ?thesis"], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "then"], ["proof (chain)\npicking this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a", "have \"d \\<in> arcs H\""], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. d \\<in> arcs H", "using assms"], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_succ d = G.face_cycle_succ a\n  b \\<in> arcs H \\<inter> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. d \\<in> arcs H", "by - (drule H.in_face_cycle_setD, auto)"], ["proof (state)\nthis:\n  d \\<in> arcs H\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "from A"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a b", "have \"x \\<in> H.face_cycle_set d\""], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a b\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set d", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_succ a \\<noteq> b \\<Longrightarrow>\n    G.face_cycle_succ a \\<in> H.face_cycle_set d\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "case base"], ["proof (state)\nthis:\n  G.face_cycle_succ a \\<noteq> b\n\ngoal (2 subgoals):\n 1. G.face_cycle_succ a \\<noteq> b \\<Longrightarrow>\n    G.face_cycle_succ a \\<in> H.face_cycle_set d\n 2. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a \\<noteq> b", "show ?case"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a \\<noteq> b\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a \\<in> H.face_cycle_set d", "by (simp add: d_succ[symmetric] H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ a \\<in> H.face_cycle_set d\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "case (step x)"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "moreover"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "have \"x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "using \\<open>d \\<in> arcs H\\<close> arcs_H digraph_map.in_face_cycle_setD step.hyps(2)"], ["proof (prove)\nusing this:\n  d \\<in> arcs H\n  arcs H = arcs G - {a, a'}\n  \\<lbrakk>digraph_map ?G ?M; ?y \\<in> pre_digraph_map.face_cycle_set ?M ?x;\n   ?x \\<in> arcs ?G\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> arcs ?G\n  x \\<in> H.face_cycle_set d\n\ngoal (1 subgoal):\n 1. x \\<in> arcs G", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "moreover"], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "have \" {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "have \"a \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> x", "using step(2) H.in_face_cycle_setD \\<open>d \\<in> arcs H\\<close> arcs_not_in"], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set d\n  \\<lbrakk>?y \\<in> H.face_cycle_set ?x; ?x \\<in> arcs H\\<rbrakk>\n  \\<Longrightarrow> ?y \\<in> arcs H\n  d \\<in> arcs H\n  {a, a'} \\<inter> arcs H = {}\n\ngoal (1 subgoal):\n 1. a \\<noteq> x", "by blast"], ["proof (state)\nthis:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "moreover"], ["proof (state)\nthis:\n  a \\<noteq> x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "have \"a \\<noteq> G.face_cycle_succ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<noteq> G.face_cycle_succ x", "by (metis b_in not_in_segment1 segment.step segmentD_orbit step(1))"], ["proof (state)\nthis:\n  a \\<noteq> G.face_cycle_succ x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "moreover"], ["proof (state)\nthis:\n  a \\<noteq> G.face_cycle_succ x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "have \"a' \\<noteq> x\" \"a' \\<noteq> G.face_cycle_succ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' \\<noteq> x &&& a' \\<noteq> G.face_cycle_succ x", "using step(1) diff_face_not_in(2)"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a b\n  a' \\<notin> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. a' \\<noteq> x &&& a' \\<noteq> G.face_cycle_succ x", "by (auto simp: G.face_cycle_set_def dest!: segmentD_orbit intro: orbit.step)"], ["proof (state)\nthis:\n  a' \\<noteq> x\n  a' \\<noteq> G.face_cycle_succ x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "ultimately"], ["proof (chain)\npicking this:\n  a \\<noteq> x\n  a \\<noteq> G.face_cycle_succ x\n  a' \\<noteq> x\n  a' \\<noteq> G.face_cycle_succ x", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<noteq> x\n  a \\<noteq> G.face_cycle_succ x\n  a' \\<noteq> x\n  a' \\<noteq> G.face_cycle_succ x\n\ngoal (1 subgoal):\n 1. {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "by auto"], ["proof (state)\nthis:\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> segment G.face_cycle_succ a b;\n        x \\<in> H.face_cycle_set d; G.face_cycle_succ x \\<noteq> b\\<rbrakk>\n       \\<Longrightarrow> G.face_cycle_succ x \\<in> H.face_cycle_set d", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n  x \\<in> arcs G\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n  x \\<in> arcs G\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set d", "using step"], ["proof (prove)\nusing this:\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n  x \\<in> arcs G\n  {x, G.face_cycle_succ x} \\<inter> {a, a'} = {}\n  x \\<in> segment G.face_cycle_succ a b\n  x \\<in> H.face_cycle_set d\n  G.face_cycle_succ x \\<noteq> b\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ x \\<in> H.face_cycle_set d", "by (subst H_fcs_eq_G_fcs[symmetric]) (auto intro: H.face_cycle_succ_inI)"], ["proof (state)\nthis:\n  G.face_cycle_succ x \\<in> H.face_cycle_set d\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "also"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set d\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "have \"H.face_cycle_set d = ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set d = H.face_cycle_set b", "using \\<open>d \\<in> ?L\\<close> H.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  d \\<in> H.face_cycle_set b\n  H.face_cycle_set ?a = H.face_cycle_set ?b \\<or>\n  H.face_cycle_set ?a \\<inter> H.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. H.face_cycle_set d = H.face_cycle_set b", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set d = H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "finally"], ["proof (chain)\npicking this:\n  x \\<in> H.face_cycle_set b", "have \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "."], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "}"], ["proof (state)\nthis:\n  x \\<in> segment G.face_cycle_succ a b \\<Longrightarrow>\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> S \\<Longrightarrow> x \\<in> H.face_cycle_set b", "ultimately"], ["proof (chain)\npicking this:\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  x \\<in> segment G.face_cycle_succ a b \\<Longrightarrow>\n  x \\<in> H.face_cycle_set b", "show \"x \\<in> ?L\""], ["proof (prove)\nusing this:\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  x \\<in> segment G.face_cycle_succ a b \\<Longrightarrow>\n  x \\<in> H.face_cycle_set b\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "using \\<open>x \\<in> ?R\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  x \\<in> segment G.face_cycle_succ a b \\<Longrightarrow>\n  x \\<in> H.face_cycle_set b\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "unfolding S_def split_seg"], ["proof (prove)\nusing this:\n  b \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ b a \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  ?xa6 \\<in> segment G.face_cycle_succ a' a' \\<Longrightarrow>\n  ?xa6 \\<in> H.face_cycle_set b\n  x \\<in> segment G.face_cycle_succ a b \\<Longrightarrow>\n  x \\<in> H.face_cycle_set b\n  x \\<in> segment G.face_cycle_succ a b \\<union> {b} \\<union>\n          segment G.face_cycle_succ b a \\<union>\n          segment G.face_cycle_succ a' a'\n\ngoal (1 subgoal):\n 1. x \\<in> H.face_cycle_set b", "by blast"], ["proof (state)\nthis:\n  x \\<in> H.face_cycle_set b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HJ_fcs_eq_for_a':\n    assumes \"b \\<in> arcs H \\<inter> G.face_cycle_set a'\"\n    shows \"H.face_cycle_set b = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "interpret rev: bidel_arc_diff_face G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_diff_face G M a'", "using arcs_in diff_face"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. bidel_arc_diff_face G M a'", "by unfold_locales simp_all"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "using rev.H_fcs_eq_for_a assms"], ["proof (prove)\nusing this:\n  ?b \\<in> arcs rev.H \\<inter> G.face_cycle_set a' \\<Longrightarrow>\n  rev.H.face_cycle_set ?b = rev.S\n  b \\<in> arcs H \\<inter> G.face_cycle_set a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_set b = S", "by (auto simp: rev_H rev_HM S_def rev.S_def)"], ["proof (state)\nthis:\n  H.face_cycle_set b = S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_face_cycle_sets_da':\n    \"card H.face_cycle_sets = card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'} + (if S = {} then 0 else 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "have \"S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}", "unfolding S_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a \\<union> segment G.face_cycle_succ a' a' =\n    G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}", "using diff_face_not_in"], ["proof (prove)\nusing this:\n  a \\<notin> G.face_cycle_set a'\n  a' \\<notin> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a \\<union> segment G.face_cycle_succ a' a' =\n    G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}", "by (auto simp: segment_x_x_eq G.permutation_face_cycle_succ G.face_cycle_set_def)"], ["proof (state)\nthis:\n  S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "moreover"], ["proof (state)\nthis:\n  S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "{"], ["proof (state)\nthis:\n  S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "assume \"x \\<in> S\""], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "then"], ["proof (chain)\npicking this:\n  x \\<in> S", "have \"x \\<in> arcs H \\<inter> (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\""], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<in> arcs H \\<inter>\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "unfolding \\<open>S = _\\<close> arcs_H"], ["proof (prove)\nusing this:\n  x \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n\ngoal (1 subgoal):\n 1. x \\<in> (arcs G - {a, a'}) \\<inter>\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "using a_in"], ["proof (prove)\nusing this:\n  x \\<in> G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. x \\<in> (arcs G - {a, a'}) \\<inter>\n            (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "by (auto intro: G.in_face_cycle_setD)"], ["proof (state)\nthis:\n  x \\<in> arcs H \\<inter>\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs H \\<inter>\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})", "have \"H.face_cycle_set x = S\""], ["proof (prove)\nusing this:\n  x \\<in> arcs H \\<inter>\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x = S", "using H_fcs_eq_for_a HJ_fcs_eq_for_a'"], ["proof (prove)\nusing this:\n  x \\<in> arcs H \\<inter>\n          (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})\n  ?b \\<in> arcs H \\<inter> G.face_cycle_set a \\<Longrightarrow>\n  H.face_cycle_set ?b = S\n  ?b \\<in> arcs H \\<inter> G.face_cycle_set a' \\<Longrightarrow>\n  H.face_cycle_set ?b = S\n\ngoal (1 subgoal):\n 1. H.face_cycle_set x = S", "by blast"], ["proof (state)\nthis:\n  H.face_cycle_set x = S\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "}"], ["proof (state)\nthis:\n  ?x6 \\<in> S \\<Longrightarrow> H.face_cycle_set ?x6 = S\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "then"], ["proof (chain)\npicking this:\n  ?x6 \\<in> S \\<Longrightarrow> H.face_cycle_set ?x6 = S", "have \"H.face_cycle_set ` S = (if S = {} then {} else {S})\""], ["proof (prove)\nusing this:\n  ?x6 \\<in> S \\<Longrightarrow> H.face_cycle_set ?x6 = S\n\ngoal (1 subgoal):\n 1. H.face_cycle_set ` S = (if S = {} then {} else {S})", "by auto"], ["proof (state)\nthis:\n  H.face_cycle_set ` S = (if S = {} then {} else {S})\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "ultimately"], ["proof (chain)\npicking this:\n  S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  H.face_cycle_set ` S = (if S = {} then {} else {S})", "show ?thesis"], ["proof (prove)\nusing this:\n  S = G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'}\n  H.face_cycle_set ` S = (if S = {} then {} else {S})\n\ngoal (1 subgoal):\n 1. card H.face_cycle_sets =\n    card G.face_cycle_sets -\n    card {G.face_cycle_set a, G.face_cycle_set a'} +\n    (if S = {} then 0 else 1)", "by (simp add: card_face_cycle_sets_da0)"], ["proof (state)\nthis:\n  card H.face_cycle_sets =\n  card G.face_cycle_sets - card {G.face_cycle_set a, G.face_cycle_set a'} +\n  (if S = {} then 0 else 1)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bidel_arc_biconnected = bidel_arc +\n  assumes reach_a: \"tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\"\nbegin"], ["", "lemma reach_a': \"tail G a' \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a' \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a'", "using reach_a a_in"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G a' \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a'", "by (simp add: symmetric_reachable H.sym_arcs)"], ["", "lemma\n    tail_a': \"tail G a' = head G a\" and\n    head_a': \"head G a' = tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a' = head G a &&& head G a' = tail G a", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G a' = head G a &&& head G a' = tail G a", "by simp_all"], ["", "lemma reachable_daI:\n    assumes \"v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\" shows \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "have *: \"\\<And>v w. v \\<rightarrow>\\<^bsub>G\\<^esub> w \\<Longrightarrow> v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v w.\n       v \\<rightarrow>\\<^bsub>G\\<^esub> w \\<Longrightarrow>\n       v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "using reach_a reach_a'"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a' \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a'\n\ngoal (1 subgoal):\n 1. \\<And>v w.\n       v \\<rightarrow>\\<^bsub>G\\<^esub> w \\<Longrightarrow>\n       v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "by (auto simp: arcs_ends_def ends_H arcs_G arc_to_ends_def tail_a')"], ["proof (state)\nthis:\n  ?v4 \\<rightarrow>\\<^bsub>G\\<^esub> ?w4 \\<Longrightarrow>\n  ?v4 \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> ?w4\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "using assms"], ["proof (prove)\nusing this:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\n\ngoal (1 subgoal):\n 1. v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w", "by induct (auto simp: verts_H intro: * H.reachable_trans)"], ["proof (state)\nthis:\n  v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reachable_da: \"v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w \\<longleftrightarrow> v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (v \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> w) =\n    (v \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> w)", "by (metis reachable_daD reachable_daI)"], ["", "lemma sccs_verts_da: \"H.sccs_verts = G.sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.sccs_verts = G.sccs_verts", "by (auto simp: G.in_sccs_verts_conv_reachable H.in_sccs_verts_conv_reachable reachable_da)"], ["", "lemma card_sccs_da: \"card H.sccs = card G.sccs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.sccs = card G.sccs", "by (simp add: G.card_sccs_verts[symmetric] H.card_sccs_verts[symmetric] sccs_verts_da)"], ["", "end"], ["", "locale bidel_arc_not_biconnected = bidel_arc +\n  assumes not_reach_a: \"\\<not>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\"\nbegin"], ["", "lemma H_awalkI: \"G.awalk u p v \\<Longrightarrow> {a,a'} \\<inter> set p = {} \\<Longrightarrow> H.awalk u p v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>G.awalk u p v; {a, a'} \\<inter> set p = {}\\<rbrakk>\n    \\<Longrightarrow> H.awalk u p v", "by (auto simp: pre_digraph.apath_def pre_digraph.awalk_def verts_H arcs_H cas_da)"], ["", "lemma tail_neq_head: \"tail G a \\<noteq> head G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a \\<noteq> head G a", "using not_reach_a a_in"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G a \\<noteq> head G a", "by (metis H.reachable_refl G.head_in_verts verts_H)"], ["", "lemma scc_of_tail_neq_head: \"H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)", "have \"tail G a \\<in> H.scc_of (tail G a)\" \"head G a \\<in> H.scc_of (head G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a \\<in> H.scc_of (tail G a) &&&\n    head G a \\<in> H.scc_of (head G a)", "using ends_in"], ["proof (prove)\nusing this:\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. tail G a \\<in> H.scc_of (tail G a) &&&\n    head G a \\<in> H.scc_of (head G a)", "by (auto simp: H.in_scc_of_self verts_H)"], ["proof (state)\nthis:\n  tail G a \\<in> H.scc_of (tail G a)\n  head G a \\<in> H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)", "with not_reach_a"], ["proof (chain)\npicking this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.scc_of (tail G a)\n  head G a \\<in> H.scc_of (head G a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.scc_of (tail G a)\n  head G a \\<in> H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)", "by (auto simp: H.scc_of_def)"], ["proof (state)\nthis:\n  H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_of_G_tail:\n    assumes \"u \\<in> G.scc_of (tail G a)\"\n    shows \"H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "from assms"], ["proof (chain)\npicking this:\n  u \\<in> G.scc_of (tail G a)", "have \"u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\""], ["proof (prove)\nusing this:\n  u \\<in> G.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "by (auto simp: G.scc_of_def)"], ["proof (state)\nthis:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "then"], ["proof (chain)\npicking this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "obtain p where p: \"G.apath u p (tail G a)\""], ["proof (prove)\nusing this:\n  u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        G.apath u p (tail G a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.reachable_apath)"], ["proof (state)\nthis:\n  G.apath u p (tail G a)\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "proof (cases \"head G a \\<in> set (G.awalk_verts u p)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "case True"], ["proof (state)\nthis:\n  head G a \\<in> set (G.awalk_verts u p)\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "with p"], ["proof (chain)\npicking this:\n  G.apath u p (tail G a)\n  head G a \\<in> set (G.awalk_verts u p)", "obtain p' q where \"p = p' @ q\" \"G.awalk (head G a) q (tail G a)\"\n          and p': \"G.awalk u p' (head G a)\""], ["proof (prove)\nusing this:\n  G.apath u p (tail G a)\n  head G a \\<in> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. (\\<And>p' q.\n        \\<lbrakk>p = p' @ q; G.awalk (head G a) q (tail G a);\n         G.awalk u p' (head G a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding G.apath_def"], ["proof (prove)\nusing this:\n  G.awalk u p (tail G a) \\<and> distinct (G.awalk_verts u p)\n  head G a \\<in> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. (\\<And>p' q.\n        \\<lbrakk>p = p' @ q; G.awalk (head G a) q (tail G a);\n         G.awalk u p' (head G a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis G.awalk_decomp)"], ["proof (state)\nthis:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "moreover"], ["proof (state)\nthis:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "then"], ["proof (chain)\npicking this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)", "have \"tail G a \\<in> set (tl (G.awalk_verts (head G a) q))\""], ["proof (prove)\nusing this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n\ngoal (1 subgoal):\n 1. tail G a \\<in> set (tl (G.awalk_verts (head G a) q))", "using tail_neq_head"], ["proof (prove)\nusing this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. tail G a \\<in> set (tl (G.awalk_verts (head G a) q))", "apply (cases q)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = p' @ q; G.awalk (head G a) q (tail G a);\n     G.awalk u p' (head G a); tail G a \\<noteq> head G a; q = []\\<rbrakk>\n    \\<Longrightarrow> tail G a \\<in> set (tl (G.awalk_verts (head G a) q))\n 2. \\<And>aa list.\n       \\<lbrakk>p = p' @ q; G.awalk (head G a) q (tail G a);\n        G.awalk u p' (head G a); tail G a \\<noteq> head G a;\n        q = aa # list\\<rbrakk>\n       \\<Longrightarrow> tail G a\n                         \\<in> set (tl (G.awalk_verts (head G a) q))", "apply (simp add: G.awalk_Nil_iff )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>p = p' @ q; G.awalk (head G a) q (tail G a);\n        G.awalk u p' (head G a); tail G a \\<noteq> head G a;\n        q = aa # list\\<rbrakk>\n       \\<Longrightarrow> tail G a\n                         \\<in> set (tl (G.awalk_verts (head G a) q))", "apply (simp add: G.awalk_Cons_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa list.\n       \\<lbrakk>p = p' @ aa # list;\n        aa \\<in> arcs G \\<and>\n        head G a = tail G aa \\<and> G.awalk (head G aa) list (tail G a);\n        G.awalk u p' (tail G aa); tail G a \\<noteq> tail G aa;\n        q = aa # list\\<rbrakk>\n       \\<Longrightarrow> tail G a \\<in> set (G.awalk_verts (head G aa) list)", "by (metis G.awalkE G.awalk_verts_non_Nil last_in_set)"], ["proof (state)\nthis:\n  tail G a \\<in> set (tl (G.awalk_verts (head G a) q))\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "ultimately"], ["proof (chain)\npicking this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n  tail G a \\<in> set (tl (G.awalk_verts (head G a) q))", "have \"tail G a \\<notin> set (G.awalk_verts u p')\""], ["proof (prove)\nusing this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n  tail G a \\<in> set (tl (G.awalk_verts (head G a) q))\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> set (G.awalk_verts u p')", "using G.apath_decomp_disjoint[OF p, of p' q \"tail G a\"]"], ["proof (prove)\nusing this:\n  p = p' @ q\n  G.awalk (head G a) q (tail G a)\n  G.awalk u p' (head G a)\n  tail G a \\<in> set (tl (G.awalk_verts (head G a) q))\n  \\<lbrakk>p = p' @ q; tail G a \\<in> set (G.awalk_verts u p');\n   tail G a \\<in> set (tl (G.awalk_verts (G.awlast u p') q))\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> set (G.awalk_verts u p')", "by auto"], ["proof (state)\nthis:\n  tail G a \\<notin> set (G.awalk_verts u p')\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "with p'"], ["proof (chain)\npicking this:\n  G.awalk u p' (head G a)\n  tail G a \\<notin> set (G.awalk_verts u p')", "have \"{a,a'} \\<inter> set p' = {}\""], ["proof (prove)\nusing this:\n  G.awalk u p' (head G a)\n  tail G a \\<notin> set (G.awalk_verts u p')\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p' = {}", "by (auto simp: G.set_awalk_verts G.apath_def) (metis a_in imageI G.head_arev)"], ["proof (state)\nthis:\n  {a, a'} \\<inter> set p' = {}\n\ngoal (2 subgoals):\n 1. head G a \\<in> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n 2. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "with p'"], ["proof (chain)\npicking this:\n  G.awalk u p' (head G a)\n  {a, a'} \\<inter> set p' = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  G.awalk u p' (head G a)\n  {a, a'} \\<inter> set p' = {}\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "unfolding G.apath_def"], ["proof (prove)\nusing this:\n  G.awalk u p' (head G a)\n  {a, a'} \\<inter> set p' = {}\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "by (metis H.scc_ofI_awalk H.scc_of_eq H_awalkI)"], ["proof (state)\nthis:\n  H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "case False"], ["proof (state)\nthis:\n  head G a \\<notin> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "with p"], ["proof (chain)\npicking this:\n  G.apath u p (tail G a)\n  head G a \\<notin> set (G.awalk_verts u p)", "have \"{a,a'} \\<inter> set p = {}\""], ["proof (prove)\nusing this:\n  G.apath u p (tail G a)\n  head G a \\<notin> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "by (auto simp: G.set_awalk_verts G.apath_def) (metis a_in imageI G.tail_arev)"], ["proof (state)\nthis:\n  {a, a'} \\<inter> set p = {}\n\ngoal (1 subgoal):\n 1. head G a \\<notin> set (G.awalk_verts u p) \\<Longrightarrow>\n    H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "with p"], ["proof (chain)\npicking this:\n  G.apath u p (tail G a)\n  {a, a'} \\<inter> set p = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  G.apath u p (tail G a)\n  {a, a'} \\<inter> set p = {}\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "unfolding G.apath_def"], ["proof (prove)\nusing this:\n  G.awalk u p (tail G a) \\<and> distinct (G.awalk_verts u p)\n  {a, a'} \\<inter> set p = {}\n\ngoal (1 subgoal):\n 1. H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)", "by (metis H.scc_ofI_awalk H.scc_of_eq H_awalkI)"], ["proof (state)\nthis:\n  H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H.scc_of u = H.scc_of (tail G a) \\<or> H.scc_of u = H.scc_of (head G a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_of_other:\n    assumes \"u \\<notin> G.scc_of (tail G a)\"\n    shows \"H.scc_of u = G.scc_of u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.scc_of u = G.scc_of u", "using assms"], ["proof (prove)\nusing this:\n  u \\<notin> G.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. H.scc_of u = G.scc_of u", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> H.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> G.scc_of u\n 2. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "fix v"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> H.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> G.scc_of u\n 2. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "assume \"v \\<in> H.scc_of u\""], ["proof (state)\nthis:\n  v \\<in> H.scc_of u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> H.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> G.scc_of u\n 2. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "then"], ["proof (chain)\npicking this:\n  v \\<in> H.scc_of u", "show \"v \\<in> G.scc_of u\""], ["proof (prove)\nusing this:\n  v \\<in> H.scc_of u\n\ngoal (1 subgoal):\n 1. v \\<in> G.scc_of u", "by (auto simp: H.scc_of_def G.scc_of_def intro: reachable_daD)"], ["proof (state)\nthis:\n  v \\<in> G.scc_of u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "assume \"v \\<in> G.scc_of u\""], ["proof (state)\nthis:\n  v \\<in> G.scc_of u\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "then"], ["proof (chain)\npicking this:\n  v \\<in> G.scc_of u", "obtain p where p: \"G.awalk u p v\""], ["proof (prove)\nusing this:\n  v \\<in> G.scc_of u\n\ngoal (1 subgoal):\n 1. (\\<And>p. G.awalk u p v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.scc_of_def G.reachable_awalk)"], ["proof (state)\nthis:\n  G.awalk u p v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "moreover"], ["proof (state)\nthis:\n  G.awalk u p v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "have \"{a,a'} \\<inter> set p = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "have \"\\<not>u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "using assms"], ["proof (prove)\nusing this:\n  u \\<notin> G.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. \\<not> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "by (metis G.scc_ofI_reachable)"], ["proof (state)\nthis:\n  \\<not> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "then"], ["proof (chain)\npicking this:\n  \\<not> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "have \"\\<And>p. \\<not>G.awalk u p (tail G a)\""], ["proof (prove)\nusing this:\n  \\<not> u \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. \\<And>p. \\<not> G.awalk u p (tail G a)", "by (metis G.reachable_awalk)"], ["proof (state)\nthis:\n  \\<not> G.awalk u ?p4 (tail G a)\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "then"], ["proof (chain)\npicking this:\n  \\<not> G.awalk u ?p4 (tail G a)", "have \"tail G a \\<notin> set (G.awalk_verts u p)\""], ["proof (prove)\nusing this:\n  \\<not> G.awalk u ?p4 (tail G a)\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> set (G.awalk_verts u p)", "using p"], ["proof (prove)\nusing this:\n  \\<not> G.awalk u ?p4 (tail G a)\n  G.awalk u p v\n\ngoal (1 subgoal):\n 1. tail G a \\<notin> set (G.awalk_verts u p)", "by (auto dest: G.awalk_decomp)"], ["proof (state)\nthis:\n  tail G a \\<notin> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "with p"], ["proof (chain)\npicking this:\n  G.awalk u p v\n  tail G a \\<notin> set (G.awalk_verts u p)", "show ?thesis"], ["proof (prove)\nusing this:\n  G.awalk u p v\n  tail G a \\<notin> set (G.awalk_verts u p)\n\ngoal (1 subgoal):\n 1. {a, a'} \\<inter> set p = {}", "by (auto simp: G.set_awalk_verts G.apath_def) (metis a_in imageI G.head_arev)"], ["proof (state)\nthis:\n  {a, a'} \\<inter> set p = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {a, a'} \\<inter> set p = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "ultimately"], ["proof (chain)\npicking this:\n  G.awalk u p v\n  {a, a'} \\<inter> set p = {}", "have \"H.awalk u p v\""], ["proof (prove)\nusing this:\n  G.awalk u p v\n  {a, a'} \\<inter> set p = {}\n\ngoal (1 subgoal):\n 1. H.awalk u p v", "by (rule H_awalkI)"], ["proof (state)\nthis:\n  H.awalk u p v\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u \\<notin> G.scc_of (tail G a); x \\<in> G.scc_of u\\<rbrakk>\n       \\<Longrightarrow> x \\<in> H.scc_of u", "then"], ["proof (chain)\npicking this:\n  H.awalk u p v", "show \"v \\<in> H.scc_of u\""], ["proof (prove)\nusing this:\n  H.awalk u p v\n\ngoal (1 subgoal):\n 1. v \\<in> H.scc_of u", "by (metis H.scc_ofI_reachable' H.reachable_awalk)"], ["proof (state)\nthis:\n  v \\<in> H.scc_of u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_of_tail_inter:\n    \"tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)", "using ends_in"], ["proof (prove)\nusing this:\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)", "by (auto simp: G.in_scc_of_self H.in_scc_of_self verts_H)"], ["", "lemma scc_of_head_inter:\n    \"head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "have \"tail G a \\<rightarrow>\\<^bsub>G\\<^esub> head G a\" \"head G a \\<rightarrow>\\<^bsub>G\\<^esub> tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a \\<rightarrow>\\<^bsub>G\\<^esub> head G a &&&\n    head G a \\<rightarrow>\\<^bsub>G\\<^esub> tail G a", "by (metis a_in G.in_arcs_imp_in_arcs_ends) (metis a_in G.graph_symmetric G.in_arcs_imp_in_arcs_ends)"], ["proof (state)\nthis:\n  tail G a \\<rightarrow>\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "then"], ["proof (chain)\npicking this:\n  tail G a \\<rightarrow>\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^bsub>G\\<^esub> tail G a", "have \"tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a\" \"head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\""], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a &&&\n    head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "by auto"], ["proof (state)\nthis:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "then"], ["proof (chain)\npicking this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a", "show ?thesis"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "using ends_in"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> head G a\n  head G a \\<rightarrow>\\<^sup>*\\<^bsub>G\\<^esub> tail G a\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "by (auto simp: G.scc_of_def H.in_scc_of_self verts_H)"], ["proof (state)\nthis:\n  head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_scc_of_tail_not_in: \"G.scc_of (tail G a) \\<notin> H.sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<notin> H.sccs_verts", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<in> H.sccs_verts \\<Longrightarrow> False", "assume A: \"G.scc_of (tail G a) \\<in> H.sccs_verts\""], ["proof (state)\nthis:\n  G.scc_of (tail G a) \\<in> H.sccs_verts\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<in> H.sccs_verts \\<Longrightarrow> False", "from A scc_of_tail_inter"], ["proof (chain)\npicking this:\n  G.scc_of (tail G a) \\<in> H.sccs_verts\n  tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)", "have \"G.scc_of (tail G a) = H.scc_of (tail G a)\""], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<in> H.sccs_verts\n  tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) = H.scc_of (tail G a)", "by (metis H.scc_of_in_sccs_verts H.sccs_verts_disjoint a_in empty_iff G.tail_in_verts verts_H)"], ["proof (state)\nthis:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<in> H.sccs_verts \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<in> H.sccs_verts \\<Longrightarrow> False", "from A scc_of_head_inter"], ["proof (chain)\npicking this:\n  G.scc_of (tail G a) \\<in> H.sccs_verts\n  head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)", "have \"G.scc_of (tail G a) = H.scc_of (head G a)\""], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<in> H.sccs_verts\n  head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) = H.scc_of (head G a)", "by (metis H.scc_of_in_sccs_verts H.sccs_verts_disjoint a_in empty_iff G.head_in_verts verts_H)"], ["proof (state)\nthis:\n  G.scc_of (tail G a) = H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<in> H.sccs_verts \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n  G.scc_of (tail G a) = H.scc_of (head G a)", "show False"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n  G.scc_of (tail G a) = H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. False", "using scc_of_tail_neq_head"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n  G.scc_of (tail G a) = H.scc_of (head G a)\n  H.scc_of (tail G a) \\<noteq> H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_scc_of_a_not_in:\n    \"H.scc_of (tail G a) \\<notin> G.sccs_verts\" \"H.scc_of (head G a) \\<notin> G.sccs_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.scc_of (tail G a) \\<notin> G.sccs_verts &&&\n    H.scc_of (head G a) \\<notin> G.sccs_verts", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. H.scc_of (tail G a) \\<in> G.sccs_verts \\<Longrightarrow> False\n 2. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "assume \"H.scc_of (tail G a) \\<in> G.sccs_verts\""], ["proof (state)\nthis:\n  H.scc_of (tail G a) \\<in> G.sccs_verts\n\ngoal (2 subgoals):\n 1. H.scc_of (tail G a) \\<in> G.sccs_verts \\<Longrightarrow> False\n 2. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "with scc_of_tail_inter"], ["proof (chain)\npicking this:\n  tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)\n  H.scc_of (tail G a) \\<in> G.sccs_verts", "have \"G.scc_of (tail G a) = H.scc_of (tail G a)\""], ["proof (prove)\nusing this:\n  tail G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (tail G a)\n  H.scc_of (tail G a) \\<in> G.sccs_verts\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) = H.scc_of (tail G a)", "by (metis G.scc_of_in_sccs_verts G.sccs_verts_disjoint a_in empty_iff G.tail_in_verts)"], ["proof (state)\nthis:\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n\ngoal (2 subgoals):\n 1. H.scc_of (tail G a) \\<in> G.sccs_verts \\<Longrightarrow> False\n 2. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "with G_scc_of_tail_not_in"], ["proof (chain)\npicking this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (tail G a)", "show False"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. False", "using ends_in"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (tail G a)\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: H.scc_of_in_sccs_verts verts_H)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "assume \"H.scc_of (head G a) \\<in> G.sccs_verts\""], ["proof (state)\nthis:\n  H.scc_of (head G a) \\<in> G.sccs_verts\n\ngoal (1 subgoal):\n 1. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "with scc_of_head_inter"], ["proof (chain)\npicking this:\n  head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\n  H.scc_of (head G a) \\<in> G.sccs_verts", "have \"G.scc_of (tail G a) = H.scc_of (head G a)\""], ["proof (prove)\nusing this:\n  head G a \\<in> G.scc_of (tail G a) \\<inter> H.scc_of (head G a)\n  H.scc_of (head G a) \\<in> G.sccs_verts\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) = H.scc_of (head G a)", "by (metis G.scc_of_in_sccs_verts G.sccs_verts_disjoint a_in empty_iff G.tail_in_verts)"], ["proof (state)\nthis:\n  G.scc_of (tail G a) = H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. H.scc_of (head G a) \\<in> G.sccs_verts \\<Longrightarrow> False", "with G_scc_of_tail_not_in"], ["proof (chain)\npicking this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (head G a)", "show False"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (head G a)\n\ngoal (1 subgoal):\n 1. False", "using ends_in"], ["proof (prove)\nusing this:\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n  G.scc_of (tail G a) = H.scc_of (head G a)\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: H.scc_of_in_sccs_verts verts_H)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma scc_verts_da:\n    \"H.sccs_verts = (G.sccs_verts - {G.scc_of (tail G a)}) \\<union> {H.scc_of (tail G a), H.scc_of (head G a)}\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.sccs_verts =\n    G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n    {H.scc_of (tail G a), H.scc_of (head G a)}", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "fix S"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "assume \"S \\<in> ?L\""], ["proof (state)\nthis:\n  S \\<in> H.sccs_verts\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "then"], ["proof (chain)\npicking this:\n  S \\<in> H.sccs_verts", "obtain u where \"u \\<in> verts G\" \"S = H.scc_of u\""], ["proof (prove)\nusing this:\n  S \\<in> H.sccs_verts\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> verts G; S = H.scc_of u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: verts_H H.sccs_verts_conv_scc_of)"], ["proof (state)\nthis:\n  u \\<in> verts G\n  S = H.scc_of u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "moreover"], ["proof (state)\nthis:\n  u \\<in> verts G\n  S = H.scc_of u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts G\n  S = H.scc_of u", "have \"G.scc_of (tail G a) \\<noteq> H.scc_of u\""], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = H.scc_of u\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<noteq> H.scc_of u", "using \\<open>S \\<in> ?L\\<close> G_scc_of_tail_not_in"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = H.scc_of u\n  S \\<in> H.sccs_verts\n  G.scc_of (tail G a) \\<notin> H.sccs_verts\n\ngoal (1 subgoal):\n 1. G.scc_of (tail G a) \\<noteq> H.scc_of u", "by auto"], ["proof (state)\nthis:\n  G.scc_of (tail G a) \\<noteq> H.scc_of u\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.sccs_verts \\<Longrightarrow>\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)}\n 2. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "ultimately"], ["proof (chain)\npicking this:\n  u \\<in> verts G\n  S = H.scc_of u\n  G.scc_of (tail G a) \\<noteq> H.scc_of u", "show \"S \\<in> ?R\""], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = H.scc_of u\n  G.scc_of (tail G a) \\<noteq> H.scc_of u\n\ngoal (1 subgoal):\n 1. S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n            {H.scc_of (tail G a), H.scc_of (head G a)}", "unfolding G.sccs_verts_conv_scc_of"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = H.scc_of u\n  G.scc_of (tail G a) \\<noteq> H.scc_of u\n\ngoal (1 subgoal):\n 1. S \\<in> G.scc_of ` verts G - {G.scc_of (tail G a)} \\<union>\n            {H.scc_of (tail G a), H.scc_of (head G a)}", "by (cases \"u \\<in> G.scc_of (tail G a)\") (auto dest: scc_of_G_tail scc_of_other)"], ["proof (state)\nthis:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "assume \"S \\<in> ?R\""], ["proof (state)\nthis:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n               {H.scc_of (tail G a), H.scc_of (head G a)} \\<Longrightarrow>\n       x \\<in> H.sccs_verts", "show \"S \\<in> ?L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<in> H.sccs_verts", "proof (cases \"S \\<in> G.sccs_verts\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S \\<in> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts\n 2. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "case True"], ["proof (state)\nthis:\n  S \\<in> G.sccs_verts\n\ngoal (2 subgoals):\n 1. S \\<in> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts\n 2. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "with \\<open>S \\<in> ?R\\<close>"], ["proof (chain)\npicking this:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n  S \\<in> G.sccs_verts", "obtain u where u: \"u \\<in> verts G\" \"S = G.scc_of u\" and \"S \\<noteq> G.scc_of (tail G a)\""], ["proof (prove)\nusing this:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n  S \\<in> G.sccs_verts\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> verts G; S = G.scc_of u;\n         S \\<noteq> G.scc_of (tail G a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using H_scc_of_a_not_in"], ["proof (prove)\nusing this:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n  S \\<in> G.sccs_verts\n  H.scc_of (tail G a) \\<notin> G.sccs_verts\n  H.scc_of (head G a) \\<notin> G.sccs_verts\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>u \\<in> verts G; S = G.scc_of u;\n         S \\<noteq> G.scc_of (tail G a)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: G.sccs_verts_conv_scc_of)"], ["proof (state)\nthis:\n  u \\<in> verts G\n  S = G.scc_of u\n  S \\<noteq> G.scc_of (tail G a)\n\ngoal (2 subgoals):\n 1. S \\<in> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts\n 2. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "then"], ["proof (chain)\npicking this:\n  u \\<in> verts G\n  S = G.scc_of u\n  S \\<noteq> G.scc_of (tail G a)", "have \"G.scc_of u \\<inter> G.scc_of (tail G a) = {}\""], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = G.scc_of u\n  S \\<noteq> G.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. G.scc_of u \\<inter> G.scc_of (tail G a) = {}", "using ends_in"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = G.scc_of u\n  S \\<noteq> G.scc_of (tail G a)\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. G.scc_of u \\<inter> G.scc_of (tail G a) = {}", "by (intro G.sccs_verts_disjoint) (auto simp: G.scc_of_in_sccs_verts)"], ["proof (state)\nthis:\n  G.scc_of u \\<inter> G.scc_of (tail G a) = {}\n\ngoal (2 subgoals):\n 1. S \\<in> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts\n 2. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "then"], ["proof (chain)\npicking this:\n  G.scc_of u \\<inter> G.scc_of (tail G a) = {}", "have \"u \\<notin> G.scc_of (tail G a)\""], ["proof (prove)\nusing this:\n  G.scc_of u \\<inter> G.scc_of (tail G a) = {}\n\ngoal (1 subgoal):\n 1. u \\<notin> G.scc_of (tail G a)", "using u"], ["proof (prove)\nusing this:\n  G.scc_of u \\<inter> G.scc_of (tail G a) = {}\n  u \\<in> verts G\n  S = G.scc_of u\n\ngoal (1 subgoal):\n 1. u \\<notin> G.scc_of (tail G a)", "by (auto dest: G.in_scc_of_self)"], ["proof (state)\nthis:\n  u \\<notin> G.scc_of (tail G a)\n\ngoal (2 subgoals):\n 1. S \\<in> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts\n 2. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "with u"], ["proof (chain)\npicking this:\n  u \\<in> verts G\n  S = G.scc_of u\n  u \\<notin> G.scc_of (tail G a)", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = G.scc_of u\n  u \\<notin> G.scc_of (tail G a)\n\ngoal (1 subgoal):\n 1. S \\<in> H.sccs_verts", "using scc_of_other"], ["proof (prove)\nusing this:\n  u \\<in> verts G\n  S = G.scc_of u\n  u \\<notin> G.scc_of (tail G a)\n  ?u \\<notin> G.scc_of (tail G a) \\<Longrightarrow>\n  H.scc_of ?u = G.scc_of ?u\n\ngoal (1 subgoal):\n 1. S \\<in> H.sccs_verts", "by (auto simp: H.sccs_verts_conv_scc_of verts_H G.sccs_verts_conv_scc_of)"], ["proof (state)\nthis:\n  S \\<in> H.sccs_verts\n\ngoal (1 subgoal):\n 1. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "case False"], ["proof (state)\nthis:\n  S \\<notin> G.sccs_verts\n\ngoal (1 subgoal):\n 1. S \\<notin> G.sccs_verts \\<Longrightarrow> S \\<in> H.sccs_verts", "with \\<open>S \\<in> ?R\\<close> ends_in"], ["proof (chain)\npicking this:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n  {tail G a, head G a} \\<subseteq> verts G\n  S \\<notin> G.sccs_verts", "show ?thesis"], ["proof (prove)\nusing this:\n  S \\<in> G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n          {H.scc_of (tail G a), H.scc_of (head G a)}\n  {tail G a, head G a} \\<subseteq> verts G\n  S \\<notin> G.sccs_verts\n\ngoal (1 subgoal):\n 1. S \\<in> H.sccs_verts", "by (auto simp: H.sccs_verts_conv_scc_of verts_H)"], ["proof (state)\nthis:\n  S \\<in> H.sccs_verts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<in> H.sccs_verts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_sccs_da: \"card H.sccs = Suc (card G.sccs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.sccs = Suc (card G.sccs)", "using H_scc_of_a_not_in ends_in"], ["proof (prove)\nusing this:\n  H.scc_of (tail G a) \\<notin> G.sccs_verts\n  H.scc_of (head G a) \\<notin> G.sccs_verts\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. card H.sccs = Suc (card G.sccs)", "unfolding G.card_sccs_verts[symmetric] H.card_sccs_verts[symmetric] scc_verts_da"], ["proof (prove)\nusing this:\n  H.scc_of (tail G a) \\<notin> G.sccs_verts\n  H.scc_of (head G a) \\<notin> G.sccs_verts\n  {tail G a, head G a} \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. card\n     (G.sccs_verts - {G.scc_of (tail G a)} \\<union>\n      {H.scc_of (tail G a), H.scc_of (head G a)}) =\n    Suc (card G.sccs_verts)", "by (simp add: card_insert_if G.finite_sccs_verts scc_of_tail_neq_head card_Suc_Diff1\n      G.scc_of_in_sccs_verts del: card_Diff_insert)"], ["", "end"], ["", "sublocale bidel_arc_not_biconnected \\<subseteq> bidel_arc_same_face"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_same_face G M a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "note a_in"], ["proof (state)\nthis:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "moreover"], ["proof (state)\nthis:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "from a_in"], ["proof (chain)\npicking this:\n  a \\<in> arcs G", "have \"head G a \\<in> tail G ` G.face_cycle_set a\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. head G a \\<in> tail G ` G.face_cycle_set a", "by (simp add: G.heads_face_cycle_set[symmetric])"], ["proof (state)\nthis:\n  head G a \\<in> tail G ` G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "moreover"], ["proof (state)\nthis:\n  head G a \\<in> tail G ` G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "have \"tail G a \\<in> tail G ` G.face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G a \\<in> tail G ` G.face_cycle_set a", "by simp"], ["proof (state)\nthis:\n  tail G a \\<in> tail G ` G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> arcs G\n  head G a \\<in> tail G ` G.face_cycle_set a\n  tail G a \\<in> tail G ` G.face_cycle_set a", "obtain p where p: \"G.trail (head G a) p (tail G a)\" \"set p \\<subseteq> G.face_cycle_set a\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  head G a \\<in> tail G ` G.face_cycle_set a\n  tail G a \\<in> tail G ` G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>G.trail (head G a) p (tail G a);\n         set p \\<subseteq> G.face_cycle_set a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule G.obtain_trail_in_fcs')"], ["proof (state)\nthis:\n  G.trail (head G a) p (tail G a)\n  set p \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "define p' where \"p' = G.awalk_to_apath p\""], ["proof (state)\nthis:\n  p' = G.awalk_to_apath p\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "from p"], ["proof (chain)\npicking this:\n  G.trail (head G a) p (tail G a)\n  set p \\<subseteq> G.face_cycle_set a", "have p': \"G.apath (head G a) p' (tail G a)\" \"set p' \\<subseteq> G.face_cycle_set a\""], ["proof (prove)\nusing this:\n  G.trail (head G a) p (tail G a)\n  set p \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.apath (head G a) p' (tail G a) &&&\n    set p' \\<subseteq> G.face_cycle_set a", "by (auto simp: G.trail_def p'_def dest: G.apath_awalk_to_apath G.awalk_to_apath_subset)"], ["proof (state)\nthis:\n  G.apath (head G a) p' (tail G a)\n  set p' \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  G.apath (head G a) p' (tail G a)\n  set p' \\<subseteq> G.face_cycle_set a", "have \"set p' \\<subseteq> arcs G\""], ["proof (prove)\nusing this:\n  G.apath (head G a) p' (tail G a)\n  set p' \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. set p' \\<subseteq> arcs G", "using a_in"], ["proof (prove)\nusing this:\n  G.apath (head G a) p' (tail G a)\n  set p' \\<subseteq> G.face_cycle_set a\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. set p' \\<subseteq> arcs G", "by (blast dest: G.in_face_cycle_setD)"], ["proof (state)\nthis:\n  set p' \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "have \"\\<not>set p' \\<subseteq> arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> set p' \\<subseteq> arcs H", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set p' \\<subseteq> arcs H \\<Longrightarrow> False", "assume \"set p' \\<subseteq> arcs H\""], ["proof (state)\nthis:\n  set p' \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. set p' \\<subseteq> arcs H \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  set p' \\<subseteq> arcs H", "have \"H.awalk (head G a) p' (tail G a)\""], ["proof (prove)\nusing this:\n  set p' \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. H.awalk (head G a) p' (tail G a)", "using p'"], ["proof (prove)\nusing this:\n  set p' \\<subseteq> arcs H\n  G.apath (head G a) p' (tail G a)\n  set p' \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. H.awalk (head G a) p' (tail G a)", "by (auto simp: G.apath_def arcs_H intro: H_awalkI)"], ["proof (state)\nthis:\n  H.awalk (head G a) p' (tail G a)\n\ngoal (1 subgoal):\n 1. set p' \\<subseteq> arcs H \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  H.awalk (head G a) p' (tail G a)", "show False"], ["proof (prove)\nusing this:\n  H.awalk (head G a) p' (tail G a)\n\ngoal (1 subgoal):\n 1. False", "using not_reach_a"], ["proof (prove)\nusing this:\n  H.awalk (head G a) p' (tail G a)\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n\ngoal (1 subgoal):\n 1. False", "by (metis H.symmetric_reachable' H.reachable_awalk)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> set p' \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  \\<not> set p' \\<subseteq> arcs H", "have \"set p' \\<inter> {a,a'} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  \\<not> set p' \\<subseteq> arcs H\n\ngoal (1 subgoal):\n 1. set p' \\<inter> {a, a'} \\<noteq> {}", "using \\<open>set p' \\<subseteq> arcs G\\<close>"], ["proof (prove)\nusing this:\n  \\<not> set p' \\<subseteq> arcs H\n  set p' \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. set p' \\<inter> {a, a'} \\<noteq> {}", "by (auto simp: arcs_H)"], ["proof (state)\nthis:\n  set p' \\<inter> {a, a'} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "moreover"], ["proof (state)\nthis:\n  set p' \\<inter> {a, a'} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "have \"a \\<notin> set p'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> set p'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<in> set p' \\<Longrightarrow> False", "assume \"a \\<in> set p'\""], ["proof (state)\nthis:\n  a \\<in> set p'\n\ngoal (1 subgoal):\n 1. a \\<in> set p' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a \\<in> set p'", "have \"head G a \\<in> set (tl (G.awalk_verts (head G a) p'))\""], ["proof (prove)\nusing this:\n  a \\<in> set p'\n\ngoal (1 subgoal):\n 1. head G a \\<in> set (tl (G.awalk_verts (head G a) p'))", "using \\<open>G.apath _ p' _\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> set p'\n  G.apath (head G a) p' (tail G a)\n\ngoal (1 subgoal):\n 1. head G a \\<in> set (tl (G.awalk_verts (head G a) p'))", "by (cases p') (auto simp: G.set_awalk_verts G.apath_def G.awalk_Cons_iff, metis imageI)"], ["proof (state)\nthis:\n  head G a \\<in> set (tl (G.awalk_verts (head G a) p'))\n\ngoal (1 subgoal):\n 1. a \\<in> set p' \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  head G a \\<in> set (tl (G.awalk_verts (head G a) p'))\n\ngoal (1 subgoal):\n 1. a \\<in> set p' \\<Longrightarrow> False", "have \"head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))", "using \\<open>G.apath _ p' _\\<close>"], ["proof (prove)\nusing this:\n  G.apath (head G a) p' (tail G a)\n\ngoal (1 subgoal):\n 1. head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))", "by (cases p') (auto simp: G.apath_def)"], ["proof (state)\nthis:\n  head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))\n\ngoal (1 subgoal):\n 1. a \\<in> set p' \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  head G a \\<in> set (tl (G.awalk_verts (head G a) p'))\n  head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))", "show False"], ["proof (prove)\nusing this:\n  head G a \\<in> set (tl (G.awalk_verts (head G a) p'))\n  head G a \\<notin> set (tl (G.awalk_verts (head G a) p'))\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<notin> set p'\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "ultimately"], ["proof (chain)\npicking this:\n  set p' \\<inter> {a, a'} \\<noteq> {}\n  a \\<notin> set p'", "have \"a' \\<in> G.face_cycle_set a\""], ["proof (prove)\nusing this:\n  set p' \\<inter> {a, a'} \\<noteq> {}\n  a \\<notin> set p'\n\ngoal (1 subgoal):\n 1. a' \\<in> G.face_cycle_set a", "using p'(2)"], ["proof (prove)\nusing this:\n  set p' \\<inter> {a, a'} \\<noteq> {}\n  a \\<notin> set p'\n  set p' \\<subseteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. a' \\<in> G.face_cycle_set a", "by auto"], ["proof (state)\nthis:\n  a' \\<in> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "then"], ["proof (chain)\npicking this:\n  a' \\<in> G.face_cycle_set a", "show \"G.face_cycle_set a' = G.face_cycle_set a\""], ["proof (prove)\nusing this:\n  a' \\<in> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "using G.face_cycle_set_parts"], ["proof (prove)\nusing this:\n  a' \\<in> G.face_cycle_set a\n  G.face_cycle_set ?a = G.face_cycle_set ?b \\<or>\n  G.face_cycle_set ?a \\<inter> G.face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = G.face_cycle_set a", "by auto"], ["proof (state)\nthis:\n  G.face_cycle_set a' = G.face_cycle_set a\n\ngoal:\nNo subgoals!", "qed"], ["", "locale bidel_arc_tail_conn = bidel_arc +\n  assumes conn_tail: \"tail G a \\<notin> H.isolated_verts\""], ["", "locale bidel_arc_head_conn = bidel_arc +\n  assumes conn_head: \"head G a \\<notin> H.isolated_verts\""], ["", "locale bidel_arc_tail_isolated = bidel_arc +\n  assumes isolated_tail: \"tail G a \\<in> H.isolated_verts\""], ["", "locale bidel_arc_head_isolated = bidel_arc +\n  assumes isolated_head: \"head G a \\<in> H.isolated_verts\"\nbegin"], ["", "lemma G_edge_succ_a'_no_loop:\n    assumes no_loop_a: \"head G a \\<noteq> tail G a\" shows G_edge_succ_a': \"edge_succ M a' = a'\" (is ?t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "have *: \"out_arcs G (tail G a') = {a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G (tail G a') = {a'}", "using a_in isolated_head no_loop_a"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  head G a \\<in> H.isolated_verts\n  head G a \\<noteq> tail G a\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a') = {a'}", "by (auto simp: H.isolated_verts_def verts_H out_arcs_def arcs_H tail_H)"], ["proof (state)\nthis:\n  out_arcs G (tail G a') = {a'}\n\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "obtain \"edge_succ M a' \\<in> {a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G.edge_succ_cyclic[of \"tail G a'\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a' \\<in> verts G;\n   out_arcs G (tail G a') \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G (tail G a'))\n\ngoal (1 subgoal):\n 1. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (rule eq_on_cyclic_on_iff1[where x=\"a'\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a' \\<in> verts G\n 2. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a') \\<noteq> {}\n 3. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a' \\<in> out_arcs G (tail G a')\n 4. \\<lbrakk>edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis;\n     edge_succ M a' \\<in> out_arcs G (tail G a');\n     (edge_succ M a' = a') = (card (out_arcs G (tail G a')) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "using * a_in a_neq_a' no_loop_a"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a') = {a'}\n  a \\<in> arcs G\n  a \\<noteq> a'\n  head G a \\<noteq> tail G a\n\ngoal (4 subgoals):\n 1. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a' \\<in> verts G\n 2. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a') \\<noteq> {}\n 3. (edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a' \\<in> out_arcs G (tail G a')\n 4. \\<lbrakk>edge_succ M a' \\<in> {a'} \\<Longrightarrow> thesis;\n     edge_succ M a' \\<in> out_arcs G (tail G a');\n     (edge_succ M a' = a') = (card (out_arcs G (tail G a')) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by simp_all"], ["proof (state)\nthis:\n  edge_succ M a' \\<in> {a'}\n\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "then"], ["proof (chain)\npicking this:\n  edge_succ M a' \\<in> {a'}", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ M a' \\<in> {a'}\n\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "by auto"], ["proof (state)\nthis:\n  edge_succ M a' = a'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma G_face_cycle_succ_a_no_loop:\n    assumes no_loop_a: \"head G a \\<noteq> tail G a\" shows \"G.face_cycle_succ a = a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a'", "using assms"], ["proof (prove)\nusing this:\n  head G a \\<noteq> tail G a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a'", "by (auto simp: G.face_cycle_succ_def G_edge_succ_a'_no_loop)"], ["", "end"], ["", "locale bidel_arc_same_face_tail_conn = bidel_arc_same_face + bidel_arc_tail_conn\nbegin"], ["", "definition a_neigh :: 'b where\n    \"a_neigh \\<equiv> SOME b. G.face_cycle_succ b = a\""], ["", "lemma face_cycle_succ_a_neigh: \"G.face_cycle_succ a_neigh = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a_neigh = a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a_neigh = a", "have \"\\<exists>b. G.face_cycle_succ b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. G.face_cycle_succ b = a", "by (metis G.face_cycle_succ_pred)"], ["proof (state)\nthis:\n  \\<exists>b. G.face_cycle_succ b = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a_neigh = a", "then"], ["proof (chain)\npicking this:\n  \\<exists>b. G.face_cycle_succ b = a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>b. G.face_cycle_succ b = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a_neigh = a", "unfolding a_neigh_def"], ["proof (prove)\nusing this:\n  \\<exists>b. G.face_cycle_succ b = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ (SOME b. G.face_cycle_succ b = a) = a", "by (rule someI_ex)"], ["proof (state)\nthis:\n  G.face_cycle_succ a_neigh = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_neigh_in: \"a_neigh \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_neigh \\<in> arcs G", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. a_neigh \\<in> arcs G", "by (metis face_cycle_succ_a_neigh G.face_cycle_succ_closed)"], ["", "lemma a_neigh_neq_a: \"a_neigh \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_neigh \\<noteq> a", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. a_neigh = a \\<Longrightarrow> False", "assume \"a_neigh = a\""], ["proof (state)\nthis:\n  a_neigh = a\n\ngoal (1 subgoal):\n 1. a_neigh = a \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  a_neigh = a", "have \"G.face_cycle_set a = {a}\""], ["proof (prove)\nusing this:\n  a_neigh = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a = {a}", "using face_cycle_succ_a_neigh"], ["proof (prove)\nusing this:\n  a_neigh = a\n  G.face_cycle_succ a_neigh = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a = {a}", "by (simp add: G.fcs_x_eq_x)"], ["proof (state)\nthis:\n  G.face_cycle_set a = {a}\n\ngoal (1 subgoal):\n 1. a_neigh = a \\<Longrightarrow> False", "with a_neq_a' same_face G.face_cycle_set_self[of a']"], ["proof (chain)\npicking this:\n  a \\<noteq> a'\n  G.face_cycle_set a' = G.face_cycle_set a\n  a' \\<in> G.face_cycle_set a'\n  G.face_cycle_set a = {a}", "show False"], ["proof (prove)\nusing this:\n  a \\<noteq> a'\n  G.face_cycle_set a' = G.face_cycle_set a\n  a' \\<in> G.face_cycle_set a'\n  G.face_cycle_set a = {a}\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma a_neigh_neq_a': \"a_neigh \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_neigh \\<noteq> a'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "assume A: \"a_neigh = a'\""], ["proof (state)\nthis:\n  a_neigh = a'\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "have a_in_oa: \"a \\<in> out_arcs G (tail G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> out_arcs G (tail G a)", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. a \\<in> out_arcs G (tail G a)", "by auto"], ["proof (state)\nthis:\n  a \\<in> out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "have cyc: \"cyclic_on (edge_succ M) (out_arcs G (tail G a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G a))", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G a))", "by (intro G.edge_succ_cyclic) auto"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "from A"], ["proof (chain)\npicking this:\n  a_neigh = a'", "have \"G.face_cycle_succ a' = a\""], ["proof (prove)\nusing this:\n  a_neigh = a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' = a", "by (metis face_cycle_succ_a_neigh)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' = a\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a' = a", "have \"edge_succ M a = a \""], ["proof (prove)\nusing this:\n  G.face_cycle_succ a' = a\n\ngoal (1 subgoal):\n 1. edge_succ M a = a", "by (auto simp: G.face_cycle_succ_def)"], ["proof (state)\nthis:\n  edge_succ M a = a\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  edge_succ M a = a", "have \"card (out_arcs G (tail G a)) = 1\""], ["proof (prove)\nusing this:\n  edge_succ M a = a\n\ngoal (1 subgoal):\n 1. card (out_arcs G (tail G a)) = 1", "using cyc a_in"], ["proof (prove)\nusing this:\n  edge_succ M a = a\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. card (out_arcs G (tail G a)) = 1", "by (auto elim: eq_on_cyclic_on_iff1)"], ["proof (state)\nthis:\n  card (out_arcs G (tail G a)) = 1\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  card (out_arcs G (tail G a)) = 1", "have \"out_arcs G (tail G a) = {a}\""], ["proof (prove)\nusing this:\n  card (out_arcs G (tail G a)) = 1\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a}", "using a_in_oa"], ["proof (prove)\nusing this:\n  card (out_arcs G (tail G a)) = 1\n  a \\<in> out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a}", "by (auto simp del: in_out_arcs_conv dest: card_eq_SucD)"], ["proof (state)\nthis:\n  out_arcs G (tail G a) = {a}\n\ngoal (1 subgoal):\n 1. a_neigh = a' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  out_arcs G (tail G a) = {a}", "show False"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) = {a}\n\ngoal (1 subgoal):\n 1. False", "using conn_tail a_in"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) = {a}\n  tail G a \\<notin> H.isolated_verts\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: H.isolated_verts_def arcs_H tail_H verts_H out_arcs_def)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma edge_rev_a_neigh_neq: \"edge_rev M a_neigh \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev M a_neigh \\<noteq> a'", "by (metis a_neigh_neq_a G.arev_arev)"], ["", "lemma edge_succ_a_neq: \"edge_succ M a \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M a \\<noteq> a'", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. edge_succ M a = a' \\<Longrightarrow> False", "assume \"edge_succ M a = a'\""], ["proof (state)\nthis:\n  edge_succ M a = a'\n\ngoal (1 subgoal):\n 1. edge_succ M a = a' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  edge_succ M a = a'", "have \"G.face_cycle_set a' = {a'}\""], ["proof (prove)\nusing this:\n  edge_succ M a = a'\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = {a'}", "using face_cycle_succ_a_neigh"], ["proof (prove)\nusing this:\n  edge_succ M a = a'\n  G.face_cycle_succ a_neigh = a\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a' = {a'}", "by (auto simp: G.face_cycle_set_altdef id_funpow_id G.face_cycle_succ_def)"], ["proof (state)\nthis:\n  G.face_cycle_set a' = {a'}\n\ngoal (1 subgoal):\n 1. edge_succ M a = a' \\<Longrightarrow> False", "with a_neq_a' same_face G.face_cycle_set_self[of a]"], ["proof (chain)\npicking this:\n  a \\<noteq> a'\n  G.face_cycle_set a' = G.face_cycle_set a\n  a \\<in> G.face_cycle_set a\n  G.face_cycle_set a' = {a'}", "show False"], ["proof (prove)\nusing this:\n  a \\<noteq> a'\n  G.face_cycle_set a' = G.face_cycle_set a\n  a \\<in> G.face_cycle_set a\n  G.face_cycle_set a' = {a'}\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma H_face_cycle_succ_a_neigh: \"H.face_cycle_succ a_neigh = G.face_cycle_succ a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_succ a_neigh = G.face_cycle_succ a'", "using face_cycle_succ_a_neigh edge_succ_a_neq edge_rev_a_neigh_neq a_neigh_neq_a a_neigh_neq_a' a_neigh_in"], ["proof (prove)\nusing this:\n  G.face_cycle_succ a_neigh = a\n  edge_succ M a \\<noteq> a'\n  edge_rev M a_neigh \\<noteq> a'\n  a_neigh \\<noteq> a\n  a_neigh \\<noteq> a'\n  a_neigh \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_succ a_neigh = G.face_cycle_succ a'", "unfolding H.face_cycle_succ_def G.face_cycle_succ_def"], ["proof (prove)\nusing this:\n  (edge_succ M \\<circ> edge_rev M) a_neigh = a\n  edge_succ M a \\<noteq> a'\n  edge_rev M a_neigh \\<noteq> a'\n  a_neigh \\<noteq> a\n  a_neigh \\<noteq> a'\n  a_neigh \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (edge_succ HM \\<circ> edge_rev HM) a_neigh =\n    (edge_succ M \\<circ> edge_rev M) a'", "by (auto simp: HM_def perm_restrict_simps perm_rem_conv G.bij_edge_succ)"], ["", "lemma H_fcs_a_neigh: \"H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a\" (is \"?L = ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "assume A: \"0 < n\" \"n < funpow_dist1 G.face_cycle_succ a' a\""], ["proof (state)\nthis:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a", "have *: \"(G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a\""], ["proof (prove)\nusing this:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a", "using a_in_o"], ["proof (prove)\nusing this:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a\n  a \\<in> orbit G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a", "by (auto simp: segment_altdef)"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a", "have \"(G.face_cycle_succ ^^ n) a' \\<notin> {a,a'}\" \"(G.face_cycle_succ ^^ n) a' \\<in> arcs G\""], ["proof (prove)\nusing this:\n  (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ n) a' \\<notin> {a, a'} &&&\n    (G.face_cycle_succ ^^ n) a' \\<in> arcs G", "using not_in_segment1[OF a_in_o] not_in_segment2[of a G.face_cycle_succ a']"], ["proof (prove)\nusing this:\n  (G.face_cycle_succ ^^ n) a' \\<in> segment G.face_cycle_succ a' a\n  a' \\<notin> segment G.face_cycle_succ a' a\n  a \\<notin> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ n) a' \\<notin> {a, a'} &&&\n    (G.face_cycle_succ ^^ n) a' \\<in> arcs G", "by (auto simp: segment_altdef a_in_o)"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ n) a' \\<notin> {a, a'}\n  (G.face_cycle_succ ^^ n) a' \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "}"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<notin> {a, a'}\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "note X = this"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<notin> {a, a'}\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "{"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<notin> {a, a'}\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ ?n6) a' \\<in> arcs G\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "assume \"0 < n\" \"n < funpow_dist1 G.face_cycle_succ a' a\""], ["proof (state)\nthis:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "then"], ["proof (chain)\npicking this:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a", "have \"(H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\""], ["proof (prove)\nusing this:\n  0 < n\n  n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < 0; 0 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n    \\<Longrightarrow> (H.face_cycle_succ ^^ 0) a_neigh =\n                      (G.face_cycle_succ ^^ 0) a'\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>0 < n;\n                 n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n                \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                                  (G.face_cycle_succ ^^ n) a';\n        0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> (H.face_cycle_succ ^^ Suc n) a_neigh =\n                         (G.face_cycle_succ ^^ Suc n) a'", "case 0"], ["proof (state)\nthis:\n  0 < 0\n  0 < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (2 subgoals):\n 1. \\<lbrakk>0 < 0; 0 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n    \\<Longrightarrow> (H.face_cycle_succ ^^ 0) a_neigh =\n                      (G.face_cycle_succ ^^ 0) a'\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>0 < n;\n                 n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n                \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                                  (G.face_cycle_succ ^^ n) a';\n        0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> (H.face_cycle_succ ^^ Suc n) a_neigh =\n                         (G.face_cycle_succ ^^ Suc n) a'", "then"], ["proof (chain)\npicking this:\n  0 < 0\n  0 < funpow_dist1 G.face_cycle_succ a' a", "show ?case"], ["proof (prove)\nusing this:\n  0 < 0\n  0 < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ 0) a_neigh = (G.face_cycle_succ ^^ 0) a'", "by simp"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ 0) a_neigh = (G.face_cycle_succ ^^ 0) a'\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>0 < n;\n                 n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n                \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                                  (G.face_cycle_succ ^^ n) a';\n        0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> (H.face_cycle_succ ^^ Suc n) a_neigh =\n                         (G.face_cycle_succ ^^ Suc n) a'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>0 < n;\n                 n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n                \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                                  (G.face_cycle_succ ^^ n) a';\n        0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> (H.face_cycle_succ ^^ Suc n) a_neigh =\n                         (G.face_cycle_succ ^^ Suc n) a'", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>0 < n; n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                    (G.face_cycle_succ ^^ n) a'\n  0 < Suc n\n  Suc n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>0 < n;\n                 n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n                \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                                  (G.face_cycle_succ ^^ n) a';\n        0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n       \\<Longrightarrow> (H.face_cycle_succ ^^ Suc n) a_neigh =\n                         (G.face_cycle_succ ^^ Suc n) a'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "proof (cases \"n=0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'\n 2. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "then"], ["proof (chain)\npicking this:\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "by (simp add: H_face_cycle_succ_a_neigh)"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "then"], ["proof (chain)\npicking this:\n  n \\<noteq> 0", "have \"(H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\""], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'", "using Suc"], ["proof (prove)\nusing this:\n  n \\<noteq> 0\n  \\<lbrakk>0 < n; n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                    (G.face_cycle_succ ^^ n) a'\n  0 < Suc n\n  Suc n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'", "by simp"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow>\n    (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "then"], ["proof (chain)\npicking this:\n  (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'", "show ?thesis"], ["proof (prove)\nusing this:\n  (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "using X[of \"Suc n\"] X[of n] False Suc"], ["proof (prove)\nusing this:\n  (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\n  \\<lbrakk>0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ Suc n) a' \\<notin> {a, a'}\n  \\<lbrakk>0 < Suc n; Suc n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ Suc n) a' \\<in> arcs G\n  \\<lbrakk>0 < n; n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ n) a' \\<notin> {a, a'}\n  \\<lbrakk>0 < n; n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (G.face_cycle_succ ^^ n) a' \\<in> arcs G\n  n \\<noteq> 0\n  \\<lbrakk>0 < n; n < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ n) a_neigh =\n                    (G.face_cycle_succ ^^ n) a'\n  0 < Suc n\n  Suc n < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'", "by (simp add: H_fcs_eq_G_fcs)"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ Suc n) a_neigh = (G.face_cycle_succ ^^ Suc n) a'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ n) a_neigh = (G.face_cycle_succ ^^ n) a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "}"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ ?n6) a_neigh =\n                    (G.face_cycle_succ ^^ ?n6) a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "note Y = this"], ["proof (state)\nthis:\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ ?n6) a_neigh =\n                    (G.face_cycle_succ ^^ ?n6) a'\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "have fcs_a'_neq_a: \"G.face_cycle_succ a' \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a' \\<noteq> a", "by (metis (no_types) a_neigh_neq_a' G.face_cycle_pred_succ face_cycle_succ_a_neigh)"], ["proof (state)\nthis:\n  G.face_cycle_succ a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a", "proof (intro set_eqI iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "fix b"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "assume \"b \\<in> ?L\""], ["proof (state)\nthis:\n  b \\<in> H.face_cycle_set a_neigh\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "define m where \"m = funpow_dist1 G.face_cycle_succ a' a - 1\""], ["proof (state)\nthis:\n  m = funpow_dist1 G.face_cycle_succ a' a - 1\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have b_in0: \"b \\<in> orbit H.face_cycle_succ (a_neigh)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<in> orbit H.face_cycle_succ a_neigh", "using \\<open>b \\<in> ?L\\<close>"], ["proof (prove)\nusing this:\n  b \\<in> H.face_cycle_set a_neigh\n\ngoal (1 subgoal):\n 1. b \\<in> orbit H.face_cycle_succ a_neigh", "by (simp add: H.face_cycle_set_def[symmetric])"], ["proof (state)\nthis:\n  b \\<in> orbit H.face_cycle_succ a_neigh\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"0 < m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < m", "by (auto simp: m_def) (metis a_neigh_neq_a' G.face_cycle_pred_succ G.face_cycle_set_def\n          G.face_cycle_set_self G.face_cycle_set_succ face_cycle_succ_a_neigh funpow_dist_0_eq neq0_conv\n          same_face)"], ["proof (state)\nthis:\n  0 < m\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "then"], ["proof (chain)\npicking this:\n  0 < m", "have pos_dist: \"0 < funpow_dist1 H.face_cycle_succ a_neigh b\""], ["proof (prove)\nusing this:\n  0 < m\n\ngoal (1 subgoal):\n 1. 0 < funpow_dist1 H.face_cycle_succ a_neigh b", "by (simp add: m_def)"], ["proof (state)\nthis:\n  0 < funpow_dist1 H.face_cycle_succ a_neigh b\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have *: \"(G.face_cycle_succ ^^ Suc m) a' = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ Suc m) a' = a", "using a_in_o"], ["proof (prove)\nusing this:\n  a \\<in> orbit G.face_cycle_succ a'\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ Suc m) a' = a", "by (simp add: m_def funpow_simp_l funpow_dist1_prop del: funpow.simps)"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ Suc m) a' = a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"(H.face_cycle_succ ^^ m) a_neigh = a_neigh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "have \"a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)", "using * \\<open>0 < m\\<close>"], ["proof (prove)\nusing this:\n  (G.face_cycle_succ ^^ Suc m) a' = a\n  0 < m\n\ngoal (1 subgoal):\n 1. a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)", "by (simp add: Y m_def)"], ["proof (state)\nthis:\n  a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "then"], ["proof (chain)\npicking this:\n  a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)", "show ?thesis"], ["proof (prove)\nusing this:\n  a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "using face_cycle_succ_a_neigh"], ["proof (prove)\nusing this:\n  a = G.face_cycle_succ ((H.face_cycle_succ ^^ m) a_neigh)\n  G.face_cycle_succ a_neigh = a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "by (metis G.face_cycle_pred_succ)"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ m) a_neigh = a_neigh\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ m) a_neigh = a_neigh\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "then"], ["proof (chain)\npicking this:\n  (H.face_cycle_succ ^^ m) a_neigh = a_neigh", "have \"funpow_dist1 H.face_cycle_succ a_neigh b \\<le> m\""], ["proof (prove)\nusing this:\n  (H.face_cycle_succ ^^ m) a_neigh = a_neigh\n\ngoal (1 subgoal):\n 1. funpow_dist1 H.face_cycle_succ a_neigh b \\<le> m", "using \\<open>0 < m\\<close> b_in0"], ["proof (prove)\nusing this:\n  (H.face_cycle_succ ^^ m) a_neigh = a_neigh\n  0 < m\n  b \\<in> orbit H.face_cycle_succ a_neigh\n\ngoal (1 subgoal):\n 1. funpow_dist1 H.face_cycle_succ a_neigh b \\<le> m", "by (intro funpow_dist1_le_self) simp_all"], ["proof (state)\nthis:\n  funpow_dist1 H.face_cycle_succ a_neigh b \\<le> m\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "also"], ["proof (state)\nthis:\n  funpow_dist1 H.face_cycle_succ a_neigh b \\<le> m\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"\\<dots> < funpow_dist1 G.face_cycle_succ a' a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m < funpow_dist1 G.face_cycle_succ a' a", "unfolding m_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. funpow_dist1 G.face_cycle_succ a' a - 1\n    < funpow_dist1 G.face_cycle_succ a' a", "by simp"], ["proof (state)\nthis:\n  m < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "finally"], ["proof (chain)\npicking this:\n  funpow_dist1 H.face_cycle_succ a_neigh b\n  < funpow_dist1 G.face_cycle_succ a' a", "have dist_less: \"funpow_dist1 H.face_cycle_succ a_neigh b\n          < funpow_dist1 G.face_cycle_succ a' a\""], ["proof (prove)\nusing this:\n  funpow_dist1 H.face_cycle_succ a_neigh b\n  < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. funpow_dist1 H.face_cycle_succ a_neigh b\n    < funpow_dist1 G.face_cycle_succ a' a", "."], ["proof (state)\nthis:\n  funpow_dist1 H.face_cycle_succ a_neigh b\n  < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"b = (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b =\n    (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh", "using b_in0"], ["proof (prove)\nusing this:\n  b \\<in> orbit H.face_cycle_succ a_neigh\n\ngoal (1 subgoal):\n 1. b =\n    (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh", "by (simp add: funpow_dist1_prop del: funpow.simps)"], ["proof (state)\nthis:\n  b =\n  (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "also"], ["proof (state)\nthis:\n  b =\n  (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"\\<dots> = (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b)\n     a_neigh =\n    (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'", "using pos_dist dist_less"], ["proof (prove)\nusing this:\n  0 < funpow_dist1 H.face_cycle_succ a_neigh b\n  funpow_dist1 H.face_cycle_succ a_neigh b\n  < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b)\n     a_neigh =\n    (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'", "by (rule Y)"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh =\n  (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "also"], ["proof (state)\nthis:\n  (H.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a_neigh =\n  (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "have \"\\<dots> \\<in> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\n    \\<in> segment G.face_cycle_succ a' a", "using pos_dist dist_less"], ["proof (prove)\nusing this:\n  0 < funpow_dist1 H.face_cycle_succ a_neigh b\n  funpow_dist1 H.face_cycle_succ a_neigh b\n  < funpow_dist1 G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\n    \\<in> segment G.face_cycle_succ a' a", "by (simp add: segment_altdef a_in_o del: funpow.simps)"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ funpow_dist1 H.face_cycle_succ a_neigh b) a'\n  \\<in> segment G.face_cycle_succ a' a\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> H.face_cycle_set a_neigh \\<Longrightarrow>\n       x \\<in> segment G.face_cycle_succ a' a\n 2. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "finally"], ["proof (chain)\npicking this:\n  b \\<in> segment G.face_cycle_succ a' a", "show \"b \\<in> ?R\""], ["proof (prove)\nusing this:\n  b \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. b \\<in> segment G.face_cycle_succ a' a", "."], ["proof (state)\nthis:\n  b \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "fix b"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "assume \"b \\<in> ?R\""], ["proof (state)\nthis:\n  b \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> segment G.face_cycle_succ a' a \\<Longrightarrow>\n       x \\<in> H.face_cycle_set a_neigh", "then"], ["proof (chain)\npicking this:\n  b \\<in> segment G.face_cycle_succ a' a", "show \"b \\<in> ?L\""], ["proof (prove)\nusing this:\n  b \\<in> segment G.face_cycle_succ a' a\n\ngoal (1 subgoal):\n 1. b \\<in> H.face_cycle_set a_neigh", "using Y"], ["proof (prove)\nusing this:\n  b \\<in> segment G.face_cycle_succ a' a\n  \\<lbrakk>0 < ?n6; ?n6 < funpow_dist1 G.face_cycle_succ a' a\\<rbrakk>\n  \\<Longrightarrow> (H.face_cycle_succ ^^ ?n6) a_neigh =\n                    (G.face_cycle_succ ^^ ?n6) a'\n\ngoal (1 subgoal):\n 1. b \\<in> H.face_cycle_set a_neigh", "by (auto simp: segment_altdef a_in_o H.face_cycle_set_altdef Suc_le_eq) metis"], ["proof (state)\nthis:\n  b \\<in> H.face_cycle_set a_neigh\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H.face_cycle_set a_neigh = segment G.face_cycle_succ a' a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "locale bidel_arc_isolated_loop =\n  bidel_arc_biconnected + bidel_arc_tail_isolated\nbegin"], ["", "lemma loop_a[simp]: \"head G a = tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head G a = tail G a", "using isolated_tail reach_a"], ["proof (prove)\nusing this:\n  tail G a \\<in> H.isolated_verts\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n\ngoal (1 subgoal):\n 1. head G a = tail G a", "by (auto simp: H.isolated_verts_def\n      elim: H.converse_reachable_cases dest: out_arcs_emptyD_dominates)"], ["", "end"], ["", "sublocale bidel_arc_isolated_loop \\<subseteq> bidel_arc_head_isolated"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_head_isolated G M a", "using isolated_tail loop_a"], ["proof (prove)\nusing this:\n  tail G a \\<in> H.isolated_verts\n  head G a = tail G a\n\ngoal (1 subgoal):\n 1. bidel_arc_head_isolated G M a", "by unfold_locales simp"], ["", "context bidel_arc_isolated_loop begin"], ["", "text \\<open>The edges @{term a} and @{term a'} form a loop on an otherwise isolated vertex \\<close>"], ["", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (card G.isolated_verts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.isolated_verts = Suc (card G.isolated_verts)", "by (simp add: card_isolated_verts_da0 isolated_tail)"], ["", "lemma\n    G_edge_succ_a[simp]: \"edge_succ M a = a'\" (is ?t1) and\n    G_edge_succ_a'[simp]: \"edge_succ M a' = a\" (is ?t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M a = a' &&& edge_succ M a' = a", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. edge_succ M a = a'\n 2. edge_succ M a' = a", "have *: \"out_arcs G (tail G a) = {a,a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a, a'}", "using a_in isolated_tail"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  tail G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a, a'}", "by (auto simp: H.isolated_verts_def verts_H out_arcs_def arcs_H tail_H)"], ["proof (state)\nthis:\n  out_arcs G (tail G a) = {a, a'}\n\ngoal (2 subgoals):\n 1. edge_succ M a = a'\n 2. edge_succ M a' = a", "obtain \"edge_succ M a' \\<in> {a,a'}\" \"edge_succ M a' \\<noteq> a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G.edge_succ_cyclic[of \"tail G a'\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a' \\<in> verts G;\n   out_arcs G (tail G a') \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G (tail G a'))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (rule eq_on_cyclic_on_iff1[where x=\"a'\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a' \\<in> verts G\n 2. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a') \\<noteq> {}\n 3. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a' \\<in> out_arcs G (tail G a')\n 4. \\<lbrakk>\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n              edge_succ M a' \\<noteq> a'\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     edge_succ M a' \\<in> out_arcs G (tail G a');\n     (edge_succ M a' = a') = (card (out_arcs G (tail G a')) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "using * a_in a_neq_a' loop_a"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) = {a, a'}\n  a \\<in> arcs G\n  a \\<noteq> a'\n  head G a = tail G a\n\ngoal (4 subgoals):\n 1. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a' \\<in> verts G\n 2. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a') \\<noteq> {}\n 3. (\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n      edge_succ M a' \\<noteq> a'\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a' \\<in> out_arcs G (tail G a')\n 4. \\<lbrakk>\\<lbrakk>edge_succ M a' \\<in> {a, a'};\n              edge_succ M a' \\<noteq> a'\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     edge_succ M a' \\<in> out_arcs G (tail G a');\n     (edge_succ M a' = a') = (card (out_arcs G (tail G a')) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  edge_succ M a' \\<in> {a, a'}\n  edge_succ M a' \\<noteq> a'\n\ngoal (2 subgoals):\n 1. edge_succ M a = a'\n 2. edge_succ M a' = a", "moreover"], ["proof (state)\nthis:\n  edge_succ M a' \\<in> {a, a'}\n  edge_succ M a' \\<noteq> a'\n\ngoal (2 subgoals):\n 1. edge_succ M a = a'\n 2. edge_succ M a' = a", "obtain \"edge_succ M a \\<in> {a,a'}\" \"edge_succ M a \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G.edge_succ_cyclic[of \"tail G a\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a \\<in> verts G;\n   out_arcs G (tail G a) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (rule eq_on_cyclic_on_iff1[where x=\"a\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a \\<in> verts G\n 2. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a) \\<noteq> {}\n 3. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a \\<in> out_arcs G (tail G a)\n 4. \\<lbrakk>\\<lbrakk>edge_succ M a \\<in> {a, a'};\n              edge_succ M a \\<noteq> a\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     edge_succ M a \\<in> out_arcs G (tail G a);\n     (edge_succ M a = a) = (card (out_arcs G (tail G a)) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "using * a_in a_neq_a' loop_a"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) = {a, a'}\n  a \\<in> arcs G\n  a \\<noteq> a'\n  head G a = tail G a\n\ngoal (4 subgoals):\n 1. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a \\<in> verts G\n 2. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a) \\<noteq> {}\n 3. (\\<lbrakk>edge_succ M a \\<in> {a, a'}; edge_succ M a \\<noteq> a\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a \\<in> out_arcs G (tail G a)\n 4. \\<lbrakk>\\<lbrakk>edge_succ M a \\<in> {a, a'};\n              edge_succ M a \\<noteq> a\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     edge_succ M a \\<in> out_arcs G (tail G a);\n     (edge_succ M a = a) = (card (out_arcs G (tail G a)) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  edge_succ M a \\<in> {a, a'}\n  edge_succ M a \\<noteq> a\n\ngoal (2 subgoals):\n 1. edge_succ M a = a'\n 2. edge_succ M a' = a", "ultimately"], ["proof (chain)\npicking this:\n  edge_succ M a' \\<in> {a, a'}\n  edge_succ M a' \\<noteq> a'\n  edge_succ M a \\<in> {a, a'}\n  edge_succ M a \\<noteq> a", "show ?t1 ?t2"], ["proof (prove)\nusing this:\n  edge_succ M a' \\<in> {a, a'}\n  edge_succ M a' \\<noteq> a'\n  edge_succ M a \\<in> {a, a'}\n  edge_succ M a \\<noteq> a\n\ngoal (1 subgoal):\n 1. edge_succ M a = a' &&& edge_succ M a' = a", "by auto"], ["proof (state)\nthis:\n  edge_succ M a = a'\n  edge_succ M a' = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n    G_face_cycle_succ_a[simp]: \"G.face_cycle_succ a = a\" and\n    G_face_cycle_succ_a'[simp]: \"G.face_cycle_succ a' = a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a &&& G.face_cycle_succ a' = a'", "by (auto simp: G.face_cycle_succ_def)"], ["", "lemma\n    G_face_cycle_set_a[simp]: \"G.face_cycle_set a = {a}\" and\n    G_face_cycle_set_a'[simp]: \"G.face_cycle_set a' = {a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a = {a} &&& G.face_cycle_set a' = {a'}", "unfolding G.fcs_x_eq_x[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a &&& G.face_cycle_succ a' = a'", "by simp_all"], ["", "end"], ["", "sublocale bidel_arc_isolated_loop \\<subseteq> bidel_arc_diff_face"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_diff_face G M a", "using a_neq_a'"], ["proof (prove)\nusing this:\n  a \\<noteq> a'\n\ngoal (1 subgoal):\n 1. bidel_arc_diff_face G M a", "by unfold_locales auto"], ["", "context bidel_arc_isolated_loop begin"], ["", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (Suc (card H.face_cycle_sets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets = Suc (Suc (card H.face_cycle_sets))", "unfolding card_face_cycle_sets_da'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (Suc (card G.face_cycle_sets -\n              card {G.face_cycle_set a, G.face_cycle_set a'} +\n              (if S = {} then 0 else 1)))", "using diff_face card_fcs_aa'_le"], ["proof (prove)\nusing this:\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n  card {G.face_cycle_set a, G.face_cycle_set a'}\n  \\<le> card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (Suc (card G.face_cycle_sets -\n              card {G.face_cycle_set a, G.face_cycle_set a'} +\n              (if S = {} then 0 else 1)))", "by (auto simp: card_insert_if S_def G.segment_face_cycle_x_x_eq)"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2 =\n    (int (2 * card G.sccs) - int (card G.isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G.face_cycle_sets))) div\n    2", "by (simp add: card_isolated_verts_da verts_H card_arcs_da card_face_cycle_sets_da card_sccs_da)"], ["", "end"], ["", "locale bidel_arc_two_isolated =\n  bidel_arc_not_biconnected + bidel_arc_tail_isolated + bidel_arc_head_isolated\nbegin"], ["", "text \\<open>@{term \"tail G a\"} and @{term \"head G a\"} form an SCC with @{term a} and @{term a'} as the only arcs.\\<close>"], ["", "lemma no_loop_a: \"head G a \\<noteq> tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head G a \\<noteq> tail G a", "using not_reach_a a_in"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. head G a \\<noteq> tail G a", "by (auto simp: verts_H)"], ["", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (Suc (card G.isolated_verts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.isolated_verts = Suc (Suc (card G.isolated_verts))", "using no_loop_a isolated_tail isolated_head"], ["proof (prove)\nusing this:\n  head G a \\<noteq> tail G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. card H.isolated_verts = Suc (Suc (card G.isolated_verts))", "by (simp add: card_isolated_verts_da0 card_insert_if)"], ["", "lemma G_edge_succ_a'[simp]: \"edge_succ M a' = a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "using G_edge_succ_a'_no_loop no_loop_a"], ["proof (prove)\nusing this:\n  head G a \\<noteq> tail G a \\<Longrightarrow> edge_succ M a' = a'\n  head G a \\<noteq> tail G a\n\ngoal (1 subgoal):\n 1. edge_succ M a' = a'", "by simp"], ["", "lemma G_edge_succ_a[simp]: \"edge_succ M a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M a = a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. edge_succ M a = a", "have *: \"out_arcs G (tail G a) = {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a}", "using a_in isolated_tail isolated_head no_loop_a"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  tail G a \\<in> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n  head G a \\<noteq> tail G a\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) = {a}", "by (auto simp: H.isolated_verts_def verts_H out_arcs_def arcs_H tail_H)"], ["proof (state)\nthis:\n  out_arcs G (tail G a) = {a}\n\ngoal (1 subgoal):\n 1. edge_succ M a = a", "obtain \"edge_succ M a \\<in> {a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using G.edge_succ_cyclic[of \"tail G a\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a \\<in> verts G;\n   out_arcs G (tail G a) \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (1 subgoal):\n 1. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (rule eq_on_cyclic_on_iff1[where x=\"a\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a \\<in> verts G\n 2. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a) \\<noteq> {}\n 3. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a \\<in> out_arcs G (tail G a)\n 4. \\<lbrakk>edge_succ M a \\<in> {a} \\<Longrightarrow> thesis;\n     edge_succ M a \\<in> out_arcs G (tail G a);\n     (edge_succ M a = a) = (card (out_arcs G (tail G a)) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "using * a_in a_neq_a' no_loop_a"], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) = {a}\n  a \\<in> arcs G\n  a \\<noteq> a'\n  head G a \\<noteq> tail G a\n\ngoal (4 subgoals):\n 1. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    tail G a \\<in> verts G\n 2. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    out_arcs G (tail G a) \\<noteq> {}\n 3. (edge_succ M a \\<in> {a} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    a \\<in> out_arcs G (tail G a)\n 4. \\<lbrakk>edge_succ M a \\<in> {a} \\<Longrightarrow> thesis;\n     edge_succ M a \\<in> out_arcs G (tail G a);\n     (edge_succ M a = a) = (card (out_arcs G (tail G a)) = 1)\\<rbrakk>\n    \\<Longrightarrow> thesis", "by simp_all"], ["proof (state)\nthis:\n  edge_succ M a \\<in> {a}\n\ngoal (1 subgoal):\n 1. edge_succ M a = a", "then"], ["proof (chain)\npicking this:\n  edge_succ M a \\<in> {a}", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ M a \\<in> {a}\n\ngoal (1 subgoal):\n 1. edge_succ M a = a", "by auto"], ["proof (state)\nthis:\n  edge_succ M a = a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n    G_face_cycle_succ_a[simp]: \"G.face_cycle_succ a = a'\" and\n    G_face_cycle_succ_a'[simp]: \"G.face_cycle_succ a' = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a' &&& G.face_cycle_succ a' = a", "by (auto simp: G.face_cycle_succ_def)"], ["", "lemma\n    G_face_cycle_set_a[simp]: \"G.face_cycle_set a = {a,a'}\" (is ?t1) and\n    G_face_cycle_set_a'[simp]: \"G.face_cycle_set a' = {a,a'}\" (is ?t2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a = {a, a'} &&& G.face_cycle_set a' = {a, a'}", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_set a = {a, a'}\n 2. G.face_cycle_set a' = {a, a'}", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_set a = {a, a'}\n 2. G.face_cycle_set a' = {a, a'}", "fix n"], ["proof (state)\ngoal (2 subgoals):\n 1. G.face_cycle_set a = {a, a'}\n 2. G.face_cycle_set a' = {a, a'}", "have \"(G.face_cycle_succ ^^ n) a \\<in> {a,a'}\" \"(G.face_cycle_succ ^^ n) a' \\<in> {a,a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G.face_cycle_succ ^^ n) a \\<in> {a, a'} &&&\n    (G.face_cycle_succ ^^ n) a' \\<in> {a, a'}", "by (induct n) auto"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ n) a \\<in> {a, a'}\n  (G.face_cycle_succ ^^ n) a' \\<in> {a, a'}\n\ngoal (2 subgoals):\n 1. G.face_cycle_set a = {a, a'}\n 2. G.face_cycle_set a' = {a, a'}", "}"], ["proof (state)\nthis:\n  (G.face_cycle_succ ^^ ?n6) a \\<in> {a, a'}\n  (G.face_cycle_succ ^^ ?n6) a' \\<in> {a, a'}\n\ngoal (2 subgoals):\n 1. G.face_cycle_set a = {a, a'}\n 2. G.face_cycle_set a' = {a, a'}", "then"], ["proof (chain)\npicking this:\n  (G.face_cycle_succ ^^ ?n6) a \\<in> {a, a'}\n  (G.face_cycle_succ ^^ ?n6) a' \\<in> {a, a'}", "show ?t1 ?t2"], ["proof (prove)\nusing this:\n  (G.face_cycle_succ ^^ ?n6) a \\<in> {a, a'}\n  (G.face_cycle_succ ^^ ?n6) a' \\<in> {a, a'}\n\ngoal (1 subgoal):\n 1. G.face_cycle_set a = {a, a'} &&& G.face_cycle_set a' = {a, a'}", "by (auto simp: G.face_cycle_set_altdef intro: exI[where x=0] exI[where x=1])"], ["proof (state)\nthis:\n  G.face_cycle_set a = {a, a'}\n  G.face_cycle_set a' = {a, a'}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (card H.face_cycle_sets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets = Suc (card H.face_cycle_sets)", "unfolding card_face_cycle_sets_da0"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (card G.face_cycle_sets -\n         card {G.face_cycle_set a, G.face_cycle_set a'} +\n         card\n          (H.face_cycle_set `\n           (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})))", "using card_fcs_aa'_le"], ["proof (prove)\nusing this:\n  card {G.face_cycle_set a, G.face_cycle_set a'}\n  \\<le> card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (card G.face_cycle_sets -\n         card {G.face_cycle_set a, G.face_cycle_set a'} +\n         card\n          (H.face_cycle_set `\n           (G.face_cycle_set a \\<union> G.face_cycle_set a' - {a, a'})))", "by simp"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2 =\n    (int (2 * card G.sccs) - int (card G.isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G.face_cycle_sets))) div\n    2", "by (simp add: card_isolated_verts_da verts_H card_arcs_da card_face_cycle_sets_da card_sccs_da)"], ["", "end"], ["", "locale bidel_arc_tail_not_isol = bidel_arc_not_biconnected +\n  bidel_arc_tail_conn"], ["", "sublocale bidel_arc_tail_not_isol \\<subseteq> bidel_arc_same_face_tail_conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_same_face_tail_conn G M a", "by unfold_locales"], ["", "locale bidel_arc_only_tail_not_isol = bidel_arc_tail_not_isol +\n  bidel_arc_head_isolated"], ["", "context bidel_arc_only_tail_not_isol\nbegin"], ["", "lemma card_isolated_verts_da: \"card H.isolated_verts = Suc (card G.isolated_verts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.isolated_verts = Suc (card G.isolated_verts)", "using isolated_head conn_tail"], ["proof (prove)\nusing this:\n  head G a \\<in> H.isolated_verts\n  tail G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. card H.isolated_verts = Suc (card G.isolated_verts)", "by (simp add: card_isolated_verts_da0)"], ["", "lemma segment_a'_a_ne: \"segment G.face_cycle_succ a' a \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<noteq> {}", "unfolding H_fcs_a_neigh[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh \\<noteq> {}", "by auto"], ["", "lemma segment_a_a'_e: \"segment G.face_cycle_succ a a' = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' = {}", "have \"a' = G.face_cycle_succ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a' = G.face_cycle_succ a", "using tail_neq_head"], ["proof (prove)\nusing this:\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. a' = G.face_cycle_succ a", "by (simp add: G_face_cycle_succ_a_no_loop)"], ["proof (state)\nthis:\n  a' = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' = {}", "then"], ["proof (chain)\npicking this:\n  a' = G.face_cycle_succ a", "show ?thesis"], ["proof (prove)\nusing this:\n  a' = G.face_cycle_succ a\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' = {}", "by (auto simp: segment1_empty)"], ["proof (state)\nthis:\n  segment G.face_cycle_succ a a' = {}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_face_cycle_sets_da: \"card H.face_cycle_sets = card G.face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets = card G.face_cycle_sets", "unfolding card_face_cycle_sets_da'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}}) =\n    card G.face_cycle_sets", "using segment_a'_a_ne segment_a_a'_e card_fcs_gt_0"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a \\<noteq> {}\n  segment G.face_cycle_succ a a' = {}\n  0 < card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}}) =\n    card G.face_cycle_sets", "by (simp add: card_insert_if)"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2 =\n    (int (2 * card G.sccs) - int (card G.isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G.face_cycle_sets))) div\n    2", "by (simp add: card_isolated_verts_da verts_H card_arcs_da card_face_cycle_sets_da card_sccs_da)"], ["", "end"], ["", "locale bidel_arc_only_head_not_isol = bidel_arc_not_biconnected +\n  bidel_arc_head_conn +\n  bidel_arc_tail_isolated\nbegin"], ["", "interpretation rev: bidel_arc G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc G M a'", "using a_in"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. bidel_arc G M a'", "by unfold_locales simp"], ["", "interpretation rev: bidel_arc_only_tail_not_isol G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_only_tail_not_isol G M a'", "using a_in not_reach_a"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n\ngoal (1 subgoal):\n 1. bidel_arc_only_tail_not_isol G M a'", "by unfold_locales (auto simp: rev_H isolated_tail conn_head dest: H.symmetric_reachable')"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "using rev.euler_genus_da"], ["proof (prove)\nusing this:\n  rev.H.euler_genus = G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "by (simp add: rev_H rev_HM)"], ["", "end"], ["", "locale bidel_arc_two_not_isol = bidel_arc_tail_not_isol +\n  bidel_arc_head_conn\nbegin"], ["", "lemma isolated_verts_da: \"H.isolated_verts = G.isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.isolated_verts = G.isolated_verts", "using conn_head conn_tail"], ["proof (prove)\nusing this:\n  head G a \\<notin> H.isolated_verts\n  tail G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.isolated_verts = G.isolated_verts", "by (subst isolated_da_pre) simp"], ["", "lemma segment_a'_a_ne': \"segment G.face_cycle_succ a' a \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a' a \\<noteq> {}", "unfolding H_fcs_a_neigh[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.face_cycle_set a_neigh \\<noteq> {}", "by auto"], ["", "interpretation rev: bidel_arc_tail_not_isol G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_tail_not_isol G M a'", "using arcs_in not_reach_a rev_H conn_head"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  bidel_arc.H G M a' = H\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_tail_not_isol G M a'", "by unfold_locales (auto dest: H.symmetric_reachable')"], ["", "lemma segment_a_a'_ne': \"segment G.face_cycle_succ a a' \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> {}", "using rev.H_fcs_a_neigh[symmetric] rev_H rev_HM"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ rev.a' a' = rev.H.face_cycle_set rev.a_neigh\n  rev.H = H\n  rev.HM = HM\n\ngoal (1 subgoal):\n 1. segment G.face_cycle_succ a a' \\<noteq> {}", "by auto"], ["", "lemma card_face_cycle_sets_da: \"card H.face_cycle_sets = Suc (card G.face_cycle_sets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card H.face_cycle_sets = Suc (card G.face_cycle_sets)", "unfolding card_face_cycle_sets_da'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}}) =\n    Suc (card G.face_cycle_sets)", "using segment_a'_a_ne' segment_a_a'_ne' card_fcs_gt_0"], ["proof (prove)\nusing this:\n  segment G.face_cycle_succ a' a \\<noteq> {}\n  segment G.face_cycle_succ a a' \\<noteq> {}\n  0 < card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets - 1 +\n    card\n     ({segment G.face_cycle_succ a a', segment G.face_cycle_succ a' a, {}} -\n      {{}}) =\n    Suc (card G.face_cycle_sets)", "by (simp add: segments_neq card_insert_if)"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2 =\n    (int (2 * card G.sccs) - int (card G.isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G.face_cycle_sets))) div\n    2", "by (simp add: isolated_verts_da verts_H card_arcs_da card_face_cycle_sets_da card_sccs_da)"], ["", "end"], ["", "locale bidel_arc_biconnected_non_triv = bidel_arc_biconnected +\n  bidel_arc_tail_conn"], ["", "sublocale bidel_arc_biconnected_non_triv \\<subseteq> bidel_arc_head_conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_head_conn G M a", "by unfold_locales (metis (mono_tags) G.in_sccs_verts_conv_reachable G.symmetric_reachable'\n    H.isolated_verts_in_sccs conn_tail empty_iff insert_iff reach_a reachable_daD sccs_verts_da)"], ["", "context bidel_arc_biconnected_non_triv begin"], ["", "lemma isolated_verts_da: \"H.isolated_verts = G.isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.isolated_verts = G.isolated_verts", "using conn_head conn_tail"], ["proof (prove)\nusing this:\n  head G a \\<notin> H.isolated_verts\n  tail G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.isolated_verts = G.isolated_verts", "by (subst isolated_da_pre) simp"], ["", "end"], ["", "locale bidel_arc_biconnected_same = bidel_arc_biconnected_non_triv +\n  bidel_arc_same_face"], ["", "sublocale bidel_arc_biconnected_same \\<subseteq> bidel_arc_same_face_tail_conn"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_same_face_tail_conn G M a", "by unfold_locales"], ["", "context bidel_arc_biconnected_same begin"], ["", "interpretation rev: bidel_arc_same_face_tail_conn G M a'"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc_same_face_tail_conn G M a'", "using arcs_in conn_head"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_same_face_tail_conn G M a'", "by unfold_locales (auto simp: same_face rev_H)"], ["", "lemma card_face_cycle_sets_da: \"Suc (card H.face_cycle_sets) \\<ge> (card G.face_cycle_sets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets \\<le> Suc (card H.face_cycle_sets)", "unfolding card_face_cycle_sets_da'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets\n    \\<le> Suc (card G.face_cycle_sets - 1 +\n               card\n                ({segment G.face_cycle_succ a a',\n                  segment G.face_cycle_succ a' a, {}} -\n                 {{}}))", "using card_fcs_gt_0"], ["proof (prove)\nusing this:\n  0 < card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets\n    \\<le> Suc (card G.face_cycle_sets - 1 +\n               card\n                ({segment G.face_cycle_succ a a',\n                  segment G.face_cycle_succ a' a, {}} -\n                 {{}}))", "by linarith"], ["", "lemma euler_genus_da: \"H.euler_genus \\<le> G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "using card_face_cycle_sets_da"], ["proof (prove)\nusing this:\n  card G.face_cycle_sets \\<le> Suc (card H.face_cycle_sets)\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\nusing this:\n  card G.face_cycle_sets \\<le> Suc (card H.face_cycle_sets)\n\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2\n    \\<le> (int (2 * card G.sccs) - int (card G.isolated_verts) -\n           (int (card (verts G)) - int (card (arcs G) div 2) +\n            int (card G.face_cycle_sets))) div\n          2", "by (simp add: isolated_verts_da verts_H card_arcs_da card_sccs_da )"], ["", "end"], ["", "locale bidel_arc_biconnected_diff = bidel_arc_biconnected_non_triv +\n  bidel_arc_diff_face\nbegin"], ["", "lemma fcs_not_triv: \"G.face_cycle_set a \\<noteq> {a} \\<or> G.face_cycle_set a' \\<noteq> {a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G.face_cycle_set a \\<noteq> {a} \\<or> G.face_cycle_set a' \\<noteq> {a'}", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "assume \"\\<not>?thesis\""], ["proof (state)\nthis:\n  \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n          G.face_cycle_set a' \\<noteq> {a'})\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n          G.face_cycle_set a' \\<noteq> {a'})", "have \"G.face_cycle_succ a = a\" \"G.face_cycle_succ a' = a'\""], ["proof (prove)\nusing this:\n  \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n          G.face_cycle_set a' \\<noteq> {a'})\n\ngoal (1 subgoal):\n 1. G.face_cycle_succ a = a &&& G.face_cycle_succ a' = a'", "by (auto simp: G.fcs_x_eq_x)"], ["proof (state)\nthis:\n  G.face_cycle_succ a = a\n  G.face_cycle_succ a' = a'\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  G.face_cycle_succ a = a\n  G.face_cycle_succ a' = a'", "have *: \"edge_succ M a = a'\" \"edge_succ M a' = a\""], ["proof (prove)\nusing this:\n  G.face_cycle_succ a = a\n  G.face_cycle_succ a' = a'\n\ngoal (1 subgoal):\n 1. edge_succ M a = a' &&& edge_succ M a' = a", "by (auto simp: G.face_cycle_succ_def)"], ["proof (state)\nthis:\n  edge_succ M a = a'\n  edge_succ M a' = a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  edge_succ M a = a'\n  edge_succ M a' = a", "have \"(edge_succ M ^^ 2) a = a\""], ["proof (prove)\nusing this:\n  edge_succ M a = a'\n  edge_succ M a' = a\n\ngoal (1 subgoal):\n 1. (edge_succ M ^^ 2) a = a", "by (auto simp: eval_nat_numeral)"], ["proof (state)\nthis:\n  (edge_succ M ^^ 2) a = a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "{"], ["proof (state)\nthis:\n  (edge_succ M ^^ 2) a = a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "have \"(edge_succ M ^^ 2) a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_succ M ^^ 2) a = a", "by (auto simp: * eval_nat_numeral)"], ["proof (state)\nthis:\n  (edge_succ M ^^ 2) a = a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (edge_succ M ^^ 2) a = a", "have \"(edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a\""], ["proof (prove)\nusing this:\n  (edge_succ M ^^ 2) a = a\n\ngoal (1 subgoal):\n 1. (edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a", "by (auto simp: funpow_mod_eq)"], ["proof (state)\nthis:\n  (edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "have \"n mod 2 = 0 \\<or> n mod 2 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n mod 2 = 0 \\<or> n mod 2 = 1", "by auto"], ["proof (state)\nthis:\n  n mod 2 = 0 \\<or> n mod 2 = 1\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a\n  n mod 2 = 0 \\<or> n mod 2 = 1", "have \"(edge_succ M ^^ n) a \\<in> {a, a'}\""], ["proof (prove)\nusing this:\n  (edge_succ M ^^ n) a = (edge_succ M ^^ (n mod 2)) a\n  n mod 2 = 0 \\<or> n mod 2 = 1\n\ngoal (1 subgoal):\n 1. (edge_succ M ^^ n) a \\<in> {a, a'}", "by (auto simp: *)"], ["proof (state)\nthis:\n  (edge_succ M ^^ n) a \\<in> {a, a'}\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "}"], ["proof (state)\nthis:\n  (edge_succ M ^^ ?n6) a \\<in> {a, a'}\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  (edge_succ M ^^ ?n6) a \\<in> {a, a'}", "have \"orbit (edge_succ M) a = {a, a'}\""], ["proof (prove)\nusing this:\n  (edge_succ M ^^ ?n6) a \\<in> {a, a'}\n\ngoal (1 subgoal):\n 1. orbit (edge_succ M) a = {a, a'}", "by (auto simp: orbit_altdef_permutation[OF G.permutation_edge_succ] exI[where x=0] exI[where x=1] *)"], ["proof (state)\nthis:\n  orbit (edge_succ M) a = {a, a'}\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "have \"out_arcs G (tail G a) \\<subseteq> {a,a'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "have \"cyclic_on (edge_succ M) (out_arcs G (tail G a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G a))", "using arcs_in"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G a))", "by (intro G.edge_succ_cyclic) auto"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "then"], ["proof (chain)\npicking this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))", "have \"orbit (edge_succ M) a = out_arcs G (tail G a)\""], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (1 subgoal):\n 1. orbit (edge_succ M) a = out_arcs G (tail G a)", "using arcs_in"], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n  {a, a'} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. orbit (edge_succ M) a = out_arcs G (tail G a)", "by (intro orbit_cyclic_eq3) auto"], ["proof (state)\nthis:\n  orbit (edge_succ M) a = out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "then"], ["proof (chain)\npicking this:\n  orbit (edge_succ M) a = out_arcs G (tail G a)", "show ?thesis"], ["proof (prove)\nusing this:\n  orbit (edge_succ M) a = out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "using \\<open>orbit _ _ = {_, _}\\<close>"], ["proof (prove)\nusing this:\n  orbit (edge_succ M) a = out_arcs G (tail G a)\n  orbit (edge_succ M) a = {a, a'}\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<subseteq> {a, a'}", "by auto"], ["proof (state)\nthis:\n  out_arcs G (tail G a) \\<subseteq> {a, a'}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  out_arcs G (tail G a) \\<subseteq> {a, a'}\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  out_arcs G (tail G a) \\<subseteq> {a, a'}", "have \"out_arcs H (tail G a) = {}\""], ["proof (prove)\nusing this:\n  out_arcs G (tail G a) \\<subseteq> {a, a'}\n\ngoal (1 subgoal):\n 1. out_arcs H (tail G a) = {}", "by (auto simp: arcs_H tail_H)"], ["proof (state)\nthis:\n  out_arcs H (tail G a) = {}\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  out_arcs H (tail G a) = {}", "have \"tail G a \\<in> H.isolated_verts\""], ["proof (prove)\nusing this:\n  out_arcs H (tail G a) = {}\n\ngoal (1 subgoal):\n 1. tail G a \\<in> H.isolated_verts", "using arcs_in"], ["proof (prove)\nusing this:\n  out_arcs H (tail G a) = {}\n  {a, a'} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. tail G a \\<in> H.isolated_verts", "by (simp add: H.isolated_verts_def verts_H)"], ["proof (state)\nthis:\n  tail G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. \\<not> (G.face_cycle_set a \\<noteq> {a} \\<or>\n            G.face_cycle_set a' \\<noteq> {a'}) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  tail G a \\<in> H.isolated_verts", "show False"], ["proof (prove)\nusing this:\n  tail G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. False", "using conn_tail"], ["proof (prove)\nusing this:\n  tail G a \\<in> H.isolated_verts\n  tail G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. False", "by contradiction"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma S_ne: \"S \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "using fcs_not_triv"], ["proof (prove)\nusing this:\n  G.face_cycle_set a \\<noteq> {a} \\<or> G.face_cycle_set a' \\<noteq> {a'}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {}", "by (auto simp: S_def G.segment_face_cycle_x_x_eq)"], ["", "lemma card_face_cycle_sets_da: \"card G.face_cycle_sets = Suc (card H.face_cycle_sets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets = Suc (card H.face_cycle_sets)", "unfolding card_face_cycle_sets_da'"], ["proof (prove)\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (card G.face_cycle_sets -\n         card {G.face_cycle_set a, G.face_cycle_set a'} +\n         (if S = {} then 0 else 1))", "using S_ne diff_face card_fcs_aa'_le"], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n  card {G.face_cycle_set a, G.face_cycle_set a'}\n  \\<le> card G.face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G.face_cycle_sets =\n    Suc (card G.face_cycle_sets -\n         card {G.face_cycle_set a, G.face_cycle_set a'} +\n         (if S = {} then 0 else 1))", "by simp"], ["", "lemma euler_genus_da: \"H.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus = G.euler_genus", "unfolding G.euler_genus_def H.euler_genus_def G.euler_char_def H.euler_char_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (int (2 * card H.sccs) - int (card H.isolated_verts) -\n     (int (card (verts H)) - int (card (arcs H) div 2) +\n      int (card H.face_cycle_sets))) div\n    2 =\n    (int (2 * card G.sccs) - int (card G.isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G.face_cycle_sets))) div\n    2", "by (simp add: isolated_verts_da verts_H card_arcs_da card_sccs_da card_face_cycle_sets_da)"], ["", "end"], ["", "context bidel_arc begin"], ["", "lemma euler_genus_da: \"H.euler_genus \\<le> G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "let ?biconnected = \"tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\""], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "let ?isol_tail = \"tail G a \\<in> H.isolated_verts\""], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "let ?isol_head = \"head G a \\<in> H.isolated_verts\""], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "let ?same_face = \"G.face_cycle_set a' = G.face_cycle_set a\""], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume ?biconnected ?isol_tail"], ["proof (state)\nthis:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts", "interpret EG: bidel_arc_isolated_loop"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_isolated_loop G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume ?biconnected \"\\<not>?isol_tail\" ?same_face"], ["proof (state)\nthis:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' = G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' = G.face_cycle_set a", "interpret EG: bidel_arc_biconnected_same"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' = G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. bidel_arc_biconnected_same G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' = G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' = G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' = G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume ?biconnected \"\\<not>?isol_tail\" \"\\<not>?same_face\""], ["proof (state)\nthis:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a", "interpret EG: bidel_arc_biconnected_diff"], ["proof (prove)\nusing this:\n  tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  G.face_cycle_set a' \\<noteq> G.face_cycle_set a\n\ngoal (1 subgoal):\n 1. bidel_arc_biconnected_diff G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' \\<noteq> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' \\<noteq> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' \\<noteq> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume \"\\<not>?biconnected\" ?isol_tail ?isol_head"], ["proof (state)\nthis:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<in> H.isolated_verts", "interpret EG: bidel_arc_two_isolated"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_two_isolated G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts; head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts; head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts; head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume \"\\<not>?biconnected\" \"\\<not>?isol_tail\" ?isol_head"], ["proof (state)\nthis:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<in> H.isolated_verts", "interpret EG: bidel_arc_only_tail_not_isol"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<in> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_only_tail_not_isol G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume \"\\<not>?biconnected\" ?isol_tail \"\\<not>?isol_head\""], ["proof (state)\nthis:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<notin> H.isolated_verts", "interpret EG: bidel_arc_only_head_not_isol"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<in> H.isolated_verts\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_only_head_not_isol G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "assume \"\\<not>?biconnected\" \"\\<not>?isol_tail\" \"\\<not>?isol_head\""], ["proof (state)\nthis:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<notin> H.isolated_verts", "interpret EG: bidel_arc_two_not_isol"], ["proof (prove)\nusing this:\n  \\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a\n  tail G a \\<notin> H.isolated_verts\n  head G a \\<notin> H.isolated_verts\n\ngoal (1 subgoal):\n 1. bidel_arc_two_not_isol G M a", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by (simp add: EG.euler_genus_da)"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' = G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' \\<noteq> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts; head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' = G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   G.face_cycle_set a' \\<noteq> G.face_cycle_set a\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts; head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<in> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<in> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n  \\<lbrakk>\\<not> tail G a \\<rightarrow>\\<^sup>*\\<^bsub>H\\<^esub> head G a;\n   tail G a \\<notin> H.isolated_verts;\n   head G a \\<notin> H.isolated_verts\\<rbrakk>\n  \\<Longrightarrow> H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. H.euler_genus \\<le> G.euler_genus", "by satx"], ["proof (state)\nthis:\n  H.euler_genus \\<le> G.euler_genus\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Modifying @{term edge_rev}\\<close>"], ["", "definition (in pre_digraph_map) rev_swap :: \"'b \\<Rightarrow> 'b \\<Rightarrow> 'b pre_map\" where\n  \"rev_swap a b = \\<lparr> edge_rev = perm_swap a b (edge_rev M), edge_succ = perm_swap a b (edge_succ M) \\<rparr>\""], ["", "context digraph_map begin"], ["", "lemma digraph_map_rev_swap:\n    assumes \"arc_to_ends G a = arc_to_ends G b\" \"{a,b} \\<subseteq> arcs G\"\n    shows \"digraph_map G (rev_swap a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G (rev_swap a b)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "let ?M' = \"rev_swap a b\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have tail_swap: \"\\<And>x. tail G ((a \\<rightleftharpoons>\\<^sub>F b) x) = tail G x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. tail G ((a \\<rightleftharpoons>\\<^sub>F b) x) = tail G x", "using assms"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x. tail G ((a \\<rightleftharpoons>\\<^sub>F b) x) = tail G x", "by (case_tac \"x \\<in> {a,b}\") (auto simp: arc_to_ends_def)"], ["proof (state)\nthis:\n  tail G ((a \\<rightleftharpoons>\\<^sub>F b) ?x4) = tail G ?x4\n\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have swap_in_arcs: \"\\<And>x. (a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G \\<longleftrightarrow> x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G) =\n       (x \\<in> arcs G)", "using assms"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G) =\n       (x \\<in> arcs G)", "by (case_tac \"x \\<in> {a,b}\") auto"], ["proof (state)\nthis:\n  ((a \\<rightleftharpoons>\\<^sub>F b) ?x4 \\<in> arcs G) = (?x4 \\<in> arcs G)\n\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have es_perm: \"edge_succ ?M' permutes arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ (rev_swap a b) permutes arcs G", "using assms edge_succ_permutes"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. edge_succ (rev_swap a b) permutes arcs G", "unfolding permutes_conv_has_dom"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n  bij (edge_succ M) \\<and> has_dom (edge_succ M) (arcs G)\n\ngoal (1 subgoal):\n 1. bij (edge_succ (rev_swap a b)) \\<and>\n    has_dom (edge_succ (rev_swap a b)) (arcs G)", "by (auto simp: rev_swap_def has_dom_perm_swap)"], ["proof (state)\nthis:\n  edge_succ (rev_swap a b) permutes arcs G\n\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "{"], ["proof (state)\nthis:\n  edge_succ (rev_swap a b) permutes arcs G\n\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "fix x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>aa. (aa \\<in> arcs G) = (edge_rev (rev_swap a b) aa \\<noteq> aa)\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 3. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 4. edge_succ (rev_swap a b) permutes arcs G\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "show \"(x \\<in> arcs G) = (edge_rev (rev_swap a b) x \\<noteq> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> arcs G) = (edge_rev (rev_swap a b) x \\<noteq> x)", "using assms(2)"], ["proof (prove)\nusing this:\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. (x \\<in> arcs G) = (edge_rev (rev_swap a b) x \\<noteq> x)", "by (cases \"x \\<in> {a,b}\") (auto simp: rev_swap_def perm_swap_def arev_dom swap_def split: if_splits)"], ["proof (state)\nthis:\n  (x \\<in> arcs G) = (edge_rev (rev_swap a b) x \\<noteq> x)\n\ngoal (4 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 3. edge_succ (rev_swap a b) permutes arcs G\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 3. edge_succ (rev_swap a b) permutes arcs G\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "fix x"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 3. edge_succ (rev_swap a b) permutes arcs G\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "assume \"x \\<in> arcs G\""], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (4 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       edge_rev (rev_swap a b) (edge_rev (rev_swap a b) aa) = aa\n 2. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 3. edge_succ (rev_swap a b) permutes arcs G\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs G", "show \"edge_rev ?M' (edge_rev ?M' x) = x\""], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. edge_rev (rev_swap a b) (edge_rev (rev_swap a b) x) = x", "by (auto simp: rev_swap_def perm_swap_comp[symmetric])"], ["proof (state)\nthis:\n  edge_rev (rev_swap a b) (edge_rev (rev_swap a b) x) = x\n\ngoal (3 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 2. edge_succ (rev_swap a b) permutes arcs G\n 3. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 2. edge_succ (rev_swap a b) permutes arcs G\n 3. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 2. edge_succ (rev_swap a b) permutes arcs G\n 3. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "assume \"x \\<in> arcs G\""], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (3 subgoals):\n 1. \\<And>aa.\n       aa \\<in> arcs G \\<Longrightarrow>\n       tail G (edge_rev (rev_swap a b) aa) = head G aa\n 2. edge_succ (rev_swap a b) permutes arcs G\n 3. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs G", "show \"tail G (edge_rev ?M' x) = head G x\""], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G (edge_rev (rev_swap a b) x) = head G x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. tail G (edge_rev (rev_swap a b) x) = head G x", "by (case_tac \"x \\<in> {a,b}\") (auto simp: rev_swap_def perm_swap_def tail_swap arc_to_ends_def)"], ["proof (state)\nthis:\n  tail G (edge_rev (rev_swap a b) x) = head G x\n\ngoal (2 subgoals):\n 1. edge_succ (rev_swap a b) permutes arcs G\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. edge_succ (rev_swap a b) permutes arcs G\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "show \"edge_succ ?M' permutes arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ (rev_swap a b) permutes arcs G", "by fact"], ["proof (state)\nthis:\n  edge_succ (rev_swap a b) permutes arcs G\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "assume A: \"v \\<in> verts G\" \"out_arcs G v \\<noteq> {}\""], ["proof (state)\nthis:\n  v \\<in> verts G\n  out_arcs G v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts G\n  out_arcs G v \\<noteq> {}", "obtain c where \"c \\<in> out_arcs G v\""], ["proof (prove)\nusing this:\n  v \\<in> verts G\n  out_arcs G v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c \\<in> out_arcs G v \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c \\<in> out_arcs G v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have \"inj (perm_swap a b (edge_succ M))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (perm_swap a b (edge_succ M))", "by (simp add: bij_is_inj bij_edge_succ)"], ["proof (state)\nthis:\n  inj (perm_swap a b (edge_succ M))\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have \"out_arcs G v = (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G v = (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v", "by (auto simp: tail_swap swap_swap_id swap_in_arcs intro: image_eqI[where x=\"(a \\<rightleftharpoons>\\<^sub>F b) y\" for y])"], ["proof (state)\nthis:\n  out_arcs G v = (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "also"], ["proof (state)\nthis:\n  out_arcs G v = (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have \"(a \\<rightleftharpoons>\\<^sub>F b) `  out_arcs G v = (a \\<rightleftharpoons>\\<^sub>F b) `  orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v =\n    (a \\<rightleftharpoons>\\<^sub>F b) `\n    orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)", "using edge_succ_cyclic"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> verts G; out_arcs G ?v \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G ?v)\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v =\n    (a \\<rightleftharpoons>\\<^sub>F b) `\n    orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)", "using A \\<open>c \\<in> _\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> verts G; out_arcs G ?v \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G ?v)\n  v \\<in> verts G\n  out_arcs G v \\<noteq> {}\n  c \\<in> out_arcs G v\n\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v =\n    (a \\<rightleftharpoons>\\<^sub>F b) `\n    orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)", "by (intro arg_cong[where f=\"(`) (a \\<rightleftharpoons>\\<^sub>F b)\"])\n           (intro orbit_cyclic_eq3[symmetric], auto simp: swap_in_arcs tail_swap)"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v =\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "also"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons>\\<^sub>F b) ` out_arcs G v =\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "have \"\\<dots> = orbit (edge_succ ?M') c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a \\<rightleftharpoons>\\<^sub>F b) `\n    orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c) =\n    orbit (edge_succ (rev_swap a b)) c", "by (simp add: orbit_perm_swap rev_swap_def)"], ["proof (state)\nthis:\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  orbit (edge_succ M) ((a \\<rightleftharpoons>\\<^sub>F b) c) =\n  orbit (edge_succ (rev_swap a b)) c\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "finally"], ["proof (chain)\npicking this:\n  out_arcs G v = orbit (edge_succ (rev_swap a b)) c", "have oa_orb: \"out_arcs G v = orbit (edge_succ ?M') c\""], ["proof (prove)\nusing this:\n  out_arcs G v = orbit (edge_succ (rev_swap a b)) c\n\ngoal (1 subgoal):\n 1. out_arcs G v = orbit (edge_succ (rev_swap a b)) c", "."], ["proof (state)\nthis:\n  out_arcs G v = orbit (edge_succ (rev_swap a b)) c\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts G; out_arcs G v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "show \"cyclic_on (edge_succ ?M') (out_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)", "unfolding oa_orb"], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (rev_swap a b))\n     (orbit (edge_succ (rev_swap a b)) c)", "using es_perm finite_arcs"], ["proof (prove)\nusing this:\n  edge_succ (rev_swap a b) permutes arcs G\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (rev_swap a b))\n     (orbit (edge_succ (rev_swap a b)) c)", "by (rule cyclic_on_orbit)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ (rev_swap a b)) (out_arcs G v)\n\ngoal:\nNo subgoals!", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?v6 \\<in> verts G; out_arcs G ?v6 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ (rev_swap a b)) (out_arcs G ?v6)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma euler_genus_rev_swap:\n    assumes \"arc_to_ends G a = arc_to_ends G b\" \"{a,b} \\<subseteq> arcs G\"\n    shows \"pre_digraph_map.euler_genus G (rev_swap a b) = euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_genus G (rev_swap a b) = euler_genus", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_genus G (rev_swap a b) = euler_genus", "let ?M' = \"rev_swap a b\""], ["proof (state)\ngoal (1 subgoal):\n 1. pre_digraph_map.euler_genus G (rev_swap a b) = euler_genus", "interpret G': digraph_map G ?M'"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G (rev_swap a b)", "using assms"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. digraph_map G (rev_swap a b)", "by (rule digraph_map_rev_swap)"], ["proof (state)\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "have swap_in_arcs: \"\\<And>x. (a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G \\<longleftrightarrow> x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G) =\n       (x \\<in> arcs G)", "using assms"], ["proof (prove)\nusing this:\n  arc_to_ends G a = arc_to_ends G b\n  {a, b} \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ((a \\<rightleftharpoons>\\<^sub>F b) x \\<in> arcs G) =\n       (x \\<in> arcs G)", "by (case_tac \"x \\<in> {a,b}\") auto"], ["proof (state)\nthis:\n  ((a \\<rightleftharpoons>\\<^sub>F b) ?x4 \\<in> arcs G) = (?x4 \\<in> arcs G)\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "have G'_fcs: \"G'.face_cycle_succ = perm_swap a b face_cycle_succ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.face_cycle_succ = perm_swap a b face_cycle_succ", "unfolding G'.face_cycle_succ_def face_cycle_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ (rev_swap a b) \\<circ> edge_rev (rev_swap a b) =\n    perm_swap a b (edge_succ M \\<circ> edge_rev M)", "by (auto simp: fun_eq_iff rev_swap_def perm_swap_comp)"], ["proof (state)\nthis:\n  G'.face_cycle_succ = perm_swap a b face_cycle_succ\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "have \"\\<And>x. G'.face_cycle_set x = (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_set ((a \\<rightleftharpoons>\\<^sub>F b) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       G'.face_cycle_set x =\n       (a \\<rightleftharpoons>\\<^sub>F b) `\n       face_cycle_set ((a \\<rightleftharpoons>\\<^sub>F b) x)", "by (auto simp: face_cycle_set_def G'.face_cycle_set_def orbit_perm_swap G'_fcs imageI)"], ["proof (state)\nthis:\n  G'.face_cycle_set ?x4 =\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  face_cycle_set ((a \\<rightleftharpoons>\\<^sub>F b) ?x4)\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "then"], ["proof (chain)\npicking this:\n  G'.face_cycle_set ?x4 =\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  face_cycle_set ((a \\<rightleftharpoons>\\<^sub>F b) ?x4)", "have \"G'.face_cycle_sets = (\\<lambda>S. (a \\<rightleftharpoons>\\<^sub>F b) ` S) ` face_cycle_sets\""], ["proof (prove)\nusing this:\n  G'.face_cycle_set ?x4 =\n  (a \\<rightleftharpoons>\\<^sub>F b) `\n  face_cycle_set ((a \\<rightleftharpoons>\\<^sub>F b) ?x4)\n\ngoal (1 subgoal):\n 1. G'.face_cycle_sets =\n    (`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets", "by (auto simp: pre_digraph_map.face_cycle_sets_def swap_in_arcs)\n         (metis swap_swap_id image_eqI swap_in_arcs)"], ["proof (state)\nthis:\n  G'.face_cycle_sets =\n  (`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "then"], ["proof (chain)\npicking this:\n  G'.face_cycle_sets =\n  (`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets", "have \"card G'.face_cycle_sets = card ((\\<lambda>S. (a \\<rightleftharpoons>\\<^sub>F b) ` S) ` face_cycle_sets)\""], ["proof (prove)\nusing this:\n  G'.face_cycle_sets =\n  (`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets\n\ngoal (1 subgoal):\n 1. card G'.face_cycle_sets =\n    card ((`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets)", "by simp"], ["proof (state)\nthis:\n  card G'.face_cycle_sets =\n  card ((`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets)\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "also"], ["proof (state)\nthis:\n  card G'.face_cycle_sets =\n  card ((`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets)\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "have \"\\<dots> = card face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ((`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets) =\n    card face_cycle_sets", "by (rule card_image) (rule inj_on_f_imageI[where S=\"UNIV\"], auto)"], ["proof (state)\nthis:\n  card ((`) (a \\<rightleftharpoons>\\<^sub>F b) ` face_cycle_sets) =\n  card face_cycle_sets\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "finally"], ["proof (chain)\npicking this:\n  card G'.face_cycle_sets = card face_cycle_sets", "show \"pre_digraph_map.euler_genus G ?M' = euler_genus\""], ["proof (prove)\nusing this:\n  card G'.face_cycle_sets = card face_cycle_sets\n\ngoal (1 subgoal):\n 1. G'.euler_genus = euler_genus", "unfolding pre_digraph_map.euler_genus_def pre_digraph_map.euler_char_def"], ["proof (prove)\nusing this:\n  card G'.face_cycle_sets = card face_cycle_sets\n\ngoal (1 subgoal):\n 1. (int (2 * card sccs) - int (card isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card G'.face_cycle_sets))) div\n    2 =\n    (int (2 * card sccs) - int (card isolated_verts) -\n     (int (card (verts G)) - int (card (arcs G) div 2) +\n      int (card face_cycle_sets))) div\n    2", "by simp"], ["proof (state)\nthis:\n  G'.euler_genus = euler_genus\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Conclusion\\<close>"], ["", "lemma bidirected_subgraph_obtain:\n  assumes sg: \"subgraph H G\" \"arcs H \\<noteq> arcs G\"\n  assumes fin: \"finite (arcs G)\"\n  assumes bidir: \"\\<exists>rev. bidirected_digraph G rev\" \"\\<exists>rev. bidirected_digraph H rev\"\n  obtains a a' where \"{a,a'} \\<subseteq> arcs G - arcs H\" \"a' \\<noteq> a\"\n    \"tail G a' = head G a\" \"head G a'= tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain a where a: \"a \\<in> arcs G - arcs H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> arcs G - arcs H \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using sg"], ["proof (prove)\nusing this:\n  subgraph H G\n  arcs H \\<noteq> arcs G\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> arcs G - arcs H \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> arcs G - arcs H\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "obtain rev_G rev_H where rev: \"bidirected_digraph G rev_G\" \"bidirected_digraph H rev_H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>rev_G rev_H.\n        \\<lbrakk>bidirected_digraph G rev_G;\n         bidirected_digraph H rev_H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using bidir"], ["proof (prove)\nusing this:\n  \\<exists>rev. bidirected_digraph G rev\n  \\<exists>rev. bidirected_digraph H rev\n\ngoal (1 subgoal):\n 1. (\\<And>rev_G rev_H.\n        \\<lbrakk>bidirected_digraph G rev_G;\n         bidirected_digraph H rev_H\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bidirected_digraph G rev_G\n  bidirected_digraph H rev_H\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret G: bidirected_digraph G rev_G"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph G rev_G", "by (rule rev)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "interpret H: bidirected_digraph H rev_H"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph H rev_H", "by (rule rev)"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have sg_props: \"arcs H \\<subseteq> arcs G\" \"tail H = tail G\" \"head H = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& tail H = tail G &&& head H = head G", "using sg"], ["proof (prove)\nusing this:\n  subgraph H G\n  arcs H \\<noteq> arcs G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& tail H = tail G &&& head H = head G", "by (auto simp: subgraph_def compatible_def)"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "fix w1 w2"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "assume A: \"tail G a = w1\" \"head G a = w2\""], ["proof (state)\nthis:\n  tail G a = w1\n  head G a = w2\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"in_arcs H w1 \\<inter> out_arcs H w2 = rev_H ` (out_arcs H w1 \\<inter> in_arcs H w2)\" (is \"?Sh = _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2 =\n    rev_H ` (out_arcs H w1 \\<inter> in_arcs H w2)", "unfolding H.in_arcs_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. rev_H ` out_arcs H w1 \\<inter> out_arcs H w2 =\n    rev_H ` (out_arcs H w1 \\<inter> rev_H ` out_arcs H w2)", "by (simp add: image_Int image_image H.inj_on_arev)"], ["proof (state)\nthis:\n  in_arcs H w1 \\<inter> out_arcs H w2 =\n  rev_H ` (out_arcs H w1 \\<inter> in_arcs H w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  in_arcs H w1 \\<inter> out_arcs H w2 =\n  rev_H ` (out_arcs H w1 \\<inter> in_arcs H w2)", "have \"card (in_arcs H w1 \\<inter> out_arcs H w2) = card (out_arcs H w1 \\<inter> in_arcs H w2)\""], ["proof (prove)\nusing this:\n  in_arcs H w1 \\<inter> out_arcs H w2 =\n  rev_H ` (out_arcs H w1 \\<inter> in_arcs H w2)\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2) =\n    card (out_arcs H w1 \\<inter> in_arcs H w2)", "by (metis card_image H.arev_arev inj_on_inverseI)"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2) =\n  card (out_arcs H w1 \\<inter> in_arcs H w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2) =\n  card (out_arcs H w1 \\<inter> in_arcs H w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"\\<dots> < card (out_arcs G w1 \\<inter> in_arcs G w2)\" (is \"card ?Sh1 < card ?Sg1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (out_arcs H w1 \\<inter> in_arcs H w2)\n    < card (out_arcs G w1 \\<inter> in_arcs G w2)", "proof (rule psubset_card_mono)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (out_arcs G w1 \\<inter> in_arcs G w2)\n 2. out_arcs H w1 \\<inter> in_arcs H w2\n    \\<subset> out_arcs G w1 \\<inter> in_arcs G w2", "show \"finite ?Sg1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (out_arcs G w1 \\<inter> in_arcs G w2)", "using fin"], ["proof (prove)\nusing this:\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. finite (out_arcs G w1 \\<inter> in_arcs G w2)", "by (auto simp: out_arcs_def)"], ["proof (state)\nthis:\n  finite (out_arcs G w1 \\<inter> in_arcs G w2)\n\ngoal (1 subgoal):\n 1. out_arcs H w1 \\<inter> in_arcs H w2\n    \\<subset> out_arcs G w1 \\<inter> in_arcs G w2", "show \"?Sh1 \\<subset> ?Sg1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs H w1 \\<inter> in_arcs H w2\n    \\<subset> out_arcs G w1 \\<inter> in_arcs G w2", "using A a sg_props"], ["proof (prove)\nusing this:\n  tail G a = w1\n  head G a = w2\n  a \\<in> arcs G - arcs H\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. out_arcs H w1 \\<inter> in_arcs H w2\n    \\<subset> out_arcs G w1 \\<inter> in_arcs G w2", "by auto"], ["proof (state)\nthis:\n  out_arcs H w1 \\<inter> in_arcs H w2\n  \\<subset> out_arcs G w1 \\<inter> in_arcs G w2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (out_arcs H w1 \\<inter> in_arcs H w2)\n  < card (out_arcs G w1 \\<inter> in_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  card (out_arcs H w1 \\<inter> in_arcs H w2)\n  < card (out_arcs G w1 \\<inter> in_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?Sg1 = rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)\" (is \"_ = _ ` ?Sg\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G w1 \\<inter> in_arcs G w2 =\n    rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)", "unfolding G.in_arcs_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G w1 \\<inter> rev_G ` out_arcs G w2 =\n    rev_G ` (rev_G ` out_arcs G w1 \\<inter> out_arcs G w2)", "by (simp add: image_Int image_image G.inj_on_arev)"], ["proof (state)\nthis:\n  out_arcs G w1 \\<inter> in_arcs G w2 =\n  rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  out_arcs G w1 \\<inter> in_arcs G w2 =\n  rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"card \\<dots> = card ?Sg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)) =\n    card (in_arcs G w1 \\<inter> out_arcs G w2)", "by (metis card_image G.arev_arev inj_on_inverseI)"], ["proof (state)\nthis:\n  card (rev_G ` (in_arcs G w1 \\<inter> out_arcs G w2)) =\n  card (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)", "have card_less: \"card ?Sh < card ?Sg\""], ["proof (prove)\nusing this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2)", "."], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have S_ss: \"?Sh \\<subseteq> ?Sg\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2\n    \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2", "using sg_props"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2\n    \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2", "by auto"], ["proof (state)\nthis:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (cases \"w1 = w2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "case True"], ["proof (state)\nthis:\n  w1 = w2\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "have \"card (?Sh - {a}) = card ?Sh\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2 - {a}) =\n    card (in_arcs H w1 \\<inter> out_arcs H w2)", "using a"], ["proof (prove)\nusing this:\n  a \\<in> arcs G - arcs H\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2 - {a}) =\n    card (in_arcs H w1 \\<inter> out_arcs H w2)", "by (intro arg_cong[where f=card]) auto"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a}) =\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a}) =\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "have \"\\<dots> < card ?Sg - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1", "from True"], ["proof (chain)\npicking this:\n  w1 = w2", "have \"even (card ?Sg)\" \"even (card ?Sh)\""], ["proof (prove)\nusing this:\n  w1 = w2\n\ngoal (1 subgoal):\n 1. even (card (in_arcs G w1 \\<inter> out_arcs G w2)) &&&\n    even (card (in_arcs H w1 \\<inter> out_arcs H w2))", "by (auto simp: G.even_card_loops H.even_card_loops)"], ["proof (state)\nthis:\n  even (card (in_arcs G w1 \\<inter> out_arcs G w2))\n  even (card (in_arcs H w1 \\<inter> out_arcs H w2))\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1", "then"], ["proof (chain)\npicking this:\n  even (card (in_arcs G w1 \\<inter> out_arcs G w2))\n  even (card (in_arcs H w1 \\<inter> out_arcs H w2))", "show ?thesis"], ["proof (prove)\nusing this:\n  even (card (in_arcs G w1 \\<inter> out_arcs G w2))\n  even (card (in_arcs H w1 \\<inter> out_arcs H w2))\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1", "using card_less"], ["proof (prove)\nusing this:\n  even (card (in_arcs G w1 \\<inter> out_arcs G w2))\n  even (card (in_arcs H w1 \\<inter> out_arcs H w2))\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2)\n    < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1", "by simp (metis Suc_pred even_Suc le_neq_implies_less lessE less_Suc_eq_le zero_less_Suc)"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "also"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2) - 1\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "have \"\\<dots> = card (?Sg - {a})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs G w1 \\<inter> out_arcs G w2) - 1 =\n    card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})", "using fin a A True"], ["proof (prove)\nusing this:\n  finite (arcs G)\n  a \\<in> arcs G - arcs H\n  tail G a = w1\n  head G a = w2\n  w1 = w2\n\ngoal (1 subgoal):\n 1. card (in_arcs G w1 \\<inter> out_arcs G w2) - 1 =\n    card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})", "by (auto simp: out_arcs_def card_Diff_singleton)"], ["proof (state)\nthis:\n  card (in_arcs G w1 \\<inter> out_arcs G w2) - 1 =\n  card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "finally"], ["proof (chain)\npicking this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})", "have card_diff_a_less: \"card (?Sh - {a}) < card (?Sg - {a})\""], ["proof (prove)\nusing this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n\ngoal (1 subgoal):\n 1. card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n    < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})", "."], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "from S_ss"], ["proof (chain)\npicking this:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2", "have \"?Sh - {a} \\<subseteq> ?Sg - {a}\""], ["proof (prove)\nusing this:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n    \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2 - {a}", "using S_ss"], ["proof (prove)\nusing this:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n    \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2 - {a}", "by blast"], ["proof (state)\nthis:\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2 - {a}\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2 - {a}", "have \"?Sh - {a} \\<subset> ?Sg - {a}\""], ["proof (prove)\nusing this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2 - {a})\n  < card (in_arcs G w1 \\<inter> out_arcs G w2 - {a})\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2 - {a}\n\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n    \\<subset> in_arcs G w1 \\<inter> out_arcs G w2 - {a}", "by (intro card_psubset) auto"], ["proof (state)\nthis:\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2 - {a}\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2 - {a}", "obtain a' where \"a' \\<in> (?Sg - {a})- ?Sh\""], ["proof (prove)\nusing this:\n  in_arcs H w1 \\<inter> out_arcs H w2 - {a}\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2 - {a}\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 - {a} -\n                 in_arcs H w1 \\<inter> out_arcs H w2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 - {a} -\n           in_arcs H w1 \\<inter> out_arcs H w2\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 - {a} -\n           in_arcs H w1 \\<inter> out_arcs H w2", "have \"{a,a'} \\<subseteq> arcs G - arcs H\" \"a' \\<noteq> a\" \"tail G a' = head G a\" \"head G a'= tail G a\""], ["proof (prove)\nusing this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 - {a} -\n           in_arcs H w1 \\<inter> out_arcs H w2\n\ngoal (1 subgoal):\n 1. ({a, a'} \\<subseteq> arcs G - arcs H &&& a' \\<noteq> a) &&&\n    tail G a' = head G a &&& head G a' = tail G a", "using A a sg_props"], ["proof (prove)\nusing this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 - {a} -\n           in_arcs H w1 \\<inter> out_arcs H w2\n  tail G a = w1\n  head G a = w2\n  a \\<in> arcs G - arcs H\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. ({a, a'} \\<subseteq> arcs G - arcs H &&& a' \\<noteq> a) &&&\n    tail G a' = head G a &&& head G a' = tail G a", "by auto"], ["proof (state)\nthis:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (2 subgoals):\n 1. w1 = w2 \\<Longrightarrow> thesis\n 2. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a", "show ?thesis"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "case False"], ["proof (state)\nthis:\n  w1 \\<noteq> w2\n\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "from card_less S_ss"], ["proof (chain)\npicking this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2", "have \"?Sh \\<subset> ?Sg\""], ["proof (prove)\nusing this:\n  card (in_arcs H w1 \\<inter> out_arcs H w2)\n  < card (in_arcs G w1 \\<inter> out_arcs G w2)\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subseteq> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. in_arcs H w1 \\<inter> out_arcs H w2\n    \\<subset> in_arcs G w1 \\<inter> out_arcs G w2", "by auto"], ["proof (state)\nthis:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2", "obtain a' where \"a' \\<in> ?Sg - ?Sh\""], ["proof (prove)\nusing this:\n  in_arcs H w1 \\<inter> out_arcs H w2\n  \\<subset> in_arcs G w1 \\<inter> out_arcs G w2\n\ngoal (1 subgoal):\n 1. (\\<And>a'.\n        a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 -\n                 in_arcs H w1 \\<inter> out_arcs H w2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 -\n           in_arcs H w1 \\<inter> out_arcs H w2\n\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 -\n           in_arcs H w1 \\<inter> out_arcs H w2", "have \"{a,a'} \\<subseteq> arcs G - arcs H\" \"a' \\<noteq> a\" \"tail G a' = head G a\" \"head G a'= tail G a\""], ["proof (prove)\nusing this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 -\n           in_arcs H w1 \\<inter> out_arcs H w2\n\ngoal (1 subgoal):\n 1. ({a, a'} \\<subseteq> arcs G - arcs H &&& a' \\<noteq> a) &&&\n    tail G a' = head G a &&& head G a' = tail G a", "using A a sg_props False"], ["proof (prove)\nusing this:\n  a' \\<in> in_arcs G w1 \\<inter> out_arcs G w2 -\n           in_arcs H w1 \\<inter> out_arcs H w2\n  tail G a = w1\n  head G a = w2\n  a \\<in> arcs G - arcs H\n  arcs H \\<subseteq> arcs G\n  tail H = tail G\n  head H = head G\n  w1 \\<noteq> w2\n\ngoal (1 subgoal):\n 1. ({a, a'} \\<subseteq> arcs G - arcs H &&& a' \\<noteq> a) &&&\n    tail G a' = head G a &&& head G a' = tail G a", "by auto"], ["proof (state)\nthis:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. w1 \\<noteq> w2 \\<Longrightarrow> thesis", "then"], ["proof (chain)\npicking this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a", "show ?thesis"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<lbrakk>tail G a = ?w1.3; head G a = ?w2.3\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>tail G a = ?w1.3; head G a = ?w2.3\\<rbrakk>\n  \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>tail G a = ?w1.3; head G a = ?w2.3\\<rbrakk>\n  \\<Longrightarrow> thesis\n\ngoal (1 subgoal):\n 1. thesis", "by simp"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraph_euler_genus_le:\n  assumes G: \"subgraph H G\" \"digraph_map G GM\" and H: \"\\<exists>rev. bidirected_digraph H rev\"\n  obtains HM where \"digraph_map H HM\" \"pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?d = \"\\<lambda>G. card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from H"], ["proof (chain)\npicking this:\n  \\<exists>rev. bidirected_digraph H rev", "obtain rev_H where \"bidirected_digraph H rev_H\""], ["proof (prove)\nusing this:\n  \\<exists>rev. bidirected_digraph H rev\n\ngoal (1 subgoal):\n 1. (\\<And>rev_H.\n        bidirected_digraph H rev_H \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bidirected_digraph H rev_H\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  bidirected_digraph H rev_H", "interpret H: bidirected_digraph H rev_H"], ["proof (prove)\nusing this:\n  bidirected_digraph H rev_H\n\ngoal (1 subgoal):\n 1. bidirected_digraph H rev_H", "."], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from G"], ["proof (chain)\npicking this:\n  subgraph H G\n  digraph_map G GM", "have \"\\<exists>HM. digraph_map H HM \\<and> pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\""], ["proof (prove)\nusing this:\n  subgraph H G\n  digraph_map G GM\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM\n       \\<le> pre_digraph_map.euler_genus G GM", "proof (induct \"?d G\" arbitrary: G GM rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>card (arcs ?G1) + card (verts ?G1) - card (arcs H) -\n           card (verts H)\n           < card (arcs G) + card (verts G) - card (arcs H) -\n             card (verts H);\n   subgraph H ?G1; digraph_map ?G1 ?GM1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>HM.\n                       digraph_map H HM \\<and>\n                       pre_digraph_map.euler_genus H HM\n                       \\<le> pre_digraph_map.euler_genus ?G1 ?GM1\n  subgraph H G\n  digraph_map G GM\n\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "from less"], ["proof (chain)\npicking this:\n  \\<lbrakk>card (arcs ?G1) + card (verts ?G1) - card (arcs H) -\n           card (verts H)\n           < card (arcs G) + card (verts G) - card (arcs H) -\n             card (verts H);\n   subgraph H ?G1; digraph_map ?G1 ?GM1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>HM.\n                       digraph_map H HM \\<and>\n                       pre_digraph_map.euler_genus H HM\n                       \\<le> pre_digraph_map.euler_genus ?G1 ?GM1\n  subgraph H G\n  digraph_map G GM", "interpret G: digraph_map G GM"], ["proof (prove)\nusing this:\n  \\<lbrakk>card (arcs ?G1) + card (verts ?G1) - card (arcs H) -\n           card (verts H)\n           < card (arcs G) + card (verts G) - card (arcs H) -\n             card (verts H);\n   subgraph H ?G1; digraph_map ?G1 ?GM1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>HM.\n                       digraph_map H HM \\<and>\n                       pre_digraph_map.euler_genus H HM\n                       \\<le> pre_digraph_map.euler_genus ?G1 ?GM1\n  subgraph H G\n  digraph_map G GM\n\ngoal (1 subgoal):\n 1. digraph_map G GM", "by -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "have H_ss: \"arcs H \\<subseteq> arcs G\" \"verts H \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "using \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. arcs H \\<subseteq> arcs G &&& verts H \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "then"], ["proof (chain)\npicking this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G", "have card_le: \"card (arcs H) \\<le> card (arcs G)\" \"card (verts H) \\<le> card (verts G)\""], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. card (arcs H) \\<le> card (arcs G) &&&\n    card (verts H) \\<le> card (verts G)", "by (auto intro: card_mono)"], ["proof (state)\nthis:\n  card (arcs H) \\<le> card (arcs G)\n  card (verts H) \\<le> card (verts G)\n\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "have ends: \"tail H = tail G\" \"head H = head G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail H = tail G &&& head H = head G", "using \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. tail H = tail G &&& head H = head G", "by (auto simp: compatible_def)"], ["proof (state)\nthis:\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. \\<And>G GM.\n       \\<lbrakk>\\<And>Ga GM.\n                   \\<lbrakk>card (arcs Ga) + card (verts Ga) -\n                            card (arcs H) -\n                            card (verts H)\n                            < card (arcs G) + card (verts G) -\n                              card (arcs H) -\n                              card (verts H);\n                    subgraph H Ga; digraph_map Ga GM\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>HM.\n  digraph_map H HM \\<and>\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus Ga GM;\n        subgraph H G; digraph_map G GM\\<rbrakk>\n       \\<Longrightarrow> \\<exists>HM.\n                            digraph_map H HM \\<and>\n                            pre_digraph_map.euler_genus H HM\n                            \\<le> pre_digraph_map.euler_genus G GM", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "proof (cases \"?d G = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "case True"], ["proof (state)\nthis:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) = 0\n\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) = 0", "have \"card (arcs H) = card (arcs G)\" \"card (verts H) = card (verts G)\""], ["proof (prove)\nusing this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) = 0\n\ngoal (1 subgoal):\n 1. card (arcs H) = card (arcs G) &&& card (verts H) = card (verts G)", "using card_le"], ["proof (prove)\nusing this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) = 0\n  card (arcs H) \\<le> card (arcs G)\n  card (verts H) \\<le> card (verts G)\n\ngoal (1 subgoal):\n 1. card (arcs H) = card (arcs G) &&& card (verts H) = card (verts G)", "by linarith+"], ["proof (state)\nthis:\n  card (arcs H) = card (arcs G)\n  card (verts H) = card (verts G)\n\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  card (arcs H) = card (arcs G)\n  card (verts H) = card (verts G)", "have \"arcs H = arcs G\" \"verts H = verts G\""], ["proof (prove)\nusing this:\n  card (arcs H) = card (arcs G)\n  card (verts H) = card (verts G)\n\ngoal (1 subgoal):\n 1. arcs H = arcs G &&& verts H = verts G", "using H_ss"], ["proof (prove)\nusing this:\n  card (arcs H) = card (arcs G)\n  card (verts H) = card (verts G)\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. arcs H = arcs G &&& verts H = verts G", "by (auto simp: card_subset_eq)"], ["proof (state)\nthis:\n  arcs H = arcs G\n  verts H = verts G\n\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  arcs H = arcs G\n  verts H = verts G", "have \"H = G\""], ["proof (prove)\nusing this:\n  arcs H = arcs G\n  verts H = verts G\n\ngoal (1 subgoal):\n 1. H = G", "using \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  arcs H = arcs G\n  verts H = verts G\n  subgraph H G\n\ngoal (1 subgoal):\n 1. H = G", "by (auto simp: compatible_def)"], ["proof (state)\nthis:\n  H = G\n\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  H = G", "have \"digraph_map H GM \\<and> pre_digraph_map.euler_genus H GM \\<le> G.euler_genus\""], ["proof (prove)\nusing this:\n  H = G\n\ngoal (1 subgoal):\n 1. digraph_map H GM \\<and>\n    pre_digraph_map.euler_genus H GM \\<le> G.euler_genus", "by auto"], ["proof (state)\nthis:\n  digraph_map H GM \\<and>\n  pre_digraph_map.euler_genus H GM \\<le> G.euler_genus\n\ngoal (2 subgoals):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) =\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n 2. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  digraph_map H GM \\<and>\n  pre_digraph_map.euler_genus H GM \\<le> G.euler_genus", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_map H GM \\<and>\n  pre_digraph_map.euler_genus H GM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", ".."], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "case False"], ["proof (state)\nthis:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq> 0", "have H_ne: \"(arcs G - arcs H) \\<noteq> {} \\<or> (verts G - verts H) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. arcs G - arcs H \\<noteq> {} \\<or> verts G - verts H \\<noteq> {}", "using H_ss card_le"], ["proof (prove)\nusing this:\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq> 0\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  card (arcs H) \\<le> card (arcs G)\n  card (verts H) \\<le> card (verts G)\n\ngoal (1 subgoal):\n 1. arcs G - arcs H \\<noteq> {} \\<or> verts G - verts H \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {} \\<or> verts G - verts H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {} \\<or> verts G - verts H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "assume A: \"arcs G - arcs H \\<noteq> {}\""], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  arcs G - arcs H \\<noteq> {}", "obtain a a' where aa': \"{a, a'} \\<subseteq> arcs G - arcs H\" \"a' \\<noteq> a\" \"tail G a' = head G a\" \"head G a' = tail G a\""], ["proof (prove)\nusing this:\n  arcs G - arcs H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using H_ss \\<open>subgraph H G\\<close>"], ["proof (prove)\nusing this:\n  arcs G - arcs H \\<noteq> {}\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  subgraph H G\n\ngoal (1 subgoal):\n 1. (\\<And>a a'.\n        \\<lbrakk>{a, a'} \\<subseteq> arcs G - arcs H; a' \\<noteq> a;\n         tail G a' = head G a; head G a' = tail G a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto intro: bidirected_subgraph_obtain)"], ["proof (state)\nthis:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "let ?GM' = \"G.rev_swap (edge_rev GM a) a'\""], ["proof (state)\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "interpret G': digraph_map G ?GM'"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G (G.rev_swap (edge_rev GM a) a')", "using aa'"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. digraph_map G (G.rev_swap (edge_rev GM a) a')", "by (intro G.digraph_map_rev_swap) (auto simp: arc_to_ends_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "interpret G': bidel_arc G ?GM' a"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidel_arc G (G.rev_swap (edge_rev GM a) a') a", "using aa'"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. bidel_arc G (G.rev_swap (edge_rev GM a) a') a", "by unfold_locales simp"], ["proof (state)\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"edge_rev GM a \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev GM a \\<noteq> a", "using aa'"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. edge_rev GM a \\<noteq> a", "by (intro G.arev_neq) auto"], ["proof (state)\nthis:\n  edge_rev GM a \\<noteq> a\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  edge_rev GM a \\<noteq> a", "have er_a: \"edge_rev ?GM' a = a'\""], ["proof (prove)\nusing this:\n  edge_rev GM a \\<noteq> a\n\ngoal (1 subgoal):\n 1. G'.a' = a'", "using \\<open>a' \\<noteq> a\\<close>"], ["proof (prove)\nusing this:\n  edge_rev GM a \\<noteq> a\n  a' \\<noteq> a\n\ngoal (1 subgoal):\n 1. G'.a' = a'", "by (auto simp: G.rev_swap_def perm_swap_def swap_id_eq dest: G.arev_neq)"], ["proof (state)\nthis:\n  G'.a' = a'\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  G'.a' = a'", "have sg: \"subgraph H G'.H\""], ["proof (prove)\nusing this:\n  G'.a' = a'\n\ngoal (1 subgoal):\n 1. subgraph H G'.H", "using H_ss aa'"], ["proof (prove)\nusing this:\n  G'.a' = a'\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. subgraph H G'.H", "by (intro subgraphI) (auto simp: G'.verts_H G'.arcs_H G'.tail_H G'.head_H ends compatible_def intro: H.wf_digraph G'.H.wf_digraph)"], ["proof (state)\nthis:\n  subgraph H G'.H\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"card {a,a'} \\<le> card (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a, a'} \\<le> card (arcs G)", "using aa'"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. card {a, a'} \\<le> card (arcs G)", "by (intro card_mono) auto"], ["proof (state)\nthis:\n  card {a, a'} \\<le> card (arcs G)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  card {a, a'} \\<le> card (arcs G)", "obtain HM where HM: \"digraph_map H HM\" \"pre_digraph_map.euler_genus H HM \\<le> G'.H.euler_genus\""], ["proof (prove)\nusing this:\n  card {a, a'} \\<le> card (arcs G)\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM \\<le> G'.H.euler_genus\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using aa' False"], ["proof (prove)\nusing this:\n  card {a, a'} \\<le> card (arcs G)\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n  card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM \\<le> G'.H.euler_genus\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule less, auto simp: G'.verts_H G'.arcs_H  card_insert_if sg er_a)"], ["proof (state)\nthis:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> G'.H.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"G'.H.euler_genus \\<le> G'.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.H.euler_genus \\<le> G'.euler_genus", "by (rule G'.euler_genus_da)"], ["proof (state)\nthis:\n  G'.H.euler_genus \\<le> G'.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "also"], ["proof (state)\nthis:\n  G'.H.euler_genus \\<le> G'.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"G'.euler_genus = G.euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G'.euler_genus = G.euler_genus", "using aa'"], ["proof (prove)\nusing this:\n  {a, a'} \\<subseteq> arcs G - arcs H\n  a' \\<noteq> a\n  tail G a' = head G a\n  head G a' = tail G a\n\ngoal (1 subgoal):\n 1. G'.euler_genus = G.euler_genus", "by (auto simp: G.euler_genus_rev_swap arc_to_ends_def)"], ["proof (state)\nthis:\n  G'.euler_genus = G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "finally"], ["proof (chain)\npicking this:\n  G'.H.euler_genus \\<le> G.euler_genus", "have ?thesis"], ["proof (prove)\nusing this:\n  G'.H.euler_genus \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "using HM"], ["proof (prove)\nusing this:\n  G'.H.euler_genus \\<le> G.euler_genus\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> G'.H.euler_genus\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "by auto"], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "{"], ["proof (state)\nthis:\n  arcs G - arcs H \\<noteq> {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "assume A: \"arcs G - arcs H = {}\""], ["proof (state)\nthis:\n  arcs G - arcs H = {}\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  arcs G - arcs H = {}", "have A': \"verts G - verts H \\<noteq> {}\" and arcs_H: \"arcs H = arcs G\""], ["proof (prove)\nusing this:\n  arcs G - arcs H = {}\n\ngoal (1 subgoal):\n 1. verts G - verts H \\<noteq> {} &&& arcs H = arcs G", "using H_ss H_ne"], ["proof (prove)\nusing this:\n  arcs G - arcs H = {}\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  arcs G - arcs H \\<noteq> {} \\<or> verts G - verts H \\<noteq> {}\n\ngoal (1 subgoal):\n 1. verts G - verts H \\<noteq> {} &&& arcs H = arcs G", "by auto"], ["proof (state)\nthis:\n  verts G - verts H \\<noteq> {}\n  arcs H = arcs G\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  verts G - verts H \\<noteq> {}\n  arcs H = arcs G", "obtain v where v: \"v \\<in> verts G - verts H\""], ["proof (prove)\nusing this:\n  verts G - verts H \\<noteq> {}\n  arcs H = arcs G\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        v \\<in> verts G - verts H \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v \\<in> verts G - verts H\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have card_lt: \"card (verts H) < card (verts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (verts H) < card (verts G)", "using A' H_ss"], ["proof (prove)\nusing this:\n  verts G - verts H \\<noteq> {}\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. card (verts H) < card (verts G)", "by (intro psubset_card_mono) auto"], ["proof (state)\nthis:\n  card (verts H) < card (verts G)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"out_arcs G v = out_arcs H v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G v = out_arcs H v", "using A H_ss"], ["proof (prove)\nusing this:\n  arcs G - arcs H = {}\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n\ngoal (1 subgoal):\n 1. out_arcs G v = out_arcs H v", "by (auto simp: ends)"], ["proof (state)\nthis:\n  out_arcs G v = out_arcs H v\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "then"], ["proof (chain)\npicking this:\n  out_arcs G v = out_arcs H v", "interpret G: del_vert_props G GM v"], ["proof (prove)\nusing this:\n  out_arcs G v = out_arcs H v\n\ngoal (1 subgoal):\n 1. del_vert_props G GM v", "using v"], ["proof (prove)\nusing this:\n  out_arcs G v = out_arcs H v\n  v \\<in> verts G - verts H\n\ngoal (1 subgoal):\n 1. del_vert_props G GM v", "by unfold_locales auto"], ["proof (state)\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"?d (G.del_vert v) < ?d G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) -\n    card (arcs H) -\n    card (verts H)\n    < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)", "using card_lt"], ["proof (prove)\nusing this:\n  card (verts H) < card (verts G)\n\ngoal (1 subgoal):\n 1. card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) -\n    card (arcs H) -\n    card (verts H)\n    < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)", "by (simp add: arcs_H G.arcs_dv G.card_verts_dv)"], ["proof (state)\nthis:\n  card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) - card (arcs H) -\n  card (verts H)\n  < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) - card (arcs H) -\n  card (verts H)\n  < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"subgraph H (G.del_vert v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subgraph H (G.del_vert v)", "using H_ss v"], ["proof (prove)\nusing this:\n  arcs H \\<subseteq> arcs G\n  verts H \\<subseteq> verts G\n  v \\<in> verts G - verts H\n\ngoal (1 subgoal):\n 1. subgraph H (G.del_vert v)", "by (auto simp: subgraph_def arcs_H G.arcs_dv G.verts_del_vert H.wf_digraph\n            G.H.wf_digraph compatible_def G.tail_del_vert G.head_del_vert ends)"], ["proof (state)\nthis:\n  subgraph H (G.del_vert v)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "moreover"], ["proof (state)\nthis:\n  subgraph H (G.del_vert v)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "have \"bidirected_digraph (G.del_vert v) (edge_rev GM)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph (G.del_vert v) (edge_rev GM)", "using G.arev_dom"], ["proof (prove)\nusing this:\n  (?a \\<in> arcs G) = (edge_rev GM ?a \\<noteq> ?a)\n\ngoal (1 subgoal):\n 1. bidirected_digraph (G.del_vert v) (edge_rev GM)", "by (intro G.H.bidirected_digraphI) (auto simp: G.arcs_dv)"], ["proof (state)\nthis:\n  bidirected_digraph (G.del_vert v) (edge_rev GM)\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "ultimately"], ["proof (chain)\npicking this:\n  card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) - card (arcs H) -\n  card (verts H)\n  < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\n  subgraph H (G.del_vert v)\n  bidirected_digraph (G.del_vert v) (edge_rev GM)", "have ?thesis"], ["proof (prove)\nusing this:\n  card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) - card (arcs H) -\n  card (verts H)\n  < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\n  subgraph H (G.del_vert v)\n  bidirected_digraph (G.del_vert v) (edge_rev GM)\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "unfolding G.euler_genus_eq[symmetric]"], ["proof (prove)\nusing this:\n  card (arcs (G.del_vert v)) + card (verts (G.del_vert v)) - card (arcs H) -\n  card (verts H)\n  < card (arcs G) + card (verts G) - card (arcs H) - card (verts H)\n  subgraph H (G.del_vert v)\n  bidirected_digraph (G.del_vert v) (edge_rev GM)\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.H.euler_genus", "by (intro less) auto"], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "}"], ["proof (state)\nthis:\n  arcs G - arcs H = {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. card (arcs G) + card (verts G) - card (arcs H) - card (verts H) \\<noteq>\n    0 \\<Longrightarrow>\n    \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "ultimately"], ["proof (chain)\npicking this:\n  arcs G - arcs H \\<noteq> {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n  arcs G - arcs H = {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "show ?thesis"], ["proof (prove)\nusing this:\n  arcs G - arcs H \\<noteq> {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n  arcs G - arcs H = {} \\<Longrightarrow>\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. \\<exists>HM.\n       digraph_map H HM \\<and>\n       pre_digraph_map.euler_genus H HM \\<le> G.euler_genus", "by blast"], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> G.euler_genus\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM", "obtain HM where \"digraph_map H HM\" \"pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\""], ["proof (prove)\nusing this:\n  \\<exists>HM.\n     digraph_map H HM \\<and>\n     pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim"], ["proof (state)\nthis:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM\n         \\<le> pre_digraph_map.euler_genus G GM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM", "show ?thesis"], ["proof (prove)\nusing this:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> pre_digraph_map.euler_genus G GM\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma (in digraph_map) nonneg_euler_genus: \"0 \\<le> euler_genus\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "define H where \"H = \\<lparr> verts = {}, arcs = {}, tail = tail G, head = head G \\<rparr>\""], ["proof (state)\nthis:\n  H = \\<lparr>verts = {}, arcs = {}, tail = tail G, head = head G\\<rparr>\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  H = \\<lparr>verts = {}, arcs = {}, tail = tail G, head = head G\\<rparr>", "have H_simps: \"verts H = {}\" \"arcs H = {}\" \"tail H = tail G\" \"head H = head G\""], ["proof (prove)\nusing this:\n  H = \\<lparr>verts = {}, arcs = {}, tail = tail G, head = head G\\<rparr>\n\ngoal (1 subgoal):\n 1. (verts H = {} &&& arcs H = {}) &&& tail H = tail G &&& head H = head G", "by (simp_all add: H_def)"], ["proof (state)\nthis:\n  verts H = {}\n  arcs H = {}\n  tail H = tail G\n  head H = head G\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "interpret H: bidirected_digraph H id"], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph H id", "by unfold_locales (auto simp: H_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "have \"wf_digraph H\" \"wf_digraph G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph H &&& wf_digraph G", "by unfold_locales"], ["proof (state)\nthis:\n  wf_digraph H\n  wf_digraph G\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  wf_digraph H\n  wf_digraph G", "have \"subgraph H G\""], ["proof (prove)\nusing this:\n  wf_digraph H\n  wf_digraph G\n\ngoal (1 subgoal):\n 1. subgraph H G", "by (intro subgraphI) (auto simp: H_def compatible_def)"], ["proof (state)\nthis:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  subgraph H G", "obtain HM where \"digraph_map H HM\" \"pre_digraph_map.euler_genus H HM \\<le> euler_genus\""], ["proof (prove)\nusing this:\n  subgraph H G\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM \\<le> euler_genus\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subgraph_euler_genus_le) auto"], ["proof (state)\nthis:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> euler_genus\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> euler_genus", "interpret H: digraph_map H HM"], ["proof (prove)\nusing this:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM \\<le> euler_genus\n\ngoal (1 subgoal):\n 1. digraph_map H HM", "by -"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "have \"H.sccs = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H.sccs = {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. H.sccs = {}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. H.sccs = {}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. H.sccs = {}", "assume *: \"x \\<in> H.sccs_verts\""], ["proof (state)\nthis:\n  x \\<in> H.sccs_verts\n\ngoal (1 subgoal):\n 1. H.sccs = {}", "then"], ["proof (chain)\npicking this:\n  x \\<in> H.sccs_verts", "have \"x = {}\""], ["proof (prove)\nusing this:\n  x \\<in> H.sccs_verts\n\ngoal (1 subgoal):\n 1. x = {}", "by (auto dest: H.sccs_verts_subsets simp: H_simps)"], ["proof (state)\nthis:\n  x = {}\n\ngoal (1 subgoal):\n 1. H.sccs = {}", "with *"], ["proof (chain)\npicking this:\n  x \\<in> H.sccs_verts\n  x = {}", "have False"], ["proof (prove)\nusing this:\n  x \\<in> H.sccs_verts\n  x = {}\n\ngoal (1 subgoal):\n 1. False", "by (auto simp: H.in_sccs_verts_conv_reachable)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. H.sccs = {}", "}"], ["proof (state)\nthis:\n  ?x6 \\<in> H.sccs_verts \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. H.sccs = {}", "then"], ["proof (chain)\npicking this:\n  ?x6 \\<in> H.sccs_verts \\<Longrightarrow> False", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x6 \\<in> H.sccs_verts \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. H.sccs = {}", "by (auto simp: H.sccs_verts_conv)"], ["proof (state)\nthis:\n  H.sccs = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  H.sccs = {}\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  H.sccs = {}", "have \"H.euler_genus = 0\""], ["proof (prove)\nusing this:\n  H.sccs = {}\n\ngoal (1 subgoal):\n 1. H.euler_genus = 0", "by (auto simp: H.euler_genus_def H.euler_char_def H.isolated_verts_def H.face_cycle_sets_def H_simps)"], ["proof (state)\nthis:\n  H.euler_genus = 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "then"], ["proof (chain)\npicking this:\n  H.euler_genus = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  H.euler_genus = 0\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "using \\<open>H.euler_genus \\<le> _\\<close>"], ["proof (prove)\nusing this:\n  H.euler_genus = 0\n  H.euler_genus \\<le> euler_genus\n\ngoal (1 subgoal):\n 1. 0 \\<le> euler_genus", "by simp"], ["proof (state)\nthis:\n  0 \\<le> euler_genus\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subgraph_comb_planar:\n  assumes \"subgraph G H\" \"comb_planar H\" \"\\<exists>rev. bidirected_digraph G rev\" shows \"comb_planar G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. comb_planar G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. comb_planar G", "from \\<open>comb_planar H\\<close>"], ["proof (chain)\npicking this:\n  comb_planar H", "obtain HM where \"digraph_map H HM\" and H_genus: \"pre_digraph_map.euler_genus H HM = 0\""], ["proof (prove)\nusing this:\n  comb_planar H\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding comb_planar_def"], ["proof (prove)\nusing this:\n  \\<exists>M. digraph_map H M \\<and> pre_digraph_map.euler_genus H M = 0\n\ngoal (1 subgoal):\n 1. (\\<And>HM.\n        \\<lbrakk>digraph_map H HM;\n         pre_digraph_map.euler_genus H HM = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  digraph_map H HM\n  pre_digraph_map.euler_genus H HM = 0\n\ngoal (1 subgoal):\n 1. comb_planar G", "obtain GM where G: \"digraph_map G GM\" \"pre_digraph_map.euler_genus G GM \\<le> pre_digraph_map.euler_genus H HM\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>GM.\n        \\<lbrakk>digraph_map G GM;\n         pre_digraph_map.euler_genus G GM\n         \\<le> pre_digraph_map.euler_genus H HM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1) \\<open>digraph_map H HM\\<close> assms(3)"], ["proof (prove)\nusing this:\n  subgraph G H\n  digraph_map H HM\n  \\<exists>rev. bidirected_digraph G rev\n\ngoal (1 subgoal):\n 1. (\\<And>GM.\n        \\<lbrakk>digraph_map G GM;\n         pre_digraph_map.euler_genus G GM\n         \\<le> pre_digraph_map.euler_genus H HM\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule subgraph_euler_genus_le)"], ["proof (state)\nthis:\n  digraph_map G GM\n  pre_digraph_map.euler_genus G GM \\<le> pre_digraph_map.euler_genus H HM\n\ngoal (1 subgoal):\n 1. comb_planar G", "interpret G: digraph_map G GM"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G GM", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. comb_planar G", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. comb_planar G", "using G H_genus G.nonneg_euler_genus"], ["proof (prove)\nusing this:\n  digraph_map G GM\n  G.euler_genus \\<le> pre_digraph_map.euler_genus H HM\n  pre_digraph_map.euler_genus H HM = 0\n  0 \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. comb_planar G", "unfolding comb_planar_def"], ["proof (prove)\nusing this:\n  digraph_map G GM\n  G.euler_genus \\<le> pre_digraph_map.euler_genus H HM\n  pre_digraph_map.euler_genus H HM = 0\n  0 \\<le> G.euler_genus\n\ngoal (1 subgoal):\n 1. \\<exists>M. digraph_map G M \\<and> pre_digraph_map.euler_genus G M = 0", "by auto"], ["proof (state)\nthis:\n  comb_planar G\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}