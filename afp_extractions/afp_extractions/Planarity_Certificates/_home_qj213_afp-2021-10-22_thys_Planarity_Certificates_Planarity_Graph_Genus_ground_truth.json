{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/Planarity/Graph_Genus.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma nat_diff_mod_right:\n  fixes a b c :: nat\n  assumes \"b < a\"\n  shows \"(a - b) mod c = (a - b mod c) mod c\"", "lemma inj_on_f_imageI:\n  assumes \"inj_on f S\" \"\\<And>t. t \\<in> T \\<Longrightarrow> t \\<subseteq> S\"\n  shows \"inj_on ((`) f) T\"", "lemma (in bidirected_digraph) has_dom_arev:\n  \"has_dom arev (arcs G)\"", "lemma (in fin_digraph) digraph_mapI:\n  assumes bidi: \"\\<And>a. a \\<notin> arcs G \\<Longrightarrow> edge_rev M a = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M a \\<noteq> a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M a) = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M a) = head G a\"\n  assumes edge_succ_permutes: \"edge_succ M permutes arcs G\"\n  assumes edge_succ_cyclic: \"\\<And>v. v \\<in> verts G \\<Longrightarrow> out_arcs G v \\<noteq> {} \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G v)\"\n  shows \"digraph_map G M\"", "lemma (in fin_digraph) digraph_mapI_permutes:\n  assumes bidi: \"edge_rev M permutes arcs G\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M a \\<noteq> a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M a) = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M a) = head G a\"\n  assumes edge_succ_permutes: \"edge_succ M permutes arcs G\"\n  assumes edge_succ_cyclic: \"\\<And>v. v \\<in> verts G \\<Longrightarrow> out_arcs G v \\<noteq> {} \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G v)\"\n  shows \"digraph_map G M\"", "lemma digraph_map[intro]: \"digraph_map G M\"", "lemma permutation_edge_succ: \"permutation (edge_succ M)\"", "lemma edge_pred_succ[simp]: \"edge_pred M (edge_succ M a) = a\"", "lemma edge_succ_pred[simp]: \"edge_succ M (edge_pred M a) = a\"", "lemma edge_pred_permutes: \"edge_pred M permutes arcs G\"", "lemma permutation_edge_pred: \"permutation (edge_pred M)\"", "lemma edge_succ_eq_iff[simp]: \"\\<And>x y. edge_succ M x = edge_succ M y \\<longleftrightarrow> x = y\"", "lemma edge_rev_in_arcs[simp]: \"edge_rev M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma edge_succ_in_arcs[simp]: \"edge_succ M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma edge_pred_in_arcs[simp]: \"edge_pred M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma tail_edge_succ[simp]: \"tail G (edge_succ M a) = tail G a\"", "lemma tail_edge_pred[simp]: \"tail G (edge_pred M a) = tail G a\"", "lemma bij_edge_succ[intro]: \"bij (edge_succ M)\"", "lemma edge_pred_cyclic:\n    assumes \"v \\<in> verts G\" \"out_arcs G v \\<noteq> {}\"\n    shows \"cyclic_on (edge_pred M) (out_arcs G v)\"", "lemma face_cycle_pred_succ[simp]:\n    shows \"face_cycle_pred (face_cycle_succ a) = a\"", "lemma face_cycle_succ_pred[simp]:\n    shows \"face_cycle_succ (face_cycle_pred a) = a\"", "lemma tail_face_cycle_succ: \"a \\<in> arcs G \\<Longrightarrow> tail G (face_cycle_succ a) = head G a\"", "lemma funpow_prop:\n    assumes \"\\<And>x. P (f x) \\<longleftrightarrow> P x\"\n    shows \"P ((f ^^ n) x) \\<longleftrightarrow> P x\"", "lemma face_cycle_succ_no_arc[simp]: \"a \\<notin> arcs G \\<Longrightarrow> face_cycle_succ a = a\"", "lemma funpow_face_cycle_succ_no_arc[simp]:\n    assumes \"a \\<notin> arcs G\" shows \"(face_cycle_succ ^^ n) a = a\"", "lemma funpow_face_cycle_pred_no_arc[simp]:\n    assumes \"a \\<notin> arcs G\" shows \"(face_cycle_pred ^^ n) a = a\"", "lemma face_cycle_succ_closed[simp]:\n    \"face_cycle_succ a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma face_cycle_pred_closed[simp]:\n    \"face_cycle_pred a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\"", "lemma face_cycle_succ_permutes:\n    \"face_cycle_succ permutes arcs G\"", "lemma permutation_face_cycle_succ: \"permutation face_cycle_succ\"", "lemma bij_face_cycle_succ: \"bij face_cycle_succ\"", "lemma face_cycle_pred_permutes:\n    \"face_cycle_pred permutes arcs G\"", "lemma face_cycle_set_altdef: \"face_cycle_set a = {(face_cycle_succ ^^ n) a | n. True}\"", "lemma face_cycle_set_self[simp, intro]: \"a \\<in> face_cycle_set a\"", "lemma empty_not_in_face_cycle_sets: \"{} \\<notin> face_cycle_sets\"", "lemma finite_face_cycle_set[simp, intro]: \"finite (face_cycle_set a)\"", "lemma finite_face_cycle_sets[simp, intro]: \"finite face_cycle_sets\"", "lemma face_cycle_set_induct[case_names base step, induct set: face_cycle_set]:\n    assumes consume: \"a \\<in> face_cycle_set x\"\n      and ih_base: \"P x\"\n      and ih_step: \"\\<And>y. y \\<in> face_cycle_set x \\<Longrightarrow> P y \\<Longrightarrow> P (face_cycle_succ y)\"\n    shows \"P a\"", "lemma face_cycle_succ_cyclic:\n    \"cyclic_on face_cycle_succ (face_cycle_set a)\"", "lemma face_cycle_eq:\n    assumes \"b \\<in> face_cycle_set a\" shows \"face_cycle_set b = face_cycle_set a\"", "lemma face_cycle_succ_in_arcsI: \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> face_cycle_succ a \\<in> arcs G\"", "lemma face_cycle_succ_inI: \"\\<And>x y. x \\<in> face_cycle_set y \\<Longrightarrow> face_cycle_succ x \\<in> face_cycle_set y\"", "lemma face_cycle_succ_inD: \"\\<And>x y. face_cycle_succ x \\<in> face_cycle_set y \\<Longrightarrow> x \\<in> face_cycle_set y\"", "lemma face_cycle_set_parts:\n    \"face_cycle_set a = face_cycle_set b \\<or> face_cycle_set a \\<inter> face_cycle_set b = {}\"", "lemma reflp_fc_equiv: \"reflp fc_equiv\"", "lemma symp_fc_equiv: \"symp fc_equiv\"", "lemma transp_fc_equiv: \"transp fc_equiv\"", "lemma \"equivp fc_equiv\"", "lemma in_face_cycle_setD:\n    assumes \"y \\<in> face_cycle_set x\" \"x \\<in> arcs G\" shows \"y \\<in> arcs G\"", "lemma in_face_cycle_setsD:\n    assumes \"x \\<in> face_cycle_sets\" shows \"x \\<subseteq> arcs G\"", "lemma isolated_verts_app_iso[simp]:\n    \"pre_digraph.isolated_verts (app_iso hom G) = iso_verts hom ` isolated_verts\"", "lemma card_isolated_verts_iso[simp]:\n    \"card (iso_verts hom ` pre_digraph.isolated_verts G) = card isolated_verts\"", "lemma face_cycle_succ_neq:\n    assumes \"a \\<in> arcs G\" \"tail G a \\<noteq> head G a\" shows \"face_cycle_succ a \\<noteq> a \"", "lemma funcsetI_permutes:\n  assumes \"f permutes S\" shows \"f \\<in> S \\<rightarrow> S\"", "lemma wrap_iso_arcs_iso_arcs[simp]:\n    assumes \"x \\<in> arcs G\"\n    shows \"wrap_iso_arcs hom f (iso_arcs hom x) = iso_arcs hom (f x)\"", "lemma inj_on_wrap_iso_arcs:\n    assumes dom: \"\\<And>f. f \\<in> F \\<Longrightarrow> has_dom f (arcs G)\"\n    assumes funcset: \"F \\<subseteq> arcs G \\<rightarrow> arcs G\"\n    shows \"inj_on (wrap_iso_arcs hom) F\"", "lemma inj_on_wrap_iso_arcs_f:\n    assumes \"A \\<subseteq> arcs G\" \"f \\<in> A \\<rightarrow> A\" \"B = iso_arcs hom ` A\"\n    assumes \"inj_on f A\" shows \"inj_on (wrap_iso_arcs hom f) B\"", "lemma wrap_iso_arcs_in_funcsetI:\n    assumes \"A \\<subseteq> arcs G\" \"f \\<in> A \\<rightarrow> A\"\n    shows \"wrap_iso_arcs hom f \\<in> iso_arcs hom ` A  \\<rightarrow> iso_arcs hom ` A\"", "lemma wrap_iso_arcs_permutes:\n    assumes \"A \\<subseteq> arcs G\" \"f permutes A\"\n    shows \"wrap_iso_arcs hom f permutes (iso_arcs hom ` A)\"", "lemma (in digraph_map) digraph_map_isoI:\n  assumes \"digraph_isomorphism hom\" shows \"digraph_map (app_iso hom G) (map_iso hom)\""], "translations": [["", "lemma nat_diff_mod_right:\n  fixes a b c :: nat\n  assumes \"b < a\"\n  shows \"(a - b) mod c = (a - b mod c) mod c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "from assms"], ["proof (chain)\npicking this:\n  b < a", "have b_mod: \"b mod c \\<le> a\""], ["proof (prove)\nusing this:\n  b < a\n\ngoal (1 subgoal):\n 1. b mod c \\<le> a", "by (metis mod_less_eq_dividend linear not_le order_trans)"], ["proof (state)\nthis:\n  b mod c \\<le> a\n\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "have \"int ((a - b) mod c) = (int a - int b mod int c) mod int c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int ((a - b) mod c) = (int a - int b mod int c) mod int c", "using assms"], ["proof (prove)\nusing this:\n  b < a\n\ngoal (1 subgoal):\n 1. int ((a - b) mod c) = (int a - int b mod int c) mod int c", "by (simp add: zmod_int of_nat_diff mod_simps)"], ["proof (state)\nthis:\n  int ((a - b) mod c) = (int a - int b mod int c) mod int c\n\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "also"], ["proof (state)\nthis:\n  int ((a - b) mod c) = (int a - int b mod int c) mod int c\n\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "have \"\\<dots> = int ((a - b mod c) mod c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (int a - int b mod int c) mod int c = int ((a - b mod c) mod c)", "using assms b_mod"], ["proof (prove)\nusing this:\n  b < a\n  b mod c \\<le> a\n\ngoal (1 subgoal):\n 1. (int a - int b mod int c) mod int c = int ((a - b mod c) mod c)", "by (simp add: zmod_int [symmetric] of_nat_diff [symmetric])"], ["proof (state)\nthis:\n  (int a - int b mod int c) mod int c = int ((a - b mod c) mod c)\n\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "finally"], ["proof (chain)\npicking this:\n  int ((a - b) mod c) = int ((a - b mod c) mod c)", "show ?thesis"], ["proof (prove)\nusing this:\n  int ((a - b) mod c) = int ((a - b mod c) mod c)\n\ngoal (1 subgoal):\n 1. (a - b) mod c = (a - b mod c) mod c", "by simp"], ["proof (state)\nthis:\n  (a - b) mod c = (a - b mod c) mod c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_f_imageI:\n  assumes \"inj_on f S\" \"\\<And>t. t \\<in> T \\<Longrightarrow> t \\<subseteq> S\"\n  shows \"inj_on ((`) f) T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) f) T", "using assms"], ["proof (prove)\nusing this:\n  inj_on f S\n  ?t \\<in> T \\<Longrightarrow> ?t \\<subseteq> S\n\ngoal (1 subgoal):\n 1. inj_on ((`) f) T", "by (auto simp: inj_on_image_eq_iff intro: inj_onI)"], ["", "section \\<open>Combinatorial Maps\\<close>"], ["", "lemma (in bidirected_digraph) has_dom_arev:\n  \"has_dom arev (arcs G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has_dom arev (arcs G)", "using arev_dom"], ["proof (prove)\nusing this:\n  (?a \\<in> arcs G) = (arev ?a \\<noteq> ?a)\n\ngoal (1 subgoal):\n 1. has_dom arev (arcs G)", "by (auto simp: has_dom_def)"], ["", "record 'b pre_map =\n  edge_rev :: \"'b \\<Rightarrow> 'b\"\n  edge_succ :: \"'b \\<Rightarrow> 'b\""], ["", "definition edge_pred :: \"'b pre_map \\<Rightarrow> 'b \\<Rightarrow> 'b\" where\n  \"edge_pred M = inv (edge_succ M)\""], ["", "locale pre_digraph_map = pre_digraph + fixes M :: \"'b pre_map\""], ["", "locale digraph_map = fin_digraph G\n  + pre_digraph_map G M\n  + bidirected_digraph G \"edge_rev M\" for G M +\n  assumes edge_succ_permutes: \"edge_succ M permutes arcs G\"\n  assumes edge_succ_cyclic: \"\\<And>v. v \\<in> verts G \\<Longrightarrow> out_arcs G v \\<noteq> {} \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G v)\""], ["", "lemma (in fin_digraph) digraph_mapI:\n  assumes bidi: \"\\<And>a. a \\<notin> arcs G \\<Longrightarrow> edge_rev M a = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M a \\<noteq> a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M a) = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M a) = head G a\"\n  assumes edge_succ_permutes: \"edge_succ M permutes arcs G\"\n  assumes edge_succ_cyclic: \"\\<And>v. v \\<in> verts G \\<Longrightarrow> out_arcs G v \\<noteq> {} \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G v)\"\n  shows \"digraph_map G M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G M", "using assms"], ["proof (prove)\nusing this:\n  ?a2 \\<notin> arcs G \\<Longrightarrow> edge_rev M ?a2 = ?a2\n  ?a2 \\<in> arcs G \\<Longrightarrow> edge_rev M ?a2 \\<noteq> ?a2\n  ?a2 \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M ?a2) = ?a2\n  ?a2 \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M ?a2) = head G ?a2\n  edge_succ M permutes arcs G\n  \\<lbrakk>?v2 \\<in> verts G; out_arcs G ?v2 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G ?v2)\n\ngoal (1 subgoal):\n 1. digraph_map G M", "by unfold_locales auto"], ["", "lemma (in fin_digraph) digraph_mapI_permutes:\n  assumes bidi: \"edge_rev M permutes arcs G\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M a \\<noteq> a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M a) = a\"\n    \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M a) = head G a\"\n  assumes edge_succ_permutes: \"edge_succ M permutes arcs G\"\n  assumes edge_succ_cyclic: \"\\<And>v. v \\<in> verts G \\<Longrightarrow> out_arcs G v \\<noteq> {} \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G v)\"\n  shows \"digraph_map G M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map G M", "interpret bidirected_digraph G \"edge_rev M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bidirected_digraph G (edge_rev M)", "using bidi"], ["proof (prove)\nusing this:\n  edge_rev M permutes arcs G\n  ?a2 \\<in> arcs G \\<Longrightarrow> edge_rev M ?a2 \\<noteq> ?a2\n  ?a2 \\<in> arcs G \\<Longrightarrow> edge_rev M (edge_rev M ?a2) = ?a2\n  ?a2 \\<in> arcs G \\<Longrightarrow> tail G (edge_rev M ?a2) = head G ?a2\n\ngoal (1 subgoal):\n 1. bidirected_digraph G (edge_rev M)", "by unfold_locales (auto simp: permutes_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map G M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G M", "using edge_succ_permutes edge_succ_cyclic"], ["proof (prove)\nusing this:\n  edge_succ M permutes arcs G\n  \\<lbrakk>?v2 \\<in> verts G; out_arcs G ?v2 \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> cyclic_on (edge_succ M) (out_arcs G ?v2)\n\ngoal (1 subgoal):\n 1. digraph_map G M", "by unfold_locales"], ["proof (state)\nthis:\n  digraph_map G M\n\ngoal:\nNo subgoals!", "qed"], ["", "context digraph_map\nbegin"], ["", "lemma digraph_map[intro]: \"digraph_map G M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map G M", "by unfold_locales"], ["", "lemma permutation_edge_succ: \"permutation (edge_succ M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permutation (edge_succ M)", "by (metis edge_succ_permutes finite_arcs permutation_permutes)"], ["", "lemma edge_pred_succ[simp]: \"edge_pred M (edge_succ M a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_pred M (edge_succ M a) = a", "by (metis edge_pred_def edge_succ_permutes permutes_inverses(2))"], ["", "lemma edge_succ_pred[simp]: \"edge_succ M (edge_pred M a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M (edge_pred M a) = a", "by (metis edge_pred_def edge_succ_permutes permutes_inverses(1))"], ["", "lemma edge_pred_permutes: \"edge_pred M permutes arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_pred M permutes arcs G", "unfolding edge_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inv (edge_succ M) permutes arcs G", "using edge_succ_permutes"], ["proof (prove)\nusing this:\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. inv (edge_succ M) permutes arcs G", "by (rule permutes_inv)"], ["", "lemma permutation_edge_pred: \"permutation (edge_pred M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permutation (edge_pred M)", "by (metis edge_pred_permutes finite_arcs permutation_permutes)"], ["", "lemma edge_succ_eq_iff[simp]: \"\\<And>x y. edge_succ M x = edge_succ M y \\<longleftrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. (edge_succ M x = edge_succ M y) = (x = y)", "by (metis edge_pred_succ)"], ["", "lemma edge_rev_in_arcs[simp]: \"edge_rev M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_rev M a \\<in> arcs G) = (a \\<in> arcs G)", "by (metis arev_arev arev_permutes_arcs permutes_not_in)"], ["", "lemma edge_succ_in_arcs[simp]: \"edge_succ M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_succ M a \\<in> arcs G) = (a \\<in> arcs G)", "by (metis edge_pred_succ edge_succ_permutes permutes_not_in)"], ["", "lemma edge_pred_in_arcs[simp]: \"edge_pred M a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_pred M a \\<in> arcs G) = (a \\<in> arcs G)", "by (metis edge_succ_pred edge_pred_permutes permutes_not_in)"], ["", "lemma tail_edge_succ[simp]: \"tail G (edge_succ M a) = tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G (edge_succ M a) = tail G a", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "assume \"a \\<in> arcs G\""], ["proof (state)\nthis:\n  a \\<in> arcs G\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "then"], ["proof (chain)\npicking this:\n  a \\<in> arcs G", "have \"tail G a \\<in> verts G\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. tail G a \\<in> verts G", "by auto"], ["proof (state)\nthis:\n  tail G a \\<in> verts G\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "moreover"], ["proof (state)\nthis:\n  tail G a \\<in> verts G\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "then"], ["proof (chain)\npicking this:\n  tail G a \\<in> verts G", "have \"out_arcs G (tail G a) \\<noteq> {}\""], ["proof (prove)\nusing this:\n  tail G a \\<in> verts G\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<noteq> {}", "using \\<open>a \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  tail G a \\<in> verts G\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. out_arcs G (tail G a) \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  out_arcs G (tail G a) \\<noteq> {}\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "ultimately"], ["proof (chain)\npicking this:\n  tail G a \\<in> verts G\n  out_arcs G (tail G a) \\<noteq> {}", "have \"cyclic_on (edge_succ M) (out_arcs G (tail G a))\""], ["proof (prove)\nusing this:\n  tail G a \\<in> verts G\n  out_arcs G (tail G a) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G a))", "by (rule edge_succ_cyclic)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "moreover"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "have \"a \\<in> out_arcs G (tail G a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> out_arcs G (tail G a)", "using \\<open>a \\<in> arcs G\\<close>"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. a \\<in> out_arcs G (tail G a)", "by simp"], ["proof (state)\nthis:\n  a \\<in> out_arcs G (tail G a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "ultimately"], ["proof (chain)\npicking this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n  a \\<in> out_arcs G (tail G a)", "have \"edge_succ M a \\<in> out_arcs G (tail G a)\""], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G a))\n  a \\<in> out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. edge_succ M a \\<in> out_arcs G (tail G a)", "by (rule cyclic_on_inI)"], ["proof (state)\nthis:\n  edge_succ M a \\<in> out_arcs G (tail G a)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a\n 2. \\<not> ?P \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "then"], ["proof (chain)\npicking this:\n  edge_succ M a \\<in> out_arcs G (tail G a)", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ M a \\<in> out_arcs G (tail G a)\n\ngoal (1 subgoal):\n 1. tail G (edge_succ M a) = tail G a", "by simp"], ["proof (state)\nthis:\n  tail G (edge_succ M a) = tail G a\n\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "assume \"a \\<notin> arcs G\""], ["proof (state)\nthis:\n  a \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> tail G (edge_succ M a) = tail G a", "then"], ["proof (chain)\npicking this:\n  a \\<notin> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. tail G (edge_succ M a) = tail G a", "using edge_succ_permutes"], ["proof (prove)\nusing this:\n  a \\<notin> arcs G\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. tail G (edge_succ M a) = tail G a", "by (simp add: permutes_not_in)"], ["proof (state)\nthis:\n  tail G (edge_succ M a) = tail G a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tail_edge_pred[simp]: \"tail G (edge_pred M a) = tail G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G (edge_pred M a) = tail G a", "by (metis edge_succ_pred tail_edge_succ)"], ["", "lemma bij_edge_succ[intro]: \"bij (edge_succ M)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (edge_succ M)", "using edge_succ_permutes"], ["proof (prove)\nusing this:\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. bij (edge_succ M)", "by (simp add: permutes_conv_has_dom)"], ["", "lemma edge_pred_cyclic:\n    assumes \"v \\<in> verts G\" \"out_arcs G v \\<noteq> {}\"\n    shows \"cyclic_on (edge_pred M) (out_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "obtain a where orb_a_eq: \"orbit (edge_succ M) a = out_arcs G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        orbit (edge_succ M) a = out_arcs G v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using edge_succ_cyclic[OF assms]"], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G v)\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        orbit (edge_succ M) a = out_arcs G v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: cyclic_on_def)"], ["proof (state)\nthis:\n  orbit (edge_succ M) a = out_arcs G v\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "have \"cyclic_on (edge_pred M) (orbit (edge_pred M) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (orbit (edge_pred M) a)", "using permutation_edge_pred"], ["proof (prove)\nusing this:\n  permutation (edge_pred M)\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (orbit (edge_pred M) a)", "by (rule cyclic_on_orbit')"], ["proof (state)\nthis:\n  cyclic_on (edge_pred M) (orbit (edge_pred M) a)\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "also"], ["proof (state)\nthis:\n  cyclic_on (edge_pred M) (orbit (edge_pred M) a)\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "have \"orbit (edge_pred M) a = orbit (edge_succ M) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (edge_pred M) a = orbit (edge_succ M) a", "unfolding edge_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit (inv (edge_succ M)) a = orbit (edge_succ M) a", "using permutation_edge_succ"], ["proof (prove)\nusing this:\n  permutation (edge_succ M)\n\ngoal (1 subgoal):\n 1. orbit (inv (edge_succ M)) a = orbit (edge_succ M) a", "by (rule orbit_inv_eq)"], ["proof (state)\nthis:\n  orbit (edge_pred M) a = orbit (edge_succ M) a\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "finally"], ["proof (chain)\npicking this:\n  cyclic_on (edge_pred M) (orbit (edge_succ M) a)", "show \"cyclic_on (edge_pred M) (out_arcs G v)\""], ["proof (prove)\nusing this:\n  cyclic_on (edge_pred M) (orbit (edge_succ M) a)\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_pred M) (out_arcs G v)", "by (simp add: orb_a_eq)"], ["proof (state)\nthis:\n  cyclic_on (edge_pred M) (out_arcs G v)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition (in pre_digraph_map) face_cycle_succ :: \"'b \\<Rightarrow> 'b\" where\n    \"face_cycle_succ \\<equiv> edge_succ M o edge_rev M\""], ["", "definition (in pre_digraph_map) face_cycle_pred :: \"'b \\<Rightarrow> 'b\" where\n    \"face_cycle_pred \\<equiv> edge_rev M o edge_pred M\""], ["", "lemma face_cycle_pred_succ[simp]:\n    shows \"face_cycle_pred (face_cycle_succ a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_pred (face_cycle_succ a) = a", "unfolding face_cycle_pred_def face_cycle_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_rev M \\<circ> edge_pred M) ((edge_succ M \\<circ> edge_rev M) a) =\n    a", "by simp"], ["", "lemma face_cycle_succ_pred[simp]:\n    shows \"face_cycle_succ (face_cycle_pred a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_succ (face_cycle_pred a) = a", "unfolding face_cycle_pred_def face_cycle_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (edge_succ M \\<circ> edge_rev M) ((edge_rev M \\<circ> edge_pred M) a) =\n    a", "by simp"], ["", "lemma tail_face_cycle_succ: \"a \\<in> arcs G \\<Longrightarrow> tail G (face_cycle_succ a) = head G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> arcs G \\<Longrightarrow> tail G (face_cycle_succ a) = head G a", "by (auto simp: face_cycle_succ_def)"], ["", "lemma funpow_prop:\n    assumes \"\\<And>x. P (f x) \\<longleftrightarrow> P x\"\n    shows \"P ((f ^^ n) x) \\<longleftrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P ((f ^^ n) x) = P x", "using assms"], ["proof (prove)\nusing this:\n  P (f ?x2) = P ?x2\n\ngoal (1 subgoal):\n 1. P ((f ^^ n) x) = P x", "by (induct n) (auto simp: )"], ["", "lemma face_cycle_succ_no_arc[simp]: \"a \\<notin> arcs G \\<Longrightarrow> face_cycle_succ a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> arcs G \\<Longrightarrow> face_cycle_succ a = a", "by (auto simp: face_cycle_succ_def permutes_not_in[OF arev_permutes_arcs]\n      permutes_not_in[OF edge_succ_permutes])"], ["", "lemma funpow_face_cycle_succ_no_arc[simp]:\n    assumes \"a \\<notin> arcs G\" shows \"(face_cycle_succ ^^ n) a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_succ ^^ n) a = a", "using assms"], ["proof (prove)\nusing this:\n  a \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. (face_cycle_succ ^^ n) a = a", "by (induct n) auto"], ["", "lemma funpow_face_cycle_pred_no_arc[simp]:\n    assumes \"a \\<notin> arcs G\" shows \"(face_cycle_pred ^^ n) a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_pred ^^ n) a = a", "using assms"], ["proof (prove)\nusing this:\n  a \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. (face_cycle_pred ^^ n) a = a", "by (induct n) (auto simp: face_cycle_pred_def permutes_not_in[OF arev_permutes_arcs]\n      permutes_not_in[OF edge_pred_permutes])"], ["", "lemma face_cycle_succ_closed[simp]:\n    \"face_cycle_succ a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_succ a \\<in> arcs G) = (a \\<in> arcs G)", "by (metis comp_apply edge_rev_in_arcs edge_succ_in_arcs face_cycle_succ_def)"], ["", "lemma face_cycle_pred_closed[simp]:\n    \"face_cycle_pred a \\<in> arcs G \\<longleftrightarrow> a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (face_cycle_pred a \\<in> arcs G) = (a \\<in> arcs G)", "by (metis face_cycle_succ_closed face_cycle_succ_pred)"], ["", "lemma face_cycle_succ_permutes:\n    \"face_cycle_succ permutes arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_succ permutes arcs G", "unfolding face_cycle_succ_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ M \\<circ> edge_rev M permutes arcs G", "using arev_permutes_arcs edge_succ_permutes"], ["proof (prove)\nusing this:\n  edge_rev M permutes arcs G\n  edge_succ M permutes arcs G\n\ngoal (1 subgoal):\n 1. edge_succ M \\<circ> edge_rev M permutes arcs G", "by (rule permutes_compose)"], ["", "lemma permutation_face_cycle_succ: \"permutation face_cycle_succ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permutation face_cycle_succ", "using face_cycle_succ_permutes finite_arcs"], ["proof (prove)\nusing this:\n  face_cycle_succ permutes arcs G\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. permutation face_cycle_succ", "by (metis permutation_permutes)"], ["", "lemma bij_face_cycle_succ: \"bij face_cycle_succ\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij face_cycle_succ", "using face_cycle_succ_permutes"], ["proof (prove)\nusing this:\n  face_cycle_succ permutes arcs G\n\ngoal (1 subgoal):\n 1. bij face_cycle_succ", "by (simp add: permutes_conv_has_dom)"], ["", "lemma face_cycle_pred_permutes:\n    \"face_cycle_pred permutes arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_pred permutes arcs G", "unfolding face_cycle_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev M \\<circ> edge_pred M permutes arcs G", "using edge_pred_permutes arev_permutes_arcs"], ["proof (prove)\nusing this:\n  edge_pred M permutes arcs G\n  edge_rev M permutes arcs G\n\ngoal (1 subgoal):\n 1. edge_rev M \\<circ> edge_pred M permutes arcs G", "by (rule permutes_compose)"], ["", "definition (in pre_digraph_map) face_cycle_set :: \"'b \\<Rightarrow> 'b set\" where\n    \"face_cycle_set a = orbit face_cycle_succ a\""], ["", "definition (in pre_digraph_map) face_cycle_sets :: \"'b set set\" where\n    \"face_cycle_sets = face_cycle_set ` arcs G\""], ["", "lemma face_cycle_set_altdef: \"face_cycle_set a = {(face_cycle_succ ^^ n) a | n. True}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_set a = {(face_cycle_succ ^^ n) a |n. True}", "unfolding face_cycle_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. orbit face_cycle_succ a = {(face_cycle_succ ^^ n) a |n. True}", "by (intro orbit_altdef_self_in permutation_self_in_orbit permutation_face_cycle_succ)"], ["", "lemma face_cycle_set_self[simp, intro]: \"a \\<in> face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> face_cycle_set a", "unfolding face_cycle_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> orbit face_cycle_succ a", "using permutation_face_cycle_succ"], ["proof (prove)\nusing this:\n  permutation face_cycle_succ\n\ngoal (1 subgoal):\n 1. a \\<in> orbit face_cycle_succ a", "by (rule permutation_self_in_orbit)"], ["", "lemma empty_not_in_face_cycle_sets: \"{} \\<notin> face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<notin> face_cycle_sets", "by (auto simp: face_cycle_sets_def)"], ["", "lemma finite_face_cycle_set[simp, intro]: \"finite (face_cycle_set a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (face_cycle_set a)", "using face_cycle_set_self"], ["proof (prove)\nusing this:\n  ?a \\<in> face_cycle_set ?a\n\ngoal (1 subgoal):\n 1. finite (face_cycle_set a)", "unfolding face_cycle_set_def"], ["proof (prove)\nusing this:\n  ?a \\<in> orbit face_cycle_succ ?a\n\ngoal (1 subgoal):\n 1. finite (orbit face_cycle_succ a)", "by (simp add: finite_orbit)"], ["", "lemma finite_face_cycle_sets[simp, intro]: \"finite face_cycle_sets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite face_cycle_sets", "by (auto simp: face_cycle_sets_def)"], ["", "lemma face_cycle_set_induct[case_names base step, induct set: face_cycle_set]:\n    assumes consume: \"a \\<in> face_cycle_set x\"\n      and ih_base: \"P x\"\n      and ih_step: \"\\<And>y. y \\<in> face_cycle_set x \\<Longrightarrow> P y \\<Longrightarrow> P (face_cycle_succ y)\"\n    shows \"P a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P a", "using consume"], ["proof (prove)\nusing this:\n  a \\<in> face_cycle_set x\n\ngoal (1 subgoal):\n 1. P a", "unfolding face_cycle_set_def"], ["proof (prove)\nusing this:\n  a \\<in> orbit face_cycle_succ x\n\ngoal (1 subgoal):\n 1. P a", "by induct (auto simp: ih_step face_cycle_set_def[symmetric] ih_base )"], ["", "lemma face_cycle_succ_cyclic:\n    \"cyclic_on face_cycle_succ (face_cycle_set a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on face_cycle_succ (face_cycle_set a)", "unfolding face_cycle_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on face_cycle_succ (orbit face_cycle_succ a)", "using permutation_face_cycle_succ"], ["proof (prove)\nusing this:\n  permutation face_cycle_succ\n\ngoal (1 subgoal):\n 1. cyclic_on face_cycle_succ (orbit face_cycle_succ a)", "by (rule cyclic_on_orbit')"], ["", "lemma face_cycle_eq:\n    assumes \"b \\<in> face_cycle_set a\" shows \"face_cycle_set b = face_cycle_set a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_set b = face_cycle_set a", "using assms"], ["proof (prove)\nusing this:\n  b \\<in> face_cycle_set a\n\ngoal (1 subgoal):\n 1. face_cycle_set b = face_cycle_set a", "unfolding face_cycle_set_def"], ["proof (prove)\nusing this:\n  b \\<in> orbit face_cycle_succ a\n\ngoal (1 subgoal):\n 1. orbit face_cycle_succ b = orbit face_cycle_succ a", "by (auto intro: orbit_swap orbit_trans permutation_face_cycle_succ permutation_self_in_orbit)"], ["", "lemma face_cycle_succ_in_arcsI: \"\\<And>a. a \\<in> arcs G \\<Longrightarrow> face_cycle_succ a \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. a \\<in> arcs G \\<Longrightarrow> face_cycle_succ a \\<in> arcs G", "by (auto simp: face_cycle_succ_def)"], ["", "lemma face_cycle_succ_inI: \"\\<And>x y. x \\<in> face_cycle_set y \\<Longrightarrow> face_cycle_succ x \\<in> face_cycle_set y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       x \\<in> face_cycle_set y \\<Longrightarrow>\n       face_cycle_succ x \\<in> face_cycle_set y", "by (metis face_cycle_succ_cyclic cyclic_on_inI)"], ["", "lemma face_cycle_succ_inD: \"\\<And>x y. face_cycle_succ x \\<in> face_cycle_set y \\<Longrightarrow> x \\<in> face_cycle_set y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       face_cycle_succ x \\<in> face_cycle_set y \\<Longrightarrow>\n       x \\<in> face_cycle_set y", "by (metis face_cycle_eq face_cycle_set_self face_cycle_succ_inI)"], ["", "lemma face_cycle_set_parts:\n    \"face_cycle_set a = face_cycle_set b \\<or> face_cycle_set a \\<inter> face_cycle_set b = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_set a = face_cycle_set b \\<or>\n    face_cycle_set a \\<inter> face_cycle_set b = {}", "by (metis disjoint_iff_not_equal face_cycle_eq)"], ["", "definition fc_equiv :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\" where\n    \"fc_equiv a b \\<equiv> a \\<in> face_cycle_set b\""], ["", "lemma reflp_fc_equiv: \"reflp fc_equiv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reflp fc_equiv", "by (rule reflpI) (simp add: fc_equiv_def)"], ["", "lemma symp_fc_equiv: \"symp fc_equiv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symp fc_equiv", "using face_cycle_set_parts"], ["proof (prove)\nusing this:\n  face_cycle_set ?a = face_cycle_set ?b \\<or>\n  face_cycle_set ?a \\<inter> face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. symp fc_equiv", "by (intro sympI) (auto simp: fc_equiv_def)"], ["", "lemma transp_fc_equiv: \"transp fc_equiv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transp fc_equiv", "using face_cycle_set_parts"], ["proof (prove)\nusing this:\n  face_cycle_set ?a = face_cycle_set ?b \\<or>\n  face_cycle_set ?a \\<inter> face_cycle_set ?b = {}\n\ngoal (1 subgoal):\n 1. transp fc_equiv", "by (intro transpI) (auto simp: fc_equiv_def)"], ["", "lemma \"equivp fc_equiv\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equivp fc_equiv", "by (intro equivpI reflp_fc_equiv symp_fc_equiv transp_fc_equiv)"], ["", "lemma in_face_cycle_setD:\n    assumes \"y \\<in> face_cycle_set x\" \"x \\<in> arcs G\" shows \"y \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> arcs G", "using assms"], ["proof (prove)\nusing this:\n  y \\<in> face_cycle_set x\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. y \\<in> arcs G", "by (auto simp: face_cycle_set_def dest: permutes_orbit_subset[OF face_cycle_succ_permutes])"], ["", "lemma in_face_cycle_setsD:\n    assumes \"x \\<in> face_cycle_sets\" shows \"x \\<subseteq> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<subseteq> arcs G", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> face_cycle_sets\n\ngoal (1 subgoal):\n 1. x \\<subseteq> arcs G", "by (auto simp: face_cycle_sets_def dest: in_face_cycle_setD)"], ["", "end"], ["", "definition (in pre_digraph) isolated_verts :: \"'a set\" where\n  \"isolated_verts \\<equiv> {v \\<in> verts G. out_arcs G v = {}}\""], ["", "definition (in pre_digraph_map) euler_char :: int where\n  \"euler_char \\<equiv> int (card (verts G)) - int (card (arcs G) div 2) + int (card face_cycle_sets)\""], ["", "definition (in pre_digraph_map) euler_genus :: int where\n  \"euler_genus \\<equiv> (int (2 * card sccs) - int (card isolated_verts) - euler_char) div 2\""], ["", "definition comb_planar :: \"('a,'b) pre_digraph \\<Rightarrow> bool\" where\n  \"comb_planar G \\<equiv> \\<exists>M. digraph_map G M \\<and> pre_digraph_map.euler_genus G M = 0\""], ["", "text \\<open>Number of isolated vertices is a graph invariant\\<close>"], ["", "context\n  fixes G hom assumes hom: \"pre_digraph.digraph_isomorphism G hom\"\nbegin"], ["", "interpretation wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "using hom"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G hom\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by (auto simp: pre_digraph.digraph_isomorphism_def)"], ["", "lemma isolated_verts_app_iso[simp]:\n    \"pre_digraph.isolated_verts (app_iso hom G) = iso_verts hom ` isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pre_digraph.isolated_verts (app_iso hom G) =\n    iso_verts hom ` isolated_verts", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. pre_digraph.isolated_verts (app_iso hom G) =\n    iso_verts hom ` isolated_verts", "by (auto simp: pre_digraph.isolated_verts_def iso_verts_tail inj_image_mem_iff out_arcs_app_iso_eq)"], ["", "lemma card_isolated_verts_iso[simp]:\n    \"card (iso_verts hom ` pre_digraph.isolated_verts G) = card isolated_verts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card (iso_verts hom ` isolated_verts) = card isolated_verts", "apply (rule card_image)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (iso_verts hom) isolated_verts", "using hom"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. inj_on (iso_verts hom) isolated_verts", "apply (rule digraph_isomorphism_inj_on_verts[THEN subset_inj_on])"], ["proof (prove)\ngoal (1 subgoal):\n 1. isolated_verts \\<subseteq> verts G", "apply (auto simp: isolated_verts_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"], ["", "context digraph_map begin"], ["", "lemma face_cycle_succ_neq:\n    assumes \"a \\<in> arcs G\" \"tail G a \\<noteq> head G a\" shows \"face_cycle_succ a \\<noteq> a \""], ["proof (prove)\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "from assms"], ["proof (chain)\npicking this:\n  a \\<in> arcs G\n  tail G a \\<noteq> head G a", "have \"edge_rev M a \\<in> arcs G\""], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. edge_rev M a \\<in> arcs G", "by (subst edge_rev_in_arcs) simp"], ["proof (state)\nthis:\n  edge_rev M a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "then"], ["proof (chain)\npicking this:\n  edge_rev M a \\<in> arcs G", "have \"cyclic_on (edge_succ M) (out_arcs G (tail G (edge_rev M a)))\""], ["proof (prove)\nusing this:\n  edge_rev M a \\<in> arcs G\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G (tail G (edge_rev M a)))", "by (intro edge_succ_cyclic) (auto dest: tail_in_verts simp: out_arcs_def intro: exI[where x=\"edge_rev M a\"])"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G (tail G (edge_rev M a)))\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "then"], ["proof (chain)\npicking this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G (edge_rev M a)))", "have \"edge_succ M (edge_rev M a) \\<in> (out_arcs G (tail G (edge_rev M a)))\""], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G (tail G (edge_rev M a)))\n\ngoal (1 subgoal):\n 1. edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))", "by (rule cyclic_on_inI) (auto simp: \\<open>edge_rev M a \\<in> _\\<close>[simplified])"], ["proof (state)\nthis:\n  edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "moreover"], ["proof (state)\nthis:\n  edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "have \"tail G (edge_succ M (edge_rev M a)) = head G a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail G (edge_succ M (edge_rev M a)) = head G a", "using assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs G\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. tail G (edge_succ M (edge_rev M a)) = head G a", "by auto"], ["proof (state)\nthis:\n  tail G (edge_succ M (edge_rev M a)) = head G a\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "then"], ["proof (chain)\npicking this:\n  tail G (edge_succ M (edge_rev M a)) = head G a", "have \"edge_succ M (edge_rev M a) \\<noteq> a\""], ["proof (prove)\nusing this:\n  tail G (edge_succ M (edge_rev M a)) = head G a\n\ngoal (1 subgoal):\n 1. edge_succ M (edge_rev M a) \\<noteq> a", "using assms"], ["proof (prove)\nusing this:\n  tail G (edge_succ M (edge_rev M a)) = head G a\n  a \\<in> arcs G\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. edge_succ M (edge_rev M a) \\<noteq> a", "by metis"], ["proof (state)\nthis:\n  edge_succ M (edge_rev M a) \\<noteq> a\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "ultimately"], ["proof (chain)\npicking this:\n  edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))\n  edge_succ M (edge_rev M a) \\<noteq> a", "show ?thesis"], ["proof (prove)\nusing this:\n  edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))\n  edge_succ M (edge_rev M a) \\<noteq> a\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "using assms"], ["proof (prove)\nusing this:\n  edge_succ M (edge_rev M a) \\<in> out_arcs G (tail G (edge_rev M a))\n  edge_succ M (edge_rev M a) \\<noteq> a\n  a \\<in> arcs G\n  tail G a \\<noteq> head G a\n\ngoal (1 subgoal):\n 1. face_cycle_succ a \\<noteq> a", "by (auto simp: face_cycle_succ_def)"], ["proof (state)\nthis:\n  face_cycle_succ a \\<noteq> a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "section \\<open>Maps and Isomorphism\\<close>"], ["", "definition (in pre_digraph)\n  \"wrap_iso_arcs hom f = perm_restrict (iso_arcs hom o f o iso_arcs (inv_iso hom)) (arcs (app_iso hom G))\""], ["", "definition (in pre_digraph_map) map_iso :: \"('a,'b,'a2,'b2) digraph_isomorphism \\<Rightarrow> 'b2 pre_map\" where\n  \"map_iso f \\<equiv> \n  \\<lparr> edge_rev = wrap_iso_arcs f (edge_rev M)\n  , edge_succ = wrap_iso_arcs f (edge_succ M)\n  \\<rparr>\""], ["", "lemma funcsetI_permutes:\n  assumes \"f permutes S\" shows \"f \\<in> S \\<rightarrow> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> S \\<rightarrow> S", "by (metis assms funcsetI permutes_in_image)"], ["", "context\n  fixes G hom assumes hom: \"pre_digraph.digraph_isomorphism G hom\"\nbegin"], ["", "interpretation wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "using hom"], ["proof (prove)\nusing this:\n  pre_digraph.digraph_isomorphism G hom\n\ngoal (1 subgoal):\n 1. wf_digraph G", "by (auto simp: pre_digraph.digraph_isomorphism_def)"], ["", "lemma wrap_iso_arcs_iso_arcs[simp]:\n    assumes \"x \\<in> arcs G\"\n    shows \"wrap_iso_arcs hom f (iso_arcs hom x) = iso_arcs hom (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x) = iso_arcs hom (f x)", "using assms hom"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x) = iso_arcs hom (f x)", "by (auto simp: wrap_iso_arcs_def perm_restrict_def)"], ["", "lemma inj_on_wrap_iso_arcs:\n    assumes dom: \"\\<And>f. f \\<in> F \\<Longrightarrow> has_dom f (arcs G)\"\n    assumes funcset: \"F \\<subseteq> arcs G \\<rightarrow> arcs G\"\n    shows \"inj_on (wrap_iso_arcs hom) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (wrap_iso_arcs hom) F", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix f g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume F: \"f \\<in> F\" \"g \\<in> F\" and eq: \"wrap_iso_arcs hom f = wrap_iso_arcs hom g\""], ["proof (state)\nthis:\n  f \\<in> F\n  g \\<in> F\n  wrap_iso_arcs hom f = wrap_iso_arcs hom g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  f \\<in> F\n  g \\<in> F\n  wrap_iso_arcs hom f = wrap_iso_arcs hom g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<notin> arcs G\""], ["proof (state)\nthis:\n  x \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  x \\<notin> arcs G", "have \"f x = x\" \"g x = x\""], ["proof (prove)\nusing this:\n  x \\<notin> arcs G\n\ngoal (1 subgoal):\n 1. f x = x &&& g x = x", "using F dom"], ["proof (prove)\nusing this:\n  x \\<notin> arcs G\n  f \\<in> F\n  g \\<in> F\n  ?f1 \\<in> F \\<Longrightarrow> has_dom ?f1 (arcs G)\n\ngoal (1 subgoal):\n 1. f x = x &&& g x = x", "by (auto simp: has_dom_def)"], ["proof (state)\nthis:\n  f x = x\n  g x = x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  f x = x\n  g x = x", "have \"f x = g x\""], ["proof (prove)\nusing this:\n  f x = x\n  g x = x\n\ngoal (1 subgoal):\n 1. f x = g x", "by simp"], ["proof (state)\nthis:\n  f x = g x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "}"], ["proof (state)\nthis:\n  ?x3 \\<notin> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  ?x3 \\<notin> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "{"], ["proof (state)\nthis:\n  ?x3 \\<notin> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"x \\<in> arcs G\""], ["proof (state)\nthis:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  x \\<in> arcs G", "have \"f x \\<in> arcs G\" \"g x \\<in> arcs G\""], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. f x \\<in> arcs G &&& g x \\<in> arcs G", "using F funcset"], ["proof (prove)\nusing this:\n  x \\<in> arcs G\n  f \\<in> F\n  g \\<in> F\n  F \\<subseteq> arcs G \\<rightarrow> arcs G\n\ngoal (1 subgoal):\n 1. f x \\<in> arcs G &&& g x \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  f x \\<in> arcs G\n  g x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with digraph_isomorphism_inj_on_arcs[OF hom] _"], ["proof (chain)\npicking this:\n  inj_on (iso_arcs hom) (arcs G)\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  f x \\<in> arcs G\n  g x \\<in> arcs G", "have \"iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x\""], ["proof (prove)\nusing this:\n  inj_on (iso_arcs hom) (arcs G)\n  PROP ?psi \\<Longrightarrow> PROP ?psi\n  f x \\<in> arcs G\n  g x \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x", "by (rule inj_onD)"], ["proof (state)\nthis:\n  iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x", "have \"f x = g x\""], ["proof (prove)\nusing this:\n  iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x\n\ngoal (1 subgoal):\n 1. f x = g x", "using assms hom  \\<open>x \\<in> arcs G\\<close> eq"], ["proof (prove)\nusing this:\n  iso_arcs hom (f x) = iso_arcs hom (g x) \\<Longrightarrow> f x = g x\n  ?f1 \\<in> F \\<Longrightarrow> has_dom ?f1 (arcs G)\n  F \\<subseteq> arcs G \\<rightarrow> arcs G\n  digraph_isomorphism hom\n  x \\<in> arcs G\n  wrap_iso_arcs hom f = wrap_iso_arcs hom g\n\ngoal (1 subgoal):\n 1. f x = g x", "by (auto simp: wrap_iso_arcs_def fun_eq_iff perm_restrict_def split: if_splits)"], ["proof (state)\nthis:\n  f x = g x\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "}"], ["proof (state)\nthis:\n  ?x3 \\<in> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> F; y \\<in> F;\n        wrap_iso_arcs hom x = wrap_iso_arcs hom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  ?x3 \\<notin> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n  ?x3 \\<in> arcs G \\<Longrightarrow> f ?x3 = g ?x3", "show \"f = g\""], ["proof (prove)\nusing this:\n  ?x3 \\<notin> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n  ?x3 \\<in> arcs G \\<Longrightarrow> f ?x3 = g ?x3\n\ngoal (1 subgoal):\n 1. f = g", "by auto"], ["proof (state)\nthis:\n  f = g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inj_on_wrap_iso_arcs_f:\n    assumes \"A \\<subseteq> arcs G\" \"f \\<in> A \\<rightarrow> A\" \"B = iso_arcs hom ` A\"\n    assumes \"inj_on f A\" shows \"inj_on (wrap_iso_arcs hom f) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (wrap_iso_arcs hom f) B", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume in_hom_A: \"x \\<in> B\" \"y \\<in> B\"\n      and wia_eq: \"wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\""], ["proof (state)\nthis:\n  x \\<in> B\n  y \\<in> B\n  wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from in_hom_A \\<open>B = _\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> B\n  y \\<in> B\n  B = iso_arcs hom ` A", "obtain x0 where x0: \"x = iso_arcs hom x0\" \"x0 \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> B\n  y \\<in> B\n  B = iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x = iso_arcs hom x0; x0 \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x = iso_arcs hom x0\n  x0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from in_hom_A \\<open>B = _\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> B\n  y \\<in> B\n  B = iso_arcs hom ` A", "obtain y0 where y0: \"y = iso_arcs hom y0\" \"y0 \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> B\n  y \\<in> B\n  B = iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. (\\<And>y0.\n        \\<lbrakk>y = iso_arcs hom y0; y0 \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y = iso_arcs hom y0\n  y0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have arcs_0: \"x0 \\<in> arcs G\" \"y0 \\<in> arcs G\" \"f x0 \\<in> arcs G\" \"f y0 \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x0 \\<in> arcs G &&& y0 \\<in> arcs G) &&&\n    f x0 \\<in> arcs G &&& f y0 \\<in> arcs G", "using x0 y0 \\<open>A \\<subseteq> _\\<close> \\<open>f \\<in> _\\<close>"], ["proof (prove)\nusing this:\n  x = iso_arcs hom x0\n  x0 \\<in> A\n  y = iso_arcs hom y0\n  y0 \\<in> A\n  A \\<subseteq> arcs G\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. (x0 \\<in> arcs G &&& y0 \\<in> arcs G) &&&\n    f x0 \\<in> arcs G &&& f y0 \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  x0 \\<in> arcs G\n  y0 \\<in> arcs G\n  f x0 \\<in> arcs G\n  f y0 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "have \"(iso_arcs hom o f o iso_arcs (inv_iso hom)) x = (iso_arcs hom o f o iso_arcs (inv_iso hom)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n    (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y", "using in_hom_A wia_eq assms(1) \\<open>B = _\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> B\n  y \\<in> B\n  wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\n  A \\<subseteq> arcs G\n  B = iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n    (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y", "by (auto simp: wrap_iso_arcs_def perm_restrict_def split: if_splits)"], ["proof (state)\nthis:\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> B; y \\<in> B;\n        wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\\<rbrakk>\n       \\<Longrightarrow> x = y", "then"], ["proof (chain)\npicking this:\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y", "show \"x = y\""], ["proof (prove)\nusing this:\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y\n\ngoal (1 subgoal):\n 1. x = y", "using hom assms digraph_isomorphism_inj_on_arcs[OF hom] x0 y0 arcs_0 \\<open>inj_on f A\\<close> \\<open>A \\<subseteq> _\\<close>"], ["proof (prove)\nusing this:\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) x =\n  (iso_arcs hom \\<circ> f \\<circ> iso_arcs (inv_iso hom)) y\n  digraph_isomorphism hom\n  A \\<subseteq> arcs G\n  f \\<in> A \\<rightarrow> A\n  B = iso_arcs hom ` A\n  inj_on f A\n  inj_on (iso_arcs hom) (arcs G)\n  x = iso_arcs hom x0\n  x0 \\<in> A\n  y = iso_arcs hom y0\n  y0 \\<in> A\n  x0 \\<in> arcs G\n  y0 \\<in> arcs G\n  f x0 \\<in> arcs G\n  f y0 \\<in> arcs G\n  inj_on f A\n  A \\<subseteq> arcs G\n\ngoal (1 subgoal):\n 1. x = y", "by (auto dest!:  inj_onD)"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wrap_iso_arcs_in_funcsetI:\n    assumes \"A \\<subseteq> arcs G\" \"f \\<in> A \\<rightarrow> A\"\n    shows \"wrap_iso_arcs hom f \\<in> iso_arcs hom ` A  \\<rightarrow> iso_arcs hom ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f\n    \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> iso_arcs hom ` A \\<Longrightarrow>\n       wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> iso_arcs hom ` A \\<Longrightarrow>\n       wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "assume \"x \\<in> iso_arcs hom ` A\""], ["proof (state)\nthis:\n  x \\<in> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> iso_arcs hom ` A \\<Longrightarrow>\n       wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "then"], ["proof (chain)\npicking this:\n  x \\<in> iso_arcs hom ` A", "obtain x0 where \"x = iso_arcs hom x0\" \"x0 \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x = iso_arcs hom x0; x0 \\<in> A\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = iso_arcs hom x0\n  x0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> iso_arcs hom ` A \\<Longrightarrow>\n       wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "then"], ["proof (chain)\npicking this:\n  x = iso_arcs hom x0\n  x0 \\<in> A", "have \"f x0 \\<in> A\""], ["proof (prove)\nusing this:\n  x = iso_arcs hom x0\n  x0 \\<in> A\n\ngoal (1 subgoal):\n 1. f x0 \\<in> A", "using \\<open>f \\<in> _\\<close>"], ["proof (prove)\nusing this:\n  x = iso_arcs hom x0\n  x0 \\<in> A\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. f x0 \\<in> A", "by auto"], ["proof (state)\nthis:\n  f x0 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> iso_arcs hom ` A \\<Longrightarrow>\n       wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "then"], ["proof (chain)\npicking this:\n  f x0 \\<in> A", "show \"wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A\""], ["proof (prove)\nusing this:\n  f x0 \\<in> A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A", "unfolding \\<open>x = _\\<close>"], ["proof (prove)\nusing this:\n  f x0 \\<in> A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x0) \\<in> iso_arcs hom ` A", "using \\<open>x0 \\<in> A\\<close> assms hom"], ["proof (prove)\nusing this:\n  f x0 \\<in> A\n  x0 \\<in> A\n  A \\<subseteq> arcs G\n  f \\<in> A \\<rightarrow> A\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x0) \\<in> iso_arcs hom ` A", "by (auto simp: wrap_iso_arcs_def perm_restrict_def)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f x \\<in> iso_arcs hom ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wrap_iso_arcs_permutes:\n    assumes \"A \\<subseteq> arcs G\" \"f permutes A\"\n    shows \"wrap_iso_arcs hom f permutes (iso_arcs hom ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "assume A: \"x \\<notin> iso_arcs hom ` A\""], ["proof (state)\nthis:\n  x \\<notin> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "have \"wrap_iso_arcs hom f x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f x = x", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x\n 2. \\<not> ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x", "assume \"x \\<in> iso_arcs hom ` arcs G\""], ["proof (state)\nthis:\n  x \\<in> iso_arcs hom ` arcs G\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x\n 2. \\<not> ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x", "then"], ["proof (chain)\npicking this:\n  x \\<in> iso_arcs hom ` arcs G", "have \"iso_arcs (inv_iso hom) x \\<notin> A\" \"x \\<in> arcs (app_iso hom G)\""], ["proof (prove)\nusing this:\n  x \\<in> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) x \\<notin> A &&& x \\<in> arcs (app_iso hom G)", "using A hom"], ["proof (prove)\nusing this:\n  x \\<in> iso_arcs hom ` arcs G\n  x \\<notin> iso_arcs hom ` A\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. iso_arcs (inv_iso hom) x \\<notin> A &&& x \\<in> arcs (app_iso hom G)", "by (metis arcs_app_iso image_eqI pre_digraph.iso_arcs_iso_inv, simp)"], ["proof (state)\nthis:\n  iso_arcs (inv_iso hom) x \\<notin> A\n  x \\<in> arcs (app_iso hom G)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x\n 2. \\<not> ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x", "then"], ["proof (chain)\npicking this:\n  iso_arcs (inv_iso hom) x \\<notin> A\n  x \\<in> arcs (app_iso hom G)", "have \"f (iso_arcs (inv_iso hom) x) = (iso_arcs (inv_iso hom) x)\""], ["proof (prove)\nusing this:\n  iso_arcs (inv_iso hom) x \\<notin> A\n  x \\<in> arcs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x", "using \\<open>f permutes A\\<close>"], ["proof (prove)\nusing this:\n  iso_arcs (inv_iso hom) x \\<notin> A\n  x \\<in> arcs (app_iso hom G)\n  f permutes A\n\ngoal (1 subgoal):\n 1. f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x", "by (simp add: permutes_not_in)"], ["proof (state)\nthis:\n  f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x\n 2. \\<not> ?P \\<Longrightarrow> wrap_iso_arcs hom f x = x", "then"], ["proof (chain)\npicking this:\n  f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x", "show ?thesis"], ["proof (prove)\nusing this:\n  f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f x = x", "using hom assms \\<open>x \\<in> arcs _\\<close>"], ["proof (prove)\nusing this:\n  f (iso_arcs (inv_iso hom) x) = iso_arcs (inv_iso hom) x\n  digraph_isomorphism hom\n  A \\<subseteq> arcs G\n  f permutes A\n  x \\<in> arcs (app_iso hom G)\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f x = x", "by (simp add: wrap_iso_arcs_def perm_restrict_def)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f x = x\n\ngoal (1 subgoal):\n 1. x \\<notin> iso_arcs hom ` arcs G \\<Longrightarrow>\n    wrap_iso_arcs hom f x = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> iso_arcs hom ` arcs G \\<Longrightarrow>\n    wrap_iso_arcs hom f x = x", "assume \"x \\<notin> iso_arcs hom ` arcs G\""], ["proof (state)\nthis:\n  x \\<notin> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. x \\<notin> iso_arcs hom ` arcs G \\<Longrightarrow>\n    wrap_iso_arcs hom f x = x", "then"], ["proof (chain)\npicking this:\n  x \\<notin> iso_arcs hom ` arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> iso_arcs hom ` arcs G\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f x = x", "by (simp add: wrap_iso_arcs_def perm_restrict_def)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f x = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f x = x\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "}"], ["proof (state)\nthis:\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "note not_in_id = this"], ["proof (state)\nthis:\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "have \"f \\<in> A \\<rightarrow> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> A", "using assms"], ["proof (prove)\nusing this:\n  A \\<subseteq> arcs G\n  f permutes A\n\ngoal (1 subgoal):\n 1. f \\<in> A \\<rightarrow> A", "by (intro funcsetI_permutes)"], ["proof (state)\nthis:\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "have inj_on_wrap: \"inj_on (wrap_iso_arcs hom f) (iso_arcs hom ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (wrap_iso_arcs hom f) (iso_arcs hom ` A)", "using assms \\<open>f \\<in> A \\<rightarrow> A\\<close>"], ["proof (prove)\nusing this:\n  A \\<subseteq> arcs G\n  f permutes A\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. inj_on (wrap_iso_arcs hom f) (iso_arcs hom ` A)", "by (intro inj_on_wrap_iso_arcs_f) (auto intro: subset_inj_on permutes_inj)"], ["proof (state)\nthis:\n  inj_on (wrap_iso_arcs hom f) (iso_arcs hom ` A)\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "have woa_in_fs: \"wrap_iso_arcs hom f \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f\n    \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A", "using assms \\<open>f \\<in> A \\<rightarrow> A\\<close>"], ["proof (prove)\nusing this:\n  A \\<subseteq> arcs G\n  f permutes A\n  f \\<in> A \\<rightarrow> A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f\n    \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A", "by (intro wrap_iso_arcs_in_funcsetI)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "{"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "assume \"wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\""], ["proof (state)\nthis:\n  wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "then"], ["proof (chain)\npicking this:\n  wrap_iso_arcs hom f x = wrap_iso_arcs hom f y", "have \"x = y\""], ["proof (prove)\nusing this:\n  wrap_iso_arcs hom f x = wrap_iso_arcs hom f y\n\ngoal (1 subgoal):\n 1. x = y", "apply (cases \"x \\<in> iso_arcs hom ` A\"; cases \"y \\<in> iso_arcs hom ` A\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<in> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<in> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<in> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<notin> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<notin> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<in> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 4. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<notin> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<notin> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y", "using woa_in_fs inj_on_wrap"], ["proof (prove)\nusing this:\n  wrap_iso_arcs hom f \\<in> iso_arcs hom ` A \\<rightarrow> iso_arcs hom ` A\n  inj_on (wrap_iso_arcs hom f) (iso_arcs hom ` A)\n\ngoal (4 subgoals):\n 1. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<in> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<in> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 2. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<in> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<notin> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 3. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<notin> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<in> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y\n 4. \\<lbrakk>wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     x \\<notin> iso_arcs hom ` A;\n     wrap_iso_arcs hom f x = wrap_iso_arcs hom f y;\n     y \\<notin> iso_arcs hom ` A\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (auto dest: inj_onD simp: not_in_id)"], ["proof (state)\nthis:\n  x = y\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "}"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f ?x3 = wrap_iso_arcs hom f ?y3 \\<Longrightarrow>\n  ?x3 = ?y3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "note uniqueD = this"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f ?x3 = wrap_iso_arcs hom f ?y3 \\<Longrightarrow>\n  ?x3 = ?y3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "note \\<open>f permutes A\\<close>"], ["proof (state)\nthis:\n  f permutes A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "moreover"], ["proof (state)\nthis:\n  f permutes A\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "note not_in_id"], ["proof (state)\nthis:\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "moreover"], ["proof (state)\nthis:\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "{"], ["proof (state)\nthis:\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "have \"\\<exists>x. wrap_iso_arcs hom f x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. wrap_iso_arcs hom f x = y", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "assume \"y \\<in> iso_arcs hom ` A\""], ["proof (state)\nthis:\n  y \\<in> iso_arcs hom ` A\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "then"], ["proof (chain)\npicking this:\n  y \\<in> iso_arcs hom ` A", "obtain y0 where \"y0 \\<in> A\" \"iso_arcs hom y0 = y\""], ["proof (prove)\nusing this:\n  y \\<in> iso_arcs hom ` A\n\ngoal (1 subgoal):\n 1. (\\<And>y0.\n        \\<lbrakk>y0 \\<in> A; iso_arcs hom y0 = y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y0 \\<in> A\n  iso_arcs hom y0 = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "with \\<open>f permutes A\\<close>"], ["proof (chain)\npicking this:\n  f permutes A\n  y0 \\<in> A\n  iso_arcs hom y0 = y", "obtain x0 where \"x0 \\<in> A\" \"f x0 = y0\""], ["proof (prove)\nusing this:\n  f permutes A\n  y0 \\<in> A\n  iso_arcs hom y0 = y\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x0 \\<in> A; f x0 = y0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding permutes_def"], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> A \\<longrightarrow> f x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. f x = y)\n  y0 \\<in> A\n  iso_arcs hom y0 = y\n\ngoal (1 subgoal):\n 1. (\\<And>x0.\n        \\<lbrakk>x0 \\<in> A; f x0 = y0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  x0 \\<in> A\n  f x0 = y0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "moreover"], ["proof (state)\nthis:\n  x0 \\<in> A\n  f x0 = y0\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "then"], ["proof (chain)\npicking this:\n  x0 \\<in> A\n  f x0 = y0", "have \"\\<And>x. x \\<in> arcs G \\<Longrightarrow> iso_arcs hom x0 = iso_arcs hom x \\<Longrightarrow> x0 = x\""], ["proof (prove)\nusing this:\n  x0 \\<in> A\n  f x0 = y0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom x\\<rbrakk>\n       \\<Longrightarrow> x0 = x", "using assms hom"], ["proof (prove)\nusing this:\n  x0 \\<in> A\n  f x0 = y0\n  A \\<subseteq> arcs G\n  f permutes A\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom x\\<rbrakk>\n       \\<Longrightarrow> x0 = x", "by (auto simp: digraph_isomorphism_def dest: inj_onD)"], ["proof (state)\nthis:\n  \\<lbrakk>?x1 \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom ?x1\\<rbrakk>\n  \\<Longrightarrow> x0 = ?x1\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "ultimately"], ["proof (chain)\npicking this:\n  x0 \\<in> A\n  f x0 = y0\n  \\<lbrakk>?x1 \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom ?x1\\<rbrakk>\n  \\<Longrightarrow> x0 = ?x1", "have \"wrap_iso_arcs hom f (iso_arcs hom x0) = y\""], ["proof (prove)\nusing this:\n  x0 \\<in> A\n  f x0 = y0\n  \\<lbrakk>?x1 \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom ?x1\\<rbrakk>\n  \\<Longrightarrow> x0 = ?x1\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x0) = y", "using \\<open>_ = y\\<close> assms hom"], ["proof (prove)\nusing this:\n  x0 \\<in> A\n  f x0 = y0\n  \\<lbrakk>?x1 \\<in> arcs G; iso_arcs hom x0 = iso_arcs hom ?x1\\<rbrakk>\n  \\<Longrightarrow> x0 = ?x1\n  iso_arcs hom y0 = y\n  A \\<subseteq> arcs G\n  f permutes A\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f (iso_arcs hom x0) = y", "by (auto simp: wrap_iso_arcs_def perm_restrict_def)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f (iso_arcs hom x0) = y\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y\n 2. \\<not> ?P \\<Longrightarrow> \\<exists>x. wrap_iso_arcs hom f x = y", "then"], ["proof (chain)\npicking this:\n  wrap_iso_arcs hom f (iso_arcs hom x0) = y", "show ?thesis"], ["proof (prove)\nusing this:\n  wrap_iso_arcs hom f (iso_arcs hom x0) = y\n\ngoal (1 subgoal):\n 1. \\<exists>x. wrap_iso_arcs hom f x = y", ".."], ["proof (state)\nthis:\n  \\<exists>x. wrap_iso_arcs hom f x = y\n\ngoal (1 subgoal):\n 1. y \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n    \\<exists>x. wrap_iso_arcs hom f x = y", "qed (metis not_in_id)"], ["proof (state)\nthis:\n  \\<exists>x. wrap_iso_arcs hom f x = y\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "}"], ["proof (state)\nthis:\n  \\<exists>x. wrap_iso_arcs hom f x = ?y3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "ultimately"], ["proof (chain)\npicking this:\n  f permutes A\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n  \\<exists>x. wrap_iso_arcs hom f x = ?y3", "show ?thesis"], ["proof (prove)\nusing this:\n  f permutes A\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n  \\<exists>x. wrap_iso_arcs hom f x = ?y3\n\ngoal (1 subgoal):\n 1. wrap_iso_arcs hom f permutes iso_arcs hom ` A", "unfolding permutes_def"], ["proof (prove)\nusing this:\n  (\\<forall>x. x \\<notin> A \\<longrightarrow> f x = x) \\<and>\n  (\\<forall>y. \\<exists>!x. f x = y)\n  ?x3 \\<notin> iso_arcs hom ` A \\<Longrightarrow>\n  wrap_iso_arcs hom f ?x3 = ?x3\n  \\<exists>x. wrap_iso_arcs hom f x = ?y3\n\ngoal (1 subgoal):\n 1. (\\<forall>x.\n        x \\<notin> iso_arcs hom ` A \\<longrightarrow>\n        wrap_iso_arcs hom f x = x) \\<and>\n    (\\<forall>y. \\<exists>!x. wrap_iso_arcs hom f x = y)", "by (auto simp: dest: uniqueD)"], ["proof (state)\nthis:\n  wrap_iso_arcs hom f permutes iso_arcs hom ` A\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma (in digraph_map) digraph_map_isoI:\n  assumes \"digraph_isomorphism hom\" shows \"digraph_map (app_iso hom G) (map_iso hom)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (map_iso hom)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (map_iso hom)", "interpret iG: fin_digraph \"app_iso hom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. fin_digraph (app_iso hom G)", "by (rule fin_digraphI_app_iso)"], ["proof (state)\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (map_iso hom)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. digraph_map (app_iso hom G) (map_iso hom)", "proof (rule iG.digraph_mapI_permutes)"], ["proof (state)\ngoal (6 subgoals):\n 1. edge_rev (map_iso hom) permutes arcs (app_iso hom G)\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 4. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 5. edge_succ (map_iso hom) permutes arcs (app_iso hom G)\n 6. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"edge_rev (map_iso hom) permutes arcs (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) permutes arcs (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) permutes arcs (app_iso hom G)", "unfolding map_iso_def"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_rev\n     \\<lparr>edge_rev = wrap_iso_arcs hom (edge_rev M),\n        edge_succ = wrap_iso_arcs hom (edge_succ M)\\<rparr> permutes\n    arcs (app_iso hom G)", "by (simp add: wrap_iso_arcs_permutes arev_permutes_arcs)"], ["proof (state)\nthis:\n  edge_rev (map_iso hom) permutes arcs (app_iso hom G)\n\ngoal (5 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. edge_succ (map_iso hom) permutes arcs (app_iso hom G)\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. edge_succ (map_iso hom) permutes arcs (app_iso hom G)\n 5. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"edge_succ (map_iso hom) permutes arcs (app_iso hom G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_succ (map_iso hom) permutes arcs (app_iso hom G)", "using assms"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_succ (map_iso hom) permutes arcs (app_iso hom G)", "unfolding map_iso_def"], ["proof (prove)\nusing this:\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_succ\n     \\<lparr>edge_rev = wrap_iso_arcs hom (edge_rev M),\n        edge_succ = wrap_iso_arcs hom (edge_succ M)\\<rparr> permutes\n    arcs (app_iso hom G)", "by (simp add: wrap_iso_arcs_permutes edge_succ_permutes)"], ["proof (state)\nthis:\n  edge_succ (map_iso hom) permutes arcs (app_iso hom G)\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "fix a"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "assume A: \"a \\<in> arcs (app_iso hom G)\""], ["proof (state)\nthis:\n  a \\<in> arcs (app_iso hom G)\n\ngoal (4 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       tail (app_iso hom G) (edge_rev (map_iso hom) a) =\n       head (app_iso hom G) a\n 4. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"tail (app_iso hom G) (edge_rev (map_iso hom) a) = head (app_iso hom G) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tail (app_iso hom G) (edge_rev (map_iso hom) a) = head (app_iso hom G) a", "using A assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. tail (app_iso hom G) (edge_rev (map_iso hom) a) = head (app_iso hom G) a", "by (cases rule: in_arcs_app_iso_cases) (auto simp: map_iso_def iso_verts_tail iso_verts_head)"], ["proof (state)\nthis:\n  tail (app_iso hom G) (edge_rev (map_iso hom) a) = head (app_iso hom G) a\n\ngoal (3 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n 3. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a", "using A assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a", "by (cases rule: in_arcs_app_iso_cases) (auto simp: map_iso_def)"], ["proof (state)\nthis:\n  edge_rev (map_iso hom) (edge_rev (map_iso hom) a) = a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       a \\<in> arcs (app_iso hom G) \\<Longrightarrow>\n       edge_rev (map_iso hom) a \\<noteq> a\n 2. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"edge_rev (map_iso hom) a \\<noteq> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) a \\<noteq> a", "using A assms"], ["proof (prove)\nusing this:\n  a \\<in> arcs (app_iso hom G)\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. edge_rev (map_iso hom) a \\<noteq> a", "by (auto simp: map_iso_def arev_neq)"], ["proof (state)\nthis:\n  edge_rev (map_iso hom) a \\<noteq> a\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "fix v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "assume \"v \\<in> verts (app_iso hom G)\" and oa_hom: \"out_arcs (app_iso hom G) v \\<noteq> {}\""], ["proof (state)\nthis:\n  v \\<in> verts (app_iso hom G)\n  out_arcs (app_iso hom G) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "then"], ["proof (chain)\npicking this:\n  v \\<in> verts (app_iso hom G)\n  out_arcs (app_iso hom G) v \\<noteq> {}", "obtain v0 where \"v0 \\<in> verts G\" \"v = iso_verts hom v0\""], ["proof (prove)\nusing this:\n  v \\<in> verts (app_iso hom G)\n  out_arcs (app_iso hom G) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v0.\n        \\<lbrakk>v0 \\<in> verts G; v = iso_verts hom v0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "moreover"], ["proof (state)\nthis:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "then"], ["proof (chain)\npicking this:\n  v0 \\<in> verts G\n  v = iso_verts hom v0", "have oa: \"out_arcs G v0 \\<noteq> {}\""], ["proof (prove)\nusing this:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n\ngoal (1 subgoal):\n 1. out_arcs G v0 \\<noteq> {}", "using assms oa_hom"], ["proof (prove)\nusing this:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n  digraph_isomorphism hom\n  out_arcs (app_iso hom G) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. out_arcs G v0 \\<noteq> {}", "by (auto simp: out_arcs_def iso_verts_tail)"], ["proof (state)\nthis:\n  out_arcs G v0 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "ultimately"], ["proof (chain)\npicking this:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n  out_arcs G v0 \\<noteq> {}", "have cyclic_on_v0: \"cyclic_on (edge_succ M) (out_arcs G v0)\""], ["proof (prove)\nusing this:\n  v0 \\<in> verts G\n  v = iso_verts hom v0\n  out_arcs G v0 \\<noteq> {}\n\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ M) (out_arcs G v0)", "by (intro edge_succ_cyclic)"], ["proof (state)\nthis:\n  cyclic_on (edge_succ M) (out_arcs G v0)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "from oa_hom"], ["proof (chain)\npicking this:\n  out_arcs (app_iso hom G) v \\<noteq> {}", "obtain a where \"a \\<in> out_arcs (app_iso hom G) v\""], ["proof (prove)\nusing this:\n  out_arcs (app_iso hom G) v \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a \\<in> out_arcs (app_iso hom G) v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<in> out_arcs (app_iso hom G) v\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "then"], ["proof (chain)\npicking this:\n  a \\<in> out_arcs (app_iso hom G) v", "obtain a0 where \"a0 \\<in> arcs G\" \"a = iso_arcs hom a0\""], ["proof (prove)\nusing this:\n  a \\<in> out_arcs (app_iso hom G) v\n\ngoal (1 subgoal):\n 1. (\\<And>a0.\n        \\<lbrakk>a0 \\<in> arcs G; a = iso_arcs hom a0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "then"], ["proof (chain)\npicking this:\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0", "have \"a0 \\<in> out_arcs G v0\""], ["proof (prove)\nusing this:\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n\ngoal (1 subgoal):\n 1. a0 \\<in> out_arcs G v0", "using \\<open>v = _\\<close> \\<open>v0 \\<in> _\\<close> \\<open>a \\<in> _\\<close> assms"], ["proof (prove)\nusing this:\n  a0 \\<in> arcs G\n  a = iso_arcs hom a0\n  v = iso_verts hom v0\n  v0 \\<in> verts G\n  a \\<in> out_arcs (app_iso hom G) v\n  digraph_isomorphism hom\n\ngoal (1 subgoal):\n 1. a0 \\<in> out_arcs G v0", "by (simp add: iso_verts_tail)"], ["proof (state)\nthis:\n  a0 \\<in> out_arcs G v0\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>v \\<in> verts (app_iso hom G);\n        out_arcs (app_iso hom G) v \\<noteq> {}\\<rbrakk>\n       \\<Longrightarrow> cyclic_on (edge_succ (map_iso hom))\n                          (out_arcs (app_iso hom G) v)", "show \"cyclic_on (edge_succ (map_iso hom)) (out_arcs (app_iso hom G) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cyclic_on (edge_succ (map_iso hom)) (out_arcs (app_iso hom G) v)", "proof (rule cyclic_on_singleI)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?s \\<in> out_arcs (app_iso hom G) v\n 2. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) ?s", "show \"a \\<in> out_arcs (app_iso hom G) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> out_arcs (app_iso hom G) v", "by fact"], ["proof (state)\nthis:\n  a \\<in> out_arcs (app_iso hom G) v\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "have \"out_arcs (app_iso hom G) v = iso_arcs hom ` out_arcs G v0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = iso_arcs hom ` out_arcs G v0", "unfolding \\<open>v = _\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) (iso_verts hom v0) =\n    iso_arcs hom ` out_arcs G v0", "by (rule out_arcs_app_iso_eq) fact+"], ["proof (state)\nthis:\n  out_arcs (app_iso hom G) v = iso_arcs hom ` out_arcs G v0\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "also"], ["proof (state)\nthis:\n  out_arcs (app_iso hom G) v = iso_arcs hom ` out_arcs G v0\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "have \"out_arcs G v0 = orbit (edge_succ M) a0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_arcs G v0 = orbit (edge_succ M) a0", "using cyclic_on_v0 \\<open>a0 \\<in> out_arcs G v0\\<close>"], ["proof (prove)\nusing this:\n  cyclic_on (edge_succ M) (out_arcs G v0)\n  a0 \\<in> out_arcs G v0\n\ngoal (1 subgoal):\n 1. out_arcs G v0 = orbit (edge_succ M) a0", "unfolding cyclic_on_alldef"], ["proof (prove)\nusing this:\n  out_arcs G v0 \\<noteq> {} \\<and>\n  (\\<forall>s\\<in>out_arcs G v0. out_arcs G v0 = orbit (edge_succ M) s)\n  a0 \\<in> out_arcs G v0\n\ngoal (1 subgoal):\n 1. out_arcs G v0 = orbit (edge_succ M) a0", "by simp"], ["proof (state)\nthis:\n  out_arcs G v0 = orbit (edge_succ M) a0\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "also"], ["proof (state)\nthis:\n  out_arcs G v0 = orbit (edge_succ M) a0\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "have \"iso_arcs hom ` \\<dots> = orbit (edge_succ (map_iso hom)) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) a", "have \"\\<And>x. x \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> x \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> x \\<in> arcs G", "using \\<open>out_arcs G v0 = _\\<close>"], ["proof (prove)\nusing this:\n  out_arcs G v0 = orbit (edge_succ M) a0\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> x \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) a", "then"], ["proof (chain)\npicking this:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) a", "using \\<open>out_arcs G v0 = _\\<close>"], ["proof (prove)\nusing this:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G\n  out_arcs G v0 = orbit (edge_succ M) a0\n\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) a", "unfolding \\<open>a = _\\<close> assms"], ["proof (prove)\nusing this:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G\n  out_arcs G v0 = orbit (edge_succ M) a0\n\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) (iso_arcs hom a0)", "using \\<open>a0 \\<in> out_arcs G v0\\<close>"], ["proof (prove)\nusing this:\n  ?x4 \\<in> orbit (edge_succ M) a0 \\<Longrightarrow> ?x4 \\<in> arcs G\n  out_arcs G v0 = orbit (edge_succ M) a0\n  a0 \\<in> out_arcs G v0\n\ngoal (1 subgoal):\n 1. iso_arcs hom ` orbit (edge_succ M) a0 =\n    orbit (edge_succ (map_iso hom)) (iso_arcs hom a0)", "by (intro orbit_FOO) (insert assms, auto simp: map_iso_def)"], ["proof (state)\nthis:\n  iso_arcs hom ` orbit (edge_succ M) a0 = orbit (edge_succ (map_iso hom)) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  iso_arcs hom ` orbit (edge_succ M) a0 = orbit (edge_succ (map_iso hom)) a\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "finally"], ["proof (chain)\npicking this:\n  out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "show \"out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a\""], ["proof (prove)\nusing this:\n  out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a\n\ngoal (1 subgoal):\n 1. out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a", "."], ["proof (state)\nthis:\n  out_arcs (app_iso hom G) v = orbit (edge_succ (map_iso hom)) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  cyclic_on (edge_succ (map_iso hom)) (out_arcs (app_iso hom G) v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  digraph_map (app_iso hom G) (map_iso hom)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}