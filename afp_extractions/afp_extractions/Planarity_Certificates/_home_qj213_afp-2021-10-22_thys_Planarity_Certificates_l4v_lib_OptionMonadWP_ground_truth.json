{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/l4v/lib/OptionMonadWP.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma no_ofail_is_ovalidNF: \"no_ofail P f \\<equiv> ovalidNF P f (\\<lambda>_ _. True)\"", "lemma ovalidNF_combine: \"\\<lbrakk> ovalid P f Q; no_ofail P f \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q\"", "lemmas owhile_add_inv = owhile_inv_def[symmetric]", "lemma obind_wp [wp]:\n  \"\\<lbrakk> \\<And>r. ovalid (R r) (g r) Q; ovalid P f R \\<rbrakk> \\<Longrightarrow> ovalid P (obind f g) Q\"", "lemma oreturn_wp [wp]:\n  \"ovalid (P x) (oreturn x) P\"", "lemma ocondition_wp [wp]:\n  \"\\<lbrakk> ovalid L l Q; ovalid R r Q \\<rbrakk>\n   \\<Longrightarrow> ovalid (\\<lambda>s. if C s then L s else R s) (ocondition C l r) Q\"", "lemma ofail_wp [wp]:\n  \"ovalid (\\<lambda>_. True) ofail Q\"", "lemma ovalid_K_bind_wp [wp]:\n  \"ovalid P f Q \\<Longrightarrow> ovalid P (K_bind f x) Q\"", "lemma ogets_wp [wp]: \"ovalid (\\<lambda>s. P (f s) s) (ogets f) P\"", "lemma oguard_wp [wp]: \"ovalid (\\<lambda>s. f s \\<longrightarrow> P () s) (oguard f) P\"", "lemma oskip_wp [wp]:\n  \"ovalid (\\<lambda>s. P () s) oskip P\"", "lemma ovalid_case_prod [wp]:\n  assumes \"(\\<And>x y. ovalid (P x y) (B x y) Q)\"\n  shows \"ovalid (case v of (x, y) \\<Rightarrow> P x y) (case v of (x, y) \\<Rightarrow> B x y) Q\"", "lemma owhile_ovalid [wp]:\n\"\\<lbrakk>\\<And>a. ovalid (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n   \\<And>a s. \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s\\<rbrakk>\n  \\<Longrightarrow> ovalid (I a) (owhile_inv C B a I M) Q\"", "lemma ovalid_is_triple [wp_trip]:\n  \"ovalid P f Q = triple_judgement P f (ovalid_property Q (\\<lambda>s f. f s))\"", "lemma ovalid_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> ovalid P' f Q; ovalid P f Q'; \\<And>s. P s \\<Longrightarrow> P' s \\<rbrakk> \\<Longrightarrow> ovalid P f (\\<lambda>r s. Q r s \\<and> Q' r s)\"", "lemma ovalid_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> ovalid P f Q; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> ovalid P' f Q\"", "lemma ovalid_wp_comb3 [wp_comb]:\n  \"\\<lbrakk> ovalid P f Q; ovalid P' f Q' \\<rbrakk> \\<Longrightarrow> ovalid (\\<lambda>s. P s \\<and> P' s) f (\\<lambda>r s. Q r s \\<and> Q' r s)\"", "lemma obind_NF_wp [wp]:\n  \"\\<lbrakk> \\<And>r. ovalidNF (R r) (g r) Q; ovalidNF P f R \\<rbrakk> \\<Longrightarrow> ovalidNF P (obind f g) Q\"", "lemma oreturn_NF_wp [wp]:\n  \"ovalidNF (P x) (oreturn x) P\"", "lemma ocondition_NF_wp [wp]:\n  \"\\<lbrakk> ovalidNF L l Q; ovalidNF R r Q \\<rbrakk>\n   \\<Longrightarrow> ovalidNF (\\<lambda>s. if C s then L s else R s) (ocondition C l r) Q\"", "lemma ofail_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>_. False) ofail Q\"", "lemma ovalidNF_K_bind_wp [wp]:\n  \"ovalidNF P f Q \\<Longrightarrow> ovalidNF P (K_bind f x) Q\"", "lemma ogets_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. P (f s) s) (ogets f) P\"", "lemma oguard_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. f s \\<and> P () s) (oguard f) P\"", "lemma oskip_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. P () s) oskip P\"", "lemma ovalid_NF_case_prod [wp]:\n  assumes \"(\\<And>x y. ovalidNF (P x y) (B x y) Q)\"\n  shows \"ovalidNF (case v of (x, y) \\<Rightarrow> P x y) (case v of (x, y) \\<Rightarrow> B x y) Q\"", "lemma owhile_NF [wp]:\n\"\\<lbrakk>\\<And>a. ovalidNF (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n   \\<And>a m. ovalid (\\<lambda>s. I a s \\<and> C a s \\<and> M a s = m) (B a) (\\<lambda>r s. M r s < m);\n   \\<And>a s. \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s\\<rbrakk>\n  \\<Longrightarrow> ovalidNF (I a) (owhile_inv C B a I M) Q\"", "lemma ovalidNF_is_triple [wp_trip]:\n  \"ovalidNF P f Q = triple_judgement P f (ovalidNF_property Q (\\<lambda>s f. f s))\"", "lemma ovalidNF_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P' f Q; ovalidNF P f Q'; \\<And>s. P s \\<Longrightarrow> P' s \\<rbrakk> \\<Longrightarrow> ovalidNF P f (\\<lambda>r s. Q r s \\<and> Q' r s)\"", "lemma ovalidNF_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P f Q; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> ovalidNF P' f Q\"", "lemma ovalidNF_wp_comb3 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P f Q; ovalidNF P' f Q' \\<rbrakk> \\<Longrightarrow> ovalidNF (\\<lambda>s. P s \\<and> P' s) f (\\<lambda>r s. Q r s \\<and> Q' r s)\"", "lemma no_ofail_ofail [wp]: \"no_ofail (\\<lambda>_. False) ofail\"", "lemma no_ofail_ogets [wp]: \"no_ofail (\\<lambda>_. True) (ogets f)\"", "lemma no_ofail_obind [wp]:\n  \"\\<lbrakk> \\<And>r. no_ofail (P r) (g r); no_ofail Q f; ovalid Q f P \\<rbrakk> \\<Longrightarrow> no_ofail Q (obind f g)\"", "lemma no_ofail_K_bind [wp]:\n  \"no_ofail P f \\<Longrightarrow> no_ofail P (K_bind f x)\"", "lemma no_ofail_oguard [wp]:\n  \"no_ofail (\\<lambda>s. f s) (oguard f)\"", "lemma no_ofail_ocondition [wp]:\n  \"\\<lbrakk> no_ofail L l; no_ofail R r \\<rbrakk>\n     \\<Longrightarrow> no_ofail (\\<lambda>s. if C s then L s else R s) (ocondition C l r)\"", "lemma no_ofail_oreturn [wp]:\n  \"no_ofail (\\<lambda>_. True) (oreturn x)\"", "lemma no_ofail_oskip [wp]:\n  \"no_ofail (\\<lambda>_. True) oskip\"", "lemma no_ofail_is_triple [wp_trip]:\n  \"no_ofail P f = triple_judgement P f (\\<lambda>s f. f s \\<noteq> None)\"", "lemma no_ofail_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> no_ofail P f; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> no_ofail P' f\"", "lemma no_ofail_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> no_ofail P f; no_ofail P' f \\<rbrakk> \\<Longrightarrow> no_ofail (\\<lambda>s. P s \\<and> P' s) f\"", "lemma ovalid_grab_asm:\n  \"(G \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow> ovalid (\\<lambda>s. G \\<and> P s) f Q\"", "lemma ovalidNF_grab_asm:\n  \"(G \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow> ovalidNF (\\<lambda>s. G \\<and> P s) f Q\"", "lemma no_ofail_grab_asm:\n  \"(G \\<Longrightarrow> no_ofail P f) \\<Longrightarrow> no_ofail (\\<lambda>s. G \\<and> P s) f\"", "lemma ovalid_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow> ovalid P f Q\"", "lemma ovalidNF_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow> ovalidNF P f Q\"", "lemma no_ofail_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> no_ofail P f) \\<Longrightarrow> no_ofail P f\"", "lemma ovalid_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P' f Q\"", "lemma ovalidNF_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P' f Q\"", "lemma no_ofail_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; no_ofail P f \\<rbrakk> \\<Longrightarrow> no_ofail P' f\"", "lemma ovalid_post_imp:\n  \"\\<lbrakk> \\<And>r s. Q r s \\<Longrightarrow> Q' r s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P f Q'\"", "lemma ovalidNF_post_imp:\n  \"\\<lbrakk> \\<And>r s. Q r s \\<Longrightarrow> Q' r s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q'\"", "lemma ovalid_post_imp_assuming_pre:\n  \"\\<lbrakk> \\<And>r s. \\<lbrakk> P s; Q r s \\<rbrakk> \\<Longrightarrow> Q' r s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P f Q'\"", "lemma ovalidNF_post_imp_assuming_pre:\n  \"\\<lbrakk> \\<And>r s. \\<lbrakk> P s; Q r s \\<rbrakk> \\<Longrightarrow> Q' r s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q'\""], "translations": [["", "lemma no_ofail_is_ovalidNF: \"no_ofail P f \\<equiv> ovalidNF P f (\\<lambda>_ _. True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail P f \\<equiv> ovalidNF P f (\\<lambda>_ _. True)", "by (simp add: no_ofail_def ovalidNF_def)"], ["", "lemma ovalidNF_combine: \"\\<lbrakk> ovalid P f Q; no_ofail P f \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalid P f Q; no_ofail P f\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P f Q", "by (auto simp: ovalidNF_def ovalid_def no_ofail_def)"], ["", "(* Annotating programs with loop invariant and measure. *)"], ["", "definition owhile_inv ::\n  \"('a \\<Rightarrow> 's \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> 'a option) \\<Rightarrow> 'a\n   \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> 's \\<Rightarrow> nat) \\<Rightarrow> 's \\<Rightarrow> 'a option\"\n  where \"owhile_inv C B x I M = owhile C B x\""], ["", "lemmas owhile_add_inv = owhile_inv_def[symmetric]"], ["", "(* WP rules for ovalid. *)"], ["", "lemma obind_wp [wp]:\n  \"\\<lbrakk> \\<And>r. ovalid (R r) (g r) Q; ovalid P f R \\<rbrakk> \\<Longrightarrow> ovalid P (obind f g) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r. ovalid (R r) (g r) Q; ovalid P f R\\<rbrakk>\n    \\<Longrightarrow> ovalid P (f |>> g) Q", "by (simp add: ovalid_def obind_def split: option.splits, fast)"], ["", "lemma oreturn_wp [wp]:\n  \"ovalid (P x) (oreturn x) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (P x) (oreturn x) P", "by (simp add: ovalid_def oreturn_def K_def)"], ["", "lemma ocondition_wp [wp]:\n  \"\\<lbrakk> ovalid L l Q; ovalid R r Q \\<rbrakk>\n   \\<Longrightarrow> ovalid (\\<lambda>s. if C s then L s else R s) (ocondition C l r) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalid L l Q; ovalid R r Q\\<rbrakk>\n    \\<Longrightarrow> ovalid (\\<lambda>s. if C s then L s else R s)\n                       (ocondition C l r) Q", "by (auto simp: ovalid_def ocondition_def)"], ["", "lemma ofail_wp [wp]:\n  \"ovalid (\\<lambda>_. True) ofail Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (\\<lambda>_. True) ofail Q", "by (simp add: ovalid_def ofail_def)"], ["", "lemma ovalid_K_bind_wp [wp]:\n  \"ovalid P f Q \\<Longrightarrow> ovalid P (K_bind f x) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid P f Q \\<Longrightarrow> ovalid P (K_bind f x) Q", "by simp"], ["", "lemma ogets_wp [wp]: \"ovalid (\\<lambda>s. P (f s) s) (ogets f) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (\\<lambda>s. P (f s) s) (ogets f) P", "by (simp add: ovalid_def ogets_def)"], ["", "lemma oguard_wp [wp]: \"ovalid (\\<lambda>s. f s \\<longrightarrow> P () s) (oguard f) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (\\<lambda>s. f s \\<longrightarrow> P () s) (oguard f) P", "by (simp add: ovalid_def oguard_def)"], ["", "lemma oskip_wp [wp]:\n  \"ovalid (\\<lambda>s. P () s) oskip P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (P ()) oskip P", "by (simp add: ovalid_def oskip_def)"], ["", "lemma ovalid_case_prod [wp]:\n  assumes \"(\\<And>x y. ovalid (P x y) (B x y) Q)\"\n  shows \"ovalid (case v of (x, y) \\<Rightarrow> P x y) (case v of (x, y) \\<Rightarrow> B x y) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid (case v of (x, y) \\<Rightarrow> P x y)\n     (case v of (x, y) \\<Rightarrow> B x y) Q", "using assms"], ["proof (prove)\nusing this:\n  ovalid (P ?x ?y) (B ?x ?y) Q\n\ngoal (1 subgoal):\n 1. ovalid (case v of (x, y) \\<Rightarrow> P x y)\n     (case v of (x, y) \\<Rightarrow> B x y) Q", "unfolding ovalid_def"], ["proof (prove)\nusing this:\n  \\<forall>s r. P ?x ?y s \\<and> B ?x ?y s = Some r \\<longrightarrow> Q r s\n\ngoal (1 subgoal):\n 1. \\<forall>s r.\n       (case v of (x, xa) \\<Rightarrow> P x xa) s \\<and>\n       (case v of (x, xa) \\<Rightarrow> B x xa) s = Some r \\<longrightarrow>\n       Q r s", "by auto"], ["", "lemma owhile_ovalid [wp]:\n\"\\<lbrakk>\\<And>a. ovalid (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n   \\<And>a s. \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s\\<rbrakk>\n  \\<Longrightarrow> ovalid (I a) (owhile_inv C B a I M) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a. ovalid (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n     \\<And>a s.\n        \\<lbrakk>I a s; \\<not> C a s\\<rbrakk>\n        \\<Longrightarrow> Q a s\\<rbrakk>\n    \\<Longrightarrow> ovalid (I a) (owhile_inv C B a I M) Q", "unfolding owhile_inv_def owhile_def ovalid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                \\<forall>s r.\n                   (I a s \\<and> C a s) \\<and>\n                   B a s = Some r \\<longrightarrow>\n                   I r s;\n     \\<And>a s.\n        \\<lbrakk>I a s; \\<not> C a s\\<rbrakk>\n        \\<Longrightarrow> Q a s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s r.\n                         I a s \\<and>\n                         option_while (\\<lambda>a. C a s)\n                          (\\<lambda>a. B a s) a =\n                         Some r \\<longrightarrow>\n                         Q r s", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s r.\n                      (I a s \\<and> C a s) \\<and>\n                      B a s = Some r \\<longrightarrow>\n                      I r s;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s;\n        option_while (\\<lambda>a. C a s) (\\<lambda>a. B a s) a =\n        Some r\\<rbrakk>\n       \\<Longrightarrow> Q r s", "apply (frule_tac I = \"\\<lambda>a. I a s\" in option_while_rule)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s r.\n                      (I a s \\<and> C a s) \\<and>\n                      B a s = Some r \\<longrightarrow>\n                      I r s;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s;\n        option_while (\\<lambda>a. C a s) (\\<lambda>a. B a s) a =\n        Some r\\<rbrakk>\n       \\<Longrightarrow> I a s\n 2. \\<And>s r sa s'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s r.\n                      (I a s \\<and> C a s) \\<and>\n                      B a s = Some r \\<longrightarrow>\n                      I r s;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s;\n        option_while (\\<lambda>a. C a s) (\\<lambda>a. B a s) a = Some r;\n        C sa s; I sa s; B sa s = Some s'\\<rbrakk>\n       \\<Longrightarrow> I s' s\n 3. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s r.\n                      (I a s \\<and> C a s) \\<and>\n                      B a s = Some r \\<longrightarrow>\n                      I r s;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s;\n        option_while (\\<lambda>a. C a s) (\\<lambda>a. B a s) a = Some r;\n        I r s \\<and> \\<not> C r s\\<rbrakk>\n       \\<Longrightarrow> Q r s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition ovalid_property where \"ovalid_property P x = (\\<lambda>s f. (\\<forall>r. Some r = x s f \\<longrightarrow> P r s))\""], ["", "lemma ovalid_is_triple [wp_trip]:\n  \"ovalid P f Q = triple_judgement P f (ovalid_property Q (\\<lambda>s f. f s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalid P f Q =\n    triple_judgement P f (ovalid_property Q (\\<lambda>s f. f s))", "by (auto simp: triple_judgement_def ovalid_def ovalid_property_def)"], ["", "lemma ovalid_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> ovalid P' f Q; ovalid P f Q'; \\<And>s. P s \\<Longrightarrow> P' s \\<rbrakk> \\<Longrightarrow> ovalid P f (\\<lambda>r s. Q r s \\<and> Q' r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalid P' f Q; ovalid P f Q';\n     \\<And>s. P s \\<Longrightarrow> P' s\\<rbrakk>\n    \\<Longrightarrow> ovalid P f (\\<lambda>r s. Q r s \\<and> Q' r s)", "by (simp add: ovalid_def)"], ["", "lemma ovalid_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> ovalid P f Q; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> ovalid P' f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalid P f Q; \\<And>s. P' s \\<Longrightarrow> P s\\<rbrakk>\n    \\<Longrightarrow> ovalid P' f Q", "by (auto simp: ovalid_def)"], ["", "lemma ovalid_wp_comb3 [wp_comb]:\n  \"\\<lbrakk> ovalid P f Q; ovalid P' f Q' \\<rbrakk> \\<Longrightarrow> ovalid (\\<lambda>s. P s \\<and> P' s) f (\\<lambda>r s. Q r s \\<and> Q' r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalid P f Q; ovalid P' f Q'\\<rbrakk>\n    \\<Longrightarrow> ovalid (\\<lambda>s. P s \\<and> P' s) f\n                       (\\<lambda>r s. Q r s \\<and> Q' r s)", "by (auto simp: ovalid_def)"], ["", "(* WP rules for ovalidNF. *)"], ["", "lemma obind_NF_wp [wp]:\n  \"\\<lbrakk> \\<And>r. ovalidNF (R r) (g r) Q; ovalidNF P f R \\<rbrakk> \\<Longrightarrow> ovalidNF P (obind f g) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r. ovalidNF (R r) (g r) Q; ovalidNF P f R\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P (f |>> g) Q", "by (auto simp: ovalidNF_def obind_def split: option.splits)"], ["", "lemma oreturn_NF_wp [wp]:\n  \"ovalidNF (P x) (oreturn x) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (P x) (oreturn x) P", "by (simp add: ovalidNF_def oreturn_def)"], ["", "lemma ocondition_NF_wp [wp]:\n  \"\\<lbrakk> ovalidNF L l Q; ovalidNF R r Q \\<rbrakk>\n   \\<Longrightarrow> ovalidNF (\\<lambda>s. if C s then L s else R s) (ocondition C l r) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalidNF L l Q; ovalidNF R r Q\\<rbrakk>\n    \\<Longrightarrow> ovalidNF (\\<lambda>s. if C s then L s else R s)\n                       (ocondition C l r) Q", "by (simp add: ovalidNF_def ocondition_def)"], ["", "lemma ofail_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>_. False) ofail Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>_. False) ofail Q", "by (simp add: ovalidNF_def ofail_def)"], ["", "lemma ovalidNF_K_bind_wp [wp]:\n  \"ovalidNF P f Q \\<Longrightarrow> ovalidNF P (K_bind f x) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF P f Q \\<Longrightarrow> ovalidNF P (K_bind f x) Q", "by simp"], ["", "lemma ogets_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. P (f s) s) (ogets f) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. P (f s) s) (ogets f) P", "by (simp add: ovalidNF_def ogets_def)"], ["", "lemma oguard_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. f s \\<and> P () s) (oguard f) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (\\<lambda>s. f s \\<and> P () s) (oguard f) P", "by (simp add: ovalidNF_def oguard_def)"], ["", "lemma oskip_NF_wp [wp]:\n  \"ovalidNF (\\<lambda>s. P () s) oskip P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (P ()) oskip P", "by (simp add: ovalidNF_def oskip_def)"], ["", "lemma ovalid_NF_case_prod [wp]:\n  assumes \"(\\<And>x y. ovalidNF (P x y) (B x y) Q)\"\n  shows \"ovalidNF (case v of (x, y) \\<Rightarrow> P x y) (case v of (x, y) \\<Rightarrow> B x y) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF (case v of (x, y) \\<Rightarrow> P x y)\n     (case v of (x, y) \\<Rightarrow> B x y) Q", "using assms"], ["proof (prove)\nusing this:\n  ovalidNF (P ?x ?y) (B ?x ?y) Q\n\ngoal (1 subgoal):\n 1. ovalidNF (case v of (x, y) \\<Rightarrow> P x y)\n     (case v of (x, y) \\<Rightarrow> B x y) Q", "unfolding ovalidNF_def"], ["proof (prove)\nusing this:\n  \\<forall>s.\n     P ?x ?y s \\<longrightarrow>\n     B ?x ?y s \\<noteq> None \\<and>\n     (\\<forall>r. B ?x ?y s = Some r \\<longrightarrow> Q r s)\n\ngoal (1 subgoal):\n 1. \\<forall>s.\n       (case v of (x, xa) \\<Rightarrow> P x xa) s \\<longrightarrow>\n       (case v of (x, xa) \\<Rightarrow> B x xa) s \\<noteq> None \\<and>\n       (\\<forall>r.\n           (case v of (x, xa) \\<Rightarrow> B x xa) s =\n           Some r \\<longrightarrow>\n           Q r s)", "by auto"], ["", "lemma owhile_NF [wp]:\n\"\\<lbrakk>\\<And>a. ovalidNF (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n   \\<And>a m. ovalid (\\<lambda>s. I a s \\<and> C a s \\<and> M a s = m) (B a) (\\<lambda>r s. M r s < m);\n   \\<And>a s. \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s\\<rbrakk>\n  \\<Longrightarrow> ovalidNF (I a) (owhile_inv C B a I M) Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a. ovalidNF (\\<lambda>s. I a s \\<and> C a s) (B a) I;\n     \\<And>a m.\n        ovalid (\\<lambda>s. I a s \\<and> C a s \\<and> M a s = m) (B a)\n         (\\<lambda>r s. M r s < m);\n     \\<And>a s.\n        \\<lbrakk>I a s; \\<not> C a s\\<rbrakk>\n        \\<Longrightarrow> Q a s\\<rbrakk>\n    \\<Longrightarrow> ovalidNF (I a) (owhile_inv C B a I M) Q", "unfolding owhile_inv_def ovalidNF_def ovalid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a.\n                \\<forall>s.\n                   I a s \\<and> C a s \\<longrightarrow>\n                   B a s \\<noteq> None \\<and>\n                   (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n     \\<And>a m.\n        \\<forall>s r.\n           (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n           B a s = Some r \\<longrightarrow>\n           M r s < m;\n     \\<And>a s.\n        \\<lbrakk>I a s; \\<not> C a s\\<rbrakk>\n        \\<Longrightarrow> Q a s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>s.\n                         I a s \\<longrightarrow>\n                         owhile C B a s \\<noteq> None \\<and>\n                         (\\<forall>r.\n                             owhile C B a s = Some r \\<longrightarrow>\n                             Q r s)", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s\\<rbrakk>\n       \\<Longrightarrow> owhile C B a s \\<noteq> None \\<and>\n                         (\\<forall>r.\n                             owhile C B a s = Some r \\<longrightarrow>\n                             Q r s)", "apply (rename_tac s, rule_tac I = I and M = \"measure (\\<lambda>r. M r s)\" in owhile_rule)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s\\<rbrakk>\n       \\<Longrightarrow> I a s\n 2. \\<And>s.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s\\<rbrakk>\n       \\<Longrightarrow> wf (measure (\\<lambda>r. M r s))\n 3. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> (r', r) \\<in> measure (\\<lambda>r. M r s)\n 4. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> I r' s\n 5. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = None\\<rbrakk>\n       \\<Longrightarrow> None \\<noteq> None \\<and>\n                         (\\<forall>r. None = Some r \\<longrightarrow> Q r s)\n 6. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; \\<not> C r s\\<rbrakk>\n       \\<Longrightarrow> Some r \\<noteq> None \\<and>\n                         (\\<forall>ra.\n                             Some r = Some ra \\<longrightarrow> Q ra s)", "apply fastforce"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s\\<rbrakk>\n       \\<Longrightarrow> wf (measure (\\<lambda>r. M r s))\n 2. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> (r', r) \\<in> measure (\\<lambda>r. M r s)\n 3. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> I r' s\n 4. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = None\\<rbrakk>\n       \\<Longrightarrow> None \\<noteq> None \\<and>\n                         (\\<forall>r. None = Some r \\<longrightarrow> Q r s)\n 5. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; \\<not> C r s\\<rbrakk>\n       \\<Longrightarrow> Some r \\<noteq> None \\<and>\n                         (\\<forall>ra.\n                             Some r = Some ra \\<longrightarrow> Q ra s)", "apply fastforce"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> (r', r) \\<in> measure (\\<lambda>r. M r s)\n 2. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> I r' s\n 3. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = None\\<rbrakk>\n       \\<Longrightarrow> None \\<noteq> None \\<and>\n                         (\\<forall>r. None = Some r \\<longrightarrow> Q r s)\n 4. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; \\<not> C r s\\<rbrakk>\n       \\<Longrightarrow> Some r \\<noteq> None \\<and>\n                         (\\<forall>ra.\n                             Some r = Some ra \\<longrightarrow> Q ra s)", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = Some r'\\<rbrakk>\n       \\<Longrightarrow> I r' s\n 2. \\<And>s r r'.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; C r s; B r s = None\\<rbrakk>\n       \\<Longrightarrow> None \\<noteq> None \\<and>\n                         (\\<forall>r. None = Some r \\<longrightarrow> Q r s)\n 3. \\<And>s r.\n       \\<lbrakk>\\<And>a.\n                   \\<forall>s.\n                      I a s \\<and> C a s \\<longrightarrow>\n                      B a s \\<noteq> None \\<and>\n                      (\\<forall>r. B a s = Some r \\<longrightarrow> I r s);\n        \\<And>a m.\n           \\<forall>s r.\n              (I a s \\<and> C a s \\<and> M a s = m) \\<and>\n              B a s = Some r \\<longrightarrow>\n              M r s < m;\n        \\<And>a s.\n           \\<lbrakk>I a s; \\<not> C a s\\<rbrakk> \\<Longrightarrow> Q a s;\n        I a s; I r s; \\<not> C r s\\<rbrakk>\n       \\<Longrightarrow> Some r \\<noteq> None \\<and>\n                         (\\<forall>ra.\n                             Some r = Some ra \\<longrightarrow> Q ra s)", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition ovalidNF_property where \"ovalidNF_property P x = (\\<lambda>s f. (x s f \\<noteq> None \\<and> (\\<forall>r. Some r = x s f \\<longrightarrow> P r s)))\""], ["", "lemma ovalidNF_is_triple [wp_trip]:\n  \"ovalidNF P f Q = triple_judgement P f (ovalidNF_property Q (\\<lambda>s f. f s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ovalidNF P f Q =\n    triple_judgement P f (ovalidNF_property Q (\\<lambda>s f. f s))", "by (auto simp: triple_judgement_def ovalidNF_def ovalidNF_property_def)"], ["", "lemma ovalidNF_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P' f Q; ovalidNF P f Q'; \\<And>s. P s \\<Longrightarrow> P' s \\<rbrakk> \\<Longrightarrow> ovalidNF P f (\\<lambda>r s. Q r s \\<and> Q' r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalidNF P' f Q; ovalidNF P f Q';\n     \\<And>s. P s \\<Longrightarrow> P' s\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P f (\\<lambda>r s. Q r s \\<and> Q' r s)", "by (simp add: ovalidNF_def)"], ["", "lemma ovalidNF_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P f Q; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> ovalidNF P' f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalidNF P f Q; \\<And>s. P' s \\<Longrightarrow> P s\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P' f Q", "by (simp add: ovalidNF_def)"], ["", "lemma ovalidNF_wp_comb3 [wp_comb]:\n  \"\\<lbrakk> ovalidNF P f Q; ovalidNF P' f Q' \\<rbrakk> \\<Longrightarrow> ovalidNF (\\<lambda>s. P s \\<and> P' s) f (\\<lambda>r s. Q r s \\<and> Q' r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ovalidNF P f Q; ovalidNF P' f Q'\\<rbrakk>\n    \\<Longrightarrow> ovalidNF (\\<lambda>s. P s \\<and> P' s) f\n                       (\\<lambda>r s. Q r s \\<and> Q' r s)", "by (simp add: ovalidNF_def)"], ["", "(* FIXME: WP rules for no_ofail, which might not be correct. *)"], ["", "lemma no_ofail_ofail [wp]: \"no_ofail (\\<lambda>_. False) ofail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail (\\<lambda>_. False) ofail", "by (simp add: no_ofail_def ofail_def)"], ["", "lemma no_ofail_ogets [wp]: \"no_ofail (\\<lambda>_. True) (ogets f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail (\\<lambda>_. True) (ogets f)", "by (simp add: no_ofail_def ogets_def)"], ["", "lemma no_ofail_obind [wp]:\n  \"\\<lbrakk> \\<And>r. no_ofail (P r) (g r); no_ofail Q f; ovalid Q f P \\<rbrakk> \\<Longrightarrow> no_ofail Q (obind f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r. no_ofail (P r) (g r); no_ofail Q f;\n     ovalid Q f P\\<rbrakk>\n    \\<Longrightarrow> no_ofail Q (f |>> g)", "by (auto simp: no_ofail_def obind_def ovalid_def)"], ["", "lemma no_ofail_K_bind [wp]:\n  \"no_ofail P f \\<Longrightarrow> no_ofail P (K_bind f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail P f \\<Longrightarrow> no_ofail P (K_bind f x)", "by simp"], ["", "lemma no_ofail_oguard [wp]:\n  \"no_ofail (\\<lambda>s. f s) (oguard f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail f (oguard f)", "by (auto simp: no_ofail_def oguard_def)"], ["", "lemma no_ofail_ocondition [wp]:\n  \"\\<lbrakk> no_ofail L l; no_ofail R r \\<rbrakk>\n     \\<Longrightarrow> no_ofail (\\<lambda>s. if C s then L s else R s) (ocondition C l r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_ofail L l; no_ofail R r\\<rbrakk>\n    \\<Longrightarrow> no_ofail (\\<lambda>s. if C s then L s else R s)\n                       (ocondition C l r)", "by (simp add: no_ofail_def ocondition_def)"], ["", "lemma no_ofail_oreturn [wp]:\n  \"no_ofail (\\<lambda>_. True) (oreturn x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail (\\<lambda>_. True) (oreturn x)", "by (simp add: no_ofail_def oreturn_def)"], ["", "lemma no_ofail_oskip [wp]:\n  \"no_ofail (\\<lambda>_. True) oskip\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail (\\<lambda>_. True) oskip", "by (simp add: no_ofail_def oskip_def)"], ["", "lemma no_ofail_is_triple [wp_trip]:\n  \"no_ofail P f = triple_judgement P f (\\<lambda>s f. f s \\<noteq> None)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. no_ofail P f = triple_judgement P f (\\<lambda>s f. f s \\<noteq> None)", "by (auto simp: triple_judgement_def no_ofail_def)"], ["", "lemma no_ofail_wp_comb1 [wp_comb]:\n  \"\\<lbrakk> no_ofail P f; \\<And>s. P' s \\<Longrightarrow> P s \\<rbrakk> \\<Longrightarrow> no_ofail P' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_ofail P f; \\<And>s. P' s \\<Longrightarrow> P s\\<rbrakk>\n    \\<Longrightarrow> no_ofail P' f", "by (simp add: no_ofail_def)"], ["", "lemma no_ofail_wp_comb2 [wp_comb]:\n  \"\\<lbrakk> no_ofail P f; no_ofail P' f \\<rbrakk> \\<Longrightarrow> no_ofail (\\<lambda>s. P s \\<and> P' s) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>no_ofail P f; no_ofail P' f\\<rbrakk>\n    \\<Longrightarrow> no_ofail (\\<lambda>s. P s \\<and> P' s) f", "by (simp add: no_ofail_def)"], ["", "(* Some extra lemmas for our predicates. *)"], ["", "lemma ovalid_grab_asm:\n  \"(G \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow> ovalid (\\<lambda>s. G \\<and> P s) f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow>\n    ovalid (\\<lambda>s. G \\<and> P s) f Q", "by (simp add: ovalid_def)"], ["", "lemma ovalidNF_grab_asm:\n  \"(G \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow> ovalidNF (\\<lambda>s. G \\<and> P s) f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow>\n    ovalidNF (\\<lambda>s. G \\<and> P s) f Q", "by (simp add: ovalidNF_def)"], ["", "lemma no_ofail_grab_asm:\n  \"(G \\<Longrightarrow> no_ofail P f) \\<Longrightarrow> no_ofail (\\<lambda>s. G \\<and> P s) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (G \\<Longrightarrow> no_ofail P f) \\<Longrightarrow>\n    no_ofail (\\<lambda>s. G \\<and> P s) f", "by (simp add: no_ofail_def)"], ["", "lemma ovalid_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow> ovalid P f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. P s \\<Longrightarrow> ovalid P f Q) \\<Longrightarrow>\n    ovalid P f Q", "by (auto simp: ovalid_def)"], ["", "lemma ovalidNF_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow> ovalidNF P f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. P s \\<Longrightarrow> ovalidNF P f Q) \\<Longrightarrow>\n    ovalidNF P f Q", "by (simp add: ovalidNF_def)"], ["", "lemma no_ofail_assume_pre:\n  \"(\\<And>s. P s \\<Longrightarrow> no_ofail P f) \\<Longrightarrow> no_ofail P f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. P s \\<Longrightarrow> no_ofail P f) \\<Longrightarrow>\n    no_ofail P f", "by (simp add: no_ofail_def)"], ["", "lemma ovalid_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P' f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. P' s \\<Longrightarrow> P s; ovalid P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalid P' f Q", "by (simp add: ovalid_def)"], ["", "lemma ovalidNF_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P' f Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. P' s \\<Longrightarrow> P s; ovalidNF P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P' f Q", "by (simp add: ovalidNF_def)"], ["", "lemma no_ofail_pre_imp:\n  \"\\<lbrakk> \\<And>s. P' s \\<Longrightarrow> P s; no_ofail P f \\<rbrakk> \\<Longrightarrow> no_ofail P' f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s. P' s \\<Longrightarrow> P s; no_ofail P f\\<rbrakk>\n    \\<Longrightarrow> no_ofail P' f", "by (simp add: no_ofail_def)"], ["", "lemma ovalid_post_imp:\n  \"\\<lbrakk> \\<And>r s. Q r s \\<Longrightarrow> Q' r s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P f Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r s. Q r s \\<Longrightarrow> Q' r s;\n     ovalid P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalid P f Q'", "by (simp add: ovalid_def)"], ["", "lemma ovalidNF_post_imp:\n  \"\\<lbrakk> \\<And>r s. Q r s \\<Longrightarrow> Q' r s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r s. Q r s \\<Longrightarrow> Q' r s;\n     ovalidNF P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P f Q'", "by (simp add: ovalidNF_def)"], ["", "lemma ovalid_post_imp_assuming_pre:\n  \"\\<lbrakk> \\<And>r s. \\<lbrakk> P s; Q r s \\<rbrakk> \\<Longrightarrow> Q' r s; ovalid P f Q \\<rbrakk> \\<Longrightarrow> ovalid P f Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r s.\n                \\<lbrakk>P s; Q r s\\<rbrakk> \\<Longrightarrow> Q' r s;\n     ovalid P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalid P f Q'", "by (simp add: ovalid_def)"], ["", "lemma ovalidNF_post_imp_assuming_pre:\n  \"\\<lbrakk> \\<And>r s. \\<lbrakk> P s; Q r s \\<rbrakk> \\<Longrightarrow> Q' r s; ovalidNF P f Q \\<rbrakk> \\<Longrightarrow> ovalidNF P f Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>r s.\n                \\<lbrakk>P s; Q r s\\<rbrakk> \\<Longrightarrow> Q' r s;\n     ovalidNF P f Q\\<rbrakk>\n    \\<Longrightarrow> ovalidNF P f Q'", "by (simp add: ovalidNF_def)"], ["", "end"]]}