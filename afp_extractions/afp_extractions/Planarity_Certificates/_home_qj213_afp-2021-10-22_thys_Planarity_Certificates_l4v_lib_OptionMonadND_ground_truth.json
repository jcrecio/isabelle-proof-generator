{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/l4v/lib/OptionMonadND.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemmas monad_simps =\n  gets_the_def bind_def assert_def assert_opt_def \n  simpler_gets_def fail_def return_def", "lemma gets_the_opt_map:\n  \"gets_the (f |> g) = do x \\<leftarrow> gets_the f; assert_opt (g x) od\"", "lemma gets_the_opt_o:\n  \"gets_the (f |> Some o g) = do x \\<leftarrow> gets_the f; return (g x) od\"", "lemma gets_the_obind:\n  \"gets_the (f |>> g) = gets_the f >>= (\\<lambda>x. gets_the (g x))\"", "lemma gets_the_return:\n  \"gets_the (oreturn x) = return x\"", "lemma gets_the_fail:\n  \"gets_the ofail = fail\"", "lemma gets_the_returnOk:\n  \"gets_the (oreturnOk x) = returnOk x\"", "lemma gets_the_throwError:\n  \"gets_the (othrow e) = throwError e\"", "lemma gets_the_assert:\n  \"gets_the (oassert P) = assert P\"", "lemmas omonad_simps [simp] =\n  gets_the_opt_map assert_opt_Some gets_the_obind\n  gets_the_return gets_the_fail gets_the_returnOk\n  gets_the_throwError gets_the_assert", "lemma gets_the_conv:\n  \"(gets_the B s) = (case B s of Some r' \\<Rightarrow> ({(r', s)}, False) | _ \\<Rightarrow> ({}, True))\"", "lemma gets_the_loop_terminates:\n  \"whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n    \\<longleftrightarrow> (\\<exists>rs'. (Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s))\" (is \"?L \\<longleftrightarrow> ?R\")", "lemma gets_the_whileLoop:\n  fixes C :: \"'a \\<Rightarrow> 's \\<Rightarrow> bool\"\n  shows \"whileLoop C (\\<lambda>a. gets_the (B a)) r = gets_the (owhile C B r)\""], "translations": [["", "lemmas monad_simps =\n  gets_the_def bind_def assert_def assert_opt_def \n  simpler_gets_def fail_def return_def"], ["", "lemma gets_the_opt_map:\n  \"gets_the (f |> g) = do x \\<leftarrow> gets_the f; assert_opt (g x) od\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (f |> g) = do x \\<leftarrow> gets_the f;\n                           assert_opt (g x)\n                        od", "by (rule ext) (simp add: monad_simps opt_map_def split: option.splits)"], ["", "lemma gets_the_opt_o:\n  \"gets_the (f |> Some o g) = do x \\<leftarrow> gets_the f; return (g x) od\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (f |> Some \\<circ> g) = do x \\<leftarrow> gets_the f;\n  return (g x)\n                                     od", "by (simp add: gets_the_opt_map assert_opt_Some)"], ["", "lemma gets_the_obind:\n  \"gets_the (f |>> g) = gets_the f >>= (\\<lambda>x. gets_the (g x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (f |>> g) = do x \\<leftarrow> gets_the f;\n                            gets_the (g x)\n                         od", "by (rule ext) (simp add: monad_simps obind_def split: option.splits)"], ["", "lemma gets_the_return:\n  \"gets_the (oreturn x) = return x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (oreturn x) = return x", "by (simp add: monad_simps oreturn_def K_def)"], ["", "lemma gets_the_fail:\n  \"gets_the ofail = fail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the ofail = fail", "by (simp add: monad_simps ofail_def K_def)"], ["", "lemma gets_the_returnOk:\n  \"gets_the (oreturnOk x) = returnOk x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (oreturnOk x) = returnOk x", "by (simp add: monad_simps K_def oreturnOk_def returnOk_def)"], ["", "lemma gets_the_throwError:\n  \"gets_the (othrow e) = throwError e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (othrow e) = throwError e", "by (simp add: monad_simps othrow_def throwError_def K_def)"], ["", "lemma gets_the_assert:\n  \"gets_the (oassert P) = assert P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the (oassert P) = assert P", "by (simp add: oassert_def assert_def gets_the_fail gets_the_return)"], ["", "lemmas omonad_simps [simp] =\n  gets_the_opt_map assert_opt_Some gets_the_obind\n  gets_the_return gets_the_fail gets_the_returnOk\n  gets_the_throwError gets_the_assert"], ["", "section \"Relation between option monad loops and non-deterministic monad loops.\""], ["", "(* Option monad whileLoop formalisation thanks to Lars Noschinski <noschinl@in.tum.de>. *)"], ["", "lemma gets_the_conv:\n  \"(gets_the B s) = (case B s of Some r' \\<Rightarrow> ({(r', s)}, False) | _ \\<Rightarrow> ({}, True))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gets_the B s =\n    (case B s of None \\<Rightarrow> ({}, True)\n     | Some r' \\<Rightarrow> ({(r', s)}, False))", "by (auto simp: gets_the_def gets_def get_def bind_def return_def fail_def assert_opt_def split: option.splits)"], ["", "lemma gets_the_loop_terminates:\n  \"whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n    \\<longleftrightarrow> (\\<exists>rs'. (Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s))\" (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s =\n    (\\<exists>rs'.\n        (Some r, rs')\n        \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r\n     s \\<Longrightarrow>\n    \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n 2. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n    whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "assume ?L"], ["proof (state)\nthis:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n\ngoal (2 subgoals):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r\n     s \\<Longrightarrow>\n    \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n 2. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n    whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "then"], ["proof (chain)\npicking this:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "show ?R"], ["proof (prove)\nusing this:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n\ngoal (1 subgoal):\n 1. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "proof (induct rule: whileLoop_terminates.induct[case_names 1 2])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>r s.\n       \\<not> C r s \\<Longrightarrow>\n       \\<exists>rs'.\n          (Some r, rs')\n          \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n 2. \\<And>r s.\n       \\<lbrakk>C r s;\n        \\<forall>(r', s')\\<in>fst (gets_the (B r) s).\n           whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r' s' \\<and>\n           (\\<exists>rs'.\n               (Some r', rs')\n               \\<in> option_while' (\\<lambda>a. C a s')\n                      (\\<lambda>a. B a s'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs'.\n                            (Some r, rs')\n                            \\<in> option_while' (\\<lambda>a. C a s)\n                                   (\\<lambda>a. B a s)", "case (2 r s)"], ["proof (state)\nthis:\n  C r s\n  \\<forall>(r', s')\\<in>fst (gets_the (B r) s).\n     whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r' s' \\<and>\n     (\\<exists>rs'.\n         (Some r', rs')\n         \\<in> option_while' (\\<lambda>a. C a s') (\\<lambda>a. B a s'))\n\ngoal (2 subgoals):\n 1. \\<And>r s.\n       \\<not> C r s \\<Longrightarrow>\n       \\<exists>rs'.\n          (Some r, rs')\n          \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n 2. \\<And>r s.\n       \\<lbrakk>C r s;\n        \\<forall>(r', s')\\<in>fst (gets_the (B r) s).\n           whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r' s' \\<and>\n           (\\<exists>rs'.\n               (Some r', rs')\n               \\<in> option_while' (\\<lambda>a. C a s')\n                      (\\<lambda>a. B a s'))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>rs'.\n                            (Some r, rs')\n                            \\<in> option_while' (\\<lambda>a. C a s)\n                                   (\\<lambda>a. B a s)", "then"], ["proof (chain)\npicking this:\n  C r s\n  \\<forall>(r', s')\\<in>fst (gets_the (B r) s).\n     whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r' s' \\<and>\n     (\\<exists>rs'.\n         (Some r', rs')\n         \\<in> option_while' (\\<lambda>a. C a s') (\\<lambda>a. B a s'))", "show ?case"], ["proof (prove)\nusing this:\n  C r s\n  \\<forall>(r', s')\\<in>fst (gets_the (B r) s).\n     whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r' s' \\<and>\n     (\\<exists>rs'.\n         (Some r', rs')\n         \\<in> option_while' (\\<lambda>a. C a s') (\\<lambda>a. B a s'))\n\ngoal (1 subgoal):\n 1. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "by (cases \"B r s\") (auto simp: gets_the_conv intro: option_while'.intros)"], ["proof (state)\nthis:\n  \\<exists>rs'.\n     (Some r, rs')\n     \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. \\<And>r s.\n       \\<not> C r s \\<Longrightarrow>\n       \\<exists>rs'.\n          (Some r, rs')\n          \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "qed (auto intro: option_while'.intros)"], ["proof (state)\nthis:\n  \\<exists>rs'.\n     (Some r, rs')\n     \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n    whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n    whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "assume ?R"], ["proof (state)\nthis:\n  \\<exists>rs'.\n     (Some r, rs')\n     \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. \\<exists>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n    whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "then"], ["proof (chain)\npicking this:\n  \\<exists>rs'.\n     (Some r, rs')\n     \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "show ?L"], ["proof (prove)\nusing this:\n  \\<exists>rs'.\n     (Some r, rs')\n     \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "proof (elim exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n       whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "fix rs'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n       whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "assume \"(Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\""], ["proof (state)\nthis:\n  (Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. \\<And>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n       whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "then"], ["proof (chain)\npicking this:\n  (Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "have \"whileLoop_terminates C (\\<lambda>a. gets_the (B a)) (the (Some r)) s\""], ["proof (prove)\nusing this:\n  (Some r, rs') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) (the (Some r)) s", "by induct (auto intro: whileLoop_terminates.intros simp: gets_the_conv)"], ["proof (state)\nthis:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) (the (Some r)) s\n\ngoal (1 subgoal):\n 1. \\<And>rs'.\n       (Some r, rs')\n       \\<in> option_while' (\\<lambda>a. C a s)\n              (\\<lambda>a. B a s) \\<Longrightarrow>\n       whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "then"], ["proof (chain)\npicking this:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) (the (Some r)) s", "show ?thesis"], ["proof (prove)\nusing this:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) (the (Some r)) s\n\ngoal (1 subgoal):\n 1. whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s", "by simp"], ["proof (state)\nthis:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  whileLoop_terminates C (\\<lambda>a. gets_the (B a)) r s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gets_the_whileLoop:\n  fixes C :: \"'a \\<Rightarrow> 's \\<Rightarrow> bool\"\n  shows \"whileLoop C (\\<lambda>a. gets_the (B a)) r = gets_the (owhile C B r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "fix r s r' s'"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "assume \"(Some (r,s), Some (r', s')) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\""], ["proof (state)\nthis:\n  (Some (r, s), Some (r', s'))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "then"], ["proof (chain)\npicking this:\n  (Some (r, s), Some (r', s'))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))", "have \"s = s' \\<and> (Some r, Some r') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\""], ["proof (prove)\nusing this:\n  (Some (r, s), Some (r', s'))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. s = s' \\<and>\n    (Some r, Some r')\n    \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "by (induct \"Some (r, s)\" \"Some (r', s')\" arbitrary: r s)\n       (auto intro: option_while'.intros simp: gets_the_conv split: option.splits)"], ["proof (state)\nthis:\n  s = s' \\<and>\n  (Some r, Some r')\n  \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "}"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), Some (?r'2, ?s'2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  ?s2 = ?s'2 \\<and>\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "note wl'_Inl = this"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), Some (?r'2, ?s'2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  ?s2 = ?s'2 \\<and>\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "{"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), Some (?r'2, ?s'2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  ?s2 = ?s'2 \\<and>\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "assume \"(Some (r,s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\""], ["proof (state)\nthis:\n  (Some (r, s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "then"], ["proof (chain)\npicking this:\n  (Some (r, s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))", "have \"(Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\""], ["proof (prove)\nusing this:\n  (Some (r, s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. (Some r, None)\n    \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "by (induct \"Some (r, s)\" \"None :: (('a \\<times> 's) option)\" arbitrary: r s)\n         (auto intro: option_while'.intros simp: gets_the_conv split: option.splits)"], ["proof (state)\nthis:\n  (Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "}"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), None)\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  (Some ?ra2, None)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "note wl'_Inr = this"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), None)\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  (Some ?ra2, None)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "{"], ["proof (state)\nthis:\n  (Some (?ra2, ?s2), None)\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a)) \\<Longrightarrow>\n  (Some ?ra2, None)\n  \\<in> option_while' (\\<lambda>a. C a ?s2) (\\<lambda>a. B a ?s2)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "fix r s r'"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "assume \"(Some r, Some r') \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\""], ["proof (state)\nthis:\n  (Some r, Some r')\n  \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "then"], ["proof (chain)\npicking this:\n  (Some r, Some r')\n  \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "have \"(Some (r,s), Some (r',s)) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\""], ["proof (prove)\nusing this:\n  (Some r, Some r')\n  \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. (Some (r, s), Some (r', s))\n    \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))", "by (induct \"Some r\" \"Some r'\" arbitrary: r)\n       (auto intro: whileLoop_results.intros simp: gets_the_conv)"], ["proof (state)\nthis:\n  (Some (r, s), Some (r', s))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "}"], ["proof (state)\nthis:\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2)\n         (\\<lambda>a. B a ?s2) \\<Longrightarrow>\n  (Some (?ra2, ?s2), Some (?r'2, ?s2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "note option_while'_Some = this"], ["proof (state)\nthis:\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2)\n         (\\<lambda>a. B a ?s2) \\<Longrightarrow>\n  (Some (?ra2, ?s2), Some (?r'2, ?s2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "{"], ["proof (state)\nthis:\n  (Some ?ra2, Some ?r'2)\n  \\<in> option_while' (\\<lambda>a. C a ?s2)\n         (\\<lambda>a. B a ?s2) \\<Longrightarrow>\n  (Some (?ra2, ?s2), Some (?r'2, ?s2))\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "fix r s"], ["proof (state)\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "assume \"(Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\""], ["proof (state)\nthis:\n  (Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "then"], ["proof (chain)\npicking this:\n  (Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)", "have \"(Some (r,s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\""], ["proof (prove)\nusing this:\n  (Some r, None) \\<in> option_while' (\\<lambda>a. C a s) (\\<lambda>a. B a s)\n\ngoal (1 subgoal):\n 1. (Some (r, s), None)\n    \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))", "by (induct \"Some r\" \"None :: 'a option\" arbitrary: r)\n       (auto intro: whileLoop_results.intros simp: gets_the_conv)"], ["proof (state)\nthis:\n  (Some (r, s), None) \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "}"], ["proof (state)\nthis:\n  (Some ?ra2, None)\n  \\<in> option_while' (\\<lambda>a. C a ?s2)\n         (\\<lambda>a. B a ?s2) \\<Longrightarrow>\n  (Some (?ra2, ?s2), None)\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "note option_while'_None = this"], ["proof (state)\nthis:\n  (Some ?ra2, None)\n  \\<in> option_while' (\\<lambda>a. C a ?s2)\n         (\\<lambda>a. B a ?s2) \\<Longrightarrow>\n  (Some (?ra2, ?s2), None)\n  \\<in> whileLoop_results C (\\<lambda>a. gets_the (B a))\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "have \"\\<And>s. owhile C B r s = None\n      \\<Longrightarrow> whileLoop C (\\<lambda>a. gets_the (B a)) r s = ({}, True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       owhile C B r s = None \\<Longrightarrow>\n       whileLoop C\n         (\\<lambda>a. gets_the (B a))\n        r s =\n       ({}, True)", "by (auto simp: whileLoop_def owhile_def option_while_def option_while'_THE gets_the_loop_terminates\n      split: if_split_asm dest: option_while'_None wl'_Inl option_while'_inj)"], ["proof (state)\nthis:\n  owhile C B r ?s = None \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({}, True)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "moreover"], ["proof (state)\nthis:\n  owhile C B r ?s = None \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({}, True)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "have \"\\<And>s r'. owhile C B r s = Some r'\n      \\<Longrightarrow> whileLoop C (\\<lambda>a. gets_the (B a)) r s = ({(r', s)}, False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s r'.\n       owhile C B r s = Some r' \\<Longrightarrow>\n       whileLoop C\n         (\\<lambda>a. gets_the (B a))\n        r s =\n       ({(r', s)}, False)", "by (auto simp: whileLoop_def owhile_def option_while_def option_while'_THE gets_the_loop_terminates\n      split: if_split_asm dest: wl'_Inl wl'_Inr option_while'_inj intro: option_while'_Some)"], ["proof (state)\nthis:\n  owhile C B r ?s = Some ?r' \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({(?r', ?s)}, False)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "ultimately"], ["proof (chain)\npicking this:\n  owhile C B r ?s = None \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({}, True)\n  owhile C B r ?s = Some ?r' \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({(?r', ?s)}, False)", "show ?thesis"], ["proof (prove)\nusing this:\n  owhile C B r ?s = None \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({}, True)\n  owhile C B r ?s = Some ?r' \\<Longrightarrow>\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r ?s =\n  ({(?r', ?s)}, False)\n\ngoal (1 subgoal):\n 1. whileLoop C\n      (\\<lambda>a. gets_the (B a))\n     r =\n    gets_the (owhile C B r)", "by (auto simp: fun_eq_iff gets_the_conv split: option.split)"], ["proof (state)\nthis:\n  whileLoop C\n    (\\<lambda>a. gets_the (B a))\n   r =\n  gets_the (owhile C B r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}