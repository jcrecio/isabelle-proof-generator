{"file_name": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates/l4v/lib/OptionMonad.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Planarity_Certificates", "problem_names": ["lemma opt_map_cong [fundef_cong]:\n  \"\\<lbrakk> f = f'; \\<And>v s. f s = Some v \\<Longrightarrow> g v = g' v\\<rbrakk> \\<Longrightarrow> f |> g = f' |> g'\"", "lemma in_opt_map_eq:\n  \"((f |> g) s = Some v) = (\\<exists>v'. f s = Some v' \\<and> g v' = Some v)\"", "lemma opt_mapE:\n  \"\\<lbrakk> (f |> g) s = Some v; \\<And>v'. \\<lbrakk>f s = Some v'; g v' = Some v \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\"", "lemma oreturn_bind [simp]: \"(oreturn x |>> f) = f x\"", "lemma obind_return [simp]: \"(m |>> oreturn) = m\"", "lemma obind_assoc: \n  \"(m |>> f) |>> g  =  m |>> (\\<lambda>x. f x |>> g)\"", "lemma obind_fail [simp]:\n  \"f |>> (\\<lambda>_. ofail) = ofail\"", "lemma ofail_bind [simp]:\n  \"ofail |>> m = ofail\"", "lemma opt_bind_cong [fundef_cong]:\n  \"\\<lbrakk> f = f'; \\<And>v s. f' s = Some v \\<Longrightarrow> g v s = g' v s \\<rbrakk> \\<Longrightarrow> f |>> g = f' |>> g'\"", "lemma opt_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> f s = f' s; \\<And>v. f' s = Some v \\<Longrightarrow> g v s = g' v s \\<rbrakk> \\<Longrightarrow> (f |>> g) s = (f' |>> g') s\"", "lemma oassert_bind_cong [fundef_cong]:\n  \"\\<lbrakk> P = P'; P' \\<Longrightarrow> m = m' \\<rbrakk> \\<Longrightarrow> oassert P |>> m = oassert P' |>> m'\"", "lemma oassert_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> P = P'; P' \\<Longrightarrow> m () s = m' () s \\<rbrakk> \\<Longrightarrow> (oassert P |>> m) s = (oassert P' |>> m') s\"", "lemma oreturn_bind_cong [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' = m' x' \\<rbrakk> \\<Longrightarrow> oreturn x |>> m = oreturn x' |>> m'\"", "lemma oreturn_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' s = m' x' s \\<rbrakk> \\<Longrightarrow> (oreturn x |>> m) s = (oreturn x' |>> m') s\"", "lemma oreturn_bind_cong2 [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' = m' x' \\<rbrakk> \\<Longrightarrow> (oreturn $ x) |>> m = (oreturn $ x') |>> m'\"", "lemma oreturn_bind_cong2_apply [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' s = m' x' s \\<rbrakk> \\<Longrightarrow> ((oreturn $ x) |>> m) s = ((oreturn $ x') |>> m') s\"", "lemma ocondition_cong [fundef_cong]:\n\"\\<lbrakk>c = c'; \\<And>s. c' s \\<Longrightarrow> l s = l' s; \\<And>s. \\<not>c' s \\<Longrightarrow> r s = r' s\\<rbrakk>\n  \\<Longrightarrow> ocondition c l r = ocondition c' l' r'\"", "lemma ocondition_K_true [simp]:\n  \"ocondition (\\<lambda>_. True) T F = T\"", "lemma ocondition_K_false [simp]:\n  \"ocondition (\\<lambda>_. False) T F = F\"", "lemma ocondition_False:\n    \"\\<lbrakk> \\<And>s. \\<not> P s \\<rbrakk> \\<Longrightarrow> ocondition P L R = R\"", "lemma ocondition_True:\n    \"\\<lbrakk> \\<And>s. P s \\<rbrakk> \\<Longrightarrow> ocondition P L R = L\"", "lemma in_oreturn [simp]:\n  \"(oreturn x s = Some v) = (v = x)\"", "lemma oreturnE:\n  \"\\<lbrakk>oreturn x s = Some v; v = x \\<Longrightarrow> P x\\<rbrakk> \\<Longrightarrow> P v\"", "lemma in_ofail [simp]:\n  \"ofail s \\<noteq> Some v\"", "lemma ofailE:\n  \"ofail s = Some v \\<Longrightarrow> P\"", "lemma in_oassert_eq [simp]:\n  \"(oassert P s = Some v) = P\"", "lemma oassertE:\n  \"\\<lbrakk> oassert P s = Some v; P \\<Longrightarrow> Q \\<rbrakk> \\<Longrightarrow> Q\"", "lemma in_obind_eq:\n  \"((f |>> g) s = Some v) = (\\<exists>v'. f s = Some v' \\<and> g v' s = Some v)\"", "lemma obindE:\n  \"\\<lbrakk> (f |>> g) s = Some v; \n     \\<And>v'. \\<lbrakk>f s = Some v'; g v' s = Some v\\<rbrakk> \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\"", "lemma in_othrow_eq [simp]:\n  \"(othrow e s = Some v) = (v = Inl e)\"", "lemma othrowE:\n  \"\\<lbrakk>othrow e s = Some v; v = Inl e \\<Longrightarrow> P (Inl e)\\<rbrakk> \\<Longrightarrow> P v\"", "lemma in_oreturnOk_eq [simp]:\n  \"(oreturnOk x s = Some v) = (v = Inr x)\"", "lemma oreturnOkE:\n  \"\\<lbrakk>oreturnOk x s = Some v; v = Inr x \\<Longrightarrow> P (Inr x)\\<rbrakk> \\<Longrightarrow> P v\"", "lemmas omonadE [elim!] =\n  opt_mapE obindE oreturnE ofailE othrowE oreturnOkE oassertE", "lemma option_while'_inj:\n  assumes \"(s,s') \\<in> option_while' C B\" \"(s, s'') \\<in> option_while' C B\"\n  shows \"s' = s''\"", "lemma option_while'_inj_step:\n  \"\\<lbrakk> C s; B s = Some s'; (Some s, t) \\<in> option_while' C B ; (Some s', t') \\<in> option_while' C B \\<rbrakk> \\<Longrightarrow> t = t'\"", "lemma option_while'_THE:\n  assumes \"(Some r, sr') \\<in> option_while' C B\"\n  shows \"(THE s. (Some r, s) \\<in> option_while' C B) = sr'\"", "lemma option_while_simps:\n  \"\\<not> C s \\<Longrightarrow> option_while C B s = Some s\"\n  \"C s \\<Longrightarrow> B s = None \\<Longrightarrow> option_while C B s = None\"\n  \"C s \\<Longrightarrow> B s = Some s' \\<Longrightarrow> option_while C B s = option_while C B s'\"\n  \"(Some s, ss') \\<in> option_while' C B \\<Longrightarrow> option_while C B s = ss'\"", "lemma option_while_rule:\n  assumes \"option_while C B s = Some s'\"\n  assumes \"I s\"\n  assumes istep: \"\\<And>s s'. C s \\<Longrightarrow> I s \\<Longrightarrow> B s = Some s' \\<Longrightarrow> I s'\"\n  shows \"I s' \\<and> \\<not> C s'\"", "lemma option_while'_term:\n  assumes \"I r\"\n  assumes \"wf M\"\n  assumes step_less: \"\\<And>r r'. \\<lbrakk>I r; C r; B r = Some r'\\<rbrakk> \\<Longrightarrow> (r',r) \\<in> M\"\n  assumes step_I: \"\\<And>r r'. \\<lbrakk>I r; C r; B r = Some r'\\<rbrakk> \\<Longrightarrow> I r'\"\n  obtains sr' where \"(Some r, sr') \\<in> option_while' C B\"", "lemma option_while_rule':\n  assumes \"option_while C B s = ss'\"\n  assumes \"wf M\"\n  assumes \"I (Some s)\"\n  assumes less: \"\\<And>s s'. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = Some s' \\<Longrightarrow> (s', s) \\<in> M\"\n  assumes step: \"\\<And>s s'. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = Some s' \\<Longrightarrow> I (Some s')\"\n  assumes final: \"\\<And>s. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = None \\<Longrightarrow> I None\"\n  shows \"I ss' \\<and> (case ss' of Some s' \\<Rightarrow> \\<not> C s' | _ \\<Rightarrow> True)\"", "lemma owhile_unroll:\n  \"owhile C B r = ocondition (C r) (B r |>> owhile C B) (oreturn r)\"", "lemma owhile_rule:\n  assumes \"I r s\"\n  assumes \"wf M\"\n  assumes less: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = Some r'\\<rbrakk> \\<Longrightarrow> (r',r) \\<in> M\"\n  assumes step: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = Some r'\\<rbrakk> \\<Longrightarrow> I r' s\"\n  assumes fail: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = None\\<rbrakk> \\<Longrightarrow> Q None\"\n  assumes final: \"\\<And>r. \\<lbrakk>I r s; \\<not>C r s\\<rbrakk> \\<Longrightarrow> Q (Some r)\"\n  shows \"Q (owhile C B r s)\""], "translations": [["", "lemma opt_map_cong [fundef_cong]:\n  \"\\<lbrakk> f = f'; \\<And>v s. f s = Some v \\<Longrightarrow> g v = g' v\\<rbrakk> \\<Longrightarrow> f |> g = f' |> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f = f';\n     \\<And>v s. f s = Some v \\<Longrightarrow> g v = g' v\\<rbrakk>\n    \\<Longrightarrow> f |> g = f' |> g'", "by (rule ext) (simp add: opt_map_def split: option.splits)"], ["", "lemma in_opt_map_eq:\n  \"((f |> g) s = Some v) = (\\<exists>v'. f s = Some v' \\<and> g v' = Some v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f |> g) s = Some v) =\n    (\\<exists>v'. f s = Some v' \\<and> g v' = Some v)", "by (simp add: opt_map_def split: option.splits)"], ["", "lemma opt_mapE:\n  \"\\<lbrakk> (f |> g) s = Some v; \\<And>v'. \\<lbrakk>f s = Some v'; g v' = Some v \\<rbrakk> \\<Longrightarrow> P \\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f |> g) s = Some v;\n     \\<And>v'.\n        \\<lbrakk>f s = Some v'; g v' = Some v\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto simp: in_opt_map_eq)"], ["", "definition\n  obind :: \"('s,'a) lookup \\<Rightarrow> ('a \\<Rightarrow> ('s,'b) lookup) \\<Rightarrow> ('s,'b) lookup\" (infixl \"|>>\" 53)\nwhere\n  \"f |>> g \\<equiv> \\<lambda>s. case f s of None \\<Rightarrow> None | Some x \\<Rightarrow> g x s\""], ["", "definition\n  \"ofail = K None\""], ["", "definition\n  \"oreturn = K o Some\""], ["", "definition\n  \"oassert P \\<equiv> if P then oreturn () else ofail\""], ["", "text \\<open>\n  If the result can be an exception.\n  Corresponding bindE would be analogous to lifting in NonDetMonad.\n\\<close>"], ["", "definition\n  \"oreturnOk x = K (Some (Inr x))\""], ["", "definition\n  \"othrow e = K (Some (Inl e))\""], ["", "definition\n  \"oguard G \\<equiv> (\\<lambda>s. if G s then Some () else None)\""], ["", "definition\n  \"ocondition c L R \\<equiv> (\\<lambda>s. if c s then L s else R s)\""], ["", "definition\n  \"oskip \\<equiv> oreturn ()\""], ["", "text \\<open>Monad laws\\<close>"], ["", "lemma oreturn_bind [simp]: \"(oreturn x |>> f) = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreturn x |>> f = f x", "by (auto simp add: oreturn_def obind_def K_def intro!: ext)"], ["", "lemma obind_return [simp]: \"(m |>> oreturn) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m |>> oreturn = m", "by (auto simp add: oreturn_def obind_def K_def intro!: ext split: option.splits)"], ["", "lemma obind_assoc: \n  \"(m |>> f) |>> g  =  m |>> (\\<lambda>x. f x |>> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m |>> f |>> g = m |>> (\\<lambda>x. f x |>> g)", "by (auto simp add: oreturn_def obind_def K_def intro!: ext split: option.splits)"], ["", "text \\<open>Binding fail\\<close>"], ["", "lemma obind_fail [simp]:\n  \"f |>> (\\<lambda>_. ofail) = ofail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f |>> (\\<lambda>_. ofail) = ofail", "by (auto simp add: ofail_def obind_def K_def intro!: ext split: option.splits)"], ["", "lemma ofail_bind [simp]:\n  \"ofail |>> m = ofail\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ofail |>> m = ofail", "by (auto simp add: ofail_def obind_def K_def intro!: ext split: option.splits)"], ["", "text \\<open>Function package setup\\<close>"], ["", "lemma opt_bind_cong [fundef_cong]:\n  \"\\<lbrakk> f = f'; \\<And>v s. f' s = Some v \\<Longrightarrow> g v s = g' v s \\<rbrakk> \\<Longrightarrow> f |>> g = f' |>> g'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f = f';\n     \\<And>v s. f' s = Some v \\<Longrightarrow> g v s = g' v s\\<rbrakk>\n    \\<Longrightarrow> f |>> g = f' |>> g'", "by (rule ext) (simp add: obind_def split: option.splits)"], ["", "lemma opt_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> f s = f' s; \\<And>v. f' s = Some v \\<Longrightarrow> g v s = g' v s \\<rbrakk> \\<Longrightarrow> (f |>> g) s = (f' |>> g') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f s = f' s;\n     \\<And>v. f' s = Some v \\<Longrightarrow> g v s = g' v s\\<rbrakk>\n    \\<Longrightarrow> (f |>> g) s = (f' |>> g') s", "by (simp add: obind_def split: option.splits)"], ["", "lemma oassert_bind_cong [fundef_cong]:\n  \"\\<lbrakk> P = P'; P' \\<Longrightarrow> m = m' \\<rbrakk> \\<Longrightarrow> oassert P |>> m = oassert P' |>> m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P = P'; P' \\<Longrightarrow> m = m'\\<rbrakk>\n    \\<Longrightarrow> oassert P |>> m = oassert P' |>> m'", "by (auto simp: oassert_def)"], ["", "lemma oassert_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> P = P'; P' \\<Longrightarrow> m () s = m' () s \\<rbrakk> \\<Longrightarrow> (oassert P |>> m) s = (oassert P' |>> m') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P = P'; P' \\<Longrightarrow> m () s = m' () s\\<rbrakk>\n    \\<Longrightarrow> (oassert P |>> m) s = (oassert P' |>> m') s", "by (auto simp: oassert_def)"], ["", "lemma oreturn_bind_cong [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' = m' x' \\<rbrakk> \\<Longrightarrow> oreturn x |>> m = oreturn x' |>> m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x'; m x' = m' x'\\<rbrakk>\n    \\<Longrightarrow> oreturn x |>> m = oreturn x' |>> m'", "by simp"], ["", "lemma oreturn_bind_cong_apply [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' s = m' x' s \\<rbrakk> \\<Longrightarrow> (oreturn x |>> m) s = (oreturn x' |>> m') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x'; m x' s = m' x' s\\<rbrakk>\n    \\<Longrightarrow> (oreturn x |>> m) s = (oreturn x' |>> m') s", "by simp"], ["", "lemma oreturn_bind_cong2 [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' = m' x' \\<rbrakk> \\<Longrightarrow> (oreturn $ x) |>> m = (oreturn $ x') |>> m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x'; m x' = m' x'\\<rbrakk>\n    \\<Longrightarrow> (oreturn $ x) |>> m = (oreturn $ x') |>> m'", "by simp"], ["", "lemma oreturn_bind_cong2_apply [fundef_cong]:\n  \"\\<lbrakk> x = x'; m x' s = m' x' s \\<rbrakk> \\<Longrightarrow> ((oreturn $ x) |>> m) s = ((oreturn $ x') |>> m') s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x = x'; m x' s = m' x' s\\<rbrakk>\n    \\<Longrightarrow> ((oreturn $ x) |>> m) s = ((oreturn $ x') |>> m') s", "by simp"], ["", "lemma ocondition_cong [fundef_cong]:\n\"\\<lbrakk>c = c'; \\<And>s. c' s \\<Longrightarrow> l s = l' s; \\<And>s. \\<not>c' s \\<Longrightarrow> r s = r' s\\<rbrakk>\n  \\<Longrightarrow> ocondition c l r = ocondition c' l' r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = c'; \\<And>s. c' s \\<Longrightarrow> l s = l' s;\n     \\<And>s. \\<not> c' s \\<Longrightarrow> r s = r' s\\<rbrakk>\n    \\<Longrightarrow> ocondition c l r = ocondition c' l' r'", "by (auto simp: ocondition_def)"], ["", "text \\<open>Decomposition\\<close>"], ["", "lemma ocondition_K_true [simp]:\n  \"ocondition (\\<lambda>_. True) T F = T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ocondition (\\<lambda>_. True) T F = T", "by (simp add: ocondition_def)"], ["", "lemma ocondition_K_false [simp]:\n  \"ocondition (\\<lambda>_. False) T F = F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ocondition (\\<lambda>_. False) T F = F", "by (simp add: ocondition_def)"], ["", "lemma ocondition_False:\n    \"\\<lbrakk> \\<And>s. \\<not> P s \\<rbrakk> \\<Longrightarrow> ocondition P L R = R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. \\<not> P s) \\<Longrightarrow> ocondition P L R = R", "by (rule ext, clarsimp simp: ocondition_def)"], ["", "lemma ocondition_True:\n    \"\\<lbrakk> \\<And>s. P s \\<rbrakk> \\<Longrightarrow> ocondition P L R = L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. P s) \\<Longrightarrow> ocondition P L R = L", "by (rule ext, clarsimp simp: ocondition_def)"], ["", "lemma in_oreturn [simp]:\n  \"(oreturn x s = Some v) = (v = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oreturn x s = Some v) = (v = x)", "by (auto simp: oreturn_def K_def)"], ["", "lemma oreturnE:\n  \"\\<lbrakk>oreturn x s = Some v; v = x \\<Longrightarrow> P x\\<rbrakk> \\<Longrightarrow> P v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oreturn x s = Some v; v = x \\<Longrightarrow> P x\\<rbrakk>\n    \\<Longrightarrow> P v", "by simp"], ["", "lemma in_ofail [simp]:\n  \"ofail s \\<noteq> Some v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ofail s \\<noteq> Some v", "by (auto simp: ofail_def K_def)"], ["", "lemma ofailE:\n  \"ofail s = Some v \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ofail s = Some v \\<Longrightarrow> P", "by simp"], ["", "lemma in_oassert_eq [simp]:\n  \"(oassert P s = Some v) = P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oassert P s = Some v) = P", "by (simp add: oassert_def)"], ["", "lemma oassertE:\n  \"\\<lbrakk> oassert P s = Some v; P \\<Longrightarrow> Q \\<rbrakk> \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oassert P s = Some v; P \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by simp"], ["", "lemma in_obind_eq:\n  \"((f |>> g) s = Some v) = (\\<exists>v'. f s = Some v' \\<and> g v' s = Some v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((f |>> g) s = Some v) =\n    (\\<exists>v'. f s = Some v' \\<and> g v' s = Some v)", "by (simp add: obind_def split: option.splits)"], ["", "lemma obindE:\n  \"\\<lbrakk> (f |>> g) s = Some v; \n     \\<And>v'. \\<lbrakk>f s = Some v'; g v' s = Some v\\<rbrakk> \\<Longrightarrow> P\\<rbrakk> \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(f |>> g) s = Some v;\n     \\<And>v'.\n        \\<lbrakk>f s = Some v'; g v' s = Some v\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto simp: in_obind_eq)"], ["", "lemma in_othrow_eq [simp]:\n  \"(othrow e s = Some v) = (v = Inl e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (othrow e s = Some v) = (v = Inl e)", "by (auto simp: othrow_def K_def)"], ["", "lemma othrowE:\n  \"\\<lbrakk>othrow e s = Some v; v = Inl e \\<Longrightarrow> P (Inl e)\\<rbrakk> \\<Longrightarrow> P v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>othrow e s = Some v;\n     v = Inl e \\<Longrightarrow> P (Inl e)\\<rbrakk>\n    \\<Longrightarrow> P v", "by simp"], ["", "lemma in_oreturnOk_eq [simp]:\n  \"(oreturnOk x s = Some v) = (v = Inr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (oreturnOk x s = Some v) = (v = Inr x)", "by (auto simp: oreturnOk_def K_def)"], ["", "lemma oreturnOkE:\n  \"\\<lbrakk>oreturnOk x s = Some v; v = Inr x \\<Longrightarrow> P (Inr x)\\<rbrakk> \\<Longrightarrow> P v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>oreturnOk x s = Some v;\n     v = Inr x \\<Longrightarrow> P (Inr x)\\<rbrakk>\n    \\<Longrightarrow> P v", "by simp"], ["", "lemmas omonadE [elim!] =\n  opt_mapE obindE oreturnE ofailE othrowE oreturnOkE oassertE"], ["", "section \\<open>\"While\" loops over option monad.\\<close>"], ["", "text \\<open>\n  This is an inductive definition of a while loop over the plain option monad\n  (without passing through a state)\n\\<close>"], ["", "inductive_set\n  option_while' :: \"('a \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> 'a option) \\<Rightarrow> 'a option rel\"\n  for C B\nwhere\n    final: \"\\<not> C r \\<Longrightarrow> (Some r, Some r) \\<in> option_while' C B\"\n  | fail: \"\\<lbrakk> C r; B r = None \\<rbrakk> \\<Longrightarrow> (Some r, None) \\<in> option_while' C B\"\n  | step: \"\\<lbrakk> C r;  B r = Some r'; (Some r', sr'') \\<in> option_while' C B \\<rbrakk>\n           \\<Longrightarrow> (Some r, sr'') \\<in> option_while' C B\""], ["", "definition\n  \"option_while C B r \\<equiv>\n    (if (\\<exists>s. (Some r, s) \\<in> option_while' C B) then\n      (THE s. (Some r, s) \\<in> option_while' C B) else None)\""], ["", "lemma option_while'_inj:\n  assumes \"(s,s') \\<in> option_while' C B\" \"(s, s'') \\<in> option_while' C B\"\n  shows \"s' = s''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = s''", "using assms"], ["proof (prove)\nusing this:\n  (s, s') \\<in> option_while' C B\n  (s, s'') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. s' = s''", "by (induct rule: option_while'.induct) (auto elim: option_while'.cases)"], ["", "lemma option_while'_inj_step:\n  \"\\<lbrakk> C s; B s = Some s'; (Some s, t) \\<in> option_while' C B ; (Some s', t') \\<in> option_while' C B \\<rbrakk> \\<Longrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>C s; B s = Some s'; (Some s, t) \\<in> option_while' C B;\n     (Some s', t') \\<in> option_while' C B\\<rbrakk>\n    \\<Longrightarrow> t = t'", "by (metis option_while'.step option_while'_inj)"], ["", "lemma option_while'_THE:\n  assumes \"(Some r, sr') \\<in> option_while' C B\"\n  shows \"(THE s. (Some r, s) \\<in> option_while' C B) = sr'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (THE s. (Some r, s) \\<in> option_while' C B) = sr'", "using assms"], ["proof (prove)\nusing this:\n  (Some r, sr') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. (THE s. (Some r, s) \\<in> option_while' C B) = sr'", "by (blast dest: option_while'_inj)"], ["", "lemma option_while_simps:\n  \"\\<not> C s \\<Longrightarrow> option_while C B s = Some s\"\n  \"C s \\<Longrightarrow> B s = None \\<Longrightarrow> option_while C B s = None\"\n  \"C s \\<Longrightarrow> B s = Some s' \\<Longrightarrow> option_while C B s = option_while C B s'\"\n  \"(Some s, ss') \\<in> option_while' C B \\<Longrightarrow> option_while C B s = ss'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<not> C s \\<Longrightarrow> option_while C B s = Some s) &&&\n     (\\<lbrakk>C s; B s = None\\<rbrakk>\n      \\<Longrightarrow> option_while C B s = None)) &&&\n    (\\<lbrakk>C s; B s = Some s'\\<rbrakk>\n     \\<Longrightarrow> option_while C B s = option_while C B s') &&&\n    ((Some s, ss') \\<in> option_while' C B \\<Longrightarrow>\n     option_while C B s = ss')", "using option_while'_inj_step[of C s B s']"], ["proof (prove)\nusing this:\n  \\<lbrakk>C s; B s = Some s'; (Some s, ?t) \\<in> option_while' C B;\n   (Some s', ?t') \\<in> option_while' C B\\<rbrakk>\n  \\<Longrightarrow> ?t = ?t'\n\ngoal (1 subgoal):\n 1. ((\\<not> C s \\<Longrightarrow> option_while C B s = Some s) &&&\n     (\\<lbrakk>C s; B s = None\\<rbrakk>\n      \\<Longrightarrow> option_while C B s = None)) &&&\n    (\\<lbrakk>C s; B s = Some s'\\<rbrakk>\n     \\<Longrightarrow> option_while C B s = option_while C B s') &&&\n    ((Some s, ss') \\<in> option_while' C B \\<Longrightarrow>\n     option_while C B s = ss')", "by (auto simp: option_while_def option_while'_THE\n      intro: option_while'.intros\n      dest: option_while'_inj\n      elim: option_while'.cases)"], ["", "lemma option_while_rule:\n  assumes \"option_while C B s = Some s'\"\n  assumes \"I s\"\n  assumes istep: \"\\<And>s s'. C s \\<Longrightarrow> I s \\<Longrightarrow> B s = Some s' \\<Longrightarrow> I s'\"\n  shows \"I s' \\<and> \\<not> C s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "fix ss ss'"], ["proof (state)\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "assume \"(ss, ss') \\<in> option_while' C B\" \"ss = Some s\" \"ss' = Some s'\""], ["proof (state)\nthis:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "then"], ["proof (chain)\npicking this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'", "have ?thesis"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "using \\<open>I s\\<close>"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'\n  I s\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "by (induct arbitrary: s) (auto intro: istep)"], ["proof (state)\nthis:\n  I s' \\<and> \\<not> C s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?ss2, ?ss'2) \\<in> option_while' C B; ?ss2 = Some s;\n   ?ss'2 = Some s'\\<rbrakk>\n  \\<Longrightarrow> I s' \\<and> \\<not> C s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?ss2, ?ss'2) \\<in> option_while' C B; ?ss2 = Some s;\n   ?ss'2 = Some s'\\<rbrakk>\n  \\<Longrightarrow> I s' \\<and> \\<not> C s'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?ss2, ?ss'2) \\<in> option_while' C B; ?ss2 = Some s;\n   ?ss'2 = Some s'\\<rbrakk>\n  \\<Longrightarrow> I s' \\<and> \\<not> C s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?ss2, ?ss'2) \\<in> option_while' C B; ?ss2 = Some s;\n   ?ss'2 = Some s'\\<rbrakk>\n  \\<Longrightarrow> I s' \\<and> \\<not> C s'\n  option_while C B s = Some s'\n\ngoal (1 subgoal):\n 1. I s' \\<and> \\<not> C s'", "by (auto simp: option_while_def option_while'_THE split: if_split_asm)"], ["proof (state)\nthis:\n  I s' \\<and> \\<not> C s'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma option_while'_term:\n  assumes \"I r\"\n  assumes \"wf M\"\n  assumes step_less: \"\\<And>r r'. \\<lbrakk>I r; C r; B r = Some r'\\<rbrakk> \\<Longrightarrow> (r',r) \\<in> M\"\n  assumes step_I: \"\\<And>r r'. \\<lbrakk>I r; C r; B r = Some r'\\<rbrakk> \\<Longrightarrow> I r'\"\n  obtains sr' where \"(Some r, sr') \\<in> option_while' C B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>sr'.\n        (Some r, sr') \\<in> option_while' C B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "apply atomize_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "using assms(2,1)"], ["proof (prove)\nusing this:\n  wf M\n  I r\n\ngoal (1 subgoal):\n 1. \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "proof induct"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> M; I y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sr'.\n  (Some y, sr') \\<in> option_while' C B;\n        I x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some x, sr') \\<in> option_while' C B", "case (less r)"], ["proof (state)\nthis:\n  \\<lbrakk>(?y, r) \\<in> M; I ?y\\<rbrakk>\n  \\<Longrightarrow> \\<exists>sr'. (Some ?y, sr') \\<in> option_while' C B\n  I r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>(y, x) \\<in> M; I y\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>sr'.\n  (Some y, sr') \\<in> option_while' C B;\n        I x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some x, sr') \\<in> option_while' C B", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "proof (cases \"C r\" \"B r\" rule: bool.exhaust[case_product option.exhaust])"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<And>x2__.\n       \\<lbrakk>C r = True; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 4. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "case (True_Some r')"], ["proof (state)\nthis:\n  C r = True\n  B r = Some r'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<And>x2__.\n       \\<lbrakk>C r = True; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 4. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "then"], ["proof (chain)\npicking this:\n  C r = True\n  B r = Some r'", "have \"(r',r) \\<in> M\" \"I r'\""], ["proof (prove)\nusing this:\n  C r = True\n  B r = Some r'\n\ngoal (1 subgoal):\n 1. (r', r) \\<in> M &&& I r'", "by (auto intro: less step_less step_I)"], ["proof (state)\nthis:\n  (r', r) \\<in> M\n  I r'\n\ngoal (4 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<And>x2__.\n       \\<lbrakk>C r = True; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 4. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "then"], ["proof (chain)\npicking this:\n  (r', r) \\<in> M\n  I r'", "obtain sr' where \"(Some r', sr') \\<in> option_while' C B\""], ["proof (prove)\nusing this:\n  (r', r) \\<in> M\n  I r'\n\ngoal (1 subgoal):\n 1. (\\<And>sr'.\n        (Some r', sr') \\<in> option_while' C B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by atomize_elim (rule less)"], ["proof (state)\nthis:\n  (Some r', sr') \\<in> option_while' C B\n\ngoal (4 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<And>x2__.\n       \\<lbrakk>C r = True; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 4. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "then"], ["proof (chain)\npicking this:\n  (Some r', sr') \\<in> option_while' C B", "have \"(Some r, sr') \\<in> option_while' C B\""], ["proof (prove)\nusing this:\n  (Some r', sr') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. (Some r, sr') \\<in> option_while' C B", "using True_Some"], ["proof (prove)\nusing this:\n  (Some r', sr') \\<in> option_while' C B\n  C r = True\n  B r = Some r'\n\ngoal (1 subgoal):\n 1. (Some r, sr') \\<in> option_while' C B", "by (auto intro: option_while'.intros)"], ["proof (state)\nthis:\n  (Some r, sr') \\<in> option_while' C B\n\ngoal (4 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<And>x2__.\n       \\<lbrakk>C r = True; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 4. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "then"], ["proof (chain)\npicking this:\n  (Some r, sr') \\<in> option_while' C B", "show ?thesis"], ["proof (prove)\nusing this:\n  (Some r, sr') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", ".."], ["proof (state)\nthis:\n  \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n\ngoal (3 subgoals):\n 1. \\<lbrakk>C r = True; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 2. \\<lbrakk>C r = False; B r = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n 3. \\<And>x2__.\n       \\<lbrakk>C r = False; B r = Some x2__\\<rbrakk>\n       \\<Longrightarrow> \\<exists>sr'. (Some r, sr') \\<in> option_while' C B", "qed (auto intro: option_while'.intros)"], ["proof (state)\nthis:\n  \\<exists>sr'. (Some r, sr') \\<in> option_while' C B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma option_while_rule':\n  assumes \"option_while C B s = ss'\"\n  assumes \"wf M\"\n  assumes \"I (Some s)\"\n  assumes less: \"\\<And>s s'. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = Some s' \\<Longrightarrow> (s', s) \\<in> M\"\n  assumes step: \"\\<And>s s'. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = Some s' \\<Longrightarrow> I (Some s')\"\n  assumes final: \"\\<And>s. C s \\<Longrightarrow> I (Some s) \\<Longrightarrow> B s = None \\<Longrightarrow> I None\"\n  shows \"I ss' \\<and> (case ss' of Some s' \\<Rightarrow> \\<not> C s' | _ \\<Rightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "define ss where \"ss = Some s\""], ["proof (state)\nthis:\n  ss = Some s\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "obtain ss1' where \"(Some s, ss1') \\<in> option_while' C B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ss1'.\n        (Some s, ss1') \\<in> option_while' C B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms(3,2,4,5)"], ["proof (prove)\nusing this:\n  I (Some s)\n  wf M\n  \\<lbrakk>C ?s; I (Some ?s); B ?s = Some ?s'\\<rbrakk>\n  \\<Longrightarrow> (?s', ?s) \\<in> M\n  \\<lbrakk>C ?s; I (Some ?s); B ?s = Some ?s'\\<rbrakk>\n  \\<Longrightarrow> I (Some ?s')\n\ngoal (1 subgoal):\n 1. (\\<And>ss1'.\n        (Some s, ss1') \\<in> option_while' C B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule option_while'_term)"], ["proof (state)\nthis:\n  (Some s, ss1') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "then"], ["proof (chain)\npicking this:\n  (Some s, ss1') \\<in> option_while' C B", "have *: \"(ss, ss') \\<in> option_while' C B\""], ["proof (prove)\nusing this:\n  (Some s, ss1') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. (ss, ss') \\<in> option_while' C B", "using \\<open>option_while C B s = ss'\\<close>"], ["proof (prove)\nusing this:\n  (Some s, ss1') \\<in> option_while' C B\n  option_while C B s = ss'\n\ngoal (1 subgoal):\n 1. (ss, ss') \\<in> option_while' C B", "by (auto simp: option_while_simps ss_def)"], ["proof (state)\nthis:\n  (ss, ss') \\<in> option_while' C B\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "proof (cases ss')"], ["proof (state)\ngoal (2 subgoals):\n 1. ss' = None \\<Longrightarrow>\n    I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')\n 2. \\<And>a.\n       ss' = Some a \\<Longrightarrow>\n       I ss' \\<and>\n       (case ss' of None \\<Rightarrow> True\n        | Some s' \\<Rightarrow> \\<not> C s')", "case (Some s')"], ["proof (state)\nthis:\n  ss' = Some s'\n\ngoal (2 subgoals):\n 1. ss' = None \\<Longrightarrow>\n    I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')\n 2. \\<And>a.\n       ss' = Some a \\<Longrightarrow>\n       I ss' \\<and>\n       (case ss' of None \\<Rightarrow> True\n        | Some s' \\<Rightarrow> \\<not> C s')", "with * ss_def"], ["proof (chain)\npicking this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'", "show ?thesis"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "using \\<open>I _\\<close>"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = Some s'\n  I (Some s)\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "by (induct arbitrary:s) (auto intro: step)"], ["proof (state)\nthis:\n  I ss' \\<and>\n  (case ss' of None \\<Rightarrow> True | Some s' \\<Rightarrow> \\<not> C s')\n\ngoal (1 subgoal):\n 1. ss' = None \\<Longrightarrow>\n    I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ss' = None \\<Longrightarrow>\n    I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "case None"], ["proof (state)\nthis:\n  ss' = None\n\ngoal (1 subgoal):\n 1. ss' = None \\<Longrightarrow>\n    I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "with * ss_def"], ["proof (chain)\npicking this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = None", "show ?thesis"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = None\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "using \\<open>I _\\<close>"], ["proof (prove)\nusing this:\n  (ss, ss') \\<in> option_while' C B\n  ss = Some s\n  ss' = None\n  I (Some s)\n\ngoal (1 subgoal):\n 1. I ss' \\<and>\n    (case ss' of None \\<Rightarrow> True\n     | Some s' \\<Rightarrow> \\<not> C s')", "by (induct arbitrary:s) (auto intro: step final)"], ["proof (state)\nthis:\n  I ss' \\<and>\n  (case ss' of None \\<Rightarrow> True | Some s' \\<Rightarrow> \\<not> C s')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  I ss' \\<and>\n  (case ss' of None \\<Rightarrow> True | Some s' \\<Rightarrow> \\<not> C s')\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Lift @{term option_while} to the @{typ \"('a,'s) lookup\"} monad\\<close>"], ["", "definition\n  owhile :: \"('a \\<Rightarrow> 's \\<Rightarrow> bool) \\<Rightarrow> ('a \\<Rightarrow> ('s,'a) lookup) \\<Rightarrow> 'a \\<Rightarrow> ('s,'a) lookup\"\nwhere\n \"owhile c b a \\<equiv> \\<lambda>s. option_while (\\<lambda>a. c a s) (\\<lambda>a. b a s) a\""], ["", "lemma owhile_unroll:\n  \"owhile C B r = ocondition (C r) (B r |>> owhile C B) (oreturn r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. owhile C B r = ocondition (C r) (B r |>> owhile C B) (oreturn r)", "by (auto simp: ocondition_def obind_def oreturn_def owhile_def\n           option_while_simps K_def split: option.split)"], ["", "text \\<open>rule for terminating loops\\<close>"], ["", "lemma owhile_rule:\n  assumes \"I r s\"\n  assumes \"wf M\"\n  assumes less: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = Some r'\\<rbrakk> \\<Longrightarrow> (r',r) \\<in> M\"\n  assumes step: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = Some r'\\<rbrakk> \\<Longrightarrow> I r' s\"\n  assumes fail: \"\\<And>r r'. \\<lbrakk>I r s; C r s; B r s = None\\<rbrakk> \\<Longrightarrow> Q None\"\n  assumes final: \"\\<And>r. \\<lbrakk>I r s; \\<not>C r s\\<rbrakk> \\<Longrightarrow> Q (Some r)\"\n  shows \"Q (owhile C B r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q (owhile C B r s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Q (owhile C B r s)", "let ?rs' = \"owhile C B r s\""], ["proof (state)\ngoal (1 subgoal):\n 1. Q (owhile C B r s)", "have \"(case ?rs' of Some r \\<Rightarrow> I r s | _ \\<Rightarrow> Q None)\n      \\<and> (case ?rs' of Some r' \\<Rightarrow> \\<not> C r' s | _ \\<Rightarrow> True)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case owhile C B r s of None \\<Rightarrow> Q None\n     | Some r \\<Rightarrow> I r s) \\<and>\n    (case owhile C B r s of None \\<Rightarrow> True\n     | Some r' \\<Rightarrow> \\<not> C r' s)", "by (rule option_while_rule'[where B=\"\\<lambda>r. B r s\" and s=r, OF _ \\<open>wf _\\<close>])\n       (auto simp: owhile_def intro: assms)"], ["proof (state)\nthis:\n  (case owhile C B r s of None \\<Rightarrow> Q None\n   | Some r \\<Rightarrow> I r s) \\<and>\n  (case owhile C B r s of None \\<Rightarrow> True\n   | Some r' \\<Rightarrow> \\<not> C r' s)\n\ngoal (1 subgoal):\n 1. Q (owhile C B r s)", "then"], ["proof (chain)\npicking this:\n  (case owhile C B r s of None \\<Rightarrow> Q None\n   | Some r \\<Rightarrow> I r s) \\<and>\n  (case owhile C B r s of None \\<Rightarrow> True\n   | Some r' \\<Rightarrow> \\<not> C r' s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (case owhile C B r s of None \\<Rightarrow> Q None\n   | Some r \\<Rightarrow> I r s) \\<and>\n  (case owhile C B r s of None \\<Rightarrow> True\n   | Some r' \\<Rightarrow> \\<not> C r' s)\n\ngoal (1 subgoal):\n 1. Q (owhile C B r s)", "by (auto intro: final split: option.split_asm)"], ["proof (state)\nthis:\n  Q (owhile C B r s)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}