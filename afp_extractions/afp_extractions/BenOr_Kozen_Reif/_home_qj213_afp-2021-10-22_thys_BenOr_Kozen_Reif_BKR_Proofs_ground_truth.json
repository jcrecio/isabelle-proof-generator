{"file_name": "/home/qj213/afp-2021-10-22/thys/BenOr_Kozen_Reif/BKR_Proofs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/BenOr_Kozen_Reif", "problem_names": ["lemma mat_base_case:\n  shows \"matrix_A [[1],[-1]] [[],[0]] = (mat_of_rows_list 2 [[1, 1], [1, -1]])\"", "lemma base_case_sgas:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p [q]) \\<subseteq> {[1], [- 1]}\"", "lemma base_case_sgas_alt:\n  fixes p:: \"real poly\"\n  fixes qs:: \"real poly list\"\n  assumes len1: \"length qs = 1\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"\\<forall>q. (List.member qs q) \\<longrightarrow> coprime p q\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> {[1], [- 1]}\"", "lemma base_case_satisfy_equation:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"satisfy_equation p [q] [[],[0]] [[1],[-1]]\"", "lemma base_case_satisfy_equation_alt:\n  fixes p:: \"real poly\"\n  fixes qs:: \"real poly list\"\n  assumes len1: \"length qs = 1\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"\\<forall>q. (List.member qs q) \\<longrightarrow> coprime p q\"\n  shows \"satisfy_equation p qs [[],[0]] [[1],[-1]]\"", "lemma base_case_matrix_eq:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"(mult_mat_vec (mat_of_rows_list 2 [[1, 1], [1, -1]]) (construct_lhs_vector p [q] [[1],[-1]]) = \n    (construct_rhs_vector p [q] [[],[0]]))\"", "lemma less_two:\n  shows \"j < Suc (Suc 0) \\<longleftrightarrow> j = 0 \\<or> j = 1\"", "lemma inverse_mat_base_case: \n  shows \"inverts_mat (mat_of_rows_list 2 [[1/2, 1/2], [1/2, -(1/2)]]::rat mat) (mat_of_rows_list 2 [[1, 1], [1, -1]]::rat mat)\"", "lemma inverse_mat_base_case_2: \n  shows \"inverts_mat (mat_of_rows_list 2 [[1, 1], [1, -1]]::rat mat) (mat_of_rows_list 2 [[1/2, 1/2], [1/2, -(1/2)]]::rat mat) \"", "lemma base_case_invertible_mat: \n  shows \"invertible_mat (matrix_A [[1], [- 1]] [[], [0]])\"", "lemma signs_smash_property:\n  fixes signs1 signs2 :: \"'a list list\"\n  fixes a b:: \"nat\"\n  shows \"\\<forall> (elem :: 'a list). (elem \\<in> (set (signs_smash signs1 signs2)) \\<longrightarrow> \n    (\\<exists> n m :: nat. \n      elem = ((nth signs1 n)@(nth signs2 m))))\"", "lemma signs_smash_property_set:\n  fixes signs1 signs2 :: \"'a list list\"\n  fixes a b:: \"nat\"\n  shows \"\\<forall> (elem :: 'a list). (elem \\<in> (set (signs_smash signs1 signs2)) \\<longrightarrow> \n    (\\<exists> (elem1::'a list). \\<exists> (elem2::'a list). \n      (elem1 \\<in> set(signs1) \\<and> elem2 \\<in> set(signs2) \\<and> elem = (elem1@elem2))))\"", "lemma subsets_smash_property:\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes n:: \"nat\"\n  shows \"\\<forall> (elem :: nat list). (List.member (subsets_smash n subsets1 subsets2) elem) \\<longrightarrow> \n    (\\<exists> (elem1::nat list). \\<exists> (elem2::nat list).\n      (elem1 \\<in> set(subsets1) \\<and> elem2 \\<in> set(subsets2) \\<and> elem = (elem1 @ ((map ((+) n) elem2)))))\"", "lemma list_constr_append:\n  \"list_constr a n \\<and> list_constr b n \\<longrightarrow> list_constr (a@b) n\"", "lemma well_def_step: \n  fixes qs1 qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  assumes well_def_subsets1: \"all_list_constr (subsets1) (length qs1)\"\n  assumes well_def_subsets2: \"all_list_constr (subsets2) (length qs2)\"\n  shows \"all_list_constr ((subsets_smash (length qs1) subsets1 subsets2))\n     (length (qs1 @ qs2))\"", "lemma well_def_signs_step: \n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes \"length qs1 > 0\"\n  assumes \"length qs2 > 0\"\n  assumes well_def1: \"well_def_signs (length qs1) signs1\"\n  assumes well_def2: \"well_def_signs (length qs2) signs2\"\n  shows \"well_def_signs (length (qs1@qs2)) (signs_smash signs1 signs2)\"", "lemma distinct_map_append:\n  assumes \"distinct ls\"\n  shows \"distinct (map ((@) xs) ls)\"", "lemma length_eq_append:\n  assumes \"length y = length b\"\n  shows \"(x @ y = a @ b) \\<longleftrightarrow> x=a \\<and> y = b\"", "lemma distinct_step:\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes well_def1: \"well_def_signs n1 signs1\"\n  assumes well_def2: \"well_def_signs n2 signs2\"\n  assumes distinct1: \"distinct signs1\"\n  assumes distinct2: \"distinct signs2\"\n  shows \"distinct (signs_smash signs1 signs2)\"", "lemma subset_smash_signs: \n  fixes a1 b1 a2 b2:: \"rat list list\"\n  assumes sub1: \"set a1 \\<subseteq> set a2\"\n  assumes sub2: \"set b1 \\<subseteq> set b2\"\n  shows \"set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)\"", "lemma subset_helper:\n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  shows \"\\<forall> x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)). \n        \\<exists> x1 \\<in> set (characterize_consistent_signs_at_roots_copr p qs1). \n        \\<exists> x2 \\<in> set (characterize_consistent_signs_at_roots_copr p qs2).\n        x = x1@x2\"", "lemma subset_step:  \n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes csa1: \"set (characterize_consistent_signs_at_roots_copr p qs1) \\<subseteq> set (signs1)\"\n  assumes csa2: \"set (characterize_consistent_signs_at_roots_copr p qs2) \\<subseteq> set (signs2)\"  \n  shows \"set (characterize_consistent_signs_at_roots_copr p\n          (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)\"", "lemma dim_row_mat_of_rows_list[simp]:\n  shows \"dim_row (mat_of_rows_list nr ls) = length ls\"", "lemma dim_col_mat_of_rows_list[simp]:\n  shows \"dim_col (mat_of_rows_list nr ls) = nr\"", "lemma dim_row_matrix_A[simp]:\n  shows \"dim_row (matrix_A signs subsets) = length subsets\"", "lemma dim_col_matrix_A[simp]:\n  shows \"dim_col (matrix_A signs subsets) = length signs\"", "lemma length_signs_smash:\n  shows\n    \"length (signs_smash signs1 signs2) = length signs1 * length signs2\"", "lemma length_subsets_smash:\n  shows\n    \"length (subsets_smash n subs1 subs2) = length subs1 * length subs2\"", "lemma length_eq_concat:\n  assumes \"\\<And>x. x \\<in> set ls \\<Longrightarrow> length x = n\"\n  assumes \"i < n * length ls\"\n  shows \"concat ls ! i = ls ! (i div n) ! (i mod n)\"", "lemma z_append:\n  assumes \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length as\"\n  shows \"z (xs @ (map ((+) (length as)) ys)) (as @ bs) = z xs as * z ys bs\"", "lemma matrix_construction_is_kronecker_product: \n  fixes qs1 :: \"real poly list\"\n  fixes subs1 subs2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\"\n    (* n1 is the number of polynomials in the \"1\" sets *)\n  assumes \"\\<And>l i. l \\<in> set subs1 \\<Longrightarrow> i \\<in> set l \\<Longrightarrow> i < n1\"\n  assumes \"\\<And>j. j \\<in> set signs1 \\<Longrightarrow> length j = n1\"\n  shows \"\n    (matrix_A (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2)) =\n    kronecker_product (matrix_A signs1 subs1) (matrix_A signs2 subs2)\"", "lemma inductive_step:\n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes welldefined_signs1: \"well_def_signs (length qs1) signs1\"\n  assumes welldefined_signs2: \"well_def_signs (length qs2) signs2\"\n  assumes distinct_signs1: \"distinct signs1\"\n  assumes distinct_signs2: \"distinct signs2\"\n  assumes all_info1: \"set (characterize_consistent_signs_at_roots_copr p qs1) \\<subseteq> set(signs1)\"\n  assumes all_info2: \"set (characterize_consistent_signs_at_roots_copr p qs2) \\<subseteq> set(signs2)\"\n  assumes welldefined_subsets1: \"all_list_constr (subsets1) (length qs1)\"\n  assumes welldefined_subsets2: \"all_list_constr (subsets2) (length qs2)\"\n  assumes invertibleMtx1: \"invertible_mat (matrix_A signs1 subsets1)\"\n  assumes invertibleMtx2: \"invertible_mat (matrix_A signs2 subsets2)\"\n  shows \"satisfy_equation p (qs1@qs2) (subsets_smash (length qs1) subsets1 subsets2) (signs_smash signs1 signs2) \n        \\<and> invertible_mat (matrix_A (signs_smash signs1 signs2) (subsets_smash (length qs1) subsets1 subsets2))\"", "lemma reduction_signs_is_get_signs: \"reduction_signs p qs signs subsets m =  get_signs (reduce_system p (qs, (m, (subsets, signs))))\"", "lemma reduction_subsets_is_get_subsets: \"reduction_subsets p qs signs subsets m =  get_subsets (reduce_system p (qs, (m, (subsets, signs))))\"", "lemma find_zeros_from_vec_prop:\n  fixes input_vec :: \"rat vec\"\n  shows \"\\<forall>n < (dim_vec input_vec). ((input_vec $ n \\<noteq> 0) \\<longleftrightarrow>\n         List.member (find_nonzeros_from_input_vec input_vec) n)\"", "lemma take_indices_lem:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes arb_list :: \"'a list list\"\n  fixes index_list :: \"nat list\" \n  fixes n:: \"nat\"\n  assumes lest: \"n < length (take_indices arb_list index_list)\"\n  assumes well_def: \"\\<forall>q.(List.member index_list q \\<longrightarrow> q < length arb_list)\"\n  shows \"\\<exists>k<length arb_list.\n            (take_indices arb_list index_list) ! n =  arb_list ! k\"", "lemma invertible_means_mult_id:\n  fixes A:: \"'a::field mat\"\n  assumes assm: \"invertible_mat A\"\n  shows \"matr_option (dim_row A)\n     (mat_inverse (A))*A = 1\\<^sub>m (dim_row A)\"", "lemma dim_invertible:\n  fixes A:: \"'a::field mat\"\n  fixes n:: \"nat\"\n  assumes assm: \"invertible_mat A\"\n  assumes dim: \"A \\<in> carrier_mat n n\"\n  shows \"matr_option (dim_row A)\n     (mat_inverse (A)) \\<in> carrier_mat n n\"", "lemma mult_assoc:\n  fixes A B:: \"rat mat\"\n  fixes v:: \"rat vec\"\n  fixes n:: \"nat\"\n  assumes \"A \\<in> carrier_mat n n\"\n  assumes \"B \\<in> carrier_mat n n\"\n  assumes \"dim_vec v = n\"\n  shows \"A *\\<^sub>v (mult_mat_vec B v) =  (A*B)*\\<^sub>v v\"", "lemma size_of_mat:\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  shows \"(matrix_A signs subsets) \\<in> carrier_mat (length subsets) (length signs)\"", "lemma size_of_lhs: \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes signs :: \"rat list list\" \n  shows \"dim_vec (construct_lhs_vector p qs signs) = length signs\"", "lemma size_of_rhs: \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\" \n  shows \"dim_vec (construct_rhs_vector p qs subsets) = length subsets\"", "lemma same_size:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"length subsets = length signs\"", "lemma mat_equal_list_lem:\n  fixes A:: \"'a::field mat\"\n  fixes B:: \"'a::field mat\"\n  shows \"(dim_row A = dim_row B \\<and> dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B)\n    \\<Longrightarrow> A = B\"", "lemma mat_inverse_same: \"mat_inverse_var A = mat_inverse A\"", "lemma construct_lhs_matches_solve_for_lhs:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"(construct_lhs_vector p qs signs) = solve_for_lhs p qs subsets (matrix_A signs subsets)\"", "lemma reduction_signs_set_helper_lemma:\n  fixes A:: \"rat list set\"\n  fixes C:: \"rat vec\"\n  fixes B:: \"rat list list\"\n  assumes \"dim_vec C = length B\"\n  assumes sub: \"A \\<subseteq> set(B)\"\n  assumes not_in_hyp: \"\\<forall> n < dim_vec C. C $ n = 0 \\<longrightarrow> (nth B n) \\<notin> A\"\n  shows \"A \\<subseteq> set (take_indices B\n             (find_nonzeros_from_input_vec C))\"", "lemma reduction_signs_set_helper_lemma2:\n  fixes A:: \"rat list set\"\n  fixes C:: \"rat vec\"\n  fixes B:: \"rat list list\"\n  assumes dist: \"distinct B\"\n  assumes eq_len: \"dim_vec C = length B\"\n  assumes sub: \"A \\<subseteq> set(B)\"\n  assumes not_in_hyp: \"\\<forall> n < dim_vec C. C $ n \\<noteq> 0 \\<longrightarrow> (nth B n) \\<in> A\"\n  shows \"set (take_indices B\n             (find_nonzeros_from_input_vec C)) \\<subseteq> A\"", "lemma reduction_doesnt_break_things_signs:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(reduction_signs p qs signs subsets (matrix_A signs subsets))\"", "lemma reduction_deletes_bad_sign_conds:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) = set(reduction_signs p qs signs subsets (matrix_A signs subsets))\"", "theorem reduce_system_sign_conditions:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))) = set (characterize_consistent_signs_at_roots_copr p qs)\"", "lemma rows_to_keep_lem:\n  fixes A:: \"('a::field) mat\"\n  shows \"\\<And>ell. ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A\"", "lemma reduce_system_matrix_equation_preserved:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs: \"well_def_signs (length qs) signs\"\n  assumes welldefined_subsets: \"all_list_constr (subsets) (length qs)\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"satisfy_equation p qs (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\"", "lemma reduce_system_matrix_signs_helper_aux:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length signs\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"alt_matrix_A (take_indices signs S) subsets = take_cols_from_matrix (alt_matrix_A signs subsets) S\"", "lemma reduce_system_matrix_signs_helper:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length signs\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"matrix_A (take_indices signs S) subsets = take_cols_from_matrix (matrix_A signs subsets) S\"", "lemma reduce_system_matrix_subsets_helper_aux:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes inv: \"length subsets \\<ge> length signs\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length subsets\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"alt_matrix_A signs (take_indices subsets S) = take_rows_from_matrix (alt_matrix_A signs subsets) S\"", "lemma reduce_system_matrix_subsets_helper:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes inv: \"length subsets \\<ge> length signs\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length subsets\"\n  shows \"matrix_A signs (take_indices subsets S) = take_rows_from_matrix (matrix_A signs subsets) S\"", "lemma reduce_system_matrix_match:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"matrix_A (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))) = \n  (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\"", "lemma well_def_find_zeros_from_lhs_vec:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"(\\<And>j. j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<Longrightarrow>\n          j < length (cols (matrix_A signs subsets)))\"", "lemma take_cols_subsets_og_cols:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"set (take_indices (cols (matrix_A signs subsets))\n          (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\n    \\<subseteq> set (cols (matrix_A signs subsets))\"", "lemma reduction_doesnt_break_things_invertibility_step1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"vec_space.rank (length signs) (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets))) =\n    (length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\"", "lemma rechar_take_cols: \"take_cols_var A B = take_cols_from_matrix A B\"", "lemma rows_and_cols_transpose: \"rows M = cols M\\<^sup>T\"", "lemma take_rows_and_take_cols:  \"(take_rows_from_matrix M r) = (take_cols_from_matrix M\\<^sup>T r)\\<^sup>T\"", "lemma reduction_doesnt_break_things_invertibility:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"invertible_mat (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\"", "lemma reduction_doesnt_break_length_signs:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes length_init : \"\\<forall> x\\<in> set(signs). length x = length qs\"\n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"\\<forall>x \\<in> set(reduction_signs p qs signs subsets (matrix_A signs subsets)). \n    length x = length qs\"", "lemma reduction_signs_are_distinct:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  assumes distinct_init: \"distinct signs\"\n  shows \"distinct (reduction_signs p qs signs subsets (matrix_A signs subsets))\"", "lemma reduction_doesnt_break_subsets:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes length_init : \"all_list_constr subsets (length qs)\"\n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"all_list_constr (reduction_subsets p qs signs subsets (matrix_A signs subsets)) (length qs)\"", "lemma combining_to_smash:  \"combine_systems p (qs1, m1, (sub1, sgn1)) (qs2, m2, (sub2, sgn2))\n =  smash_systems p qs1 qs2 sub1 sub2 sgn1 sgn2 m1 m2\"", "lemma getter_functions: \"calculate_data p qs = (get_matrix (calculate_data p qs), (get_subsets (calculate_data p qs), get_signs (calculate_data p qs))) \"", "lemma combining_sys_satisfies_properties_helper:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\" \n  fixes matrix1 matrix2:: \"rat mat\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys1: \"satisfies_properties p qs1 subsets1 signs1 matrix1\"\n  assumes satisfies_properties_sys2: \"satisfies_properties p qs2 subsets2 signs2 matrix2\"\n  shows  \"satisfies_properties p (qs1@qs2) (get_subsets (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2))))))) \n  (get_signs (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2))))))) \n  (get_matrix (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2)))))))\"", "lemma combining_sys_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys1: \"satisfies_properties p qs1 (get_subsets (calculate_data p qs1)) (get_signs (calculate_data p qs1)) (get_matrix (calculate_data p qs1))\"\n  assumes satisfies_properties_sys2: \"satisfies_properties p qs2 (get_subsets (calculate_data p qs2)) (get_signs (calculate_data p qs2)) (get_matrix (calculate_data p qs2))\"\n  shows  \"satisfies_properties p (qs1@qs2) (get_subsets (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \n  (get_signs (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \n  (get_matrix (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\"", "lemma reducing_sys_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes matrix:: \"rat mat\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv: \"length qs > 0\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys: \"satisfies_properties p qs subsets signs matrix\"\n  shows  \"satisfies_properties p qs (get_subsets (reduce_system p (qs,matrix,subsets,signs)))\n  (get_signs (reduce_system p (qs,matrix,subsets,signs)))\n  (get_matrix (reduce_system p (qs,matrix,subsets,signs)))\"", "lemma  length_1_calculate_data_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes len1: \"length qs = 1\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\"", "lemma append_not_distinct_helper: \"(List.member l1 m \\<and> List.member l2 m) \\<longrightarrow> (distinct (l1@l2) = False)\"", "lemma  calculate_data_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  shows \"(p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) )\n    \\<longrightarrow> satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\"", "lemma find_consistent_signs_at_roots_len1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes len1: \"length qs = 1\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"set (find_consistent_signs_at_roots p qs) = set (characterize_consistent_signs_at_roots_copr p qs)\"", "lemma smaller_sys_are_good:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes \"set(find_consistent_signs_at_roots p qs1) = set(characterize_consistent_signs_at_roots_copr p qs1)\"\n  assumes \"set(find_consistent_signs_at_roots p qs2) = set(characterize_consistent_signs_at_roots_copr p qs2)\"\n  shows \"set(snd(snd(reduce_system p (combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\n    = set(characterize_consistent_signs_at_roots_copr p (qs1@qs2))\"", "lemma find_consistent_signs_at_roots_1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  shows \"(p \\<noteq> 0 \\<and> length qs > 0 \\<and>\n    (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q)))) \\<longrightarrow> \n    set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots_copr p qs)\"", "lemma find_consistent_signs_at_roots_0:\n  fixes p:: \"real poly\"\n  assumes \"p \\<noteq> 0\"\n  shows \"set(find_consistent_signs_at_roots p []) =\n         set(characterize_consistent_signs_at_roots_copr p [])\"", "lemma find_consistent_signs_at_roots_copr:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  assumes \"p \\<noteq> 0\"\n  assumes \"\\<And>q. q \\<in> set qs \\<Longrightarrow> coprime p q\"\n  shows \"set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots_copr p qs)\"", "lemma find_consistent_signs_at_roots:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  assumes \"p \\<noteq> 0\"\n  assumes \"\\<And>q. q \\<in> set qs \\<Longrightarrow> coprime p q\"\n  shows \"set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots p qs)\""], "translations": [["", "lemma mat_base_case:\n  shows \"matrix_A [[1],[-1]] [[],[0]] = (mat_of_rows_list 2 [[1, 1], [1, -1]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]", "unfolding matrix_A_def mtx_row_def z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows_list (length [[1], [- 1]])\n     (map (\\<lambda>index_list.\n              map (\\<lambda>sign_asg.\n                      prod_list (map ((!) sign_asg) index_list))\n               [[1], [- 1]])\n       [[], [0]]) =\n    mat_of_rows_list 2 [[1, 1], [1, - 1]]", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows_list (Suc (Suc 0)) [[1, 1], [1, - 1]] =\n    mat_of_rows_list 2 [[1, 1], [1, - 1]]", "by (simp add: numeral_2_eq_2)"], ["", "lemma base_case_sgas:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p [q]) \\<subseteq> {[1], [- 1]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p [q])\n    \\<subseteq> {[1], [- 1]}", "unfolding characterize_consistent_signs_at_roots_copr_def consistent_sign_vec_copr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups\n          (map (\\<lambda>x.\n                   map (\\<lambda>q. if 0 < poly q x then 1 else - 1) [q])\n            (characterize_root_list_p p)))\n    \\<subseteq> {[1], [- 1]}", "by auto"], ["", "lemma base_case_sgas_alt:\n  fixes p:: \"real poly\"\n  fixes qs:: \"real poly list\"\n  assumes len1: \"length qs = 1\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"\\<forall>q. (List.member qs q) \\<longrightarrow> coprime p q\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> {[1], [- 1]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> {[1], [- 1]}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> {[1], [- 1]}", "have ex_q: \"\\<exists>(q::real poly). qs = [q]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using len1"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using length_Suc_conv[of qs 0]"], ["proof (prove)\nusing this:\n  length qs = 1\n  (length qs = Suc 0) = (\\<exists>y ys. qs = y # ys \\<and> length ys = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "by auto"], ["proof (state)\nthis:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> {[1], [- 1]}", "then"], ["proof (chain)\npicking this:\n  \\<exists>q. qs = [q]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> {[1], [- 1]}", "using base_case_sgas nonzero rel_prime"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          [?q])\n                    \\<subseteq> {[1], [- 1]}\n  p \\<noteq> 0\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> {[1], [- 1]}", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x q.\n       \\<lbrakk>\\<And>p q.\n                   \\<lbrakk>p \\<noteq> 0; coprime p q\\<rbrakk>\n                   \\<Longrightarrow> set\n(characterize_consistent_signs_at_roots_copr p [q])\n                                     \\<subseteq> {[1], [- 1]};\n        p \\<noteq> 0;\n        \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p [q]);\n        x \\<noteq> [1]; qs = [q]\\<rbrakk>\n       \\<Longrightarrow> x = [- 1]", "using characterize_consistent_signs_at_roots_copr_def consistent_sign_vec_copr_def"], ["proof (prove)\nusing this:\n  characterize_consistent_signs_at_roots_copr ?p ?qss =\n  remdups\n   (map (consistent_sign_vec_copr ?qss) (characterize_root_list_p ?p))\n  consistent_sign_vec_copr ?qs ?x \\<equiv>\n  map (\\<lambda>q. if 0 < poly q ?x then 1 else - 1) ?qs\n\ngoal (1 subgoal):\n 1. \\<And>x q.\n       \\<lbrakk>\\<And>p q.\n                   \\<lbrakk>p \\<noteq> 0; coprime p q\\<rbrakk>\n                   \\<Longrightarrow> set\n(characterize_consistent_signs_at_roots_copr p [q])\n                                     \\<subseteq> {[1], [- 1]};\n        p \\<noteq> 0;\n        \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p [q]);\n        x \\<noteq> [1]; qs = [q]\\<rbrakk>\n       \\<Longrightarrow> x = [- 1]", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> {[1], [- 1]}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma base_case_satisfy_equation:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"satisfy_equation p [q] [[],[0]] [[1],[-1]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "have h1: \"set (characterize_consistent_signs_at_roots_copr p [q]) \\<subseteq> {[1], [- 1]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p [q])\n    \\<subseteq> {[1], [- 1]}", "using base_case_sgas assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          [?q])\n                    \\<subseteq> {[1], [- 1]}\n  p \\<noteq> 0\n  coprime p q\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p [q])\n    \\<subseteq> {[1], [- 1]}", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p [q])\n  \\<subseteq> {[1], [- 1]}\n\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "have h2: \" \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa", "using rel_prime"], ["proof (prove)\nusing this:\n  coprime p q\n\ngoal (1 subgoal):\n 1. \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa", "by (simp add: member_rec(1) member_rec(2))"], ["proof (state)\nthis:\n  \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa\n\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "have h3: \"all_list_constr [[], [0]] (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr [[], [0]] (Suc 0)", "unfolding all_list_constr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member [[], [0]] x \\<longrightarrow> list_constr x (Suc 0)", "by (simp add: list_constr_def member_def)"], ["proof (state)\nthis:\n  all_list_constr [[], [0]] (Suc 0)\n\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "then"], ["proof (chain)\npicking this:\n  all_list_constr [[], [0]] (Suc 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  all_list_constr [[], [0]] (Suc 0)\n\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "using matrix_equation[where p = \"p\", where qs = \"[q]\", where signs = \"[[1],[-1]]\", where subsets = \"[[],[0]]\"]\n      nonzero h1 h2 h3"], ["proof (prove)\nusing this:\n  all_list_constr [[], [0]] (Suc 0)\n  \\<lbrakk>p \\<noteq> 0; distinct [[1], [- 1]];\n   set (characterize_consistent_signs_at_roots_copr p [q])\n   \\<subseteq> set [[1], [- 1]];\n   \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n   all_list_constr [[], [0]] (length [q])\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p [q] [[], [0]] [[1], [- 1]]\n  p \\<noteq> 0\n  set (characterize_consistent_signs_at_roots_copr p [q])\n  \\<subseteq> {[1], [- 1]}\n  \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa\n  all_list_constr [[], [0]] (Suc 0)\n\ngoal (1 subgoal):\n 1. satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "by auto"], ["proof (state)\nthis:\n  satisfy_equation p [q] [[], [0]] [[1], [- 1]]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma base_case_satisfy_equation_alt:\n  fixes p:: \"real poly\"\n  fixes qs:: \"real poly list\"\n  assumes len1: \"length qs = 1\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"\\<forall>q. (List.member qs q) \\<longrightarrow> coprime p q\"\n  shows \"satisfy_equation p qs [[],[0]] [[1],[-1]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "have ex_q: \"\\<exists>(q::real poly). qs = [q]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using len1"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using length_Suc_conv[of qs 0]"], ["proof (prove)\nusing this:\n  length qs = 1\n  (length qs = Suc 0) = (\\<exists>y ys. qs = y # ys \\<and> length ys = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "by auto"], ["proof (state)\nthis:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "then"], ["proof (chain)\npicking this:\n  \\<exists>q. qs = [q]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "using base_case_satisfy_equation nonzero rel_prime"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation ?p [?q] [[], [0]] [[1], [- 1]]\n  p \\<noteq> 0\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<And>p q.\n                   \\<lbrakk>p \\<noteq> 0; coprime p q\\<rbrakk>\n                   \\<Longrightarrow> satisfy_equation p [q] [[], [0]]\n[[1], [- 1]];\n        p \\<noteq> 0;\n        \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n        qs = [q]\\<rbrakk>\n       \\<Longrightarrow> satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "by (simp add: member_rec(1))"], ["proof (state)\nthis:\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma base_case_matrix_eq:\n  fixes q p:: \"real poly\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes rel_prime: \"coprime p q\"\n  shows \"(mult_mat_vec (mat_of_rows_list 2 [[1, 1], [1, -1]]) (construct_lhs_vector p [q] [[1],[-1]]) = \n    (construct_rhs_vector p [q] [[],[0]]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows_list 2 [[1, 1], [1, - 1]] *\\<^sub>v\n    w_vec p [q] [[1], [- 1]] =\n    v_vec p [q] [[], [0]]", "using mat_base_case base_case_satisfy_equation"], ["proof (prove)\nusing this:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation ?p [?q] [[], [0]] [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. mat_of_rows_list 2 [[1, 1], [1, - 1]] *\\<^sub>v\n    w_vec p [q] [[1], [- 1]] =\n    v_vec p [q] [[], [0]]", "unfolding satisfy_equation_def"], ["proof (prove)\nusing this:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> M_mat [[1], [- 1]] [[], [0]] *\\<^sub>v\n                    w_vec ?p [?q] [[1], [- 1]] =\n                    v_vec ?p [?q] [[], [0]]\n\ngoal (1 subgoal):\n 1. mat_of_rows_list 2 [[1, 1], [1, - 1]] *\\<^sub>v\n    w_vec p [q] [[1], [- 1]] =\n    v_vec p [q] [[], [0]]", "by (simp add: nonzero rel_prime)"], ["", "lemma less_two:\n  shows \"j < Suc (Suc 0) \\<longleftrightarrow> j = 0 \\<or> j = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j < Suc (Suc 0)) = (j = 0 \\<or> j = 1)", "by auto"], ["", "lemma inverse_mat_base_case: \n  shows \"inverts_mat (mat_of_rows_list 2 [[1/2, 1/2], [1/2, -(1/2)]]::rat mat) (mat_of_rows_list 2 [[1, 1], [1, -1]]::rat mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverts_mat (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n     (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "unfolding inverts_mat_def mat_of_rows_list_def mat_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n       (\\<lambda>(i, y). [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y) *\n      mat (length [[1, 1], [1, - 1]]) 2\n       (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y)) =\n    dim_row\n     (1\\<^sub>m\n       (dim_row\n         (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n           (\\<lambda>(i, y).\n               [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y)))) \\<and>\n    dim_col\n     (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n       (\\<lambda>(i, y). [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y) *\n      mat (length [[1, 1], [1, - 1]]) 2\n       (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y)) =\n    dim_col\n     (1\\<^sub>m\n       (dim_row\n         (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n           (\\<lambda>(i, y).\n               [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y)))) \\<and>\n    (\\<forall>i j.\n        i < dim_row\n             (1\\<^sub>m\n               (dim_row\n                 (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n                   (\\<lambda>(i, y).\n                       [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i !\n                       y)))) \\<longrightarrow>\n        j < dim_col\n             (1\\<^sub>m\n               (dim_row\n                 (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n                   (\\<lambda>(i, y).\n                       [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i !\n                       y)))) \\<longrightarrow>\n        (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n          (\\<lambda>(i, y). [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y) *\n         mat (length [[1, 1], [1, - 1]]) 2\n          (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y)) $$\n        (i, j) =\n        1\\<^sub>m\n         (dim_row\n           (mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n             (\\<lambda>(i, y).\n                 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y))) $$\n        (i, j))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < Suc (Suc 0) \\<Longrightarrow>\n       vec 2 ((!) ([[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! j)) \\<bullet>\n       vec (Suc (Suc 0)) (\\<lambda>i. [[1, 1], [1, - 1]] ! i ! j) =\n       1\n 2. \\<And>i j.\n       \\<lbrakk>i < Suc (Suc 0); i \\<noteq> j; j < Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> vec 2\n                          ((!) ([[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] !\n                                i)) \\<bullet>\n                         vec (Suc (Suc 0))\n                          (\\<lambda>i. [[1, 1], [1, - 1]] ! i ! j) =\n                         0", "unfolding less_two"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j = 0 \\<or> j = 1 \\<Longrightarrow>\n       vec 2 ((!) ([[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! j)) \\<bullet>\n       vec (Suc (Suc 0)) (\\<lambda>i. [[1, 1], [1, - 1]] ! i ! j) =\n       1\n 2. \\<And>i j.\n       \\<lbrakk>i = 0 \\<or> i = 1; i \\<noteq> j; j = 0 \\<or> j = 1\\<rbrakk>\n       \\<Longrightarrow> vec 2\n                          ((!) ([[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] !\n                                i)) \\<bullet>\n                         vec (Suc (Suc 0))\n                          (\\<lambda>i. [[1, 1], [1, - 1]] ! i ! j) =\n                         0", "by (auto simp add: scalar_prod_def)"], ["", "lemma inverse_mat_base_case_2: \n  shows \"inverts_mat (mat_of_rows_list 2 [[1, 1], [1, -1]]::rat mat) (mat_of_rows_list 2 [[1/2, 1/2], [1/2, -(1/2)]]::rat mat) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n     (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])", "unfolding inverts_mat_def mat_of_rows_list_def mat_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat (length [[1, 1], [1, - 1]]) 2\n       (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y) *\n      mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n       (\\<lambda>(i, y). [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y)) =\n    dim_row\n     (1\\<^sub>m\n       (dim_row\n         (mat (length [[1, 1], [1, - 1]]) 2\n           (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y)))) \\<and>\n    dim_col\n     (mat (length [[1, 1], [1, - 1]]) 2\n       (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y) *\n      mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n       (\\<lambda>(i, y). [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y)) =\n    dim_col\n     (1\\<^sub>m\n       (dim_row\n         (mat (length [[1, 1], [1, - 1]]) 2\n           (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y)))) \\<and>\n    (\\<forall>i j.\n        i < dim_row\n             (1\\<^sub>m\n               (dim_row\n                 (mat (length [[1, 1], [1, - 1]]) 2\n                   (\\<lambda>(i, y).\n                       [[1, 1], [1, - 1]] ! i ! y)))) \\<longrightarrow>\n        j < dim_col\n             (1\\<^sub>m\n               (dim_row\n                 (mat (length [[1, 1], [1, - 1]]) 2\n                   (\\<lambda>(i, y).\n                       [[1, 1], [1, - 1]] ! i ! y)))) \\<longrightarrow>\n        (mat (length [[1, 1], [1, - 1]]) 2\n          (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y) *\n         mat (length [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]]) 2\n          (\\<lambda>(i, y).\n              [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! y)) $$\n        (i, j) =\n        1\\<^sub>m\n         (dim_row\n           (mat (length [[1, 1], [1, - 1]]) 2\n             (\\<lambda>(i, y). [[1, 1], [1, - 1]] ! i ! y))) $$\n        (i, j))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j < Suc (Suc 0) \\<Longrightarrow>\n       vec 2 ((!) ([[1, 1], [1, - 1]] ! j)) \\<bullet>\n       vec (Suc (Suc 0))\n        (\\<lambda>i. [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! j) =\n       1\n 2. \\<And>i j.\n       \\<lbrakk>i < Suc (Suc 0); i \\<noteq> j; j < Suc (Suc 0)\\<rbrakk>\n       \\<Longrightarrow> vec 2 ((!) ([[1, 1], [1, - 1]] ! i)) \\<bullet>\n                         vec (Suc (Suc 0))\n                          (\\<lambda>i.\n                              [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i !\n                              j) =\n                         0", "unfolding less_two"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j.\n       j = 0 \\<or> j = 1 \\<Longrightarrow>\n       vec 2 ((!) ([[1, 1], [1, - 1]] ! j)) \\<bullet>\n       vec (Suc (Suc 0))\n        (\\<lambda>i. [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i ! j) =\n       1\n 2. \\<And>i j.\n       \\<lbrakk>i = 0 \\<or> i = 1; i \\<noteq> j; j = 0 \\<or> j = 1\\<rbrakk>\n       \\<Longrightarrow> vec 2 ((!) ([[1, 1], [1, - 1]] ! i)) \\<bullet>\n                         vec (Suc (Suc 0))\n                          (\\<lambda>i.\n                              [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]] ! i !\n                              j) =\n                         0", "by (auto simp add: scalar_prod_def)"], ["", "lemma base_case_invertible_mat: \n  shows \"invertible_mat (matrix_A [[1], [- 1]] [[], [0]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (M_mat [[1], [- 1]] [[], [0]])", "unfolding invertible_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat (M_mat [[1], [- 1]] [[], [0]]) \\<and>\n    (\\<exists>B.\n        inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n        inverts_mat B (M_mat [[1], [- 1]] [[], [0]]))", "using inverse_mat_base_case inverse_mat_base_case_2"], ["proof (prove)\nusing this:\n  inverts_mat (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n   (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n\ngoal (1 subgoal):\n 1. square_mat (M_mat [[1], [- 1]] [[], [0]]) \\<and>\n    (\\<exists>B.\n        inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n        inverts_mat B (M_mat [[1], [- 1]] [[], [0]]))", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inverts_mat\n              (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n              (mat_of_rows_list 2 [[1, 1], [1, - 1]]);\n     inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n      (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\\<rbrakk>\n    \\<Longrightarrow> dim_col (M_mat [[1], [- 1]] [[], [0]]) =\n                      dim_row (M_mat [[1], [- 1]] [[], [0]])\n 2. \\<lbrakk>inverts_mat\n              (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n              (mat_of_rows_list 2 [[1, 1], [1, - 1]]);\n     inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n      (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n                         inverts_mat B (M_mat [[1], [- 1]] [[], [0]])", "apply (simp add: mat_base_case mat_of_rows_list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inverts_mat\n              (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n              (mat_of_rows_list 2 [[1, 1], [1, - 1]]);\n     inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n      (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n                         inverts_mat B (M_mat [[1], [- 1]] [[], [0]])", "using mat_base_case"], ["proof (prove)\nusing this:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>inverts_mat\n              (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n              (mat_of_rows_list 2 [[1, 1], [1, - 1]]);\n     inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n      (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\\<rbrakk>\n    \\<Longrightarrow> \\<exists>B.\n                         inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n                         inverts_mat B (M_mat [[1], [- 1]] [[], [0]])", "by auto"], ["", "section \"Inductive Step\""], ["", "subsection \"Lemmas on smashing subsets and signs\""], ["", "lemma signs_smash_property:\n  fixes signs1 signs2 :: \"'a list list\"\n  fixes a b:: \"nat\"\n  shows \"\\<forall> (elem :: 'a list). (elem \\<in> (set (signs_smash signs1 signs2)) \\<longrightarrow> \n    (\\<exists> n m :: nat. \n      elem = ((nth signs1 n)@(nth signs2 m))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<longrightarrow>\n       (\\<exists>n m. elem = signs1 ! n @ signs2 ! m)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "fix elem"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "assume assum: \"elem \\<in> set (signs_smash signs1 signs2)\""], ["proof (state)\nthis:\n  elem \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "show \"\\<exists>n m. elem = signs1 ! n @ signs2 ! m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "using assum"], ["proof (prove)\nusing this:\n  elem \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "unfolding signs_smash_def"], ["proof (prove)\nusing this:\n  elem \\<in> set (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))\n\ngoal (1 subgoal):\n 1. \\<exists>n m. elem = signs1 ! n @ signs2 ! m", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>x \\<in> set signs1; xa \\<in> set signs2;\n        elem = x @ xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n m. x @ xa = signs1 ! n @ signs2 ! m", "by (metis in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<exists>n m. elem = signs1 ! n @ signs2 ! m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma signs_smash_property_set:\n  fixes signs1 signs2 :: \"'a list list\"\n  fixes a b:: \"nat\"\n  shows \"\\<forall> (elem :: 'a list). (elem \\<in> (set (signs_smash signs1 signs2)) \\<longrightarrow> \n    (\\<exists> (elem1::'a list). \\<exists> (elem2::'a list). \n      (elem1 \\<in> set(signs1) \\<and> elem2 \\<in> set(signs2) \\<and> elem = (elem1@elem2))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set signs1 \\<and>\n           elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>elem1.\n          elem1 \\<in> set signs1 \\<and>\n          (\\<exists>elem2.\n              elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "fix elem"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>elem1.\n          elem1 \\<in> set signs1 \\<and>\n          (\\<exists>elem2.\n              elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "assume assum: \"elem \\<in> set (signs_smash signs1 signs2)\""], ["proof (state)\nthis:\n  elem \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. \\<And>elem.\n       elem \\<in> set (signs_smash signs1 signs2) \\<Longrightarrow>\n       \\<exists>elem1.\n          elem1 \\<in> set signs1 \\<and>\n          (\\<exists>elem2.\n              elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "show \"\\<exists>elem1. elem1 \\<in> set signs1 \\<and> (\\<exists>elem2. elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>elem1.\n       elem1 \\<in> set signs1 \\<and>\n       (\\<exists>elem2. elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "using assum"], ["proof (prove)\nusing this:\n  elem \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. \\<exists>elem1.\n       elem1 \\<in> set signs1 \\<and>\n       (\\<exists>elem2. elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "unfolding signs_smash_def"], ["proof (prove)\nusing this:\n  elem \\<in> set (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))\n\ngoal (1 subgoal):\n 1. \\<exists>elem1.\n       elem1 \\<in> set signs1 \\<and>\n       (\\<exists>elem2. elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)", "by auto"], ["proof (state)\nthis:\n  \\<exists>elem1.\n     elem1 \\<in> set signs1 \\<and>\n     (\\<exists>elem2. elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subsets_smash_property:\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes n:: \"nat\"\n  shows \"\\<forall> (elem :: nat list). (List.member (subsets_smash n subsets1 subsets2) elem) \\<longrightarrow> \n    (\\<exists> (elem1::nat list). \\<exists> (elem2::nat list).\n      (elem1 \\<in> set(subsets1) \\<and> elem2 \\<in> set(subsets2) \\<and> elem = (elem1 @ ((map ((+) n) elem2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "let ?new_subsets = \"(map (map ((+) n)) subsets2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "(* a slightly unorthodox use of signs_smash, but it closes the proof *)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "have \"subsets_smash n subsets1 subsets2 = signs_smash subsets1 ?new_subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subsets_smash n subsets1 subsets2 =\n    signs_smash subsets1 (map (map ((+) n)) subsets2)", "unfolding subsets_smash_def signs_smash_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n) l2) subsets2)\n       subsets1) =\n    concat\n     (map (\\<lambda>l1. map ((@) l1) (map (map ((+) n)) subsets2)) subsets1)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n) l2) subsets2)\n       subsets1) =\n    concat\n     (map (\\<lambda>l1. map ((@) l1 \\<circ> map ((+) n)) subsets2) subsets1)", "by (simp add: comp_def)"], ["proof (state)\nthis:\n  subsets_smash n subsets1 subsets2 =\n  signs_smash subsets1 (map (map ((+) n)) subsets2)\n\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "then"], ["proof (chain)\npicking this:\n  subsets_smash n subsets1 subsets2 =\n  signs_smash subsets1 (map (map ((+) n)) subsets2)", "show ?thesis"], ["proof (prove)\nusing this:\n  subsets_smash n subsets1 subsets2 =\n  signs_smash subsets1 (map (map ((+) n)) subsets2)\n\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash n subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)", "by (smt imageE in_set_member set_map signs_smash_property_set)"], ["proof (state)\nthis:\n  \\<forall>elem.\n     List.member (subsets_smash n subsets1 subsets2) elem \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set subsets1 \\<and>\n         elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) n) elem2)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* If subsets for smaller systems are well-defined, then subsets for combined systems\n   are well-defined *)"], ["", "subsection \"Well-defined subsets preserved when smashing\""], ["", "lemma list_constr_append:\n  \"list_constr a n \\<and> list_constr b n \\<longrightarrow> list_constr (a@b) n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr a n \\<and> list_constr b n \\<longrightarrow>\n    list_constr (a @ b) n", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_constr a n; list_constr b n\\<rbrakk>\n    \\<Longrightarrow> list_constr (a @ b) n", "unfolding list_constr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all (\\<lambda>x. x < n) a;\n     list_all (\\<lambda>x. x < n) b\\<rbrakk>\n    \\<Longrightarrow> list_all (\\<lambda>x. x < n) (a @ b)", "using list_all_append"], ["proof (prove)\nusing this:\n  list_all ?P (?xs @ ?ys) = (list_all ?P ?xs \\<and> list_all ?P ?ys)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all (\\<lambda>x. x < n) a;\n     list_all (\\<lambda>x. x < n) b\\<rbrakk>\n    \\<Longrightarrow> list_all (\\<lambda>x. x < n) (a @ b)", "by blast"], ["", "lemma well_def_step: \n  fixes qs1 qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  assumes well_def_subsets1: \"all_list_constr (subsets1) (length qs1)\"\n  assumes well_def_subsets2: \"all_list_constr (subsets2) (length qs2)\"\n  shows \"all_list_constr ((subsets_smash (length qs1) subsets1 subsets2))\n     (length (qs1 @ qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "have h1: \"\\<forall>elem.\n     List.member (subsets_smash (length qs1) subsets1 subsets2) elem \\<longrightarrow>\n     (\\<exists>elem1 elem2. elem1 \\<in> set subsets1 \\<and> elem2 \\<in> set subsets2 \\<and> elem = elem1 @ map ((+) (length qs1)) elem2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash (length qs1) subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and>\n           elem = elem1 @ map ((+) (length qs1)) elem2)", "using subsets_smash_property"], ["proof (prove)\nusing this:\n  \\<forall>elem.\n     List.member (subsets_smash ?n ?subsets1.0 ?subsets2.0)\n      elem \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set ?subsets1.0 \\<and>\n         elem2 \\<in> set ?subsets2.0 \\<and>\n         elem = elem1 @ map ((+) ?n) elem2)\n\ngoal (1 subgoal):\n 1. \\<forall>elem.\n       List.member (subsets_smash (length qs1) subsets1 subsets2)\n        elem \\<longrightarrow>\n       (\\<exists>elem1 elem2.\n           elem1 \\<in> set subsets1 \\<and>\n           elem2 \\<in> set subsets2 \\<and>\n           elem = elem1 @ map ((+) (length qs1)) elem2)", "by blast"], ["proof (state)\nthis:\n  \\<forall>elem.\n     List.member (subsets_smash (length qs1) subsets1 subsets2)\n      elem \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set subsets1 \\<and>\n         elem2 \\<in> set subsets2 \\<and>\n         elem = elem1 @ map ((+) (length qs1)) elem2)\n\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "have h2: \"\\<forall>elem1 elem2. (elem1 \\<in> set subsets1 \\<and> elem2 \\<in> set subsets2) \\<longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>elem1 elem2.\n       elem1 \\<in> set subsets1 \\<and>\n       elem2 \\<in> set subsets2 \\<longrightarrow>\n       list_constr (elem1 @ map ((+) (length qs1)) elem2)\n        (length (qs1 @ qs2))", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "fix elem1"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "fix elem2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "assume e1: \"elem1 \\<in> set subsets1\""], ["proof (state)\nthis:\n  elem1 \\<in> set subsets1\n\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "assume e2: \"elem2 \\<in> set subsets2\""], ["proof (state)\nthis:\n  elem2 \\<in> set subsets2\n\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "have h1: \"list_constr elem1  (length qs1 + length qs2) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1 + length qs2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1 + length qs2)", "have h1: \"list_constr elem1  (length qs1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1)", "using e1 well_def_subsets1"], ["proof (prove)\nusing this:\n  elem1 \\<in> set subsets1\n  all_list_constr subsets1 (length qs1)\n\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1)", "unfolding all_list_constr_def"], ["proof (prove)\nusing this:\n  elem1 \\<in> set subsets1\n  \\<forall>x.\n     List.member subsets1 x \\<longrightarrow> list_constr x (length qs1)\n\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1)", "by (simp add: in_set_member)"], ["proof (state)\nthis:\n  list_constr elem1 (length qs1)\n\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1 + length qs2)", "then"], ["proof (chain)\npicking this:\n  list_constr elem1 (length qs1)", "show ?thesis"], ["proof (prove)\nusing this:\n  list_constr elem1 (length qs1)\n\ngoal (1 subgoal):\n 1. list_constr elem1 (length qs1 + length qs2)", "unfolding list_constr_def"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x < length qs1) elem1\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x < length qs1 + length qs2) elem1", "by (simp add: list.pred_mono_strong)"], ["proof (state)\nthis:\n  list_constr elem1 (length qs1 + length qs2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_constr elem1 (length qs1 + length qs2)\n\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "have h2: \"list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)", "have h1: \"list_constr elem2  (length qs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr elem2 (length qs2)", "using e2 well_def_subsets2"], ["proof (prove)\nusing this:\n  elem2 \\<in> set subsets2\n  all_list_constr subsets2 (length qs2)\n\ngoal (1 subgoal):\n 1. list_constr elem2 (length qs2)", "unfolding all_list_constr_def"], ["proof (prove)\nusing this:\n  elem2 \\<in> set subsets2\n  \\<forall>x.\n     List.member subsets2 x \\<longrightarrow> list_constr x (length qs2)\n\ngoal (1 subgoal):\n 1. list_constr elem2 (length qs2)", "by (simp add: in_set_member)"], ["proof (state)\nthis:\n  list_constr elem2 (length qs2)\n\ngoal (1 subgoal):\n 1. list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)", "then"], ["proof (chain)\npicking this:\n  list_constr elem2 (length qs2)", "show ?thesis"], ["proof (prove)\nusing this:\n  list_constr elem2 (length qs2)\n\ngoal (1 subgoal):\n 1. list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)", "unfolding list_constr_def"], ["proof (prove)\nusing this:\n  list_all (\\<lambda>x. x < length qs2) elem2\n\ngoal (1 subgoal):\n 1. list_all (\\<lambda>x. x < length qs1 + length qs2)\n     (map ((+) (length qs1)) elem2)", "by (simp add: list_all_length)"], ["proof (state)\nthis:\n  list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)\n\ngoal (1 subgoal):\n 1. \\<And>elem1 elem2.\n       \\<lbrakk>elem1 \\<in> set subsets1; elem2 \\<in> set subsets2\\<rbrakk>\n       \\<Longrightarrow> list_constr (elem1 @ map ((+) (length qs1)) elem2)\n                          (length qs1 + length qs2)", "show \"list_constr (elem1 @ map ((+) (length qs1)) elem2) (length qs1 + length qs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr (elem1 @ map ((+) (length qs1)) elem2)\n     (length qs1 + length qs2)", "using h1 h2 list_constr_append"], ["proof (prove)\nusing this:\n  list_constr elem1 (length qs1 + length qs2)\n  list_constr (map ((+) (length qs1)) elem2) (length qs1 + length qs2)\n  list_constr ?a ?n \\<and> list_constr ?b ?n \\<longrightarrow>\n  list_constr (?a @ ?b) ?n\n\ngoal (1 subgoal):\n 1. list_constr (elem1 @ map ((+) (length qs1)) elem2)\n     (length qs1 + length qs2)", "by blast"], ["proof (state)\nthis:\n  list_constr (elem1 @ map ((+) (length qs1)) elem2)\n   (length qs1 + length qs2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>elem1 elem2.\n     elem1 \\<in> set subsets1 \\<and>\n     elem2 \\<in> set subsets2 \\<longrightarrow>\n     list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  \\<forall>elem1 elem2.\n     elem1 \\<in> set subsets1 \\<and>\n     elem2 \\<in> set subsets2 \\<longrightarrow>\n     list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>elem1 elem2.\n     elem1 \\<in> set subsets1 \\<and>\n     elem2 \\<in> set subsets2 \\<longrightarrow>\n     list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "using h1"], ["proof (prove)\nusing this:\n  \\<forall>elem1 elem2.\n     elem1 \\<in> set subsets1 \\<and>\n     elem2 \\<in> set subsets2 \\<longrightarrow>\n     list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))\n  \\<forall>elem.\n     List.member (subsets_smash (length qs1) subsets1 subsets2)\n      elem \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set subsets1 \\<and>\n         elem2 \\<in> set subsets2 \\<and>\n         elem = elem1 @ map ((+) (length qs1)) elem2)\n\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "unfolding all_list_constr_def"], ["proof (prove)\nusing this:\n  \\<forall>elem1 elem2.\n     elem1 \\<in> set subsets1 \\<and>\n     elem2 \\<in> set subsets2 \\<longrightarrow>\n     list_constr (elem1 @ map ((+) (length qs1)) elem2) (length (qs1 @ qs2))\n  \\<forall>elem.\n     List.member (subsets_smash (length qs1) subsets1 subsets2)\n      elem \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set subsets1 \\<and>\n         elem2 \\<in> set subsets2 \\<and>\n         elem = elem1 @ map ((+) (length qs1)) elem2)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member (subsets_smash (length qs1) subsets1 subsets2)\n        x \\<longrightarrow>\n       list_constr x (length (qs1 @ qs2))", "by auto"], ["proof (state)\nthis:\n  all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n   (length (qs1 @ qs2))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Well def signs preserved when smashing\""], ["", "lemma well_def_signs_step: \n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes \"length qs1 > 0\"\n  assumes \"length qs2 > 0\"\n  assumes well_def1: \"well_def_signs (length qs1) signs1\"\n  assumes well_def2: \"well_def_signs (length qs2) signs2\"\n  shows \"well_def_signs (length (qs1@qs2)) (signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2)) (signs_smash signs1 signs2)", "using well_def1 well_def2"], ["proof (prove)\nusing this:\n  well_def_signs (length qs1) signs1\n  well_def_signs (length qs2) signs2\n\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2)) (signs_smash signs1 signs2)", "unfolding well_def_signs_def"], ["proof (prove)\nusing this:\n  \\<forall>signs\\<in>set signs1. length signs = length qs1\n  \\<forall>signs\\<in>set signs2. length signs = length qs2\n\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set (signs_smash signs1 signs2).\n       length signs = length (qs1 @ qs2)", "using signs_smash_property_set[of signs1 signs2] length_append"], ["proof (prove)\nusing this:\n  \\<forall>signs\\<in>set signs1. length signs = length qs1\n  \\<forall>signs\\<in>set signs2. length signs = length qs2\n  \\<forall>elem.\n     elem \\<in> set (signs_smash signs1 signs2) \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set signs1 \\<and>\n         elem2 \\<in> set signs2 \\<and> elem = elem1 @ elem2)\n  length (?xs @ ?ys) = length ?xs + length ?ys\n\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set (signs_smash signs1 signs2).\n       length signs = length (qs1 @ qs2)", "by auto"], ["", "subsection \"Distinct signs preserved when smashing\""], ["", "lemma distinct_map_append:\n  assumes \"distinct ls\"\n  shows \"distinct (map ((@) xs) ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map ((@) xs) ls)", "unfolding distinct_map inj_on_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct ls \\<and>\n    (\\<forall>x\\<in>set ls.\n        \\<forall>y\\<in>set ls. xs @ x = xs @ y \\<longrightarrow> x = y)", "using assms"], ["proof (prove)\nusing this:\n  distinct ls\n\ngoal (1 subgoal):\n 1. distinct ls \\<and>\n    (\\<forall>x\\<in>set ls.\n        \\<forall>y\\<in>set ls. xs @ x = xs @ y \\<longrightarrow> x = y)", "by auto"], ["", "lemma length_eq_append:\n  assumes \"length y = length b\"\n  shows \"(x @ y = a @ b) \\<longleftrightarrow> x=a \\<and> y = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x @ y = a @ b) = (x = a \\<and> y = b)", "by (simp add: assms)"], ["", "lemma distinct_step:\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes well_def1: \"well_def_signs n1 signs1\"\n  assumes well_def2: \"well_def_signs n2 signs2\"\n  assumes distinct1: \"distinct signs1\"\n  assumes distinct2: \"distinct signs2\"\n  shows \"distinct (signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (signs_smash signs1 signs2)", "unfolding signs_smash_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))", "using distinct1"], ["proof (prove)\nusing this:\n  distinct signs1\n\ngoal (1 subgoal):\n 1. distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))", "proof(induction signs1)"], ["proof (state)\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) []))\n 2. \\<And>a signs1.\n       \\<lbrakk>distinct signs1 \\<Longrightarrow>\n                distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        distinct (a # signs1)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>l1. map ((@) l1) signs2)\n                              (a # signs1)))", "case Nil"], ["proof (state)\nthis:\n  distinct []\n\ngoal (2 subgoals):\n 1. distinct [] \\<Longrightarrow>\n    distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) []))\n 2. \\<And>a signs1.\n       \\<lbrakk>distinct signs1 \\<Longrightarrow>\n                distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        distinct (a # signs1)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>l1. map ((@) l1) signs2)\n                              (a # signs1)))", "then"], ["proof (chain)\npicking this:\n  distinct []", "show ?case"], ["proof (prove)\nusing this:\n  distinct []\n\ngoal (1 subgoal):\n 1. distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) []))", "by auto"], ["proof (state)\nthis:\n  distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) []))\n\ngoal (1 subgoal):\n 1. \\<And>a signs1.\n       \\<lbrakk>distinct signs1 \\<Longrightarrow>\n                distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        distinct (a # signs1)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>l1. map ((@) l1) signs2)\n                              (a # signs1)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a signs1.\n       \\<lbrakk>distinct signs1 \\<Longrightarrow>\n                distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        distinct (a # signs1)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>l1. map ((@) l1) signs2)\n                              (a # signs1)))", "case (Cons a signs1)"], ["proof (state)\nthis:\n  distinct signs1 \\<Longrightarrow>\n  distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))\n  distinct (a # signs1)\n\ngoal (1 subgoal):\n 1. \\<And>a signs1.\n       \\<lbrakk>distinct signs1 \\<Longrightarrow>\n                distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        distinct (a # signs1)\\<rbrakk>\n       \\<Longrightarrow> distinct\n                          (concat\n                            (map (\\<lambda>l1. map ((@) l1) signs2)\n                              (a # signs1)))", "then"], ["proof (chain)\npicking this:\n  distinct signs1 \\<Longrightarrow>\n  distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))\n  distinct (a # signs1)", "show ?case"], ["proof (prove)\nusing this:\n  distinct signs1 \\<Longrightarrow>\n  distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1))\n  distinct (a # signs1)\n\ngoal (1 subgoal):\n 1. distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) (a # signs1)))", "apply (auto simp add: distinct2 distinct_map_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb xc.\n       \\<lbrakk>distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        a \\<notin> set signs1; distinct signs1; xa \\<in> set signs1;\n        xb \\<in> set signs2; a @ xb = xa @ xc; xc \\<in> set signs2\\<rbrakk>\n       \\<Longrightarrow> False", "using assms"], ["proof (prove)\nusing this:\n  well_def_signs n1 signs1\n  well_def_signs n2 signs2\n  distinct signs1\n  distinct signs2\n\ngoal (1 subgoal):\n 1. \\<And>xa xb xc.\n       \\<lbrakk>distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        a \\<notin> set signs1; distinct signs1; xa \\<in> set signs1;\n        xb \\<in> set signs2; a @ xb = xa @ xc; xc \\<in> set signs2\\<rbrakk>\n       \\<Longrightarrow> False", "unfolding well_def_signs_def"], ["proof (prove)\nusing this:\n  \\<forall>signs\\<in>set signs1. length signs = n1\n  \\<forall>signs\\<in>set signs2. length signs = n2\n  distinct signs1\n  distinct signs2\n\ngoal (1 subgoal):\n 1. \\<And>xa xb xc.\n       \\<lbrakk>distinct\n                 (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1));\n        a \\<notin> set signs1; distinct signs1; xa \\<in> set signs1;\n        xb \\<in> set signs2; a @ xb = xa @ xc; xc \\<in> set signs2\\<rbrakk>\n       \\<Longrightarrow> False", "by (simp add: distinct1 distinct2 length_eq_append)"], ["proof (state)\nthis:\n  distinct (concat (map (\\<lambda>l1. map ((@) l1) signs2) (a # signs1)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* In this section we will show that if signs1 contains all consistent sign assignments and signs2 \ncontains all consistent sign assignments, then their smash contains all consistent sign assignments.  \nIntuitively, this makes sense because signs1 and signs2 are carrying information about different \nsets of polynomials, and their smash contains all possible combinations of that information.\n*)"], ["", "subsection \"Consistent sign assignments preserved when smashing\""], ["", "lemma subset_smash_signs: \n  fixes a1 b1 a2 b2:: \"rat list list\"\n  assumes sub1: \"set a1 \\<subseteq> set a2\"\n  assumes sub2: \"set b1 \\<subseteq> set b2\"\n  shows \"set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)", "have h1: \"\\<forall>x\\<in>set (signs_smash a1 b1). x\\<in>set (signs_smash a2 b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (signs_smash a1 b1). x \\<in> set (signs_smash a2 b2)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (signs_smash a1 b1) \\<Longrightarrow>\n       x \\<in> set (signs_smash a2 b2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (signs_smash a1 b1) \\<Longrightarrow>\n       x \\<in> set (signs_smash a2 b2)", "assume x_in: \"x \\<in> set (signs_smash a1 b1)\""], ["proof (state)\nthis:\n  x \\<in> set (signs_smash a1 b1)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (signs_smash a1 b1) \\<Longrightarrow>\n       x \\<in> set (signs_smash a2 b2)", "have h1: \"\\<exists> n m :: nat. x = (nth a1 n)@(nth b1 m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n m. x = a1 ! n @ b1 ! m", "using signs_smash_property[of a1 b1] x_in"], ["proof (prove)\nusing this:\n  \\<forall>elem.\n     elem \\<in> set (signs_smash a1 b1) \\<longrightarrow>\n     (\\<exists>n m. elem = a1 ! n @ b1 ! m)\n  x \\<in> set (signs_smash a1 b1)\n\ngoal (1 subgoal):\n 1. \\<exists>n m. x = a1 ! n @ b1 ! m", "by blast"], ["proof (state)\nthis:\n  \\<exists>n m. x = a1 ! n @ b1 ! m\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (signs_smash a1 b1) \\<Longrightarrow>\n       x \\<in> set (signs_smash a2 b2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>n m. x = a1 ! n @ b1 ! m", "have h2: \"\\<exists> p q::nat. x = (nth a2 p)@(nth b2 q)\""], ["proof (prove)\nusing this:\n  \\<exists>n m. x = a1 ! n @ b1 ! m\n\ngoal (1 subgoal):\n 1. \\<exists>p q. x = a2 ! p @ b2 ! q", "using sub1 sub2"], ["proof (prove)\nusing this:\n  \\<exists>n m. x = a1 ! n @ b1 ! m\n  set a1 \\<subseteq> set a2\n  set b1 \\<subseteq> set b2\n\ngoal (1 subgoal):\n 1. \\<exists>p q. x = a2 ! p @ b2 ! q", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n m.\n       \\<lbrakk>set a1 \\<subseteq> set a2; set b1 \\<subseteq> set b2;\n        x = a1 ! n @ b1 ! m\\<rbrakk>\n       \\<Longrightarrow> \\<exists>p q. a1 ! n @ b1 ! m = a2 ! p @ b2 ! q", "by (metis nth_find_first signs_smash_property_set subset_code(1) x_in)"], ["proof (state)\nthis:\n  \\<exists>p q. x = a2 ! p @ b2 ! q\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (signs_smash a1 b1) \\<Longrightarrow>\n       x \\<in> set (signs_smash a2 b2)", "then"], ["proof (chain)\npicking this:\n  \\<exists>p q. x = a2 ! p @ b2 ! q", "show \"x \\<in> set (signs_smash a2 b2)\""], ["proof (prove)\nusing this:\n  \\<exists>p q. x = a2 ! p @ b2 ! q\n\ngoal (1 subgoal):\n 1. x \\<in> set (signs_smash a2 b2)", "unfolding signs_smash_def"], ["proof (prove)\nusing this:\n  \\<exists>p q. x = a2 ! p @ b2 ! q\n\ngoal (1 subgoal):\n 1. x \\<in> set (concat (map (\\<lambda>l1. map ((@) l1) b2) a2))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       x = a2 ! p @ b2 ! q \\<Longrightarrow>\n       \\<exists>x\\<in>set a2. a2 ! p @ b2 ! q \\<in> (@) x ` set b2", "using signs_smash_property_set sub1 sub2 x_in"], ["proof (prove)\nusing this:\n  \\<forall>elem.\n     elem \\<in> set (signs_smash ?signs1.0 ?signs2.0) \\<longrightarrow>\n     (\\<exists>elem1 elem2.\n         elem1 \\<in> set ?signs1.0 \\<and>\n         elem2 \\<in> set ?signs2.0 \\<and> elem = elem1 @ elem2)\n  set a1 \\<subseteq> set a2\n  set b1 \\<subseteq> set b2\n  x \\<in> set (signs_smash a1 b1)\n\ngoal (1 subgoal):\n 1. \\<And>p q.\n       x = a2 ! p @ b2 ! q \\<Longrightarrow>\n       \\<exists>x\\<in>set a2. a2 ! p @ b2 ! q \\<in> (@) x ` set b2", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> set (signs_smash a2 b2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (signs_smash a1 b1). x \\<in> set (signs_smash a2 b2)\n\ngoal (1 subgoal):\n 1. set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (signs_smash a1 b1). x \\<in> set (signs_smash a2 b2)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (signs_smash a1 b1). x \\<in> set (signs_smash a2 b2)\n\ngoal (1 subgoal):\n 1. set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)", "by blast"], ["proof (state)\nthis:\n  set (signs_smash a1 b1) \\<subseteq> set (signs_smash a2 b2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_helper:\n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  shows \"\\<forall> x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)). \n        \\<exists> x1 \\<in> set (characterize_consistent_signs_at_roots_copr p qs1). \n        \\<exists> x2 \\<in> set (characterize_consistent_signs_at_roots_copr p qs2).\n        x = x1@x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "assume  x_in: \"x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\""], ["proof (state)\nthis:\n  x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have x_in_csv: \"x \\<in> set(map (consistent_sign_vec_copr (qs1 @ qs2)) (characterize_root_list_p p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                  (characterize_root_list_p p))", "using x_in"], ["proof (prove)\nusing this:\n  x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                  (characterize_root_list_p p))", "unfolding characterize_consistent_signs_at_roots_copr_def"], ["proof (prove)\nusing this:\n  x \\<in> set (remdups\n                (map (consistent_sign_vec_copr (qs1 @ qs2))\n                  (characterize_root_list_p p)))\n\ngoal (1 subgoal):\n 1. x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                  (characterize_root_list_p p))", "by simp"], ["proof (state)\nthis:\n  x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                (characterize_root_list_p p))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have csv_hyp: \"\\<forall>r. consistent_sign_vec_copr (qs1 @ qs2) r = (consistent_sign_vec_copr qs1 r)@(consistent_sign_vec_copr qs2 r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r.\n       consistent_sign_vec_copr (qs1 @ qs2) r =\n       consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r", "unfolding consistent_sign_vec_copr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r.\n       map (\\<lambda>q. if 0 < poly q r then 1 else - 1) (qs1 @ qs2) =\n       map (\\<lambda>q. if 0 < poly q r then 1 else - 1) qs1 @\n       map (\\<lambda>q. if 0 < poly q r then 1 else - 1) qs2", "by auto"], ["proof (state)\nthis:\n  \\<forall>r.\n     consistent_sign_vec_copr (qs1 @ qs2) r =\n     consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have exr_iff: \"(\\<exists>r \\<in> set (characterize_root_list_p p). x = consistent_sign_vec_copr (qs1 @ qs2) r) \\<longleftrightarrow> (\\<exists>r \\<in> set (characterize_root_list_p p). x = (consistent_sign_vec_copr qs1 r)@(consistent_sign_vec_copr qs2 r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>r\\<in>set (characterize_root_list_p p).\n        x = consistent_sign_vec_copr (qs1 @ qs2) r) =\n    (\\<exists>r\\<in>set (characterize_root_list_p p).\n        x = consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r)", "using csv_hyp"], ["proof (prove)\nusing this:\n  \\<forall>r.\n     consistent_sign_vec_copr (qs1 @ qs2) r =\n     consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r\n\ngoal (1 subgoal):\n 1. (\\<exists>r\\<in>set (characterize_root_list_p p).\n        x = consistent_sign_vec_copr (qs1 @ qs2) r) =\n    (\\<exists>r\\<in>set (characterize_root_list_p p).\n        x = consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr (qs1 @ qs2) r) =\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have exr: \"x \\<in> set(map (consistent_sign_vec_copr (qs1 @ qs2)) (characterize_root_list_p p)) \\<longrightarrow> (\\<exists>r \\<in> set (characterize_root_list_p p). x = consistent_sign_vec_copr (qs1 @ qs2) r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                  (characterize_root_list_p p)) \\<longrightarrow>\n    (\\<exists>r\\<in>set (characterize_root_list_p p).\n        x = consistent_sign_vec_copr (qs1 @ qs2) r)", "by auto"], ["proof (state)\nthis:\n  x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                (characterize_root_list_p p)) \\<longrightarrow>\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr (qs1 @ qs2) r)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have mem_list1: \"\\<forall> r \\<in> set (characterize_root_list_p p). (consistent_sign_vec_copr qs1 r) \\<in> set(map (consistent_sign_vec_copr qs1) (characterize_root_list_p p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (characterize_root_list_p p).\n       consistent_sign_vec_copr qs1 r\n       \\<in> set (map (consistent_sign_vec_copr qs1)\n                   (characterize_root_list_p p))", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs1 r\n     \\<in> set (map (consistent_sign_vec_copr qs1)\n                 (characterize_root_list_p p))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "have mem_list2: \"\\<forall> r \\<in> set (characterize_root_list_p p). (consistent_sign_vec_copr qs2 r) \\<in> set(map (consistent_sign_vec_copr qs2) (characterize_root_list_p p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>r\\<in>set (characterize_root_list_p p).\n       consistent_sign_vec_copr qs2 r\n       \\<in> set (map (consistent_sign_vec_copr qs2)\n                   (characterize_root_list_p p))", "by simp"], ["proof (state)\nthis:\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs2 r\n     \\<in> set (map (consistent_sign_vec_copr qs2)\n                 (characterize_root_list_p p))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                     (qs1 @ qs2)) \\<Longrightarrow>\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "then"], ["proof (chain)\npicking this:\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs2 r\n     \\<in> set (map (consistent_sign_vec_copr qs2)\n                 (characterize_root_list_p p))", "show \"\\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p qs1).\n            \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p qs2). x = x1 @ x2\""], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs2 r\n     \\<in> set (map (consistent_sign_vec_copr qs2)\n                 (characterize_root_list_p p))\n\ngoal (1 subgoal):\n 1. \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p qs1).\n       \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs2).\n          x = x1 @ x2", "using x_in_csv exr mem_list1 mem_list2 characterize_consistent_signs_at_roots_copr_def exr_iff"], ["proof (prove)\nusing this:\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs2 r\n     \\<in> set (map (consistent_sign_vec_copr qs2)\n                 (characterize_root_list_p p))\n  x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                (characterize_root_list_p p))\n  x \\<in> set (map (consistent_sign_vec_copr (qs1 @ qs2))\n                (characterize_root_list_p p)) \\<longrightarrow>\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr (qs1 @ qs2) r)\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs1 r\n     \\<in> set (map (consistent_sign_vec_copr qs1)\n                 (characterize_root_list_p p))\n  \\<forall>r\\<in>set (characterize_root_list_p p).\n     consistent_sign_vec_copr qs2 r\n     \\<in> set (map (consistent_sign_vec_copr qs2)\n                 (characterize_root_list_p p))\n  characterize_consistent_signs_at_roots_copr ?p ?qss =\n  remdups\n   (map (consistent_sign_vec_copr ?qss) (characterize_root_list_p ?p))\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr (qs1 @ qs2) r) =\n  (\\<exists>r\\<in>set (characterize_root_list_p p).\n      x = consistent_sign_vec_copr qs1 r @ consistent_sign_vec_copr qs2 r)\n\ngoal (1 subgoal):\n 1. \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p qs1).\n       \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs2).\n          x = x1 @ x2", "by auto"], ["proof (state)\nthis:\n  \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p qs1).\n     \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs2).\n        x = x1 @ x2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_step:  \n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes csa1: \"set (characterize_consistent_signs_at_roots_copr p qs1) \\<subseteq> set (signs1)\"\n  assumes csa2: \"set (characterize_consistent_signs_at_roots_copr p qs2) \\<subseteq> set (signs2)\"  \n  shows \"set (characterize_consistent_signs_at_roots_copr p\n          (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "have h0: \"\\<forall> x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)). \\<exists> x1 \\<in> set (characterize_consistent_signs_at_roots_copr p qs1). \\<exists> x2 \\<in> set (characterize_consistent_signs_at_roots_copr p qs2).\n     (x = x1@x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "using subset_helper[of p qs1 qs2]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs1).\n        \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                              qs2).\n           x = x1 @ x2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                             qs1).\n          \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                                qs2).\n             x = x1 @ x2", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs1).\n        \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                              qs2).\n           x = x1 @ x2\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs1).\n        \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                              qs2).\n           x = x1 @ x2", "have \"\\<forall>x \\<in> set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)). \n          x \\<in> set (signs_smash (characterize_consistent_signs_at_roots_copr p qs1) \n          (characterize_consistent_signs_at_roots_copr p qs2))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs1).\n        \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                              qs2).\n           x = x1 @ x2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       x \\<in> set (signs_smash\n                     (characterize_consistent_signs_at_roots_copr p qs1)\n                     (characterize_consistent_signs_at_roots_copr p qs2))", "unfolding signs_smash_def"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr p\n                           qs1).\n        \\<exists>x2\\<in>set (characterize_consistent_signs_at_roots_copr p\n                              qs2).\n           x = x1 @ x2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       x \\<in> set (concat\n                     (map (\\<lambda>l1.\n                              map ((@) l1)\n                               (characterize_consistent_signs_at_roots_copr\n                                 p qs2))\n                       (characterize_consistent_signs_at_roots_copr p qs1)))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr\n                                     p (qs1 @ qs2)).\n                   \\<exists>x1\\<in>set (characterize_consistent_signs_at_roots_copr\n   p qs1).\n                      \\<exists>x2\\<in>set\n (characterize_consistent_signs_at_roots_copr p qs2).\n                         x = x1 @ x2;\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      (qs1 @ qs2))\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>set\n    (characterize_consistent_signs_at_roots_copr p qs1).\n                            x \\<in> (@) xa `\n                                    set (characterize_consistent_signs_at_roots_copr\n    p qs2)", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash\n                   (characterize_consistent_signs_at_roots_copr p qs1)\n                   (characterize_consistent_signs_at_roots_copr p qs2))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash\n                   (characterize_consistent_signs_at_roots_copr p qs1)\n                   (characterize_consistent_signs_at_roots_copr p qs2))", "have \"\\<forall>x \\<in> set (characterize_consistent_signs_at_roots_copr p\n          (qs1 @ qs2)). x \\<in> set (signs_smash signs1 signs2)\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash\n                   (characterize_consistent_signs_at_roots_copr p qs1)\n                   (characterize_consistent_signs_at_roots_copr p qs2))\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       x \\<in> set (signs_smash signs1 signs2)", "using csa1 csa2 subset_smash_signs[of _ signs1 _ signs2]"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash\n                   (characterize_consistent_signs_at_roots_copr p qs1)\n                   (characterize_consistent_signs_at_roots_copr p qs2))\n  set (characterize_consistent_signs_at_roots_copr p qs1)\n  \\<subseteq> set signs1\n  set (characterize_consistent_signs_at_roots_copr p qs2)\n  \\<subseteq> set signs2\n  \\<lbrakk>set ?a1.0 \\<subseteq> set signs1;\n   set ?b1.0 \\<subseteq> set signs2\\<rbrakk>\n  \\<Longrightarrow> set (signs_smash ?a1.0 ?b1.0)\n                    \\<subseteq> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                         (qs1 @ qs2)).\n       x \\<in> set (signs_smash signs1 signs2)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr\n                                     p (qs1 @ qs2)).\n                   x \\<in> set (signs_smash\n                                 (characterize_consistent_signs_at_roots_copr\n                                   p qs1)\n                                 (characterize_consistent_signs_at_roots_copr\n                                   p qs2));\n        set (characterize_consistent_signs_at_roots_copr p qs1)\n        \\<subseteq> set signs1;\n        set (characterize_consistent_signs_at_roots_copr p qs2)\n        \\<subseteq> set signs2;\n        \\<And>a1 b1.\n           \\<lbrakk>set a1 \\<subseteq> set signs1;\n            set b1 \\<subseteq> set signs2\\<rbrakk>\n           \\<Longrightarrow> set (signs_smash a1 b1)\n                             \\<subseteq> set (signs_smash signs1 signs2);\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      (qs1 @ qs2))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (signs_smash signs1 signs2)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (characterize_consistent_signs_at_roots_copr p\n                       (qs1 @ qs2)).\n     x \\<in> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "by blast"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (signs_smash signs1 signs2)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Main Results\""], ["", "lemma dim_row_mat_of_rows_list[simp]:\n  shows \"dim_row (mat_of_rows_list nr ls) = length ls\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat_of_rows_list nr ls) = length ls", "unfolding mat_of_rows_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (mat (length ls) nr (\\<lambda>(i, y). ls ! i ! y)) = length ls", "by auto"], ["", "lemma dim_col_mat_of_rows_list[simp]:\n  shows \"dim_col (mat_of_rows_list nr ls) = nr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (mat_of_rows_list nr ls) = nr", "unfolding mat_of_rows_list_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (mat (length ls) nr (\\<lambda>(i, y). ls ! i ! y)) = nr", "by auto"], ["", "lemma dim_row_matrix_A[simp]:\n  shows \"dim_row (matrix_A signs subsets) = length subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (M_mat signs subsets) = length subsets", "unfolding matrix_A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat_of_rows_list (length signs) (map (mtx_row signs) subsets)) =\n    length subsets", "by auto"], ["", "lemma dim_col_matrix_A[simp]:\n  shows \"dim_col (matrix_A signs subsets) = length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (M_mat signs subsets) = length signs", "unfolding matrix_A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (mat_of_rows_list (length signs) (map (mtx_row signs) subsets)) =\n    length signs", "by auto"], ["", "lemma length_signs_smash:\n  shows\n    \"length (signs_smash signs1 signs2) = length signs1 * length signs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (signs_smash signs1 signs2) = length signs1 * length signs2", "unfolding signs_smash_def length_concat"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (map length (map (\\<lambda>l1. map ((@) l1) signs2) signs1)) =\n    length signs1 * length signs2", "by (auto simp add: o_def sum_list_triv)"], ["", "lemma length_subsets_smash:\n  shows\n    \"length (subsets_smash n subs1 subs2) = length subs1 * length subs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (subsets_smash n subs1 subs2) = length subs1 * length subs2", "unfolding subsets_smash_def length_concat"], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list\n     (map length\n       (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n) l2) subs2)\n         subs1)) =\n    length subs1 * length subs2", "by (auto simp add: o_def sum_list_triv)"], ["", "lemma length_eq_concat:\n  assumes \"\\<And>x. x \\<in> set ls \\<Longrightarrow> length x = n\"\n  assumes \"i < n * length ls\"\n  shows \"concat ls ! i = ls ! (i div n) ! (i mod n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. concat ls ! i = ls ! (i div n) ! (i mod n)", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set ls \\<Longrightarrow> length ?x = n\n  i < n * length ls\n\ngoal (1 subgoal):\n 1. concat ls ! i = ls ! (i div n) ! (i mod n)", "proof (induct ls arbitrary: i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>x. x \\<in> set [] \\<Longrightarrow> length x = n;\n        i < n * length []\\<rbrakk>\n       \\<Longrightarrow> concat [] ! i = [] ! (i div n) ! (i mod n)\n 2. \\<And>a ls i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>\\<And>x.\n                               x \\<in> set ls \\<Longrightarrow>\n                               length x = n;\n                    i < n * length ls\\<rbrakk>\n                   \\<Longrightarrow> concat ls ! i =\n                                     ls ! (i div n) ! (i mod n);\n        \\<And>x. x \\<in> set (a # ls) \\<Longrightarrow> length x = n;\n        i < n * length (a # ls)\\<rbrakk>\n       \\<Longrightarrow> concat (a # ls) ! i =\n                         (a # ls) ! (i div n) ! (i mod n)", "case Nil"], ["proof (state)\nthis:\n  ?x \\<in> set [] \\<Longrightarrow> length ?x = n\n  i < n * length []\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<And>x. x \\<in> set [] \\<Longrightarrow> length x = n;\n        i < n * length []\\<rbrakk>\n       \\<Longrightarrow> concat [] ! i = [] ! (i div n) ! (i mod n)\n 2. \\<And>a ls i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>\\<And>x.\n                               x \\<in> set ls \\<Longrightarrow>\n                               length x = n;\n                    i < n * length ls\\<rbrakk>\n                   \\<Longrightarrow> concat ls ! i =\n                                     ls ! (i div n) ! (i mod n);\n        \\<And>x. x \\<in> set (a # ls) \\<Longrightarrow> length x = n;\n        i < n * length (a # ls)\\<rbrakk>\n       \\<Longrightarrow> concat (a # ls) ! i =\n                         (a # ls) ! (i div n) ! (i mod n)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set [] \\<Longrightarrow> length ?x = n\n  i < n * length []", "show ?case"], ["proof (prove)\nusing this:\n  ?x \\<in> set [] \\<Longrightarrow> length ?x = n\n  i < n * length []\n\ngoal (1 subgoal):\n 1. concat [] ! i = [] ! (i div n) ! (i mod n)", "by simp"], ["proof (state)\nthis:\n  concat [] ! i = [] ! (i div n) ! (i mod n)\n\ngoal (1 subgoal):\n 1. \\<And>a ls i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>\\<And>x.\n                               x \\<in> set ls \\<Longrightarrow>\n                               length x = n;\n                    i < n * length ls\\<rbrakk>\n                   \\<Longrightarrow> concat ls ! i =\n                                     ls ! (i div n) ! (i mod n);\n        \\<And>x. x \\<in> set (a # ls) \\<Longrightarrow> length x = n;\n        i < n * length (a # ls)\\<rbrakk>\n       \\<Longrightarrow> concat (a # ls) ! i =\n                         (a # ls) ! (i div n) ! (i mod n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ls i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>\\<And>x.\n                               x \\<in> set ls \\<Longrightarrow>\n                               length x = n;\n                    i < n * length ls\\<rbrakk>\n                   \\<Longrightarrow> concat ls ! i =\n                                     ls ! (i div n) ! (i mod n);\n        \\<And>x. x \\<in> set (a # ls) \\<Longrightarrow> length x = n;\n        i < n * length (a # ls)\\<rbrakk>\n       \\<Longrightarrow> concat (a # ls) ! i =\n                         (a # ls) ! (i div n) ! (i mod n)", "case (Cons a ls)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x. x \\<in> set ls \\<Longrightarrow> length x = n;\n   ?i < n * length ls\\<rbrakk>\n  \\<Longrightarrow> concat ls ! ?i = ls ! (?i div n) ! (?i mod n)\n  ?x \\<in> set (a # ls) \\<Longrightarrow> length ?x = n\n  i < n * length (a # ls)\n\ngoal (1 subgoal):\n 1. \\<And>a ls i.\n       \\<lbrakk>\\<And>i.\n                   \\<lbrakk>\\<And>x.\n                               x \\<in> set ls \\<Longrightarrow>\n                               length x = n;\n                    i < n * length ls\\<rbrakk>\n                   \\<Longrightarrow> concat ls ! i =\n                                     ls ! (i div n) ! (i mod n);\n        \\<And>x. x \\<in> set (a # ls) \\<Longrightarrow> length x = n;\n        i < n * length (a # ls)\\<rbrakk>\n       \\<Longrightarrow> concat (a # ls) ! i =\n                         (a # ls) ! (i div n) ! (i mod n)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x. x \\<in> set ls \\<Longrightarrow> length x = n;\n   ?i < n * length ls\\<rbrakk>\n  \\<Longrightarrow> concat ls ! ?i = ls ! (?i div n) ! (?i mod n)\n  ?x \\<in> set (a # ls) \\<Longrightarrow> length ?x = n\n  i < n * length (a # ls)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x. x \\<in> set ls \\<Longrightarrow> length x = n;\n   ?i < n * length ls\\<rbrakk>\n  \\<Longrightarrow> concat ls ! ?i = ls ! (?i div n) ! (?i mod n)\n  ?x \\<in> set (a # ls) \\<Longrightarrow> length ?x = n\n  i < n * length (a # ls)\n\ngoal (1 subgoal):\n 1. concat (a # ls) ! i = (a # ls) ! (i div n) ! (i mod n)", "apply (auto simp add: nth_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                i < n * length ls \\<Longrightarrow>\n                concat ls ! i = ls ! (i div n) ! (i mod n);\n     \\<And>x. x = a \\<or> x \\<in> set ls \\<Longrightarrow> length x = n;\n     i < n + n * length ls; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> ls ! ((i - n) div n) ! ((i - n) mod n) =\n                      (a # ls) ! (i div n) ! (i mod n)", "using div_if mod_geq"], ["proof (prove)\nusing this:\n  ?m div ?n = (if ?m < ?n \\<or> ?n = 0 then 0 else Suc ((?m - ?n) div ?n))\n  \\<not> ?m < ?n \\<Longrightarrow> ?m mod ?n = (?m - ?n) mod ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>i.\n                i < n * length ls \\<Longrightarrow>\n                concat ls ! i = ls ! (i div n) ! (i mod n);\n     \\<And>x. x = a \\<or> x \\<in> set ls \\<Longrightarrow> length x = n;\n     i < n + n * length ls; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> ls ! ((i - n) div n) ! ((i - n) mod n) =\n                      (a # ls) ! (i div n) ! (i mod n)", "by auto"], ["proof (state)\nthis:\n  concat (a # ls) ! i = (a # ls) ! (i div n) ! (i mod n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma z_append:\n  assumes \"\\<And>i. i \\<in> set xs \\<Longrightarrow> i < length as\"\n  shows \"z (xs @ (map ((+) (length as)) ys)) (as @ bs) = z xs as * z ys bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs", "have 1: \"map ((!) (as @ bs)) xs = map ((!) as) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (as @ bs)) xs = map ((!) as) xs", "unfolding list_eq_iff_nth_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map ((!) (as @ bs)) xs) = length (map ((!) as) xs) \\<and>\n    (\\<forall>i<length (map ((!) (as @ bs)) xs).\n        map ((!) (as @ bs)) xs ! i = map ((!) as) xs ! i)", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> set xs \\<Longrightarrow> ?i < length as\n\ngoal (1 subgoal):\n 1. length (map ((!) (as @ bs)) xs) = length (map ((!) as) xs) \\<and>\n    (\\<forall>i<length (map ((!) (as @ bs)) xs).\n        map ((!) (as @ bs)) xs ! i = map ((!) as) xs ! i)", "by (auto simp add:nth_append)"], ["proof (state)\nthis:\n  map ((!) (as @ bs)) xs = map ((!) as) xs\n\ngoal (1 subgoal):\n 1. z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs", "have 2: \"map ((!) (as @ bs) \\<circ> (+) (length as)) ys = map ((!) bs) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (as @ bs) \\<circ> (+) (length as)) ys = map ((!) bs) ys", "unfolding list_eq_iff_nth_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map ((!) (as @ bs) \\<circ> (+) (length as)) ys) =\n    length (map ((!) bs) ys) \\<and>\n    (\\<forall>i<length (map ((!) (as @ bs) \\<circ> (+) (length as)) ys).\n        map ((!) (as @ bs) \\<circ> (+) (length as)) ys ! i =\n        map ((!) bs) ys ! i)", "using assms"], ["proof (prove)\nusing this:\n  ?i \\<in> set xs \\<Longrightarrow> ?i < length as\n\ngoal (1 subgoal):\n 1. length (map ((!) (as @ bs) \\<circ> (+) (length as)) ys) =\n    length (map ((!) bs) ys) \\<and>\n    (\\<forall>i<length (map ((!) (as @ bs) \\<circ> (+) (length as)) ys).\n        map ((!) (as @ bs) \\<circ> (+) (length as)) ys ! i =\n        map ((!) bs) ys ! i)", "by auto"], ["proof (state)\nthis:\n  map ((!) (as @ bs) \\<circ> (+) (length as)) ys = map ((!) bs) ys\n\ngoal (1 subgoal):\n 1. z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs", "unfolding z_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map ((!) (as @ bs)) (xs @ map ((+) (length as)) ys)) =\n    prod_list (map ((!) as) xs) * prod_list (map ((!) bs) ys)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map ((!) (as @ bs)) xs) *\n    prod_list (map ((!) (as @ bs) \\<circ> (+) (length as)) ys) =\n    prod_list (map ((!) as) xs) * prod_list (map ((!) bs) ys)", "unfolding 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. prod_list (map ((!) as) xs) * prod_list (map ((!) bs) ys) =\n    prod_list (map ((!) as) xs) * prod_list (map ((!) bs) ys)", "by auto"], ["proof (state)\nthis:\n  z (xs @ map ((+) (length as)) ys) (as @ bs) = z xs as * z ys bs\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Shows that the matrix of a smashed system is the Kronecker product of the matrices of the two\n  systems being combined *)"], ["", "lemma matrix_construction_is_kronecker_product: \n  fixes qs1 :: \"real poly list\"\n  fixes subs1 subs2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\"\n    (* n1 is the number of polynomials in the \"1\" sets *)\n  assumes \"\\<And>l i. l \\<in> set subs1 \\<Longrightarrow> i \\<in> set l \\<Longrightarrow> i < n1\"\n  assumes \"\\<And>j. j \\<in> set signs1 \\<Longrightarrow> length j = n1\"\n  shows \"\n    (matrix_A (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2)) =\n    kronecker_product (matrix_A signs1 subs1) (matrix_A signs2 subs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) =\n    kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2)", "unfolding mat_eq_iff dim_row_matrix_A dim_col_matrix_A\n    length_subsets_smash length_signs_smash dim_kronecker"], ["proof (prove)\ngoal (1 subgoal):\n 1. length subs1 * length subs2 = length subs1 * length subs2 \\<and>\n    length signs1 * length signs2 = length signs1 * length signs2 \\<and>\n    (\\<forall>i j.\n        i < length subs1 * length subs2 \\<longrightarrow>\n        j < length signs1 * length signs2 \\<longrightarrow>\n        M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n        (i, j) =\n        kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$\n        (i, j))", "proof safe"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "assume i: \"i < length subs1 * length subs2\"\n     and j: \"j < length signs1 * length signs2\""], ["proof (state)\nthis:\n  i < length subs1 * length subs2\n  j < length signs1 * length signs2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have ld: \"i div length subs2 < length subs1\"\n    \"j div length signs2 < length signs1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i div length subs2 < length subs1 &&&\n    j div length signs2 < length signs1", "using i j less_mult_imp_div_less"], ["proof (prove)\nusing this:\n  i < length subs1 * length subs2\n  j < length signs1 * length signs2\n  ?m < ?i * ?n \\<Longrightarrow> ?m div ?n < ?i\n\ngoal (1 subgoal):\n 1. i div length subs2 < length subs1 &&&\n    j div length signs2 < length signs1", "by auto"], ["proof (state)\nthis:\n  i div length subs2 < length subs1\n  j div length signs2 < length signs1\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have lm: \"i mod length subs2 < length subs2\"\n    \"j mod length signs2 < length signs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i mod length subs2 < length subs2 &&&\n    j mod length signs2 < length signs2", "using i j less_mult_imp_mod_less"], ["proof (prove)\nusing this:\n  i < length subs1 * length subs2\n  j < length signs1 * length signs2\n  ?m < ?n * ?i \\<Longrightarrow> ?m mod ?i < ?i\n\ngoal (1 subgoal):\n 1. i mod length subs2 < length subs2 &&&\n    j mod length signs2 < length signs2", "by auto"], ["proof (state)\nthis:\n  i mod length subs2 < length subs2\n  j mod length signs2 < length signs2\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have n1: \"n1 = length (signs1 ! (j div length signs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n1 = length (signs1 ! (j div length signs2))", "using assms(2) ld(2) nth_mem"], ["proof (prove)\nusing this:\n  ?j \\<in> set signs1 \\<Longrightarrow> length ?j = n1\n  j div length signs2 < length signs1\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. n1 = length (signs1 ! (j div length signs2))", "by blast"], ["proof (state)\nthis:\n  n1 = length (signs1 ! (j div length signs2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have 1: \"matrix_A (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$ (i, j) =\n    z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n    (i, j) =\n    z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)", "unfolding mat_of_rows_list_def matrix_A_def mtx_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat (length\n          (map (\\<lambda>index_list.\n                   map (z index_list) (signs_smash signs1 signs2))\n            (subsets_smash n1 subs1 subs2)))\n     (length (signs_smash signs1 signs2))\n     (\\<lambda>(i, y).\n         map (\\<lambda>index_list.\n                 map (z index_list) (signs_smash signs1 signs2))\n          (subsets_smash n1 subs1 subs2) !\n         i !\n         y) $$\n    (i, j) =\n    z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)", "using i j"], ["proof (prove)\nusing this:\n  i < length subs1 * length subs2\n  j < length signs1 * length signs2\n\ngoal (1 subgoal):\n 1. mat (length\n          (map (\\<lambda>index_list.\n                   map (z index_list) (signs_smash signs1 signs2))\n            (subsets_smash n1 subs1 subs2)))\n     (length (signs_smash signs1 signs2))\n     (\\<lambda>(i, y).\n         map (\\<lambda>index_list.\n                 map (z index_list) (signs_smash signs1 signs2))\n          (subsets_smash n1 subs1 subs2) !\n         i !\n         y) $$\n    (i, j) =\n    z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)", "by (simp add: length_signs_smash length_subsets_smash)"], ["proof (state)\nthis:\n  M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n  (i, j) =\n  z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have 2: \" ... = z (subs1 ! (i div length subs2) @ map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "unfolding signs_smash_def subsets_smash_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. z (concat\n        (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n          subs1) !\n       i)\n     (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1) ! j) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "apply (subst length_eq_concat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>l1.\n                            map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n                     subs1) \\<Longrightarrow>\n       length x = ?n\n 2. i < ?n *\n        length\n         (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n           subs1)\n 3. z (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n        subs1 !\n       (i div ?n) !\n       (i mod ?n))\n     (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1) ! j) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "using i"], ["proof (prove)\nusing this:\n  i < length subs1 * length subs2\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<in> set (map (\\<lambda>l1.\n                            map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n                     subs1) \\<Longrightarrow>\n       length x = ?n\n 2. i < ?n *\n        length\n         (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n           subs1)\n 3. z (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n        subs1 !\n       (i div ?n) !\n       (i mod ?n))\n     (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1) ! j) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "apply (auto simp add: mult.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length subs1 * length subs2 \\<Longrightarrow>\n    z (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n        subs1 !\n       (i div length subs2) !\n       (i mod length subs2))\n     (concat (map (\\<lambda>l1. map ((@) l1) signs2) signs1) ! j) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "apply (subst length_eq_concat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i < length subs1 * length subs2;\n        x \\<in> set (map (\\<lambda>l1. map ((@) l1) signs2) signs1)\\<rbrakk>\n       \\<Longrightarrow> length x = ?n11\n 2. i < length subs1 * length subs2 \\<Longrightarrow>\n    j < ?n11 * length (map (\\<lambda>l1. map ((@) l1) signs2) signs1)\n 3. i < length subs1 * length subs2 \\<Longrightarrow>\n    z (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n        subs1 !\n       (i div length subs2) !\n       (i mod length subs2))\n     (map (\\<lambda>l1. map ((@) l1) signs2) signs1 ! (j div ?n11) !\n      (j mod ?n11)) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "using j"], ["proof (prove)\nusing this:\n  j < length signs1 * length signs2\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>i < length subs1 * length subs2;\n        x \\<in> set (map (\\<lambda>l1. map ((@) l1) signs2) signs1)\\<rbrakk>\n       \\<Longrightarrow> length x = ?n11\n 2. i < length subs1 * length subs2 \\<Longrightarrow>\n    j < ?n11 * length (map (\\<lambda>l1. map ((@) l1) signs2) signs1)\n 3. i < length subs1 * length subs2 \\<Longrightarrow>\n    z (map (\\<lambda>l1. map (\\<lambda>l2. l1 @ map ((+) n1) l2) subs2)\n        subs1 !\n       (i div length subs2) !\n       (i mod length subs2))\n     (map (\\<lambda>l1. map ((@) l1) signs2) signs1 ! (j div ?n11) !\n      (j mod ?n11)) =\n    z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))", "apply (auto simp add: mult.commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> z (map (\\<lambda>l1.\n                                 map (\\<lambda>l2. l1 @ map ((+) n1) l2)\n                                  subs2)\n                          subs1 !\n                         (i div length subs2) !\n                         (i mod length subs2))\n                       (map (\\<lambda>l1. map ((@) l1) signs2) signs1 !\n                        (j div length signs2) !\n                        (j mod length signs2)) =\n                      z (subs1 ! (i div length subs2) @\n                         map ((+) n1) (subs2 ! (i mod length subs2)))\n                       (signs1 ! (j div length signs2) @\n                        signs2 ! (j mod length signs2))", "using ld lm"], ["proof (prove)\nusing this:\n  i div length subs2 < length subs1\n  j div length signs2 < length signs1\n  i mod length subs2 < length subs2\n  j mod length signs2 < length signs2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> z (map (\\<lambda>l1.\n                                 map (\\<lambda>l2. l1 @ map ((+) n1) l2)\n                                  subs2)\n                          subs1 !\n                         (i div length subs2) !\n                         (i mod length subs2))\n                       (map (\\<lambda>l1. map ((@) l1) signs2) signs1 !\n                        (j div length signs2) !\n                        (j mod length signs2)) =\n                      z (subs1 ! (i div length subs2) @\n                         map ((+) n1) (subs2 ! (i mod length subs2)))\n                       (signs1 ! (j div length signs2) @\n                        signs2 ! (j mod length signs2))", "by auto"], ["proof (state)\nthis:\n  z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j) =\n  z (subs1 ! (i div length subs2) @\n     map ((+) n1) (subs2 ! (i mod length subs2)))\n   (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have 3: \"... =\n  z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n  z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z (subs1 ! (i div length subs2) @\n       map ((+) n1) (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2)) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "unfolding n1"], ["proof (prove)\ngoal (1 subgoal):\n 1. z (subs1 ! (i div length subs2) @\n       map ((+) (length (signs1 ! (j div length signs2))))\n        (subs2 ! (i mod length subs2)))\n     (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2)) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "apply (subst z_append)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>ia.\n       ia \\<in> set (subs1 ! (i div length subs2)) \\<Longrightarrow>\n       ia < length (signs1 ! (j div length signs2))\n 2. z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2)) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "apply (auto simp add: n1[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> set (subs1 ! (i div length subs2)) \\<Longrightarrow> ia < n1", "using assms(1) ld(1) nth_mem"], ["proof (prove)\nusing this:\n  \\<lbrakk>?l \\<in> set subs1; ?i \\<in> set ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < n1\n  i div length subs2 < length subs1\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> set (subs1 ! (i div length subs2)) \\<Longrightarrow> ia < n1", "by blast"], ["proof (state)\nthis:\n  z (subs1 ! (i div length subs2) @\n     map ((+) n1) (subs2 ! (i mod length subs2)))\n   (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2)) =\n  z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n  z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "have 4: \"kronecker_product (matrix_A signs1 subs1) (matrix_A signs2 subs2) $$ (i,j) =\n    z (subs1 ! (i div length subs2))\n     (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2))\n     (signs2 ! (j mod length signs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "unfolding kronecker_product_def matrix_A_def mat_of_rows_list_def mtx_row_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (let ra = dim_row\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs1)\n                        subs1))\n                 (length signs1)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs1)\n                      subs1 !\n                     i !\n                     y));\n         ca = dim_col\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs1)\n                        subs1))\n                 (length signs1)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs1)\n                      subs1 !\n                     i !\n                     y));\n         rb = dim_row\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs2)\n                        subs2))\n                 (length signs2)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs2)\n                      subs2 !\n                     i !\n                     y));\n         cb = dim_col\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs2)\n                        subs2))\n                 (length signs2)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs2)\n                      subs2 !\n                     i !\n                     y))\n     in mat (ra * rb) (ca * cb)\n         (\\<lambda>(i, j).\n             mat (length\n                   (map (\\<lambda>index_list. map (z index_list) signs1)\n                     subs1))\n              (length signs1)\n              (\\<lambda>(i, y).\n                  map (\\<lambda>index_list. map (z index_list) signs1)\n                   subs1 !\n                  i !\n                  y) $$\n             (i div rb, j div cb) *\n             mat (length\n                   (map (\\<lambda>index_list. map (z index_list) signs2)\n                     subs2))\n              (length signs2)\n              (\\<lambda>(i, y).\n                  map (\\<lambda>index_list. map (z index_list) signs2)\n                   subs2 !\n                  i !\n                  y) $$\n             (i mod rb, j mod cb))) $$\n    (i, j) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "using i j"], ["proof (prove)\nusing this:\n  i < length subs1 * length subs2\n  j < length signs1 * length signs2\n\ngoal (1 subgoal):\n 1. (let ra = dim_row\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs1)\n                        subs1))\n                 (length signs1)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs1)\n                      subs1 !\n                     i !\n                     y));\n         ca = dim_col\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs1)\n                        subs1))\n                 (length signs1)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs1)\n                      subs1 !\n                     i !\n                     y));\n         rb = dim_row\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs2)\n                        subs2))\n                 (length signs2)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs2)\n                      subs2 !\n                     i !\n                     y));\n         cb = dim_col\n               (mat (length\n                      (map (\\<lambda>index_list. map (z index_list) signs2)\n                        subs2))\n                 (length signs2)\n                 (\\<lambda>(i, y).\n                     map (\\<lambda>index_list. map (z index_list) signs2)\n                      subs2 !\n                     i !\n                     y))\n     in mat (ra * rb) (ca * cb)\n         (\\<lambda>(i, j).\n             mat (length\n                   (map (\\<lambda>index_list. map (z index_list) signs1)\n                     subs1))\n              (length signs1)\n              (\\<lambda>(i, y).\n                  map (\\<lambda>index_list. map (z index_list) signs1)\n                   subs1 !\n                  i !\n                  y) $$\n             (i div rb, j div cb) *\n             mat (length\n                   (map (\\<lambda>index_list. map (z index_list) signs2)\n                     subs2))\n              (length signs2)\n              (\\<lambda>(i, y).\n                  map (\\<lambda>index_list. map (z index_list) signs2)\n                   subs2 !\n                  i !\n                  y) $$\n             (i mod rb, j mod cb))) $$\n    (i, j) =\n    z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n    z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))", "apply (auto simp add: Let_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> mat (length subs1) (length signs1)\n                       (\\<lambda>(i, y).\n                           map (\\<lambda>index_list.\n                                   map (z index_list) signs1)\n                            subs1 !\n                           i !\n                           y) $$\n                      (i div length subs2, j div length signs2) *\n                      mat (length subs2) (length signs2)\n                       (\\<lambda>(i, y).\n                           map (\\<lambda>index_list.\n                                   map (z index_list) signs2)\n                            subs2 !\n                           i !\n                           y) $$\n                      (i mod length subs2, j mod length signs2) =\n                      z (subs1 ! (i div length subs2))\n                       (signs1 ! (j div length signs2)) *\n                      z (subs2 ! (i mod length subs2))\n                       (signs2 ! (j mod length signs2))", "apply (subst index_mat(1)[OF ld])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> (case (i div length subs2, j div length signs2) of\n                       (i, x) \\<Rightarrow>\n                         map (\\<lambda>index_list.\n                                 map (z index_list) signs1)\n                          subs1 !\n                         i !\n                         x) *\n                      mat (length subs2) (length signs2)\n                       (\\<lambda>(i, y).\n                           map (\\<lambda>index_list.\n                                   map (z index_list) signs2)\n                            subs2 !\n                           i !\n                           y) $$\n                      (i mod length subs2, j mod length signs2) =\n                      z (subs1 ! (i div length subs2))\n                       (signs1 ! (j div length signs2)) *\n                      z (subs2 ! (i mod length subs2))\n                       (signs2 ! (j mod length signs2))", "apply (subst index_mat(1)[OF lm])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> (case (i div length subs2, j div length signs2) of\n                       (i, x) \\<Rightarrow>\n                         map (\\<lambda>index_list.\n                                 map (z index_list) signs1)\n                          subs1 !\n                         i !\n                         x) *\n                      (case (i mod length subs2, j mod length signs2) of\n                       (i, x) \\<Rightarrow>\n                         map (\\<lambda>index_list.\n                                 map (z index_list) signs2)\n                          subs2 !\n                         i !\n                         x) =\n                      z (subs1 ! (i div length subs2))\n                       (signs1 ! (j div length signs2)) *\n                      z (subs2 ! (i mod length subs2))\n                       (signs2 ! (j mod length signs2))", "using ld lm"], ["proof (prove)\nusing this:\n  i div length subs2 < length subs1\n  j div length signs2 < length signs1\n  i mod length subs2 < length subs2\n  j mod length signs2 < length signs2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length subs1 * length subs2;\n     j < length signs1 * length signs2\\<rbrakk>\n    \\<Longrightarrow> (case (i div length subs2, j div length signs2) of\n                       (i, x) \\<Rightarrow>\n                         map (\\<lambda>index_list.\n                                 map (z index_list) signs1)\n                          subs1 !\n                         i !\n                         x) *\n                      (case (i mod length subs2, j mod length signs2) of\n                       (i, x) \\<Rightarrow>\n                         map (\\<lambda>index_list.\n                                 map (z index_list) signs2)\n                          subs2 !\n                         i !\n                         x) =\n                      z (subs1 ! (i div length subs2))\n                       (signs1 ! (j div length signs2)) *\n                      z (subs2 ! (i mod length subs2))\n                       (signs2 ! (j mod length signs2))", "by auto"], ["proof (state)\nthis:\n  kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j) =\n  z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n  z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < length subs1 * length subs2;\n        j < length signs1 * length signs2\\<rbrakk>\n       \\<Longrightarrow> M_mat (signs_smash signs1 signs2)\n                          (subsets_smash n1 subs1 subs2) $$\n                         (i, j) =\n                         kronecker_product (M_mat signs1 subs1)\n                          (M_mat signs2 subs2) $$\n                         (i, j)", "show \"matrix_A (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$ (i, j) =\n        kronecker_product (matrix_A signs1 subs1) (matrix_A signs2 subs2) $$ (i, j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n    (i, j) =\n    kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j)", "using 1 2 3 4"], ["proof (prove)\nusing this:\n  M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n  (i, j) =\n  z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j)\n  z (subsets_smash n1 subs1 subs2 ! i) (signs_smash signs1 signs2 ! j) =\n  z (subs1 ! (i div length subs2) @\n     map ((+) n1) (subs2 ! (i mod length subs2)))\n   (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2))\n  z (subs1 ! (i div length subs2) @\n     map ((+) n1) (subs2 ! (i mod length subs2)))\n   (signs1 ! (j div length signs2) @ signs2 ! (j mod length signs2)) =\n  z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n  z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))\n  kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j) =\n  z (subs1 ! (i div length subs2)) (signs1 ! (j div length signs2)) *\n  z (subs2 ! (i mod length subs2)) (signs2 ! (j mod length signs2))\n\ngoal (1 subgoal):\n 1. M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n    (i, j) =\n    kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  M_mat (signs_smash signs1 signs2) (subsets_smash n1 subs1 subs2) $$\n  (i, j) =\n  kronecker_product (M_mat signs1 subs1) (M_mat signs2 subs2) $$ (i, j)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Given that two smaller systems satisfy some mild constraints, show that their combined system\n  (after smashing the signs and subsets) satisfies the matrix equation, and that the matrix of the\n  combined system is invertible. *)"], ["", "lemma inductive_step:\n  fixes p:: \"real poly\"\n  fixes qs1 qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes welldefined_signs1: \"well_def_signs (length qs1) signs1\"\n  assumes welldefined_signs2: \"well_def_signs (length qs2) signs2\"\n  assumes distinct_signs1: \"distinct signs1\"\n  assumes distinct_signs2: \"distinct signs2\"\n  assumes all_info1: \"set (characterize_consistent_signs_at_roots_copr p qs1) \\<subseteq> set(signs1)\"\n  assumes all_info2: \"set (characterize_consistent_signs_at_roots_copr p qs2) \\<subseteq> set(signs2)\"\n  assumes welldefined_subsets1: \"all_list_constr (subsets1) (length qs1)\"\n  assumes welldefined_subsets2: \"all_list_constr (subsets2) (length qs2)\"\n  assumes invertibleMtx1: \"invertible_mat (matrix_A signs1 subsets1)\"\n  assumes invertibleMtx2: \"invertible_mat (matrix_A signs2 subsets2)\"\n  shows \"satisfy_equation p (qs1@qs2) (subsets_smash (length qs1) subsets1 subsets2) (signs_smash signs1 signs2) \n        \\<and> invertible_mat (matrix_A (signs_smash signs1 signs2) (subsets_smash (length qs1) subsets1 subsets2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h1: \"invertible_mat (matrix_A (signs_smash signs1 signs2) (subsets_smash (length qs1) subsets1 subsets2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "using matrix_construction_is_kronecker_product\n      kronecker_invertible invertibleMtx1 invertibleMtx2\n      welldefined_subsets1 welldefined_subsets2"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>l i.\n              \\<lbrakk>l \\<in> set ?subs1.0; i \\<in> set l\\<rbrakk>\n              \\<Longrightarrow> i < ?n1.0;\n   \\<And>j.\n      j \\<in> set ?signs1.0 \\<Longrightarrow> length j = ?n1.0\\<rbrakk>\n  \\<Longrightarrow> M_mat (signs_smash ?signs1.0 ?signs2.0)\n                     (subsets_smash ?n1.0 ?subs1.0 ?subs2.0) =\n                    kronecker_product (M_mat ?signs1.0 ?subs1.0)\n                     (M_mat ?signs2.0 ?subs2.0)\n  \\<lbrakk>invertible_mat ?A; invertible_mat ?B\\<rbrakk>\n  \\<Longrightarrow> invertible_mat (kronecker_product ?A ?B)\n  invertible_mat (M_mat signs1 subsets1)\n  invertible_mat (M_mat signs2 subsets2)\n  all_list_constr subsets1 (length qs1)\n  all_list_constr subsets2 (length qs2)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "unfolding all_list_constr_def list_constr_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>l i.\n              \\<lbrakk>l \\<in> set ?subs1.0; i \\<in> set l\\<rbrakk>\n              \\<Longrightarrow> i < ?n1.0;\n   \\<And>j.\n      j \\<in> set ?signs1.0 \\<Longrightarrow> length j = ?n1.0\\<rbrakk>\n  \\<Longrightarrow> M_mat (signs_smash ?signs1.0 ?signs2.0)\n                     (subsets_smash ?n1.0 ?subs1.0 ?subs2.0) =\n                    kronecker_product (M_mat ?signs1.0 ?subs1.0)\n                     (M_mat ?signs2.0 ?subs2.0)\n  \\<lbrakk>invertible_mat ?A; invertible_mat ?B\\<rbrakk>\n  \\<Longrightarrow> invertible_mat (kronecker_product ?A ?B)\n  invertible_mat (M_mat signs1 subsets1)\n  invertible_mat (M_mat signs2 subsets2)\n  \\<forall>x.\n     List.member subsets1 x \\<longrightarrow>\n     list_all (\\<lambda>x. x < length qs1) x\n  \\<forall>x.\n     List.member subsets2 x \\<longrightarrow>\n     list_all (\\<lambda>x. x < length qs2) x\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "by (smt in_set_conv_nth in_set_member list_all_length well_def_signs_def welldefined_signs1)"], ["proof (state)\nthis:\n  invertible_mat\n   (M_mat (signs_smash signs1 signs2)\n     (subsets_smash (length qs1) subsets1 subsets2))\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2a: \"distinct (signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (signs_smash signs1 signs2)", "using distinct_signs1 distinct_signs2 welldefined_signs1 welldefined_signs2 nontriv1 nontriv2 \n      distinct_step"], ["proof (prove)\nusing this:\n  distinct signs1\n  distinct signs2\n  well_def_signs (length qs1) signs1\n  well_def_signs (length qs2) signs2\n  0 < length qs1\n  0 < length qs2\n  \\<lbrakk>well_def_signs ?n1.0 ?signs1.0; well_def_signs ?n2.0 ?signs2.0;\n   distinct ?signs1.0; distinct ?signs2.0\\<rbrakk>\n  \\<Longrightarrow> distinct (signs_smash ?signs1.0 ?signs2.0)\n\ngoal (1 subgoal):\n 1. distinct (signs_smash signs1 signs2)", "by auto"], ["proof (state)\nthis:\n  distinct (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2ba: \"\\<forall> q. List.member (qs1 @ qs2) q \\<longrightarrow> (List.member qs1 q \\<or> List.member qs2 q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       List.member (qs1 @ qs2) q \\<longrightarrow>\n       List.member qs1 q \\<or> List.member qs2 q", "unfolding member_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       q \\<in> set (qs1 @ qs2) \\<longrightarrow>\n       q \\<in> set qs1 \\<or> q \\<in> set qs2", "by auto"], ["proof (state)\nthis:\n  \\<forall>q.\n     List.member (qs1 @ qs2) q \\<longrightarrow>\n     List.member qs1 q \\<or> List.member qs2 q\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2b: \"\\<forall>q. ((List.member (qs1@qs2) q) \\<longrightarrow> (coprime p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q", "using h2ba pairwise_rel_prime1 pairwise_rel_prime2"], ["proof (prove)\nusing this:\n  \\<forall>q.\n     List.member (qs1 @ qs2) q \\<longrightarrow>\n     List.member qs1 q \\<or> List.member qs2 q\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q", "by auto"], ["proof (state)\nthis:\n  \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2c: \"all_list_constr ((subsets_smash (length qs1) subsets1 subsets2)) (length (qs1@qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "using well_def_step\n      welldefined_subsets1 welldefined_subsets2"], ["proof (prove)\nusing this:\n  \\<lbrakk>all_list_constr ?subsets1.0 (length ?qs1.0);\n   all_list_constr ?subsets2.0 (length ?qs2.0)\\<rbrakk>\n  \\<Longrightarrow> all_list_constr\n                     (subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0)\n                     (length (?qs1.0 @ ?qs2.0))\n  all_list_constr subsets1 (length qs1)\n  all_list_constr subsets2 (length qs2)\n\ngoal (1 subgoal):\n 1. all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n     (length (qs1 @ qs2))", "by blast"], ["proof (state)\nthis:\n  all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n   (length (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2d: \"set (characterize_consistent_signs_at_roots_copr p (qs1@qs2)) \\<subseteq> set(signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "using subset_step all_info1 all_info2"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0)\n           \\<subseteq> set ?signs1.0;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs2.0)\n   \\<subseteq> set ?signs2.0\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          (?qs1.0 @ ?qs2.0))\n                    \\<subseteq> set (signs_smash ?signs1.0 ?signs2.0)\n  set (characterize_consistent_signs_at_roots_copr p qs1)\n  \\<subseteq> set signs1\n  set (characterize_consistent_signs_at_roots_copr p qs2)\n  \\<subseteq> set signs2\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (signs_smash signs1 signs2)", "by simp"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "have h2: \"satisfy_equation p (qs1@qs2) (subsets_smash (length qs1) subsets1 subsets2) (signs_smash signs1 signs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2)", "using matrix_equation[where p=\"p\", where qs=\"qs1@qs2\", where subsets = \"subsets_smash (length qs1) subsets1 subsets2\",\n        where signs = \"signs_smash signs1 signs2\"] \n        h2a h2b h2c h2d"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; distinct (signs_smash signs1 signs2);\n   set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n   \\<subseteq> set (signs_smash signs1 signs2);\n   \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q;\n   all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n    (length (qs1 @ qs2))\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                     (subsets_smash (length qs1) subsets1 subsets2)\n                     (signs_smash signs1 signs2)\n  distinct (signs_smash signs1 signs2)\n  \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q\n  all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n   (length (qs1 @ qs2))\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0 \\<Longrightarrow>\n             satisfy_equation p (qs1 @ qs2)\n              (subsets_smash (length qs1) subsets1 subsets2)\n              (signs_smash signs1 signs2);\n     distinct (signs_smash signs1 signs2);\n     \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q;\n     all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n      (length qs1 + length qs2);\n     set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n     \\<subseteq> set (signs_smash signs1 signs2)\\<rbrakk>\n    \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                       (subsets_smash (length qs1) subsets1 subsets2)\n                       (signs_smash signs1 signs2)", "using nonzero"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<noteq> 0 \\<Longrightarrow>\n             satisfy_equation p (qs1 @ qs2)\n              (subsets_smash (length qs1) subsets1 subsets2)\n              (signs_smash signs1 signs2);\n     distinct (signs_smash signs1 signs2);\n     \\<forall>q. List.member (qs1 @ qs2) q \\<longrightarrow> coprime p q;\n     all_list_constr (subsets_smash (length qs1) subsets1 subsets2)\n      (length qs1 + length qs2);\n     set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n     \\<subseteq> set (signs_smash signs1 signs2)\\<rbrakk>\n    \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                       (subsets_smash (length qs1) subsets1 subsets2)\n                       (signs_smash signs1 signs2)", "by blast"], ["proof (state)\nthis:\n  satisfy_equation p (qs1 @ qs2)\n   (subsets_smash (length qs1) subsets1 subsets2)\n   (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "using h1 h2"], ["proof (prove)\nusing this:\n  invertible_mat\n   (M_mat (signs_smash signs1 signs2)\n     (subsets_smash (length qs1) subsets1 subsets2))\n  satisfy_equation p (qs1 @ qs2)\n   (subsets_smash (length qs1) subsets1 subsets2)\n   (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (subsets_smash (length qs1) subsets1 subsets2)\n     (signs_smash signs1 signs2) \\<and>\n    invertible_mat\n     (M_mat (signs_smash signs1 signs2)\n       (subsets_smash (length qs1) subsets1 subsets2))", "by blast"], ["proof (state)\nthis:\n  satisfy_equation p (qs1 @ qs2)\n   (subsets_smash (length qs1) subsets1 subsets2)\n   (signs_smash signs1 signs2) \\<and>\n  invertible_mat\n   (M_mat (signs_smash signs1 signs2)\n     (subsets_smash (length qs1) subsets1 subsets2))\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Reduction Step Proofs\""], ["", "(* Some definitions *)"], ["", "definition get_matrix:: \"(rat mat \\<times> (nat list list \\<times> rat list list)) \\<Rightarrow> rat mat\"\n  where \"get_matrix data = fst(data)\""], ["", "definition get_subsets:: \"(rat mat \\<times> (nat list list \\<times> rat list list)) \\<Rightarrow> nat list list\"\n  where \"get_subsets data = fst(snd(data))\""], ["", "definition get_signs:: \"(rat mat \\<times> (nat list list \\<times> rat list list)) \\<Rightarrow> rat list list\"\n  where \"get_signs data = snd(snd(data))\""], ["", "definition reduction_signs:: \"real poly \\<Rightarrow> real poly list \\<Rightarrow> rat list list \\<Rightarrow> nat list list \\<Rightarrow> rat mat \\<Rightarrow> rat list list\" \n  where \"reduction_signs p qs signs subsets matr = \n    (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets matr)))\""], ["", "definition reduction_subsets:: \"real poly \\<Rightarrow> real poly list \\<Rightarrow> rat list list \\<Rightarrow> nat list list \\<Rightarrow> rat mat \\<Rightarrow> nat list list\" \n  where \"reduction_subsets p qs signs subsets matr = \n    (take_indices subsets (rows_to_keep (reduce_mat_cols matr (solve_for_lhs p qs subsets matr))))\""], ["", "(* Some basic lemmas *)"], ["", "lemma reduction_signs_is_get_signs: \"reduction_signs p qs signs subsets m =  get_signs (reduce_system p (qs, (m, (subsets, signs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduction_signs p qs signs subsets m =\n    get_signs (reduce_system p (qs, m, subsets, signs))", "unfolding reduction_signs_def get_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. take_indices signs\n     (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets m)) =\n    snd (snd (reduce_system p (qs, m, subsets, signs)))", "by (metis reduce_system.simps reduction_step.elims snd_conv)"], ["", "lemma reduction_subsets_is_get_subsets: \"reduction_subsets p qs signs subsets m =  get_subsets (reduce_system p (qs, (m, (subsets, signs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduction_subsets p qs signs subsets m =\n    get_subsets (reduce_system p (qs, m, subsets, signs))", "unfolding reduction_subsets_def get_subsets_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. take_indices subsets\n     (rows_to_keep (reduce_mat_cols m (solve_for_lhs p qs subsets m))) =\n    fst (snd (reduce_system p (qs, m, subsets, signs)))", "by (metis fst_conv reduce_system.simps reduction_step.elims snd_conv)"], ["", "lemma find_zeros_from_vec_prop:\n  fixes input_vec :: \"rat vec\"\n  shows \"\\<forall>n < (dim_vec input_vec). ((input_vec $ n \\<noteq> 0) \\<longleftrightarrow>\n         List.member (find_nonzeros_from_input_vec input_vec) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "have h1: \"\\<forall>n < (dim_vec input_vec). ((input_vec $ n \\<noteq> 0) \\<longrightarrow>  List.member (find_nonzeros_from_input_vec input_vec) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       input_vec $ n \\<noteq> 0 \\<longrightarrow>\n       List.member (find_nonzeros_from_input_vec input_vec) n", "unfolding find_nonzeros_from_input_vec_def List.member_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       input_vec $ n \\<noteq> 0 \\<longrightarrow>\n       n \\<in> set (filter (\\<lambda>i. input_vec $ i \\<noteq> 0)\n                     [0..<dim_vec input_vec])", "by auto"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec input_vec.\n     input_vec $ n \\<noteq> 0 \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec input_vec) n\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "have h2: \"\\<forall>n < (dim_vec input_vec). (List.member (find_nonzeros_from_input_vec input_vec) n \\<longrightarrow> (input_vec $ n \\<noteq> 0) )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       List.member (find_nonzeros_from_input_vec input_vec)\n        n \\<longrightarrow>\n       input_vec $ n \\<noteq> 0", "unfolding find_nonzeros_from_input_vec_def List.member_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       n \\<in> set (filter (\\<lambda>i. input_vec $ i \\<noteq> 0)\n                     [0..<dim_vec input_vec]) \\<longrightarrow>\n       input_vec $ n \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec input_vec.\n     List.member (find_nonzeros_from_input_vec input_vec)\n      n \\<longrightarrow>\n     input_vec $ n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "using h1 h2"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec input_vec.\n     input_vec $ n \\<noteq> 0 \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec input_vec) n\n  \\<forall>n<dim_vec input_vec.\n     List.member (find_nonzeros_from_input_vec input_vec)\n      n \\<longrightarrow>\n     input_vec $ n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec input_vec.\n       (input_vec $ n \\<noteq> 0) =\n       List.member (find_nonzeros_from_input_vec input_vec) n", "by auto"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec input_vec.\n     (input_vec $ n \\<noteq> 0) =\n     List.member (find_nonzeros_from_input_vec input_vec) n\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Showing sign conditions preserved when reducing\""], ["", "lemma take_indices_lem:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes arb_list :: \"'a list list\"\n  fixes index_list :: \"nat list\" \n  fixes n:: \"nat\"\n  assumes lest: \"n < length (take_indices arb_list index_list)\"\n  assumes well_def: \"\\<forall>q.(List.member index_list q \\<longrightarrow> q < length arb_list)\"\n  shows \"\\<exists>k<length arb_list.\n            (take_indices arb_list index_list) ! n =  arb_list ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k<length arb_list.\n       take_indices arb_list index_list ! n = arb_list ! k", "using lest well_def"], ["proof (prove)\nusing this:\n  n < length (take_indices arb_list index_list)\n  \\<forall>q. List.member index_list q \\<longrightarrow> q < length arb_list\n\ngoal (1 subgoal):\n 1. \\<exists>k<length arb_list.\n       take_indices arb_list index_list ! n = arb_list ! k", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  n < length (map ((!) arb_list) index_list)\n  \\<forall>q. List.member index_list q \\<longrightarrow> q < length arb_list\n\ngoal (1 subgoal):\n 1. \\<exists>k<length arb_list.\n       map ((!) arb_list) index_list ! n = arb_list ! k", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < length index_list;\n     \\<forall>q.\n        List.member index_list q \\<longrightarrow>\n        q < length arb_list\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k<length arb_list.\n                         arb_list ! (index_list ! n) = arb_list ! k", "by (metis in_set_member nth_mem)"], ["", "lemma invertible_means_mult_id:\n  fixes A:: \"'a::field mat\"\n  assumes assm: \"invertible_mat A\"\n  shows \"matr_option (dim_row A)\n     (mat_inverse (A))*A = 1\\<^sub>m (dim_row A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "proof (cases \"mat_inverse(A)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "obtain n where n: \"A \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        A \\<in> carrier_mat n n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms invertible_mat_def square_mat.simps"], ["proof (prove)\nusing this:\n  invertible_mat A\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n  square_mat ?A = (dim_col ?A = dim_row ?A)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        A \\<in> carrier_mat n n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "case None"], ["proof (state)\nthis:\n  mat_inverse A = None\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "then"], ["proof (chain)\npicking this:\n  mat_inverse A = None", "have \"A \\<notin> Units (ring_mat TYPE('a) n n)\""], ["proof (prove)\nusing this:\n  mat_inverse A = None\n\ngoal (1 subgoal):\n 1. A \\<notin> Units (ring_mat TYPE('a) n n)", "by (simp add: mat_inverse(1) n)"], ["proof (state)\nthis:\n  A \\<notin> Units (ring_mat TYPE('a) n n)\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<notin> Units (ring_mat TYPE('a) n n)\n\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "by (meson assms det_non_zero_imp_unit invertible_Units n unit_imp_det_non_zero)"], ["proof (state)\nthis:\n  matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "case (Some a)"], ["proof (state)\nthis:\n  mat_inverse A = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "then"], ["proof (chain)\npicking this:\n  mat_inverse A = Some a", "show ?thesis"], ["proof (prove)\nusing this:\n  mat_inverse A = Some a\n\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)", "by (metis assms carrier_matI invertible_mat_def mat_inverse(2) matr_option.simps(2) square_mat.elims(2))"], ["proof (state)\nthis:\n  matr_option (dim_row A) (mat_inverse A) * A = 1\\<^sub>m (dim_row A)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma dim_invertible:\n  fixes A:: \"'a::field mat\"\n  fixes n:: \"nat\"\n  assumes assm: \"invertible_mat A\"\n  assumes dim: \"A \\<in> carrier_mat n n\"\n  shows \"matr_option (dim_row A)\n     (mat_inverse (A)) \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "proof (cases \"mat_inverse(A)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "obtain n where n: \"A \\<in> carrier_mat n n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        A \\<in> carrier_mat n n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms invertible_mat_def square_mat.simps"], ["proof (prove)\nusing this:\n  invertible_mat A\n  A \\<in> carrier_mat n n\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n  square_mat ?A = (dim_col ?A = dim_row ?A)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        A \\<in> carrier_mat n n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  A \\<in> carrier_mat n n\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "case None"], ["proof (state)\nthis:\n  mat_inverse A = None\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "then"], ["proof (chain)\npicking this:\n  mat_inverse A = None", "have \"A \\<notin> Units (ring_mat TYPE('a) n n)\""], ["proof (prove)\nusing this:\n  mat_inverse A = None\n\ngoal (1 subgoal):\n 1. A \\<notin> Units (ring_mat TYPE('a) n n)", "by (simp add: mat_inverse(1) n)"], ["proof (state)\nthis:\n  A \\<notin> Units (ring_mat TYPE('a) n n)\n\ngoal (2 subgoals):\n 1. mat_inverse A = None \\<Longrightarrow>\n    matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n 2. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<notin> Units (ring_mat TYPE('a) n n)\n\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "by (meson assms det_non_zero_imp_unit invertible_Units n unit_imp_det_non_zero)"], ["proof (state)\nthis:\n  matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "case (Some a)"], ["proof (state)\nthis:\n  mat_inverse A = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       mat_inverse A = Some a \\<Longrightarrow>\n       matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "then"], ["proof (chain)\npicking this:\n  mat_inverse A = Some a", "show ?thesis"], ["proof (prove)\nusing this:\n  mat_inverse A = Some a\n\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "using dim mat_inverse(2)"], ["proof (prove)\nusing this:\n  mat_inverse A = Some a\n  A \\<in> carrier_mat n n\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; mat_inverse ?A = Some ?B\\<rbrakk>\n  \\<Longrightarrow> ?A * ?B = 1\\<^sub>m ?n \\<and>\n                    ?B * ?A = 1\\<^sub>m ?n \\<and> ?B \\<in> carrier_mat ?n ?n\n\ngoal (1 subgoal):\n 1. matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n", "by auto"], ["proof (state)\nthis:\n  matr_option (dim_row A) (mat_inverse A) \\<in> carrier_mat n n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_assoc:\n  fixes A B:: \"rat mat\"\n  fixes v:: \"rat vec\"\n  fixes n:: \"nat\"\n  assumes \"A \\<in> carrier_mat n n\"\n  assumes \"B \\<in> carrier_mat n n\"\n  assumes \"dim_vec v = n\"\n  shows \"A *\\<^sub>v (mult_mat_vec B v) =  (A*B)*\\<^sub>v v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A *\\<^sub>v (B *\\<^sub>v v) = A * B *\\<^sub>v v", "using assms(1) assms(2) assms(3)"], ["proof (prove)\nusing this:\n  A \\<in> carrier_mat n n\n  B \\<in> carrier_mat n n\n  dim_vec v = n\n\ngoal (1 subgoal):\n 1. A *\\<^sub>v (B *\\<^sub>v v) = A * B *\\<^sub>v v", "by auto"], ["", "lemma size_of_mat:\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  shows \"(matrix_A signs subsets) \\<in> carrier_mat (length subsets) (length signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length subsets) (length signs)", "unfolding matrix_A_def carrier_mat_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows_list (length signs) (map (mtx_row signs) subsets)\n    \\<in> {m. dim_row m = length subsets \\<and> dim_col m = length signs}", "by auto"], ["", "lemma size_of_lhs: \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes signs :: \"rat list list\" \n  shows \"dim_vec (construct_lhs_vector p qs signs) = length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (w_vec p qs signs) = length signs", "unfolding construct_lhs_vector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec\n     (vec_of_list\n       (map (\\<lambda>w.\n                rat_of_int\n                 (int (length\n                        (filter (\\<lambda>v. v = w)\n                          (map (consistent_sign_vec_copr qs)\n                            (characterize_root_list_p p))))))\n         signs)) =\n    length signs", "by simp"], ["", "lemma size_of_rhs: \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\" \n  shows \"dim_vec (construct_rhs_vector p qs subsets) = length subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (v_vec p qs subsets) = length subsets", "unfolding construct_rhs_vector_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec\n     (vec_of_list\n       (map (\\<lambda>I. construct_NofI p (retrieve_polys qs I)) subsets)) =\n    length subsets", "by simp"], ["", "lemma same_size:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"length subsets = length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length subsets = length signs", "using invertible_mat"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. length subsets = length signs", "unfolding invertible_mat_def"], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets) \\<and>\n  (\\<exists>B.\n      inverts_mat (M_mat signs subsets) B \\<and>\n      inverts_mat B (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. length subsets = length signs", "using size_of_mat[of signs subsets] size_of_lhs[of p qs signs] size_of_rhs[of p qs subsets]"], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets) \\<and>\n  (\\<exists>B.\n      inverts_mat (M_mat signs subsets) B \\<and>\n      inverts_mat B (M_mat signs subsets))\n  M_mat signs subsets \\<in> carrier_mat (length subsets) (length signs)\n  dim_vec (w_vec p qs signs) = length signs\n  dim_vec (v_vec p qs subsets) = length subsets\n\ngoal (1 subgoal):\n 1. length subsets = length signs", "by simp"], ["", "lemma mat_equal_list_lem:\n  fixes A:: \"'a::field mat\"\n  fixes B:: \"'a::field mat\"\n  shows \"(dim_row A = dim_row B \\<and> dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B)\n    \\<Longrightarrow> A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row A = dim_row B \\<and>\n    dim_col A = dim_col B \\<and>\n    mat_to_list A = mat_to_list B \\<Longrightarrow>\n    A = B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dim_row A = dim_row B \\<and>\n    dim_col A = dim_col B \\<and>\n    mat_to_list A = mat_to_list B \\<Longrightarrow>\n    A = B", "assume hyp: \"dim_row A = dim_row B \\<and> dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B\""], ["proof (state)\nthis:\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B\n\ngoal (1 subgoal):\n 1. dim_row A = dim_row B \\<and>\n    dim_col A = dim_col B \\<and>\n    mat_to_list A = mat_to_list B \\<Longrightarrow>\n    A = B", "then"], ["proof (chain)\npicking this:\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B", "have \"\\<And>i j. i < dim_row A \\<Longrightarrow> j < dim_col A \\<Longrightarrow> B $$ (i, j) = A $$ (i, j)\""], ["proof (prove)\nusing this:\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> B $$ (i, j) = A $$ (i, j)", "unfolding mat_to_list_def"], ["proof (prove)\nusing this:\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and>\n  map (\\<lambda>i. map (\\<lambda>j. A $$ (i, j)) [0..<dim_col A])\n   [0..<dim_row A] =\n  map (\\<lambda>i. map (\\<lambda>j. B $$ (i, j)) [0..<dim_col B])\n   [0..<dim_row B]\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n       \\<Longrightarrow> B $$ (i, j) = A $$ (i, j)", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)\n\ngoal (1 subgoal):\n 1. dim_row A = dim_row B \\<and>\n    dim_col A = dim_col B \\<and>\n    mat_to_list A = mat_to_list B \\<Longrightarrow>\n    A = B", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)\n\ngoal (1 subgoal):\n 1. A = B", "using hyp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and> mat_to_list A = mat_to_list B\n\ngoal (1 subgoal):\n 1. A = B", "unfolding mat_to_list_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and>\n  map (\\<lambda>i. map (\\<lambda>j. A $$ (i, j)) [0..<dim_col A])\n   [0..<dim_row A] =\n  map (\\<lambda>i. map (\\<lambda>j. B $$ (i, j)) [0..<dim_col B])\n   [0..<dim_row B]\n\ngoal (1 subgoal):\n 1. A = B", "using eq_matI[of A B]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < dim_row A; ?j < dim_col A\\<rbrakk>\n  \\<Longrightarrow> B $$ (?i, ?j) = A $$ (?i, ?j)\n  dim_row A = dim_row B \\<and>\n  dim_col A = dim_col B \\<and>\n  map (\\<lambda>i. map (\\<lambda>j. A $$ (i, j)) [0..<dim_col A])\n   [0..<dim_row A] =\n  map (\\<lambda>i. map (\\<lambda>j. B $$ (i, j)) [0..<dim_col B])\n   [0..<dim_row B]\n  \\<lbrakk>\\<And>i j.\n              \\<lbrakk>i < dim_row A; j < dim_col A\\<rbrakk>\n              \\<Longrightarrow> B $$ (i, j) = A $$ (i, j);\n   dim_row B = dim_row A; dim_col B = dim_col A\\<rbrakk>\n  \\<Longrightarrow> B = A\n\ngoal (1 subgoal):\n 1. A = B", "by metis"], ["proof (state)\nthis:\n  A = B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mat_inverse_same: \"mat_inverse_var A = mat_inverse A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_inverse_var A = mat_inverse A", "unfolding mat_inverse_var_def mat_inverse_def mat_equal_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if dim_row A = dim_col A\n     then let one = 1\\<^sub>m (dim_row A)\n          in case gauss_jordan A one of\n             (B, C) \\<Rightarrow>\n               if dim_row B = dim_row one \\<and>\n                  dim_col B = dim_col one \\<and>\n                  mat_to_list B = mat_to_list one\n               then Some C else None\n     else None) =\n    (if dim_row A = dim_col A\n     then let one = 1\\<^sub>m (dim_row A)\n          in case gauss_jordan A one of\n             (B, C) \\<Rightarrow> if B = one then Some C else None\n     else None)", "using mat_equal_list_lem"], ["proof (prove)\nusing this:\n  dim_row ?A = dim_row ?B \\<and>\n  dim_col ?A = dim_col ?B \\<and>\n  mat_to_list ?A = mat_to_list ?B \\<Longrightarrow>\n  ?A = ?B\n\ngoal (1 subgoal):\n 1. (if dim_row A = dim_col A\n     then let one = 1\\<^sub>m (dim_row A)\n          in case gauss_jordan A one of\n             (B, C) \\<Rightarrow>\n               if dim_row B = dim_row one \\<and>\n                  dim_col B = dim_col one \\<and>\n                  mat_to_list B = mat_to_list one\n               then Some C else None\n     else None) =\n    (if dim_row A = dim_col A\n     then let one = 1\\<^sub>m (dim_row A)\n          in case gauss_jordan A one of\n             (B, C) \\<Rightarrow> if B = one then Some C else None\n     else None)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A B.\n        dim_row A = dim_row B \\<and>\n        dim_col A = dim_col B \\<and>\n        mat_to_list A = mat_to_list B \\<Longrightarrow>\n        A = B) \\<Longrightarrow>\n    dim_row A = dim_col A \\<longrightarrow>\n    (let one = 1\\<^sub>m (dim_col A)\n     in case gauss_jordan A one of\n        (B, C) \\<Rightarrow>\n          if dim_row B = dim_col A \\<and>\n             dim_col B = dim_col A \\<and> mat_to_list B = mat_to_list one\n          then Some C else None) =\n    (let one = 1\\<^sub>m (dim_col A)\n     in case gauss_jordan A one of\n        (B, C) \\<Rightarrow> if B = one then Some C else None)", "by (smt case_prod_beta index_one_mat(2) index_one_mat(3) mat_equal_list_lem)"], ["", "lemma construct_lhs_matches_solve_for_lhs:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"(construct_lhs_vector p qs signs) = solve_for_lhs p qs subsets (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have matrix_equation_hyp: \"(mult_mat_vec (matrix_A signs subsets) (construct_lhs_vector p qs signs) = (construct_rhs_vector p qs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets", "using match"], ["proof (prove)\nusing this:\n  satisfy_equation p qs subsets signs\n\ngoal (1 subgoal):\n 1. M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets", "unfolding satisfy_equation_def"], ["proof (prove)\nusing this:\n  M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets", "by blast"], ["proof (state)\nthis:\n  M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets", "have eqn_hyp: \" ((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) *\\<^sub>v (mult_mat_vec (matrix_A signs subsets) (construct_lhs_vector p qs signs)) = \n      mult_mat_vec (matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) (construct_rhs_vector p qs subsets))\""], ["proof (prove)\nusing this:\n  M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    v_vec p qs subsets", "using invertible_mat"], ["proof (prove)\nusing this:\n  M_mat signs subsets *\\<^sub>v w_vec p qs signs = v_vec p qs subsets\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    v_vec p qs subsets", "by (simp add: matrix_equation_hyp)"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have match_hyp: \"length subsets = length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length subsets = length signs", "using same_size invertible_mat"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. length subsets = length signs", "by auto"], ["proof (state)\nthis:\n  length subsets = length signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  length subsets = length signs", "have dim_hyp1: \"matrix_A signs subsets \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\nusing this:\n  length subsets = length signs\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "using size_of_mat"], ["proof (prove)\nusing this:\n  length subsets = length signs\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "by auto"], ["proof (state)\nthis:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "have dim_hyp2: \"matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets)) \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "using invertible_mat dim_invertible"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat ?A; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> matr_option (dim_row ?A) (mat_inverse ?A)\n                    \\<in> carrier_mat ?n ?n\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "by blast"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have mult_assoc_hyp: \"((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) *\\<^sub>v (mult_mat_vec (matrix_A signs subsets) (construct_lhs_vector p qs signs)))\n    = (((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) * (matrix_A signs subsets)) *\\<^sub>v  (construct_lhs_vector p qs signs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs", "using mult_assoc dim_hyp1 dim_hyp2 size_of_lhs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?n; ?B \\<in> carrier_mat ?n ?n;\n   dim_vec ?v = ?n\\<rbrakk>\n  \\<Longrightarrow> ?A *\\<^sub>v (?B *\\<^sub>v ?v) = ?A * ?B *\\<^sub>v ?v\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs", "by auto"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have cancel_helper: \"(((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) * (matrix_A signs subsets)) *\\<^sub>v  (construct_lhs_vector p qs signs))\n  = (1\\<^sub>m (length signs)) *\\<^sub>v   (construct_lhs_vector p qs signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs =\n    1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs", "using invertible_means_mult_id[where A= \"matrix_A signs subsets\"] dim_hyp1"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets =\n  1\\<^sub>m (dim_row (M_mat signs subsets))\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs =\n    1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs", "by (simp add: invertible_mat match_hyp)"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs", "have cancel_hyp: \"(((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) * (matrix_A signs subsets)) *\\<^sub>v  (construct_lhs_vector p qs signs))\n  = (construct_lhs_vector p qs signs)\""], ["proof (prove)\nusing this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs =\n    w_vec p qs signs", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (length subsets) (mat_inverse (M_mat signs subsets)) *\n    M_mat signs subsets *\\<^sub>v\n    w_vec p qs signs =\n    1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs \\<Longrightarrow>\n    1\\<^sub>m (length signs) *\\<^sub>v w_vec p qs signs = w_vec p qs signs", "by (metis carrier_vec_dim_vec one_mult_mat_vec size_of_lhs)"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  w_vec p qs signs", "have mult_hyp: \"((matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) *\\<^sub>v (mult_mat_vec (matrix_A signs subsets) (construct_lhs_vector p qs signs)))\n    = (construct_lhs_vector p qs signs)\""], ["proof (prove)\nusing this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    w_vec p qs signs", "using mult_assoc_hyp cancel_hyp"], ["proof (prove)\nusing this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  w_vec p qs signs\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\n  M_mat signs subsets *\\<^sub>v\n  w_vec p qs signs =\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n    w_vec p qs signs", "by simp"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  w_vec p qs signs", "have \"(construct_lhs_vector p qs signs) =  (mult_mat_vec (matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets))) (construct_rhs_vector p qs subsets)) \""], ["proof (prove)\nusing this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  w_vec p qs signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    v_vec p qs subsets", "using eqn_hyp"], ["proof (prove)\nusing this:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  w_vec p qs signs\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  (M_mat signs subsets *\\<^sub>v w_vec p qs signs) =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n    v_vec p qs subsets", "by simp"], ["proof (state)\nthis:\n  w_vec p qs signs =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "then"], ["proof (chain)\npicking this:\n  w_vec p qs signs =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets", "show ?thesis"], ["proof (prove)\nusing this:\n  w_vec p qs signs =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "unfolding solve_for_lhs_def"], ["proof (prove)\nusing this:\n  w_vec p qs signs =\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets)) *\\<^sub>v\n  v_vec p qs subsets\n\ngoal (1 subgoal):\n 1. w_vec p qs signs =\n    matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse_var (M_mat signs subsets)) *\\<^sub>v\n    v_vec p qs subsets", "by (simp add: mat_inverse_same)"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* If set(A) is a subset of B then for all n, nth c n = 0 means nth a n not in B  *)"], ["", "lemma reduction_signs_set_helper_lemma:\n  fixes A:: \"rat list set\"\n  fixes C:: \"rat vec\"\n  fixes B:: \"rat list list\"\n  assumes \"dim_vec C = length B\"\n  assumes sub: \"A \\<subseteq> set(B)\"\n  assumes not_in_hyp: \"\\<forall> n < dim_vec C. C $ n = 0 \\<longrightarrow> (nth B n) \\<notin> A\"\n  shows \"A \\<subseteq> set (take_indices B\n             (find_nonzeros_from_input_vec C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> set (take_indices B (find_nonzeros_from_input_vec C))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<subseteq> set (take_indices B (find_nonzeros_from_input_vec C))", "have unfold: \"\\<And> x. (x \\<in> A \\<Longrightarrow> x \\<in> set (take_indices B\n             (find_nonzeros_from_input_vec C)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "assume in_a: \"x \\<in> A\""], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "have \"x \\<in> set (B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set B", "using sub in_a"], ["proof (prove)\nusing this:\n  A \\<subseteq> set B\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> set B", "by blast"], ["proof (state)\nthis:\n  x \\<in> set B\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "then"], ["proof (chain)\npicking this:\n  x \\<in> set B", "have \"\\<exists> n < length B. nth B n = x\""], ["proof (prove)\nusing this:\n  x \\<in> set B\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B. B ! n = x", "by (simp add: in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<exists>n<length B. B ! n = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "then"], ["proof (chain)\npicking this:\n  \\<exists>n<length B. B ! n = x", "have \"\\<exists> n < length B. (nth B n = x \\<and> (List.member (find_nonzeros_from_input_vec C) n) = True)\""], ["proof (prove)\nusing this:\n  \\<exists>n<length B. B ! n = x\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B.\n       B ! n = x \\<and>\n       List.member (find_nonzeros_from_input_vec C) n = True", "using not_in_hyp find_zeros_from_vec_prop[of C]"], ["proof (prove)\nusing this:\n  \\<exists>n<length B. B ! n = x\n  \\<forall>n<dim_vec C. C $ n = 0 \\<longrightarrow> B ! n \\<notin> A\n  \\<forall>n<dim_vec C.\n     (C $ n \\<noteq> 0) = List.member (find_nonzeros_from_input_vec C) n\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B.\n       B ! n = x \\<and>\n       List.member (find_nonzeros_from_input_vec C) n = True", "using assms(1) in_a"], ["proof (prove)\nusing this:\n  \\<exists>n<length B. B ! n = x\n  \\<forall>n<dim_vec C. C $ n = 0 \\<longrightarrow> B ! n \\<notin> A\n  \\<forall>n<dim_vec C.\n     (C $ n \\<noteq> 0) = List.member (find_nonzeros_from_input_vec C) n\n  dim_vec C = length B\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B.\n       B ! n = x \\<and>\n       List.member (find_nonzeros_from_input_vec C) n = True", "by auto"], ["proof (state)\nthis:\n  \\<exists>n<length B.\n     B ! n = x \\<and> List.member (find_nonzeros_from_input_vec C) n = True\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> A \\<Longrightarrow>\n       x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "thus \"x \\<in> set (take_indices B\n             (find_nonzeros_from_input_vec C))\""], ["proof (prove)\nusing this:\n  \\<exists>n<length B.\n     B ! n = x \\<and> List.member (find_nonzeros_from_input_vec C) n = True\n\ngoal (1 subgoal):\n 1. x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  \\<exists>n<length B.\n     B ! n = x \\<and> List.member (find_nonzeros_from_input_vec C) n = True\n\ngoal (1 subgoal):\n 1. x \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))", "using member_def"], ["proof (prove)\nusing this:\n  \\<exists>n<length B.\n     B ! n = x \\<and> List.member (find_nonzeros_from_input_vec C) n = True\n  List.member ?xs ?x = (?x \\<in> set ?xs)\n\ngoal (1 subgoal):\n 1. x \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> A \\<Longrightarrow>\n  ?x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. A \\<subseteq> set (take_indices B (find_nonzeros_from_input_vec C))", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> A \\<Longrightarrow>\n  ?x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> A \\<Longrightarrow>\n  ?x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. A \\<subseteq> set (take_indices B (find_nonzeros_from_input_vec C))", "by blast"], ["proof (state)\nthis:\n  A \\<subseteq> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduction_signs_set_helper_lemma2:\n  fixes A:: \"rat list set\"\n  fixes C:: \"rat vec\"\n  fixes B:: \"rat list list\"\n  assumes dist: \"distinct B\"\n  assumes eq_len: \"dim_vec C = length B\"\n  assumes sub: \"A \\<subseteq> set(B)\"\n  assumes not_in_hyp: \"\\<forall> n < dim_vec C. C $ n \\<noteq> 0 \\<longrightarrow> (nth B n) \\<in> A\"\n  shows \"set (take_indices B\n             (find_nonzeros_from_input_vec C)) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (take_indices B (find_nonzeros_from_input_vec C)) \\<subseteq> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (take_indices B (find_nonzeros_from_input_vec C)) \\<subseteq> A", "have unfold: \"\\<And> x. (x \\<in> (set (take_indices B\n             (find_nonzeros_from_input_vec C))) \\<Longrightarrow> x \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices B\n                     (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n       x \\<in> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices B\n                     (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n       x \\<in> A", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices B\n                     (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n       x \\<in> A", "assume in_set: \"x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\""], ["proof (state)\nthis:\n  x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices B\n                     (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n       x \\<in> A", "have h: \"\\<exists>n< dim_vec C. (C $ n \\<noteq> 0 \\<and> (nth B n) = x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "have h1: \"\\<exists>n < length B.(nth B n) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n<length B. B ! n = x", "using in_set"], ["proof (prove)\nusing this:\n  x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B. B ! n = x", "unfolding take_indices_def\n          find_nonzeros_from_input_vec_def eq_len"], ["proof (prove)\nusing this:\n  x \\<in> set (map ((!) B)\n                (filter (\\<lambda>i. C $ i \\<noteq> 0) [0..<length B]))\n\ngoal (1 subgoal):\n 1. \\<exists>n<length B. B ! n = x", "by auto"], ["proof (state)\nthis:\n  \\<exists>n<length B. B ! n = x\n\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "have h2: \"\\<forall>n< length B. (nth B n = x \\<longrightarrow> List.member (find_nonzeros_from_input_vec C) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length B.\n       B ! n = x \\<longrightarrow>\n       List.member (find_nonzeros_from_input_vec C) n", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "assume leq_hyp: \"n < length B\""], ["proof (state)\nthis:\n  n < length B\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "assume x_eq: \"x = B ! n\""], ["proof (state)\nthis:\n  x = B ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "have h: \"(B !n) \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))", "using x_eq in_set"], ["proof (prove)\nusing this:\n  x = B ! n\n  x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))", "by (simp add: take_indices_def)"], ["proof (state)\nthis:\n  B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "then"], ["proof (chain)\npicking this:\n  B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))", "have h2: \"List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)\""], ["proof (prove)\nusing this:\n  B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)", "using in_set"], ["proof (prove)\nusing this:\n  B ! n \\<in> set (map ((!) B) (find_nonzeros_from_input_vec C))\n  x \\<in> set (take_indices B (find_nonzeros_from_input_vec C))\n\ngoal (1 subgoal):\n 1. List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)", "by (meson in_set_member)"], ["proof (state)\nthis:\n  List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "then"], ["proof (chain)\npicking this:\n  List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)", "have h3: \"\\<exists>k< length B. (List.member (find_nonzeros_from_input_vec C) k \\<and> ((B ! k) = (B ! n)))\""], ["proof (prove)\nusing this:\n  List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)\n\ngoal (1 subgoal):\n 1. \\<exists>k<length B.\n       List.member (find_nonzeros_from_input_vec C) k \\<and> B ! k = B ! n", "by (smt atLeastLessThan_iff eq_len find_nonzeros_from_input_vec_def imageE in_set_member mem_Collect_eq set_filter set_map set_upt)"], ["proof (state)\nthis:\n  \\<exists>k<length B.\n     List.member (find_nonzeros_from_input_vec C) k \\<and> B ! k = B ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "have h4: \"\\<forall>v< length B. ((B ! v) = (B ! n) \\<longrightarrow> v = n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n", "using dist"], ["proof (prove)\nusing this:\n  distinct B\n\ngoal (1 subgoal):\n 1. \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>distinct B; v < length B; B ! v = B ! n\\<rbrakk>\n       \\<Longrightarrow> v = n", "using leq_hyp nth_eq_iff_index_eq"], ["proof (prove)\nusing this:\n  n < length B\n  \\<lbrakk>distinct ?xs; ?i < length ?xs; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> (?xs ! ?i = ?xs ! ?j) = (?i = ?j)\n\ngoal (1 subgoal):\n 1. \\<And>v.\n       \\<lbrakk>distinct B; v < length B; B ! v = B ! n\\<rbrakk>\n       \\<Longrightarrow> v = n", "by blast"], ["proof (state)\nthis:\n  \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length B; x = B ! n\\<rbrakk>\n       \\<Longrightarrow> List.member (find_nonzeros_from_input_vec C) n", "then"], ["proof (chain)\npicking this:\n  \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n", "show \"List.member (find_nonzeros_from_input_vec C) n\""], ["proof (prove)\nusing this:\n  \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n\n\ngoal (1 subgoal):\n 1. List.member (find_nonzeros_from_input_vec C) n", "using h2 h3 h4"], ["proof (prove)\nusing this:\n  \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n\n  List.member (map ((!) B) (find_nonzeros_from_input_vec C)) (B ! n)\n  \\<exists>k<length B.\n     List.member (find_nonzeros_from_input_vec C) k \\<and> B ! k = B ! n\n  \\<forall>v<length B. B ! v = B ! n \\<longrightarrow> v = n\n\ngoal (1 subgoal):\n 1. List.member (find_nonzeros_from_input_vec C) n", "by auto"], ["proof (state)\nthis:\n  List.member (find_nonzeros_from_input_vec C) n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<length B.\n     B ! n = x \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec C) n\n\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "then"], ["proof (chain)\npicking this:\n  \\<forall>n<length B.\n     B ! n = x \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec C) n", "have \"\\<forall>n<length B. (nth B n = x \\<longrightarrow> C $ n \\<noteq> 0)\""], ["proof (prove)\nusing this:\n  \\<forall>n<length B.\n     B ! n = x \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec C) n\n\ngoal (1 subgoal):\n 1. \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0", "using find_zeros_from_vec_prop [of C]"], ["proof (prove)\nusing this:\n  \\<forall>n<length B.\n     B ! n = x \\<longrightarrow>\n     List.member (find_nonzeros_from_input_vec C) n\n  \\<forall>n<dim_vec C.\n     (C $ n \\<noteq> 0) = List.member (find_nonzeros_from_input_vec C) n\n\ngoal (1 subgoal):\n 1. \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0", "by (simp add: eq_len)"], ["proof (state)\nthis:\n  \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "then"], ["proof (chain)\npicking this:\n  \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "using h1 eq_len"], ["proof (prove)\nusing this:\n  \\<forall>n<length B. B ! n = x \\<longrightarrow> C $ n \\<noteq> 0\n  \\<exists>n<length B. B ! n = x\n  dim_vec C = length B\n\ngoal (1 subgoal):\n 1. \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x", "by auto"], ["proof (state)\nthis:\n  \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices B\n                     (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n       x \\<in> A", "thus \"x \\<in> A\""], ["proof (prove)\nusing this:\n  \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x\n\ngoal (1 subgoal):\n 1. x \\<in> A", "using not_in_hyp"], ["proof (prove)\nusing this:\n  \\<exists>n<dim_vec C. C $ n \\<noteq> 0 \\<and> B ! n = x\n  \\<forall>n<dim_vec C. C $ n \\<noteq> 0 \\<longrightarrow> B ! n \\<in> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> set (take_indices B\n                 (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n  ?x \\<in> A\n\ngoal (1 subgoal):\n 1. set (take_indices B (find_nonzeros_from_input_vec C)) \\<subseteq> A", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set (take_indices B\n                 (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n  ?x \\<in> A", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> set (take_indices B\n                 (find_nonzeros_from_input_vec C)) \\<Longrightarrow>\n  ?x \\<in> A\n\ngoal (1 subgoal):\n 1. set (take_indices B (find_nonzeros_from_input_vec C)) \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  set (take_indices B (find_nonzeros_from_input_vec C)) \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Show that dropping columns doesn't affect the consistent sign assignments *)"], ["", "lemma reduction_doesnt_break_things_signs:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "have dim_hyp2: \"matr_option (dim_row (matrix_A signs subsets))\n     (mat_inverse (matrix_A signs subsets)) \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "using invertible_mat dim_invertible"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat ?A; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> matr_option (dim_row ?A) (mat_inverse ?A)\n                    \\<in> carrier_mat ?n ?n\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "using same_size"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat ?A; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> matr_option (dim_row ?A) (mat_inverse ?A)\n                    \\<in> carrier_mat ?n ?n\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "by fastforce"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "have \"(construct_lhs_vector p qs signs) = solve_for_lhs p qs subsets (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using construct_lhs_matches_solve_for_lhs assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by auto"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have \"(solve_for_lhs p qs subsets (matrix_A signs subsets)) =\n   vec_of_list (map rat_of_nat (map (\\<lambda>s. card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s}) signs))\""], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs))", "using construct_lhs_vector_cleaner assms"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  ?p \\<noteq> 0 \\<Longrightarrow>\n  w_vec ?p ?qs ?signs =\n  vec_of_list\n   (map (\\<lambda>s.\n            rat_of_int\n             (int (card\n                    {x. poly ?p x = 0 \\<and>\n                        consistent_sign_vec_copr ?qs x = s})))\n     ?signs)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs))", "by (metis (mono_tags, lifting) list.map_cong map_map o_apply of_int_of_nat_eq)"], ["proof (state)\nthis:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))", "have \"\\<forall> n < (dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))). \n       (((solve_for_lhs p qs subsets (matrix_A signs subsets)) $ n = 0) \\<longrightarrow>\n       (nth signs n) \\<notin> set (characterize_consistent_signs_at_roots_copr p qs))\""], ["proof (prove)\nusing this:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "have h0: \"\\<forall> n < (dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))). \n       (((solve_for_lhs p qs subsets (matrix_A signs subsets)) $ n = 0) \\<longrightarrow> \n       rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = (nth signs n)}) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       rat_of_nat\n        (card\n          {x. poly p x = 0 \\<and>\n              consistent_sign_vec_copr qs x = signs ! n}) =\n       0", "by (metis (mono_tags, lifting) \\<open>construct_lhs_vector p qs signs = solve_for_lhs p qs subsets (matrix_A signs subsets)\\<close> construct_lhs_vector_clean nonzero of_nat_0_eq_iff of_rat_of_nat_eq size_of_lhs)"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and>\n            consistent_sign_vec_copr qs x = signs ! n}) =\n     0\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "have h1: \"\\<forall> w. (rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) = 0 \\<longrightarrow> \n        (\\<nexists> x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       rat_of_nat\n        (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n       0 \\<longrightarrow>\n       (\\<nexists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "assume card_asm: \"card {xa. poly p xa = 0 \\<and> consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} = 0\""], ["proof (state)\nthis:\n  card\n   {xa.\n    poly p xa = 0 \\<and>\n    consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n  0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "assume zero_asm: \"poly p x = 0\""], ["proof (state)\nthis:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "have card_hyp: \"{xa. poly p xa = 0 \\<and> consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {xa.\n     poly p xa = 0 \\<and>\n     consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n    {}", "using card_eq_0_iff"], ["proof (prove)\nusing this:\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n\ngoal (1 subgoal):\n 1. {xa.\n     poly p xa = 0 \\<and>\n     consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n    {}", "using card_asm nonzero poly_roots_finite"], ["proof (prove)\nusing this:\n  (card ?A = 0) = (?A = {} \\<or> infinite ?A)\n  card\n   {xa.\n    poly p xa = 0 \\<and>\n    consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n  0\n  p \\<noteq> 0\n  ?p \\<noteq> 0 \\<Longrightarrow> finite {x. poly ?p x = (0::?'a)}\n\ngoal (1 subgoal):\n 1. {xa.\n     poly p xa = 0 \\<and>\n     consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n    {}", "by fastforce"], ["proof (state)\nthis:\n  {xa.\n   poly p xa = 0 \\<and>\n   consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n  {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "have \"x \\<in> {xa. poly p xa = 0 \\<and> consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> {xa.\n             poly p xa = 0 \\<and>\n             consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}", "using zero_asm"], ["proof (prove)\nusing this:\n  poly p x = 0\n\ngoal (1 subgoal):\n 1. x \\<in> {xa.\n             poly p xa = 0 \\<and>\n             consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {xa.\n           poly p xa = 0 \\<and>\n           consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>card\n                 {xa.\n                  poly p xa = 0 \\<and>\n                  consistent_sign_vec_copr qs xa =\n                  consistent_sign_vec_copr qs x} =\n                0;\n        poly p x = 0\\<rbrakk>\n       \\<Longrightarrow> False", "thus \"False\""], ["proof (prove)\nusing this:\n  x \\<in> {xa.\n           poly p xa = 0 \\<and>\n           consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}\n\ngoal (1 subgoal):\n 1. False", "using card_hyp"], ["proof (prove)\nusing this:\n  x \\<in> {xa.\n           poly p xa = 0 \\<and>\n           consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x}\n  {xa.\n   poly p xa = 0 \\<and>\n   consistent_sign_vec_copr qs xa = consistent_sign_vec_copr qs x} =\n  {}\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w.\n     rat_of_nat\n      (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n     0 \\<longrightarrow>\n     (\\<nexists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "have h2: \"\\<And> w. (rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) = 0 \\<Longrightarrow>\n       (\\<not>List.member (characterize_consistent_signs_at_roots_copr p qs) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w.\n       rat_of_nat\n        (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n       0 \\<Longrightarrow>\n       \\<not> List.member (characterize_consistent_signs_at_roots_copr p qs)\n               w", "by (smt (verit, best) characterize_consistent_signs_at_roots_copr_def characterize_root_list_p_def h1 imageE in_set_member mem_Collect_eq nonzero poly_roots_finite set_map set_remdups sorted_list_of_set(1))"], ["proof (state)\nthis:\n  rat_of_nat\n   (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) =\n  0 \\<Longrightarrow>\n  \\<not> List.member (characterize_consistent_signs_at_roots_copr p qs) ?w\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  rat_of_nat\n   (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) =\n  0 \\<Longrightarrow>\n  \\<not> List.member (characterize_consistent_signs_at_roots_copr p qs) ?w", "have h3: \"\\<forall> w. rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) = 0 \\<longrightarrow> \n        w \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  rat_of_nat\n   (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) =\n  0 \\<Longrightarrow>\n  \\<not> List.member (characterize_consistent_signs_at_roots_copr p qs) ?w\n\ngoal (1 subgoal):\n 1. \\<forall>w.\n       rat_of_nat\n        (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n       0 \\<longrightarrow>\n       w \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "by (simp add: in_set_member)"], ["proof (state)\nthis:\n  \\<forall>w.\n     rat_of_nat\n      (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n     0 \\<longrightarrow>\n     w \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "using h0 h3"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and>\n            consistent_sign_vec_copr qs x = signs ! n}) =\n     0\n  \\<forall>w.\n     rat_of_nat\n      (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) =\n     0 \\<longrightarrow>\n     w \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       signs ! n\n       \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "by blast"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)", "have \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set (take_indices signs\n             (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using all_info\n      reduction_signs_set_helper_lemma[where A = \"set (characterize_consistent_signs_at_roots_copr p qs)\", where B = \"signs\",\n      where C = \"(solve_for_lhs p qs subsets (matrix_A signs subsets))\"]"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  \\<lbrakk>dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n           length signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n      solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n      0 \\<longrightarrow>\n      signs ! n\n      \\<notin> set (characterize_consistent_signs_at_roots_copr p\n                     qs)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs)\n                    \\<subseteq> set (take_indices signs\n(find_nonzeros_from_input_vec\n  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using dim_hyp2 solve_for_lhs_def"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     signs ! n\n     \\<notin> set (characterize_consistent_signs_at_roots_copr p qs)\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  \\<lbrakk>dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n           length signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n      solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n      0 \\<longrightarrow>\n      signs ! n\n      \\<notin> set (characterize_consistent_signs_at_roots_copr p\n                     qs)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs)\n                    \\<subseteq> set (take_indices signs\n(find_nonzeros_from_input_vec\n  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n  solve_for_lhs ?p ?qs ?subsets ?matr =\n  matr_option (dim_row ?matr) (mat_inverse_var ?matr) *\\<^sub>v\n  v_vec ?p ?qs ?subsets\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by (simp add: mat_inverse_same)"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets))))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "unfolding reduction_signs_def"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduction_deletes_bad_sign_conds:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (characterize_consistent_signs_at_roots_copr p qs) = set(reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "have dim_hyp2: \"matr_option (dim_row (matrix_A signs subsets))\n       (mat_inverse (matrix_A signs subsets)) \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "using invertible_mat dim_invertible"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat ?A; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> matr_option (dim_row ?A) (mat_inverse ?A)\n                    \\<in> carrier_mat ?n ?n\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "using same_size"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat ?A; ?A \\<in> carrier_mat ?n ?n\\<rbrakk>\n  \\<Longrightarrow> matr_option (dim_row ?A) (mat_inverse ?A)\n                    \\<in> carrier_mat ?n ?n\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n\ngoal (1 subgoal):\n 1. matr_option (dim_row (M_mat signs subsets))\n     (mat_inverse (M_mat signs subsets))\n    \\<in> carrier_mat (length signs) (length signs)", "by fastforce"], ["proof (state)\nthis:\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "have supset: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<supseteq> set(reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "have \"(construct_lhs_vector p qs signs) = solve_for_lhs p qs subsets (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using construct_lhs_matches_solve_for_lhs assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by auto"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "have \"(solve_for_lhs p qs subsets (matrix_A signs subsets)) =\n       vec_of_list (map rat_of_nat (map (\\<lambda>s. card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s}) signs))\""], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs))", "using construct_lhs_vector_cleaner assms"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  ?p \\<noteq> 0 \\<Longrightarrow>\n  w_vec ?p ?qs ?signs =\n  vec_of_list\n   (map (\\<lambda>s.\n            rat_of_int\n             (int (card\n                    {x. poly ?p x = 0 \\<and>\n                        consistent_sign_vec_copr ?qs x = s})))\n     ?signs)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs))", "by (metis (mono_tags, lifting) list.map_cong map_map o_apply of_int_of_nat_eq)"], ["proof (state)\nthis:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))\n\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))", "have \"\\<forall> n < (dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))). \n           (((solve_for_lhs p qs subsets (matrix_A signs subsets)) $ n \\<noteq> 0) \\<longrightarrow>\n           (nth signs n) \\<in> set (characterize_consistent_signs_at_roots_copr p qs))\""], ["proof (prove)\nusing this:\n  solve_for_lhs p qs subsets (M_mat signs subsets) =\n  vec_of_list\n   (map rat_of_nat\n     (map (\\<lambda>s.\n              card\n               {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n       signs))\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "have h0: \"\\<forall> n < (dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))). \n           (((solve_for_lhs p qs subsets (matrix_A signs subsets)) $ n = 0) \\<longrightarrow> \n           rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = (nth signs n)}) = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n       0 \\<longrightarrow>\n       rat_of_nat\n        (card\n          {x. poly p x = 0 \\<and>\n              consistent_sign_vec_copr qs x = signs ! n}) =\n       0", "by (metis (mono_tags, lifting) \\<open>construct_lhs_vector p qs signs = solve_for_lhs p qs subsets (matrix_A signs subsets)\\<close> construct_lhs_vector_clean nonzero of_nat_0_eq_iff of_rat_of_nat_eq size_of_lhs)"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and>\n            consistent_sign_vec_copr qs x = signs ! n}) =\n     0\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "have h1: \"\\<forall> w. (rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq> 0 \\<longrightarrow> \n            (\\<exists> x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>w.\n       rat_of_nat\n        (card\n          {x. poly p x = 0 \\<and>\n              consistent_sign_vec_copr qs x = w}) \\<noteq>\n       0 \\<longrightarrow>\n       (\\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "assume card_asm: \"0 < card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}\""], ["proof (state)\nthis:\n  0 < card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "show \"\\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "by (metis (mono_tags, lifting) Collect_empty_eq card_asm card_eq_0_iff gr_implies_not0)"], ["proof (state)\nthis:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>w.\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq>\n     0 \\<longrightarrow>\n     (\\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "have h2: \"\\<And> w. (rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq> 0 \\<Longrightarrow>\n           (List.member (characterize_consistent_signs_at_roots_copr p qs) w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w.\n       rat_of_nat\n        (card\n          {x. poly p x = 0 \\<and>\n              consistent_sign_vec_copr qs x = w}) \\<noteq>\n       0 \\<Longrightarrow>\n       List.member (characterize_consistent_signs_at_roots_copr p qs) w", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       List.member (characterize_consistent_signs_at_roots_copr p qs) w", "fix w"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       List.member (characterize_consistent_signs_at_roots_copr p qs) w", "assume card_asm: \" 0 < card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}\""], ["proof (state)\nthis:\n  0 < card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       List.member (characterize_consistent_signs_at_roots_copr p qs) w", "have h0: \"\\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "using card_asm"], ["proof (prove)\nusing this:\n  0 < card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}\n\ngoal (1 subgoal):\n 1. \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "by (simp add: h1)"], ["proof (state)\nthis:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\n\ngoal (1 subgoal):\n 1. \\<And>w.\n       0 < card\n            {x. poly p x = 0 \\<and>\n                consistent_sign_vec_copr qs x = w} \\<Longrightarrow>\n       List.member (characterize_consistent_signs_at_roots_copr p qs) w", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w", "show \"List.member (characterize_consistent_signs_at_roots_copr p qs) w\""], ["proof (prove)\nusing this:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\n\ngoal (1 subgoal):\n 1. List.member (characterize_consistent_signs_at_roots_copr p qs) w", "unfolding characterize_consistent_signs_at_roots_copr_def"], ["proof (prove)\nusing this:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\n\ngoal (1 subgoal):\n 1. List.member\n     (remdups\n       (map (consistent_sign_vec_copr qs) (characterize_root_list_p p)))\n     w", "using in_set_member nonzero poly_roots_finite characterize_root_list_p_def"], ["proof (prove)\nusing this:\n  \\<exists>x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  p \\<noteq> 0\n  ?p \\<noteq> 0 \\<Longrightarrow> finite {x. poly ?p x = (0::?'a)}\n  characterize_root_list_p ?p \\<equiv> sorted_list_of_set {x. poly ?p x = 0}\n\ngoal (1 subgoal):\n 1. List.member\n     (remdups\n       (map (consistent_sign_vec_copr qs) (characterize_root_list_p p)))\n     w", "by fastforce"], ["proof (state)\nthis:\n  List.member (characterize_consistent_signs_at_roots_copr p qs) w\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  rat_of_nat\n   (card\n     {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) \\<noteq>\n  0 \\<Longrightarrow>\n  List.member (characterize_consistent_signs_at_roots_copr p qs) ?w\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  rat_of_nat\n   (card\n     {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) \\<noteq>\n  0 \\<Longrightarrow>\n  List.member (characterize_consistent_signs_at_roots_copr p qs) ?w", "have h3: \"\\<forall> w. rat_of_nat (card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq> 0 \\<longrightarrow> \n            w \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  rat_of_nat\n   (card\n     {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = ?w}) \\<noteq>\n  0 \\<Longrightarrow>\n  List.member (characterize_consistent_signs_at_roots_copr p qs) ?w\n\ngoal (1 subgoal):\n 1. \\<forall>w.\n       rat_of_nat\n        (card\n          {x. poly p x = 0 \\<and>\n              consistent_sign_vec_copr qs x = w}) \\<noteq>\n       0 \\<longrightarrow>\n       w \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "by (simp add: in_set_member)"], ["proof (state)\nthis:\n  \\<forall>w.\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq>\n     0 \\<longrightarrow>\n     w \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. solve_for_lhs p qs subsets (M_mat signs subsets) =\n    vec_of_list\n     (map rat_of_nat\n       (map (\\<lambda>s.\n                card\n                 {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s})\n         signs)) \\<Longrightarrow>\n    \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "using h0 h3"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n =\n     0 \\<longrightarrow>\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and>\n            consistent_sign_vec_copr qs x = signs ! n}) =\n     0\n  \\<forall>w.\n     rat_of_nat\n      (card\n        {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = w}) \\<noteq>\n     0 \\<longrightarrow>\n     w \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n       0 \\<longrightarrow>\n       signs ! n\n       \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "by (metis (no_types, lifting) \\<open>solve_for_lhs p qs subsets (matrix_A signs subsets) = vec_of_list (map rat_of_nat (map (\\<lambda>s. card {x. poly p x = 0 \\<and> consistent_sign_vec_copr qs x = s}) signs))\\<close> dim_vec_of_list length_map nth_map vec_of_list_index)"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)", "have \"set (take_indices signs\n                 (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) \\<subseteq>\n              set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (take_indices signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "using all_info\n        reduction_signs_set_helper_lemma2[where A = \"set (characterize_consistent_signs_at_roots_copr p qs)\", where B = \"signs\",\n        where C = \"(solve_for_lhs p qs subsets (matrix_A signs subsets))\"]"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  \\<lbrakk>distinct signs;\n   dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n   length signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n      solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n      0 \\<longrightarrow>\n      signs ! n\n      \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\\<rbrakk>\n  \\<Longrightarrow> set (take_indices signs\n                          (find_nonzeros_from_input_vec\n                            (solve_for_lhs p qs subsets\n                              (M_mat signs subsets))))\n                    \\<subseteq> set (characterize_consistent_signs_at_roots_copr\np qs)\n\ngoal (1 subgoal):\n 1. set (take_indices signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "using distinct_signs dim_hyp2 solve_for_lhs_def"], ["proof (prove)\nusing this:\n  \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n     solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n     0 \\<longrightarrow>\n     signs ! n \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  \\<lbrakk>distinct signs;\n   dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n   length signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   \\<forall>n<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)).\n      solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq>\n      0 \\<longrightarrow>\n      signs ! n\n      \\<in> set (characterize_consistent_signs_at_roots_copr p qs)\\<rbrakk>\n  \\<Longrightarrow> set (take_indices signs\n                          (find_nonzeros_from_input_vec\n                            (solve_for_lhs p qs subsets\n                              (M_mat signs subsets))))\n                    \\<subseteq> set (characterize_consistent_signs_at_roots_copr\np qs)\n  distinct signs\n  matr_option (dim_row (M_mat signs subsets))\n   (mat_inverse (M_mat signs subsets))\n  \\<in> carrier_mat (length signs) (length signs)\n  solve_for_lhs ?p ?qs ?subsets ?matr =\n  matr_option (dim_row ?matr) (mat_inverse_var ?matr) *\\<^sub>v\n  v_vec ?p ?qs ?subsets\n\ngoal (1 subgoal):\n 1. set (take_indices signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "by (simp add: mat_inverse_same)"], ["proof (state)\nthis:\n  set (take_indices signs\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  set (take_indices signs\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (take_indices signs\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (reduction_signs p qs signs subsets (M_mat signs subsets))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "unfolding reduction_signs_def"], ["proof (prove)\nusing this:\n  set (take_indices signs\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (take_indices signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)", "by auto"], ["proof (state)\nthis:\n  set (reduction_signs p qs signs subsets (M_mat signs subsets))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (reduction_signs p qs signs subsets (M_mat signs subsets))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "have subset: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "using reduction_doesnt_break_things_signs[of p qs signs subsets] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs; distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs)\n                    \\<subseteq> set (reduction_signs p qs signs subsets\n(M_mat signs subsets))\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (reduction_signs p qs signs subsets\n                      (M_mat signs subsets))", "by blast"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "using supset subset"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n  set (reduction_signs p qs signs subsets (M_mat signs subsets))\n  \\<subseteq> set (characterize_consistent_signs_at_roots_copr p qs)\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs) =\n    set (reduction_signs p qs signs subsets (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs) =\n  set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem reduce_system_sign_conditions:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"set (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))) = set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (get_signs\n          (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "unfolding get_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, M_mat signs subsets, subsets, signs)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using reduction_deletes_bad_sign_conds[of p qs signs subsets]"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs; distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs) =\n                    set (reduction_signs p qs signs subsets\n                          (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, M_mat signs subsets, subsets, signs)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n                 distinct signs;\n                 set (characterize_consistent_signs_at_roots_copr p qs)\n                 \\<subseteq> set signs;\n                 satisfy_equation p qs subsets signs;\n                 invertible_mat (M_mat signs subsets)\\<rbrakk>\n                \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n  p qs) =\n                                  set (reduction_signs p qs signs subsets\n  (M_mat signs subsets));\n        x \\<in> set (snd (snd (let reduce_cols_A =\n                                     take_cols_from_matrix\n(M_mat signs subsets)\n(find_nonzeros_from_input_vec\n  (solve_for_lhs p qs subsets (M_mat signs subsets)));\n                                   rows_keep = rows_to_keep reduce_cols_A\n                               in (take_rows_from_matrix reduce_cols_A\n                                    rows_keep,\n                                   take_indices subsets rows_keep,\n                                   take_indices signs\n                                    (find_nonzeros_from_input_vec\n(solve_for_lhs p qs subsets (M_mat signs subsets)))))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (characterize_consistent_signs_at_roots_copr\n p qs)\n 2. \\<And>x.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n                 distinct signs;\n                 set (characterize_consistent_signs_at_roots_copr p qs)\n                 \\<subseteq> set signs;\n                 satisfy_equation p qs subsets signs;\n                 invertible_mat (M_mat signs subsets)\\<rbrakk>\n                \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n  p qs) =\n                                  set (reduction_signs p qs signs subsets\n  (M_mat signs subsets));\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      qs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (snd\n (snd (let reduce_cols_A =\n             take_cols_from_matrix (M_mat signs subsets)\n              (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)));\n           rows_keep = rows_to_keep reduce_cols_A\n       in (take_rows_from_matrix reduce_cols_A rows_keep,\n           take_indices subsets rows_keep,\n           take_indices signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))))", "apply (simp add: all_info distinct_signs match nonzero reduction_signs_def welldefined_signs1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n                set (characterize_consistent_signs_at_roots_copr p qs) =\n                set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))));\n        x \\<in> set (snd (snd (let reduce_cols_A =\n                                     take_cols_from_matrix\n(M_mat signs subsets)\n(find_nonzeros_from_input_vec\n  (solve_for_lhs p qs subsets (M_mat signs subsets)));\n                                   rows_keep = rows_to_keep reduce_cols_A\n                               in (take_rows_from_matrix reduce_cols_A\n                                    rows_keep,\n                                   take_indices subsets rows_keep,\n                                   take_indices signs\n                                    (find_nonzeros_from_input_vec\n(solve_for_lhs p qs subsets (M_mat signs subsets)))))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (characterize_consistent_signs_at_roots_copr\n p qs)\n 2. \\<And>x.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n                 distinct signs;\n                 set (characterize_consistent_signs_at_roots_copr p qs)\n                 \\<subseteq> set signs;\n                 satisfy_equation p qs subsets signs;\n                 invertible_mat (M_mat signs subsets)\\<rbrakk>\n                \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n  p qs) =\n                                  set (reduction_signs p qs signs subsets\n  (M_mat signs subsets));\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      qs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (snd\n (snd (let reduce_cols_A =\n             take_cols_from_matrix (M_mat signs subsets)\n              (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)));\n           rows_keep = rows_to_keep reduce_cols_A\n       in (take_rows_from_matrix reduce_cols_A rows_keep,\n           take_indices subsets rows_keep,\n           take_indices signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))))", "using nonzero invertible_mat"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  invertible_mat (M_mat signs subsets)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n                set (characterize_consistent_signs_at_roots_copr p qs) =\n                set (take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))));\n        x \\<in> set (snd (snd (let reduce_cols_A =\n                                     take_cols_from_matrix\n(M_mat signs subsets)\n(find_nonzeros_from_input_vec\n  (solve_for_lhs p qs subsets (M_mat signs subsets)));\n                                   rows_keep = rows_to_keep reduce_cols_A\n                               in (take_rows_from_matrix reduce_cols_A\n                                    rows_keep,\n                                   take_indices subsets rows_keep,\n                                   take_indices signs\n                                    (find_nonzeros_from_input_vec\n(solve_for_lhs p qs subsets (M_mat signs subsets)))))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (characterize_consistent_signs_at_roots_copr\n p qs)\n 2. \\<And>x.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n                 distinct signs;\n                 set (characterize_consistent_signs_at_roots_copr p qs)\n                 \\<subseteq> set signs;\n                 satisfy_equation p qs subsets signs;\n                 invertible_mat (M_mat signs subsets)\\<rbrakk>\n                \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n  p qs) =\n                                  set (reduction_signs p qs signs subsets\n  (M_mat signs subsets));\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      qs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (snd\n (snd (let reduce_cols_A =\n             take_cols_from_matrix (M_mat signs subsets)\n              (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)));\n           rows_keep = rows_to_keep reduce_cols_A\n       in (take_rows_from_matrix reduce_cols_A rows_keep,\n           take_indices subsets rows_keep,\n           take_indices signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))))", "apply (metis snd_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n                 distinct signs;\n                 set (characterize_consistent_signs_at_roots_copr p qs)\n                 \\<subseteq> set signs;\n                 satisfy_equation p qs subsets signs;\n                 invertible_mat (M_mat signs subsets)\\<rbrakk>\n                \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n  p qs) =\n                                  set (reduction_signs p qs signs subsets\n  (M_mat signs subsets));\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p\n                      qs)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> set (snd\n (snd (let reduce_cols_A =\n             take_cols_from_matrix (M_mat signs subsets)\n              (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)));\n           rows_keep = rows_to_keep reduce_cols_A\n       in (take_rows_from_matrix reduce_cols_A rows_keep,\n           take_indices subsets rows_keep,\n           take_indices signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))))", "by (metis all_info distinct_signs invertible_mat match nonzero reduction_signs_def snd_conv welldefined_signs1)"], ["", "subsection \"Showing matrix equation preserved when reducing\""], ["", "lemma rows_to_keep_lem:\n  fixes A:: \"('a::field) mat\"\n  shows \"\\<And>ell. ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ell.\n       ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A", "unfolding rows_to_keep_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ell.\n       ell\n       \\<in> set (map snd\n                   (pivot_positions\n                     (gauss_jordan_single A\\<^sup>T))) \\<Longrightarrow>\n       ell < dim_row A", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> set (pivot_positions\n                   (gauss_jordan_single A\\<^sup>T)) \\<Longrightarrow>\n       b < dim_row A", "using rref_pivot_positions"], ["proof (prove)\nusing this:\n  \\<lbrakk>row_echelon_form ?R; ?R \\<in> carrier_mat ?nr ?nc;\n   (?i, ?j) \\<in> set (pivot_positions ?R)\\<rbrakk>\n  \\<Longrightarrow> ?i < ?nr \\<and> ?j < ?nc\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b)\n       \\<in> set (pivot_positions\n                   (gauss_jordan_single A\\<^sup>T)) \\<Longrightarrow>\n       b < dim_row A", "by (metis carrier_mat_triv gauss_jordan_single(2) gauss_jordan_single(3) index_transpose_mat(3))"], ["", "lemma reduce_system_matrix_equation_preserved:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs: \"well_def_signs (length qs) signs\"\n  assumes welldefined_subsets: \"all_list_constr (subsets) (length qs)\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes invertible_mat: \"invertible_mat (matrix_A signs subsets)\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"satisfy_equation p qs (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have poly_type_hyp: \"p \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "using nonzero"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0", "by auto"], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have distinct_signs_hyp: \"distinct (snd (snd (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "let ?sym = \"(find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "have h1: \"\\<forall> i < length (take_indices signs ?sym). \\<forall>j < length(take_indices signs ?sym).\n      i \\<noteq> j \\<longrightarrow> nth (take_indices signs ?sym) i \\<noteq> nth (take_indices signs ?sym) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length\n                (take_indices signs\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n       \\<forall>j<length\n                   (take_indices signs\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n          i \\<noteq> j \\<longrightarrow>\n          take_indices signs\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          i \\<noteq>\n          take_indices signs\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          j", "using distinct_signs"], ["proof (prove)\nusing this:\n  distinct signs\n\ngoal (1 subgoal):\n 1. \\<forall>i<length\n                (take_indices signs\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n       \\<forall>j<length\n                   (take_indices signs\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n          i \\<noteq> j \\<longrightarrow>\n          take_indices signs\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          i \\<noteq>\n          take_indices signs\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          j", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  distinct signs\n\ngoal (1 subgoal):\n 1. \\<forall>i<length\n                (map ((!) signs)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n       \\<forall>j<length\n                   (map ((!) signs)\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n          i \\<noteq> j \\<longrightarrow>\n          map ((!) signs)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          i \\<noteq>\n          map ((!) signs)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n          j", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"distinct signs\""], ["proof (state)\nthis:\n  distinct signs\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"i < length\n                (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (state)\nthis:\n  i < length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"j < length\n                (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (state)\nthis:\n  j < length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "assume neq_hyp: \"i \\<noteq> j\""], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"signs ! (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets \n              (matrix_A signs subsets)) ! i) =\n           signs ! (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets \n              (matrix_A signs subsets)) ! j)\""], ["proof (state)\nthis:\n  signs !\n  (find_nonzeros_from_input_vec\n    (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n   i) =\n  signs !\n  (find_nonzeros_from_input_vec\n    (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n   j)\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "have h1: \"find_nonzeros_from_input_vec (solve_for_lhs p qs subsets \n              (matrix_A signs subsets)) ! i \\<noteq> find_nonzeros_from_input_vec (solve_for_lhs p qs subsets \n              (matrix_A signs subsets)) ! j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n    i \\<noteq>\n    find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n    j", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    i \\<noteq>\n    filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    j", "using neq_hyp"], ["proof (prove)\nusing this:\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    i \\<noteq>\n    filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    j", "by (metis \\<open>i < length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> \\<open>j < length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> distinct_conv_nth distinct_filter distinct_upt find_nonzeros_from_input_vec_def)"], ["proof (state)\nthis:\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  i \\<noteq>\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  j\n\ngoal (1 subgoal):\n 1. \\<And>i j.\n       \\<lbrakk>distinct signs;\n        i < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        j < length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        i \\<noteq> j;\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         i) =\n        signs !\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n         j)\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  i \\<noteq>\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  j", "show \"False\""], ["proof (prove)\nusing this:\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  i \\<noteq>\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  j\n\ngoal (1 subgoal):\n 1. False", "using distinct_signs"], ["proof (prove)\nusing this:\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  i \\<noteq>\n  find_nonzeros_from_input_vec\n   (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n  j\n  distinct signs\n\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             i \\<noteq>\n             find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             j;\n     distinct signs\\<rbrakk>\n    \\<Longrightarrow> False", "have f1: \"\\<forall>p ns n. ((n::nat) \\<in> {n \\<in> set ns. p n}) = (n \\<in> set ns \\<and> n \\<in> Collect p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p ns n.\n       (n \\<in> {n \\<in> set ns. p n}) =\n       (n \\<in> set ns \\<and> n \\<in> Collect p)", "by simp"], ["proof (state)\nthis:\n  \\<forall>p ns n.\n     (n \\<in> {n \\<in> set ns. p n}) =\n     (n \\<in> set ns \\<and> n \\<in> Collect p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             i \\<noteq>\n             find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             j;\n     distinct signs\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>p ns n.\n     (n \\<in> {n \\<in> set ns. p n}) =\n     (n \\<in> set ns \\<and> n \\<in> Collect p)", "have f2: \"filter (\\<lambda>n. solve_for_lhs p qs subsets (matrix_A signs subsets) $ n \\<noteq> 0) [0..<dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))] ! i \\<in> set [0..<length signs]\""], ["proof (prove)\nusing this:\n  \\<forall>p ns n.\n     (n \\<in> {n \\<in> set ns. p n}) =\n     (n \\<in> set ns \\<and> n \\<in> Collect p)\n\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>n.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    i\n    \\<in> set [0..<length signs]", "by (metis (full_types) \\<open>i < length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> construct_lhs_matches_solve_for_lhs find_nonzeros_from_input_vec_def invertible_mat match nth_mem set_filter size_of_lhs)"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  i\n  \\<in> set [0..<length signs]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             i \\<noteq>\n             find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             j;\n     distinct signs\\<rbrakk>\n    \\<Longrightarrow> False", "have \"filter (\\<lambda>n. solve_for_lhs p qs subsets (matrix_A signs subsets) $ n \\<noteq> 0) [0..<dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))] ! j \\<in> set [0..<length signs]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>n.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    j\n    \\<in> set [0..<length signs]", "using f1"], ["proof (prove)\nusing this:\n  \\<forall>p ns n.\n     (n \\<in> {n \\<in> set ns. p n}) =\n     (n \\<in> set ns \\<and> n \\<in> Collect p)\n\ngoal (1 subgoal):\n 1. filter\n     (\\<lambda>n.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n    j\n    \\<in> set [0..<length signs]", "by (metis (full_types) \\<open>j < length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> construct_lhs_matches_solve_for_lhs find_nonzeros_from_input_vec_def invertible_mat match nth_mem set_filter size_of_lhs)"], ["proof (state)\nthis:\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  j\n  \\<in> set [0..<length signs]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             i \\<noteq>\n             find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)) !\n             j;\n     distinct signs\\<rbrakk>\n    \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  j\n  \\<in> set [0..<length signs]", "show ?thesis"], ["proof (prove)\nusing this:\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  j\n  \\<in> set [0..<length signs]\n\ngoal (1 subgoal):\n 1. False", "using f2"], ["proof (prove)\nusing this:\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  j\n  \\<in> set [0..<length signs]\n  filter\n   (\\<lambda>n.\n       solve_for_lhs p qs subsets (M_mat signs subsets) $ n \\<noteq> 0)\n   [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))] !\n  i\n  \\<in> set [0..<length signs]\n\ngoal (1 subgoal):\n 1. False", "by (metis \\<open>signs ! (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)) ! i) = signs ! (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)) ! j)\\<close> atLeastLessThan_iff distinct_conv_nth distinct_signs find_nonzeros_from_input_vec_def h1 set_upt)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length\n              (take_indices signs\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n     \\<forall>j<length\n                 (take_indices signs\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n        i \\<noteq> j \\<longrightarrow>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        i \\<noteq>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        j\n\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length\n              (take_indices signs\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n     \\<forall>j<length\n                 (take_indices signs\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n        i \\<noteq> j \\<longrightarrow>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        i \\<noteq>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        j", "have \"distinct (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (prove)\nusing this:\n  \\<forall>i<length\n              (take_indices signs\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n     \\<forall>j<length\n                 (take_indices signs\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n        i \\<noteq> j \\<longrightarrow>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        i \\<noteq>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        j\n\ngoal (1 subgoal):\n 1. distinct\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using distinct_conv_nth"], ["proof (prove)\nusing this:\n  \\<forall>i<length\n              (take_indices signs\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n     \\<forall>j<length\n                 (take_indices signs\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets (M_mat signs subsets)))).\n        i \\<noteq> j \\<longrightarrow>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        i \\<noteq>\n        take_indices signs\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))) !\n        j\n  distinct ?xs =\n  (\\<forall>i<length ?xs.\n      \\<forall>j<length ?xs.\n         i \\<noteq> j \\<longrightarrow> ?xs ! i \\<noteq> ?xs ! j)\n\ngoal (1 subgoal):\n 1. distinct\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by blast"], ["proof (state)\nthis:\n  distinct\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "then"], ["proof (chain)\npicking this:\n  distinct\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))", "show ?thesis"], ["proof (prove)\nusing this:\n  distinct\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "using get_signs_def reduction_signs_def reduction_signs_is_get_signs"], ["proof (prove)\nusing this:\n  distinct\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  get_signs ?data = snd (snd ?data)\n  reduction_signs ?p ?qs ?signs ?subsets ?matr =\n  take_indices ?signs\n   (find_nonzeros_from_input_vec (solve_for_lhs ?p ?qs ?subsets ?matr))\n  reduction_signs ?p ?qs ?signs ?subsets ?m =\n  get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n\ngoal (1 subgoal):\n 1. distinct\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "by auto"], ["proof (state)\nthis:\n  distinct\n   (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct\n   (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have all_info_hyp: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(snd (snd (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (snd (snd (reduce_system p\n                                (qs, M_mat signs subsets, subsets, signs))))", "using reduce_system_sign_conditions assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; well_def_signs (length ?qs) ?signs;\n   distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> set (get_signs\n                          (reduce_system ?p\n                            (?qs, M_mat ?signs ?subsets, ?subsets,\n                             ?signs))) =\n                    set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  all_list_constr subsets (length qs)\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (snd (snd (reduce_system p\n                                (qs, M_mat signs subsets, subsets, signs))))", "unfolding get_signs_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; well_def_signs (length ?qs) ?signs;\n   distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> set (snd (snd (reduce_system ?p\n                                    (?qs, M_mat ?signs ?subsets, ?subsets,\n                                     ?signs)))) =\n                    set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  all_list_constr subsets (length qs)\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (snd (snd (reduce_system p\n                                (qs, M_mat signs subsets, subsets, signs))))", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (snd (snd (reduce_system p\n                              (qs, M_mat signs subsets, subsets, signs))))\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have pairwise_rel_prime_hyp: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q. List.member qs q \\<longrightarrow> coprime p q", "using pairwise_rel_prime"], ["proof (prove)\nusing this:\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. \\<forall>q. List.member qs q \\<longrightarrow> coprime p q", "by auto"], ["proof (state)\nthis:\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have welldefined_hyp: \"all_list_constr (fst (snd (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))) (length qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr\n     (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n     (length qs)", "using welldefined_subsets rows_to_keep_lem"], ["proof (prove)\nusing this:\n  all_list_constr subsets (length qs)\n  ?ell \\<in> set (rows_to_keep ?A) \\<Longrightarrow> ?ell < dim_row ?A\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n     (length qs)", "unfolding all_list_constr_def List.member_def list_constr_def list_all_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set subsets \\<longrightarrow>\n     (\\<forall>x\\<in>set x. x < length qs)\n  ?ell \\<in> set (rows_to_keep ?A) \\<Longrightarrow> ?ell < dim_row ?A\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (fst (snd (reduce_system p\n                               (qs, M_mat signs subsets, subsets,\n                                signs)))) \\<longrightarrow>\n       (\\<forall>x\\<in>set x. x < length qs)", "apply (auto simp add: Let_def take_indices_def take_cols_from_matrix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set subsets \\<longrightarrow>\n                   (\\<forall>x\\<in>set x. x < length qs);\n        \\<And>ell A.\n           ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A;\n        xa \\<in> set (rows_to_keep\n                       (mat_of_cols (length subsets)\n                         (map ((!) (cols (M_mat signs subsets)))\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))));\n        xb \\<in> set (subsets ! xa)\\<rbrakk>\n       \\<Longrightarrow> xb < length qs", "using nth_mem"], ["proof (prove)\nusing this:\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. \\<And>xa xb.\n       \\<lbrakk>\\<forall>x.\n                   x \\<in> set subsets \\<longrightarrow>\n                   (\\<forall>x\\<in>set x. x < length qs);\n        \\<And>ell A.\n           ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A;\n        xa \\<in> set (rows_to_keep\n                       (mat_of_cols (length subsets)\n                         (map ((!) (cols (M_mat signs subsets)))\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))));\n        xb \\<in> set (subsets ! xa)\\<rbrakk>\n       \\<Longrightarrow> xb < length qs", "by fastforce"], ["proof (state)\nthis:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "using poly_type_hyp distinct_signs_hyp all_info_hyp pairwise_rel_prime_hyp welldefined_hyp"], ["proof (prove)\nusing this:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n  p \\<noteq> 0\n  distinct\n   (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (snd (snd (reduce_system p\n                              (qs, M_mat signs subsets, subsets, signs))))\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "using matrix_equation"], ["proof (prove)\nusing this:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n  p \\<noteq> 0\n  distinct\n   (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (snd (snd (reduce_system p\n                              (qs, M_mat signs subsets, subsets, signs))))\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n  \\<lbrakk>?p \\<noteq> 0; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q;\n   all_list_constr ?subsets (length ?qs)\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation ?p ?qs ?subsets ?signs\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "unfolding get_subsets_def get_signs_def"], ["proof (prove)\nusing this:\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n  p \\<noteq> 0\n  distinct\n   (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (snd (snd (reduce_system p\n                              (qs, M_mat signs subsets, subsets, signs))))\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  all_list_constr\n   (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n   (length qs)\n  \\<lbrakk>?p \\<noteq> 0; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q;\n   all_list_constr ?subsets (length ?qs)\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation ?p ?qs ?subsets ?signs\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (fst (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))\n     (snd (snd (reduce_system p (qs, M_mat signs subsets, subsets, signs))))", "by blast"], ["proof (state)\nthis:\n  satisfy_equation p qs\n   (get_subsets (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Show that we are tracking the correct matrix in the algorithm *)"], ["", "subsection \"Showing matrix preserved\""], ["", "lemma reduce_system_matrix_signs_helper_aux:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length signs\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"alt_matrix_A (take_indices signs S) subsets = take_cols_from_matrix (alt_matrix_A signs subsets) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_matrix_A (take_indices signs S) subsets =\n    take_cols_from_matrix (alt_matrix_A signs subsets) S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. alt_matrix_A (take_indices signs S) subsets =\n    take_cols_from_matrix (alt_matrix_A signs subsets) S", "have h0a: \"dim_col (take_cols_from_matrix (alt_matrix_A signs subsets) S) = length (take_indices signs S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (take_cols_from_matrix (alt_matrix_A signs subsets) S) =\n    length (take_indices signs S)", "unfolding take_cols_from_matrix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n       (take_indices (cols (alt_matrix_A signs subsets)) S)) =\n    length (take_indices signs S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take_indices (cols (alt_matrix_A signs subsets)) S) =\n    length (take_indices signs S)", "unfolding take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map ((!) (cols (alt_matrix_A signs subsets))) S) =\n    length (map ((!) signs) S)", "by auto"], ["proof (state)\nthis:\n  dim_col (take_cols_from_matrix (alt_matrix_A signs subsets) S) =\n  length (take_indices signs S)\n\ngoal (1 subgoal):\n 1. alt_matrix_A (take_indices signs S) subsets =\n    take_cols_from_matrix (alt_matrix_A signs subsets) S", "have h0: \"\\<forall>i < length (take_indices signs S). (col (alt_matrix_A (take_indices signs S) subsets ) i = \ncol (take_cols_from_matrix (alt_matrix_A signs subsets) S) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices signs S).\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "assume asm: \"i < length (take_indices signs S)\""], ["proof (state)\nthis:\n  i < length (take_indices signs S)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have i_lt: \"i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)", "using asm"], ["proof (prove)\nusing this:\n  i < length (take_indices signs S)\n\ngoal (1 subgoal):\n 1. i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (take_indices signs S) \\<Longrightarrow> i < length S", "unfolding take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (map ((!) signs) S) \\<Longrightarrow> i < length S", "by auto"], ["proof (state)\nthis:\n  i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have h0: \" vec (length subsets) (\\<lambda>j. z (subsets ! j) (map ((!) signs) S ! i)) = \n      vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (length subsets)\n     (\\<lambda>j. z (subsets ! j) (map ((!) signs) S ! i)) =\n    vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i)))", "using nth_map"], ["proof (prove)\nusing this:\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n\ngoal (1 subgoal):\n 1. vec (length subsets)\n     (\\<lambda>j. z (subsets ! j) (map ((!) signs) S ! i)) =\n    vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i)))", "by (metis \\<open>i < length (take_indices signs S)\\<close> length_map take_indices_def)"], ["proof (state)\nthis:\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (map ((!) signs) S ! i)) =\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i)))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have dim: \"(map ((!) (cols (alt_matrix_A signs subsets))) S) ! i \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "have \"dim_col (alt_matrix_A signs subsets) = length (signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (alt_matrix_A signs subsets) = length signs", "by (simp add: alt_matrix_A_def)"], ["proof (state)\nthis:\n  dim_col (alt_matrix_A signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "have well_d: \"S ! i < length (signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S ! i < length signs", "using well_def_h"], ["proof (prove)\nusing this:\n  \\<forall>x. List.member S x \\<longrightarrow> x < length signs\n\ngoal (1 subgoal):\n 1. S ! i < length signs", "using i_lt in_set_member"], ["proof (prove)\nusing this:\n  \\<forall>x. List.member S x \\<longrightarrow> x < length signs\n  i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. S ! i < length signs", "by fastforce"], ["proof (state)\nthis:\n  S ! i < length signs\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "have \n        map_eq: \"(map ((!) (cols (alt_matrix_A signs subsets))) S) ! i  = nth (cols (alt_matrix_A signs subsets))  (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i =\n    cols (alt_matrix_A signs subsets) ! (S ! i)", "using i_lt"], ["proof (prove)\nusing this:\n  i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i =\n    cols (alt_matrix_A signs subsets) ! (S ! i)", "by auto"], ["proof (state)\nthis:\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i =\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "have \"nth (cols (alt_matrix_A signs subsets))  (S ! i) \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cols (alt_matrix_A signs subsets) ! (S ! i)\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "using col_dim"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n\ngoal (1 subgoal):\n 1. cols (alt_matrix_A signs subsets) ! (S ! i)\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "unfolding cols_def"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n\ngoal (1 subgoal):\n 1. map (col (alt_matrix_A signs subsets))\n     [0..<dim_col (alt_matrix_A signs subsets)] !\n    (S ! i)\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "using nth_map well_d"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  S ! i < length signs\n\ngoal (1 subgoal):\n 1. map (col (alt_matrix_A signs subsets))\n     [0..<dim_col (alt_matrix_A signs subsets)] !\n    (S ! i)\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "by (simp add: \\<open>dim_col (alt_matrix_A signs subsets) = length signs\\<close>)"], ["proof (state)\nthis:\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "then"], ["proof (chain)\npicking this:\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "show ?thesis"], ["proof (prove)\nusing this:\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "using map_eq"], ["proof (prove)\nusing this:\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i =\n  cols (alt_matrix_A signs subsets) ! (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))", "unfolding alt_matrix_A_def"], ["proof (prove)\nusing this:\n  cols\n   (mat (length subsets) (length signs)\n     (\\<lambda>(i, j). z (subsets ! i) (signs ! j))) !\n  (S ! i)\n  \\<in> carrier_vec\n         (dim_row\n           (mat (length subsets) (length signs)\n             (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n  map ((!) (cols\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j)))))\n   S !\n  i =\n  cols\n   (mat (length subsets) (length signs)\n     (\\<lambda>(i, j). z (subsets ! i) (signs ! j))) !\n  (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (cols\n               (mat (length subsets) (length signs)\n                 (\\<lambda>(i, j). z (subsets ! i) (signs ! j)))))\n     S !\n    i\n    \\<in> carrier_vec\n           (dim_row\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))", "by auto"], ["proof (state)\nthis:\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have h1: \"col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i = \n      col (mat_of_cols (dim_row (alt_matrix_A signs subsets)) (map ((!) (cols (alt_matrix_A signs subsets))) S)) i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n    col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n          (map ((!) (cols (alt_matrix_A signs subsets))) S))\n     i", "by (simp add: take_cols_from_matrix_def take_indices_def)"], ["proof (state)\nthis:\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n  col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n        (map ((!) (cols (alt_matrix_A signs subsets))) S))\n   i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have h2: \"col (mat_of_cols (dim_row (alt_matrix_A signs subsets)) (map ((!) (cols (alt_matrix_A signs subsets))) S)) i \n      = nth (map ((!) (cols (alt_matrix_A signs subsets))) S) i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n          (map ((!) (cols (alt_matrix_A signs subsets))) S))\n     i =\n    map ((!) (cols (alt_matrix_A signs subsets))) S ! i", "using dim i_lt asm col_mat_of_cols[where j = \"i\", where n = \"(dim_row (alt_matrix_A signs subsets))\",\n          where vs = \"(map ((!) (cols (alt_matrix_A signs subsets))) S)\"]"], ["proof (prove)\nusing this:\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\n  i < length (map ((!) (cols (alt_matrix_A signs subsets))) S)\n  i < length (take_indices signs S)\n  \\<lbrakk>i < length (map ((!) (cols (alt_matrix_A signs subsets))) S);\n   map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n   \\<in> carrier_vec (dim_row (alt_matrix_A signs subsets))\\<rbrakk>\n  \\<Longrightarrow> col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n                          (map ((!) (cols (alt_matrix_A signs subsets))) S))\n                     i =\n                    map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n\ngoal (1 subgoal):\n 1. col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n          (map ((!) (cols (alt_matrix_A signs subsets))) S))\n     i =\n    map ((!) (cols (alt_matrix_A signs subsets))) S ! i", "by blast"], ["proof (state)\nthis:\n  col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n        (map ((!) (cols (alt_matrix_A signs subsets))) S))\n   i =\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have h3: \"col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i = (col (alt_matrix_A signs subsets) (S !i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n    col (alt_matrix_A signs subsets) (S ! i)", "using h1 h2"], ["proof (prove)\nusing this:\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n  col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n        (map ((!) (cols (alt_matrix_A signs subsets))) S))\n   i\n  col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n        (map ((!) (cols (alt_matrix_A signs subsets))) S))\n   i =\n  map ((!) (cols (alt_matrix_A signs subsets))) S ! i\n\ngoal (1 subgoal):\n 1. col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n    col (alt_matrix_A signs subsets) (S ! i)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n             map ((!) (cols (alt_matrix_A signs subsets))) S ! i;\n     col (mat_of_cols (dim_row (alt_matrix_A signs subsets))\n           (map ((!) (cols (alt_matrix_A signs subsets))) S))\n      i =\n     map ((!) (cols (alt_matrix_A signs subsets))) S ! i\\<rbrakk>\n    \\<Longrightarrow> map ((!) (cols (alt_matrix_A signs subsets))) S ! i =\n                      col (alt_matrix_A signs subsets) (S ! i)", "by (metis alt_matrix_char asm cols_nth dim_col_mat(1) in_set_member length_map mat_of_rows_list_def matrix_A_def nth_map nth_mem take_indices_def well_def_h)"], ["proof (state)\nthis:\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n  col (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "have \"vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) = (col (alt_matrix_A signs subsets) (S !i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) =\n    col (alt_matrix_A signs subsets) (S ! i)", "by (metis asm in_set_member length_map nth_mem signs_are_cols take_indices_def well_def_h)"], ["proof (state)\nthis:\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) =\n  col (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "then"], ["proof (chain)\npicking this:\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) =\n  col (alt_matrix_A signs subsets) (S ! i)", "have \"vec (length subsets) (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n      col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i \""], ["proof (prove)\nusing this:\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) =\n  col (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. vec (length subsets)\n     (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n    col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "using h0 h3"], ["proof (prove)\nusing this:\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i))) =\n  col (alt_matrix_A signs subsets) (S ! i)\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (map ((!) signs) S ! i)) =\n  vec (length subsets) (\\<lambda>j. z (subsets ! j) (signs ! (S ! i)))\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i =\n  col (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. vec (length subsets)\n     (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n    col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "by (simp add: take_indices_def)"], ["proof (state)\nthis:\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices signs S) \\<Longrightarrow>\n       col (alt_matrix_A (take_indices signs S) subsets) i =\n       col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "then"], ["proof (chain)\npicking this:\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "show \"col (alt_matrix_A (take_indices signs S) subsets) i =\n         col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i \""], ["proof (prove)\nusing this:\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. col (alt_matrix_A (take_indices signs S) subsets) i =\n    col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "using asm signs_are_cols[where signs = \"(take_indices signs S)\", where subsets = \"subsets\"]"], ["proof (prove)\nusing this:\n  vec (length subsets)\n   (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i)) =\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n  i < length (take_indices signs S)\n  \\<forall>i<length (take_indices signs S).\n     col (alt_matrix_A (take_indices signs S) subsets) i =\n     vec (length subsets)\n      (\\<lambda>j. z (subsets ! j) (take_indices signs S ! i))\n\ngoal (1 subgoal):\n 1. col (alt_matrix_A (take_indices signs S) subsets) i =\n    col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "by auto"], ["proof (state)\nthis:\n  col (alt_matrix_A (take_indices signs S) subsets) i =\n  col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length (take_indices signs S).\n     col (alt_matrix_A (take_indices signs S) subsets) i =\n     col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. alt_matrix_A (take_indices signs S) subsets =\n    take_cols_from_matrix (alt_matrix_A signs subsets) S", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length (take_indices signs S).\n     col (alt_matrix_A (take_indices signs S) subsets) i =\n     col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<length (take_indices signs S).\n     col (alt_matrix_A (take_indices signs S) subsets) i =\n     col (take_cols_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. alt_matrix_A (take_indices signs S) subsets =\n    take_cols_from_matrix (alt_matrix_A signs subsets) S", "unfolding alt_matrix_A_def take_cols_from_matrix_def"], ["proof (prove)\nusing this:\n  \\<forall>i<length (take_indices signs S).\n     col (mat (length subsets) (length (take_indices signs S))\n           (\\<lambda>(i, j). z (subsets ! i) (take_indices signs S ! j)))\n      i =\n     col (mat_of_cols\n           (dim_row\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n           (take_indices\n             (cols\n               (mat (length subsets) (length signs)\n                 (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n             S))\n      i\n\ngoal (1 subgoal):\n 1. mat (length subsets) (length (take_indices signs S))\n     (\\<lambda>(i, j). z (subsets ! i) (take_indices signs S ! j)) =\n    mat_of_cols\n     (dim_row\n       (mat (length subsets) (length signs)\n         (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n     (take_indices\n       (cols\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices signs S).\n       vec (length subsets)\n        (\\<lambda>ia. z (subsets ! ia) (take_indices signs S ! i)) =\n       col (mat_of_cols (length subsets)\n             (take_indices\n               (cols\n                 (mat (length subsets) (length signs)\n                   (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n               S))\n        i \\<Longrightarrow>\n    mat (length subsets) (length (take_indices signs S))\n     (\\<lambda>(i, j). z (subsets ! i) (take_indices signs S ! j)) =\n    mat_of_cols (length subsets)\n     (take_indices\n       (cols\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "using h0a mat_col_eqI"], ["proof (prove)\nusing this:\n  dim_col (take_cols_from_matrix (alt_matrix_A signs subsets) S) =\n  length (take_indices signs S)\n  \\<lbrakk>\\<And>i. i < dim_col ?B \\<Longrightarrow> col ?A i = col ?B i;\n   dim_row ?A = dim_row ?B; dim_col ?A = dim_col ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices signs S).\n       vec (length subsets)\n        (\\<lambda>ia. z (subsets ! ia) (take_indices signs S ! i)) =\n       col (mat_of_cols (length subsets)\n             (take_indices\n               (cols\n                 (mat (length subsets) (length signs)\n                   (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n               S))\n        i \\<Longrightarrow>\n    mat (length subsets) (length (take_indices signs S))\n     (\\<lambda>(i, j). z (subsets ! i) (take_indices signs S ! j)) =\n    mat_of_cols (length subsets)\n     (take_indices\n       (cols\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "by (metis alt_matrix_A_def dim_col_mat(1) dim_row_mat(1) h0 mat_of_cols_def take_cols_from_matrix_def)"], ["proof (state)\nthis:\n  alt_matrix_A (take_indices signs S) subsets =\n  take_cols_from_matrix (alt_matrix_A signs subsets) S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduce_system_matrix_signs_helper:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length signs\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"matrix_A (take_indices signs S) subsets = take_cols_from_matrix (matrix_A signs subsets) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat (take_indices signs S) subsets =\n    take_cols_from_matrix (M_mat signs subsets) S", "using reduce_system_matrix_signs_helper_aux alt_matrix_char assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x. List.member ?S x \\<longrightarrow> x < length ?signs;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> alt_matrix_A (take_indices ?signs ?S) ?subsets =\n                    take_cols_from_matrix (alt_matrix_A ?signs ?subsets) ?S\n  alt_matrix_A ?signs ?subsets = M_mat ?signs ?subsets\n  \\<forall>x. List.member S x \\<longrightarrow> x < length signs\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. M_mat (take_indices signs S) subsets =\n    take_cols_from_matrix (M_mat signs subsets) S", "by auto"], ["", "lemma reduce_system_matrix_subsets_helper_aux:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes inv: \"length subsets \\<ge> length signs\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length subsets\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  shows \"alt_matrix_A signs (take_indices subsets S) = take_rows_from_matrix (alt_matrix_A signs subsets) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alt_matrix_A signs (take_indices subsets S) =\n    take_rows_from_matrix (alt_matrix_A signs subsets) S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. alt_matrix_A signs (take_indices subsets S) =\n    take_rows_from_matrix (alt_matrix_A signs subsets) S", "have h0a: \"dim_row (take_rows_from_matrix (alt_matrix_A signs subsets) S) = length (take_indices subsets S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row (take_rows_from_matrix (alt_matrix_A signs subsets) S) =\n    length (take_indices subsets S)", "unfolding take_rows_from_matrix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n       (take_indices (rows (alt_matrix_A signs subsets)) S)) =\n    length (take_indices subsets S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take_indices (rows (alt_matrix_A signs subsets)) S) =\n    length (take_indices subsets S)", "unfolding take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map ((!) (rows (alt_matrix_A signs subsets))) S) =\n    length (map ((!) subsets) S)", "by auto"], ["proof (state)\nthis:\n  dim_row (take_rows_from_matrix (alt_matrix_A signs subsets) S) =\n  length (take_indices subsets S)\n\ngoal (1 subgoal):\n 1. alt_matrix_A signs (take_indices subsets S) =\n    take_rows_from_matrix (alt_matrix_A signs subsets) S", "have h0: \"\\<forall>i < length (take_indices subsets S). (row (alt_matrix_A signs (take_indices subsets S) ) i = \nrow (take_rows_from_matrix (alt_matrix_A signs subsets) S) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices subsets S).\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "assume asm: \"i < length (take_indices subsets S)\""], ["proof (state)\nthis:\n  i < length (take_indices subsets S)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "have i_lt: \"i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)", "using asm"], ["proof (prove)\nusing this:\n  i < length (take_indices subsets S)\n\ngoal (1 subgoal):\n 1. i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (take_indices subsets S) \\<Longrightarrow> i < length S", "unfolding take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length (map ((!) subsets) S) \\<Longrightarrow> i < length S", "by auto"], ["proof (state)\nthis:\n  i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "have h0: \"row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i =\n    row (mat_of_rows (dim_col (alt_matrix_A signs subsets)) (map ((!) (rows (alt_matrix_A signs subsets))) S)) i \""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i =\n    row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i", "unfolding take_rows_from_matrix_def take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i =\n    row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i", "by auto"], ["proof (state)\nthis:\n  row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i =\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "have dim: \"(map ((!) (rows (alt_matrix_A signs subsets))) S) ! i \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "have \"dim_col (alt_matrix_A signs subsets) = length (signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col (alt_matrix_A signs subsets) = length signs", "by (simp add: alt_matrix_A_def)"], ["proof (state)\nthis:\n  dim_col (alt_matrix_A signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "then"], ["proof (chain)\npicking this:\n  dim_col (alt_matrix_A signs subsets) = length signs", "have lenh: \"dim_col (alt_matrix_A signs subsets) \\<le> length (subsets)\""], ["proof (prove)\nusing this:\n  dim_col (alt_matrix_A signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. dim_col (alt_matrix_A signs subsets) \\<le> length subsets", "using assms"], ["proof (prove)\nusing this:\n  dim_col (alt_matrix_A signs subsets) = length signs\n  length signs \\<le> length subsets\n  \\<forall>x. List.member S x \\<longrightarrow> x < length subsets\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. dim_col (alt_matrix_A signs subsets) \\<le> length subsets", "by auto"], ["proof (state)\nthis:\n  dim_col (alt_matrix_A signs subsets) \\<le> length subsets\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "have well_d: \"S ! i < length (subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S ! i < length subsets", "using well_def_h"], ["proof (prove)\nusing this:\n  \\<forall>x. List.member S x \\<longrightarrow> x < length subsets\n\ngoal (1 subgoal):\n 1. S ! i < length subsets", "using i_lt in_set_member"], ["proof (prove)\nusing this:\n  \\<forall>x. List.member S x \\<longrightarrow> x < length subsets\n  i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. S ! i < length subsets", "by fastforce"], ["proof (state)\nthis:\n  S ! i < length subsets\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "have \n        map_eq: \"(map ((!) (rows (alt_matrix_A signs subsets))) S) ! i  = nth (rows (alt_matrix_A signs subsets))  (S ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i =\n    rows (alt_matrix_A signs subsets) ! (S ! i)", "using i_lt"], ["proof (prove)\nusing this:\n  i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i =\n    rows (alt_matrix_A signs subsets) ! (S ! i)", "by auto"], ["proof (state)\nthis:\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i =\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "have \"nth (rows (alt_matrix_A signs subsets))  (S ! i) \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rows (alt_matrix_A signs subsets) ! (S ! i)\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "using col_dim"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n\ngoal (1 subgoal):\n 1. rows (alt_matrix_A signs subsets) ! (S ! i)\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "unfolding rows_def"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n\ngoal (1 subgoal):\n 1. map (row (alt_matrix_A signs subsets))\n     [0..<dim_row (alt_matrix_A signs subsets)] !\n    (S ! i)\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "using nth_map well_d"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  S ! i < length subsets\n\ngoal (1 subgoal):\n 1. map (row (alt_matrix_A signs subsets))\n     [0..<dim_row (alt_matrix_A signs subsets)] !\n    (S ! i)\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "using lenh"], ["proof (prove)\nusing this:\n  col ?A ?i \\<in> carrier_vec (dim_row ?A)\n  ?n < length ?xs \\<Longrightarrow> map ?f ?xs ! ?n = ?f (?xs ! ?n)\n  S ! i < length subsets\n  dim_col (alt_matrix_A signs subsets) \\<le> length subsets\n\ngoal (1 subgoal):\n 1. map (row (alt_matrix_A signs subsets))\n     [0..<dim_row (alt_matrix_A signs subsets)] !\n    (S ! i)\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "by (simp add: alt_matrix_A_def)"], ["proof (state)\nthis:\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "then"], ["proof (chain)\npicking this:\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "show ?thesis"], ["proof (prove)\nusing this:\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "using map_eq"], ["proof (prove)\nusing this:\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i =\n  rows (alt_matrix_A signs subsets) ! (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n    \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))", "unfolding alt_matrix_A_def"], ["proof (prove)\nusing this:\n  rows\n   (mat (length subsets) (length signs)\n     (\\<lambda>(i, j). z (subsets ! i) (signs ! j))) !\n  (S ! i)\n  \\<in> carrier_vec\n         (dim_col\n           (mat (length subsets) (length signs)\n             (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n  map ((!) (rows\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j)))))\n   S !\n  i =\n  rows\n   (mat (length subsets) (length signs)\n     (\\<lambda>(i, j). z (subsets ! i) (signs ! j))) !\n  (S ! i)\n\ngoal (1 subgoal):\n 1. map ((!) (rows\n               (mat (length subsets) (length signs)\n                 (\\<lambda>(i, j). z (subsets ! i) (signs ! j)))))\n     S !\n    i\n    \\<in> carrier_vec\n           (dim_col\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))", "by auto"], ["proof (state)\nthis:\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "have h1: \" row (mat_of_rows (dim_col (alt_matrix_A signs subsets)) (map ((!) (rows (alt_matrix_A signs subsets))) S)) i\n      = (row  (alt_matrix_A signs subsets) (S ! i)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i =\n    row (alt_matrix_A signs subsets) (S ! i)", "using dim i_lt mat_of_rows_row[where i = \"i\", where n = \"(dim_col (alt_matrix_A signs subsets))\",\n          where vs = \"(map ((!) (rows (alt_matrix_A signs subsets))) S)\"]"], ["proof (prove)\nusing this:\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n  i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\n  \\<lbrakk>i < length (map ((!) (rows (alt_matrix_A signs subsets))) S);\n   map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n   \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\\<rbrakk>\n  \\<Longrightarrow> row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n                          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n                     i =\n                    map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n\ngoal (1 subgoal):\n 1. row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i =\n    row (alt_matrix_A signs subsets) (S ! i)", "using alt_matrix_char in_set_member nth_mem well_def_h"], ["proof (prove)\nusing this:\n  map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n  \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\n  i < length (map ((!) (rows (alt_matrix_A signs subsets))) S)\n  \\<lbrakk>i < length (map ((!) (rows (alt_matrix_A signs subsets))) S);\n   map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n   \\<in> carrier_vec (dim_col (alt_matrix_A signs subsets))\\<rbrakk>\n  \\<Longrightarrow> row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n                          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n                     i =\n                    map ((!) (rows (alt_matrix_A signs subsets))) S ! i\n  alt_matrix_A ?signs ?subsets = M_mat ?signs ?subsets\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n  \\<forall>x. List.member S x \\<longrightarrow> x < length subsets\n\ngoal (1 subgoal):\n 1. row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n          (map ((!) (rows (alt_matrix_A signs subsets))) S))\n     i =\n    row (alt_matrix_A signs subsets) (S ! i)", "by fastforce"], ["proof (state)\nthis:\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "have \"row (alt_matrix_A signs (take_indices subsets S) ) i = (row  (alt_matrix_A signs subsets) (S ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "using subsets_are_rows"], ["proof (prove)\nusing this:\n  \\<forall>i<length ?subsets.\n     row (alt_matrix_A ?signs ?subsets) i =\n     vec (length ?signs) (\\<lambda>j. z (?subsets ! i) (?signs ! j))\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>subsets signs.\n        \\<forall>i<length subsets.\n           row (alt_matrix_A signs subsets) i =\n           vec (length signs)\n            (\\<lambda>j. z (subsets ! i) (signs ! j))) \\<Longrightarrow>\n    row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "have f1: \"i < length S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length S", "by (metis (no_types) asm length_map take_indices_def)"], ["proof (state)\nthis:\n  i < length S\n\ngoal (1 subgoal):\n 1. (\\<And>subsets signs.\n        \\<forall>i<length subsets.\n           row (alt_matrix_A signs subsets) i =\n           vec (length signs)\n            (\\<lambda>j. z (subsets ! i) (signs ! j))) \\<Longrightarrow>\n    row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "then"], ["proof (chain)\npicking this:\n  i < length S", "have \"List.member S (S ! i)\""], ["proof (prove)\nusing this:\n  i < length S\n\ngoal (1 subgoal):\n 1. List.member S (S ! i)", "by (meson in_set_member nth_mem)"], ["proof (state)\nthis:\n  List.member S (S ! i)\n\ngoal (1 subgoal):\n 1. (\\<And>subsets signs.\n        \\<forall>i<length subsets.\n           row (alt_matrix_A signs subsets) i =\n           vec (length signs)\n            (\\<lambda>j. z (subsets ! i) (signs ! j))) \\<Longrightarrow>\n    row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "then"], ["proof (chain)\npicking this:\n  List.member S (S ! i)", "show ?thesis"], ["proof (prove)\nusing this:\n  List.member S (S ! i)\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "using f1"], ["proof (prove)\nusing this:\n  List.member S (S ! i)\n  i < length S\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (alt_matrix_A signs subsets) (S ! i)", "by (simp add: \\<open>\\<And>subsets signs. \\<forall>i<length subsets. row (alt_matrix_A signs subsets) i = vec (length signs) (\\<lambda>j. z (subsets ! i) (signs ! j))\\<close> take_indices_def well_def_h)"], ["proof (state)\nthis:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < length (take_indices subsets S) \\<Longrightarrow>\n       row (alt_matrix_A signs (take_indices subsets S)) i =\n       row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "then"], ["proof (chain)\npicking this:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)", "show \"(row (alt_matrix_A signs (take_indices subsets S) ) i = \n      row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i)\""], ["proof (prove)\nusing this:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "using h0 h1"], ["proof (prove)\nusing this:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)\n  row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i =\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (take_indices subsets S)) i =\n    row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  row (alt_matrix_A signs (map ((!) subsets) S)) i =\n  row (alt_matrix_A signs subsets) (S ! i)\n  row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i =\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i\n  row (mat_of_rows (dim_col (alt_matrix_A signs subsets))\n        (map ((!) (rows (alt_matrix_A signs subsets))) S))\n   i =\n  row (alt_matrix_A signs subsets) (S ! i)\n\ngoal (1 subgoal):\n 1. row (alt_matrix_A signs (map ((!) subsets) S)) i =\n    row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "by auto"], ["proof (state)\nthis:\n  row (alt_matrix_A signs (take_indices subsets S)) i =\n  row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length (take_indices subsets S).\n     row (alt_matrix_A signs (take_indices subsets S)) i =\n     row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. alt_matrix_A signs (take_indices subsets S) =\n    take_rows_from_matrix (alt_matrix_A signs subsets) S", "then"], ["proof (chain)\npicking this:\n  \\<forall>i<length (take_indices subsets S).\n     row (alt_matrix_A signs (take_indices subsets S)) i =\n     row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i<length (take_indices subsets S).\n     row (alt_matrix_A signs (take_indices subsets S)) i =\n     row (take_rows_from_matrix (alt_matrix_A signs subsets) S) i\n\ngoal (1 subgoal):\n 1. alt_matrix_A signs (take_indices subsets S) =\n    take_rows_from_matrix (alt_matrix_A signs subsets) S", "unfolding alt_matrix_A_def take_rows_from_matrix_def"], ["proof (prove)\nusing this:\n  \\<forall>i<length (take_indices subsets S).\n     row (mat (length (take_indices subsets S)) (length signs)\n           (\\<lambda>(i, j). z (take_indices subsets S ! i) (signs ! j)))\n      i =\n     row (mat_of_rows\n           (dim_col\n             (mat (length subsets) (length signs)\n               (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n           (take_indices\n             (rows\n               (mat (length subsets) (length signs)\n                 (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n             S))\n      i\n\ngoal (1 subgoal):\n 1. mat (length (take_indices subsets S)) (length signs)\n     (\\<lambda>(i, j). z (take_indices subsets S ! i) (signs ! j)) =\n    mat_of_rows\n     (dim_col\n       (mat (length subsets) (length signs)\n         (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n     (take_indices\n       (rows\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices subsets S).\n       vec (length signs)\n        (\\<lambda>j. z (take_indices subsets S ! i) (signs ! j)) =\n       row (mat_of_rows (length signs)\n             (take_indices\n               (rows\n                 (mat (length subsets) (length signs)\n                   (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n               S))\n        i \\<Longrightarrow>\n    mat (length (take_indices subsets S)) (length signs)\n     (\\<lambda>(i, j). z (take_indices subsets S ! i) (signs ! j)) =\n    mat_of_rows (length signs)\n     (take_indices\n       (rows\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "using eq_rowI"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>i. i < dim_row ?B \\<Longrightarrow> row ?A i = row ?B i;\n   dim_row ?A = dim_row ?B; dim_col ?A = dim_col ?B\\<rbrakk>\n  \\<Longrightarrow> ?A = ?B\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (take_indices subsets S).\n       vec (length signs)\n        (\\<lambda>j. z (take_indices subsets S ! i) (signs ! j)) =\n       row (mat_of_rows (length signs)\n             (take_indices\n               (rows\n                 (mat (length subsets) (length signs)\n                   (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n               S))\n        i \\<Longrightarrow>\n    mat (length (take_indices subsets S)) (length signs)\n     (\\<lambda>(i, j). z (take_indices subsets S ! i) (signs ! j)) =\n    mat_of_rows (length signs)\n     (take_indices\n       (rows\n         (mat (length subsets) (length signs)\n           (\\<lambda>(i, j). z (subsets ! i) (signs ! j))))\n       S)", "by (metis alt_matrix_A_def dim_col_mat(1) dim_row_mat(1) h0 length_map mat_of_rows_def take_indices_def take_rows_from_matrix_def)"], ["proof (state)\nthis:\n  alt_matrix_A signs (take_indices subsets S) =\n  take_rows_from_matrix (alt_matrix_A signs subsets) S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduce_system_matrix_subsets_helper:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes S:: \"nat list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes inv: \"length subsets \\<ge> length signs\"\n  assumes well_def_h: \"\\<forall>x. List.member S x \\<longrightarrow> x < length subsets\"\n  shows \"matrix_A signs (take_indices subsets S) = take_rows_from_matrix (matrix_A signs subsets) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat signs (take_indices subsets S) =\n    take_rows_from_matrix (M_mat signs subsets) S", "using assms reduce_system_matrix_subsets_helper_aux alt_matrix_char"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  length signs \\<le> length subsets\n  \\<forall>x. List.member S x \\<longrightarrow> x < length subsets\n  \\<lbrakk>length ?signs \\<le> length ?subsets;\n   \\<forall>x. List.member ?S x \\<longrightarrow> x < length ?subsets;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> alt_matrix_A ?signs (take_indices ?subsets ?S) =\n                    take_rows_from_matrix (alt_matrix_A ?signs ?subsets) ?S\n  alt_matrix_A ?signs ?subsets = M_mat ?signs ?subsets\n\ngoal (1 subgoal):\n 1. M_mat signs (take_indices subsets S) =\n    take_rows_from_matrix (M_mat signs subsets) S", "by auto"], ["", "lemma reduce_system_matrix_match:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"matrix_A (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))) = \n  (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "let ?A = \"(matrix_A signs subsets)\""], ["proof (state)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "let ?lhs_vec = \"(solve_for_lhs p qs subsets (matrix_A signs subsets))\""], ["proof (state)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "let ?red_mtx = \"(take_rows_from_matrix (reduce_mat_cols (matrix_A signs subsets) ?lhs_vec) (rows_to_keep (reduce_mat_cols (matrix_A signs subsets) ?lhs_vec)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h1: \"matrix_A (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n   = matrix_A (reduction_signs p qs signs subsets (matrix_A signs subsets)) (reduction_subsets p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    M_mat (reduction_signs p qs signs subsets (M_mat signs subsets))\n     (reduction_subsets p qs signs subsets (M_mat signs subsets))", "using reduction_signs_is_get_signs reduction_subsets_is_get_subsets"], ["proof (prove)\nusing this:\n  reduction_signs ?p ?qs ?signs ?subsets ?m =\n  get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n  reduction_subsets ?p ?qs ?signs ?subsets ?m =\n  get_subsets (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    M_mat (reduction_signs p qs signs subsets (M_mat signs subsets))\n     (reduction_subsets p qs signs subsets (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  M_mat (reduction_signs p qs signs subsets (M_mat signs subsets))\n   (reduction_subsets p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h1_var: \"matrix_A (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n   = matrix_A (take_indices signs (find_nonzeros_from_input_vec ?lhs_vec)) (take_indices subsets (rows_to_keep (reduce_mat_cols ?A ?lhs_vec)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_indices subsets\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "using h1 reduction_signs_def reduction_subsets_def"], ["proof (prove)\nusing this:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  M_mat (reduction_signs p qs signs subsets (M_mat signs subsets))\n   (reduction_subsets p qs signs subsets (M_mat signs subsets))\n  reduction_signs ?p ?qs ?signs ?subsets ?matr =\n  take_indices ?signs\n   (find_nonzeros_from_input_vec (solve_for_lhs ?p ?qs ?subsets ?matr))\n  reduction_subsets ?p ?qs ?signs ?subsets ?matr =\n  take_indices ?subsets\n   (rows_to_keep\n     (reduce_mat_cols ?matr (solve_for_lhs ?p ?qs ?subsets ?matr)))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_indices subsets\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "by auto"], ["proof (state)\nthis:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_indices subsets\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h2: \"?red_mtx = (take_rows_from_matrix (take_cols_from_matrix ?A (find_nonzeros_from_input_vec ?lhs_vec)) (rows_to_keep (take_cols_from_matrix ?A (find_nonzeros_from_input_vec ?lhs_vec))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    take_rows_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (rows_to_keep\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "by simp"], ["proof (state)\nthis:\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  take_rows_from_matrix\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h30: \"(construct_lhs_vector p qs signs) = ?lhs_vec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using assms construct_lhs_matches_solve_for_lhs"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by simp"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h3a: \"\\<forall>x. List.member (find_nonzeros_from_input_vec ?lhs_vec) x \\<longrightarrow>x < length (signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length signs", "using h30 size_of_lhs"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length signs", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (filter\n          (\\<lambda>i.\n              solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n              0)\n          [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n        x \\<longrightarrow>\n       x < length signs", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>w_vec p qs signs =\n                solve_for_lhs p qs subsets (M_mat signs subsets);\n        \\<And>p qs signs. dim_vec (w_vec p qs signs) = length signs;\n        List.member\n         (filter\n           (\\<lambda>i.\n               solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n               0)\n           [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n         x\\<rbrakk>\n       \\<Longrightarrow> x < length signs", "by (metis atLeastLessThan_iff filter_is_subset member_def set_upt subset_eq)"], ["proof (state)\nthis:\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h3b_a: \"\\<forall>x. List.member (find_nonzeros_from_input_vec ?lhs_vec) x \\<longrightarrow>x < length (subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length subsets", "using assms h30 size_of_lhs same_size"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length subsets", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (filter\n          (\\<lambda>i.\n              solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n              0)\n          [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n        x \\<longrightarrow>\n       x < length subsets", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n        distinct signs;\n        set (characterize_consistent_signs_at_roots_copr p qs)\n        \\<subseteq> set signs;\n        satisfy_equation p qs subsets signs;\n        invertible_mat (M_mat signs subsets);\n        w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets);\n        \\<And>p qs signs. dim_vec (w_vec p qs signs) = length signs;\n        \\<And>signs subsets.\n           invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n           length subsets = length signs;\n        List.member\n         (filter\n           (\\<lambda>i.\n               solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n               0)\n           [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n         x\\<rbrakk>\n       \\<Longrightarrow> x < length signs", "by (simp add: find_nonzeros_from_input_vec_def h3a)"], ["proof (state)\nthis:\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length subsets\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h3ba: \"length\n     (filter (\\<lambda>i. solve_for_lhs p qs subsets (matrix_A signs subsets) $ i \\<noteq> 0)\n       [0..<length subsets])\n    \\<le> length subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<length subsets])\n    \\<le> length subsets", "using length_filter_le[where P = \"(\\<lambda>i. solve_for_lhs p qs subsets (matrix_A signs subsets) $ i \\<noteq> 0)\",\n    where xs = \"[0..<length subsets]\"] length_upto"], ["proof (prove)\nusing this:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<length subsets])\n  \\<le> length [0..<length subsets]\n  length [?i..?j] = nat (?j - ?i + 1)\n\ngoal (1 subgoal):\n 1. length\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<length subsets])\n    \\<le> length subsets", "by auto"], ["proof (state)\nthis:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<length subsets])\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have \" length subsets = dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length subsets =\n    dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))", "using h30 inv size_of_lhs same_size[of signs subsets]"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  invertible_mat (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n  length subsets = length signs\n\ngoal (1 subgoal):\n 1. length subsets =\n    dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>w_vec p qs signs =\n             solve_for_lhs p qs subsets (M_mat signs subsets);\n     invertible_mat (M_mat signs subsets);\n     \\<And>p qs signs. dim_vec (w_vec p qs signs) = length signs;\n     length subsets = length signs\\<rbrakk>\n    \\<Longrightarrow> length signs =\n                      dim_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets))", "by metis"], ["proof (state)\nthis:\n  length subsets =\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "then"], ["proof (chain)\npicking this:\n  length subsets =\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))", "have \"length\n     (filter (\\<lambda>i. solve_for_lhs p qs subsets (matrix_A signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))])\n    \\<le> length subsets\""], ["proof (prove)\nusing this:\n  length subsets =\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. length\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n    \\<le> length subsets", "using h3ba"], ["proof (prove)\nusing this:\n  length subsets =\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<length subsets])\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. length\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n    \\<le> length subsets", "by auto"], ["proof (state)\nthis:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "then"], ["proof (chain)\npicking this:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n  \\<le> length subsets", "have h3b: \"length subsets \\<ge> length (take_indices signs (find_nonzeros_from_input_vec ?lhs_vec))\""], ["proof (prove)\nusing this:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. length\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<le> length subsets", "unfolding take_indices_def find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  length\n   (filter\n     (\\<lambda>i.\n         solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n     [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. length\n     (map ((!) signs)\n       (filter\n         (\\<lambda>i.\n             solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n             0)\n         [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))]))\n    \\<le> length subsets", "by auto"], ["proof (state)\nthis:\n  length\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<le> length subsets\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h3c: \"\\<forall>x. List.member (rows_to_keep (reduce_mat_cols ?A ?lhs_vec)) x \\<longrightarrow> x < length (subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (rows_to_keep\n          (reduce_mat_cols (M_mat signs subsets)\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n        x \\<longrightarrow>\n       x < length subsets", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "assume x_mem: \"List.member (rows_to_keep\n            (take_cols_from_matrix (matrix_A signs subsets)\n              (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) x\""], ["proof (state)\nthis:\n  List.member\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "obtain nn :: \"rat list list \\<Rightarrow> nat list \\<Rightarrow> nat\" where\n      \"\\<forall>x2 x3. (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) = (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        \\<forall>x2 x3.\n           (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n           (nn x2 x3 \\<in> set x3 \\<and>\n            \\<not> nn x2 x3 < length x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "then"], ["proof (chain)\npicking this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)", "have f4: \"nn signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<in> set (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<and> \\<not> nn signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) < length signs \\<or> matrix_A (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) subsets = take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\nusing this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n\ngoal (1 subgoal):\n 1. nn signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    \\<not> nn signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))\n           < length signs \\<or>\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using h3a nonzero reduce_system_matrix_signs_helper"], ["proof (prove)\nusing this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n  p \\<noteq> 0\n  \\<lbrakk>\\<forall>x. List.member ?S x \\<longrightarrow> x < length ?signs;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> M_mat (take_indices ?signs ?S) ?subsets =\n                    take_cols_from_matrix (M_mat ?signs ?subsets) ?S\n\ngoal (1 subgoal):\n 1. nn signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    \\<not> nn signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))\n           < length signs \\<or>\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by auto"], ["proof (state)\nthis:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "then"], ["proof (chain)\npicking this:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have \"matrix_A (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) subsets = take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<and> x \\<in> set (map snd (pivot_positions (gauss_jordan_single (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T)))\""], ["proof (prove)\nusing this:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    x \\<in> set (map snd\n                  (pivot_positions\n                    (gauss_jordan_single\n                      (take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets))))\\<^sup>T)))", "using f4"], ["proof (prove)\nusing this:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    x \\<in> set (map snd\n                  (pivot_positions\n                    (gauss_jordan_single\n                      (take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets))))\\<^sup>T)))", "by (metis h3a in_set_member rows_to_keep_def x_mem)"], ["proof (state)\nthis:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "thus \"x < length (subsets)\""], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n\ngoal (1 subgoal):\n 1. x < length subsets", "using x_mem"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n\ngoal (1 subgoal):\n 1. x < length subsets", "unfolding rows_to_keep_def"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (map snd\n     (pivot_positions\n       (gauss_jordan_single\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T)))\n   x\n\ngoal (1 subgoal):\n 1. x < length subsets", "by (metis (no_types) dim_row_matrix_A rows_to_keep_def rows_to_keep_lem)"], ["proof (state)\nthis:\n  x < length subsets\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "have h3: \"matrix_A (take_indices signs (find_nonzeros_from_input_vec ?lhs_vec)) (take_indices subsets (rows_to_keep (reduce_mat_cols ?A ?lhs_vec))) = \n    (take_rows_from_matrix (take_cols_from_matrix ?A (find_nonzeros_from_input_vec ?lhs_vec)) (rows_to_keep (take_cols_from_matrix ?A (find_nonzeros_from_input_vec ?lhs_vec))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_indices subsets\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    take_rows_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (rows_to_keep\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "using inv h3a h3b h3c reduce_system_matrix_subsets_helper reduce_system_matrix_signs_helper\n      assms"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n  length\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<le> length subsets\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets\n  \\<lbrakk>?p \\<noteq> 0; length ?signs \\<le> length ?subsets;\n   \\<forall>x.\n      List.member ?S x \\<longrightarrow> x < length ?subsets\\<rbrakk>\n  \\<Longrightarrow> M_mat ?signs (take_indices ?subsets ?S) =\n                    take_rows_from_matrix (M_mat ?signs ?subsets) ?S\n  \\<lbrakk>\\<forall>x. List.member ?S x \\<longrightarrow> x < length ?signs;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> M_mat (take_indices ?signs ?S) ?subsets =\n                    take_cols_from_matrix (M_mat ?signs ?subsets) ?S\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_indices subsets\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    take_rows_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (rows_to_keep\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "by auto"], ["proof (state)\nthis:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_indices subsets\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  take_rows_from_matrix\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "using h1 h2 h3"], ["proof (prove)\nusing this:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  M_mat (reduction_signs p qs signs subsets (M_mat signs subsets))\n   (reduction_subsets p qs signs subsets (M_mat signs subsets))\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  take_rows_from_matrix\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_indices subsets\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  take_rows_from_matrix\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "by (metis fst_conv get_matrix_def h1_var reduce_system.simps reduction_step.simps)"], ["proof (state)\nthis:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* gauss_jordan_single_rank is crucial in this section *)"], ["", "subsection \"Showing invertibility preserved when reducing\""], ["", "(* Overall:\n  Start with a matrix equation.\n  Input a matrix, subsets, and signs.\n  Drop columns of the matrix based on the 0's on the LHS---so extract a list of 0's. Reduce signs accordingly.\n  Then find a list of rows to delete based on using rank (use the transpose result, pivot positions!),\n   and delete those rows.  Reduce subsets accordingly.\n  End with a reduced system! *)"], ["", "lemma well_def_find_zeros_from_lhs_vec:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"(\\<And>j. j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<Longrightarrow>\n          j < length (cols (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "assume j_in: \" j \\<in> set (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (matrix_A signs subsets))) \""], ["proof (state)\nthis:\n  j \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "let ?og_mat = \"(matrix_A signs subsets)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "let ?lhs = \"(solve_for_lhs p qs subsets ?og_mat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "let ?new_mat = \"(take_rows_from_matrix (reduce_mat_cols ?og_mat ?lhs) (rows_to_keep (reduce_mat_cols ?og_mat ?lhs)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "have \"square_mat (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using inv"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using invertible_mat_def"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "by blast"], ["proof (state)\nthis:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  square_mat (M_mat signs subsets)", "have mat_size: \"?og_mat \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "using size_of_mat"], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "by auto"], ["proof (state)\nthis:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "have \"dim_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)) = (length signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n    length signs", "using size_of_lhs construct_lhs_matches_solve_for_lhs assms"], ["proof (prove)\nusing this:\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n\ngoal (1 subgoal):\n 1. dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) =\n    length signs", "by (metis (full_types))"], ["proof (state)\nthis:\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) = length signs\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) = length signs", "have h: \"j < (length signs)\""], ["proof (prove)\nusing this:\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) = length signs\n\ngoal (1 subgoal):\n 1. j < length signs", "using j_in"], ["proof (prove)\nusing this:\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) = length signs\n  j \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. j < length signs", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets)) = length signs\n  j \\<in> set (filter\n                (\\<lambda>i.\n                    solve_for_lhs p qs subsets (M_mat signs subsets) $\n                    i \\<noteq>\n                    0)\n                [0..<\n                 dim_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))])\n\ngoal (1 subgoal):\n 1. j < length signs", "by simp"], ["proof (state)\nthis:\n  j < length signs\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  j < length signs", "show \"j <  length (cols (matrix_A signs subsets))\""], ["proof (prove)\nusing this:\n  j < length signs\n\ngoal (1 subgoal):\n 1. j < length (cols (M_mat signs subsets))", "using mat_size"], ["proof (prove)\nusing this:\n  j < length signs\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. j < length (cols (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  j < length (cols (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma take_cols_subsets_og_cols:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"set (take_indices (cols (matrix_A signs subsets))\n          (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\n    \\<subseteq> set (cols (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "have well_def: \"(\\<And>j. j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<Longrightarrow>\n          j < length (cols (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "using assms well_def_find_zeros_from_lhs_vec"], ["proof (prove)\nusing this:\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  \\<lbrakk>length ?subsets = length ?signs;\n   invertible_mat (M_mat ?signs ?subsets); ?p \\<noteq> 0;\n   well_def_signs (length ?qs) ?signs; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   ?j \\<in> set (find_nonzeros_from_input_vec\n                  (solve_for_lhs ?p ?qs ?subsets\n                    (M_mat ?signs ?subsets)))\\<rbrakk>\n  \\<Longrightarrow> ?j < length (cols (M_mat ?signs ?subsets))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "have \"\\<forall>x. x \\<in> set (take_indices (cols (matrix_A signs subsets))\n          (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) \n    \\<longrightarrow> x \\<in>  set (cols (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<Longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<Longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "let ?og_list = \"(cols (matrix_A signs subsets))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<Longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "let ?ind_list = \"(find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<Longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "assume x_in: \"x \\<in> set (take_indices ?og_list ?ind_list)\""], ["proof (state)\nthis:\n  x \\<in> set (take_indices (cols (M_mat signs subsets))\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<Longrightarrow>\n       x \\<in> set (cols (M_mat signs subsets))", "show \"x \\<in> set (cols (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (cols (M_mat signs subsets))", "using x_in"], ["proof (prove)\nusing this:\n  x \\<in> set (take_indices (cols (M_mat signs subsets))\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. x \\<in> set (cols (M_mat signs subsets))", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  x \\<in> set (map ((!) (cols (M_mat signs subsets)))\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. x \\<in> set (cols (M_mat signs subsets))", "using in_set_member"], ["proof (prove)\nusing this:\n  x \\<in> set (map ((!) (cols (M_mat signs subsets)))\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. x \\<in> set (cols (M_mat signs subsets))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>x xs. (x \\<in> set xs) = List.member xs x;\n        xa \\<in> set (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        x = cols (M_mat signs subsets) ! xa\\<rbrakk>\n       \\<Longrightarrow> cols (M_mat signs subsets) ! xa\n                         \\<in> set (cols (M_mat signs subsets))", "using in_set_conv_nth well_def"], ["proof (prove)\nusing this:\n  (?x \\<in> set ?xs) = (\\<exists>i<length ?xs. ?xs ! i = ?x)\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>x xs. (x \\<in> set xs) = List.member xs x;\n        xa \\<in> set (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)));\n        x = cols (M_mat signs subsets) ! xa\\<rbrakk>\n       \\<Longrightarrow> cols (M_mat signs subsets) ! xa\n                         \\<in> set (cols (M_mat signs subsets))", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> set (cols (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in> set (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))) \\<longrightarrow>\n     x \\<in> set (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     x \\<in> set (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))) \\<longrightarrow>\n     x \\<in> set (cols (M_mat signs subsets))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in> set (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))) \\<longrightarrow>\n     x \\<in> set (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "by blast"], ["proof (state)\nthis:\n  set (take_indices (cols (M_mat signs subsets))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reduction_doesnt_break_things_invertibility_step1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"vec_space.rank (length signs) (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets))) =\n    (length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "let ?og_mat = \"(matrix_A signs subsets)\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "let ?lhs = \"(solve_for_lhs p qs subsets ?og_mat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "let ?new_mat = \"(take_rows_from_matrix (reduce_mat_cols ?og_mat ?lhs) (rows_to_keep (reduce_mat_cols ?og_mat ?lhs)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have \"square_mat (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using inv"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using invertible_mat_def"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "by blast"], ["proof (state)\nthis:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  square_mat (M_mat signs subsets)", "have mat_size: \"?og_mat \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "using size_of_mat"], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "by auto"], ["proof (state)\nthis:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "have mat_size_alt: \"?og_mat \\<in> carrier_mat (length subsets) (length subsets)\""], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length subsets) (length subsets)", "using size_of_mat same_size assms"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length subsets) (length subsets)", "by auto"], ["proof (state)\nthis:\n  M_mat signs subsets \\<in> carrier_mat (length subsets) (length subsets)\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have det_h: \"det ?og_mat \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "using invertible_det[where A = \"matrix_A signs subsets\"] mat_size"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat (M_mat signs subsets) =\n  (det (M_mat signs subsets) \\<noteq> 0)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "using inv"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat (M_mat signs subsets) =\n  (det (M_mat signs subsets) \\<noteq> 0)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  det (M_mat signs subsets) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  det (M_mat signs subsets) \\<noteq> 0", "have rank_h: \"vec_space.rank (length signs) ?og_mat = (length signs)\""], ["proof (prove)\nusing this:\n  det (M_mat signs subsets) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs) (M_mat signs subsets) = length signs", "using vec_space.det_rank_iff  mat_size"], ["proof (prove)\nusing this:\n  det (M_mat signs subsets) \\<noteq> 0\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  (det ?A \\<noteq> (0::?'a)) = (vec_space.rank ?n ?A = ?n)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs) (M_mat signs subsets) = length signs", "by auto"], ["proof (state)\nthis:\n  vec_space.rank (length signs) (M_mat signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank (length signs) (M_mat signs subsets) = length signs", "have dist_cols: \"distinct (cols ?og_mat)\""], ["proof (prove)\nusing this:\n  vec_space.rank (length signs) (M_mat signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. distinct (cols (M_mat signs subsets))", "using mat_size vec_space.non_distinct_low_rank[where A = ?og_mat, where n = \"length signs\"]"], ["proof (prove)\nusing this:\n  vec_space.rank (length signs) (M_mat signs subsets) = length signs\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  \\<lbrakk>M_mat signs subsets\n           \\<in> carrier_mat (length signs) (length signs);\n   \\<not> distinct (cols (M_mat signs subsets))\\<rbrakk>\n  \\<Longrightarrow> vec_space.rank (length signs) (M_mat signs subsets)\n                    < length signs\n\ngoal (1 subgoal):\n 1. distinct (cols (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  distinct (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have well_def: \"(\\<And>j. j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<Longrightarrow>\n          j < length (cols (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "using assms well_def_find_zeros_from_lhs_vec"], ["proof (prove)\nusing this:\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  \\<lbrakk>length ?subsets = length ?signs;\n   invertible_mat (M_mat ?signs ?subsets); ?p \\<noteq> 0;\n   well_def_signs (length ?qs) ?signs; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   ?j \\<in> set (find_nonzeros_from_input_vec\n                  (solve_for_lhs ?p ?qs ?subsets\n                    (M_mat ?signs ?subsets)))\\<rbrakk>\n  \\<Longrightarrow> ?j < length (cols (M_mat ?signs ?subsets))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length (cols (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have dist1: \"distinct\n     (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])", "by auto"], ["proof (state)\nthis:\n  distinct\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have clear: \"set (take_indices (cols (matrix_A signs subsets))\n          (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\n    \\<subseteq> set (cols (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "using assms take_cols_subsets_og_cols"], ["proof (prove)\nusing this:\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  \\<lbrakk>length ?subsets = length ?signs;\n   invertible_mat (M_mat ?signs ?subsets); ?p \\<noteq> 0;\n   well_def_signs (length ?qs) ?signs; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs\\<rbrakk>\n  \\<Longrightarrow> set (take_indices (cols (M_mat ?signs ?subsets))\n                          (find_nonzeros_from_input_vec\n                            (solve_for_lhs ?p ?qs ?subsets\n                              (M_mat ?signs ?subsets))))\n                    \\<subseteq> set (cols (M_mat ?signs ?subsets))\n\ngoal (1 subgoal):\n 1. set (take_indices (cols (M_mat signs subsets))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<subseteq> set (cols (M_mat signs subsets))", "by auto"], ["proof (state)\nthis:\n  set (take_indices (cols (M_mat signs subsets))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  set (take_indices (cols (M_mat signs subsets))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))", "have \"distinct (take_indices (cols (matrix_A signs subsets))\n          (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (prove)\nusing this:\n  set (take_indices (cols (M_mat signs subsets))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. distinct\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  set (map ((!) (cols (M_mat signs subsets)))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. distinct\n     (map ((!) (cols (M_mat signs subsets)))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using dist1 dist_cols well_def conjugatable_vec_space.distinct_map_nth[where ls = \"cols (matrix_A signs subsets)\", where inds = \"(find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\"]"], ["proof (prove)\nusing this:\n  set (map ((!) (cols (M_mat signs subsets)))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n  distinct\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  distinct (cols (M_mat signs subsets))\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length (cols (M_mat signs subsets))\n  \\<lbrakk>distinct (cols (M_mat signs subsets));\n   distinct\n    (find_nonzeros_from_input_vec\n      (solve_for_lhs p qs subsets (M_mat signs subsets)));\n   \\<And>j.\n      j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets\n                      (M_mat signs subsets))) \\<Longrightarrow>\n      j < length (cols (M_mat signs subsets))\\<rbrakk>\n  \\<Longrightarrow> distinct\n                     (map ((!) (cols (M_mat signs subsets)))\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. distinct\n     (map ((!) (cols (M_mat signs subsets)))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by auto"], ["proof (state)\nthis:\n  distinct\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  distinct\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))", "have unfold_thesis: \"vec_space.rank (length signs) (mat_of_cols (dim_row ?og_mat) (take_indices (cols ?og_mat) (find_nonzeros_from_input_vec ?lhs)))\n= (length (find_nonzeros_from_input_vec ?lhs))\""], ["proof (prove)\nusing this:\n  distinct\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using clear inv conjugatable_vec_space.rank_invertible_subset_cols[where A= \"matrix_A signs subsets\", where B = \"(take_indices (cols (matrix_A signs subsets))\n         (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\"]"], ["proof (prove)\nusing this:\n  distinct\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  set (take_indices (cols (M_mat signs subsets))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<subseteq> set (cols (M_mat signs subsets))\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>invertible_mat (M_mat signs subsets);\n   M_mat signs subsets \\<in> carrier_mat ?n ?n;\n   set (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   \\<subseteq> set (cols (M_mat signs subsets));\n   distinct\n    (take_indices (cols (M_mat signs subsets))\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<rbrakk>\n  \\<Longrightarrow> vec_space.rank ?n\n                     (mat_of_cols ?n\n                       (take_indices (cols (M_mat signs subsets))\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))) =\n                    length\n                     (take_indices (cols (M_mat signs subsets))\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (simp add: len_eq mat_size take_indices_def)"], ["proof (state)\nthis:\n  vec_space.rank (length signs)\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank (length signs)\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))", "show ?thesis"], ["proof (prove)\nusing this:\n  vec_space.rank (length signs)\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (mat_of_cols (length subsets)\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n    vec_space.rank (length signs)\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "unfolding take_cols_from_matrix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (mat_of_cols (length subsets)\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n    vec_space.rank (length signs)\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by auto"], ["proof (state)\nthis:\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rechar_take_cols: \"take_cols_var A B = take_cols_from_matrix A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take_cols_var A B = take_cols_from_matrix A B", "unfolding take_cols_var_def take_cols_from_matrix_def take_indices_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_cols (dim_row A) (map ((!) (cols A)) B) =\n    mat_of_cols (dim_row A) (map ((!) (cols A)) B)", "by auto"], ["", "lemma rows_and_cols_transpose: \"rows M = cols M\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rows M = cols M\\<^sup>T", "using row_transpose"], ["proof (prove)\nusing this:\n  ?j < dim_col ?A \\<Longrightarrow> row ?A\\<^sup>T ?j = col ?A ?j\n\ngoal (1 subgoal):\n 1. rows M = cols M\\<^sup>T", "by simp"], ["", "lemma take_rows_and_take_cols:  \"(take_rows_from_matrix M r) = (take_cols_from_matrix M\\<^sup>T r)\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take_rows_from_matrix M r = (take_cols_from_matrix M\\<^sup>T r)\\<^sup>T", "unfolding take_rows_from_matrix_def take_cols_from_matrix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows (dim_col M) (take_indices (rows M) r) =\n    (mat_of_cols (dim_row M\\<^sup>T)\n      (take_indices (cols M\\<^sup>T) r))\\<^sup>T", "using transpose_carrier_mat rows_and_cols_transpose"], ["proof (prove)\nusing this:\n  (?A\\<^sup>T \\<in> carrier_mat ?nc ?nr) = (?A \\<in> carrier_mat ?nr ?nc)\n  rows ?M = cols ?M\\<^sup>T\n\ngoal (1 subgoal):\n 1. mat_of_rows (dim_col M) (take_indices (rows M) r) =\n    (mat_of_cols (dim_row M\\<^sup>T)\n      (take_indices (cols M\\<^sup>T) r))\\<^sup>T", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows (dim_col M) (take_indices (rows M) r) =\n    (mat_of_cols (dim_col M) (take_indices (rows M) r))\\<^sup>T", "by (simp add: transpose_mat_of_cols)"], ["", "lemma reduction_doesnt_break_things_invertibility:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes len_eq: \"length subsets = length signs\"\n  assumes inv: \"invertible_mat (matrix_A signs subsets)\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes welldefined_signs1: \"well_def_signs (length qs) signs\"\n  assumes distinct_signs: \"distinct signs\"\n  assumes all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(signs)\"\n  assumes match: \"satisfy_equation p qs subsets signs\"\n  shows \"invertible_mat (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?og_mat = \"(matrix_A signs subsets)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?lhs = \"(solve_for_lhs p qs subsets ?og_mat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?step1_mat = \"(reduce_mat_cols ?og_mat ?lhs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?new_mat = \"take_rows_from_matrix ?step1_mat (rows_to_keep ?step1_mat)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?ind_list = \"(find_nonzeros_from_input_vec  ?lhs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have \"square_mat (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using inv"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "using invertible_mat_def"], ["proof (prove)\nusing this:\n  invertible_mat (M_mat signs subsets)\n  invertible_mat ?A \\<equiv>\n  square_mat ?A \\<and>\n  (\\<exists>B. inverts_mat ?A B \\<and> inverts_mat B ?A)\n\ngoal (1 subgoal):\n 1. square_mat (M_mat signs subsets)", "by blast"], ["proof (state)\nthis:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  square_mat (M_mat signs subsets)", "have og_mat_size: \"?og_mat \\<in> carrier_mat (length signs) (length signs)\""], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "using size_of_mat"], ["proof (prove)\nusing this:\n  square_mat (M_mat signs subsets)\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n\ngoal (1 subgoal):\n 1. M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)", "by auto"], ["proof (state)\nthis:\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have \"dim_col (mat_of_cols (dim_row ?og_mat) (take_indices (cols ?og_mat) ?ind_list))\n      = (length (find_nonzeros_from_input_vec ?lhs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_col\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (simp add: take_indices_def)"], ["proof (state)\nthis:\n  dim_col\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  dim_col\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have \"mat_of_cols (dim_row ?og_mat) (take_indices (cols ?og_mat) ?ind_list)\n      \\<in> carrier_mat (length signs) (length (find_nonzeros_from_input_vec ?lhs))\""], ["proof (prove)\nusing this:\n  dim_col\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    \\<in> carrier_mat (length signs)\n           (length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by (simp add: len_eq mat_of_cols_def)"], ["proof (state)\nthis:\n  mat_of_cols (dim_row (M_mat signs subsets))\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  mat_of_cols (dim_row (M_mat signs subsets))\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))", "have step1_mat_size: \"?step1_mat \\<in> carrier_mat (length signs) (length (find_nonzeros_from_input_vec ?lhs))\""], ["proof (prove)\nusing this:\n  mat_of_cols (dim_row (M_mat signs subsets))\n   (take_indices (cols (M_mat signs subsets))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))\n    \\<in> carrier_mat (length signs)\n           (length\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by (simp add: take_cols_from_matrix_def)"], ["proof (state)\nthis:\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))", "have \"dim_row ?step1_mat \\<ge> dim_col ?step1_mat\""], ["proof (prove)\nusing this:\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<le> dim_row\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (metis carrier_matD(1) carrier_matD(2) construct_lhs_matches_solve_for_lhs diff_zero find_nonzeros_from_input_vec_def inv length_filter_le length_upt match size_of_lhs)"], ["proof (state)\nthis:\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<le> dim_row\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<le> dim_row\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have gt_eq_assm: \"dim_col ?step1_mat\\<^sup>T  \\<ge> dim_row  ?step1_mat\\<^sup>T\""], ["proof (prove)\nusing this:\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<le> dim_row\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. dim_row\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    \\<le> dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "by simp"], ["proof (state)\nthis:\n  dim_row\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<le> dim_col\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have det_h: \"det ?og_mat \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "using invertible_det[where A = \"matrix_A signs subsets\"] og_mat_size"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat (M_mat signs subsets) =\n  (det (M_mat signs subsets) \\<noteq> 0)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "using inv"], ["proof (prove)\nusing this:\n  M_mat signs subsets \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat (M_mat signs subsets) =\n  (det (M_mat signs subsets) \\<noteq> 0)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. det (M_mat signs subsets) \\<noteq> 0", "by blast"], ["proof (state)\nthis:\n  det (M_mat signs subsets) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  det (M_mat signs subsets) \\<noteq> 0", "have rank_h: \"vec_space.rank (length signs) ?og_mat = (length signs)\""], ["proof (prove)\nusing this:\n  det (M_mat signs subsets) \\<noteq> 0\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs) (M_mat signs subsets) = length signs", "using vec_space.det_rank_iff  og_mat_size"], ["proof (prove)\nusing this:\n  det (M_mat signs subsets) \\<noteq> 0\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  (det ?A \\<noteq> (0::?'a)) = (vec_space.rank ?n ?A = ?n)\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs) (M_mat signs subsets) = length signs", "by auto"], ["proof (state)\nthis:\n  vec_space.rank (length signs) (M_mat signs subsets) = length signs\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have rank_drop_cols: \"vec_space.rank (length signs) ?step1_mat = (dim_col ?step1_mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using assms reduction_doesnt_break_things_invertibility_step1 step1_mat_size"], ["proof (prove)\nusing this:\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  \\<lbrakk>length ?subsets = length ?signs;\n   invertible_mat (M_mat ?signs ?subsets); ?p \\<noteq> 0;\n   well_def_signs (length ?qs) ?signs; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs\\<rbrakk>\n  \\<Longrightarrow> vec_space.rank (length ?signs)\n                     (reduce_mat_cols (M_mat ?signs ?subsets)\n                       (solve_for_lhs ?p ?qs ?subsets\n                         (M_mat ?signs ?subsets))) =\n                    length\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs ?p ?qs ?subsets\n                         (M_mat ?signs ?subsets)))\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by auto"], ["proof (state)\nthis:\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "let ?step1_T = \"?step1_mat\\<^sup>T\""], ["proof (state)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have rank_transpose: \"vec_space.rank (length signs) ?step1_mat = vec_space.rank (length (find_nonzeros_from_input_vec ?lhs)) ?step1_T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "using transpose_rank[of ?step1_mat]"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (dim_row\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  vec_space.rank\n   (dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "using step1_mat_size"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (dim_row\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  vec_space.rank\n   (dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank (length signs)\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n    vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "by auto"], ["proof (state)\nthis:\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have obv: \"?step1_T \\<in> carrier_mat (dim_row ?step1_T) (dim_col ?step1_T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    \\<in> carrier_mat\n           (dim_row\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n           (dim_col\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)", "by auto"], ["proof (state)\nthis:\n  (reduce_mat_cols (M_mat signs subsets)\n    (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<in> carrier_mat\n         (dim_row\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n         (dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have should_have_this:\"vec_space.rank (length (find_nonzeros_from_input_vec ?lhs)) (take_cols ?step1_T (map snd (pivot_positions (gauss_jordan_single (?step1_T))))) = vec_space.rank (length (find_nonzeros_from_input_vec ?lhs)) ?step1_T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "using obv gt_eq_assm conjugatable_vec_space.gauss_jordan_single_rank[where A = \"?step1_T\", where n = \"dim_row ?step1_T\", where nc = \"dim_col ?step1_T\"]"], ["proof (prove)\nusing this:\n  (reduce_mat_cols (M_mat signs subsets)\n    (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<in> carrier_mat\n         (dim_row\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n         (dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n  dim_row\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<le> dim_col\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<lbrakk>(reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n           \\<in> carrier_mat\n                  (dim_row\n                    (reduce_mat_cols (M_mat signs subsets)\n                      (solve_for_lhs p qs subsets\n                        (M_mat signs subsets)))\\<^sup>T)\n                  (dim_col\n                    (reduce_mat_cols (M_mat signs subsets)\n                      (solve_for_lhs p qs subsets\n                        (M_mat signs subsets)))\\<^sup>T);\n   dim_row\n    (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n   \\<le> dim_col\n          (reduce_mat_cols (M_mat signs subsets)\n            (solve_for_lhs p qs subsets\n              (M_mat signs subsets)))\\<^sup>T\\<rbrakk>\n  \\<Longrightarrow> vec_space.rank\n                     (dim_row\n                       (reduce_mat_cols (M_mat signs subsets)\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets)))\\<^sup>T)\n                     (take_cols\n                       (reduce_mat_cols (M_mat signs subsets)\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets)))\\<^sup>T\n                       (map snd\n                         (pivot_positions\n                           (gauss_jordan_single\n                             (reduce_mat_cols (M_mat signs subsets)\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets)))\\<^sup>T)))) =\n                    vec_space.rank\n                     (dim_row\n                       (reduce_mat_cols (M_mat signs subsets)\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets)))\\<^sup>T)\n                     (reduce_mat_cols (M_mat signs subsets)\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "by (simp add: take_cols_from_matrix_def take_indices_def)"], ["proof (state)\nthis:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T", "have \"vec_space.rank (length (find_nonzeros_from_input_vec ?lhs)) (take_cols ?step1_T (map snd (pivot_positions (gauss_jordan_single (?step1_T))))) = dim_col ?step1_mat\""], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using rank_drop_cols rank_transpose"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by auto"], ["proof (state)\nthis:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have with_take_cols_from_matrix: \"vec_space.rank (length (find_nonzeros_from_input_vec ?lhs)) (take_cols_from_matrix ?step1_T (map snd (pivot_positions (gauss_jordan_single (?step1_T))))) = dim_col ?step1_mat\""], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using rank_transpose rechar_take_cols conjugatable_vec_space.gjs_and_take_cols_var"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  vec_space.rank (length signs)\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) =\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  take_cols_var ?A ?B = take_cols_from_matrix ?A ?B\n  \\<lbrakk>?A \\<in> carrier_mat ?n ?nc; ?n \\<le> ?nc\\<rbrakk>\n  \\<Longrightarrow> take_cols ?A\n                     (map snd (pivot_positions (gauss_jordan_single ?A))) =\n                    take_cols_var ?A\n                     (map snd (pivot_positions (gauss_jordan_single ?A)))\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (take_cols_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))\\<^sup>T)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>vec_space.rank\n              (length\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (take_cols\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets\n                      (M_mat signs subsets))))\\<^sup>T\n                (map snd\n                  (pivot_positions\n                    (gauss_jordan_single\n                      (take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets))))\\<^sup>T)))) =\n             dim_col\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     vec_space.rank (length signs)\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T;\n     \\<And>A B. take_cols_var A B = take_cols_from_matrix A B;\n     \\<And>A n nc.\n        \\<lbrakk>A \\<in> carrier_mat n nc; n \\<le> nc\\<rbrakk>\n        \\<Longrightarrow> take_cols A\n                           (map snd\n                             (pivot_positions (gauss_jordan_single A))) =\n                          take_cols_var A\n                           (map snd\n                             (pivot_positions\n                               (gauss_jordan_single A)))\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (length\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (map snd\n                           (pivot_positions\n                             (gauss_jordan_single\n                               (take_cols_from_matrix (M_mat signs subsets)\n                                 (find_nonzeros_from_input_vec\n                                   (solve_for_lhs p qs subsets\n                                     (M_mat signs subsets))))\\<^sup>T)))) =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "by (smt conjugatable_vec_space.gjs_and_take_cols_var gt_eq_assm obv rechar_take_cols reduce_mat_cols.simps)"], ["proof (state)\nthis:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have \"(take_rows_from_matrix ?step1_mat (rows_to_keep ?step1_mat)) = (take_cols_from_matrix ?step1_T  (rows_to_keep ?step1_mat))\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    (take_cols_from_matrix\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "using take_rows_and_take_cols"], ["proof (prove)\nusing this:\n  take_rows_from_matrix ?M ?r =\n  (take_cols_from_matrix ?M\\<^sup>T ?r)\\<^sup>T\n\ngoal (1 subgoal):\n 1. take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    (take_cols_from_matrix\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "by blast"], ["proof (state)\nthis:\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  (take_cols_from_matrix\n    (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    (rows_to_keep\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  (take_cols_from_matrix\n    (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    (rows_to_keep\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "have rank_new_mat: \"vec_space.rank (dim_row ?new_mat) ?new_mat = dim_col ?step1_mat\""], ["proof (prove)\nusing this:\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  (take_cols_from_matrix\n    (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    (rows_to_keep\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (take_rows_from_matrix\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using with_take_cols_from_matrix transpose_rank"], ["proof (prove)\nusing this:\n  take_rows_from_matrix\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  (take_cols_from_matrix\n    (reduce_mat_cols (M_mat signs subsets)\n      (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n    (rows_to_keep\n      (reduce_mat_cols (M_mat signs subsets)\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))\\<^sup>T)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  vec_space.rank (dim_row ?A) ?A = vec_space.rank (dim_col ?A) ?A\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (take_rows_from_matrix\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "assume a1: \"vec_space.rank (length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) (take_cols_from_matrix (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T (map snd (pivot_positions (gauss_jordan_single (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T)))) = dim_col (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (state)\nthis:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (take_cols_from_matrix (M_mat signs subsets)\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets))))\\<^sup>T)))) =\n  dim_col\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "have f2: \"\\<forall>m. vec_space.rank (dim_row (m::rat mat)) m = vec_space.rank (dim_row m\\<^sup>T) m\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m.\n       vec_space.rank (dim_row m) m =\n       vec_space.rank (dim_row m\\<^sup>T) m\\<^sup>T", "by (simp add: transpose_rank)"], ["proof (state)\nthis:\n  \\<forall>m.\n     vec_space.rank (dim_row m) m =\n     vec_space.rank (dim_row m\\<^sup>T) m\\<^sup>T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "have f3: \"dim_row (mat_of_cols (dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (take_indices (cols (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (map snd (pivot_positions (gauss_jordan_single (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T))))) = length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using \\<open>dim_col (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) = length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close>"], ["proof (prove)\nusing this:\n  dim_col\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. dim_row\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by force"], ["proof (state)\nthis:\n  dim_row\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "have \"vec_space.rank (length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) (mat_of_cols (dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (take_indices (cols (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (map snd (pivot_positions (gauss_jordan_single (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T))))) = dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T))))) =\n    dim_row\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "using a1"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (take_cols_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n     (map snd\n       (pivot_positions\n         (gauss_jordan_single\n           (take_cols_from_matrix (M_mat signs subsets)\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets))))\\<^sup>T)))) =\n  dim_col\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (length\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T))))) =\n    dim_row\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "by (simp add: take_cols_from_matrix_def)"], ["proof (state)\nthis:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "have \"vec_space.rank (dim_row (mat_of_cols (dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (take_indices (cols (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (map snd (pivot_positions (gauss_jordan_single (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T)))))\\<^sup>T) (mat_of_cols (dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (take_indices (cols (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T) (map snd (pivot_positions (gauss_jordan_single (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T)))))\\<^sup>T = dim_row (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\\<^sup>T\""], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (mat_of_cols\n         (dim_row\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (take_indices\n           (cols\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T)\n           (map snd\n             (pivot_positions\n               (gauss_jordan_single\n                 (mat_of_cols (dim_row (M_mat signs subsets))\n                   (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T)\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T =\n    dim_row\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "using f3 f2"], ["proof (prove)\nusing this:\n  vec_space.rank\n   (length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n  dim_row\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<forall>m.\n     vec_space.rank (dim_row m) m =\n     vec_space.rank (dim_row m\\<^sup>T) m\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (mat_of_cols\n         (dim_row\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (take_indices\n           (cols\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T)\n           (map snd\n             (pivot_positions\n               (gauss_jordan_single\n                 (mat_of_cols (dim_row (M_mat signs subsets))\n                   (take_indices (cols (M_mat signs subsets))\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T)\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T =\n    dim_row\n     (mat_of_cols (dim_row (M_mat signs subsets))\n       (take_indices (cols (M_mat signs subsets))\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "by presburger"], ["proof (state)\nthis:\n  vec_space.rank\n   (dim_row\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T)\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. \\<lbrakk>take_rows_from_matrix\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets (M_mat signs subsets))))\n              (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n             (take_cols_from_matrix\n               (take_cols_from_matrix (M_mat signs subsets)\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets))))\\<^sup>T\n               (rows_to_keep\n                 (take_cols_from_matrix (M_mat signs subsets)\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))))))\\<^sup>T;\n     vec_space.rank\n      (length\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      (take_cols_from_matrix\n        (take_cols_from_matrix (M_mat signs subsets)\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n        (map snd\n          (pivot_positions\n            (gauss_jordan_single\n              (take_cols_from_matrix (M_mat signs subsets)\n                (find_nonzeros_from_input_vec\n                  (solve_for_lhs p qs subsets\n                    (M_mat signs subsets))))\\<^sup>T)))) =\n     dim_col\n      (take_cols_from_matrix (M_mat signs subsets)\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets))));\n     \\<And>A.\n        vec_space.rank (dim_row A) A =\n        vec_space.rank (dim_col A) A\\<^sup>T\\<rbrakk>\n    \\<Longrightarrow> vec_space.rank\n                       (dim_col\n                         (take_cols_from_matrix\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))\\<^sup>T\n                           (rows_to_keep\n                             (take_cols_from_matrix (M_mat signs subsets)\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))))\n                       (take_cols_from_matrix\n                         (take_cols_from_matrix (M_mat signs subsets)\n                           (find_nonzeros_from_input_vec\n                             (solve_for_lhs p qs subsets\n                               (M_mat signs subsets))))\\<^sup>T\n                         (rows_to_keep\n                           (take_cols_from_matrix (M_mat signs subsets)\n                             (find_nonzeros_from_input_vec\n                               (solve_for_lhs p qs subsets\n                                 (M_mat signs subsets))))))\\<^sup>T =\n                      dim_col\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))", "then"], ["proof (chain)\npicking this:\n  vec_space.rank\n   (dim_row\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T)\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T", "show \"vec_space.rank (dim_col (take_cols_from_matrix (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T (rows_to_keep (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))))) (take_cols_from_matrix (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T (rows_to_keep (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))))\\<^sup>T = dim_col (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\""], ["proof (prove)\nusing this:\n  vec_space.rank\n   (dim_row\n     (mat_of_cols\n       (dim_row\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (take_indices\n         (cols\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (take_indices (cols (M_mat signs subsets))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets)))))\\<^sup>T)\n         (map snd\n           (pivot_positions\n             (gauss_jordan_single\n               (mat_of_cols (dim_row (M_mat signs subsets))\n                 (take_indices (cols (M_mat signs subsets))\n                   (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T)\n   (mat_of_cols\n     (dim_row\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (take_indices (cols (M_mat signs subsets))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T)\n     (take_indices\n       (cols\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (take_indices (cols (M_mat signs subsets))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets\n                 (M_mat signs subsets)))))\\<^sup>T)\n       (map snd\n         (pivot_positions\n           (gauss_jordan_single\n             (mat_of_cols (dim_row (M_mat signs subsets))\n               (take_indices (cols (M_mat signs subsets))\n                 (find_nonzeros_from_input_vec\n                   (solve_for_lhs p qs subsets\n                     (M_mat signs subsets)))))\\<^sup>T)))))\\<^sup>T =\n  dim_row\n   (mat_of_cols (dim_row (M_mat signs subsets))\n     (take_indices (cols (M_mat signs subsets))\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\\<^sup>T\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_col\n       (take_cols_from_matrix\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n         (rows_to_keep\n           (take_cols_from_matrix (M_mat signs subsets)\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))))\n     (take_cols_from_matrix\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n       (rows_to_keep\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets))))))\\<^sup>T =\n    dim_col\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by (simp add: rows_to_keep_def take_cols_from_matrix_def)"], ["proof (state)\nthis:\n  vec_space.rank\n   (dim_col\n     (take_cols_from_matrix\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n       (rows_to_keep\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))))\n   (take_cols_from_matrix\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T\n     (rows_to_keep\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))))\\<^sup>T =\n  dim_col\n   (take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vec_space.rank\n   (dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have \"length (pivot_positions (gauss_jordan_single (?step1_mat\\<^sup>T))) \\<le> (length (find_nonzeros_from_input_vec ?lhs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (pivot_positions\n       (gauss_jordan_single\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n    \\<le> length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using obv length_pivot_positions_dim_row[where A = \"(gauss_jordan_single (?step1_mat\\<^sup>T))\"]"], ["proof (prove)\nusing this:\n  (reduce_mat_cols (M_mat signs subsets)\n    (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T\n  \\<in> carrier_mat\n         (dim_row\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n         (dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n  row_echelon_form\n   (gauss_jordan_single\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets\n         (M_mat signs subsets)))\\<^sup>T) \\<Longrightarrow>\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> dim_row\n         (gauss_jordan_single\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T)\n\ngoal (1 subgoal):\n 1. length\n     (pivot_positions\n       (gauss_jordan_single\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n    \\<le> length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (metis carrier_matD(1) carrier_matD(2) gauss_jordan_single(2) gauss_jordan_single(3) index_transpose_mat(2) step1_mat_size)"], ["proof (state)\nthis:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> length\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> length\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have len_lt_eq: \"length (pivot_positions (gauss_jordan_single (?step1_mat\\<^sup>T))) \\<le> dim_col ?step1_mat\""], ["proof (prove)\nusing this:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> length\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. length\n     (pivot_positions\n       (gauss_jordan_single\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n    \\<le> dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using step1_mat_size"], ["proof (prove)\nusing this:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> length\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  reduce_mat_cols (M_mat signs subsets)\n   (solve_for_lhs p qs subsets (M_mat signs subsets))\n  \\<in> carrier_mat (length signs)\n         (length\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. length\n     (pivot_positions\n       (gauss_jordan_single\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n    \\<le> dim_col\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by simp"], ["proof (state)\nthis:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> dim_col\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have len_gt_false: \"length (rows_to_keep ?step1_mat) < (dim_col ?step1_mat) \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    < dim_col\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets\n           (M_mat signs subsets))) \\<Longrightarrow>\n    False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    < dim_col\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets\n           (M_mat signs subsets))) \\<Longrightarrow>\n    False", "assume length_lt: \"length (rows_to_keep ?step1_mat) < (dim_col ?step1_mat)\""], ["proof (state)\nthis:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    < dim_col\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets\n           (M_mat signs subsets))) \\<Longrightarrow>\n    False", "have h: \"dim_row ?new_mat < (dim_col ?step1_mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n    < dim_col\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (metis Matrix.transpose_transpose index_transpose_mat(3) length_lt length_map mat_of_cols_carrier(3) take_cols_from_matrix_def take_indices_def take_rows_and_take_cols)"], ["proof (state)\nthis:\n  dim_row\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n    < dim_col\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets\n           (M_mat signs subsets))) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  dim_row\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "show \"False\""], ["proof (prove)\nusing this:\n  dim_row\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. False", "using rank_new_mat"], ["proof (prove)\nusing this:\n  dim_row\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  vec_space.rank\n   (dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. False", "by (metis Matrix.transpose_transpose carrier_matI index_transpose_mat(2) nat_less_le not_less_iff_gr_or_eq transpose_rank vec_space.rank_le_nc)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n  False", "have len_gt_eq: \"length (rows_to_keep ?step1_mat) \\<ge> (dim_col ?step1_mat)\""], ["proof (prove)\nusing this:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<le> length\n           (rows_to_keep\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using not_less"], ["proof (prove)\nusing this:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n  < dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<Longrightarrow>\n  False\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<le> length\n           (rows_to_keep\n             (reduce_mat_cols (M_mat signs subsets)\n               (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by blast"], ["proof (state)\nthis:\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<le> length\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have len_match: \"length (rows_to_keep ?step1_mat) = (dim_col ?step1_mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using len_lt_eq len_gt_eq"], ["proof (prove)\nusing this:\n  length\n   (pivot_positions\n     (gauss_jordan_single\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\\<^sup>T))\n  \\<le> dim_col\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<le> length\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. length\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n    dim_col\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (simp add: rows_to_keep_def)"], ["proof (state)\nthis:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have mat_match: \"matrix_A (get_signs (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\n  (get_subsets (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs))))) = \n  (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "using reduce_system_matrix_match[of p qs signs subsets]  assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs; distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> M_mat\n                     (get_signs\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs)))\n                     (get_subsets\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs))) =\n                    get_matrix\n                     (reduce_system p\n                       (qs, M_mat signs subsets, subsets, signs))\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n     (get_subsets\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n    get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))", "by blast"], ["proof (state)\nthis:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have f2: \"length (get_subsets (take_rows_from_matrix (mat_of_cols (dim_row (matrix_A signs subsets)) (map ((!) (cols (matrix_A signs subsets))) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) (rows_to_keep (mat_of_cols (dim_row (matrix_A signs subsets)) (map ((!) (cols (matrix_A signs subsets))) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))), map ((!) subsets) (rows_to_keep (mat_of_cols (dim_row (matrix_A signs subsets)) (map ((!) (cols (matrix_A signs subsets))) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))), map ((!) signs) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) = length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (get_subsets\n       (take_rows_from_matrix\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (map ((!) (cols (M_mat signs subsets)))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n         (rows_to_keep\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (map ((!) (cols (M_mat signs subsets)))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n        map ((!) subsets)\n         (rows_to_keep\n           (mat_of_cols (dim_row (M_mat signs subsets))\n             (map ((!) (cols (M_mat signs subsets)))\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n        map ((!) signs)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    length\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by (metis (no_types) \\<open>dim_col (mat_of_cols (dim_row (matrix_A signs subsets)) (take_indices (cols (matrix_A signs subsets)) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) = length (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> \\<open>length (rows_to_keep (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets)))) = dim_col (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> length_map reduce_mat_cols.simps reduce_system.simps reduction_step.simps reduction_subsets_def reduction_subsets_is_get_subsets take_cols_from_matrix_def take_indices_def)"], ["proof (state)\nthis:\n  length\n   (get_subsets\n     (take_rows_from_matrix\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (map ((!) (cols (M_mat signs subsets)))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n       (rows_to_keep\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (map ((!) (cols (M_mat signs subsets)))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n      map ((!) subsets)\n       (rows_to_keep\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (map ((!) (cols (M_mat signs subsets)))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n      map ((!) signs)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have f3: \"\\<forall>p ps rss nss m. map ((!) rss) (find_nonzeros_from_input_vec (solve_for_lhs p ps nss m)) = get_signs (reduce_system p (ps, m, nss, rss))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p ps rss nss m.\n       map ((!) rss)\n        (find_nonzeros_from_input_vec (solve_for_lhs p ps nss m)) =\n       get_signs (reduce_system p (ps, m, nss, rss))", "by (metis (no_types) reduction_signs_def reduction_signs_is_get_signs take_indices_def)"], ["proof (state)\nthis:\n  \\<forall>p ps rss nss m.\n     map ((!) rss)\n      (find_nonzeros_from_input_vec (solve_for_lhs p ps nss m)) =\n     get_signs (reduce_system p (ps, m, nss, rss))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have square_final_mat: \"square_mat (get_matrix (reduce_system p (qs, ((matrix_A signs subsets), (subsets, signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. square_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "using mat_match assms size_of_mat same_size"], ["proof (prove)\nusing this:\n  M_mat\n   (get_signs (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n   (get_subsets\n     (reduce_system p (qs, M_mat signs subsets, subsets, signs))) =\n  get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs))\n  length subsets = length signs\n  invertible_mat (M_mat signs subsets)\n  p \\<noteq> 0\n  well_def_signs (length qs) signs\n  distinct signs\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set signs\n  satisfy_equation p qs subsets signs\n  M_mat ?signs ?subsets \\<in> carrier_mat (length ?subsets) (length ?signs)\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n\ngoal (1 subgoal):\n 1. square_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>M_mat\n              (get_signs\n                (let reduce_cols_A =\n                       take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets)));\n                     rows_keep = rows_to_keep reduce_cols_A\n                 in (take_rows_from_matrix reduce_cols_A rows_keep,\n                     take_indices subsets rows_keep,\n                     take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))))\n              (get_subsets\n                (let reduce_cols_A =\n                       take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets)));\n                     rows_keep = rows_to_keep reduce_cols_A\n                 in (take_rows_from_matrix reduce_cols_A rows_keep,\n                     take_indices subsets rows_keep,\n                     take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets)))))) =\n             get_matrix\n              (let reduce_cols_A =\n                     take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets)));\n                   rows_keep = rows_to_keep reduce_cols_A\n               in (take_rows_from_matrix reduce_cols_A rows_keep,\n                   take_indices subsets rows_keep,\n                   take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets)))));\n     invertible_mat (M_mat signs subsets); p \\<noteq> 0;\n     well_def_signs (length qs) signs; distinct signs;\n     set (characterize_consistent_signs_at_roots_copr p qs)\n     \\<subseteq> set signs;\n     satisfy_equation p qs subsets signs;\n     \\<And>signs subsets.\n        M_mat signs subsets\n        \\<in> carrier_mat (length subsets) (length signs);\n     \\<And>signs subsets.\n        invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n        length subsets = length signs\\<rbrakk>\n    \\<Longrightarrow> dim_col\n                       (get_matrix\n                         (let reduce_cols_A =\n                                take_cols_from_matrix (M_mat signs subsets)\n                                 (find_nonzeros_from_input_vec\n                                   (solve_for_lhs p qs subsets\n                                     (M_mat signs subsets)));\n                              rows_keep = rows_to_keep reduce_cols_A\n                          in (take_rows_from_matrix reduce_cols_A rows_keep,\n                              take_indices subsets rows_keep,\n                              take_indices signs\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))) =\n                      dim_row\n                       (get_matrix\n                         (let reduce_cols_A =\n                                take_cols_from_matrix (M_mat signs subsets)\n                                 (find_nonzeros_from_input_vec\n                                   (solve_for_lhs p qs subsets\n                                     (M_mat signs subsets)));\n                              rows_keep = rows_to_keep reduce_cols_A\n                          in (take_rows_from_matrix reduce_cols_A rows_keep,\n                              take_indices subsets rows_keep,\n                              take_indices signs\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets))))))", "using f2 f3"], ["proof (prove)\nusing this:\n  length\n   (get_subsets\n     (take_rows_from_matrix\n       (mat_of_cols (dim_row (M_mat signs subsets))\n         (map ((!) (cols (M_mat signs subsets)))\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n       (rows_to_keep\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (map ((!) (cols (M_mat signs subsets)))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n      map ((!) subsets)\n       (rows_to_keep\n         (mat_of_cols (dim_row (M_mat signs subsets))\n           (map ((!) (cols (M_mat signs subsets)))\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets)))))),\n      map ((!) signs)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  length\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<forall>p ps rss nss m.\n     map ((!) rss)\n      (find_nonzeros_from_input_vec (solve_for_lhs p ps nss m)) =\n     get_signs (reduce_system p (ps, m, nss, rss))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>M_mat\n              (get_signs\n                (let reduce_cols_A =\n                       take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets)));\n                     rows_keep = rows_to_keep reduce_cols_A\n                 in (take_rows_from_matrix reduce_cols_A rows_keep,\n                     take_indices subsets rows_keep,\n                     take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))))\n              (get_subsets\n                (let reduce_cols_A =\n                       take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets)));\n                     rows_keep = rows_to_keep reduce_cols_A\n                 in (take_rows_from_matrix reduce_cols_A rows_keep,\n                     take_indices subsets rows_keep,\n                     take_indices signs\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets)))))) =\n             get_matrix\n              (let reduce_cols_A =\n                     take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets (M_mat signs subsets)));\n                   rows_keep = rows_to_keep reduce_cols_A\n               in (take_rows_from_matrix reduce_cols_A rows_keep,\n                   take_indices subsets rows_keep,\n                   take_indices signs\n                    (find_nonzeros_from_input_vec\n                      (solve_for_lhs p qs subsets (M_mat signs subsets)))));\n     invertible_mat (M_mat signs subsets); p \\<noteq> 0;\n     well_def_signs (length qs) signs; distinct signs;\n     set (characterize_consistent_signs_at_roots_copr p qs)\n     \\<subseteq> set signs;\n     satisfy_equation p qs subsets signs;\n     \\<And>signs subsets.\n        M_mat signs subsets\n        \\<in> carrier_mat (length subsets) (length signs);\n     \\<And>signs subsets.\n        invertible_mat (M_mat signs subsets) \\<Longrightarrow>\n        length subsets = length signs\\<rbrakk>\n    \\<Longrightarrow> dim_col\n                       (get_matrix\n                         (let reduce_cols_A =\n                                take_cols_from_matrix (M_mat signs subsets)\n                                 (find_nonzeros_from_input_vec\n                                   (solve_for_lhs p qs subsets\n                                     (M_mat signs subsets)));\n                              rows_keep = rows_to_keep reduce_cols_A\n                          in (take_rows_from_matrix reduce_cols_A rows_keep,\n                              take_indices subsets rows_keep,\n                              take_indices signs\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets)))))) =\n                      dim_row\n                       (get_matrix\n                         (let reduce_cols_A =\n                                take_cols_from_matrix (M_mat signs subsets)\n                                 (find_nonzeros_from_input_vec\n                                   (solve_for_lhs p qs subsets\n                                     (M_mat signs subsets)));\n                              rows_keep = rows_to_keep reduce_cols_A\n                          in (take_rows_from_matrix reduce_cols_A rows_keep,\n                              take_indices subsets rows_keep,\n                              take_indices signs\n                               (find_nonzeros_from_input_vec\n                                 (solve_for_lhs p qs subsets\n                                   (M_mat signs subsets))))))", "by (metis (no_types, lifting) Matrix.transpose_transpose fst_conv get_matrix_def index_transpose_mat(2) len_match length_map mat_of_cols_carrier(2) mat_of_cols_carrier(3) reduce_mat_cols.simps take_cols_from_matrix_def take_indices_def take_rows_and_take_cols)"], ["proof (state)\nthis:\n  square_mat\n   (get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have rank_match: \"vec_space.rank (dim_row ?new_mat) ?new_mat = dim_row ?new_mat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (take_rows_from_matrix\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "using len_match rank_new_mat"], ["proof (prove)\nusing this:\n  length\n   (rows_to_keep\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  vec_space.rank\n   (dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  dim_col\n   (reduce_mat_cols (M_mat signs subsets)\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. vec_space.rank\n     (dim_row\n       (take_rows_from_matrix\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         (rows_to_keep\n           (reduce_mat_cols (M_mat signs subsets)\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n    dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "by (simp add: take_cols_from_matrix_def take_indices_def take_rows_and_take_cols)"], ["proof (state)\nthis:\n  vec_space.rank\n   (dim_row\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))))\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))) =\n  dim_row\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "have \"invertible_mat ?new_mat\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "using invertible_det og_mat_size"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat ?A = (det ?A \\<noteq> (0::?'a))\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "using vec_space.det_rank_iff square_final_mat"], ["proof (prove)\nusing this:\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  invertible_mat ?A = (det ?A \\<noteq> (0::?'a))\n  M_mat signs subsets \\<in> carrier_mat (length signs) (length signs)\n  ?A \\<in> carrier_mat ?n ?n \\<Longrightarrow>\n  (det ?A \\<noteq> (0::?'a)) = (vec_space.rank ?n ?A = ?n)\n  square_mat\n   (get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (take_rows_from_matrix\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))\n       (rows_to_keep\n         (reduce_mat_cols (M_mat signs subsets)\n           (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "by (metis dim_col_matrix_A dim_row_matrix_A fst_conv get_matrix_def mat_match rank_match reduce_system.simps reduction_step.simps size_of_mat square_mat.elims(2))"], ["proof (state)\nthis:\n  invertible_mat\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  invertible_mat\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))", "show ?thesis"], ["proof (prove)\nusing this:\n  invertible_mat\n   (take_rows_from_matrix\n     (reduce_mat_cols (M_mat signs subsets)\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (reduce_system p (qs, M_mat signs subsets, subsets, signs)))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (take_rows_from_matrix\n       (take_cols_from_matrix (M_mat signs subsets)\n         (find_nonzeros_from_input_vec\n           (solve_for_lhs p qs subsets (M_mat signs subsets))))\n       (rows_to_keep\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets\n               (M_mat signs subsets)))))) \\<Longrightarrow>\n    invertible_mat\n     (get_matrix\n       (let reduce_cols_A =\n              take_cols_from_matrix (M_mat signs subsets)\n               (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets (M_mat signs subsets)));\n            rows_keep = rows_to_keep reduce_cols_A\n        in (take_rows_from_matrix reduce_cols_A rows_keep,\n            take_indices subsets rows_keep,\n            take_indices signs\n             (find_nonzeros_from_input_vec\n               (solve_for_lhs p qs subsets (M_mat signs subsets))))))", "by (metis fst_conv get_matrix_def)"], ["proof (state)\nthis:\n  invertible_mat\n   (get_matrix (reduce_system p (qs, M_mat signs subsets, subsets, signs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Well def signs preserved when reducing\""], ["", "lemma reduction_doesnt_break_length_signs:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes length_init : \"\\<forall> x\\<in> set(signs). length x = length qs\"\n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"\\<forall>x \\<in> set(reduction_signs p qs signs subsets (matrix_A signs subsets)). \n    length x = length qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (reduction_signs p qs signs subsets\n                         (M_mat signs subsets)).\n       length x = length qs", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "assume x_in_set: \"x \\<in> set (reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (state)\nthis:\n  x \\<in> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "have \"List.member (reduction_signs p qs signs subsets (matrix_A signs subsets)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member (reduction_signs p qs signs subsets (M_mat signs subsets)) x", "using x_in_set"], ["proof (prove)\nusing this:\n  x \\<in> set (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal (1 subgoal):\n 1. List.member (reduction_signs p qs signs subsets (M_mat signs subsets)) x", "by (simp add: in_set_member)"], ["proof (state)\nthis:\n  List.member (reduction_signs p qs signs subsets (M_mat signs subsets)) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "then"], ["proof (chain)\npicking this:\n  List.member (reduction_signs p qs signs subsets (M_mat signs subsets)) x", "have take_ind: \"List.member (take_indices signs\n     (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) x\""], ["proof (prove)\nusing this:\n  List.member (reduction_signs p qs signs subsets (M_mat signs subsets)) x\n\ngoal (1 subgoal):\n 1. List.member\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     x", "unfolding reduction_signs_def"], ["proof (prove)\nusing this:\n  List.member\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   x\n\ngoal (1 subgoal):\n 1. List.member\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     x", "by auto"], ["proof (state)\nthis:\n  List.member\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "have find_nz_len: \"\\<forall>y. List.member (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) y \\<longrightarrow>  y < length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        y \\<longrightarrow>\n       y < length signs", "using size_of_lhs sat_eq inv_mat construct_lhs_matches_solve_for_lhs[of p qs subsets signs]"], ["proof (prove)\nusing this:\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec p qs signs =\n                    solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<forall>y.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        y \\<longrightarrow>\n       y < length signs", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec p qs signs =\n                    solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<forall>y.\n       List.member\n        (filter\n          (\\<lambda>i.\n              solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n              0)\n          [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n        y \\<longrightarrow>\n       y < length signs", "by (metis atLeastLessThan_iff filter_is_subset in_set_member set_upt subset_code(1))"], ["proof (state)\nthis:\n  \\<forall>y.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      y \\<longrightarrow>\n     y < length signs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "then"], ["proof (chain)\npicking this:\n  \\<forall>y.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      y \\<longrightarrow>\n     y < length signs", "have \"\\<exists> n < length signs. x = signs ! n\""], ["proof (prove)\nusing this:\n  \\<forall>y.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      y \\<longrightarrow>\n     y < length signs\n\ngoal (1 subgoal):\n 1. \\<exists>n<length signs. x = signs ! n", "using take_ind"], ["proof (prove)\nusing this:\n  \\<forall>y.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      y \\<longrightarrow>\n     y < length signs\n  List.member\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   x\n\ngoal (1 subgoal):\n 1. \\<exists>n<length signs. x = signs ! n", "by (metis in_set_conv_nth reduction_signs_def take_indices_lem x_in_set)"], ["proof (state)\nthis:\n  \\<exists>n<length signs. x = signs ! n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> set (reduction_signs p qs signs subsets\n                     (M_mat signs subsets)) \\<Longrightarrow>\n       length x = length qs", "then"], ["proof (chain)\npicking this:\n  \\<exists>n<length signs. x = signs ! n", "show \"length x = length qs\""], ["proof (prove)\nusing this:\n  \\<exists>n<length signs. x = signs ! n\n\ngoal (1 subgoal):\n 1. length x = length qs", "using length_init take_indices_lem"], ["proof (prove)\nusing this:\n  \\<exists>n<length signs. x = signs ! n\n  \\<forall>x\\<in>set signs. length x = length qs\n  \\<lbrakk>?n < length (take_indices ?arb_list ?index_list);\n   \\<forall>q.\n      List.member ?index_list q \\<longrightarrow>\n      q < length ?arb_list\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k<length ?arb_list.\n                       take_indices ?arb_list ?index_list ! ?n =\n                       ?arb_list ! k\n\ngoal (1 subgoal):\n 1. length x = length qs", "using nth_mem"], ["proof (prove)\nusing this:\n  \\<exists>n<length signs. x = signs ! n\n  \\<forall>x\\<in>set signs. length x = length qs\n  \\<lbrakk>?n < length (take_indices ?arb_list ?index_list);\n   \\<forall>q.\n      List.member ?index_list q \\<longrightarrow>\n      q < length ?arb_list\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k<length ?arb_list.\n                       take_indices ?arb_list ?index_list ! ?n =\n                       ?arb_list ! k\n  ?n < length ?xs \\<Longrightarrow> ?xs ! ?n \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. length x = length qs", "by blast"], ["proof (state)\nthis:\n  length x = length qs\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Distinct signs preserved when reducing\""], ["", "lemma reduction_signs_are_distinct:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  assumes distinct_init: \"distinct signs\"\n  shows \"distinct (reduction_signs p qs signs subsets (matrix_A signs subsets))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "have solve_construct: \"construct_lhs_vector p qs signs =\n  solve_for_lhs p qs subsets (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using construct_lhs_matches_solve_for_lhs assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  distinct signs\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by simp"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "have h1: \"distinct (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])", "using distinct_filter"], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> distinct (filter ?P ?xs)\n\ngoal (1 subgoal):\n 1. distinct\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])", "using distinct_upt"], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> distinct (filter ?P ?xs)\n  distinct [?i..<?j]\n\ngoal (1 subgoal):\n 1. distinct\n     (filter\n       (\\<lambda>i.\n           solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq> 0)\n       [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])", "by blast"], ["proof (state)\nthis:\n  distinct\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "have h2: \"(\\<And>j. j \\<in> set (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<Longrightarrow>\n          j < length signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length signs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length signs", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length signs", "assume \"j \\<in> set (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (state)\nthis:\n  j \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (find_nonzeros_from_input_vec\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets))) \\<Longrightarrow>\n       j < length signs", "show \"j < length signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j < length signs", "using solve_construct size_of_lhs"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. j < length signs", "by (metis \\<open>j \\<in> set (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\\<close> atLeastLessThan_iff filter_is_subset find_nonzeros_from_input_vec_def set_upt subset_iff)"], ["proof (state)\nthis:\n  j < length signs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "then"], ["proof (chain)\npicking this:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs", "show ?thesis"], ["proof (prove)\nusing this:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n\ngoal (1 subgoal):\n 1. distinct (reduction_signs p qs signs subsets (M_mat signs subsets))", "unfolding reduction_signs_def"], ["proof (prove)\nusing this:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n\ngoal (1 subgoal):\n 1. distinct\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "unfolding take_indices_def"], ["proof (prove)\nusing this:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n\ngoal (1 subgoal):\n 1. distinct\n     (map ((!) signs)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "using distinct_init h1 h2 conjugatable_vec_space.distinct_map_nth[where ls = \"signs\", where inds = \"(find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\"]"], ["proof (prove)\nusing this:\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n  distinct signs\n  distinct\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  ?j \\<in> set (find_nonzeros_from_input_vec\n                 (solve_for_lhs p qs subsets\n                   (M_mat signs subsets))) \\<Longrightarrow>\n  ?j < length signs\n  \\<lbrakk>distinct signs;\n   distinct\n    (find_nonzeros_from_input_vec\n      (solve_for_lhs p qs subsets (M_mat signs subsets)));\n   \\<And>j.\n      j \\<in> set (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets\n                      (M_mat signs subsets))) \\<Longrightarrow>\n      j < length signs\\<rbrakk>\n  \\<Longrightarrow> distinct\n                     (map ((!) signs)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))\n\ngoal (1 subgoal):\n 1. distinct\n     (map ((!) signs)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))", "by blast"], ["proof (state)\nthis:\n  distinct (reduction_signs p qs signs subsets (M_mat signs subsets))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Well def subsets preserved when reducing\""], ["", "lemma reduction_doesnt_break_subsets:  \n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes length_init : \"all_list_constr subsets (length qs)\"\n  assumes sat_eq: \"satisfy_equation p qs subsets signs\"\n  assumes inv_mat: \"invertible_mat (matrix_A signs subsets)\"\n  shows \"all_list_constr (reduction_subsets p qs signs subsets (matrix_A signs subsets)) (length qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr\n     (reduction_subsets p qs signs subsets (M_mat signs subsets))\n     (length qs)", "unfolding all_list_constr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<longrightarrow>\n       list_constr x (length qs)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<Longrightarrow>\n       list_constr x (length qs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<Longrightarrow>\n       list_constr x (length qs)", "assume in_red_subsets: \"List.member (reduction_subsets p qs signs subsets (matrix_A signs subsets)) x \""], ["proof (state)\nthis:\n  List.member (reduction_subsets p qs signs subsets (M_mat signs subsets)) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<Longrightarrow>\n       list_constr x (length qs)", "have solve_construct: \"construct_lhs_vector p qs signs =\n  solve_for_lhs p qs subsets (matrix_A signs subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using construct_lhs_matches_solve_for_lhs assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n  p \\<noteq> 0\n  all_list_constr subsets (length qs)\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by simp"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<Longrightarrow>\n       list_constr x (length qs)", "have rows_to_keep_hyp: \"\\<forall>y. y \\<in> set (rows_to_keep (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets)))) \\<longrightarrow> \n      y < length subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y.\n       y \\<in> set (rows_to_keep\n                     (reduce_mat_cols (M_mat signs subsets)\n                       (solve_for_lhs p qs subsets\n                         (M_mat signs subsets)))) \\<longrightarrow>\n       y < length subsets", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "assume in_set: \"y \\<in> set (rows_to_keep\n                   (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))))\""], ["proof (state)\nthis:\n  y \\<in> set (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "have in_set_2: \"y \\<in> set (rows_to_keep\n                   (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (construct_lhs_vector p qs signs))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> set (rows_to_keep\n                  (take_cols_from_matrix (M_mat signs subsets)\n                    (find_nonzeros_from_input_vec (w_vec p qs signs))))", "using in_set solve_construct"], ["proof (prove)\nusing this:\n  y \\<in> set (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec\n                    (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. y \\<in> set (rows_to_keep\n                  (take_cols_from_matrix (M_mat signs subsets)\n                    (find_nonzeros_from_input_vec (w_vec p qs signs))))", "by simp"], ["proof (state)\nthis:\n  y \\<in> set (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec (w_vec p qs signs))))\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "let ?lhs_vec = \"(solve_for_lhs p qs subsets (matrix_A signs subsets))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "have h30: \"(construct_lhs_vector p qs signs) = ?lhs_vec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "using assms construct_lhs_matches_solve_for_lhs"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  all_list_constr subsets (length qs)\n  satisfy_equation p qs subsets signs\n  invertible_mat (M_mat signs subsets)\n  \\<lbrakk>satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> w_vec ?p ?qs ?signs =\n                    solve_for_lhs ?p ?qs ?subsets (M_mat ?signs ?subsets)\n\ngoal (1 subgoal):\n 1. w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)", "by simp"], ["proof (state)\nthis:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "have h3a: \"\\<forall>x. List.member (find_nonzeros_from_input_vec ?lhs_vec) x \\<longrightarrow>x < length (signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length signs", "using h30 size_of_lhs"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p qs subsets (M_mat signs subsets)))\n        x \\<longrightarrow>\n       x < length signs", "unfolding find_nonzeros_from_input_vec_def"], ["proof (prove)\nusing this:\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n  dim_vec (w_vec ?p ?qs ?signs) = length ?signs\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (filter\n          (\\<lambda>i.\n              solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n              0)\n          [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n        x \\<longrightarrow>\n       x < length signs", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>w_vec p qs signs =\n                solve_for_lhs p qs subsets (M_mat signs subsets);\n        \\<And>p qs signs. dim_vec (w_vec p qs signs) = length signs;\n        List.member\n         (filter\n           (\\<lambda>i.\n               solve_for_lhs p qs subsets (M_mat signs subsets) $ i \\<noteq>\n               0)\n           [0..<dim_vec (solve_for_lhs p qs subsets (M_mat signs subsets))])\n         x\\<rbrakk>\n       \\<Longrightarrow> x < length signs", "by (metis atLeastLessThan_iff filter_is_subset member_def set_upt subset_eq)"], ["proof (state)\nthis:\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "have h3c: \"\\<forall>x. List.member (rows_to_keep (reduce_mat_cols (matrix_A signs subsets) (solve_for_lhs p qs subsets (matrix_A signs subsets)))) x \\<longrightarrow> x < length (subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member\n        (rows_to_keep\n          (reduce_mat_cols (M_mat signs subsets)\n            (solve_for_lhs p qs subsets (M_mat signs subsets))))\n        x \\<longrightarrow>\n       x < length subsets", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "assume x_mem: \"List.member (rows_to_keep\n            (take_cols_from_matrix (matrix_A signs subsets)\n              (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))) x\""], ["proof (state)\nthis:\n  List.member\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "obtain nn :: \"rat list list \\<Rightarrow> nat list \\<Rightarrow> nat\" where\n        \"\\<forall>x2 x3. (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) = (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        \\<forall>x2 x3.\n           (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n           (nn x2 x3 \\<in> set x3 \\<and>\n            \\<not> nn x2 x3 < length x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "then"], ["proof (chain)\npicking this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)", "have f4: \"nn signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<in> set (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<and> \\<not> nn signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) < length signs \\<or> matrix_A (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) subsets = take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))\""], ["proof (prove)\nusing this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n\ngoal (1 subgoal):\n 1. nn signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    \\<not> nn signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))\n           < length signs \\<or>\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "using h3a nonzero reduce_system_matrix_signs_helper"], ["proof (prove)\nusing this:\n  \\<forall>x2 x3.\n     (\\<exists>v4. v4 \\<in> set x3 \\<and> \\<not> v4 < length x2) =\n     (nn x2 x3 \\<in> set x3 \\<and> \\<not> nn x2 x3 < length x2)\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n  p \\<noteq> 0\n  \\<lbrakk>\\<forall>x. List.member ?S x \\<longrightarrow> x < length ?signs;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> M_mat (take_indices ?signs ?S) ?subsets =\n                    take_cols_from_matrix (M_mat ?signs ?subsets) ?S\n\ngoal (1 subgoal):\n 1. nn signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))\n    \\<in> set (find_nonzeros_from_input_vec\n                (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    \\<not> nn signs\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))\n           < length signs \\<or>\n    M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets)))", "by auto"], ["proof (state)\nthis:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "then"], ["proof (chain)\npicking this:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))", "have \"matrix_A (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets)))) subsets = take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))) \\<and> x \\<in> set (map snd (pivot_positions (gauss_jordan_single (take_cols_from_matrix (matrix_A signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (matrix_A signs subsets))))\\<^sup>T)))\""], ["proof (prove)\nusing this:\n  nn signs\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n  \\<in> set (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  \\<not> nn signs\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p qs subsets (M_mat signs subsets)))\n         < length signs \\<or>\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets)))\n\ngoal (1 subgoal):\n 1. M_mat\n     (take_indices signs\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets))))\n     subsets =\n    take_cols_from_matrix (M_mat signs subsets)\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n    x \\<in> set (map snd\n                  (pivot_positions\n                    (gauss_jordan_single\n                      (take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets))))\\<^sup>T)))", "by (metis h3a in_set_member rows_to_keep_def x_mem)"], ["proof (state)\nthis:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (rows_to_keep\n          (take_cols_from_matrix (M_mat signs subsets)\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n        x \\<Longrightarrow>\n       x < length subsets", "thus \"x < length (subsets)\""], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n\ngoal (1 subgoal):\n 1. x < length subsets", "using x_mem"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (rows_to_keep\n     (take_cols_from_matrix (M_mat signs subsets)\n       (find_nonzeros_from_input_vec\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n\ngoal (1 subgoal):\n 1. x < length subsets", "unfolding rows_to_keep_def"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (map snd\n     (pivot_positions\n       (gauss_jordan_single\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T)))\n   x\n\ngoal (1 subgoal):\n 1. x < length subsets", "using pivot_positions"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (map snd\n     (pivot_positions\n       (gauss_jordan_single\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T)))\n   x\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> set (pivot_positions ?A) =\n                    {(i, ?f i) |i. i < ?nr \\<and> ?f i \\<noteq> ?nc}\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst (pivot_positions ?A))\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> distinct (map snd (pivot_positions ?A))\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> length (pivot_positions ?A) =\n                    card {i. i < ?nr \\<and> row ?A i \\<noteq> 0\\<^sub>v ?nc}\n\ngoal (1 subgoal):\n 1. x < length subsets", "using  dim_row_matrix_A h3a in_set_member nonzero reduce_system_matrix_signs_helper rows_to_keep_def rows_to_keep_lem"], ["proof (prove)\nusing this:\n  M_mat\n   (take_indices signs\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p qs subsets (M_mat signs subsets))))\n   subsets =\n  take_cols_from_matrix (M_mat signs subsets)\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and>\n  x \\<in> set (map snd\n                (pivot_positions\n                  (gauss_jordan_single\n                    (take_cols_from_matrix (M_mat signs subsets)\n                      (find_nonzeros_from_input_vec\n                        (solve_for_lhs p qs subsets\n                          (M_mat signs subsets))))\\<^sup>T)))\n  List.member\n   (map snd\n     (pivot_positions\n       (gauss_jordan_single\n         (take_cols_from_matrix (M_mat signs subsets)\n           (find_nonzeros_from_input_vec\n             (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T)))\n   x\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> set (pivot_positions ?A) =\n                    {(i, ?f i) |i. i < ?nr \\<and> ?f i \\<noteq> ?nc}\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst (pivot_positions ?A))\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> distinct (map snd (pivot_positions ?A))\n  \\<lbrakk>?A \\<in> carrier_mat ?nr ?nc; pivot_fun ?A ?f ?nc\\<rbrakk>\n  \\<Longrightarrow> length (pivot_positions ?A) =\n                    card {i. i < ?nr \\<and> row ?A i \\<noteq> 0\\<^sub>v ?nc}\n  dim_row (M_mat ?signs ?subsets) = length ?subsets\n  \\<forall>x.\n     List.member\n      (find_nonzeros_from_input_vec\n        (solve_for_lhs p qs subsets (M_mat signs subsets)))\n      x \\<longrightarrow>\n     x < length signs\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n  p \\<noteq> 0\n  \\<lbrakk>\\<forall>x. List.member ?S x \\<longrightarrow> x < length ?signs;\n   ?p \\<noteq> 0\\<rbrakk>\n  \\<Longrightarrow> M_mat (take_indices ?signs ?S) ?subsets =\n                    take_cols_from_matrix (M_mat ?signs ?subsets) ?S\n  rows_to_keep ?A =\n  map snd (pivot_positions (gauss_jordan_single ?A\\<^sup>T))\n  ?ell \\<in> set (rows_to_keep ?A) \\<Longrightarrow> ?ell < dim_row ?A\n\ngoal (1 subgoal):\n 1. x < length subsets", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>List.member\n                 (map snd\n                   (pivot_positions\n                     (gauss_jordan_single\n                       (take_cols_from_matrix (M_mat signs subsets)\n                         (find_nonzeros_from_input_vec\n                           (solve_for_lhs p qs subsets\n                             (M_mat signs subsets))))\\<^sup>T)))\n                 x;\n        \\<And>A nr nc f.\n           \\<lbrakk>A \\<in> carrier_mat nr nc; pivot_fun A f nc\\<rbrakk>\n           \\<Longrightarrow> set (pivot_positions A) =\n                             {(i, f i) |i. i < nr \\<and> f i \\<noteq> nc};\n        \\<And>A nr nc f.\n           \\<lbrakk>A \\<in> carrier_mat nr nc; pivot_fun A f nc\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst (pivot_positions A));\n        \\<And>A nr nc f.\n           \\<lbrakk>A \\<in> carrier_mat nr nc; pivot_fun A f nc\\<rbrakk>\n           \\<Longrightarrow> distinct (map snd (pivot_positions A));\n        \\<And>A nr nc f.\n           \\<lbrakk>A \\<in> carrier_mat nr nc; pivot_fun A f nc\\<rbrakk>\n           \\<Longrightarrow> length (pivot_positions A) =\n                             card\n                              {i. i < nr \\<and>\n                                  row A i \\<noteq> 0\\<^sub>v nc};\n        \\<forall>x.\n           List.member\n            (find_nonzeros_from_input_vec\n              (solve_for_lhs p qs subsets (M_mat signs subsets)))\n            x \\<longrightarrow>\n           x < length signs;\n        \\<And>x xs. (x \\<in> set xs) = List.member xs x; p \\<noteq> 0;\n        \\<And>S signs p subsets.\n           \\<lbrakk>\\<forall>x.\n                       List.member S x \\<longrightarrow> x < length signs;\n            p \\<noteq> 0\\<rbrakk>\n           \\<Longrightarrow> M_mat (take_indices signs S) subsets =\n                             take_cols_from_matrix (M_mat signs subsets) S;\n        \\<And>A.\n           rows_to_keep A =\n           map snd (pivot_positions (gauss_jordan_single A\\<^sup>T));\n        \\<And>ell A.\n           ell \\<in> set (rows_to_keep A) \\<Longrightarrow> ell < dim_row A;\n        (a, x)\n        \\<in> set (pivot_positions\n                    (gauss_jordan_single\n                      (take_cols_from_matrix (M_mat signs subsets)\n                        (find_nonzeros_from_input_vec\n                          (solve_for_lhs p qs subsets\n                            (M_mat signs subsets))))\\<^sup>T))\\<rbrakk>\n       \\<Longrightarrow> x < length subsets", "by (smt (z3) \\<open>M_mat (take_indices signs (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (M_mat signs subsets)))) subsets = take_cols_from_matrix (M_mat signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (M_mat signs subsets))) \\<and> x \\<in> set (map snd (pivot_positions (gauss_jordan_single (take_cols_from_matrix (M_mat signs subsets) (find_nonzeros_from_input_vec (solve_for_lhs p qs subsets (M_mat signs subsets))))\\<^sup>T)))\\<close> dim_row_matrix_A rows_to_keep_def rows_to_keep_lem)"], ["proof (state)\nthis:\n  x < length subsets\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set (rows_to_keep\n                     (take_cols_from_matrix (M_mat signs subsets)\n                       (find_nonzeros_from_input_vec\n                         (solve_for_lhs p qs subsets\n                           (M_mat signs subsets))))) \\<Longrightarrow>\n       y < length subsets", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets", "show \"y < length subsets\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets\n\ngoal (1 subgoal):\n 1. y < length subsets", "using in_set_member"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     List.member\n      (rows_to_keep\n        (reduce_mat_cols (M_mat signs subsets)\n          (solve_for_lhs p qs subsets (M_mat signs subsets))))\n      x \\<longrightarrow>\n     x < length subsets\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. y < length subsets", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                List.member\n                 (rows_to_keep\n                   (take_cols_from_matrix (M_mat signs subsets)\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n                 x \\<longrightarrow>\n                x < length subsets;\n     \\<And>x xs. (x \\<in> set xs) = List.member xs x\\<rbrakk>\n    \\<Longrightarrow> y < length subsets", "using in_set_2 solve_construct"], ["proof (prove)\nusing this:\n  y \\<in> set (rows_to_keep\n                (take_cols_from_matrix (M_mat signs subsets)\n                  (find_nonzeros_from_input_vec (w_vec p qs signs))))\n  w_vec p qs signs = solve_for_lhs p qs subsets (M_mat signs subsets)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x.\n                List.member\n                 (rows_to_keep\n                   (take_cols_from_matrix (M_mat signs subsets)\n                     (find_nonzeros_from_input_vec\n                       (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n                 x \\<longrightarrow>\n                x < length subsets;\n     \\<And>x xs. (x \\<in> set xs) = List.member xs x\\<rbrakk>\n    \\<Longrightarrow> y < length subsets", "by fastforce"], ["proof (state)\nthis:\n  y < length subsets\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>y.\n     y \\<in> set (rows_to_keep\n                   (reduce_mat_cols (M_mat signs subsets)\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))) \\<longrightarrow>\n     y < length subsets\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       List.member\n        (reduction_subsets p qs signs subsets (M_mat signs subsets))\n        x \\<Longrightarrow>\n       list_constr x (length qs)", "show \"list_constr x (length qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_constr x (length qs)", "using in_red_subsets"], ["proof (prove)\nusing this:\n  List.member (reduction_subsets p qs signs subsets (M_mat signs subsets)) x\n\ngoal (1 subgoal):\n 1. list_constr x (length qs)", "unfolding  reduction_subsets_def"], ["proof (prove)\nusing this:\n  List.member\n   (take_indices subsets\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n\ngoal (1 subgoal):\n 1. list_constr x (length qs)", "using take_indices_lem[of _ subsets]  rows_to_keep_hyp"], ["proof (prove)\nusing this:\n  List.member\n   (take_indices subsets\n     (rows_to_keep\n       (reduce_mat_cols (M_mat signs subsets)\n         (solve_for_lhs p qs subsets (M_mat signs subsets)))))\n   x\n  \\<lbrakk>?n < length (take_indices subsets ?index_list);\n   \\<forall>q.\n      List.member ?index_list q \\<longrightarrow>\n      q < length subsets\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k<length subsets.\n                       take_indices subsets ?index_list ! ?n = subsets ! k\n  \\<forall>y.\n     y \\<in> set (rows_to_keep\n                   (reduce_mat_cols (M_mat signs subsets)\n                     (solve_for_lhs p qs subsets\n                       (M_mat signs subsets)))) \\<longrightarrow>\n     y < length subsets\n\ngoal (1 subgoal):\n 1. list_constr x (length qs)", "by (metis all_list_constr_def in_set_conv_nth in_set_member length_init)"], ["proof (state)\nthis:\n  list_constr x (length qs)\n\ngoal:\nNo subgoals!", "qed"], ["", "section \"Overall Lemmas\""], ["", "lemma combining_to_smash:  \"combine_systems p (qs1, m1, (sub1, sgn1)) (qs2, m2, (sub2, sgn2))\n =  smash_systems p qs1 qs2 sub1 sub2 sgn1 sgn2 m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. combine_systems p (qs1, m1, sub1, sgn1) (qs2, m2, sub2, sgn2) =\n    smash_systems p qs1 qs2 sub1 sub2 sgn1 sgn2 m1 m2", "by simp"], ["", "lemma getter_functions: \"calculate_data p qs = (get_matrix (calculate_data p qs), (get_subsets (calculate_data p qs), get_signs (calculate_data p qs))) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. calculate_data p qs =\n    (get_matrix (calculate_data p qs), get_subsets (calculate_data p qs),\n     get_signs (calculate_data p qs))", "unfolding get_matrix_def get_subsets_def get_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. calculate_data p qs =\n    (fst (calculate_data p qs), fst (snd (calculate_data p qs)),\n     snd (snd (calculate_data p qs)))", "by auto"], ["", "subsection \"Key properties preserved\""], ["", "subsubsection \"Properties preserved when combining and reducing systems\""], ["", "lemma combining_sys_satisfies_properties_helper:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  fixes subsets1 subsets2 :: \"nat list list\"\n  fixes signs1 signs2 :: \"rat list list\" \n  fixes matrix1 matrix2:: \"rat mat\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys1: \"satisfies_properties p qs1 subsets1 signs1 matrix1\"\n  assumes satisfies_properties_sys2: \"satisfies_properties p qs2 subsets2 signs2 matrix2\"\n  shows  \"satisfies_properties p (qs1@qs2) (get_subsets (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2))))))) \n  (get_signs (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2))))))) \n  (get_matrix (snd ((combine_systems p (qs1,(matrix1, (subsets1, signs1))) (qs2,(matrix2, (subsets2, signs2)))))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "let ?subsets = \"(get_subsets (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "let ?signs = \"(get_signs (snd (combine_systems p (qs1, matrix1, subsets1, signs1) (qs2, matrix2, subsets2, signs2))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "let ?matrix = \"(get_matrix (snd (combine_systems p (qs1, matrix1, subsets1, signs1) (qs2, matrix2, subsets2, signs2))))\""], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h1: \"all_list_constr ?subsets (length (qs1 @ qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (length (qs1 @ qs2))", "using well_def_step[of subsets1 qs1 subsets2 qs2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>all_list_constr subsets1 (length qs1);\n   all_list_constr subsets2 (length qs2)\\<rbrakk>\n  \\<Longrightarrow> all_list_constr\n                     (subsets_smash (length qs1) subsets1 subsets2)\n                     (length (qs1 @ qs2))\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (length (qs1 @ qs2))", "by (simp add: nontriv2 get_subsets_def satisfies_properties_def smash_systems_def)"], ["proof (state)\nthis:\n  all_list_constr\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (length (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h2: \"well_def_signs (length (qs1 @ qs2)) ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using well_def_signs_step[of qs1 qs2 signs1 signs2]"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length qs1; 0 < length qs2;\n   well_def_signs (length qs1) signs1;\n   well_def_signs (length qs2) signs2\\<rbrakk>\n  \\<Longrightarrow> well_def_signs (length (qs1 @ qs2))\n                     (signs_smash signs1 signs2)\n\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using get_signs_def nontriv1 nontriv2 satisfies_properties_def satisfies_properties_sys1 satisfies_properties_sys2 smash_systems_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>0 < length qs1; 0 < length qs2;\n   well_def_signs (length qs1) signs1;\n   well_def_signs (length qs2) signs2\\<rbrakk>\n  \\<Longrightarrow> well_def_signs (length (qs1 @ qs2))\n                     (signs_smash signs1 signs2)\n  get_signs ?data = snd (snd ?data)\n  0 < length qs1\n  0 < length qs2\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n  smash_systems ?p ?qs1.0 ?qs2.0 ?subsets1.0 ?subsets2.0 ?signs1.0 ?signs2.0\n   ?mat1.0 ?mat2.0 =\n  (?qs1.0 @ ?qs2.0, kronecker_product ?mat1.0 ?mat2.0,\n   subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0,\n   signs_smash ?signs1.0 ?signs2.0)\n\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "by auto"], ["proof (state)\nthis:\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h3: \"distinct ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using distinct_step[of _ signs1 _ signs2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>well_def_signs ?n1.0 signs1; well_def_signs ?n2.0 signs2;\n   distinct signs1; distinct signs2\\<rbrakk>\n  \\<Longrightarrow> distinct (signs_smash signs1 signs2)\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using combine_systems.simps get_signs_def satisfies_properties_def smash_systems_def snd_conv"], ["proof (prove)\nusing this:\n  \\<lbrakk>well_def_signs ?n1.0 signs1; well_def_signs ?n2.0 signs2;\n   distinct signs1; distinct signs2\\<rbrakk>\n  \\<Longrightarrow> distinct (signs_smash signs1 signs2)\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n  combine_systems ?p (?qs1.0, ?m1.0, ?sub1.0, ?sgn1.0)\n   (?qs2.0, ?m2.0, ?sub2.0, ?sgn2.0) =\n  smash_systems ?p ?qs1.0 ?qs2.0 ?sub1.0 ?sub2.0 ?sgn1.0 ?sgn2.0 ?m1.0 ?m2.0\n  get_signs ?data = snd (snd ?data)\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  smash_systems ?p ?qs1.0 ?qs2.0 ?subsets1.0 ?subsets2.0 ?signs1.0 ?signs2.0\n   ?mat1.0 ?mat2.0 =\n  (?qs1.0 @ ?qs2.0, kronecker_product ?mat1.0 ?mat2.0,\n   subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0,\n   signs_smash ?signs1.0 ?signs2.0)\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "by auto"], ["proof (state)\nthis:\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h4: \"satisfy_equation p (qs1 @ qs2) ?subsets ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using assms inductive_step[of p qs1 qs2 signs1 signs2 subsets1 subsets2]"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n  \\<lbrakk>p \\<noteq> 0; 0 < length qs1; 0 < length qs2;\n   \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q;\n   \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q;\n   well_def_signs (length qs1) signs1; well_def_signs (length qs2) signs2;\n   distinct signs1; distinct signs2;\n   set (characterize_consistent_signs_at_roots_copr p qs1)\n   \\<subseteq> set signs1;\n   set (characterize_consistent_signs_at_roots_copr p qs2)\n   \\<subseteq> set signs2;\n   all_list_constr subsets1 (length qs1);\n   all_list_constr subsets2 (length qs2);\n   invertible_mat (M_mat signs1 subsets1);\n   invertible_mat (M_mat signs2 subsets2)\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                     (subsets_smash (length qs1) subsets1 subsets2)\n                     (signs_smash signs1 signs2) \\<and>\n                    invertible_mat\n                     (M_mat (signs_smash signs1 signs2)\n                       (subsets_smash (length qs1) subsets1 subsets2))\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using get_signs_def get_subsets_def satisfies_properties_def smash_systems_def"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n  \\<lbrakk>p \\<noteq> 0; 0 < length qs1; 0 < length qs2;\n   \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q;\n   \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q;\n   well_def_signs (length qs1) signs1; well_def_signs (length qs2) signs2;\n   distinct signs1; distinct signs2;\n   set (characterize_consistent_signs_at_roots_copr p qs1)\n   \\<subseteq> set signs1;\n   set (characterize_consistent_signs_at_roots_copr p qs2)\n   \\<subseteq> set signs2;\n   all_list_constr subsets1 (length qs1);\n   all_list_constr subsets2 (length qs2);\n   invertible_mat (M_mat signs1 subsets1);\n   invertible_mat (M_mat signs2 subsets2)\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                     (subsets_smash (length qs1) subsets1 subsets2)\n                     (signs_smash signs1 signs2) \\<and>\n                    invertible_mat\n                     (M_mat (signs_smash signs1 signs2)\n                       (subsets_smash (length qs1) subsets1 subsets2))\n  get_signs ?data = snd (snd ?data)\n  get_subsets ?data = fst (snd ?data)\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  smash_systems ?p ?qs1.0 ?qs2.0 ?subsets1.0 ?subsets2.0 ?signs1.0 ?signs2.0\n   ?mat1.0 ?mat2.0 =\n  (?qs1.0 @ ?qs2.0, kronecker_product ?mat1.0 ?mat2.0,\n   subsets_smash (length ?qs1.0) ?subsets1.0 ?subsets2.0,\n   signs_smash ?signs1.0 ?signs2.0)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "by auto"], ["proof (state)\nthis:\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h5: \" invertible_mat ?matrix\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "using assms inductive_step[of p qs1 qs2 signs1 signs2 subsets1 subsets2]"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n  \\<lbrakk>p \\<noteq> 0; 0 < length qs1; 0 < length qs2;\n   \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q;\n   \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q;\n   well_def_signs (length qs1) signs1; well_def_signs (length qs2) signs2;\n   distinct signs1; distinct signs2;\n   set (characterize_consistent_signs_at_roots_copr p qs1)\n   \\<subseteq> set signs1;\n   set (characterize_consistent_signs_at_roots_copr p qs2)\n   \\<subseteq> set signs2;\n   all_list_constr subsets1 (length qs1);\n   all_list_constr subsets2 (length qs2);\n   invertible_mat (M_mat signs1 subsets1);\n   invertible_mat (M_mat signs2 subsets2)\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p (qs1 @ qs2)\n                     (subsets_smash (length qs1) subsets1 subsets2)\n                     (signs_smash signs1 signs2) \\<and>\n                    invertible_mat\n                     (M_mat (signs_smash signs1 signs2)\n                       (subsets_smash (length qs1) subsets1 subsets2))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "by (metis combining_to_smash fst_conv get_matrix_def kronecker_invertible satisfies_properties_def smash_systems_def snd_conv)"], ["proof (state)\nthis:\n  invertible_mat\n   (get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h6: \"?matrix = matrix_A ?signs ?subsets\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))) =\n    M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "unfolding get_matrix_def combine_systems.simps smash_systems_def get_signs_def get_subsets_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (snd (qs1 @ qs2, kronecker_product matrix1 matrix2,\n              subsets_smash (length qs1) subsets1 subsets2,\n              signs_smash signs1 signs2)) =\n    M_mat\n     (snd (snd (snd (qs1 @ qs2, kronecker_product matrix1 matrix2,\n                     subsets_smash (length qs1) subsets1 subsets2,\n                     signs_smash signs1 signs2))))\n     (fst (snd (snd (qs1 @ qs2, kronecker_product matrix1 matrix2,\n                     subsets_smash (length qs1) subsets1 subsets2,\n                     signs_smash signs1 signs2))))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. kronecker_product matrix1 matrix2 =\n    M_mat (signs_smash signs1 signs2)\n     (subsets_smash (length qs1) subsets1 subsets2)", "apply (subst matrix_construction_is_kronecker_product[of subsets1 _ signs1 signs2 subsets2])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l i.\n       \\<lbrakk>l \\<in> set subsets1; i \\<in> set l\\<rbrakk>\n       \\<Longrightarrow> i < length qs1\n 2. \\<And>j. j \\<in> set signs1 \\<Longrightarrow> length j = length qs1\n 3. kronecker_product matrix1 matrix2 =\n    kronecker_product (M_mat signs1 subsets1) (M_mat signs2 subsets2)", "apply (metis Ball_set all_list_constr_def in_set_member list_constr_def satisfies_properties_def satisfies_properties_sys1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>j. j \\<in> set signs1 \\<Longrightarrow> length j = length qs1\n 2. kronecker_product matrix1 matrix2 =\n    kronecker_product (M_mat signs1 subsets1) (M_mat signs2 subsets2)", "using satisfies_properties_def satisfies_properties_sys1 well_def_signs_def"], ["proof (prove)\nusing this:\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  well_def_signs ?num_polys ?sign_conds \\<equiv>\n  \\<forall>signs\\<in>set ?sign_conds. length signs = ?num_polys\n\ngoal (2 subgoals):\n 1. \\<And>j. j \\<in> set signs1 \\<Longrightarrow> length j = length qs1\n 2. kronecker_product matrix1 matrix2 =\n    kronecker_product (M_mat signs1 subsets1) (M_mat signs2 subsets2)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. kronecker_product matrix1 matrix2 =\n    kronecker_product (M_mat signs1 subsets1) (M_mat signs2 subsets2)", "using satisfies_properties_def satisfies_properties_sys1 satisfies_properties_sys2"], ["proof (prove)\nusing this:\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n\ngoal (1 subgoal):\n 1. kronecker_product matrix1 matrix2 =\n    kronecker_product (M_mat signs1 subsets1) (M_mat signs2 subsets2)", "by auto"], ["proof (state)\nthis:\n  get_matrix\n   (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n          (qs2, matrix2, subsets2, signs2))) =\n  M_mat\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "have h7: \"set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (?signs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p\n                             (qs1, matrix1, subsets1, signs1)\n                             (qs2, matrix2, subsets2, signs2))))", "using subset_step[of p qs1 signs1 qs2  signs2] assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>set (characterize_consistent_signs_at_roots_copr p qs1)\n           \\<subseteq> set signs1;\n   set (characterize_consistent_signs_at_roots_copr p qs2)\n   \\<subseteq> set signs2\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p\n                          (qs1 @ qs2))\n                    \\<subseteq> set (signs_smash signs1 signs2)\n  p \\<noteq> 0\n  0 < length qs1\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  0 < length qs2\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  satisfies_properties p qs1 subsets1 signs1 matrix1\n  satisfies_properties p qs2 subsets2 signs2 matrix2\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p\n                             (qs1, matrix1, subsets1, signs1)\n                             (qs2, matrix2, subsets2, signs2))))", "by (simp add: nonzero get_signs_def satisfies_properties_def smash_systems_def)"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "then"], ["proof (chain)\npicking this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))", "unfolding satisfies_properties_def"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (length (qs1 @ qs2)) \\<and>\n    well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    distinct\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    invertible_mat\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))) =\n    M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p\n                             (qs1, matrix1, subsets1, signs1)\n                             (qs2, matrix2, subsets2, signs2))))", "using h1 h2 h3 h4 h5 h6 h7"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))\n  all_list_constr\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (length (qs1 @ qs2))\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n  invertible_mat\n   (get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n  get_matrix\n   (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n          (qs2, matrix2, subsets2, signs2))) =\n  M_mat\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n                           (qs2, matrix2, subsets2, signs2))))\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (length (qs1 @ qs2)) \\<and>\n    well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    distinct\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    invertible_mat\n     (get_matrix\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))) =\n    M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n              (qs2, matrix2, subsets2, signs2)))) \\<and>\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p\n                             (qs1, matrix1, subsets1, signs1)\n                             (qs2, matrix2, subsets2, signs2))))", "by blast"], ["proof (state)\nthis:\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, matrix1, subsets1, signs1)\n            (qs2, matrix2, subsets2, signs2))))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma combining_sys_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys1: \"satisfies_properties p qs1 (get_subsets (calculate_data p qs1)) (get_signs (calculate_data p qs1)) (get_matrix (calculate_data p qs1))\"\n  assumes satisfies_properties_sys2: \"satisfies_properties p qs2 (get_subsets (calculate_data p qs2)) (get_signs (calculate_data p qs2)) (get_matrix (calculate_data p qs2))\"\n  shows  \"satisfies_properties p (qs1@qs2) (get_subsets (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \n  (get_signs (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \n  (get_matrix (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using combining_sys_satisfies_properties_helper"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs1.0 ?subsets1.0 ?signs1.0 ?matrix1.0;\n   satisfies_properties ?p ?qs2.0 ?subsets2.0 ?signs2.0 ?matrix2.0\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p (?qs1.0 @ ?qs2.0)\n                     (get_subsets\n                       (snd (combine_systems ?p\n                              (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)\n                              (?qs2.0, ?matrix2.0, ?subsets2.0,\n                               ?signs2.0))))\n                     (get_signs\n                       (snd (combine_systems ?p\n                              (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)\n                              (?qs2.0, ?matrix2.0, ?subsets2.0,\n                               ?signs2.0))))\n                     (get_matrix\n                       (snd (combine_systems ?p\n                              (?qs1.0, ?matrix1.0, ?subsets1.0, ?signs1.0)\n                              (?qs2.0, ?matrix2.0, ?subsets2.0,\n                               ?signs2.0))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "by (metis getter_functions nontriv1 nontriv2 nonzero pairwise_rel_prime1 pairwise_rel_prime2 nonzero satisfies_properties_sys1 satisfies_properties_sys2)"], ["", "lemma reducing_sys_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  fixes matrix:: \"rat mat\"\n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv: \"length qs > 0\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  assumes satisfies_properties_sys: \"satisfies_properties p qs subsets signs matrix\"\n  shows  \"satisfies_properties p qs (get_subsets (reduce_system p (qs,matrix,subsets,signs)))\n  (get_signs (reduce_system p (qs,matrix,subsets,signs)))\n  (get_matrix (reduce_system p (qs,matrix,subsets,signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h1: \" all_list_constr (get_subsets (reduce_system p (qs, matrix, subsets, signs))) (length qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (length qs)", "using reduction_doesnt_break_subsets assms reduction_subsets_is_get_subsets satisfies_properties_def satisfies_properties_sys"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; all_list_constr ?subsets (length ?qs);\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> all_list_constr\n                     (reduction_subsets ?p ?qs ?signs ?subsets\n                       (M_mat ?signs ?subsets))\n                     (length ?qs)\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  reduction_subsets ?p ?qs ?signs ?subsets ?m =\n  get_subsets (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  satisfies_properties p qs subsets signs matrix\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (length qs)", "by auto"], ["proof (state)\nthis:\n  all_list_constr\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs))) (length qs)\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h2: \"well_def_signs (length qs) (get_signs (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length qs)\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "using reduction_doesnt_break_length_signs[of signs qs p subsets] assms reduction_signs_is_get_signs satisfies_properties_def well_def_signs_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>x\\<in>set signs. length x = length qs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>x\\<in>set (reduction_signs p qs signs subsets\n   (M_mat signs subsets)).\n                       length x = length qs\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  reduction_signs ?p ?qs ?signs ?subsets ?m =\n  get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n  well_def_signs ?num_polys ?sign_conds \\<equiv>\n  \\<forall>signs\\<in>set ?sign_conds. length signs = ?num_polys\n\ngoal (1 subgoal):\n 1. well_def_signs (length qs)\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  well_def_signs (length qs)\n   (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h3: \"distinct (get_signs (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "using reduction_signs_are_distinct[of p qs subsets signs] assms reduction_signs_is_get_signs satisfies_properties_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets); distinct signs\\<rbrakk>\n  \\<Longrightarrow> distinct\n                     (reduction_signs p qs signs subsets\n                       (M_mat signs subsets))\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  reduction_signs ?p ?qs ?signs ?subsets ?m =\n  get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. distinct (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  distinct (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h4: \"satisfy_equation p qs (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "using reduce_system_matrix_equation_preserved[of p qs signs subsets] assms satisfies_properties_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs;\n   all_list_constr subsets (length qs); distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets);\n   \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p qs\n                     (get_subsets\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs)))\n                     (get_signs\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs)))\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  satisfy_equation p qs\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n   (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h5: \"invertible_mat (get_matrix (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "using reduction_doesnt_break_things_invertibility assms same_size satisfies_properties_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?subsets = length ?signs;\n   invertible_mat (M_mat ?signs ?subsets); ?p \\<noteq> 0;\n   well_def_signs (length ?qs) ?signs; distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs\\<rbrakk>\n  \\<Longrightarrow> invertible_mat\n                     (get_matrix\n                       (reduce_system ?p\n                         (?qs, M_mat ?signs ?subsets, ?subsets, ?signs)))\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  invertible_mat (M_mat ?signs ?subsets) \\<Longrightarrow>\n  length ?subsets = length ?signs\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  invertible_mat (get_matrix (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h6: \"get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n    matrix_A (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n    M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))", "using reduce_system_matrix_match[of p qs signs subsets] assms satisfies_properties_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs; distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> M_mat\n                     (get_signs\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs)))\n                     (get_subsets\n                       (reduce_system p\n                         (qs, M_mat signs subsets, subsets, signs))) =\n                    get_matrix\n                     (reduce_system p\n                       (qs, M_mat signs subsets, subsets, signs))\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n    M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n  M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "have h7: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (get_signs\n                      (reduce_system p (qs, matrix, subsets, signs)))", "using reduction_doesnt_break_things_signs[of p qs signs subsets] assms reduction_signs_is_get_signs satisfies_properties_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) signs; distinct signs;\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set signs;\n   satisfy_equation p qs subsets signs;\n   invertible_mat (M_mat signs subsets)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs)\n                    \\<subseteq> set (reduction_signs p qs signs subsets\n(M_mat signs subsets))\n  p \\<noteq> 0\n  0 < length qs\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  satisfies_properties p qs subsets signs matrix\n  reduction_signs ?p ?qs ?signs ?subsets ?m =\n  get_signs (reduce_system ?p (?qs, ?m, ?subsets, ?signs))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (get_signs\n                      (reduce_system p (qs, matrix, subsets, signs)))", "by auto"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "then"], ["proof (chain)\npicking this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs)))", "unfolding satisfies_properties_def"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (length qs) \\<and>\n    well_def_signs (length qs)\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    distinct\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    satisfy_equation p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    invertible_mat\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n    M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (get_signs\n                      (reduce_system p (qs, matrix, subsets, signs)))", "using h1 h2 h3 h4 h5 h6 h7"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n  all_list_constr\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs))) (length qs)\n  well_def_signs (length qs)\n   (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n  distinct (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n  satisfy_equation p qs\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n   (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n  invertible_mat (get_matrix (reduce_system p (qs, matrix, subsets, signs)))\n  get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n  M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal (1 subgoal):\n 1. all_list_constr\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (length qs) \\<and>\n    well_def_signs (length qs)\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    distinct\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    satisfy_equation p qs\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n     (get_signs (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    invertible_mat\n     (get_matrix (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    get_matrix (reduce_system p (qs, matrix, subsets, signs)) =\n    M_mat (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n     (get_subsets (reduce_system p (qs, matrix, subsets, signs))) \\<and>\n    set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set (get_signs\n                      (reduce_system p (qs, matrix, subsets, signs)))", "by blast"], ["proof (state)\nthis:\n  satisfies_properties p qs\n   (get_subsets (reduce_system p (qs, matrix, subsets, signs)))\n   (get_signs (reduce_system p (qs, matrix, subsets, signs)))\n   (get_matrix (reduce_system p (qs, matrix, subsets, signs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"For length 1 qs\""], ["", "lemma  length_1_calculate_data_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes len1: \"length qs = 1\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h1: \"all_list_constr [[],[0]] (length qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr [[], [0]] (length qs)", "using len1"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. all_list_constr [[], [0]] (length qs)", "unfolding all_list_constr_def list_constr_def"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       List.member [[], [0]] x \\<longrightarrow>\n       list_all (\\<lambda>x. x < length qs) x", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>length qs = Suc 0; List.member [[], [0]] x\\<rbrakk>\n       \\<Longrightarrow> list_all (\\<lambda>x. x = 0) x", "by (metis (full_types) length_Cons less_Suc0 list.size(3) list_all_length list_all_simps(2) member_rec(1) member_rec(2) nth_Cons_0)"], ["proof (state)\nthis:\n  all_list_constr [[], [0]] (length qs)\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h2: \"well_def_signs (length qs) [[1],[-1]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length qs) [[1], [- 1]]", "unfolding well_def_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set [[1], [- 1]]. length signs = length qs", "using len1 in_set_member"], ["proof (prove)\nusing this:\n  length qs = 1\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set [[1], [- 1]]. length signs = length qs", "by auto"], ["proof (state)\nthis:\n  well_def_signs (length qs) [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h3: \"distinct ([[1],[-1]]::rat list list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct [[1], [- 1]]", "unfolding distinct_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_list True (\\<lambda>x xs. (\\<and>) (x \\<notin> set xs)) [[1], [- 1]]", "using in_set_member"], ["proof (prove)\nusing this:\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. rec_list True (\\<lambda>x xs. (\\<and>) (x \\<notin> set xs)) [[1], [- 1]]", "by auto"], ["proof (state)\nthis:\n  distinct [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h4: \"satisfy_equation p qs [[],[0]] [[1],[-1]]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "using assms base_case_satisfy_equation_alt[of qs p]"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  length qs = 1\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  \\<lbrakk>length qs = 1; p \\<noteq> 0;\n   \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation p qs [[], [0]] [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "by auto"], ["proof (state)\nthis:\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h6: \"(mat_of_rows_list 2 [[1,1], [1,-1]]::rat mat) = (matrix_A ([[1],[-1]]) ([[],[0]]) :: rat mat)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]", "using mat_base_case"], ["proof (prove)\nusing this:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]", "by auto"], ["proof (state)\nthis:\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]", "have h5: \"invertible_mat (mat_of_rows_list 2 [[1,1], [1,-1]]:: rat mat)\""], ["proof (prove)\nusing this:\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]\n\ngoal (1 subgoal):\n 1. invertible_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "using base_case_invertible_mat"], ["proof (prove)\nusing this:\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]\n  invertible_mat (M_mat [[1], [- 1]] [[], [0]])\n\ngoal (1 subgoal):\n 1. invertible_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "by simp"], ["proof (state)\nthis:\n  invertible_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h7:  \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set ([[1],[-1]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set [[1], [- 1]]", "using assms base_case_sgas_alt[of qs p]"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  length qs = 1\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  \\<lbrakk>length qs = 1; p \\<noteq> 0;\n   \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr p qs)\n                    \\<subseteq> {[1], [- 1]}\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set [[1], [- 1]]", "by simp"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have base_case_hyp: \"satisfies_properties p qs [[],[0]] [[1],[-1]] (mat_of_rows_list 2 [[1,1], [1,-1]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p qs [[], [0]] [[1], [- 1]]\n     (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "using h1 h2 h3 h4 h5 h6 h7"], ["proof (prove)\nusing this:\n  all_list_constr [[], [0]] (length qs)\n  well_def_signs (length qs) [[1], [- 1]]\n  distinct [[1], [- 1]]\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n  invertible_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs [[], [0]] [[1], [- 1]]\n     (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "using satisfies_properties_def"], ["proof (prove)\nusing this:\n  all_list_constr [[], [0]] (length qs)\n  well_def_signs (length qs) [[1], [- 1]]\n  distinct [[1], [- 1]]\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n  invertible_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  mat_of_rows_list 2 [[1, 1], [1, - 1]] = M_mat [[1], [- 1]] [[], [0]]\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set [[1], [- 1]]\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs [[], [0]] [[1], [- 1]]\n     (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "by blast"], ["proof (state)\nthis:\n  satisfies_properties p qs [[], [0]] [[1], [- 1]]\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  satisfies_properties p qs [[], [0]] [[1], [- 1]]\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])", "have key_hyp: \"satisfies_properties p qs (get_subsets (reduce_system p (qs,base_case_info))) (get_signs (reduce_system p (qs,base_case_info))) (get_matrix (reduce_system p (qs,base_case_info)))\""], ["proof (prove)\nusing this:\n  satisfies_properties p qs [[], [0]] [[1], [- 1]]\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, base_case_info)))\n     (get_signs (reduce_system p (qs, base_case_info)))\n     (get_matrix (reduce_system p (qs, base_case_info)))", "using reducing_sys_satisfies_properties"], ["proof (prove)\nusing this:\n  satisfies_properties p qs [[], [0]] [[1], [- 1]]\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs ?subsets ?signs ?matrix\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p ?qs\n                     (get_subsets\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n                     (get_signs\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n                     (get_matrix\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs\n     (get_subsets (reduce_system p (qs, base_case_info)))\n     (get_signs (reduce_system p (qs, base_case_info)))\n     (get_matrix (reduce_system p (qs, base_case_info)))", "by (metis base_case_info_def len1 nonzero pairwise_rel_prime nonzero zero_less_one_class.zero_less_one)"], ["proof (state)\nthis:\n  satisfies_properties p qs\n   (get_subsets (reduce_system p (qs, base_case_info)))\n   (get_signs (reduce_system p (qs, base_case_info)))\n   (get_matrix (reduce_system p (qs, base_case_info)))\n\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "by (simp add: key_hyp len1)"], ["proof (state)\nthis:\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \"For arbitrary qs\""], ["", "lemma append_not_distinct_helper: \"(List.member l1 m \\<and> List.member l2 m) \\<longrightarrow> (distinct (l1@l2) = False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h1: \"List.member l1 m \\<longrightarrow> (\\<exists> n. n < length l1 \\<and> (nth l1 n) = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l1 m \\<longrightarrow> (\\<exists>n<length l1. l1 ! n = m)", "using member_def nth_find_first"], ["proof (prove)\nusing this:\n  List.member ?xs ?x = (?x \\<in> set ?xs)\n  ?a \\<in> set ?xs \\<Longrightarrow> ?xs ! find_first ?a ?xs = ?a\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<longrightarrow> (\\<exists>n<length l1. l1 ! n = m)", "by (simp add: member_def in_set_conv_nth)"], ["proof (state)\nthis:\n  List.member l1 m \\<longrightarrow> (\\<exists>n<length l1. l1 ! n = m)\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h2: \"\\<forall>n. n < length l1 \\<and> (nth l1 n) = m \\<longrightarrow> (nth (l1@l2) n) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n < length l1 \\<and> l1 ! n = m \\<longrightarrow> (l1 @ l2) ! n = m", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length l1; m = l1 ! n\\<rbrakk>\n       \\<Longrightarrow> (l1 @ l2) ! n = l1 ! n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length l1; m = l1 ! n\\<rbrakk>\n       \\<Longrightarrow> (l1 @ l2) ! n = l1 ! n", "assume lt: \"n < length l1\""], ["proof (state)\nthis:\n  n < length l1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length l1; m = l1 ! n\\<rbrakk>\n       \\<Longrightarrow> (l1 @ l2) ! n = l1 ! n", "assume nth_l1: \"m = l1 ! n\""], ["proof (state)\nthis:\n  m = l1 ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>n < length l1; m = l1 ! n\\<rbrakk>\n       \\<Longrightarrow> (l1 @ l2) ! n = l1 ! n", "show \"(l1 @ l2) ! n = l1 ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ l2) ! n = l1 ! n", "proof (induct l2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (l1 @ []) ! n = l1 ! n\n 2. \\<And>a l2.\n       (l1 @ l2) ! n = l1 ! n \\<Longrightarrow> (l1 @ a # l2) ! n = l1 ! n", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (l1 @ []) ! n = l1 ! n\n 2. \\<And>a l2.\n       (l1 @ l2) ! n = l1 ! n \\<Longrightarrow> (l1 @ a # l2) ! n = l1 ! n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ []) ! n = l1 ! n", "by simp"], ["proof (state)\nthis:\n  (l1 @ []) ! n = l1 ! n\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! n = l1 ! n \\<Longrightarrow> (l1 @ a # l2) ! n = l1 ! n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! n = l1 ! n \\<Longrightarrow> (l1 @ a # l2) ! n = l1 ! n", "case (Cons a l2)"], ["proof (state)\nthis:\n  (l1 @ l2) ! n = l1 ! n\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! n = l1 ! n \\<Longrightarrow> (l1 @ a # l2) ! n = l1 ! n", "then"], ["proof (chain)\npicking this:\n  (l1 @ l2) ! n = l1 ! n", "show ?case"], ["proof (prove)\nusing this:\n  (l1 @ l2) ! n = l1 ! n\n\ngoal (1 subgoal):\n 1. (l1 @ a # l2) ! n = l1 ! n", "by (simp add: lt nth_append)"], ["proof (state)\nthis:\n  (l1 @ a # l2) ! n = l1 ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (l1 @ l2) ! n = l1 ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     n < length l1 \\<and> l1 ! n = m \\<longrightarrow> (l1 @ l2) ! n = m\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h3: \"List.member l1 m \\<longrightarrow> (\\<exists>n.  n < length l1 \\<and> (nth (l1@l2) n) = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l1 m \\<longrightarrow>\n    (\\<exists>n<length l1. (l1 @ l2) ! n = m)", "using h1 h2"], ["proof (prove)\nusing this:\n  List.member l1 m \\<longrightarrow> (\\<exists>n<length l1. l1 ! n = m)\n  \\<forall>n.\n     n < length l1 \\<and> l1 ! n = m \\<longrightarrow> (l1 @ l2) ! n = m\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<longrightarrow>\n    (\\<exists>n<length l1. (l1 @ l2) ! n = m)", "by auto"], ["proof (state)\nthis:\n  List.member l1 m \\<longrightarrow>\n  (\\<exists>n<length l1. (l1 @ l2) ! n = m)\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h4: \"List.member l2 m \\<longrightarrow> (\\<exists> n. (nth l2 n) = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l2 m \\<longrightarrow> (\\<exists>n. l2 ! n = m)", "by (meson member_def nth_find_first)"], ["proof (state)\nthis:\n  List.member l2 m \\<longrightarrow> (\\<exists>n. l2 ! n = m)\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h5: \"\\<forall>n. (nth l2 n) = m \\<longrightarrow> (nth (l1@l2) (n + length l1)) = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. l2 ! n = m \\<longrightarrow> (l1 @ l2) ! (n + length l1) = m", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       m = l2 ! n \\<Longrightarrow> (l1 @ l2) ! (n + length l1) = l2 ! n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       m = l2 ! n \\<Longrightarrow> (l1 @ l2) ! (n + length l1) = l2 ! n", "assume nth_l2: \"m = l2 ! n\""], ["proof (state)\nthis:\n  m = l2 ! n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       m = l2 ! n \\<Longrightarrow> (l1 @ l2) ! (n + length l1) = l2 ! n", "show \"(l1 @ l2) ! (n + length l1) = l2 ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ l2) ! (n + length l1) = l2 ! n", "proof (induct l2)"], ["proof (state)\ngoal (2 subgoals):\n 1. (l1 @ []) ! (n + length l1) = [] ! n\n 2. \\<And>a l2.\n       (l1 @ l2) ! (n + length l1) = l2 ! n \\<Longrightarrow>\n       (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (l1 @ []) ! (n + length l1) = [] ! n\n 2. \\<And>a l2.\n       (l1 @ l2) ! (n + length l1) = l2 ! n \\<Longrightarrow>\n       (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (l1 @ []) ! (n + length l1) = [] ! n", "by (metis add.commute nth_append_length_plus)"], ["proof (state)\nthis:\n  (l1 @ []) ! (n + length l1) = [] ! n\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! (n + length l1) = l2 ! n \\<Longrightarrow>\n       (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! (n + length l1) = l2 ! n \\<Longrightarrow>\n       (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "case (Cons a l2)"], ["proof (state)\nthis:\n  (l1 @ l2) ! (n + length l1) = l2 ! n\n\ngoal (1 subgoal):\n 1. \\<And>a l2.\n       (l1 @ l2) ! (n + length l1) = l2 ! n \\<Longrightarrow>\n       (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "then"], ["proof (chain)\npicking this:\n  (l1 @ l2) ! (n + length l1) = l2 ! n", "show ?case"], ["proof (prove)\nusing this:\n  (l1 @ l2) ! (n + length l1) = l2 ! n\n\ngoal (1 subgoal):\n 1. (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  (l1 @ a # l2) ! (n + length l1) = (a # l2) ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (l1 @ l2) ! (n + length l1) = l2 ! n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. l2 ! n = m \\<longrightarrow> (l1 @ l2) ! (n + length l1) = m\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "have h6: \"List.member l2 m \\<longrightarrow> (\\<exists>n. (nth (l1@l2) (n + length l1)) = m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l2 m \\<longrightarrow>\n    (\\<exists>n. (l1 @ l2) ! (n + length l1) = m)", "using h4 h5"], ["proof (prove)\nusing this:\n  List.member l2 m \\<longrightarrow> (\\<exists>n. l2 ! n = m)\n  \\<forall>n. l2 ! n = m \\<longrightarrow> (l1 @ l2) ! (n + length l1) = m\n\ngoal (1 subgoal):\n 1. List.member l2 m \\<longrightarrow>\n    (\\<exists>n. (l1 @ l2) ! (n + length l1) = m)", "by blast"], ["proof (state)\nthis:\n  List.member l2 m \\<longrightarrow>\n  (\\<exists>n. (l1 @ l2) ! (n + length l1) = m)\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "using h3 h6"], ["proof (prove)\nusing this:\n  List.member l1 m \\<longrightarrow>\n  (\\<exists>n<length l1. (l1 @ l2) ! n = m)\n  List.member l2 m \\<longrightarrow>\n  (\\<exists>n. (l1 @ l2) ! (n + length l1) = m)\n\ngoal (1 subgoal):\n 1. List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n    distinct (l1 @ l2) = False", "by (metis distinct_append equalityI insert_disjoint(1) insert_subset member_def order_refl)"], ["proof (state)\nthis:\n  List.member l1 m \\<and> List.member l2 m \\<longrightarrow>\n  distinct (l1 @ l2) = False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  calculate_data_satisfies_properties:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  shows \"(p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) )\n    \\<longrightarrow> satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "proof (induction \"length qs\" arbitrary: qs rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "case less"], ["proof (state)\nthis:\n  length ?qs < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p ?qs (get_subsets (calculate_data p ?qs))\n   (get_signs (calculate_data p ?qs)) (get_matrix (calculate_data p ?qs))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have len1_h: \"length qs = 1 \\<longrightarrow> ( p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length qs = 1 \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "using  length_1_calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<noteq> 0; length ?qs = 1;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p ?qs\n                     (get_subsets (calculate_data ?p ?qs))\n                     (get_signs (calculate_data ?p ?qs))\n                     (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. length qs = 1 \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "by blast"], ["proof (state)\nthis:\n  length qs = 1 \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?len = \"length qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?q1 = \"take (?len div 2) qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?left = \"calculate_data p ?q1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?q2 = \"drop (?len div 2) qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?right = \"calculate_data p ?q2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?comb = \"combine_systems p (?q1,?left) (?q2,?right)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "let ?red =  \"reduce_system p ?comb\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h_q1_len: \"length qs > 1 \\<longrightarrow> (length ?q1 > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h_q2_len: \"length qs > 1 \\<longrightarrow> (length ?q2 > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h_q1_copr: \"(\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) \\<longrightarrow> (\\<forall>q. ((List.member ?q1 q) \\<longrightarrow> (coprime p q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (take (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (take (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "have mem_hyp: \"(\\<forall>q. ((List.member ?q1 q) \\<longrightarrow> (List.member qs q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       List.member (take (length qs div 2) qs) q \\<longrightarrow>\n       List.member qs q", "by (meson in_set_member in_set_takeD)"], ["proof (state)\nthis:\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q\n\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (take (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "then"], ["proof (chain)\npicking this:\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q\n\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (take (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have h_q2_copr: \"(\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) \\<longrightarrow> (\\<forall>q. ((List.member ?q2 q) \\<longrightarrow> (coprime p q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "have mem_hyp: \"(\\<forall>q. ((List.member ?q2 q) \\<longrightarrow> (List.member qs q)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n       List.member qs q", "by (meson in_set_dropD in_set_member)"], ["proof (state)\nthis:\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q\n\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "then"], ["proof (chain)\npicking this:\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n     List.member qs q\n\ngoal (1 subgoal):\n 1. (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    (\\<forall>q.\n        List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n        coprime p q)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have q1_sat_props: \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> satisfies_properties p ?q1 (get_subsets (calculate_data p ?q1)) (get_signs (calculate_data p ?q1)) (get_matrix (calculate_data p ?q1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p (take (length qs div 2) qs)\n     (get_subsets (calculate_data p (take (length qs div 2) qs)))\n     (get_signs (calculate_data p (take (length qs div 2) qs)))\n     (get_matrix (calculate_data p (take (length qs div 2) qs)))", "using less.hyps[of ?q1] h_q1_len h_q1_copr"], ["proof (prove)\nusing this:\n  length (take (length qs div 2) qs) < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length (take (length qs div 2) qs) \\<and>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q) \\<longrightarrow>\n  satisfies_properties p (take (length qs div 2) qs)\n   (get_subsets (calculate_data p (take (length qs div 2) qs)))\n   (get_signs (calculate_data p (take (length qs div 2) qs)))\n   (get_matrix (calculate_data p (take (length qs div 2) qs)))\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p (take (length qs div 2) qs)\n     (get_subsets (calculate_data p (take (length qs div 2) qs)))\n     (get_signs (calculate_data p (take (length qs div 2) qs)))\n     (get_matrix (calculate_data p (take (length qs div 2) qs)))", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (take (length qs div 2) qs)\n   (get_subsets (calculate_data p (take (length qs div 2) qs)))\n   (get_signs (calculate_data p (take (length qs div 2) qs)))\n   (get_matrix (calculate_data p (take (length qs div 2) qs)))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have q2_help: \"length qs > 1 \\<longrightarrow> length (drop (length qs div 2) qs) < length qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    length (drop (length qs div 2) qs) < length qs", "using h_q1_len"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    length (drop (length qs div 2) qs) < length qs", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs", "have q2_sat_props: \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> satisfies_properties p ?q2 (get_subsets (calculate_data p ?q2)) (get_signs (calculate_data p ?q2)) (get_matrix (calculate_data p ?q2))\""], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p (drop (length qs div 2) qs)\n     (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n     (get_signs (calculate_data p (drop (length qs div 2) qs)))\n     (get_matrix (calculate_data p (drop (length qs div 2) qs)))", "using less.hyps[of ?q2] h_q2_len h_q2_copr"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs\n  length (drop (length qs div 2) qs) < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length (drop (length qs div 2) qs) \\<and>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q) \\<longrightarrow>\n  satisfies_properties p (drop (length qs div 2) qs)\n   (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n   (get_signs (calculate_data p (drop (length qs div 2) qs)))\n   (get_matrix (calculate_data p (drop (length qs div 2) qs)))\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p (drop (length qs div 2) qs)\n     (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n     (get_signs (calculate_data p (drop (length qs div 2) qs)))\n     (get_matrix (calculate_data p (drop (length qs div 2) qs)))", "by blast"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (drop (length qs div 2) qs)\n   (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n   (get_signs (calculate_data p (drop (length qs div 2) qs)))\n   (get_matrix (calculate_data p (drop (length qs div 2) qs)))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have put_tog: \"?q1@?q2 = qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length qs div 2) qs @ drop (length qs div 2) qs = qs", "using append_take_drop_id"], ["proof (prove)\nusing this:\n  take ?n ?xs @ drop ?n ?xs = ?xs\n\ngoal (1 subgoal):\n 1. take (length qs div 2) qs @ drop (length qs div 2) qs = qs", "by blast"], ["proof (state)\nthis:\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs", "have comb_sat_props: \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> (satisfies_properties p (qs) (get_subsets (snd ((combine_systems p (?q1,calculate_data p ?q1) (?q2,calculate_data p ?q2))))) \n  (get_signs (snd ((combine_systems p (?q1,calculate_data p ?q1) (?q2,calculate_data p ?q2))))) \n  (get_matrix (snd ((combine_systems p (?q1,calculate_data p ?q1) (?q2,calculate_data p ?q2))))))\""], ["proof (prove)\nusing this:\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "using q1_sat_props q2_sat_props  combining_sys_satisfies_properties"], ["proof (prove)\nusing this:\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (take (length qs div 2) qs)\n   (get_subsets (calculate_data p (take (length qs div 2) qs)))\n   (get_signs (calculate_data p (take (length qs div 2) qs)))\n   (get_matrix (calculate_data p (take (length qs div 2) qs)))\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (drop (length qs div 2) qs)\n   (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n   (get_signs (calculate_data p (drop (length qs div 2) qs)))\n   (get_matrix (calculate_data p (drop (length qs div 2) qs)))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs1.0 (get_subsets (calculate_data ?p ?qs1.0))\n    (get_signs (calculate_data ?p ?qs1.0))\n    (get_matrix (calculate_data ?p ?qs1.0));\n   satisfies_properties ?p ?qs2.0 (get_subsets (calculate_data ?p ?qs2.0))\n    (get_signs (calculate_data ?p ?qs2.0))\n    (get_matrix (calculate_data ?p ?qs2.0))\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p (?qs1.0 @ ?qs2.0)\n                     (get_subsets\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_signs\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_matrix\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "using h_q1_copr h_q1_len h_q2_copr h_q2_len  put_tog"], ["proof (prove)\nusing this:\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (take (length qs div 2) qs)\n   (get_subsets (calculate_data p (take (length qs div 2) qs)))\n   (get_signs (calculate_data p (take (length qs div 2) qs)))\n   (get_matrix (calculate_data p (take (length qs div 2) qs)))\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p (drop (length qs div 2) qs)\n   (get_subsets (calculate_data p (drop (length qs div 2) qs)))\n   (get_signs (calculate_data p (drop (length qs div 2) qs)))\n   (get_matrix (calculate_data p (drop (length qs div 2) qs)))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs1.0 (get_subsets (calculate_data ?p ?qs1.0))\n    (get_signs (calculate_data ?p ?qs1.0))\n    (get_matrix (calculate_data ?p ?qs1.0));\n   satisfies_properties ?p ?qs2.0 (get_subsets (calculate_data ?p ?qs2.0))\n    (get_signs (calculate_data ?p ?qs2.0))\n    (get_matrix (calculate_data ?p ?qs2.0))\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p (?qs1.0 @ ?qs2.0)\n                     (get_subsets\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_signs\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_matrix\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q)\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n  take (length qs div 2) qs @ drop (length qs div 2) qs = qs\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "by metis"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))", "have comb_sat: \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> \n      (satisfies_properties p (qs) (get_subsets (snd ?comb)) (get_signs (snd ?comb)) (get_matrix (snd ?comb)))\""], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "by blast"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have red_char: \"?red = (reduce_system p (qs,(get_matrix (snd ?comb)),(get_subsets (snd ?comb)),(get_signs (snd ?comb))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduce_system p\n     (combine_systems p\n       (take (length qs div 2) qs,\n        calculate_data p (take (length qs div 2) qs))\n       (drop (length qs div 2) qs,\n        calculate_data p (drop (length qs div 2) qs))) =\n    reduce_system p\n     (qs,\n      get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))),\n      get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))),\n      get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "using getter_functions"], ["proof (prove)\nusing this:\n  calculate_data ?p ?qs =\n  (get_matrix (calculate_data ?p ?qs), get_subsets (calculate_data ?p ?qs),\n   get_signs (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. reduce_system p\n     (combine_systems p\n       (take (length qs div 2) qs,\n        calculate_data p (take (length qs div 2) qs))\n       (drop (length qs div 2) qs,\n        calculate_data p (drop (length qs div 2) qs))) =\n    reduce_system p\n     (qs,\n      get_matrix\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))),\n      get_subsets\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))),\n      get_signs\n       (snd (combine_systems p\n              (take (length qs div 2) qs,\n               calculate_data p (take (length qs div 2) qs))\n              (drop (length qs div 2) qs,\n               calculate_data p (drop (length qs div 2) qs)))))", "by (smt Pair_inject combining_to_smash get_matrix_def get_signs_def get_subsets_def prod.collapse put_tog smash_systems_def)"], ["proof (state)\nthis:\n  reduce_system p\n   (combine_systems p\n     (take (length qs div 2) qs,\n      calculate_data p (take (length qs div 2) qs))\n     (drop (length qs div 2) qs,\n      calculate_data p (drop (length qs div 2) qs))) =\n  reduce_system p\n   (qs,\n    get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  reduce_system p\n   (combine_systems p\n     (take (length qs div 2) qs,\n      calculate_data p (take (length qs div 2) qs))\n     (drop (length qs div 2) qs,\n      calculate_data p (drop (length qs div 2) qs))) =\n  reduce_system p\n   (qs,\n    get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))", "have \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) )  \\<longrightarrow> (satisfies_properties p qs (get_subsets ?red) (get_signs ?red) (get_matrix ?red))\""], ["proof (prove)\nusing this:\n  reduce_system p\n   (combine_systems p\n     (take (length qs div 2) qs,\n      calculate_data p (take (length qs div 2) qs))\n     (drop (length qs div 2) qs,\n      calculate_data p (drop (length qs div 2) qs))) =\n  reduce_system p\n   (qs,\n    get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))", "using reducing_sys_satisfies_properties comb_sat"], ["proof (prove)\nusing this:\n  reduce_system p\n   (combine_systems p\n     (take (length qs div 2) qs,\n      calculate_data p (take (length qs div 2) qs))\n     (drop (length qs div 2) qs,\n      calculate_data p (drop (length qs div 2) qs))) =\n  reduce_system p\n   (qs,\n    get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))),\n    get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs ?subsets ?signs ?matrix\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p ?qs\n                     (get_subsets\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n                     (get_signs\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n                     (get_matrix\n                       (reduce_system ?p (?qs, ?matrix, ?subsets, ?signs)))\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (snd (combine_systems p\n            (take (length qs div 2) qs,\n             calculate_data p (take (length qs div 2) qs))\n            (drop (length qs div 2) qs,\n             calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs\n     (get_subsets\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))\n     (get_signs\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))\n     (get_matrix\n       (reduce_system p\n         (combine_systems p\n           (take (length qs div 2) qs,\n            calculate_data p (take (length qs div 2) qs))\n           (drop (length qs div 2) qs,\n            calculate_data p (drop (length qs div 2) qs)))))", "by presburger"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs\n   (get_subsets\n     (reduce_system p\n       (combine_systems p\n         (take (length qs div 2) qs,\n          calculate_data p (take (length qs div 2) qs))\n         (drop (length qs div 2) qs,\n          calculate_data p (drop (length qs div 2) qs)))))\n   (get_signs\n     (reduce_system p\n       (combine_systems p\n         (take (length qs div 2) qs,\n          calculate_data p (take (length qs div 2) qs))\n         (drop (length qs div 2) qs,\n          calculate_data p (drop (length qs div 2) qs)))))\n   (get_matrix\n     (reduce_system p\n       (combine_systems p\n         (take (length qs div 2) qs,\n          calculate_data p (take (length qs div 2) qs))\n         (drop (length qs div 2) qs,\n          calculate_data p (drop (length qs div 2) qs)))))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "have len_gt1: \"length qs > 1 \\<longrightarrow> (p \\<noteq> 0 \\<and> (length qs > 0) \\<and> (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))) ) \\<longrightarrow> satisfies_properties p qs (get_subsets (calculate_data p qs)) (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "by (smt \\<open>1 < length qs \\<longrightarrow>  p \\<noteq> 0 \\<and> 0 < length qs \\<and> (\\<forall>q. List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow> satisfies_properties p qs (get_subsets (reduce_system p (combine_systems p (take (length qs div 2) qs, calculate_data p (take (length qs div 2) qs)) (drop (length qs div 2) qs, calculate_data p (drop (length qs div 2) qs))))) (get_signs (reduce_system p (combine_systems p (take (length qs div 2) qs, calculate_data p (take (length qs div 2) qs)) (drop (length qs div 2) qs, calculate_data p (drop (length qs div 2) qs))))) (get_matrix (reduce_system p (combine_systems p (take (length qs div 2) qs, calculate_data p (take (length qs div 2) qs)) (drop (length qs div 2) qs, calculate_data p (drop (length qs div 2) qs)))))\\<close> calculate_data.simps neq0_conv not_less)"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           satisfies_properties p qsa (get_subsets (calculate_data p qsa))\n            (get_signs (calculate_data p qsa))\n            (get_matrix (calculate_data p qsa))) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       satisfies_properties p qs (get_subsets (calculate_data p qs))\n        (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "then"], ["proof (chain)\npicking this:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "show ?case"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "using len1_h len_gt1"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n  length qs = 1 \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n  1 < length qs \\<longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    satisfies_properties p qs (get_subsets (calculate_data p qs))\n     (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))", "by (metis One_nat_def Suc_lessI)"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  satisfies_properties p qs (get_subsets (calculate_data p qs))\n   (get_signs (calculate_data p qs)) (get_matrix (calculate_data p qs))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \"Some key results on consistent sign assignments\""], ["", "lemma find_consistent_signs_at_roots_len1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes len1: \"length qs = 1\"\n  assumes pairwise_rel_prime: \"\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q))\"\n  shows \"set (find_consistent_signs_at_roots p qs) = set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "let ?signs = \"[[1],[-1]]::rat list list\""], ["proof (state)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "let ?subsets = \"[[],[0]]::nat list list\""], ["proof (state)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have mat_help: \"matrix_A [[1],[-1]] [[],[0]] = (mat_of_rows_list 2 [[1,1], [1,-1]])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]", "using mat_base_case"], ["proof (prove)\nusing this:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]", "by auto"], ["proof (state)\nthis:\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have well_def_signs: \"well_def_signs (length qs) ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length qs) [[1], [- 1]]", "unfolding well_def_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set [[1], [- 1]]. length signs = length qs", "using len1"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<forall>signs\\<in>set [[1], [- 1]]. length signs = length qs", "by auto"], ["proof (state)\nthis:\n  well_def_signs (length qs) [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have distinct_signs: \"distinct ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct [[1], [- 1]]", "unfolding distinct_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rec_list True (\\<lambda>x xs. (\\<and>) (x \\<notin> set xs)) [[1], [- 1]]", "by auto"], ["proof (state)\nthis:\n  distinct [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have ex_q: \"\\<exists>(q::real poly). qs = [q]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using len1"], ["proof (prove)\nusing this:\n  length qs = 1\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "using length_Suc_conv[of qs 0]"], ["proof (prove)\nusing this:\n  length qs = 1\n  (length qs = Suc 0) = (\\<exists>y ys. qs = y # ys \\<and> length ys = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>q. qs = [q]", "by auto"], ["proof (state)\nthis:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  \\<exists>q. qs = [q]", "have all_info: \"set (characterize_consistent_signs_at_roots_copr p qs) \\<subseteq> set(?signs)\""], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set [[1], [- 1]]", "using assms base_case_sgas"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n  p \\<noteq> 0\n  length qs = 1\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          [?q])\n                    \\<subseteq> {[1], [- 1]}\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p qs)\n    \\<subseteq> set [[1], [- 1]]", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x q.\n       \\<lbrakk>p \\<noteq> 0;\n        \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n        \\<And>p q.\n           \\<lbrakk>p \\<noteq> 0; coprime p q\\<rbrakk>\n           \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr\n                                   p [q])\n                             \\<subseteq> {[1], [- 1]};\n        x \\<in> set (characterize_consistent_signs_at_roots_copr p [q]);\n        x \\<noteq> [1]; qs = [q]\\<rbrakk>\n       \\<Longrightarrow> x = [- 1]", "by (meson in_mono insertE insert_absorb insert_not_empty member_rec(1))"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have match: \"satisfy_equation p qs ?subsets ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "using ex_q base_case_satisfy_equation nonzero pairwise_rel_prime"], ["proof (prove)\nusing this:\n  \\<exists>q. qs = [q]\n  \\<lbrakk>?p \\<noteq> 0; coprime ?p ?q\\<rbrakk>\n  \\<Longrightarrow> satisfy_equation ?p [?q] [[], [0]] [[1], [- 1]]\n  p \\<noteq> 0\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. satisfy_equation p qs [[], [0]] [[1], [- 1]]", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>\\<And>p q.\n                   \\<lbrakk>p \\<noteq> 0; coprime p q\\<rbrakk>\n                   \\<Longrightarrow> satisfy_equation p [q] [[], [0]]\n[[1], [- 1]];\n        p \\<noteq> 0;\n        \\<forall>qa. List.member [q] qa \\<longrightarrow> coprime p qa;\n        qs = [q]\\<rbrakk>\n       \\<Longrightarrow> satisfy_equation p [q] [[], [0]] [[1], [- 1]]", "by (simp add: member_rec(1))"], ["proof (state)\nthis:\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have invertible_mat: \"invertible_mat (matrix_A ?signs ?subsets)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat (M_mat [[1], [- 1]] [[], [0]])", "using inverse_mat_base_case inverse_mat_base_case_2"], ["proof (prove)\nusing this:\n  inverts_mat (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n   (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n\ngoal (1 subgoal):\n 1. invertible_mat (M_mat [[1], [- 1]] [[], [0]])", "unfolding invertible_mat_def"], ["proof (prove)\nusing this:\n  inverts_mat (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n   (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n\ngoal (1 subgoal):\n 1. square_mat (M_mat [[1], [- 1]] [[], [0]]) \\<and>\n    (\\<exists>B.\n        inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n        inverts_mat B (M_mat [[1], [- 1]] [[], [0]]))", "using mat_base_case"], ["proof (prove)\nusing this:\n  inverts_mat (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n   (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n  inverts_mat (mat_of_rows_list 2 [[1, 1], [1, - 1]])\n   (mat_of_rows_list 2 [[1 / 2, 1 / 2], [1 / 2, - (1 / 2)]])\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. square_mat (M_mat [[1], [- 1]] [[], [0]]) \\<and>\n    (\\<exists>B.\n        inverts_mat (M_mat [[1], [- 1]] [[], [0]]) B \\<and>\n        inverts_mat B (M_mat [[1], [- 1]] [[], [0]]))", "by auto"], ["proof (state)\nthis:\n  invertible_mat (M_mat [[1], [- 1]] [[], [0]])\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h: \"set (get_signs (reduce_system p (qs, ((matrix_A ?signs ?subsets), (?subsets, ?signs))))) = \n    set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (get_signs\n          (reduce_system p\n            (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]], [[1], [- 1]]))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using nonzero nonzero well_def_signs distinct_signs all_info match invertible_mat\n      reduce_system_sign_conditions[where p = \"p\", where qs = \"qs\", where signs = \"[[1],[-1]]\", where subsets = \"[[],[0]]\"]"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  p \\<noteq> 0\n  well_def_signs (length qs) [[1], [- 1]]\n  distinct [[1], [- 1]]\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<subseteq> set [[1], [- 1]]\n  satisfy_equation p qs [[], [0]] [[1], [- 1]]\n  invertible_mat (M_mat [[1], [- 1]] [[], [0]])\n  \\<lbrakk>p \\<noteq> 0; well_def_signs (length qs) [[1], [- 1]];\n   distinct [[1], [- 1]];\n   set (characterize_consistent_signs_at_roots_copr p qs)\n   \\<subseteq> set [[1], [- 1]];\n   satisfy_equation p qs [[], [0]] [[1], [- 1]];\n   invertible_mat (M_mat [[1], [- 1]] [[], [0]])\\<rbrakk>\n  \\<Longrightarrow> set (get_signs\n                          (reduce_system p\n                            (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]],\n                             [[1], [- 1]]))) =\n                    set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (get_signs\n          (reduce_system p\n            (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]], [[1], [- 1]]))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by blast"], ["proof (state)\nthis:\n  set (get_signs\n        (reduce_system p\n          (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]], [[1], [- 1]]))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  set (get_signs\n        (reduce_system p\n          (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]], [[1], [- 1]]))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "have  \"set (snd (snd (reduce_system p (qs, ((mat_of_rows_list 2 [[1,1], [1,-1]]), ([[],[0]], [[1],[-1]])))))) = \n    set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  set (get_signs\n        (reduce_system p\n          (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]], [[1], [- 1]]))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                     [[1], [- 1]])))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "unfolding get_signs_def"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                     [[1], [- 1]])))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using mat_help"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (qs, M_mat [[1], [- 1]] [[], [0]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  M_mat [[1], [- 1]] [[], [0]] = mat_of_rows_list 2 [[1, 1], [1, - 1]]\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                     [[1], [- 1]])))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by auto"], ["proof (state)\nthis:\n  set (snd (snd (reduce_system p\n                  (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  set (snd (snd (reduce_system p\n                  (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "have \"set (snd (snd (reduce_system p (qs, base_case_info)))) = set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p (qs, base_case_info)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "unfolding base_case_info_def"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                   [[1], [- 1]])))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (qs, mat_of_rows_list 2 [[1, 1], [1, - 1]], [[], [0]],\n                     [[1], [- 1]])))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by auto"], ["proof (state)\nthis:\n  set (snd (snd (reduce_system p (qs, base_case_info)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  set (snd (snd (reduce_system p (qs, base_case_info)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p (qs, base_case_info)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using len1"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p (qs, base_case_info)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  length qs = 1\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (simp add: find_consistent_signs_at_roots_thm)"], ["proof (state)\nthis:\n  set (find_consistent_signs_at_roots p qs) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma smaller_sys_are_good:\n  fixes p:: \"real poly\"\n  fixes qs1 :: \"real poly list\"\n  fixes qs2 :: \"real poly list\"\n  fixes subsets :: \"nat list list\"\n  fixes signs :: \"rat list list\" \n  assumes nonzero: \"p \\<noteq> 0\"\n  assumes nontriv1: \"length qs1 > 0\"\n  assumes pairwise_rel_prime1: \"\\<forall>q. ((List.member qs1 q) \\<longrightarrow> (coprime p q))\"\n  assumes nontriv2: \"length qs2 > 0\"\n  assumes pairwise_rel_prime2: \"\\<forall>q. ((List.member qs2 q) \\<longrightarrow> (coprime p q))\"\n  assumes \"set(find_consistent_signs_at_roots p qs1) = set(characterize_consistent_signs_at_roots_copr p qs1)\"\n  assumes \"set(find_consistent_signs_at_roots p qs2) = set(characterize_consistent_signs_at_roots_copr p qs2)\"\n  shows \"set(snd(snd(reduce_system p (combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\n    = set(characterize_consistent_signs_at_roots_copr p (qs1@qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "let ?signs = \"(get_signs (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \""], ["proof (state)\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "let ?subsets = \"(get_subsets (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \""], ["proof (state)\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h0: \"satisfies_properties p (qs1@qs2) ?subsets ?signs\n    (get_matrix (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using calculate_data_satisfies_properties combining_sys_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs1.0 (get_subsets (calculate_data ?p ?qs1.0))\n    (get_signs (calculate_data ?p ?qs1.0))\n    (get_matrix (calculate_data ?p ?qs1.0));\n   satisfies_properties ?p ?qs2.0 (get_subsets (calculate_data ?p ?qs2.0))\n    (get_signs (calculate_data ?p ?qs2.0))\n    (get_matrix (calculate_data ?p ?qs2.0))\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p (?qs1.0 @ ?qs2.0)\n                     (get_subsets\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_signs\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_matrix\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using nontriv1 nontriv2 nonzero pairwise_rel_prime1 pairwise_rel_prime2 nonzero"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   satisfies_properties ?p ?qs1.0 (get_subsets (calculate_data ?p ?qs1.0))\n    (get_signs (calculate_data ?p ?qs1.0))\n    (get_matrix (calculate_data ?p ?qs1.0));\n   satisfies_properties ?p ?qs2.0 (get_subsets (calculate_data ?p ?qs2.0))\n    (get_signs (calculate_data ?p ?qs2.0))\n    (get_matrix (calculate_data ?p ?qs2.0))\\<rbrakk>\n  \\<Longrightarrow> satisfies_properties ?p (?qs1.0 @ ?qs2.0)\n                     (get_subsets\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_signs\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n                     (get_matrix\n                       (snd (combine_systems ?p\n                              (?qs1.0, calculate_data ?p ?qs1.0)\n                              (?qs2.0, calculate_data ?p ?qs2.0))))\n  0 < length qs1\n  0 < length qs2\n  p \\<noteq> 0\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. satisfies_properties p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_matrix\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "by simp"], ["proof (state)\nthis:\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))", "have h1: \"set(characterize_consistent_signs_at_roots_copr p (qs1@qs2)) \\<subseteq> set ?signs\""], ["proof (prove)\nusing this:\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p (qs1, calculate_data p qs1)\n                             (qs2, calculate_data p qs2))))", "unfolding satisfies_properties_def"], ["proof (prove)\nusing this:\n  all_list_constr\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (length (qs1 @ qs2)) \\<and>\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) \\<and>\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) \\<and>\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) \\<and>\n  invertible_mat\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) \\<and>\n  get_matrix\n   (snd (combine_systems p (qs1, calculate_data p qs1)\n          (qs2, calculate_data p qs2))) =\n  M_mat\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) \\<and>\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, calculate_data p qs1)\n                           (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n    \\<subseteq> set (get_signs\n                      (snd (combine_systems p (qs1, calculate_data p qs1)\n                             (qs2, calculate_data p qs2))))", "by linarith"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, calculate_data p qs1)\n                           (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h2: \"well_def_signs (length (qs1@qs2)) ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using h0 satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. well_def_signs (length (qs1 @ qs2))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "by blast"], ["proof (state)\nthis:\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h3: \"distinct ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using h0 satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. distinct\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "by blast"], ["proof (state)\nthis:\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h4: \"satisfy_equation p (qs1@qs2) ?subsets ?signs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "using h0 satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. satisfy_equation p (qs1 @ qs2)\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))", "by blast"], ["proof (state)\nthis:\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h5: \"invertible_mat (matrix_A ?signs ?subsets) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat\n       (get_signs\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))\n       (get_subsets\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2)))))", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat\n       (get_signs\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))\n       (get_subsets\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2)))))", "using h0 satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  satisfies_properties p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_matrix\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. invertible_mat\n     (M_mat\n       (get_signs\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))\n       (get_subsets\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2)))))", "by auto"], ["proof (state)\nthis:\n  invertible_mat\n   (M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2)))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h: \"set (take_indices ?signs \n            (find_nonzeros_from_input_vec (solve_for_lhs p (qs1@qs2) ?subsets  (matrix_A ?signs ?subsets))))\n        =  set(characterize_consistent_signs_at_roots_copr p (qs1@qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (take_indices\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p (qs1 @ qs2)\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (M_mat\n                (get_signs\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))\n                (get_subsets\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2)))))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "using h1 h2 h3 h4 h5 reduction_deletes_bad_sign_conds"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, calculate_data p qs1)\n                           (qs2, calculate_data p qs2))))\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  invertible_mat\n   (M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2)))))\n  \\<lbrakk>?p \\<noteq> 0; well_def_signs (length ?qs) ?signs;\n   distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          ?qs) =\n                    set (reduction_signs ?p ?qs ?signs ?subsets\n                          (M_mat ?signs ?subsets))\n\ngoal (1 subgoal):\n 1. set (take_indices\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p (qs1 @ qs2)\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (M_mat\n                (get_signs\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))\n                (get_subsets\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2)))))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "using nonzero nonzero reduction_signs_def"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n  \\<subseteq> set (get_signs\n                    (snd (combine_systems p (qs1, calculate_data p qs1)\n                           (qs2, calculate_data p qs2))))\n  well_def_signs (length (qs1 @ qs2))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  distinct\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  satisfy_equation p (qs1 @ qs2)\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n  invertible_mat\n   (M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2)))))\n  \\<lbrakk>?p \\<noteq> 0; well_def_signs (length ?qs) ?signs;\n   distinct ?signs;\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs;\n   satisfy_equation ?p ?qs ?subsets ?signs;\n   invertible_mat (M_mat ?signs ?subsets)\\<rbrakk>\n  \\<Longrightarrow> set (characterize_consistent_signs_at_roots_copr ?p\n                          ?qs) =\n                    set (reduction_signs ?p ?qs ?signs ?subsets\n                          (M_mat ?signs ?subsets))\n  p \\<noteq> 0\n  p \\<noteq> 0\n  reduction_signs ?p ?qs ?signs ?subsets ?matr =\n  take_indices ?signs\n   (find_nonzeros_from_input_vec (solve_for_lhs ?p ?qs ?subsets ?matr))\n\ngoal (1 subgoal):\n 1. set (take_indices\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p (qs1 @ qs2)\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (M_mat\n                (get_signs\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))\n                (get_subsets\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2)))))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "by auto"], ["proof (state)\nthis:\n  set (take_indices\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p (qs1 @ qs2)\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (M_mat\n              (get_signs\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2)))))))) =\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  set (take_indices\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p (qs1 @ qs2)\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (M_mat\n              (get_signs\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2)))))))) =\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have h: \"set (characterize_consistent_signs_at_roots_copr p (qs1@qs2)) =\n    set (reduction_signs p (qs1@qs2) ?signs ?subsets  (matrix_A ?signs ?subsets ))\""], ["proof (prove)\nusing this:\n  set (take_indices\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p (qs1 @ qs2)\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (M_mat\n              (get_signs\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2)))))))) =\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)) =\n    set (reduction_signs p (qs1 @ qs2)\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (M_mat\n            (get_signs\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))))", "unfolding reduction_signs_def get_signs_def"], ["proof (prove)\nusing this:\n  set (take_indices\n        (snd (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2)))))\n        (find_nonzeros_from_input_vec\n          (solve_for_lhs p (qs1 @ qs2)\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (M_mat\n              (snd (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                               (qs2, calculate_data p qs2)))))\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2)))))))) =\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)) =\n    set (take_indices\n          (snd (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                           (qs2, calculate_data p qs2)))))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p (qs1 @ qs2)\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (M_mat\n                (snd (snd (snd (combine_systems p\n                                 (qs1, calculate_data p qs1)\n                                 (qs2, calculate_data p qs2)))))\n                (get_subsets\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))))))", "by blast"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have help_h: \"reduction_signs p (qs1@qs2) ?signs ?subsets  (matrix_A ?signs ?subsets) \n      = (take_indices ?signs (find_nonzeros_from_input_vec (solve_for_lhs p (qs1@qs2) ?subsets  (matrix_A ?signs ?subsets))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reduction_signs p (qs1 @ qs2)\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (M_mat\n       (get_signs\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))\n       (get_subsets\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))) =\n    take_indices\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p (qs1 @ qs2)\n         (get_subsets\n           (snd (combine_systems p (qs1, calculate_data p qs1)\n                  (qs2, calculate_data p qs2))))\n         (M_mat\n           (get_signs\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))\n           (get_subsets\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2)))))))", "unfolding reduction_signs_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. take_indices\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p (qs1 @ qs2)\n         (get_subsets\n           (snd (combine_systems p (qs1, calculate_data p qs1)\n                  (qs2, calculate_data p qs2))))\n         (M_mat\n           (get_signs\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))\n           (get_subsets\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))))) =\n    take_indices\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (find_nonzeros_from_input_vec\n       (solve_for_lhs p (qs1 @ qs2)\n         (get_subsets\n           (snd (combine_systems p (qs1, calculate_data p qs1)\n                  (qs2, calculate_data p qs2))))\n         (M_mat\n           (get_signs\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))\n           (get_subsets\n             (snd (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2)))))))", "by auto"], ["proof (state)\nthis:\n  reduction_signs p (qs1 @ qs2)\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))) =\n  take_indices\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (find_nonzeros_from_input_vec\n     (solve_for_lhs p (qs1 @ qs2)\n       (get_subsets\n         (snd (combine_systems p (qs1, calculate_data p qs1)\n                (qs2, calculate_data p qs2))))\n       (M_mat\n         (get_signs\n           (snd (combine_systems p (qs1, calculate_data p qs1)\n                  (qs2, calculate_data p qs2))))\n         (get_subsets\n           (snd (combine_systems p (qs1, calculate_data p qs1)\n                  (qs2, calculate_data p qs2)))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have clear_signs: \"(signs_smash (get_signs (calculate_data p qs1)) (get_signs (calculate_data p qs2))) = (get_signs (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. signs_smash (get_signs (calculate_data p qs1))\n     (get_signs (calculate_data p qs2)) =\n    get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))", "by (smt combining_to_smash get_signs_def getter_functions smash_systems_def snd_conv)"], ["proof (state)\nthis:\n  signs_smash (get_signs (calculate_data p qs1))\n   (get_signs (calculate_data p qs2)) =\n  get_signs\n   (snd (combine_systems p (qs1, calculate_data p qs1)\n          (qs2, calculate_data p qs2)))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have clear_subsets: \"(subsets_smash (length qs1) (get_subsets(calculate_data p qs1)) (get_subsets (calculate_data p qs2))) = (get_subsets (snd ((combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n     (get_subsets (calculate_data p qs2)) =\n    get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))", "by (smt Pair_inject combining_to_smash get_subsets_def prod.collapse smash_systems_def)"], ["proof (state)\nthis:\n  subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n   (get_subsets (calculate_data p qs2)) =\n  get_subsets\n   (snd (combine_systems p (qs1, calculate_data p qs1)\n          (qs2, calculate_data p qs2)))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have \"well_def_signs (length qs1) (get_signs (calculate_data p qs1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. well_def_signs (length qs1) (get_signs (calculate_data p qs1))", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. well_def_signs (length qs1) (get_signs (calculate_data p qs1))", "using nontriv1 nonzero pairwise_rel_prime1 nonzero satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  0 < length qs1\n  p \\<noteq> 0\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  p \\<noteq> 0\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. well_def_signs (length qs1) (get_signs (calculate_data p qs1))", "by auto"], ["proof (state)\nthis:\n  well_def_signs (length qs1) (get_signs (calculate_data p qs1))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  well_def_signs (length qs1) (get_signs (calculate_data p qs1))", "have well_def_signs1: \"(\\<And>j. j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow> length j = (length qs1))\""], ["proof (prove)\nusing this:\n  well_def_signs (length qs1) (get_signs (calculate_data p qs1))\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n       length j = length qs1", "using well_def_signs_def"], ["proof (prove)\nusing this:\n  well_def_signs (length qs1) (get_signs (calculate_data p qs1))\n  well_def_signs ?num_polys ?sign_conds \\<equiv>\n  \\<forall>signs\\<in>set ?sign_conds. length signs = ?num_polys\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n       length j = length qs1", "by blast"], ["proof (state)\nthis:\n  ?j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n  length ?j = length qs1\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have \"all_list_constr (get_subsets(calculate_data p qs1))  (length qs1) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)", "using calculate_data_satisfies_properties"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n\ngoal (1 subgoal):\n 1. all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)", "using nontriv1 nonzero pairwise_rel_prime1 nonzero satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  0 < length qs1\n  p \\<noteq> 0\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  p \\<noteq> 0\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)", "by auto"], ["proof (state)\nthis:\n  all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)", "have well_def_subsets1: \"(\\<And>l i. l \\<in> set (get_subsets(calculate_data p qs1)) \\<Longrightarrow> i \\<in> set l \\<Longrightarrow> i < (length qs1))\""], ["proof (prove)\nusing this:\n  all_list_constr (get_subsets (calculate_data p qs1)) (length qs1)\n\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>l \\<in> set (get_subsets (calculate_data p qs1));\n        i \\<in> set l\\<rbrakk>\n       \\<Longrightarrow> i < length qs1", "unfolding all_list_constr_def list_constr_def"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     List.member (get_subsets (calculate_data p qs1)) x \\<longrightarrow>\n     list_all (\\<lambda>x. x < length qs1) x\n\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>l \\<in> set (get_subsets (calculate_data p qs1));\n        i \\<in> set l\\<rbrakk>\n       \\<Longrightarrow> i < length qs1", "using in_set_member"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     List.member (get_subsets (calculate_data p qs1)) x \\<longrightarrow>\n     list_all (\\<lambda>x. x < length qs1) x\n  (?x \\<in> set ?xs) = List.member ?xs ?x\n\ngoal (1 subgoal):\n 1. \\<And>l i.\n       \\<lbrakk>l \\<in> set (get_subsets (calculate_data p qs1));\n        i \\<in> set l\\<rbrakk>\n       \\<Longrightarrow> i < length qs1", "by (metis in_set_conv_nth list_all_length)"], ["proof (state)\nthis:\n  \\<lbrakk>?l \\<in> set (get_subsets (calculate_data p qs1));\n   ?i \\<in> set ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < length qs1\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have extra_matrix_same: \"matrix_A (signs_smash (get_signs (calculate_data p qs1)) (get_signs (calculate_data p qs2)))\n         (subsets_smash (length qs1) (get_subsets(calculate_data p qs1)) (get_subsets (calculate_data p qs2))) \n        = kronecker_product (get_matrix (calculate_data p qs1)) (get_matrix (calculate_data p qs2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M_mat\n     (signs_smash (get_signs (calculate_data p qs1))\n       (get_signs (calculate_data p qs2)))\n     (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n       (get_subsets (calculate_data p qs2))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "using  well_def_signs1 well_def_subsets1"], ["proof (prove)\nusing this:\n  ?j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n  length ?j = length qs1\n  \\<lbrakk>?l \\<in> set (get_subsets (calculate_data p qs1));\n   ?i \\<in> set ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < length qs1\n\ngoal (1 subgoal):\n 1. M_mat\n     (signs_smash (get_signs (calculate_data p qs1))\n       (get_signs (calculate_data p qs2)))\n     (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n       (get_subsets (calculate_data p qs2))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "using matrix_construction_is_kronecker_product"], ["proof (prove)\nusing this:\n  ?j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n  length ?j = length qs1\n  \\<lbrakk>?l \\<in> set (get_subsets (calculate_data p qs1));\n   ?i \\<in> set ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < length qs1\n  \\<lbrakk>\\<And>l i.\n              \\<lbrakk>l \\<in> set ?subs1.0; i \\<in> set l\\<rbrakk>\n              \\<Longrightarrow> i < ?n1.0;\n   \\<And>j.\n      j \\<in> set ?signs1.0 \\<Longrightarrow> length j = ?n1.0\\<rbrakk>\n  \\<Longrightarrow> M_mat (signs_smash ?signs1.0 ?signs2.0)\n                     (subsets_smash ?n1.0 ?subs1.0 ?subs2.0) =\n                    kronecker_product (M_mat ?signs1.0 ?subs1.0)\n                     (M_mat ?signs2.0 ?subs2.0)\n\ngoal (1 subgoal):\n 1. M_mat\n     (signs_smash (get_signs (calculate_data p qs1))\n       (get_signs (calculate_data p qs2)))\n     (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n       (get_subsets (calculate_data p qs2))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "using calculate_data_satisfies_properties nontriv1 nontriv2 nonzero pairwise_rel_prime1 pairwise_rel_prime2 nonzero satisfies_properties_def"], ["proof (prove)\nusing this:\n  ?j \\<in> set (get_signs (calculate_data p qs1)) \\<Longrightarrow>\n  length ?j = length qs1\n  \\<lbrakk>?l \\<in> set (get_subsets (calculate_data p qs1));\n   ?i \\<in> set ?l\\<rbrakk>\n  \\<Longrightarrow> ?i < length qs1\n  \\<lbrakk>\\<And>l i.\n              \\<lbrakk>l \\<in> set ?subs1.0; i \\<in> set l\\<rbrakk>\n              \\<Longrightarrow> i < ?n1.0;\n   \\<And>j.\n      j \\<in> set ?signs1.0 \\<Longrightarrow> length j = ?n1.0\\<rbrakk>\n  \\<Longrightarrow> M_mat (signs_smash ?signs1.0 ?signs2.0)\n                     (subsets_smash ?n1.0 ?subs1.0 ?subs2.0) =\n                    kronecker_product (M_mat ?signs1.0 ?subs1.0)\n                     (M_mat ?signs2.0 ?subs2.0)\n  ?p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime ?p q) \\<longrightarrow>\n  satisfies_properties ?p ?qs (get_subsets (calculate_data ?p ?qs))\n   (get_signs (calculate_data ?p ?qs)) (get_matrix (calculate_data ?p ?qs))\n  0 < length qs1\n  0 < length qs2\n  p \\<noteq> 0\n  \\<forall>q. List.member qs1 q \\<longrightarrow> coprime p q\n  \\<forall>q. List.member qs2 q \\<longrightarrow> coprime p q\n  p \\<noteq> 0\n  satisfies_properties ?p ?qs ?subsets ?signs ?matrix =\n  (all_list_constr ?subsets (length ?qs) \\<and>\n   well_def_signs (length ?qs) ?signs \\<and>\n   distinct ?signs \\<and>\n   satisfy_equation ?p ?qs ?subsets ?signs \\<and>\n   invertible_mat ?matrix \\<and>\n   ?matrix = M_mat ?signs ?subsets \\<and>\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n   \\<subseteq> set ?signs)\n\ngoal (1 subgoal):\n 1. M_mat\n     (signs_smash (get_signs (calculate_data p qs1))\n       (get_signs (calculate_data p qs2)))\n     (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n       (get_subsets (calculate_data p qs2))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "by auto"], ["proof (state)\nthis:\n  M_mat\n   (signs_smash (get_signs (calculate_data p qs1))\n     (get_signs (calculate_data p qs2)))\n   (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n     (get_subsets (calculate_data p qs2))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  M_mat\n   (signs_smash (get_signs (calculate_data p qs1))\n     (get_signs (calculate_data p qs2)))\n   (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n     (get_subsets (calculate_data p qs2))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))", "have matrix_same: \"matrix_A ?signs ?subsets = kronecker_product (get_matrix (calculate_data p qs1)) (get_matrix (calculate_data p qs2))\""], ["proof (prove)\nusing this:\n  M_mat\n   (signs_smash (get_signs (calculate_data p qs1))\n     (get_signs (calculate_data p qs2)))\n   (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n     (get_subsets (calculate_data p qs2))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2)))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "using clear_signs clear_subsets"], ["proof (prove)\nusing this:\n  M_mat\n   (signs_smash (get_signs (calculate_data p qs1))\n     (get_signs (calculate_data p qs2)))\n   (subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n     (get_subsets (calculate_data p qs2))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))\n  signs_smash (get_signs (calculate_data p qs1))\n   (get_signs (calculate_data p qs2)) =\n  get_signs\n   (snd (combine_systems p (qs1, calculate_data p qs1)\n          (qs2, calculate_data p qs2)))\n  subsets_smash (length qs1) (get_subsets (calculate_data p qs1))\n   (get_subsets (calculate_data p qs2)) =\n  get_subsets\n   (snd (combine_systems p (qs1, calculate_data p qs1)\n          (qs2, calculate_data p qs2)))\n\ngoal (1 subgoal):\n 1. M_mat\n     (get_signs\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2))))\n     (get_subsets\n       (snd (combine_systems p (qs1, calculate_data p qs1)\n              (qs2, calculate_data p qs2)))) =\n    kronecker_product (get_matrix (calculate_data p qs1))\n     (get_matrix (calculate_data p qs2))", "by simp"], ["proof (state)\nthis:\n  M_mat\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "have comb_sys_h: \"snd(snd(reduce_system p (combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2)))) =\n      snd(snd(reduce_system p (qs1@qs2, (matrix_A ?signs ?subsets, (?subsets, ?signs)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (reduce_system p\n               (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2)))) =\n    snd (snd (reduce_system p\n               (qs1 @ qs2,\n                M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2)))),\n                get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))),\n                get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))))", "unfolding get_signs_def get_subsets_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd (reduce_system p\n               (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2)))) =\n    snd (snd (reduce_system p\n               (qs1 @ qs2,\n                M_mat\n                 (snd (snd (snd (combine_systems p\n                                  (qs1, calculate_data p qs1)\n                                  (qs2, calculate_data p qs2)))))\n                 (fst (snd (snd (combine_systems p\n                                  (qs1, calculate_data p qs1)\n                                  (qs2, calculate_data p qs2))))),\n                fst (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                                (qs2, calculate_data p qs2)))),\n                snd (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                                (qs2, calculate_data p qs2)))))))", "using matrix_same"], ["proof (prove)\nusing this:\n  M_mat\n   (get_signs\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2))))\n   (get_subsets\n     (snd (combine_systems p (qs1, calculate_data p qs1)\n            (qs2, calculate_data p qs2)))) =\n  kronecker_product (get_matrix (calculate_data p qs1))\n   (get_matrix (calculate_data p qs2))\n\ngoal (1 subgoal):\n 1. snd (snd (reduce_system p\n               (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2)))) =\n    snd (snd (reduce_system p\n               (qs1 @ qs2,\n                M_mat\n                 (snd (snd (snd (combine_systems p\n                                  (qs1, calculate_data p qs1)\n                                  (qs2, calculate_data p qs2)))))\n                 (fst (snd (snd (combine_systems p\n                                  (qs1, calculate_data p qs1)\n                                  (qs2, calculate_data p qs2))))),\n                fst (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                                (qs2, calculate_data p qs2)))),\n                snd (snd (snd (combine_systems p (qs1, calculate_data p qs1)\n                                (qs2, calculate_data p qs2)))))))", "by (smt combining_to_smash get_signs_def get_subsets_def getter_functions prod.collapse prod.inject smash_systems_def)"], ["proof (state)\nthis:\n  snd (snd (reduce_system p\n             (combine_systems p (qs1, calculate_data p qs1)\n               (qs2, calculate_data p qs2)))) =\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  snd (snd (reduce_system p\n             (combine_systems p (qs1, calculate_data p qs1)\n               (qs2, calculate_data p qs2)))) =\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))))", "have extra_h: \" snd(snd(reduce_system p (qs1@qs2, (matrix_A ?signs ?subsets, (?subsets, ?signs))))) = \n      snd(snd(reduction_step (matrix_A ?signs ?subsets) ?signs ?subsets (solve_for_lhs p (qs1@qs2) ?subsets (matrix_A ?signs ?subsets)))) \""], ["proof (prove)\nusing this:\n  snd (snd (reduce_system p\n             (combine_systems p (qs1, calculate_data p qs1)\n               (qs2, calculate_data p qs2)))) =\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. snd (snd (reduce_system p\n               (qs1 @ qs2,\n                M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2)))),\n                get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))),\n                get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))) =\n    snd (snd (reduction_step\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2)))))\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (solve_for_lhs p (qs1 @ qs2)\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (M_mat\n                   (get_signs\n                     (snd (combine_systems p (qs1, calculate_data p qs1)\n                            (qs2, calculate_data p qs2))))\n                   (get_subsets\n                     (snd (combine_systems p (qs1, calculate_data p qs1)\n                            (qs2, calculate_data p qs2))))))))", "by simp"], ["proof (state)\nthis:\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2)))))) =\n  snd (snd (reduction_step\n             (M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))\n             (get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (solve_for_lhs p (qs1 @ qs2)\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2)))))) =\n  snd (snd (reduction_step\n             (M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))\n             (get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (solve_for_lhs p (qs1 @ qs2)\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))))))", "have same_h: \"set(snd(snd(reduce_system p (combine_systems p (qs1,calculate_data p qs1) (qs2,calculate_data p qs2))))) \n      = set (reduction_signs p (qs1@qs2) ?signs ?subsets  (matrix_A ?signs ?subsets ))\""], ["proof (prove)\nusing this:\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2)))))) =\n  snd (snd (reduction_step\n             (M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))\n             (get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (solve_for_lhs p (qs1 @ qs2)\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (reduction_signs p (qs1 @ qs2)\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (M_mat\n            (get_signs\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))))", "using comb_sys_h"], ["proof (prove)\nusing this:\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2)))))) =\n  snd (snd (reduction_step\n             (M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))\n             (get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (solve_for_lhs p (qs1 @ qs2)\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))))))\n  snd (snd (reduce_system p\n             (combine_systems p (qs1, calculate_data p qs1)\n               (qs2, calculate_data p qs2)))) =\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (reduction_signs p (qs1 @ qs2)\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (M_mat\n            (get_signs\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))\n            (get_subsets\n              (snd (combine_systems p (qs1, calculate_data p qs1)\n                     (qs2, calculate_data p qs2))))))", "unfolding reduction_signs_def"], ["proof (prove)\nusing this:\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2)))))) =\n  snd (snd (reduction_step\n             (M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))))\n             (get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))\n             (solve_for_lhs p (qs1 @ qs2)\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (M_mat\n                 (get_signs\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))\n                 (get_subsets\n                   (snd (combine_systems p (qs1, calculate_data p qs1)\n                          (qs2, calculate_data p qs2))))))))\n  snd (snd (reduce_system p\n             (combine_systems p (qs1, calculate_data p qs1)\n               (qs2, calculate_data p qs2)))) =\n  snd (snd (reduce_system p\n             (qs1 @ qs2,\n              M_mat\n               (get_signs\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2))))\n               (get_subsets\n                 (snd (combine_systems p (qs1, calculate_data p qs1)\n                        (qs2, calculate_data p qs2)))),\n              get_subsets\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))),\n              get_signs\n               (snd (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (take_indices\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (find_nonzeros_from_input_vec\n            (solve_for_lhs p (qs1 @ qs2)\n              (get_subsets\n                (snd (combine_systems p (qs1, calculate_data p qs1)\n                       (qs2, calculate_data p qs2))))\n              (M_mat\n                (get_signs\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))\n                (get_subsets\n                  (snd (combine_systems p (qs1, calculate_data p qs1)\n                         (qs2, calculate_data p qs2))))))))", "by (metis get_signs_def help_h reduction_signs_is_get_signs)"], ["proof (state)\nthis:\n  set (snd (snd (reduce_system p\n                  (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "then"], ["proof (chain)\npicking this:\n  set (snd (snd (reduce_system p\n                  (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))", "show ?thesis"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "using h"], ["proof (prove)\nusing this:\n  set (snd (snd (reduce_system p\n                  (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2)) =\n  set (reduction_signs p (qs1 @ qs2)\n        (get_signs\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (get_subsets\n          (snd (combine_systems p (qs1, calculate_data p qs1)\n                 (qs2, calculate_data p qs2))))\n        (M_mat\n          (get_signs\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))\n          (get_subsets\n            (snd (combine_systems p (qs1, calculate_data p qs1)\n                   (qs2, calculate_data p qs2))))))\n\ngoal (1 subgoal):\n 1. set (snd (snd (reduce_system p\n                    (combine_systems p (qs1, calculate_data p qs1)\n                      (qs2, calculate_data p qs2))))) =\n    set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))", "by blast"], ["proof (state)\nthis:\n  set (snd (snd (reduce_system p\n                  (combine_systems p (qs1, calculate_data p qs1)\n                    (qs2, calculate_data p qs2))))) =\n  set (characterize_consistent_signs_at_roots_copr p (qs1 @ qs2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_consistent_signs_at_roots_1:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  shows \"(p \\<noteq> 0 \\<and> length qs > 0 \\<and>\n    (\\<forall>q. ((List.member qs q) \\<longrightarrow> (coprime p q)))) \\<longrightarrow> \n    set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof (induction \"length qs\" arbitrary: qs rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           set (find_consistent_signs_at_roots p qsa) =\n           set (characterize_consistent_signs_at_roots_copr p\n                 qsa)) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       set (find_consistent_signs_at_roots p qs) =\n       set (characterize_consistent_signs_at_roots_copr p qs)", "case less"], ["proof (state)\nthis:\n  length ?qs < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p ?qs) =\n  set (characterize_consistent_signs_at_roots_copr p ?qs)\n\ngoal (1 subgoal):\n 1. \\<And>qs.\n       (\\<And>qsa.\n           length qsa < length qs \\<Longrightarrow>\n           p \\<noteq> 0 \\<and>\n           0 < length qsa \\<and>\n           (\\<forall>q.\n               List.member qsa q \\<longrightarrow>\n               coprime p q) \\<longrightarrow>\n           set (find_consistent_signs_at_roots p qsa) =\n           set (characterize_consistent_signs_at_roots_copr p\n                 qsa)) \\<Longrightarrow>\n       p \\<noteq> 0 \\<and>\n       0 < length qs \\<and>\n       (\\<forall>q.\n           List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n       set (find_consistent_signs_at_roots p qs) =\n       set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  length ?qs < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p ?qs) =\n  set (characterize_consistent_signs_at_roots_copr p ?qs)", "show ?case"], ["proof (prove)\nusing this:\n  length ?qs < length qs \\<Longrightarrow>\n  p \\<noteq> 0 \\<and>\n  0 < length ?qs \\<and>\n  (\\<forall>q.\n      List.member ?qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p ?qs) =\n  set (characterize_consistent_signs_at_roots_copr p ?qs)\n\ngoal (1 subgoal):\n 1. p \\<noteq> 0 \\<and>\n    0 < length qs \\<and>\n    (\\<forall>q.\n        List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n    set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "assume ind_hyp: \"(\\<And>qsa.\n        length qsa < length qs \\<Longrightarrow> qsa \\<noteq> [] \\<and> (\\<forall>q. List.member qsa q \\<longrightarrow> coprime p q) \\<longrightarrow>\n        set (find_consistent_signs_at_roots p qsa) =\n        set (characterize_consistent_signs_at_roots_copr p qsa))\""], ["proof (state)\nthis:\n  length ?qsa < length qs \\<Longrightarrow>\n  ?qsa \\<noteq> [] \\<and>\n  (\\<forall>q.\n      List.member ?qsa q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p ?qsa) =\n  set (characterize_consistent_signs_at_roots_copr p ?qsa)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "assume nonzero: \"p \\<noteq> 0\""], ["proof (state)\nthis:\n  p \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "assume nontriv: \"qs \\<noteq> []\""], ["proof (state)\nthis:\n  qs \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "assume copr:\" \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\""], ["proof (state)\nthis:\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "let ?len = \"length qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "let ?q1 = \"take ((?len) div 2) qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "let ?left = \"calculate_data p ?q1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "let ?q2 = \"drop ((?len) div 2) qs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "let ?right = \"calculate_data p ?q2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have nontriv_q1: \"length qs>1 \\<longrightarrow> length ?q1 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have qs_more_q1: \"length qs>1 \\<longrightarrow> length qs > length ?q1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    length (take (length qs div 2) qs) < length qs", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  length (take (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have pairwise_rel_prime_q1: \"\\<forall>q. ((List.member ?q1 q) \\<longrightarrow> (coprime p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       List.member (take (length qs div 2) qs) q \\<longrightarrow>\n       coprime p q", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (take (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (take (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "assume mem: \"List.member (take (length qs div 2) qs) q\""], ["proof (state)\nthis:\n  List.member (take (length qs div 2) qs) q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (take (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "have \"List.member qs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member qs q", "using mem set_take_subset[where n = \"length qs div 2\"]"], ["proof (prove)\nusing this:\n  List.member (take (length qs div 2) qs) q\n  set (take (length qs div 2) ?xs) \\<subseteq> set ?xs\n\ngoal (1 subgoal):\n 1. List.member qs q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>List.member (take (length qs div 2) qs) q;\n     \\<And>xs. set (take (length qs div 2) xs) \\<subseteq> set xs\\<rbrakk>\n    \\<Longrightarrow> List.member qs q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member qs q", "by (meson \\<open>List.member (take (length qs div 2) qs) q\\<close> in_set_member in_set_takeD)"], ["proof (state)\nthis:\n  List.member qs q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  List.member qs q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (take (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "then"], ["proof (chain)\npicking this:\n  List.member qs q", "show \"coprime p q\""], ["proof (prove)\nusing this:\n  List.member qs q\n\ngoal (1 subgoal):\n 1. coprime p q", "using copr"], ["proof (prove)\nusing this:\n  List.member qs q\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. coprime p q", "by blast"], ["proof (state)\nthis:\n  coprime p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have nontriv_q2: \"length qs>1 \\<longrightarrow>length ?q2 > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have qs_more_q2: \"length qs>1 \\<longrightarrow> length qs > length ?q2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    length (drop (length qs div 2) qs) < length qs", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have pairwise_rel_prime_q2: \"\\<forall>q. ((List.member ?q2 q) \\<longrightarrow> (coprime p q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>q.\n       List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n       coprime p q", "proof clarsimp"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (drop (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "fix q"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (drop (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "assume mem: \"List.member (drop (length qs div 2) qs) q\""], ["proof (state)\nthis:\n  List.member (drop (length qs div 2) qs) q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (drop (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "have \"List.member qs q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member qs q", "using mem set_take_subset[where n = \"length qs div 2\"]"], ["proof (prove)\nusing this:\n  List.member (drop (length qs div 2) qs) q\n  set (take (length qs div 2) ?xs) \\<subseteq> set ?xs\n\ngoal (1 subgoal):\n 1. List.member qs q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>List.member (drop (length qs div 2) qs) q;\n     \\<And>xs. set (take (length qs div 2) xs) \\<subseteq> set xs\\<rbrakk>\n    \\<Longrightarrow> List.member qs q", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. List.member qs q", "by (meson \\<open>List.member (drop (length qs div 2) qs) q\\<close> in_set_dropD in_set_member)"], ["proof (state)\nthis:\n  List.member qs q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  List.member qs q\n\ngoal (1 subgoal):\n 1. \\<And>q.\n       List.member (drop (length qs div 2) qs) q \\<Longrightarrow>\n       coprime p q", "then"], ["proof (chain)\npicking this:\n  List.member qs q", "show \"coprime p q\""], ["proof (prove)\nusing this:\n  List.member qs q\n\ngoal (1 subgoal):\n 1. coprime p q", "using copr"], ["proof (prove)\nusing this:\n  List.member qs q\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. coprime p q", "by blast"], ["proof (state)\nthis:\n  coprime p q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow> coprime p q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "have key_h: \"set (snd (snd (if ?len \\<le> Suc 0 then reduce_system p (qs, base_case_info)\n                        else   Let (combine_systems p (?q1, ?left) (?q2, ?right))\n                                  (reduce_system p)))) =\n       set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h_len1 : \"?len = 1 \\<longrightarrow> set (snd (snd (if ?len \\<le> Suc 0 then reduce_system p (qs, base_case_info)\n                        else   Let (combine_systems p (?q1, ?left) (?q2, ?right))\n                                  (reduce_system p)))) =\n       set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length qs = 1 \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using find_consistent_signs_at_roots_len1[of p qs] copr nonzero nontriv"], ["proof (prove)\nusing this:\n  \\<lbrakk>p \\<noteq> 0; length qs = 1;\n   \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n  \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                    set (characterize_consistent_signs_at_roots_copr p qs)\n  \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\n  p \\<noteq> 0\n  qs \\<noteq> []\n\ngoal (1 subgoal):\n 1. length qs = 1 \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (simp add: find_consistent_signs_at_roots_thm)"], ["proof (state)\nthis:\n  length qs = 1 \\<longrightarrow>\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h_len_gt1 : \"?len > 1 \\<longrightarrow> set (snd (snd (if ?len \\<le> Suc 0 then reduce_system p (qs, base_case_info)\n                        else   Let (combine_systems p (?q1, ?left) (?q2, ?right))\n                                  (reduce_system p)))) =\n       set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h_imp_a: \"?len > 1 \\<longrightarrow> set (snd (snd (reduce_system p (combine_systems p (?q1, ?left) (?q2, ?right))))) =\n              set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h1: \"?len > 1 \\<longrightarrow> set(snd(snd(?left))) = set (characterize_consistent_signs_at_roots_copr p ?q1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (calculate_data p (take (length qs div 2) qs)))) =\n    set (characterize_consistent_signs_at_roots_copr p\n          (take (length qs div 2) qs))", "using nontriv_q1 pairwise_rel_prime_q1 ind_hyp[of ?q1] qs_more_q1"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow> coprime p q\n  length (take (length qs div 2) qs) < length qs \\<Longrightarrow>\n  take (length qs div 2) qs \\<noteq> [] \\<and>\n  (\\<forall>q.\n      List.member (take (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p (take (length qs div 2) qs)) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (take (length qs div 2) qs))\n  1 < length qs \\<longrightarrow>\n  length (take (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (calculate_data p (take (length qs div 2) qs)))) =\n    set (characterize_consistent_signs_at_roots_copr p\n          (take (length qs div 2) qs))", "by (metis find_consistent_signs_at_roots_thm less_numeral_extra(3) list.size(3))"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (calculate_data p (take (length qs div 2) qs)))) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (take (length qs div 2) qs))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "have h2: \"?len > 1 \\<longrightarrow> set(snd(snd(?right))) = set (characterize_consistent_signs_at_roots_copr p ?q2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (calculate_data p (drop (length qs div 2) qs)))) =\n    set (characterize_consistent_signs_at_roots_copr p\n          (drop (length qs div 2) qs))", "using nontriv_q2 pairwise_rel_prime_q2 ind_hyp[of ?q2] qs_more_q2"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow> coprime p q\n  length (drop (length qs div 2) qs) < length qs \\<Longrightarrow>\n  drop (length qs div 2) qs \\<noteq> [] \\<and>\n  (\\<forall>q.\n      List.member (drop (length qs div 2) qs) q \\<longrightarrow>\n      coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p (drop (length qs div 2) qs)) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (drop (length qs div 2) qs))\n  1 < length qs \\<longrightarrow>\n  length (drop (length qs div 2) qs) < length qs\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (calculate_data p (drop (length qs div 2) qs)))) =\n    set (characterize_consistent_signs_at_roots_copr p\n          (drop (length qs div 2) qs))", "by (metis (full_types) find_consistent_signs_at_roots_thm list.size(3) not_less_zero)"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (calculate_data p (drop (length qs div 2) qs)))) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (drop (length qs div 2) qs))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using nonzero nontriv_q1 pairwise_rel_prime_q1 nontriv_q2 pairwise_rel_prime_q2 h1 h2\n              smaller_sys_are_good"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  1 < length qs \\<longrightarrow> 0 < length (take (length qs div 2) qs)\n  \\<forall>q.\n     List.member (take (length qs div 2) qs) q \\<longrightarrow> coprime p q\n  1 < length qs \\<longrightarrow> 0 < length (drop (length qs div 2) qs)\n  \\<forall>q.\n     List.member (drop (length qs div 2) qs) q \\<longrightarrow> coprime p q\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (calculate_data p (take (length qs div 2) qs)))) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (take (length qs div 2) qs))\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (calculate_data p (drop (length qs div 2) qs)))) =\n  set (characterize_consistent_signs_at_roots_copr p\n        (drop (length qs div 2) qs))\n  \\<lbrakk>?p \\<noteq> 0; 0 < length ?qs1.0;\n   \\<forall>q. List.member ?qs1.0 q \\<longrightarrow> coprime ?p q;\n   0 < length ?qs2.0;\n   \\<forall>q. List.member ?qs2.0 q \\<longrightarrow> coprime ?p q;\n   set (find_consistent_signs_at_roots ?p ?qs1.0) =\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs1.0);\n   set (find_consistent_signs_at_roots ?p ?qs2.0) =\n   set (characterize_consistent_signs_at_roots_copr ?p ?qs2.0)\\<rbrakk>\n  \\<Longrightarrow> set (snd (snd (reduce_system ?p\n                                    (combine_systems ?p\n(?qs1.0, calculate_data ?p ?qs1.0) (?qs2.0, calculate_data ?p ?qs2.0))))) =\n                    set (characterize_consistent_signs_at_roots_copr ?p\n                          (?qs1.0 @ ?qs2.0))\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (reduce_system p\n                    (combine_systems p\n                      (take (length qs div 2) qs,\n                       calculate_data p (take (length qs div 2) qs))\n                      (drop (length qs div 2) qs,\n                       calculate_data p (drop (length qs div 2) qs)))))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (metis append_take_drop_id find_consistent_signs_at_roots_thm)"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (reduce_system p\n                  (combine_systems p\n                    (take (length qs div 2) qs,\n                     calculate_data p (take (length qs div 2) qs))\n                    (drop (length qs div 2) qs,\n                     calculate_data p (drop (length qs div 2) qs)))))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (reduce_system p\n                  (combine_systems p\n                    (take (length qs div 2) qs,\n                     calculate_data p (take (length qs div 2) qs))\n                    (drop (length qs div 2) qs,\n                     calculate_data p (drop (length qs div 2) qs)))))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (reduce_system p\n                  (combine_systems p\n                    (take (length qs div 2) qs,\n                     calculate_data p (take (length qs div 2) qs))\n                    (drop (length qs div 2) qs,\n                     calculate_data p (drop (length qs div 2) qs)))))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "have h_imp: \"?len > 1 \\<longrightarrow> set (snd (snd (Let (combine_systems p (?q1, ?left) (?q2, ?right))\n                                  (reduce_system p)))) =\n       set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (reduce_system p\n                  (combine_systems p\n                    (take (length qs div 2) qs,\n                     calculate_data p (take (length qs div 2) qs))\n                    (drop (length qs div 2) qs,\n                     calculate_data p (drop (length qs div 2) qs)))))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (Let (combine_systems p\n                         (take (length qs div 2) qs,\n                          calculate_data p (take (length qs div 2) qs))\n                         (drop (length qs div 2) qs,\n                          calculate_data p (drop (length qs div 2) qs)))\n                    (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (Let (combine_systems p\n                       (take (length qs div 2) qs,\n                        calculate_data p (take (length qs div 2) qs))\n                       (drop (length qs div 2) qs,\n                        calculate_data p (drop (length qs div 2) qs)))\n                  (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (Let (combine_systems p\n                       (take (length qs div 2) qs,\n                        calculate_data p (take (length qs div 2) qs))\n                       (drop (length qs div 2) qs,\n                        calculate_data p (drop (length qs div 2) qs)))\n                  (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\nusing this:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (Let (combine_systems p\n                       (take (length qs div 2) qs,\n                        calculate_data p (take (length qs div 2) qs))\n                       (drop (length qs div 2) qs,\n                        calculate_data p (drop (length qs div 2) qs)))\n                  (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. 1 < length qs \\<longrightarrow>\n    set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by auto"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "using h_len1 h_len_gt1"], ["proof (prove)\nusing this:\n  length qs = 1 \\<longrightarrow>\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n  1 < length qs \\<longrightarrow>\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (snd (snd (if length qs \\<le> Suc 0\n                   then reduce_system p (qs, base_case_info)\n                   else Let (combine_systems p\n                              (take (length qs div 2) qs,\n                               calculate_data p (take (length qs div 2) qs))\n                              (drop (length qs div 2) qs,\n                               calculate_data p\n                                (drop (length qs div 2) qs)))\n                         (reduce_system p)))) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (meson \\<open>qs \\<noteq> []\\<close> length_0_conv less_one nat_neq_iff)"], ["proof (state)\nthis:\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>qs.\n                length qs < length qs \\<Longrightarrow>\n                qs \\<noteq> [] \\<and>\n                (\\<forall>q.\n                    List.member qs q \\<longrightarrow>\n                    coprime p q) \\<longrightarrow>\n                set (find_consistent_signs_at_roots p qs) =\n                set (characterize_consistent_signs_at_roots_copr p qs);\n     p \\<noteq> 0; qs \\<noteq> [];\n     \\<forall>q. List.member qs q \\<longrightarrow> coprime p q\\<rbrakk>\n    \\<Longrightarrow> set (find_consistent_signs_at_roots p qs) =\n                      set (characterize_consistent_signs_at_roots_copr p qs)", "then"], ["proof (chain)\npicking this:\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)", "show \"set (find_consistent_signs_at_roots p qs) = set (characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\nusing this:\n  set (snd (snd (if length qs \\<le> Suc 0\n                 then reduce_system p (qs, base_case_info)\n                 else Let (combine_systems p\n                            (take (length qs div 2) qs,\n                             calculate_data p (take (length qs div 2) qs))\n                            (drop (length qs div 2) qs,\n                             calculate_data p (drop (length qs div 2) qs)))\n                       (reduce_system p)))) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (smt One_nat_def calculate_data.simps find_consistent_signs_at_roots_thm length_0_conv nontriv)"], ["proof (state)\nthis:\n  set (find_consistent_signs_at_roots p qs) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p \\<noteq> 0 \\<and>\n  0 < length qs \\<and>\n  (\\<forall>q.\n      List.member qs q \\<longrightarrow> coprime p q) \\<longrightarrow>\n  set (find_consistent_signs_at_roots p qs) =\n  set (characterize_consistent_signs_at_roots_copr p qs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_consistent_signs_at_roots_0:\n  fixes p:: \"real poly\"\n  assumes \"p \\<noteq> 0\"\n  shows \"set(find_consistent_signs_at_roots p []) =\n         set(characterize_consistent_signs_at_roots_copr p [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "obtain a b c where abc: \"reduce_system p ([1], base_case_info) = (a,b,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c.\n        reduce_system p ([1], base_case_info) = (a, b, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>a b c.\n        reduce_system p ([1], base_case_info) = (a, b, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  reduce_system p ([1], base_case_info) = (a, b, c)\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "have \"find_consistent_signs_at_roots p [1] = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. find_consistent_signs_at_roots p [1] = c", "using abc"], ["proof (prove)\nusing this:\n  reduce_system p ([1], base_case_info) = (a, b, c)\n\ngoal (1 subgoal):\n 1. find_consistent_signs_at_roots p [1] = c", "by (simp add: find_consistent_signs_at_roots_thm)"], ["proof (state)\nthis:\n  find_consistent_signs_at_roots p [1] = c\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "have *: \"set (find_consistent_signs_at_roots p [1]) = set (characterize_consistent_signs_at_roots_copr p [1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p [1]) =\n    set (characterize_consistent_signs_at_roots_copr p [1])", "apply (subst find_consistent_signs_at_roots_1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. p \\<noteq> 0 \\<and>\n    0 < length [1] \\<and>\n    (\\<forall>q. List.member [1] q \\<longrightarrow> coprime p q)\n 2. set (characterize_consistent_signs_at_roots_copr p [1]) =\n    set (characterize_consistent_signs_at_roots_copr p [1])", "using assms"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n\ngoal (2 subgoals):\n 1. p \\<noteq> 0 \\<and>\n    0 < length [1] \\<and>\n    (\\<forall>q. List.member [1] q \\<longrightarrow> coprime p q)\n 2. set (characterize_consistent_signs_at_roots_copr p [1]) =\n    set (characterize_consistent_signs_at_roots_copr p [1])", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q.\n       \\<lbrakk>p \\<noteq> 0; List.member [1] q\\<rbrakk>\n       \\<Longrightarrow> coprime p q", "by (simp add: member_rec(1) member_rec(2))"], ["proof (state)\nthis:\n  set (find_consistent_signs_at_roots p [1]) =\n  set (characterize_consistent_signs_at_roots_copr p [1])\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "have \"set(characterize_consistent_signs_at_roots_copr p []) = drop 1 ` set(characterize_consistent_signs_at_roots_copr p [1])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (characterize_consistent_signs_at_roots_copr p []) =\n    drop 1 ` set (characterize_consistent_signs_at_roots_copr p [1])", "unfolding characterize_consistent_signs_at_roots_copr_def consistent_sign_vec_copr_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. set (remdups\n          (map (\\<lambda>x.\n                   map (\\<lambda>q. if 0 < poly q x then 1 else - 1) [])\n            (characterize_root_list_p p))) =\n    drop 1 `\n    set (remdups\n          (map (\\<lambda>x.\n                   map (\\<lambda>q. if 0 < poly q x then 1 else - 1) [1])\n            (characterize_root_list_p p)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. []) ` set (characterize_root_list_p p) =\n    drop (Suc 0) ` (\\<lambda>x. [1]) ` set (characterize_root_list_p p)", "by (smt drop0 drop_Suc_Cons image_cong image_image)"], ["proof (state)\nthis:\n  set (characterize_consistent_signs_at_roots_copr p []) =\n  drop 1 ` set (characterize_consistent_signs_at_roots_copr p [1])\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "thus ?thesis"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p []) =\n  drop 1 ` set (characterize_consistent_signs_at_roots_copr p [1])\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "using abc *"], ["proof (prove)\nusing this:\n  set (characterize_consistent_signs_at_roots_copr p []) =\n  drop 1 ` set (characterize_consistent_signs_at_roots_copr p [1])\n  reduce_system p ([1], base_case_info) = (a, b, c)\n  set (find_consistent_signs_at_roots p [1]) =\n  set (characterize_consistent_signs_at_roots_copr p [1])\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p []) =\n    set (characterize_consistent_signs_at_roots_copr p [])", "apply (auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>set (characterize_consistent_signs_at_roots_copr p []) =\n                drop (Suc 0) `\n                set (characterize_consistent_signs_at_roots_copr p [1]);\n        reduce_system p ([1], base_case_info) = (a, b, c);\n        set (find_consistent_signs_at_roots p [1]) =\n        set (characterize_consistent_signs_at_roots_copr p [1]);\n        x \\<in> set (find_consistent_signs_at_roots p [])\\<rbrakk>\n       \\<Longrightarrow> x \\<in> drop (Suc 0) `\n                                 set (characterize_consistent_signs_at_roots_copr\n p [1])\n 2. \\<And>xa.\n       \\<lbrakk>set (characterize_consistent_signs_at_roots_copr p []) =\n                drop (Suc 0) `\n                set (characterize_consistent_signs_at_roots_copr p [1]);\n        reduce_system p ([1], base_case_info) = (a, b, c);\n        set (find_consistent_signs_at_roots p [1]) =\n        set (characterize_consistent_signs_at_roots_copr p [1]);\n        xa \\<in> set (characterize_consistent_signs_at_roots_copr p\n                       [1])\\<rbrakk>\n       \\<Longrightarrow> drop (Suc 0) xa\n                         \\<in> set (find_consistent_signs_at_roots p [])", "apply (simp add: find_consistent_signs_at_roots_thm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>set (characterize_consistent_signs_at_roots_copr p []) =\n                drop (Suc 0) `\n                set (characterize_consistent_signs_at_roots_copr p [1]);\n        reduce_system p ([1], base_case_info) = (a, b, c);\n        set (find_consistent_signs_at_roots p [1]) =\n        set (characterize_consistent_signs_at_roots_copr p [1]);\n        xa \\<in> set (characterize_consistent_signs_at_roots_copr p\n                       [1])\\<rbrakk>\n       \\<Longrightarrow> drop (Suc 0) xa\n                         \\<in> set (find_consistent_signs_at_roots p [])", "by (simp add: find_consistent_signs_at_roots_thm)"], ["proof (state)\nthis:\n  set (find_consistent_signs_at_roots p []) =\n  set (characterize_consistent_signs_at_roots_copr p [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma find_consistent_signs_at_roots_copr:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  assumes \"p \\<noteq> 0\"\n  assumes \"\\<And>q. q \\<in> set qs \\<Longrightarrow> coprime p q\"\n  shows \"set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots_copr p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots_copr p qs)", "by (metis assms find_consistent_signs_at_roots_0 find_consistent_signs_at_roots_1 in_set_member length_greater_0_conv)"], ["", "lemma find_consistent_signs_at_roots:\n  fixes p:: \"real poly\"\n  fixes qs :: \"real poly list\"\n  assumes \"p \\<noteq> 0\"\n  assumes \"\\<And>q. q \\<in> set qs \\<Longrightarrow> coprime p q\"\n  shows \"set(find_consistent_signs_at_roots p qs) = set(characterize_consistent_signs_at_roots p qs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots p qs)", "using assms find_consistent_signs_at_roots_copr csa_list_copr_rel"], ["proof (prove)\nusing this:\n  p \\<noteq> 0\n  ?q \\<in> set qs \\<Longrightarrow> coprime p ?q\n  \\<lbrakk>?p \\<noteq> 0;\n   \\<And>q. q \\<in> set ?qs \\<Longrightarrow> coprime ?p q\\<rbrakk>\n  \\<Longrightarrow> set (find_consistent_signs_at_roots ?p ?qs) =\n                    set (characterize_consistent_signs_at_roots_copr ?p ?qs)\n  \\<lbrakk>?p \\<noteq> 0;\n   \\<forall>q. List.member ?qs q \\<longrightarrow> coprime ?p q\\<rbrakk>\n  \\<Longrightarrow> characterize_consistent_signs_at_roots ?p ?qs =\n                    characterize_consistent_signs_at_roots_copr ?p ?qs\n\ngoal (1 subgoal):\n 1. set (find_consistent_signs_at_roots p qs) =\n    set (characterize_consistent_signs_at_roots p qs)", "by (simp add: in_set_member)"], ["", "end"]]}