{"file_name": "/home/qj213/afp-2021-10-22/thys/MiniML/Type.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MiniML", "problem_names": ["lemma free_tv_subst:\n  \"free_tv S = (dom S) Un (cod S)\"", "lemma mk_scheme_Fun [rule_format]: \"mk_scheme t = sch1 =-> sch2 \\<longrightarrow> (\\<exists>t1 t2. sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)\"", "lemma mk_scheme_injective [rule_format]: \"\\<forall>t'. mk_scheme t = mk_scheme t' \\<longrightarrow> t=t'\"", "lemma free_tv_mk_scheme: \"free_tv (mk_scheme t) = free_tv t\"", "lemma subst_mk_scheme: \"$ S (mk_scheme t) = mk_scheme ($ S t)\"", "lemma app_subst_Nil: \n  \"$ S [] = []\"", "lemma app_subst_Cons: \n  \"$ S (x#l) = ($ S x)#($ S l)\"", "lemma new_tv_TVar: \n  \"new_tv n (TVar m) = (m<n)\"", "lemma new_tv_FVar: \n  \"new_tv n (FVar m) = (m<n)\"", "lemma new_tv_BVar: \n  \"new_tv n (BVar m) = True\"", "lemma new_tv_Fun: \n  \"new_tv n (t1 -> t2) = (new_tv n t1 \\<and> new_tv n t2)\"", "lemma new_tv_Fun2: \n  \"new_tv n (t1 =-> t2) = (new_tv n t1 \\<and> new_tv n t2)\"", "lemma new_tv_Nil: \n  \"new_tv n []\"", "lemma new_tv_Cons: \n  \"new_tv n (x#l) = (new_tv n x \\<and> new_tv n l)\"", "lemma new_tv_TVar_subst: \"new_tv n TVar\"", "lemma new_tv_id_subst [simp]: \"new_tv n id_subst\"", "lemma new_if_subst_type_scheme [simp]: \"new_tv n (sch::type_scheme) \\<Longrightarrow>\n    $(\\<lambda>k. if k<n then S k else S' k) sch = $S sch\"", "lemma new_if_subst_type_scheme_list [simp]: \"new_tv n (A::type_scheme list) \\<Longrightarrow>\n    $(\\<lambda>k. if k<n then S k else S' k) A = $S A\"", "lemma dom_id_subst [simp]: \"dom id_subst = {}\"", "lemma cod_id_subst [simp]: \"cod id_subst = {}\"", "lemma free_tv_id_subst [simp]: \"free_tv id_subst = {}\"", "lemma free_tv_nth_A_impl_free_tv_A [rule_format, simp]:\n  \"\\<forall>n. n < length A \\<longrightarrow> x : free_tv (A!n) \\<longrightarrow> x : free_tv A\"", "lemma free_tv_nth_nat_A [rule_format]:\n  \"\\<forall>nat. nat < length A \\<longrightarrow> x : free_tv (A!nat) \\<longrightarrow> x : free_tv A\"", "lemma typ_substitutions_only_on_free_variables: \n  \"(\\<forall>x\\<in>free_tv t. (S x) = (S' x)) \\<Longrightarrow> $ S (t::typ) = $ S' t\"", "lemma eq_free_eq_subst_te: \"(\\<forall>n. n\\<in>(free_tv t) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $ S1 (t::typ) = $ S2 t\"", "lemma scheme_substitutions_only_on_free_variables:\n  \"(\\<forall>x\\<in>free_tv sch. (S x) = (S' x)) \\<Longrightarrow> $ S (sch::type_scheme) = $ S' sch\"", "lemma eq_free_eq_subst_type_scheme: \n  \"(\\<forall>n. n\\<in>(free_tv sch) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $ S1 (sch::type_scheme) = $ S2 sch\"", "lemma eq_free_eq_subst_scheme_list:\n  \"(\\<forall>n. n\\<in>(free_tv A) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $S1 (A::type_scheme list) = $S2 A\"", "lemma weaken_asm_Un: \"((\\<forall>x\\<in>A. (P x)) \\<longrightarrow> Q) \\<Longrightarrow> ((\\<forall>x\\<in>A \\<union> B. (P x)) \\<longrightarrow> Q)\"", "lemma scheme_list_substitutions_only_on_free_variables [rule_format]:\n  \"(\\<forall>x\\<in>free_tv A. (S x) = (S' x)) \\<longrightarrow> $ S (A::type_scheme list) = $ S' A\"", "lemma eq_subst_te_eq_free:\n  \"$ S1 (t::typ) = $ S2 t \\<Longrightarrow> n:(free_tv t) \\<Longrightarrow> S1 n = S2 n\"", "lemma eq_subst_type_scheme_eq_free [rule_format]: \n  \"$ S1 (sch::type_scheme) = $ S2 sch \\<longrightarrow> n:(free_tv sch) \\<longrightarrow> S1 n = S2 n\"", "lemma eq_subst_scheme_list_eq_free:\n  \"$S1 (A::type_scheme list) = $S2 A \\<Longrightarrow> n:(free_tv A) \\<Longrightarrow> S1 n = S2 n\"", "lemma codD: \"v : cod S \\<Longrightarrow> v : free_tv S\"", "lemma not_free_impl_id: \"x \\<notin> free_tv S \\<Longrightarrow> S x = TVar x\"", "lemma free_tv_le_new_tv: \"[| new_tv n t; m:free_tv t |] ==> m<n\"", "lemma cod_app_subst [simp]:\n  \"[| v : free_tv(S n); v\\<noteq>n |] ==> v : cod S\"", "lemma free_tv_subst_var: \"free_tv (S (v::nat)) \\<subseteq> insert v (cod S)\"", "lemma free_tv_app_subst_te: \"free_tv ($ S (t::typ)) \\<subseteq> cod S Un free_tv t\"", "lemma free_tv_app_subst_type_scheme:\n    \"free_tv ($ S (sch::type_scheme)) \\<subseteq> cod S Un free_tv sch\"", "lemma free_tv_app_subst_scheme_list: \"free_tv ($ S (A::type_scheme list)) \\<subseteq> cod S Un free_tv A\"", "lemma free_tv_comp_subst: \n  \"free_tv (\\<lambda>u::nat. $ s1 (s2 u) :: typ) \\<subseteq>    \n    free_tv s1 Un free_tv s2\"", "lemma free_tv_o_subst: \n    \"free_tv ($ S1 \\<circ> S2) \\<subseteq> free_tv S1 Un free_tv (S2 :: nat => typ)\"", "lemma free_tv_of_substitutions_extend_to_types:\n    \"n : free_tv t \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S t::typ)\"", "lemma free_tv_of_substitutions_extend_to_schemes:\n    \"n : free_tv sch \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S sch::type_scheme)\"", "lemma free_tv_of_substitutions_extend_to_scheme_lists [simp]:\n    \"n : free_tv A \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S A::type_scheme list)\"", "lemma free_tv_ML_scheme:\n  fixes sch :: type_scheme\n  shows \"(n : free_tv sch) = (n: set (free_tv_ML sch))\"", "lemma free_tv_ML_scheme_list:\n  fixes A :: \"type_scheme list\"\n  shows \"(n : free_tv A) = (n: set (free_tv_ML A))\"", "lemma bound_tv_mk_scheme [simp]: \"bound_tv (mk_scheme t) = {}\"", "lemma bound_tv_subst_scheme [simp]:\n  fixes sch :: type_scheme\n  shows \"bound_tv ($ S sch) = bound_tv sch\"", "lemma bound_tv_subst_scheme_list [simp]: \n  fixes A :: \"type_scheme list\"\n  shows \"bound_tv ($ S A) = bound_tv A\"", "lemma new_tv_subst: \n  \"new_tv n S = ((\\<forall>m. n \\<le> m \\<longrightarrow> (S m = TVar m)) \\<and>  \n                 (\\<forall>l. l < n \\<longrightarrow> new_tv n (S l) ))\"", "lemma new_tv_list: \"new_tv n x = (\\<forall>y\\<in>set x. new_tv n y)\"", "lemma subst_te_new_tv [simp]:\n    \"new_tv n (t::typ) \\<longrightarrow> $(\\<lambda>x. if x=n then t' else S x) t = $S t\"", "lemma subst_te_new_type_scheme [simp]:\n    \"new_tv n (sch::type_scheme) \\<Longrightarrow> $(\\<lambda>x. if x=n then sch' else S x) sch = $S sch\"", "lemma subst_tel_new_scheme_list [simp]:\n    \"new_tv n (A::type_scheme list) \\<Longrightarrow> $(\\<lambda>x. if x=n then t else S x) A = $S A\"", "lemma new_tv_le: \n  \"n\\<le>m \\<Longrightarrow> new_tv n t \\<Longrightarrow> new_tv m t\"", "lemma [simp]: \"new_tv n t \\<Longrightarrow> new_tv (Suc n) t\"", "lemma new_tv_typ_le: \"n\\<le>m \\<Longrightarrow> new_tv n (t::typ) \\<Longrightarrow> new_tv m t\"", "lemma new_scheme_list_le: \"n\\<le>m \\<Longrightarrow> new_tv n (A::type_scheme list) \\<Longrightarrow> new_tv m A\"", "lemma new_tv_subst_le: \"n\\<le>m \\<Longrightarrow> new_tv n (S::subst) \\<Longrightarrow> new_tv m S\"", "lemma new_tv_subst_var: \n  \"[| n<m; new_tv m (S::subst) |] ==> new_tv m (S n)\"", "lemma new_tv_subst_te [simp]:\n    \"new_tv n S \\<Longrightarrow> new_tv n (t::typ) \\<Longrightarrow> new_tv n ($ S t)\"", "lemma new_tv_subst_type_scheme [rule_format, simp]: \n  \"new_tv n S \\<longrightarrow> new_tv n (sch::type_scheme) \\<longrightarrow> new_tv n ($ S sch)\"", "lemma new_tv_subst_scheme_list [simp]:\n    \"new_tv n S \\<Longrightarrow> new_tv n (A::type_scheme list) \\<Longrightarrow> new_tv n ($ S A)\"", "lemma new_tv_Suc_list: \"new_tv n A \\<longrightarrow> new_tv (Suc n) ((TVar n)#A)\"", "lemma new_tv_only_depends_on_free_tv_type_scheme:\n  fixes sch :: type_scheme\n  shows \"free_tv sch = free_tv sch' \\<Longrightarrow> new_tv n sch \\<Longrightarrow> new_tv n sch'\"", "lemma new_tv_only_depends_on_free_tv_scheme_list:\n  fixes A :: \"type_scheme list\"\n  shows \"free_tv A = free_tv A' \\<Longrightarrow> new_tv n A \\<Longrightarrow> new_tv n A'\"", "lemma new_tv_nth_nat_A [rule_format]: \n  \"\\<forall>nat. nat < length A \\<longrightarrow> new_tv n A \\<longrightarrow> (new_tv n (A!nat))\"", "lemma new_tv_subst_comp_1 [simp]: \n  \"[| new_tv n (S::subst); new_tv n R |] ==> new_tv n (($ R) \\<circ> S)\"", "lemma new_tv_subst_comp_2 [simp]:\n  \"[| new_tv n (S::subst); new_tv n R |] ==> new_tv n (\\<lambda>v.$ R (S v))\"", "lemma new_tv_not_free_tv [simp]:\n    \"new_tv n A \\<Longrightarrow> n\\<notin>(free_tv A)\"", "lemma fresh_variable_types [simp]: \"\\<And>t::typ. \\<exists>n. (new_tv n t)\"", "lemma fresh_variable_type_schemes [simp]:\n  \"\\<And>sch::type_scheme. \\<exists>n. (new_tv n sch)\"", "lemma fresh_variable_type_scheme_lists [simp]: \n  \"\\<And>A::type_scheme list. \\<exists>n. (new_tv n A)\"", "lemma make_one_new_out_of_two: \n  \"[| \\<exists>n1. (new_tv n1 x); \\<exists>n2. (new_tv n2 y)|] ==> \\<exists>n. (new_tv n x) \\<and> (new_tv n y)\"", "lemma ex_fresh_variable: \n  \"\\<And>(A::type_scheme list) (A'::type_scheme list) (t::typ) (t'::typ).  \n          \\<exists>n. (new_tv n A) \\<and> (new_tv n A') \\<and> (new_tv n t) \\<and> (new_tv n t')\"", "lemma mgu_new: \n      \"[|mgu t1 t2 = Some u; new_tv n t1; new_tv n t2|] ==> new_tv n u\"", "lemma length_app_subst_list [simp]:\n   \"\\<And>A:: ('a::type_struct) list. length ($ S A) = length A\"", "lemma subst_TVar_scheme [simp]:\n  fixes sch :: type_scheme\n  shows \"$ TVar sch = sch\"", "lemma subst_TVar_scheme_list [simp]:\n  fixes A :: \"type_scheme list\"\n  shows \"$ TVar A = A\"", "lemma app_subst_id_te [simp]: \"$ id_subst = (\\<lambda>t::typ. t)\"", "lemma app_subst_id_type_scheme [simp]:\n  \"$ id_subst = (\\<lambda>sch::type_scheme. sch)\"", "lemma app_subst_id_tel [simp]: \n  \"$ id_subst = (\\<lambda>A::type_scheme list. A)\"", "lemma id_subst_sch [simp]:\n  fixes sch :: type_scheme\n  shows \"$ id_subst sch = sch\"", "lemma id_subst_A [simp]:\n  fixes A :: \"type_scheme list\"\n  shows \"$ id_subst A = A\"", "lemma o_id_subst [simp]: \"$S \\<circ> id_subst = S\"", "lemma subst_comp_te: \"$ R ($ S t::typ) = $ (\\<lambda>x. $ R (S x) ) t\"", "lemma subst_comp_type_scheme: \n  \"$ R ($ S sch::type_scheme) = $ (\\<lambda>x. $ R (S x) ) sch\"", "lemma subst_comp_scheme_list: \n  \"$ R ($ S A::type_scheme list) = $ (\\<lambda>x. $ R (S x)) A\"", "lemma subst_id_on_type_scheme_list': \n  fixes A :: \"type_scheme list\"\n  shows \"\\<forall>x \\<in> free_tv A. S x = (TVar x) \\<Longrightarrow> $ S A = $ id_subst A\"", "lemma subst_id_on_type_scheme_list: \n  fixes A :: \"type_scheme list\"\n  shows \"\\<forall>x \\<in> free_tv A. S x = (TVar x) \\<Longrightarrow> $ S A = A\"", "lemma nth_subst [rule_format]: \n  \"\\<forall>n. n < length A \\<longrightarrow> ($ S A)!n = $S (A!n)\""], "translations": [["", "lemma free_tv_subst:\n  \"free_tv S = (dom S) Un (cod S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv S = Type.dom S \\<union> cod S", "by (simp add: free_tv_fun_def of_nat_nat_def typ_of_typ_def )\n\n\\<comment> \\<open>unification algorithm mgu\\<close>"], ["", "axiomatization mgu :: \"typ \\<Rightarrow> typ \\<Rightarrow> subst option\" where\n  mgu_eq:   \"mgu t1 t2 = Some U \\<Longrightarrow> $U t1 = $U t2\"\n  and mgu_mg:   \"[| (mgu t1 t2) = Some U; $S t1 = $S t2 |] ==> \\<exists>R. S = $R \\<circ> U\"\n  and mgu_Some: \"$S t1 = $S t2 \\<Longrightarrow> \\<exists>U. mgu t1 t2 = Some U\"\n  and mgu_free: \"mgu t1 t2 = Some U \\<Longrightarrow> (free_tv U) \\<subseteq> (free_tv t1) Un (free_tv t2)\""], ["", "declare mgu_eq [simp] mgu_mg [simp] mgu_free [simp]"], ["", "lemma mk_scheme_Fun [rule_format]: \"mk_scheme t = sch1 =-> sch2 \\<longrightarrow> (\\<exists>t1 t2. sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_scheme t = sch1 =-> sch2 \\<longrightarrow>\n    (\\<exists>t1 t2. sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       mk_scheme (TVar x) = sch1 =-> sch2 \\<longrightarrow>\n       (\\<exists>t1 t2. sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)\n 2. \\<And>x1a x2.\n       \\<lbrakk>mk_scheme x1a = sch1 =-> sch2 \\<longrightarrow>\n                (\\<exists>t1 t2.\n                    sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2);\n        mk_scheme x2 = sch1 =-> sch2 \\<longrightarrow>\n        (\\<exists>t1 t2.\n            sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         sch1 =-> sch2 \\<longrightarrow>\n                         (\\<exists>t1 t2.\n                             sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>mk_scheme x1a = sch1 =-> sch2 \\<longrightarrow>\n                (\\<exists>t1 t2.\n                    sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2);\n        mk_scheme x2 = sch1 =-> sch2 \\<longrightarrow>\n        (\\<exists>t1 t2.\n            sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         sch1 =-> sch2 \\<longrightarrow>\n                         (\\<exists>t1 t2.\n                             sch1 = mk_scheme t1 \\<and> sch2 = mk_scheme t2)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>mk_scheme x1a = sch1 =-> sch2 \\<longrightarrow>\n                (\\<exists>t1. sch1 = mk_scheme t1) \\<and>\n                (\\<exists>t2. sch2 = mk_scheme t2);\n        mk_scheme x2 = sch1 =-> sch2 \\<longrightarrow>\n        (\\<exists>t1. sch1 = mk_scheme t1) \\<and>\n        (\\<exists>t2. sch2 = mk_scheme t2)\\<rbrakk>\n       \\<Longrightarrow> mk_scheme x1a = sch1 \\<and>\n                         mk_scheme x2 = sch2 \\<longrightarrow>\n                         (\\<exists>t1. sch1 = mk_scheme t1) \\<and>\n                         (\\<exists>t2. sch2 = mk_scheme t2)", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma mk_scheme_injective [rule_format]: \"\\<forall>t'. mk_scheme t = mk_scheme t' \\<longrightarrow> t=t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t'. mk_scheme t = mk_scheme t' \\<longrightarrow> t = t'", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<forall>t'.\n          mk_scheme (TVar x) = mk_scheme t' \\<longrightarrow> TVar x = t'\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t'.\n                            mk_scheme (x1a -> x2) =\n                            mk_scheme t' \\<longrightarrow>\n                            x1a -> x2 = t'", "apply (rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t'.\n       mk_scheme (TVar x) = mk_scheme t' \\<longrightarrow> TVar x = t'\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t'.\n                            mk_scheme (x1a -> x2) =\n                            mk_scheme t' \\<longrightarrow>\n                            x1a -> x2 = t'", "apply (induct_tac \"t'\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x t' xa.\n       mk_scheme (TVar x) = mk_scheme (TVar xa) \\<longrightarrow>\n       TVar x = TVar xa\n 2. \\<And>x t' x1a x2.\n       \\<lbrakk>mk_scheme (TVar x) = mk_scheme x1a \\<longrightarrow>\n                TVar x = x1a;\n        mk_scheme (TVar x) = mk_scheme x2 \\<longrightarrow>\n        TVar x = x2\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (TVar x) =\n                         mk_scheme (x1a -> x2) \\<longrightarrow>\n                         TVar x = x1a -> x2\n 3. \\<And>x1a x2.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t'.\n                            mk_scheme (x1a -> x2) =\n                            mk_scheme t' \\<longrightarrow>\n                            x1a -> x2 = t'", "apply (simp (no_asm))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x t' x1a x2.\n       \\<lbrakk>mk_scheme (TVar x) = mk_scheme x1a \\<longrightarrow>\n                TVar x = x1a;\n        mk_scheme (TVar x) = mk_scheme x2 \\<longrightarrow>\n        TVar x = x2\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (TVar x) =\n                         mk_scheme (x1a -> x2) \\<longrightarrow>\n                         TVar x = x1a -> x2\n 2. \\<And>x1a x2.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t'.\n                            mk_scheme (x1a -> x2) =\n                            mk_scheme t' \\<longrightarrow>\n                            x1a -> x2 = t'", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t'.\n                            mk_scheme (x1a -> x2) =\n                            mk_scheme t' \\<longrightarrow>\n                            x1a -> x2 = t'", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t'.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         mk_scheme t' \\<longrightarrow>\n                         x1a -> x2 = t'", "apply (induct_tac \"t'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1a x2 t' x.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'.\n           mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t'\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         mk_scheme (TVar x) \\<longrightarrow>\n                         x1a -> x2 = TVar x\n 2. \\<And>x1a x2 t' x1aa x2a.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'. mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t';\n        mk_scheme (x1a -> x2) = mk_scheme x1aa \\<longrightarrow>\n        x1a -> x2 = x1aa;\n        mk_scheme (x1a -> x2) = mk_scheme x2a \\<longrightarrow>\n        x1a -> x2 = x2a\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         mk_scheme (x1aa -> x2a) \\<longrightarrow>\n                         x1a -> x2 = x1aa -> x2a", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 t' x1aa x2a.\n       \\<lbrakk>\\<forall>t'.\n                   mk_scheme x1a = mk_scheme t' \\<longrightarrow> x1a = t';\n        \\<forall>t'. mk_scheme x2 = mk_scheme t' \\<longrightarrow> x2 = t';\n        mk_scheme (x1a -> x2) = mk_scheme x1aa \\<longrightarrow>\n        x1a -> x2 = x1aa;\n        mk_scheme (x1a -> x2) = mk_scheme x2a \\<longrightarrow>\n        x1a -> x2 = x2a\\<rbrakk>\n       \\<Longrightarrow> mk_scheme (x1a -> x2) =\n                         mk_scheme (x1aa -> x2a) \\<longrightarrow>\n                         x1a -> x2 = x1aa -> x2a", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_mk_scheme: \"free_tv (mk_scheme t) = free_tv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv (mk_scheme t) = free_tv t", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. free_tv (mk_scheme (TVar x)) = free_tv (TVar x)\n 2. \\<And>x1a x2.\n       \\<lbrakk>free_tv (mk_scheme x1a) = free_tv x1a;\n        free_tv (mk_scheme x2) = free_tv x2\\<rbrakk>\n       \\<Longrightarrow> free_tv (mk_scheme (x1a -> x2)) =\n                         free_tv (x1a -> x2)", "apply (simp_all (no_asm_simp))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare free_tv_mk_scheme [simp]"], ["", "lemma subst_mk_scheme: \"$ S (mk_scheme t) = mk_scheme ($ S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ S (mk_scheme t) = mk_scheme ($ S t)", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. $ S (mk_scheme (TVar x)) = mk_scheme ($ S (TVar x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>$ S (mk_scheme x1a) = mk_scheme ($ S x1a);\n        $ S (mk_scheme x2) = mk_scheme ($ S x2)\\<rbrakk>\n       \\<Longrightarrow> $ S (mk_scheme (x1a -> x2)) =\n                         mk_scheme ($ S (x1a -> x2))", "apply (simp_all (no_asm_simp))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare subst_mk_scheme [simp]\n\n\n\\<comment> \\<open>constructor laws for @{text app_subst}\\<close>"], ["", "lemma app_subst_Nil: \n  \"$ S [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ S [] = []", "apply (unfold app_subst_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ($ S) [] = []", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma app_subst_Cons: \n  \"$ S (x#l) = ($ S x)#($ S l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ S (x # l) = $ S x # $ S l", "apply (unfold app_subst_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ($ S) (x # l) = $ S x # map ($ S) l", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare app_subst_Nil [simp] app_subst_Cons [simp]\n\n\n\\<comment> \\<open>constructor laws for @{text new_tv}\\<close>"], ["", "lemma new_tv_TVar: \n  \"new_tv n (TVar m) = (m<n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (TVar m) = (m < n)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ma. ma \\<in> free_tv (TVar m) \\<longrightarrow> ma < n) =\n    (m < n)", "apply (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_FVar: \n  \"new_tv n (FVar m) = (m<n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (FVar m) = (m < n)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ma. ma \\<in> free_tv (FVar m) \\<longrightarrow> ma < n) =\n    (m < n)", "apply (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_BVar: \n  \"new_tv n (BVar m) = True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (BVar m) = True", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>ma. ma \\<in> free_tv (BVar m) \\<longrightarrow> ma < n) = True", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Fun: \n  \"new_tv n (t1 -> t2) = (new_tv n t1 \\<and> new_tv n t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (t1 -> t2) = (new_tv n t1 \\<and> new_tv n t2)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m. m \\<in> free_tv (t1 -> t2) \\<longrightarrow> m < n) =\n    ((\\<forall>m. m \\<in> free_tv t1 \\<longrightarrow> m < n) \\<and>\n     (\\<forall>m. m \\<in> free_tv t2 \\<longrightarrow> m < n))", "apply (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Fun2: \n  \"new_tv n (t1 =-> t2) = (new_tv n t1 \\<and> new_tv n t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (t1 =-> t2) = (new_tv n t1 \\<and> new_tv n t2)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m. m \\<in> free_tv (t1 =-> t2) \\<longrightarrow> m < n) =\n    ((\\<forall>m. m \\<in> free_tv t1 \\<longrightarrow> m < n) \\<and>\n     (\\<forall>m. m \\<in> free_tv t2 \\<longrightarrow> m < n))", "apply (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Nil: \n  \"new_tv n []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n []", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. m \\<in> free_tv [] \\<longrightarrow> m < n", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Cons: \n  \"new_tv n (x#l) = (new_tv n x \\<and> new_tv n l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n (x # l) = (new_tv n x \\<and> new_tv n l)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m. m \\<in> free_tv (x # l) \\<longrightarrow> m < n) =\n    ((\\<forall>m. m \\<in> free_tv x \\<longrightarrow> m < n) \\<and>\n     (\\<forall>m. m \\<in> free_tv l \\<longrightarrow> m < n))", "apply (fastforce)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_TVar_subst: \"new_tv n TVar\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n TVar", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. m \\<in> free_tv TVar \\<longrightarrow> m < n", "apply (intro strip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. m \\<in> free_tv TVar \\<Longrightarrow> m < n", "apply (simp add: free_tv_subst dom_def cod_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare \n  new_tv_TVar [simp] new_tv_FVar [simp] new_tv_BVar [simp] \n  new_tv_Fun [simp] new_tv_Fun2 [simp] new_tv_Nil [simp] \n  new_tv_Cons [simp] new_tv_TVar_subst [simp]"], ["", "lemma new_tv_id_subst [simp]: \"new_tv n id_subst\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n id_subst", "by (simp add: id_subst_def new_tv_def free_tv_subst dom_def cod_def)"], ["", "lemma new_if_subst_type_scheme [simp]: \"new_tv n (sch::type_scheme) \\<Longrightarrow>\n    $(\\<lambda>k. if k<n then S k else S' k) sch = $S sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n sch \\<Longrightarrow>\n    $ (\\<lambda>k. if k < n then S k else S' k) sch = $ S sch", "by (induct sch) simp_all"], ["", "lemma new_if_subst_type_scheme_list [simp]: \"new_tv n (A::type_scheme list) \\<Longrightarrow>\n    $(\\<lambda>k. if k<n then S k else S' k) A = $S A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<Longrightarrow>\n    $ (\\<lambda>k. if k < n then S k else S' k) A = $ S A", "by (induct A) simp_all\n\n\n\\<comment> \\<open>constructor laws for @{text dom} and @{text cod}\\<close>"], ["", "lemma dom_id_subst [simp]: \"dom id_subst = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Type.dom id_subst = {}", "unfolding dom_def id_subst_def empty_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n. TVar n \\<noteq> TVar n} = {x. False}", "by simp"], ["", "lemma cod_id_subst [simp]: \"cod id_subst = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cod id_subst = {}", "unfolding cod_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Union>m\\<in>Type.dom id_subst. free_tv (id_subst m)) = {}", "by simp"], ["", "lemma free_tv_id_subst [simp]: \"free_tv id_subst = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv id_subst = {}", "unfolding free_tv_subst"], ["proof (prove)\ngoal (1 subgoal):\n 1. Type.dom id_subst \\<union> cod id_subst = {}", "by simp"], ["", "lemma free_tv_nth_A_impl_free_tv_A [rule_format, simp]:\n  \"\\<forall>n. n < length A \\<longrightarrow> x : free_tv (A!n) \\<longrightarrow> x : free_tv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length A.\n       x \\<in> free_tv (A ! n) \\<longrightarrow> x \\<in> free_tv A", "apply (induct A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n<length [].\n       x \\<in> free_tv ([] ! n) \\<longrightarrow> x \\<in> free_tv []\n 2. \\<And>a A.\n       \\<forall>n<length A.\n          x \\<in> free_tv (A ! n) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       \\<forall>n<length (a # A).\n          x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n          x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<forall>n<length A.\n          x \\<in> free_tv (A ! n) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       \\<forall>n<length (a # A).\n          x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n          x \\<in> free_tv (a # A)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A n.\n       \\<forall>n<length A.\n          x \\<in> free_tv (A ! n) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       n < length (a # A) \\<longrightarrow>\n       x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n       x \\<in> free_tv (a # A)", "apply (induct_tac n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A n.\n       \\<forall>n<length A.\n          x \\<in> free_tv (A ! n) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       0 < length (a # A) \\<longrightarrow>\n       x \\<in> free_tv ((a # A) ! 0) \\<longrightarrow>\n       x \\<in> free_tv (a # A)\n 2. \\<And>a A n na.\n       \\<lbrakk>\\<forall>n<length A.\n                   x \\<in> free_tv (A ! n) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        na < length (a # A) \\<longrightarrow>\n        x \\<in> free_tv ((a # A) ! na) \\<longrightarrow>\n        x \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> Suc na < length (a # A) \\<longrightarrow>\n                         x \\<in> free_tv\n                                  ((a # A) ! Suc na) \\<longrightarrow>\n                         x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A n na.\n       \\<lbrakk>\\<forall>n<length A.\n                   x \\<in> free_tv (A ! n) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        na < length (a # A) \\<longrightarrow>\n        x \\<in> free_tv ((a # A) ! na) \\<longrightarrow>\n        x \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> Suc na < length (a # A) \\<longrightarrow>\n                         x \\<in> free_tv\n                                  ((a # A) ! Suc na) \\<longrightarrow>\n                         x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_nth_nat_A [rule_format]:\n  \"\\<forall>nat. nat < length A \\<longrightarrow> x : free_tv (A!nat) \\<longrightarrow> x : free_tv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nat<length A.\n       x \\<in> free_tv (A ! nat) \\<longrightarrow> x \\<in> free_tv A", "apply (induct A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>nat<length [].\n       x \\<in> free_tv ([] ! nat) \\<longrightarrow> x \\<in> free_tv []\n 2. \\<And>a A.\n       \\<forall>nat<length A.\n          x \\<in> free_tv (A ! nat) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       \\<forall>nat<length (a # A).\n          x \\<in> free_tv ((a # A) ! nat) \\<longrightarrow>\n          x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<forall>nat<length A.\n          x \\<in> free_tv (A ! nat) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       \\<forall>nat<length (a # A).\n          x \\<in> free_tv ((a # A) ! nat) \\<longrightarrow>\n          x \\<in> free_tv (a # A)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A nat.\n       \\<forall>nat<length A.\n          x \\<in> free_tv (A ! nat) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       nat < length (a # A) \\<longrightarrow>\n       x \\<in> free_tv ((a # A) ! nat) \\<longrightarrow>\n       x \\<in> free_tv (a # A)", "apply (induct_tac nat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A nat.\n       \\<forall>nat<length A.\n          x \\<in> free_tv (A ! nat) \\<longrightarrow>\n          x \\<in> free_tv A \\<Longrightarrow>\n       0 < length (a # A) \\<longrightarrow>\n       x \\<in> free_tv ((a # A) ! 0) \\<longrightarrow>\n       x \\<in> free_tv (a # A)\n 2. \\<And>a A nat n.\n       \\<lbrakk>\\<forall>nat<length A.\n                   x \\<in> free_tv (A ! nat) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        n < length (a # A) \\<longrightarrow>\n        x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n        x \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> Suc n < length (a # A) \\<longrightarrow>\n                         x \\<in> free_tv ((a # A) ! Suc n) \\<longrightarrow>\n                         x \\<in> free_tv (a # A)", "apply (intro strip)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A nat.\n       \\<lbrakk>\\<forall>nat<length A.\n                   x \\<in> free_tv (A ! nat) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        0 < length (a # A); x \\<in> free_tv ((a # A) ! 0)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> free_tv (a # A)\n 2. \\<And>a A nat n.\n       \\<lbrakk>\\<forall>nat<length A.\n                   x \\<in> free_tv (A ! nat) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        n < length (a # A) \\<longrightarrow>\n        x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n        x \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> Suc n < length (a # A) \\<longrightarrow>\n                         x \\<in> free_tv ((a # A) ! Suc n) \\<longrightarrow>\n                         x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A nat n.\n       \\<lbrakk>\\<forall>nat<length A.\n                   x \\<in> free_tv (A ! nat) \\<longrightarrow>\n                   x \\<in> free_tv A;\n        n < length (a # A) \\<longrightarrow>\n        x \\<in> free_tv ((a # A) ! n) \\<longrightarrow>\n        x \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> Suc n < length (a # A) \\<longrightarrow>\n                         x \\<in> free_tv ((a # A) ! Suc n) \\<longrightarrow>\n                         x \\<in> free_tv (a # A)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\n\\<open>if two substitutions yield the same result if applied to a type\n   structure the substitutions coincide on the free type variables\n   occurring in the type structure\\<close>"], ["", "lemma typ_substitutions_only_on_free_variables: \n  \"(\\<forall>x\\<in>free_tv t. (S x) = (S' x)) \\<Longrightarrow> $ S (t::typ) = $ S' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>free_tv t. S x = S' x \\<Longrightarrow> $ S t = $ S' t", "by (induct t) simp_all"], ["", "lemma eq_free_eq_subst_te: \"(\\<forall>n. n\\<in>(free_tv t) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $ S1 (t::typ) = $ S2 t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> free_tv t \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    $ S1 t = $ S2 t", "apply (rule typ_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> free_tv t \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    \\<forall>x\\<in>free_tv t. S1 x = S2 x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma scheme_substitutions_only_on_free_variables:\n  \"(\\<forall>x\\<in>free_tv sch. (S x) = (S' x)) \\<Longrightarrow> $ S (sch::type_scheme) = $ S' sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>free_tv sch. S x = S' x \\<Longrightarrow>\n    $ S sch = $ S' sch", "by (induct sch) simp_all"], ["", "lemma eq_free_eq_subst_type_scheme: \n  \"(\\<forall>n. n\\<in>(free_tv sch) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $ S1 (sch::type_scheme) = $ S2 sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> free_tv sch \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    $ S1 sch = $ S2 sch", "apply (rule scheme_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> free_tv sch \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    \\<forall>x\\<in>free_tv sch. S1 x = S2 x", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_free_eq_subst_scheme_list:\n  \"(\\<forall>n. n\\<in>(free_tv A) \\<longrightarrow> S1 n = S2 n) \\<Longrightarrow> $S1 (A::type_scheme list) = $S2 A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       n \\<in> free_tv A \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    $ S1 A = $ S2 A", "proof (induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n.\n       n \\<in> free_tv [] \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    $ S1 [] = $ S2 []\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>n.\n                   n \\<in> free_tv A \\<longrightarrow>\n                   S1 n = S2 n \\<Longrightarrow>\n                $ S1 A = $ S2 A;\n        \\<forall>n.\n           n \\<in> free_tv (a # A) \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (a # A) = $ S2 (a # A)", "case Nil"], ["proof (state)\nthis:\n  \\<forall>n. n \\<in> free_tv [] \\<longrightarrow> S1 n = S2 n\n\ngoal (2 subgoals):\n 1. \\<forall>n.\n       n \\<in> free_tv [] \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n    $ S1 [] = $ S2 []\n 2. \\<And>a A.\n       \\<lbrakk>\\<forall>n.\n                   n \\<in> free_tv A \\<longrightarrow>\n                   S1 n = S2 n \\<Longrightarrow>\n                $ S1 A = $ S2 A;\n        \\<forall>n.\n           n \\<in> free_tv (a # A) \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (a # A) = $ S2 (a # A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n. n \\<in> free_tv [] \\<longrightarrow> S1 n = S2 n", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>n. n \\<in> free_tv [] \\<longrightarrow> S1 n = S2 n\n\ngoal (1 subgoal):\n 1. $ S1 [] = $ S2 []", "by fastforce"], ["proof (state)\nthis:\n  $ S1 [] = $ S2 []\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<forall>n.\n                   n \\<in> free_tv A \\<longrightarrow>\n                   S1 n = S2 n \\<Longrightarrow>\n                $ S1 A = $ S2 A;\n        \\<forall>n.\n           n \\<in> free_tv (a # A) \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (a # A) = $ S2 (a # A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<forall>n.\n                   n \\<in> free_tv A \\<longrightarrow>\n                   S1 n = S2 n \\<Longrightarrow>\n                $ S1 A = $ S2 A;\n        \\<forall>n.\n           n \\<in> free_tv (a # A) \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (a # A) = $ S2 (a # A)", "case Cons"], ["proof (state)\nthis:\n  \\<forall>n.\n     n \\<in> free_tv A_ \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n  $ S1 A_ = $ S2 A_\n  \\<forall>n. n \\<in> free_tv (a_ # A_) \\<longrightarrow> S1 n = S2 n\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<forall>n.\n                   n \\<in> free_tv A \\<longrightarrow>\n                   S1 n = S2 n \\<Longrightarrow>\n                $ S1 A = $ S2 A;\n        \\<forall>n.\n           n \\<in> free_tv (a # A) \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (a # A) = $ S2 (a # A)", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     n \\<in> free_tv A_ \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n  $ S1 A_ = $ S2 A_\n  \\<forall>n. n \\<in> free_tv (a_ # A_) \\<longrightarrow> S1 n = S2 n", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     n \\<in> free_tv A_ \\<longrightarrow> S1 n = S2 n \\<Longrightarrow>\n  $ S1 A_ = $ S2 A_\n  \\<forall>n. n \\<in> free_tv (a_ # A_) \\<longrightarrow> S1 n = S2 n\n\ngoal (1 subgoal):\n 1. $ S1 (a_ # A_) = $ S2 (a_ # A_)", "by (fastforce intro: eq_free_eq_subst_type_scheme)"], ["proof (state)\nthis:\n  $ S1 (a_ # A_) = $ S2 (a_ # A_)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weaken_asm_Un: \"((\\<forall>x\\<in>A. (P x)) \\<longrightarrow> Q) \\<Longrightarrow> ((\\<forall>x\\<in>A \\<union> B. (P x)) \\<longrightarrow> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>A. P x) \\<longrightarrow> Q \\<Longrightarrow>\n    (\\<forall>x\\<in>A \\<union> B. P x) \\<longrightarrow> Q", "by fast"], ["", "lemma scheme_list_substitutions_only_on_free_variables [rule_format]:\n  \"(\\<forall>x\\<in>free_tv A. (S x) = (S' x)) \\<longrightarrow> $ S (A::type_scheme list) = $ S' A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>free_tv A. S x = S' x) \\<longrightarrow> $ S A = $ S' A", "apply (induct_tac A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<forall>x\\<in>free_tv []. S x = S' x) \\<longrightarrow>\n    $ S [] = $ S' []\n 2. \\<And>a list.\n       (\\<forall>x\\<in>free_tv list. S x = S' x) \\<longrightarrow>\n       $ S list = $ S' list \\<Longrightarrow>\n       (\\<forall>x\\<in>free_tv (a # list). S x = S' x) \\<longrightarrow>\n       $ S (a # list) = $ S' (a # list)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       (\\<forall>x\\<in>free_tv list. S x = S' x) \\<longrightarrow>\n       $ S list = $ S' list \\<Longrightarrow>\n       (\\<forall>x\\<in>free_tv (a # list). S x = S' x) \\<longrightarrow>\n       $ S (a # list) = $ S' (a # list)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       (\\<forall>x\\<in>free_tv list. S x = S' x) \\<longrightarrow>\n       $ S list = $ S' list \\<Longrightarrow>\n       (\\<forall>x\\<in>free_tv a \\<union> free_tv list.\n           S x = S' x) \\<longrightarrow>\n       $ S a = $ S' a", "apply (rule weaken_asm_Un)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       (\\<forall>x\\<in>free_tv list. S x = S' x) \\<longrightarrow>\n       $ S list = $ S' list \\<Longrightarrow>\n       (\\<forall>x\\<in>free_tv a. S x = S' x) \\<longrightarrow>\n       $ S a = $ S' a", "apply (intro strip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<lbrakk>(\\<forall>x\\<in>free_tv list. S x = S' x) \\<longrightarrow>\n                $ S list = $ S' list;\n        \\<forall>x\\<in>free_tv a. S x = S' x\\<rbrakk>\n       \\<Longrightarrow> $ S a = $ S' a", "apply (erule scheme_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_subst_te_eq_free:\n  \"$ S1 (t::typ) = $ S2 t \\<Longrightarrow> n:(free_tv t) \\<Longrightarrow> S1 n = S2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>$ S1 t = $ S2 t; n \\<in> free_tv t\\<rbrakk>\n    \\<Longrightarrow> S1 n = S2 n", "by (induct t) auto"], ["", "lemma eq_subst_type_scheme_eq_free [rule_format]: \n  \"$ S1 (sch::type_scheme) = $ S2 sch \\<longrightarrow> n:(free_tv sch) \\<longrightarrow> S1 n = S2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ S1 sch = $ S2 sch \\<longrightarrow>\n    n \\<in> free_tv sch \\<longrightarrow> S1 n = S2 n", "apply (induct_tac \"sch\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       $ S1 (FVar x) = $ S2 (FVar x) \\<longrightarrow>\n       n \\<in> free_tv (FVar x) \\<longrightarrow> S1 n = S2 n\n 2. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "(* case TVar n *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       $ S1 (FVar x) = $ S2 (FVar x) \\<longrightarrow>\n       n \\<in> free_tv (FVar x) \\<longrightarrow> S1 n = S2 n\n 2. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       mk_scheme (S1 x) = mk_scheme (S2 x) \\<longrightarrow>\n       n = x \\<longrightarrow> S1 x = S2 x\n 2. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "(* case BVar n *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       mk_scheme (S1 x) = mk_scheme (S2 x) \\<longrightarrow>\n       n = x \\<longrightarrow> S1 x = S2 x\n 2. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "apply (intro strip)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>mk_scheme (S1 x) = mk_scheme (S2 x); n = x\\<rbrakk>\n       \\<Longrightarrow> S1 x = S2 x\n 2. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "apply (erule mk_scheme_injective)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       $ S1 (BVar x) = $ S2 (BVar x) \\<longrightarrow>\n       n \\<in> free_tv (BVar x) \\<longrightarrow> S1 n = S2 n\n 2. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "(* case Fun t1 t2 *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>$ S1 x1a = $ S2 x1a \\<longrightarrow>\n                n \\<in> free_tv x1a \\<longrightarrow> S1 n = S2 n;\n        $ S1 x2a = $ S2 x2a \\<longrightarrow>\n        n \\<in> free_tv x2a \\<longrightarrow> S1 n = S2 n\\<rbrakk>\n       \\<Longrightarrow> $ S1 (x1a =-> x2a) =\n                         $ S2 (x1a =-> x2a) \\<longrightarrow>\n                         n \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                         S1 n = S2 n", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eq_subst_scheme_list_eq_free:\n  \"$S1 (A::type_scheme list) = $S2 A \\<Longrightarrow> n:(free_tv A) \\<Longrightarrow> S1 n = S2 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n    \\<Longrightarrow> S1 n = S2 n", "proof (induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>$ S1 [] = $ S2 []; n \\<in> free_tv []\\<rbrakk>\n    \\<Longrightarrow> S1 n = S2 n\n 2. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n                \\<Longrightarrow> S1 n = S2 n;\n        $ S1 (a # A) = $ S2 (a # A); n \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> S1 n = S2 n", "case Nil"], ["proof (state)\nthis:\n  $ S1 [] = $ S2 []\n  n \\<in> free_tv []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>$ S1 [] = $ S2 []; n \\<in> free_tv []\\<rbrakk>\n    \\<Longrightarrow> S1 n = S2 n\n 2. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n                \\<Longrightarrow> S1 n = S2 n;\n        $ S1 (a # A) = $ S2 (a # A); n \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> S1 n = S2 n", "then"], ["proof (chain)\npicking this:\n  $ S1 [] = $ S2 []\n  n \\<in> free_tv []", "show ?case"], ["proof (prove)\nusing this:\n  $ S1 [] = $ S2 []\n  n \\<in> free_tv []\n\ngoal (1 subgoal):\n 1. S1 n = S2 n", "by fastforce"], ["proof (state)\nthis:\n  S1 n = S2 n\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n                \\<Longrightarrow> S1 n = S2 n;\n        $ S1 (a # A) = $ S2 (a # A); n \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> S1 n = S2 n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n                \\<Longrightarrow> S1 n = S2 n;\n        $ S1 (a # A) = $ S2 (a # A); n \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> S1 n = S2 n", "case Cons"], ["proof (state)\nthis:\n  \\<lbrakk>$ S1 A_ = $ S2 A_; n \\<in> free_tv A_\\<rbrakk>\n  \\<Longrightarrow> S1 n = S2 n\n  $ S1 (a_ # A_) = $ S2 (a_ # A_)\n  n \\<in> free_tv (a_ # A_)\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<lbrakk>\\<lbrakk>$ S1 A = $ S2 A; n \\<in> free_tv A\\<rbrakk>\n                \\<Longrightarrow> S1 n = S2 n;\n        $ S1 (a # A) = $ S2 (a # A); n \\<in> free_tv (a # A)\\<rbrakk>\n       \\<Longrightarrow> S1 n = S2 n", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>$ S1 A_ = $ S2 A_; n \\<in> free_tv A_\\<rbrakk>\n  \\<Longrightarrow> S1 n = S2 n\n  $ S1 (a_ # A_) = $ S2 (a_ # A_)\n  n \\<in> free_tv (a_ # A_)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>$ S1 A_ = $ S2 A_; n \\<in> free_tv A_\\<rbrakk>\n  \\<Longrightarrow> S1 n = S2 n\n  $ S1 (a_ # A_) = $ S2 (a_ # A_)\n  n \\<in> free_tv (a_ # A_)\n\ngoal (1 subgoal):\n 1. S1 n = S2 n", "by (fastforce intro: eq_subst_type_scheme_eq_free)"], ["proof (state)\nthis:\n  S1 n = S2 n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma codD: \"v : cod S \\<Longrightarrow> v : free_tv S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> cod S \\<Longrightarrow> v \\<in> free_tv S", "unfolding free_tv_subst"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> cod S \\<Longrightarrow> v \\<in> Type.dom S \\<union> cod S", "by blast"], ["", "lemma not_free_impl_id: \"x \\<notin> free_tv S \\<Longrightarrow> S x = TVar x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> free_tv S \\<Longrightarrow> S x = TVar x", "unfolding free_tv_subst dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> {n. S n \\<noteq> TVar n} \\<union> cod S \\<Longrightarrow>\n    S x = TVar x", "by blast"], ["", "lemma free_tv_le_new_tv: \"[| new_tv n t; m:free_tv t |] ==> m<n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_tv n t; m \\<in> free_tv t\\<rbrakk> \\<Longrightarrow> m < n", "unfolding new_tv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>m. m \\<in> free_tv t \\<longrightarrow> m < n;\n     m \\<in> free_tv t\\<rbrakk>\n    \\<Longrightarrow> m < n", "by blast"], ["", "lemma cod_app_subst [simp]:\n  \"[| v : free_tv(S n); v\\<noteq>n |] ==> v : cod S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> v \\<in> cod S", "apply (unfold dom_def cod_def UNION_eq Bex_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> v \\<in> {y. \\<exists>x.\n                                     x \\<in> {n. S n \\<noteq> TVar n} \\<and>\n                                     y \\<in> free_tv (S x)}", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x.\n                         S x \\<noteq> TVar x \\<and> v \\<in> free_tv (S x)", "apply (safe intro!: exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n; S ?x = TVar ?x\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> v \\<in> free_tv (S ?x)", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n\\<rbrakk>\n    \\<Longrightarrow> v \\<in> free_tv (S ?x)\n 2. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n; S ?x = TVar ?x\\<rbrakk>\n    \\<Longrightarrow> False", "apply (assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> free_tv (S n); v \\<noteq> n; S n = TVar n\\<rbrakk>\n    \\<Longrightarrow> False", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_subst_var: \"free_tv (S (v::nat)) \\<subseteq> insert v (cod S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv (S v) \\<subseteq> insert v (cod S)", "apply (cases \"v:dom S\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. v \\<in> Type.dom S \\<Longrightarrow>\n    free_tv (S v) \\<subseteq> insert v (cod S)\n 2. v \\<notin> Type.dom S \\<Longrightarrow>\n    free_tv (S v) \\<subseteq> insert v (cod S)", "apply (fastforce simp add: cod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<notin> Type.dom S \\<Longrightarrow>\n    free_tv (S v) \\<subseteq> insert v (cod S)", "apply (fastforce simp add: dom_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_app_subst_te: \"free_tv ($ S (t::typ)) \\<subseteq> cod S Un free_tv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S t) \\<subseteq> cod S \\<union> free_tv t", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (TVar x)) \\<subseteq> cod S \\<union> free_tv (TVar x)\n 2. \\<And>t1 t2.\n       \\<lbrakk>free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1;\n        free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (t1 -> t2))\n                         \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "case (TVar n)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (TVar x)) \\<subseteq> cod S \\<union> free_tv (TVar x)\n 2. \\<And>t1 t2.\n       \\<lbrakk>free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1;\n        free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (t1 -> t2))\n                         \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S (TVar n)) \\<subseteq> cod S \\<union> free_tv (TVar n)", "by (simp add: free_tv_subst_var)"], ["proof (state)\nthis:\n  free_tv ($ S (TVar n)) \\<subseteq> cod S \\<union> free_tv (TVar n)\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1;\n        free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (t1 -> t2))\n                         \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1;\n        free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (t1 -> t2))\n                         \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "case (Fun t1 t2)"], ["proof (state)\nthis:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1;\n        free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (t1 -> t2))\n                         \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "then"], ["proof (chain)\npicking this:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2", "show ?case"], ["proof (prove)\nusing this:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\n\ngoal (1 subgoal):\n 1. free_tv ($ S (t1 -> t2)) \\<subseteq> cod S \\<union> free_tv (t1 -> t2)", "by fastforce"], ["proof (state)\nthis:\n  free_tv ($ S (t1 -> t2)) \\<subseteq> cod S \\<union> free_tv (t1 -> t2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma free_tv_app_subst_type_scheme:\n    \"free_tv ($ S (sch::type_scheme)) \\<subseteq> cod S Un free_tv sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S sch) \\<subseteq> cod S \\<union> free_tv sch", "proof (induct sch)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (FVar x)) \\<subseteq> cod S \\<union> free_tv (FVar x)\n 2. \\<And>x.\n       free_tv ($ S (BVar x)) \\<subseteq> cod S \\<union> free_tv (BVar x)\n 3. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "case (FVar n)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (FVar x)) \\<subseteq> cod S \\<union> free_tv (FVar x)\n 2. \\<And>x.\n       free_tv ($ S (BVar x)) \\<subseteq> cod S \\<union> free_tv (BVar x)\n 3. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S (FVar n)) \\<subseteq> cod S \\<union> free_tv (FVar n)", "by (simp add: free_tv_subst_var)"], ["proof (state)\nthis:\n  free_tv ($ S (FVar n)) \\<subseteq> cod S \\<union> free_tv (FVar n)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (BVar x)) \\<subseteq> cod S \\<union> free_tv (BVar x)\n 2. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (BVar x)) \\<subseteq> cod S \\<union> free_tv (BVar x)\n 2. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "case (BVar n)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       free_tv ($ S (BVar x)) \\<subseteq> cod S \\<union> free_tv (BVar x)\n 2. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S (BVar n)) \\<subseteq> cod S \\<union> free_tv (BVar n)", "by simp"], ["proof (state)\nthis:\n  free_tv ($ S (BVar n)) \\<subseteq> cod S \\<union> free_tv (BVar n)\n\ngoal (1 subgoal):\n 1. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "case (SFun t1 t2)"], ["proof (state)\nthis:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\n\ngoal (1 subgoal):\n 1. \\<And>sch1 sch2.\n       \\<lbrakk>free_tv ($ S sch1) \\<subseteq> cod S \\<union> free_tv sch1;\n        free_tv ($ S sch2) \\<subseteq> cod S \\<union> free_tv sch2\\<rbrakk>\n       \\<Longrightarrow> free_tv ($ S (sch1 =-> sch2))\n                         \\<subseteq> cod S \\<union> free_tv (sch1 =-> sch2)", "then"], ["proof (chain)\npicking this:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2", "show ?case"], ["proof (prove)\nusing this:\n  free_tv ($ S t1) \\<subseteq> cod S \\<union> free_tv t1\n  free_tv ($ S t2) \\<subseteq> cod S \\<union> free_tv t2\n\ngoal (1 subgoal):\n 1. free_tv ($ S (t1 =-> t2)) \\<subseteq> cod S \\<union> free_tv (t1 =-> t2)", "by fastforce"], ["proof (state)\nthis:\n  free_tv ($ S (t1 =-> t2)) \\<subseteq> cod S \\<union> free_tv (t1 =-> t2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma free_tv_app_subst_scheme_list: \"free_tv ($ S (A::type_scheme list)) \\<subseteq> cod S Un free_tv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S A) \\<subseteq> cod S \\<union> free_tv A", "proof (induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. free_tv ($ S []) \\<subseteq> cod S \\<union> free_tv []\n 2. \\<And>a A.\n       free_tv ($ S A)\n       \\<subseteq> cod S \\<union> free_tv A \\<Longrightarrow>\n       free_tv ($ S (a # A)) \\<subseteq> cod S \\<union> free_tv (a # A)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. free_tv ($ S []) \\<subseteq> cod S \\<union> free_tv []\n 2. \\<And>a A.\n       free_tv ($ S A)\n       \\<subseteq> cod S \\<union> free_tv A \\<Longrightarrow>\n       free_tv ($ S (a # A)) \\<subseteq> cod S \\<union> free_tv (a # A)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S []) \\<subseteq> cod S \\<union> free_tv []", "by simp"], ["proof (state)\nthis:\n  free_tv ($ S []) \\<subseteq> cod S \\<union> free_tv []\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       free_tv ($ S A)\n       \\<subseteq> cod S \\<union> free_tv A \\<Longrightarrow>\n       free_tv ($ S (a # A)) \\<subseteq> cod S \\<union> free_tv (a # A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       free_tv ($ S A)\n       \\<subseteq> cod S \\<union> free_tv A \\<Longrightarrow>\n       free_tv ($ S (a # A)) \\<subseteq> cod S \\<union> free_tv (a # A)", "case (Cons a al)"], ["proof (state)\nthis:\n  free_tv ($ S al) \\<subseteq> cod S \\<union> free_tv al\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       free_tv ($ S A)\n       \\<subseteq> cod S \\<union> free_tv A \\<Longrightarrow>\n       free_tv ($ S (a # A)) \\<subseteq> cod S \\<union> free_tv (a # A)", "with free_tv_app_subst_type_scheme"], ["proof (chain)\npicking this:\n  free_tv ($ ?S ?sch) \\<subseteq> cod ?S \\<union> free_tv ?sch\n  free_tv ($ S al) \\<subseteq> cod S \\<union> free_tv al", "show ?case"], ["proof (prove)\nusing this:\n  free_tv ($ ?S ?sch) \\<subseteq> cod ?S \\<union> free_tv ?sch\n  free_tv ($ S al) \\<subseteq> cod S \\<union> free_tv al\n\ngoal (1 subgoal):\n 1. free_tv ($ S (a # al)) \\<subseteq> cod S \\<union> free_tv (a # al)", "by fastforce"], ["proof (state)\nthis:\n  free_tv ($ S (a # al)) \\<subseteq> cod S \\<union> free_tv (a # al)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma free_tv_comp_subst: \n  \"free_tv (\\<lambda>u::nat. $ s1 (s2 u) :: typ) \\<subseteq>    \n    free_tv s1 Un free_tv s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv (\\<lambda>u. $ s1 (s2 u))\n    \\<subseteq> free_tv s1 \\<union> free_tv s2", "unfolding free_tv_subst dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n. $ s1 (s2 n) \\<noteq> TVar n} \\<union> cod (\\<lambda>u. $ s1 (s2 u))\n    \\<subseteq> {n. s1 n \\<noteq> TVar n} \\<union> cod s1 \\<union>\n                ({n. s2 n \\<noteq> TVar n} \\<union> cod s2)", "by (force simp add: cod_def dom_def\n    dest!:free_tv_app_subst_te [THEN subsetD])"], ["", "lemma free_tv_o_subst: \n    \"free_tv ($ S1 \\<circ> S2) \\<subseteq> free_tv S1 Un free_tv (S2 :: nat => typ)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv ($ S1 \\<circ> S2) \\<subseteq> free_tv S1 \\<union> free_tv S2", "unfolding o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. free_tv (\\<lambda>x. $ S1 (S2 x))\n    \\<subseteq> free_tv S1 \\<union> free_tv S2", "by (rule free_tv_comp_subst)"], ["", "lemma free_tv_of_substitutions_extend_to_types:\n    \"n : free_tv t \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S t::typ)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> free_tv t \\<Longrightarrow>\n    free_tv (S n) \\<subseteq> free_tv ($ S t)", "by (induct t) auto"], ["", "lemma free_tv_of_substitutions_extend_to_schemes:\n    \"n : free_tv sch \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S sch::type_scheme)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> free_tv sch \\<Longrightarrow>\n    free_tv (S n) \\<subseteq> free_tv ($ S sch)", "by (induct sch) auto"], ["", "lemma free_tv_of_substitutions_extend_to_scheme_lists [simp]:\n    \"n : free_tv A \\<Longrightarrow> free_tv (S n) \\<subseteq> free_tv ($ S A::type_scheme list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> free_tv A \\<Longrightarrow>\n    free_tv (S n) \\<subseteq> free_tv ($ S A)", "by (induct A) (auto dest: free_tv_of_substitutions_extend_to_schemes)"], ["", "lemma free_tv_ML_scheme:\n  fixes sch :: type_scheme\n  shows \"(n : free_tv sch) = (n: set (free_tv_ML sch))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> free_tv sch) = (n \\<in> set (free_tv_ML sch))", "by (induct sch) simp_all"], ["", "lemma free_tv_ML_scheme_list:\n  fixes A :: \"type_scheme list\"\n  shows \"(n : free_tv A) = (n: set (free_tv_ML A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n \\<in> free_tv A) = (n \\<in> set (free_tv_ML A))", "by (induct_tac A) (simp_all add: free_tv_ML_scheme)\n\n\n\\<comment> \\<open>lemmata for @{text bound_tv}\\<close>"], ["", "lemma bound_tv_mk_scheme [simp]: \"bound_tv (mk_scheme t) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound_tv (mk_scheme t) = {}", "by (induct t) simp_all"], ["", "lemma bound_tv_subst_scheme [simp]:\n  fixes sch :: type_scheme\n  shows \"bound_tv ($ S sch) = bound_tv sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound_tv ($ S sch) = bound_tv sch", "by (induct sch) simp_all"], ["", "lemma bound_tv_subst_scheme_list [simp]: \n  fixes A :: \"type_scheme list\"\n  shows \"bound_tv ($ S A) = bound_tv A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bound_tv ($ S A) = bound_tv A", "by (induct A) simp_all\n\n\n\\<comment> \\<open>lemmata for @{text new_tv}\\<close>"], ["", "lemma new_tv_subst: \n  \"new_tv n S = ((\\<forall>m. n \\<le> m \\<longrightarrow> (S m = TVar m)) \\<and>  \n                 (\\<forall>l. l < n \\<longrightarrow> new_tv n (S l) ))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n S =\n    ((\\<forall>m\\<ge>n. S m = TVar m) \\<and> (\\<forall>l<n. new_tv n (S l)))", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n) =\n    ((\\<forall>m\\<ge>n. S m = TVar m) \\<and>\n     (\\<forall>l<n.\n         \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n))", "apply (safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> S m = TVar m\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l)\\<rbrakk>\n       \\<Longrightarrow> m < n\n 3. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "(* ==> *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        n \\<le> m\\<rbrakk>\n       \\<Longrightarrow> S m = TVar m\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l)\\<rbrakk>\n       \\<Longrightarrow> m < n\n 3. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (fastforce dest: leD simp add: free_tv_subst dom_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l)\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (subgoal_tac \"m:cod S | S l = TVar l\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l);\n        m \\<in> cod S \\<or> S l = TVar l\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l)\\<rbrakk>\n       \\<Longrightarrow> m \\<in> cod S \\<or> S l = TVar l\n 3. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply safe"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); m \\<in> cod S\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l = TVar l\\<rbrakk>\n       \\<Longrightarrow> m < n\n 3. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l \\<noteq> TVar l\\<rbrakk>\n       \\<Longrightarrow> m \\<in> cod S\n 4. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (fastforce dest: UnI2 simp add: free_tv_subst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l = TVar l\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l \\<noteq> TVar l\\<rbrakk>\n       \\<Longrightarrow> m \\<in> cod S\n 3. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (drule_tac P = \"\\<lambda>x. m:free_tv x\" in subst , assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); m \\<in> free_tv (TVar l)\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l \\<noteq> TVar l\\<rbrakk>\n       \\<Longrightarrow> m \\<in> cod S\n 3. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>l m.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv S \\<longrightarrow> m < n;\n        l < n; m \\<in> free_tv (S l); S l \\<noteq> TVar l\\<rbrakk>\n       \\<Longrightarrow> m \\<in> cod S\n 2. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (fastforce simp add: free_tv_subst cod_def dom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "(* <== *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv S\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (unfold free_tv_subst cod_def dom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> {n. S n \\<noteq> TVar n} \\<union>\n                (\\<Union>m\\<in>{n. S n \\<noteq> TVar n}.\n                    free_tv (S m))\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply safe"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        S m \\<noteq> TVar m\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>m ma.\n       \\<lbrakk>\\<forall>m\\<ge>n. S m = TVar m;\n        \\<forall>l<n.\n           \\<forall>m. m \\<in> free_tv (S l) \\<longrightarrow> m < n;\n        m \\<in> free_tv (S ma); S ma \\<noteq> TVar ma\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (metis not_le_imp_less)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_list: \"new_tv n x = (\\<forall>y\\<in>set x. new_tv n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n x = (\\<forall>y\\<in>set x. new_tv n y)", "by (induct x) simp_all\n\n\\<comment> \\<open>substitution affects only variables occurring freely\\<close>"], ["", "lemma subst_te_new_tv [simp]:\n    \"new_tv n (t::typ) \\<longrightarrow> $(\\<lambda>x. if x=n then t' else S x) t = $S t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n t \\<longrightarrow>\n    $ (\\<lambda>x. if x = n then t' else S x) t = $ S t", "by (induct t) simp_all"], ["", "lemma subst_te_new_type_scheme [simp]:\n    \"new_tv n (sch::type_scheme) \\<Longrightarrow> $(\\<lambda>x. if x=n then sch' else S x) sch = $S sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n sch \\<Longrightarrow>\n    $ (\\<lambda>x. if x = n then sch' else S x) sch = $ S sch", "by (induct sch) simp_all"], ["", "lemma subst_tel_new_scheme_list [simp]:\n    \"new_tv n (A::type_scheme list) \\<Longrightarrow> $(\\<lambda>x. if x=n then t else S x) A = $S A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<Longrightarrow>\n    $ (\\<lambda>x. if x = n then t else S x) A = $ S A", "by (induct A) simp_all\n\n\n\\<comment> \\<open>all greater variables are also new\\<close>"], ["", "lemma new_tv_le: \n  \"n\\<le>m \\<Longrightarrow> new_tv n t \\<Longrightarrow> new_tv m t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; new_tv n t\\<rbrakk> \\<Longrightarrow> new_tv m t", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m;\n     \\<forall>m. m \\<in> free_tv t \\<longrightarrow> m < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>ma.\n                         ma \\<in> free_tv t \\<longrightarrow> ma < m", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma.\n       \\<lbrakk>n \\<le> m;\n        \\<forall>m. m \\<in> free_tv t \\<longrightarrow> m < n;\n        ma \\<in> free_tv t\\<rbrakk>\n       \\<Longrightarrow> ma < m", "apply (drule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma.\n       \\<lbrakk>n \\<le> m; ma \\<in> free_tv t;\n        ?m2 ma \\<in> free_tv t \\<longrightarrow> ?m2 ma < n\\<rbrakk>\n       \\<Longrightarrow> ma < m", "apply (erule (1) notE impE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ma.\n       \\<lbrakk>n \\<le> m; ma \\<in> free_tv t; ma < n\\<rbrakk>\n       \\<Longrightarrow> ma < m", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma [simp]: \"new_tv n t \\<Longrightarrow> new_tv (Suc n) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n t \\<Longrightarrow> new_tv (Suc n) t", "by (rule lessI [THEN less_imp_le [THEN new_tv_le]])"], ["", "lemma new_tv_typ_le: \"n\\<le>m \\<Longrightarrow> new_tv n (t::typ) \\<Longrightarrow> new_tv m t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; new_tv n t\\<rbrakk> \\<Longrightarrow> new_tv m t", "by (simp add: new_tv_le)"], ["", "lemma new_scheme_list_le: \"n\\<le>m \\<Longrightarrow> new_tv n (A::type_scheme list) \\<Longrightarrow> new_tv m A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; new_tv n A\\<rbrakk> \\<Longrightarrow> new_tv m A", "by (simp add: new_tv_le)"], ["", "lemma new_tv_subst_le: \"n\\<le>m \\<Longrightarrow> new_tv n (S::subst) \\<Longrightarrow> new_tv m S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; new_tv n S\\<rbrakk> \\<Longrightarrow> new_tv m S", "by (simp add: new_tv_le)\n\n\\<comment> \\<open>@{text new_tv} property remains if a substitution is applied\\<close>"], ["", "lemma new_tv_subst_var: \n  \"[| n<m; new_tv m (S::subst) |] ==> new_tv m (S n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n < m; new_tv m S\\<rbrakk> \\<Longrightarrow> new_tv m (S n)", "by (simp add: new_tv_subst)"], ["", "lemma new_tv_subst_te [simp]:\n    \"new_tv n S \\<Longrightarrow> new_tv n (t::typ) \\<Longrightarrow> new_tv n ($ S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_tv n S; new_tv n t\\<rbrakk>\n    \\<Longrightarrow> new_tv n ($ S t)", "by (induct t) (auto simp add: new_tv_subst)"], ["", "lemma new_tv_subst_type_scheme [rule_format, simp]: \n  \"new_tv n S \\<longrightarrow> new_tv n (sch::type_scheme) \\<longrightarrow> new_tv n ($ S sch)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n S \\<longrightarrow>\n    new_tv n sch \\<longrightarrow> new_tv n ($ S sch)", "apply (induct sch)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       new_tv n S \\<longrightarrow>\n       new_tv n (FVar x) \\<longrightarrow> new_tv n ($ S (FVar x))\n 2. \\<And>x.\n       new_tv n S \\<longrightarrow>\n       new_tv n (BVar x) \\<longrightarrow> new_tv n ($ S (BVar x))\n 3. \\<And>sch1 sch2.\n       \\<lbrakk>new_tv n S \\<longrightarrow>\n                new_tv n sch1 \\<longrightarrow> new_tv n ($ S sch1);\n        new_tv n S \\<longrightarrow>\n        new_tv n sch2 \\<longrightarrow> new_tv n ($ S sch2)\\<rbrakk>\n       \\<Longrightarrow> new_tv n S \\<longrightarrow>\n                         new_tv n (sch1 =-> sch2) \\<longrightarrow>\n                         new_tv n ($ S (sch1 =-> sch2))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       new_tv n S \\<longrightarrow>\n       x < n \\<longrightarrow> new_tv n (mk_scheme (S x))", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<forall>m.\n           m \\<in> free_tv S \\<longrightarrow> m < n) \\<longrightarrow>\n       x < n \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> free_tv (mk_scheme (S x)) \\<longrightarrow> m < n)", "apply (simp (no_asm) add: free_tv_subst dom_def cod_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<forall>m.\n           (S m = TVar m \\<longrightarrow>\n            (\\<exists>x.\n                S x \\<noteq> TVar x \\<and>\n                m \\<in> free_tv (S x))) \\<longrightarrow>\n           m < n) \\<longrightarrow>\n       x < n \\<longrightarrow>\n       (\\<forall>m. m \\<in> free_tv (S x) \\<longrightarrow> m < n)", "apply (intro strip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x m.\n       \\<lbrakk>\\<forall>m.\n                   (S m = TVar m \\<longrightarrow>\n                    (\\<exists>x.\n                        S x \\<noteq> TVar x \\<and>\n                        m \\<in> free_tv (S x))) \\<longrightarrow>\n                   m < n;\n        x < n; m \\<in> free_tv (S x)\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (rename_tac nat m)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat m.\n       \\<lbrakk>\\<forall>m.\n                   (S m = TVar m \\<longrightarrow>\n                    (\\<exists>x.\n                        S x \\<noteq> TVar x \\<and>\n                        m \\<in> free_tv (S x))) \\<longrightarrow>\n                   m < n;\n        nat < n; m \\<in> free_tv (S nat)\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (case_tac \"S nat = TVar nat\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nat m.\n       \\<lbrakk>\\<forall>m.\n                   (S m = TVar m \\<longrightarrow>\n                    (\\<exists>x.\n                        S x \\<noteq> TVar x \\<and>\n                        m \\<in> free_tv (S x))) \\<longrightarrow>\n                   m < n;\n        nat < n; m \\<in> free_tv (S nat); S nat = TVar nat\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>nat m.\n       \\<lbrakk>\\<forall>m.\n                   (S m = TVar m \\<longrightarrow>\n                    (\\<exists>x.\n                        S x \\<noteq> TVar x \\<and>\n                        m \\<in> free_tv (S x))) \\<longrightarrow>\n                   m < n;\n        nat < n; m \\<in> free_tv (S nat); S nat \\<noteq> TVar nat\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat m.\n       \\<lbrakk>\\<forall>m.\n                   (S m = TVar m \\<longrightarrow>\n                    (\\<exists>x.\n                        S x \\<noteq> TVar x \\<and>\n                        m \\<in> free_tv (S x))) \\<longrightarrow>\n                   m < n;\n        nat < n; m \\<in> free_tv (S nat); S nat \\<noteq> TVar nat\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply (drule_tac x = \"m\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat m.\n       \\<lbrakk>nat < n; m \\<in> free_tv (S nat); S nat \\<noteq> TVar nat;\n        (S m = TVar m \\<longrightarrow>\n         (\\<exists>x.\n             S x \\<noteq> TVar x \\<and>\n             m \\<in> free_tv (S x))) \\<longrightarrow>\n        m < n\\<rbrakk>\n       \\<Longrightarrow> m < n", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_subst_scheme_list [simp]:\n    \"new_tv n S \\<Longrightarrow> new_tv n (A::type_scheme list) \\<Longrightarrow> new_tv n ($ S A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_tv n S; new_tv n A\\<rbrakk>\n    \\<Longrightarrow> new_tv n ($ S A)", "by (induct A) auto"], ["", "lemma new_tv_Suc_list: \"new_tv n A \\<longrightarrow> new_tv (Suc n) ((TVar n)#A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<longrightarrow> new_tv (Suc n) (TVar n # A)", "by (simp add: new_tv_list)"], ["", "lemma new_tv_only_depends_on_free_tv_type_scheme:\n  fixes sch :: type_scheme\n  shows \"free_tv sch = free_tv sch' \\<Longrightarrow> new_tv n sch \\<Longrightarrow> new_tv n sch'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>free_tv sch = free_tv sch'; new_tv n sch\\<rbrakk>\n    \\<Longrightarrow> new_tv n sch'", "unfolding new_tv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>free_tv sch = free_tv sch';\n     \\<forall>m. m \\<in> free_tv sch \\<longrightarrow> m < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m.\n                         m \\<in> free_tv sch' \\<longrightarrow> m < n", "by simp"], ["", "lemma new_tv_only_depends_on_free_tv_scheme_list:\n  fixes A :: \"type_scheme list\"\n  shows \"free_tv A = free_tv A' \\<Longrightarrow> new_tv n A \\<Longrightarrow> new_tv n A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>free_tv A = free_tv A'; new_tv n A\\<rbrakk>\n    \\<Longrightarrow> new_tv n A'", "unfolding new_tv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>free_tv A = free_tv A';\n     \\<forall>m. m \\<in> free_tv A \\<longrightarrow> m < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m. m \\<in> free_tv A' \\<longrightarrow> m < n", "by simp"], ["", "lemma new_tv_nth_nat_A [rule_format]: \n  \"\\<forall>nat. nat < length A \\<longrightarrow> new_tv n A \\<longrightarrow> (new_tv n (A!nat))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nat<length A. new_tv n A \\<longrightarrow> new_tv n (A ! nat)", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>nat<length A.\n       (\\<forall>m.\n           m \\<in> free_tv A \\<longrightarrow> m < n) \\<longrightarrow>\n       (\\<forall>m. m \\<in> free_tv (A ! nat) \\<longrightarrow> m < n)", "apply (induct A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>nat<length [].\n       (\\<forall>m.\n           m \\<in> free_tv [] \\<longrightarrow> m < n) \\<longrightarrow>\n       (\\<forall>m. m \\<in> free_tv ([] ! nat) \\<longrightarrow> m < n)\n 2. \\<And>a A.\n       \\<forall>nat<length A.\n          (\\<forall>m.\n              m \\<in> free_tv A \\<longrightarrow> m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv (A ! nat) \\<longrightarrow>\n              m < n) \\<Longrightarrow>\n       \\<forall>nat<length (a # A).\n          (\\<forall>m.\n              m \\<in> free_tv (a # A) \\<longrightarrow>\n              m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv ((a # A) ! nat) \\<longrightarrow> m < n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<forall>nat<length A.\n          (\\<forall>m.\n              m \\<in> free_tv A \\<longrightarrow> m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv (A ! nat) \\<longrightarrow>\n              m < n) \\<Longrightarrow>\n       \\<forall>nat<length (a # A).\n          (\\<forall>m.\n              m \\<in> free_tv (a # A) \\<longrightarrow>\n              m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv ((a # A) ! nat) \\<longrightarrow> m < n)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A nat.\n       \\<forall>nat<length A.\n          (\\<forall>m.\n              m \\<in> free_tv A \\<longrightarrow> m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv (A ! nat) \\<longrightarrow>\n              m < n) \\<Longrightarrow>\n       nat < length (a # A) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> free_tv (a # A) \\<longrightarrow>\n           m < n) \\<longrightarrow>\n       (\\<forall>m. m \\<in> free_tv ((a # A) ! nat) \\<longrightarrow> m < n)", "apply (induct_tac \"nat\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A nat.\n       \\<forall>nat<length A.\n          (\\<forall>m.\n              m \\<in> free_tv A \\<longrightarrow> m < n) \\<longrightarrow>\n          (\\<forall>m.\n              m \\<in> free_tv (A ! nat) \\<longrightarrow>\n              m < n) \\<Longrightarrow>\n       0 < length (a # A) \\<longrightarrow>\n       (\\<forall>m.\n           m \\<in> free_tv (a # A) \\<longrightarrow>\n           m < n) \\<longrightarrow>\n       (\\<forall>m. m \\<in> free_tv ((a # A) ! 0) \\<longrightarrow> m < n)\n 2. \\<And>a A nat na.\n       \\<lbrakk>\\<forall>nat<length A.\n                   (\\<forall>m.\n                       m \\<in> free_tv A \\<longrightarrow>\n                       m < n) \\<longrightarrow>\n                   (\\<forall>m.\n                       m \\<in> free_tv (A ! nat) \\<longrightarrow> m < n);\n        na < length (a # A) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv (a # A) \\<longrightarrow>\n            m < n) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv ((a # A) ! na) \\<longrightarrow> m < n)\\<rbrakk>\n       \\<Longrightarrow> Suc na < length (a # A) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv (a # A) \\<longrightarrow>\n                             m < n) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv\n((a # A) ! Suc na) \\<longrightarrow>\n                             m < n)", "apply (intro strip)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A nat m.\n       \\<lbrakk>\\<forall>nat<length A.\n                   (\\<forall>m.\n                       m \\<in> free_tv A \\<longrightarrow>\n                       m < n) \\<longrightarrow>\n                   (\\<forall>m.\n                       m \\<in> free_tv (A ! nat) \\<longrightarrow> m < n);\n        0 < length (a # A);\n        \\<forall>m. m \\<in> free_tv (a # A) \\<longrightarrow> m < n;\n        m \\<in> free_tv ((a # A) ! 0)\\<rbrakk>\n       \\<Longrightarrow> m < n\n 2. \\<And>a A nat na.\n       \\<lbrakk>\\<forall>nat<length A.\n                   (\\<forall>m.\n                       m \\<in> free_tv A \\<longrightarrow>\n                       m < n) \\<longrightarrow>\n                   (\\<forall>m.\n                       m \\<in> free_tv (A ! nat) \\<longrightarrow> m < n);\n        na < length (a # A) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv (a # A) \\<longrightarrow>\n            m < n) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv ((a # A) ! na) \\<longrightarrow> m < n)\\<rbrakk>\n       \\<Longrightarrow> Suc na < length (a # A) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv (a # A) \\<longrightarrow>\n                             m < n) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv\n((a # A) ! Suc na) \\<longrightarrow>\n                             m < n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A nat na.\n       \\<lbrakk>\\<forall>nat<length A.\n                   (\\<forall>m.\n                       m \\<in> free_tv A \\<longrightarrow>\n                       m < n) \\<longrightarrow>\n                   (\\<forall>m.\n                       m \\<in> free_tv (A ! nat) \\<longrightarrow> m < n);\n        na < length (a # A) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv (a # A) \\<longrightarrow>\n            m < n) \\<longrightarrow>\n        (\\<forall>m.\n            m \\<in> free_tv ((a # A) ! na) \\<longrightarrow> m < n)\\<rbrakk>\n       \\<Longrightarrow> Suc na < length (a # A) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv (a # A) \\<longrightarrow>\n                             m < n) \\<longrightarrow>\n                         (\\<forall>m.\n                             m \\<in> free_tv\n((a # A) ! Suc na) \\<longrightarrow>\n                             m < n)", "apply (simp (no_asm))"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n\n\\<comment> \\<open>composition of substitutions preserves @{text new_tv} proposition\\<close>"], ["", "lemma new_tv_subst_comp_1 [simp]: \n  \"[| new_tv n (S::subst); new_tv n R |] ==> new_tv n (($ R) \\<circ> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_tv n S; new_tv n R\\<rbrakk>\n    \\<Longrightarrow> new_tv n ($ R \\<circ> S)", "by (simp add: new_tv_subst)"], ["", "lemma new_tv_subst_comp_2 [simp]:\n  \"[| new_tv n (S::subst); new_tv n R |] ==> new_tv n (\\<lambda>v.$ R (S v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>new_tv n S; new_tv n R\\<rbrakk>\n    \\<Longrightarrow> new_tv n (\\<lambda>v. $ R (S v))", "by (simp add: new_tv_subst)\n\n\\<comment> \\<open>new type variables do not occur freely in a type structure\\<close>"], ["", "lemma new_tv_not_free_tv [simp]:\n    \"new_tv n A \\<Longrightarrow> n\\<notin>(free_tv A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<Longrightarrow> n \\<notin> free_tv A", "by (auto simp add: new_tv_def)"], ["", "lemma fresh_variable_types [simp]: \"\\<And>t::typ. \\<exists>n. (new_tv n t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t. \\<exists>n. new_tv n t", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<exists>n. \\<forall>m. m \\<in> free_tv t \\<longrightarrow> m < n", "apply (induct_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (TVar x) \\<longrightarrow> m < n\n 2. \\<And>t x1a x2.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (rename_tac nat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t nat.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (TVar nat) \\<longrightarrow> m < n\n 2. \\<And>t x1a x2.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (rule_tac x = \"Suc nat\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t nat.\n       \\<forall>m. m \\<in> free_tv (TVar nat) \\<longrightarrow> m < Suc nat\n 2. \\<And>t x1a x2.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x1a x2.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x1a x2 n na.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < na\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (rename_tac \"n'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x1a x2 n n'.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                               m < n", "apply (rule_tac x = \"max n n'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x1a x2 n n'.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2 \\<longrightarrow> m < n'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            m \\<in> free_tv (x1a -> x2) \\<longrightarrow>\n                            m < max n n'", "apply (simp add: less_max_iff_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fresh_variable_type_schemes [simp]:\n  \"\\<And>sch::type_scheme. \\<exists>n. (new_tv n sch)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch. \\<exists>n. new_tv n sch", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch.\n       \\<exists>n. \\<forall>m. m \\<in> free_tv sch \\<longrightarrow> m < n", "apply (induct_tac sch)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sch x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (FVar x) \\<longrightarrow> m < n\n 2. \\<And>sch x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (BVar x) \\<longrightarrow> m < n\n 3. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rename_tac nat)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sch nat.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (FVar nat) \\<longrightarrow> m < n\n 2. \\<And>sch x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (BVar x) \\<longrightarrow> m < n\n 3. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rule_tac x = \"Suc nat\" in exI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sch nat.\n       \\<forall>m. m \\<in> free_tv (FVar nat) \\<longrightarrow> m < Suc nat\n 2. \\<And>sch x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (BVar x) \\<longrightarrow> m < n\n 3. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (simp (no_asm))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sch x.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (BVar x) \\<longrightarrow> m < n\n 2. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rename_tac nat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sch nat.\n       \\<exists>n.\n          \\<forall>m. m \\<in> free_tv (BVar nat) \\<longrightarrow> m < n\n 2. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rule_tac x = \"Suc nat\" in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sch nat.\n       \\<forall>m. m \\<in> free_tv (BVar nat) \\<longrightarrow> m < Suc nat\n 2. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x1a x2a.\n       \\<lbrakk>\\<exists>n.\n                   \\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<exists>n.\n           \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x1a x2a n na.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < na\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rename_tac \"n'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x1a x2a n n'.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            \\<forall>m.\n                               m \\<in> free_tv\n  (x1a =-> x2a) \\<longrightarrow>\n                               m < n", "apply (rule_tac x = \"max n n'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x1a x2a n n'.\n       \\<lbrakk>\\<forall>m. m \\<in> free_tv x1a \\<longrightarrow> m < n;\n        \\<forall>m. m \\<in> free_tv x2a \\<longrightarrow> m < n'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>m.\n                            m \\<in> free_tv (x1a =-> x2a) \\<longrightarrow>\n                            m < max n n'", "apply (simp add: less_max_iff_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fresh_variable_type_scheme_lists [simp]: \n  \"\\<And>A::type_scheme list. \\<exists>n. (new_tv n A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. \\<exists>n. new_tv n A", "apply (induct_tac A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A. \\<exists>n. new_tv n []\n 2. \\<And>A a list.\n       \\<exists>n. new_tv n list \\<Longrightarrow>\n       \\<exists>n. new_tv n (a # list)", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a list.\n       \\<exists>n. new_tv n list \\<Longrightarrow>\n       \\<exists>n. new_tv n (a # list)", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       \\<exists>n. new_tv n list \\<Longrightarrow>\n       \\<exists>n. new_tv n a \\<and> new_tv n list", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n.\n       new_tv n list \\<Longrightarrow>\n       \\<exists>n. new_tv n a \\<and> new_tv n list", "apply (cut_tac sch = \"a\" in fresh_variable_type_schemes)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n.\n       \\<lbrakk>new_tv n list; \\<exists>n. new_tv n a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. new_tv n a \\<and> new_tv n list", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n na.\n       \\<lbrakk>new_tv n list; new_tv na a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. new_tv n a \\<and> new_tv n list", "apply (rename_tac \"n'\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. new_tv n a \\<and> new_tv n list", "apply (rule_tac x = \" (max n n') \" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n n') a \\<and> new_tv (max n n') list", "apply (subgoal_tac \"n \\<le> (max n n') \")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a; n \\<le> max n n'\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n n') a \\<and> new_tv (max n n') list\n 2. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a\\<rbrakk>\n       \\<Longrightarrow> n \\<le> max n n'", "apply (subgoal_tac \"n' \\<le> (max n n') \")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a; n \\<le> max n n';\n        n' \\<le> max n n'\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n n') a \\<and> new_tv (max n n') list\n 2. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a; n \\<le> max n n'\\<rbrakk>\n       \\<Longrightarrow> n' \\<le> max n n'\n 3. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a\\<rbrakk>\n       \\<Longrightarrow> n \\<le> max n n'", "apply (fast dest: new_tv_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a; n \\<le> max n n'\\<rbrakk>\n       \\<Longrightarrow> n' \\<le> max n n'\n 2. \\<And>a list n n'.\n       \\<lbrakk>new_tv n list; new_tv n' a\\<rbrakk>\n       \\<Longrightarrow> n \\<le> max n n'", "apply (simp_all add: le_max_iff_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma make_one_new_out_of_two: \n  \"[| \\<exists>n1. (new_tv n1 x); \\<exists>n2. (new_tv n2 y)|] ==> \\<exists>n. (new_tv n x) \\<and> (new_tv n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>n1. new_tv n1 x; \\<exists>n2. new_tv n2 y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>n. new_tv n x \\<and> new_tv n y", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. new_tv n x \\<and> new_tv n y", "apply (rename_tac \"n1\" \"n2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n. new_tv n x \\<and> new_tv n y", "apply (rule_tac x = \" (max n1 n2) \" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n1 n2) x \\<and> new_tv (max n1 n2) y", "apply (subgoal_tac \"n1 \\<le> max n1 n2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y; n1 \\<le> max n1 n2\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n1 n2) x \\<and> new_tv (max n1 n2) y\n 2. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> n1 \\<le> max n1 n2", "apply (subgoal_tac \"n2 \\<le> max n1 n2\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y; n1 \\<le> max n1 n2;\n        n2 \\<le> max n1 n2\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n1 n2) x \\<and> new_tv (max n1 n2) y\n 2. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y; n1 \\<le> max n1 n2\\<rbrakk>\n       \\<Longrightarrow> n2 \\<le> max n1 n2\n 3. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> n1 \\<le> max n1 n2", "apply (fast dest: new_tv_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y; n1 \\<le> max n1 n2\\<rbrakk>\n       \\<Longrightarrow> n2 \\<le> max n1 n2\n 2. \\<And>n1 n2.\n       \\<lbrakk>new_tv n1 x; new_tv n2 y\\<rbrakk>\n       \\<Longrightarrow> n1 \\<le> max n1 n2", "apply (simp_all (no_asm) add: le_max_iff_disj)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ex_fresh_variable: \n  \"\\<And>(A::type_scheme list) (A'::type_scheme list) (t::typ) (t'::typ).  \n          \\<exists>n. (new_tv n A) \\<and> (new_tv n A') \\<and> (new_tv n t) \\<and> (new_tv n t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<exists>n.\n          new_tv n A \\<and> new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (cut_tac t = \"t\" in fresh_variable_types)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<exists>n. new_tv n t \\<Longrightarrow>\n       \\<exists>n.\n          new_tv n A \\<and> new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (cut_tac t = \"t'\" in fresh_variable_types)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t; \\<exists>n. new_tv n t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (drule make_one_new_out_of_two)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A A' t t'.\n       \\<exists>n. new_tv n t' \\<Longrightarrow>\n       \\<exists>n2. new_tv n2 (?y4 A A' t t')\n 2. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t';\n        \\<exists>n. new_tv n t \\<and> new_tv n (?y4 A A' t t')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t';\n        \\<exists>n. new_tv n t \\<and> new_tv n t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (erule_tac V = \"\\<exists>n. new_tv n t'\" in thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<exists>n. new_tv n t \\<and> new_tv n t' \\<Longrightarrow>\n       \\<exists>n.\n          new_tv n A \\<and> new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (cut_tac A = \"A\" in fresh_variable_type_scheme_lists)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t \\<and> new_tv n t';\n        \\<exists>n. new_tv n A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (cut_tac A = \"A'\" in fresh_variable_type_scheme_lists)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t \\<and> new_tv n t';\n        \\<exists>n. new_tv n A; \\<exists>n. new_tv n A'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (rotate_tac 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n A; \\<exists>n. new_tv n A';\n        \\<exists>n. new_tv n t \\<and> new_tv n t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (drule make_one_new_out_of_two)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n A';\n        \\<exists>n. new_tv n t \\<and> new_tv n t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n2. new_tv n2 (?y12 A A' t t')\n 2. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n A';\n        \\<exists>n. new_tv n t \\<and> new_tv n t';\n        \\<exists>n. new_tv n A \\<and> new_tv n (?y12 A A' t t')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n A';\n        \\<exists>n. new_tv n t \\<and> new_tv n t';\n        \\<exists>n. new_tv n A \\<and> new_tv n A'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (erule_tac V = \"\\<exists>n. new_tv n A'\" in thin_rl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t'.\n       \\<lbrakk>\\<exists>n. new_tv n t \\<and> new_tv n t';\n        \\<exists>n. new_tv n A \\<and> new_tv n A'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (erule exE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t' n na.\n       \\<lbrakk>new_tv n t \\<and> new_tv n t';\n        new_tv na A \\<and> new_tv na A'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (rename_tac n2 n1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t' n2 n1.\n       \\<lbrakk>new_tv n2 t \\<and> new_tv n2 t';\n        new_tv n1 A \\<and> new_tv n1 A'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n.\n                            new_tv n A \\<and>\n                            new_tv n A' \\<and> new_tv n t \\<and> new_tv n t'", "apply (rule_tac x = \" (max n1 n2) \" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t' n2 n1.\n       \\<lbrakk>new_tv n2 t \\<and> new_tv n2 t';\n        new_tv n1 A \\<and> new_tv n1 A'\\<rbrakk>\n       \\<Longrightarrow> new_tv (max n1 n2) A \\<and>\n                         new_tv (max n1 n2) A' \\<and>\n                         new_tv (max n1 n2) t \\<and> new_tv (max n1 n2) t'", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t' n2 n1.\n       \\<lbrakk>(\\<forall>m.\n                    m \\<in> free_tv t \\<longrightarrow> m < n2) \\<and>\n                (\\<forall>m. m \\<in> free_tv t' \\<longrightarrow> m < n2);\n        (\\<forall>m. m \\<in> free_tv A \\<longrightarrow> m < n1) \\<and>\n        (\\<forall>m. m \\<in> free_tv A' \\<longrightarrow> m < n1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m.\n                             m \\<in> free_tv A \\<longrightarrow>\n                             m < max n1 n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv A' \\<longrightarrow>\n                             m < max n1 n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv t \\<longrightarrow>\n                             m < max n1 n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv t' \\<longrightarrow>\n                             m < max n1 n2)", "apply (simp (no_asm) add: less_max_iff_disj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A A' t t' n2 n1.\n       \\<lbrakk>(\\<forall>m.\n                    m \\<in> free_tv t \\<longrightarrow> m < n2) \\<and>\n                (\\<forall>m. m \\<in> free_tv t' \\<longrightarrow> m < n2);\n        (\\<forall>m. m \\<in> free_tv A \\<longrightarrow> m < n1) \\<and>\n        (\\<forall>m. m \\<in> free_tv A' \\<longrightarrow> m < n1)\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>m.\n                             m \\<in> free_tv A \\<longrightarrow>\n                             m < n1 \\<or> m < n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv A' \\<longrightarrow>\n                             m < n1 \\<or> m < n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv t \\<longrightarrow>\n                             m < n1 \\<or> m < n2) \\<and>\n                         (\\<forall>m.\n                             m \\<in> free_tv t' \\<longrightarrow>\n                             m < n1 \\<or> m < n2)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n\\<comment> \\<open>mgu does not introduce new type variables\\<close>"], ["", "lemma mgu_new: \n      \"[|mgu t1 t2 = Some u; new_tv n t1; new_tv n t2|] ==> new_tv n u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mgu t1 t2 = Some u; new_tv n t1; new_tv n t2\\<rbrakk>\n    \\<Longrightarrow> new_tv n u", "apply (unfold new_tv_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mgu t1 t2 = Some u;\n     \\<forall>m. m \\<in> free_tv t1 \\<longrightarrow> m < n;\n     \\<forall>m. m \\<in> free_tv t2 \\<longrightarrow> m < n\\<rbrakk>\n    \\<Longrightarrow> \\<forall>m. m \\<in> free_tv u \\<longrightarrow> m < n", "apply (fast dest: mgu_free)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(* lemmata for substitutions *)"], ["", "lemma length_app_subst_list [simp]:\n   \"\\<And>A:: ('a::type_struct) list. length ($ S A) = length A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. length ($ S A) = length A", "unfolding app_subst_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. length (map ($ S) A) = length A", "by simp"], ["", "lemma subst_TVar_scheme [simp]:\n  fixes sch :: type_scheme\n  shows \"$ TVar sch = sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ TVar sch = sch", "by (induct sch) simp_all"], ["", "lemma subst_TVar_scheme_list [simp]:\n  fixes A :: \"type_scheme list\"\n  shows \"$ TVar A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ TVar A = A", "by (induct A) (simp_all add: app_subst_list)\n\n\\<comment> \\<open>application of @{text id_subst} does not change type expression\\<close>"], ["", "lemma app_subst_id_te [simp]: \"$ id_subst = (\\<lambda>t::typ. t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ id_subst = (\\<lambda>t. t)", "apply (unfold id_subst_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. $ TVar = (\\<lambda>t. t)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t. $ TVar t = t", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x. $ TVar (TVar x) = TVar x\n 2. \\<And>t x1a x2.\n       \\<lbrakk>$ TVar x1a = x1a; $ TVar x2 = x2\\<rbrakk>\n       \\<Longrightarrow> $ TVar (x1a -> x2) = x1a -> x2", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma app_subst_id_type_scheme [simp]:\n  \"$ id_subst = (\\<lambda>sch::type_scheme. sch)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ id_subst = (\\<lambda>sch. sch)", "apply (unfold id_subst_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. $ TVar = (\\<lambda>sch. sch)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch. $ TVar sch = sch", "apply (induct_tac \"sch\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>sch x. $ TVar (FVar x) = FVar x\n 2. \\<And>sch x. $ TVar (BVar x) = BVar x\n 3. \\<And>sch x1a x2a.\n       \\<lbrakk>$ TVar x1a = x1a; $ TVar x2a = x2a\\<rbrakk>\n       \\<Longrightarrow> $ TVar (x1a =-> x2a) = x1a =-> x2a", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n\\<comment> \\<open>application of @{text id_subst} does not change list of type expressions\\<close>"], ["", "lemma app_subst_id_tel [simp]: \n  \"$ id_subst = (\\<lambda>A::type_scheme list. A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ id_subst = (\\<lambda>A. A)", "apply (unfold app_subst_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ($ id_subst) = (\\<lambda>A. A)", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. map ($ id_subst) A = A", "apply (induct_tac \"A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A. map ($ id_subst) [] = []\n 2. \\<And>A a list.\n       map ($ id_subst) list = list \\<Longrightarrow>\n       map ($ id_subst) (a # list) = a # list", "apply simp_all"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma id_subst_sch [simp]:\n  fixes sch :: type_scheme\n  shows \"$ id_subst sch = sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ id_subst sch = sch", "by (induct sch) (simp_all add: id_subst_def)"], ["", "lemma id_subst_A [simp]:\n  fixes A :: \"type_scheme list\"\n  shows \"$ id_subst A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ id_subst A = A", "by (induct A) simp_all\n\n\\<comment> \\<open>composition of substitutions\\<close>"], ["", "lemma o_id_subst [simp]: \"$S \\<circ> id_subst = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ S \\<circ> id_subst = S", "unfolding id_subst_def o_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. $ S (TVar x)) = S", "by simp"], ["", "lemma subst_comp_te: \"$ R ($ S t::typ) = $ (\\<lambda>x. $ R (S x) ) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ R ($ S t) = $ (\\<lambda>x. $ R (S x)) t", "by (induct t) simp_all"], ["", "lemma subst_comp_type_scheme: \n  \"$ R ($ S sch::type_scheme) = $ (\\<lambda>x. $ R (S x) ) sch\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ R ($ S sch) = $ (\\<lambda>x. $ R (S x)) sch", "by (induct sch) simp_all"], ["", "lemma subst_comp_scheme_list: \n  \"$ R ($ S A::type_scheme list) = $ (\\<lambda>x. $ R (S x)) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ R ($ S A) = $ (\\<lambda>x. $ R (S x)) A", "unfolding app_subst_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ($ R) (map ($ S) A) = map ($ (\\<lambda>x. $ R (S x))) A", "proof (induct A)"], ["proof (state)\ngoal (2 subgoals):\n 1. map ($ R) (map ($ S) []) = map ($ (\\<lambda>x. $ R (S x))) []\n 2. \\<And>a A.\n       map ($ R) (map ($ S) A) =\n       map ($ (\\<lambda>x. $ R (S x))) A \\<Longrightarrow>\n       map ($ R) (map ($ S) (a # A)) =\n       map ($ (\\<lambda>x. $ R (S x))) (a # A)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. map ($ R) (map ($ S) []) = map ($ (\\<lambda>x. $ R (S x))) []\n 2. \\<And>a A.\n       map ($ R) (map ($ S) A) =\n       map ($ (\\<lambda>x. $ R (S x))) A \\<Longrightarrow>\n       map ($ R) (map ($ S) (a # A)) =\n       map ($ (\\<lambda>x. $ R (S x))) (a # A)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. map ($ R) (map ($ S) []) = map ($ (\\<lambda>x. $ R (S x))) []", "by simp"], ["proof (state)\nthis:\n  map ($ R) (map ($ S) []) = map ($ (\\<lambda>x. $ R (S x))) []\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       map ($ R) (map ($ S) A) =\n       map ($ (\\<lambda>x. $ R (S x))) A \\<Longrightarrow>\n       map ($ R) (map ($ S) (a # A)) =\n       map ($ (\\<lambda>x. $ R (S x))) (a # A)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       map ($ R) (map ($ S) A) =\n       map ($ (\\<lambda>x. $ R (S x))) A \\<Longrightarrow>\n       map ($ R) (map ($ S) (a # A)) =\n       map ($ (\\<lambda>x. $ R (S x))) (a # A)", "case (Cons x xl)"], ["proof (state)\nthis:\n  map ($ R) (map ($ S) xl) = map ($ (\\<lambda>x. $ R (S x))) xl\n\ngoal (1 subgoal):\n 1. \\<And>a A.\n       map ($ R) (map ($ S) A) =\n       map ($ (\\<lambda>x. $ R (S x))) A \\<Longrightarrow>\n       map ($ R) (map ($ S) (a # A)) =\n       map ($ (\\<lambda>x. $ R (S x))) (a # A)", "then"], ["proof (chain)\npicking this:\n  map ($ R) (map ($ S) xl) = map ($ (\\<lambda>x. $ R (S x))) xl", "show ?case"], ["proof (prove)\nusing this:\n  map ($ R) (map ($ S) xl) = map ($ (\\<lambda>x. $ R (S x))) xl\n\ngoal (1 subgoal):\n 1. map ($ R) (map ($ S) (x # xl)) =\n    map ($ (\\<lambda>x. $ R (S x))) (x # xl)", "by (simp add: subst_comp_type_scheme)"], ["proof (state)\nthis:\n  map ($ R) (map ($ S) (x # xl)) = map ($ (\\<lambda>x. $ R (S x))) (x # xl)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subst_id_on_type_scheme_list': \n  fixes A :: \"type_scheme list\"\n  shows \"\\<forall>x \\<in> free_tv A. S x = (TVar x) \\<Longrightarrow> $ S A = $ id_subst A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>free_tv A. S x = TVar x \\<Longrightarrow>\n    $ S A = $ id_subst A", "apply (rule scheme_list_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>free_tv A. S x = TVar x;\n        x \\<in> free_tv A\\<rbrakk>\n       \\<Longrightarrow> S x = id_subst x", "apply (simp add: id_subst_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subst_id_on_type_scheme_list: \n  fixes A :: \"type_scheme list\"\n  shows \"\\<forall>x \\<in> free_tv A. S x = (TVar x) \\<Longrightarrow> $ S A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>free_tv A. S x = TVar x \\<Longrightarrow> $ S A = A", "apply (subst subst_id_on_type_scheme_list')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>x\\<in>free_tv A. S x = TVar x \\<Longrightarrow>\n    \\<forall>x\\<in>free_tv A. S x = TVar x\n 2. \\<forall>x\\<in>free_tv A. S x = TVar x \\<Longrightarrow>\n    $ id_subst A = A", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>free_tv A. S x = TVar x \\<Longrightarrow>\n    $ id_subst A = A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nth_subst [rule_format]: \n  \"\\<forall>n. n < length A \\<longrightarrow> ($ S A)!n = $S (A!n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n<length A. $ S A ! n = $ S (A ! n)", "apply (induct A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n<length []. $ S [] ! n = $ S ([] ! n)\n 2. \\<And>a A.\n       \\<forall>n<length A. $ S A ! n = $ S (A ! n) \\<Longrightarrow>\n       \\<forall>n<length (a # A). $ S (a # A) ! n = $ S ((a # A) ! n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A.\n       \\<forall>n<length A. $ S A ! n = $ S (A ! n) \\<Longrightarrow>\n       \\<forall>n<length (a # A). $ S (a # A) ! n = $ S ((a # A) ! n)", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A n.\n       \\<forall>n<length A. $ S A ! n = $ S (A ! n) \\<Longrightarrow>\n       n < length (a # A) \\<longrightarrow>\n       $ S (a # A) ! n = $ S ((a # A) ! n)", "apply (rename_tac \"n1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A n1.\n       \\<forall>n<length A. $ S A ! n = $ S (A ! n) \\<Longrightarrow>\n       n1 < length (a # A) \\<longrightarrow>\n       $ S (a # A) ! n1 = $ S ((a # A) ! n1)", "apply (induct_tac \"n1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a A n1.\n       \\<forall>n<length A. $ S A ! n = $ S (A ! n) \\<Longrightarrow>\n       0 < length (a # A) \\<longrightarrow>\n       $ S (a # A) ! 0 = $ S ((a # A) ! 0)\n 2. \\<And>a A n1 n.\n       \\<lbrakk>\\<forall>n<length A. $ S A ! n = $ S (A ! n);\n        n < length (a # A) \\<longrightarrow>\n        $ S (a # A) ! n = $ S ((a # A) ! n)\\<rbrakk>\n       \\<Longrightarrow> Suc n < length (a # A) \\<longrightarrow>\n                         $ S (a # A) ! Suc n = $ S ((a # A) ! Suc n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a A n1 n.\n       \\<lbrakk>\\<forall>n<length A. $ S A ! n = $ S (A ! n);\n        n < length (a # A) \\<longrightarrow>\n        $ S (a # A) ! n = $ S ((a # A) ! n)\\<rbrakk>\n       \\<Longrightarrow> Suc n < length (a # A) \\<longrightarrow>\n                         $ S (a # A) ! Suc n = $ S ((a # A) ! Suc n)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}