{"file_name": "/home/qj213/afp-2021-10-22/thys/MiniML/MiniML.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MiniML", "problem_names": ["lemma s'_t_equals_s_t: \n  \"\\<And>t::typ. $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then (S n) else (TVar n)) t = $S t\"", "lemma s'_a_equals_s_a: \n  \"\\<And>A::type_scheme list. $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then (S n) else (TVar n)) A = $S A\"", "lemma replace_s_by_s': \n \"$(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then S n else TVar n) A |-  \n     e :: $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then S n else TVar n) t  \n  \\<Longrightarrow> $S A |- e :: $S t\"", "lemma alpha_A': \n  \"\\<And>A::type_scheme list. $ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) A = $ id_subst A\"", "lemma alpha_A: \n  \"\\<And>A::type_scheme list. $ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) A = A\"", "lemma S_o_alpha_typ: \n  \"$ (S \\<circ> alpha) (t::typ) = $ S ($ (\\<lambda>x. TVar (alpha x)) t)\"", "lemma S_o_alpha_typ': \n  \"$ (\\<lambda>u. (S \\<circ> alpha) u) (t::typ) = $ S ($ (\\<lambda>x. TVar (alpha x)) t)\"", "lemma S_o_alpha_type_scheme: \n  \"$ (S \\<circ> alpha) (sch::type_scheme) = $ S ($ (\\<lambda>x. TVar (alpha x)) sch)\"", "lemma S_o_alpha_type_scheme_list: \n  \"$ (S \\<circ> alpha) (A::type_scheme list) = $ S ($ (\\<lambda>x. TVar (alpha x)) A)\"", "lemma S'_A_eq_S'_alpha_A: \"\\<And>A::type_scheme list.  \n      $ (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) A =  \n      $ ((\\<lambda>x. if x : free_tv A Un free_tv t then S x else TVar x) \\<circ>  \n         (\\<lambda>x. if x : free_tv A then x else n + x)) A\"", "lemma dom_S': \n \"dom (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n  free_tv A Un free_tv t\"", "lemma cod_S': \n  \"\\<And>(A::type_scheme list) (t::typ).   \n   cod (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n   free_tv ($ S A) Un free_tv ($ S t)\"", "lemma free_tv_S': \n \"\\<And>(A::type_scheme list) (t::typ).  \n  free_tv (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n  free_tv A Un free_tv ($ S A) Un free_tv t Un free_tv ($ S t)\"", "lemma free_tv_alpha: \"\\<And>t1::typ.  \n      (free_tv ($ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) t1) - free_tv A) \\<subseteq>  \n          {x. \\<exists>y. x = n + y}\"", "lemma new_tv_Int_free_tv_empty_type: \"\\<And>t::typ. new_tv n t \\<Longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv t = {}\"", "lemma new_tv_Int_free_tv_empty_scheme: \"\\<And>sch::type_scheme. new_tv n sch \\<Longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv sch = {}\"", "lemma new_tv_Int_free_tv_empty_scheme_list: \"\\<forall>A::type_scheme list. new_tv n A \\<longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv A = {}\"", "lemma gen_t_le_gen_alpha_t [rule_format (no_asm)]: \n   \"new_tv n A \\<longrightarrow> gen A t \\<le> gen A ($ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) t)\"", "lemma has_type_le_env [rule_format (no_asm)]: \"A |- e::t \\<Longrightarrow> \\<forall>B. A \\<le> B \\<longrightarrow> B |- e::t\"", "lemma has_type_cl_sub: \"A |- e :: t \\<Longrightarrow> \\<forall>S. $S A |- e :: $S t\""], "translations": [["", "lemma s'_t_equals_s_t: \n  \"\\<And>t::typ. $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then (S n) else (TVar n)) t = $S t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       $ (\\<lambda>n.\n             if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n        t =\n       $ S t", "apply (rule typ_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<forall>x\\<in>free_tv t.\n          (if x \\<in> free_tv A \\<union> free_tv t then S x else TVar x) =\n          S x", "apply (simp add: Ball_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare s'_t_equals_s_t [simp]"], ["", "lemma s'_a_equals_s_a: \n  \"\\<And>A::type_scheme list. $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then (S n) else (TVar n)) A = $S A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>n.\n             if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n        A =\n       $ S A", "apply (rule scheme_list_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A x.\n       x \\<in> free_tv A \\<Longrightarrow>\n       (if x \\<in> free_tv A \\<union> free_tv t then S x else TVar x) = S x", "apply (simp add: Ball_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare s'_a_equals_s_a [simp]"], ["", "lemma replace_s_by_s': \n \"$(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then S n else TVar n) A |-  \n     e :: $(\\<lambda>n. if n : (free_tv A) Un (free_tv t) then S n else TVar n) t  \n  \\<Longrightarrow> $S A |- e :: $S t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ S A |- e :: $ S t", "apply (rule_tac P = \"\\<lambda>A. A |- e :: $S t\" in ssubst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ S A = ?s\n 2. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    ?s |- e :: $ S t", "apply (rule s'_a_equals_s_a [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv ?t1 then S n else TVar n)\n     A |-\n    e :: $ S t", "apply (rule_tac P = \"\\<lambda>t. $ (\\<lambda>n. if n : free_tv A Un free_tv (t2 S) then S n else TVar n) A |- e :: t\" for t2 in ssubst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ S t = ?s2\n 2. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv (?t2.7 S) then S n\n          else TVar n)\n     A |-\n    e :: ?s2", "apply (rule s'_t_equals_s_t [symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n          t \\<Longrightarrow>\n    $ (\\<lambda>n.\n          if n \\<in> free_tv A \\<union> free_tv (?t2.7 S) then S n\n          else TVar n)\n     A |-\n    e :: $ (\\<lambda>n.\n               if n \\<in> free_tv ?A8 \\<union> free_tv t then S n\n               else TVar n)\n          t", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_A': \n  \"\\<And>A::type_scheme list. $ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) A = $ id_subst A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) A =\n       $ id_subst A", "apply (rule scheme_list_substitutions_only_on_free_variables)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A x.\n       x \\<in> free_tv A \\<Longrightarrow>\n       TVar (if x \\<in> free_tv A then x else n + x) = id_subst x", "apply (simp add: id_subst_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma alpha_A: \n  \"\\<And>A::type_scheme list. $ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) A = A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) A = A", "apply (rule alpha_A' [THEN ssubst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A. $ id_subst A = A", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma S_o_alpha_typ: \n  \"$ (S \\<circ> alpha) (t::typ) = $ S ($ (\\<lambda>x. TVar (alpha x)) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (S \\<circ> alpha) t = $ S ($ (\\<lambda>x. TVar (alpha x)) t)", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       $ (S \\<circ> alpha) (TVar x) =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) (TVar x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>$ (S \\<circ> alpha) x1a =\n                $ S ($ (\\<lambda>x. TVar (alpha x)) x1a);\n        $ (S \\<circ> alpha) x2 =\n        $ S ($ (\\<lambda>x. TVar (alpha x)) x2)\\<rbrakk>\n       \\<Longrightarrow> $ (S \\<circ> alpha) (x1a -> x2) =\n                         $ S ($ (\\<lambda>x. TVar (alpha x)) (x1a -> x2))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma S_o_alpha_typ': \n  \"$ (\\<lambda>u. (S \\<circ> alpha) u) (t::typ) = $ S ($ (\\<lambda>x. TVar (alpha x)) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (S \\<circ> alpha) t = $ S ($ (\\<lambda>x. TVar (alpha x)) t)", "apply (induct_tac \"t\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       $ (S \\<circ> alpha) (TVar x) =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) (TVar x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>$ (S \\<circ> alpha) x1a =\n                $ S ($ (\\<lambda>x. TVar (alpha x)) x1a);\n        $ (S \\<circ> alpha) x2 =\n        $ S ($ (\\<lambda>x. TVar (alpha x)) x2)\\<rbrakk>\n       \\<Longrightarrow> $ (S \\<circ> alpha) (x1a -> x2) =\n                         $ S ($ (\\<lambda>x. TVar (alpha x)) (x1a -> x2))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma S_o_alpha_type_scheme: \n  \"$ (S \\<circ> alpha) (sch::type_scheme) = $ S ($ (\\<lambda>x. TVar (alpha x)) sch)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (S \\<circ> alpha) sch = $ S ($ (\\<lambda>x. TVar (alpha x)) sch)", "apply (induct_tac \"sch\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       $ (S \\<circ> alpha) (FVar x) =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) (FVar x))\n 2. \\<And>x.\n       $ (S \\<circ> alpha) (BVar x) =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) (BVar x))\n 3. \\<And>x1a x2a.\n       \\<lbrakk>$ (S \\<circ> alpha) x1a =\n                $ S ($ (\\<lambda>x. TVar (alpha x)) x1a);\n        $ (S \\<circ> alpha) x2a =\n        $ S ($ (\\<lambda>x. TVar (alpha x)) x2a)\\<rbrakk>\n       \\<Longrightarrow> $ (S \\<circ> alpha) (x1a =-> x2a) =\n                         $ S ($ (\\<lambda>x. TVar (alpha x)) (x1a =-> x2a))", "apply (simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma S_o_alpha_type_scheme_list: \n  \"$ (S \\<circ> alpha) (A::type_scheme list) = $ S ($ (\\<lambda>x. TVar (alpha x)) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. $ (S \\<circ> alpha) A = $ S ($ (\\<lambda>x. TVar (alpha x)) A)", "apply (induct_tac \"A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. $ (S \\<circ> alpha) [] = $ S ($ (\\<lambda>x. TVar (alpha x)) [])\n 2. \\<And>a list.\n       $ (S \\<circ> alpha) list =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) list) \\<Longrightarrow>\n       $ (S \\<circ> alpha) (a # list) =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) (a # list))", "apply (simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       $ (\\<lambda>a. S (alpha a)) list =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) list) \\<Longrightarrow>\n       $ (\\<lambda>a. S (alpha a)) a =\n       $ S ($ (\\<lambda>x. TVar (alpha x)) a)", "apply (rule S_o_alpha_type_scheme [unfolded o_def])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma S'_A_eq_S'_alpha_A: \"\\<And>A::type_scheme list.  \n      $ (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) A =  \n      $ ((\\<lambda>x. if x : free_tv A Un free_tv t then S x else TVar x) \\<circ>  \n         (\\<lambda>x. if x : free_tv A then x else n + x)) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>n.\n             if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n        A =\n       $ ((\\<lambda>x.\n              if x \\<in> free_tv A \\<union> free_tv t then S x\n              else TVar x) \\<circ>\n          (\\<lambda>x. if x \\<in> free_tv A then x else n + x))\n        A", "apply (subst S_o_alpha_type_scheme_list)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>n.\n             if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n        A =\n       $ (\\<lambda>x.\n             if x \\<in> free_tv A \\<union> free_tv t then S x else TVar x)\n        ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) A)", "apply (subst alpha_A)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       $ (\\<lambda>n.\n             if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n        A =\n       $ (\\<lambda>x.\n             if x \\<in> free_tv A \\<union> free_tv t then S x else TVar x)\n        A", "apply (rule refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma dom_S': \n \"dom (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n  free_tv A Un free_tv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Type.dom\n     (\\<lambda>n.\n         if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n    \\<subseteq> free_tv A \\<union> free_tv t", "apply (unfold free_tv_subst dom_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n. (if n \\<in> free_tv A \\<union> free_tv t then S n\n         else TVar n) \\<noteq>\n        TVar n}\n    \\<subseteq> free_tv A \\<union> free_tv t", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. {n. (n \\<in> free_tv A \\<longrightarrow> S n \\<noteq> TVar n) \\<and>\n        (n \\<in> free_tv t \\<longrightarrow> S n \\<noteq> TVar n) \\<and>\n        (n \\<in> free_tv A \\<or> n \\<in> free_tv t)}\n    \\<subseteq> free_tv A \\<union> free_tv t", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma cod_S': \n  \"\\<And>(A::type_scheme list) (t::typ).   \n   cod (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n   free_tv ($ S A) Un free_tv ($ S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t.\n       cod (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n       \\<subseteq> free_tv ($ S A) \\<union> free_tv ($ S t)", "apply (unfold free_tv_subst cod_def subset_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t.\n       \\<forall>x\\<in>\\<Union>m\\<in>Type.dom\n                                     (\\<lambda>n.\n   if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n).\n                         free_tv\n                          (if m \\<in> free_tv A \\<union> free_tv t then S m\n                           else TVar m).\n          x \\<in> free_tv ($ S A) \\<union> free_tv ($ S t)", "apply (rule ballI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t x.\n       x \\<in> (\\<Union>m\\<in>Type.dom\n                               (\\<lambda>n.\n                                   if n \\<in> free_tv A \\<union> free_tv t\n                                   then S n else TVar n).\n                   free_tv\n                    (if m \\<in> free_tv A \\<union> free_tv t then S m\n                     else TVar m)) \\<Longrightarrow>\n       x \\<in> free_tv ($ S A) \\<union> free_tv ($ S t)", "apply (erule UN_E)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t x m.\n       \\<lbrakk>m \\<in> Type.dom\n                         (\\<lambda>n.\n                             if n \\<in> free_tv A \\<union> free_tv t\n                             then S n else TVar n);\n        x \\<in> free_tv\n                 (if m \\<in> free_tv A \\<union> free_tv t then S m\n                  else TVar m)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> free_tv ($ S A) \\<union> free_tv ($ S t)", "apply (drule dom_S' [THEN subsetD])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t x m.\n       \\<lbrakk>x \\<in> free_tv\n                         (if m \\<in> free_tv A \\<union> free_tv t then S m\n                          else TVar m);\n        m \\<in> free_tv A \\<union> free_tv t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> free_tv ($ S A) \\<union> free_tv ($ S t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t x m.\n       \\<lbrakk>x \\<in> free_tv (S m);\n        m \\<in> free_tv A \\<or> m \\<in> free_tv t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> free_tv ($ S A) \\<or>\n                         x \\<in> free_tv ($ S t)", "apply (fast dest: free_tv_of_substitutions_extend_to_scheme_lists intro: free_tv_of_substitutions_extend_to_types [THEN subsetD])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_S': \n \"\\<And>(A::type_scheme list) (t::typ).  \n  free_tv (\\<lambda>n. if n : free_tv A Un free_tv t then S n else TVar n) \\<subseteq>  \n  free_tv A Un free_tv ($ S A) Un free_tv t Un free_tv ($ S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t.\n       free_tv\n        (\\<lambda>n.\n            if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n       \\<subseteq> free_tv A \\<union> free_tv ($ S A) \\<union>\n                   free_tv t \\<union>\n                   free_tv ($ S t)", "apply (unfold free_tv_subst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A t.\n       Type.dom\n        (\\<lambda>n.\n            if n \\<in> free_tv A \\<union> free_tv t then S n\n            else TVar n) \\<union>\n       cod (\\<lambda>n.\n               if n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n       \\<subseteq> free_tv A \\<union> free_tv ($ S A) \\<union>\n                   free_tv t \\<union>\n                   free_tv ($ S t)", "apply (fast dest: dom_S' [THEN subsetD] cod_S' [THEN subsetD])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma free_tv_alpha: \"\\<And>t1::typ.  \n      (free_tv ($ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) t1) - free_tv A) \\<subseteq>  \n          {x. \\<exists>y. x = n + y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1.\n       free_tv\n        ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n       free_tv A\n       \\<subseteq> {x. \\<exists>y. x = n + y}", "apply (induct_tac \"t1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t1 x.\n       free_tv\n        ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n          (TVar x)) -\n       free_tv A\n       \\<subseteq> {x. \\<exists>y. x = n + y}\n 2. \\<And>t1 x1a x2.\n       \\<lbrakk>free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   x1a) -\n                free_tv A\n                \\<subseteq> {x. \\<exists>y. x = n + y};\n        free_tv\n         ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n           x2) -\n        free_tv A\n        \\<subseteq> {x. \\<exists>y. x = n + y}\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          ($ (\\<lambda>x.\n                                 TVar\n                                  (if x \\<in> free_tv A then x else n + x))\n                            (x1a -> x2)) -\n                         free_tv A\n                         \\<subseteq> {x. \\<exists>y. x = n + y}", "apply (simp (no_asm))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<notin> free_tv A \\<longrightarrow>\n       {n + x} - free_tv A \\<subseteq> {x. \\<exists>y. x = n + y}\n 2. \\<And>t1 x1a x2.\n       \\<lbrakk>free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   x1a) -\n                free_tv A\n                \\<subseteq> {x. \\<exists>y. x = n + y};\n        free_tv\n         ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n           x2) -\n        free_tv A\n        \\<subseteq> {x. \\<exists>y. x = n + y}\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          ($ (\\<lambda>x.\n                                 TVar\n                                  (if x \\<in> free_tv A then x else n + x))\n                            (x1a -> x2)) -\n                         free_tv A\n                         \\<subseteq> {x. \\<exists>y. x = n + y}", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t1 x1a x2.\n       \\<lbrakk>free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   x1a) -\n                free_tv A\n                \\<subseteq> {x. \\<exists>y. x = n + y};\n        free_tv\n         ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n           x2) -\n        free_tv A\n        \\<subseteq> {x. \\<exists>y. x = n + y}\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          ($ (\\<lambda>x.\n                                 TVar\n                                  (if x \\<in> free_tv A then x else n + x))\n                            (x1a -> x2)) -\n                         free_tv A\n                         \\<subseteq> {x. \\<exists>y. x = n + y}", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2.\n       \\<lbrakk>free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   x1a) -\n                free_tv A\n                \\<subseteq> {x. \\<exists>y. x = n + y};\n        free_tv\n         ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n           x2) -\n        free_tv A\n        \\<subseteq> {x. \\<exists>y. x = n + y}\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          ($ (\\<lambda>x.\n                                 TVar\n                                  (if x \\<in> free_tv A then x else n + x))\n                            x1a) \\<union>\n                         free_tv\n                          ($ (\\<lambda>x.\n                                 TVar\n                                  (if x \\<in> free_tv A then x else n + x))\n                            x2) -\n                         free_tv A\n                         \\<subseteq> {x. \\<exists>y. x = n + y}", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Int_free_tv_empty_type: \"\\<And>t::typ. new_tv n t \\<Longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv t = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       new_tv n t \\<Longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv t = {}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x y.\n       \\<lbrakk>new_tv n t; n + y \\<in> free_tv t\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (cut_tac le_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x y.\n       \\<lbrakk>new_tv n t; n + y \\<in> free_tv t;\n        ?n8 t x y \\<le> ?n8 t x y + ?m8 t x y\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (drule new_tv_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t x y.\n       \\<lbrakk>new_tv n t; n + y \\<in> free_tv t\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n8 t x y) (?t9 t x y)\n 2. \\<And>t x y.\n       \\<lbrakk>new_tv n t; n + y \\<in> free_tv t;\n        new_tv (?n8 t x y + ?m8 t x y) (?t9 t x y)\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x y.\n       \\<lbrakk>new_tv n t; n + y \\<in> free_tv t;\n        new_tv (n + ?m8 t x y) t\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (rotate_tac 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x y.\n       \\<lbrakk>n + y \\<in> free_tv t; new_tv (n + ?m8 t x y) t;\n        new_tv n t\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (drule new_tv_not_free_tv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x y.\n       \\<lbrakk>n + y \\<in> free_tv t; new_tv n t;\n        n + ?m8 t x y \\<notin> free_tv t\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Int_free_tv_empty_scheme: \"\\<And>sch::type_scheme. new_tv n sch \\<Longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv sch = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch.\n       new_tv n sch \\<Longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv sch = {}", "apply safe"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x y.\n       \\<lbrakk>new_tv n sch; n + y \\<in> free_tv sch\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (cut_tac le_add1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x y.\n       \\<lbrakk>new_tv n sch; n + y \\<in> free_tv sch;\n        ?n8 sch x y \\<le> ?n8 sch x y + ?m8 sch x y\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (drule new_tv_le)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>sch x y.\n       \\<lbrakk>new_tv n sch; n + y \\<in> free_tv sch\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n8 sch x y) (?t9 sch x y)\n 2. \\<And>sch x y.\n       \\<lbrakk>new_tv n sch; n + y \\<in> free_tv sch;\n        new_tv (?n8 sch x y + ?m8 sch x y) (?t9 sch x y)\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x y.\n       \\<lbrakk>new_tv n sch; n + y \\<in> free_tv sch;\n        new_tv (n + ?m8 sch x y) sch\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (rotate_tac 1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x y.\n       \\<lbrakk>n + y \\<in> free_tv sch; new_tv (n + ?m8 sch x y) sch;\n        new_tv n sch\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply (drule new_tv_not_free_tv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sch x y.\n       \\<lbrakk>n + y \\<in> free_tv sch; new_tv n sch;\n        n + ?m8 sch x y \\<notin> free_tv sch\\<rbrakk>\n       \\<Longrightarrow> n + y \\<in> {}", "apply fast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma new_tv_Int_free_tv_empty_scheme_list: \"\\<forall>A::type_scheme list. new_tv n A \\<longrightarrow> {x. \\<exists>y. x = n + y} Int free_tv A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A.\n       new_tv n A \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv A = {}", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       new_tv n A \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv A = {}", "apply (induct_tac \"A\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       new_tv n [] \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv [] = {}\n 2. \\<And>A a list.\n       new_tv n list \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv list =\n       {} \\<Longrightarrow>\n       new_tv n (a # list) \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv (a # list) = {}", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A a list.\n       new_tv n list \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv list =\n       {} \\<Longrightarrow>\n       new_tv n (a # list) \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv (a # list) = {}", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       new_tv n list \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter> free_tv list =\n       {} \\<Longrightarrow>\n       new_tv n a \\<and> new_tv n list \\<longrightarrow>\n       {x. \\<exists>y. x = n + y} \\<inter>\n       (free_tv a \\<union> free_tv list) =\n       {}", "apply (fast dest: new_tv_Int_free_tv_empty_scheme)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gen_t_le_gen_alpha_t [rule_format (no_asm)]: \n   \"new_tv n A \\<longrightarrow> gen A t \\<le> gen A ($ (\\<lambda>x. TVar (if x : free_tv A then x else n + x)) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<longrightarrow>\n    gen A t\n    \\<le> gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t)", "apply (unfold le_type_scheme_def is_bound_typ_instance)"], ["proof (prove)\ngoal (1 subgoal):\n 1. new_tv n A \\<longrightarrow>\n    (\\<forall>ta.\n        (\\<exists>S. ta = bound_typ_inst S (gen A t)) \\<longrightarrow>\n        (\\<exists>S.\n            ta =\n            bound_typ_inst S\n             (gen A\n               ($ (\\<lambda>x.\n                      TVar (if x \\<in> free_tv A then x else n + x))\n                 t))))", "apply (intro strip)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta.\n       \\<lbrakk>new_tv n A;\n        \\<exists>S. ta = bound_typ_inst S (gen A t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            ta =\n                            bound_typ_inst S\n                             (gen A\n                               ($ (\\<lambda>x.\nTVar (if x \\<in> free_tv A then x else n + x))\n                                 t))", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta S.\n       \\<lbrakk>new_tv n A; ta = bound_typ_inst S (gen A t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>S.\n                            ta =\n                            bound_typ_inst S\n                             (gen A\n                               ($ (\\<lambda>x.\nTVar (if x \\<in> free_tv A then x else n + x))\n                                 t))", "apply (hypsubst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta S.\n       new_tv n A \\<Longrightarrow>\n       \\<exists>Sa.\n          bound_typ_inst S (gen A t) =\n          bound_typ_inst Sa\n           (gen A\n             ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n               t))", "apply (rule_tac x = \" (\\<lambda>x. S (if n \\<le> x then x - n else x))\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ta S.\n       new_tv n A \\<Longrightarrow>\n       bound_typ_inst S (gen A t) =\n       bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n        (gen A\n          ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t))", "apply (induct_tac t)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t S x.\n       new_tv n A \\<Longrightarrow>\n       bound_typ_inst S (gen A (TVar x)) =\n       bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n        (gen A\n          ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n            (TVar x)))\n 2. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (simp (no_asm))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x.\n       new_tv n A \\<Longrightarrow>\n       x \\<notin> free_tv A \\<longrightarrow>\n       n + x \\<in> free_tv A \\<longrightarrow> S x = TVar (n + x)\n 2. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (rename_tac nat)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S nat.\n       new_tv n A \\<Longrightarrow>\n       nat \\<notin> free_tv A \\<longrightarrow>\n       n + nat \\<in> free_tv A \\<longrightarrow> S nat = TVar (n + nat)\n 2. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (case_tac \"nat : free_tv A\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<in> free_tv A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 3. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (subgoal_tac \"n \\<le> n + nat\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A; n \\<le> n + nat\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 3. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (drule new_tv_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> new_tv n (?t20 S nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A;\n        new_tv (n + nat) (?t20 S nat)\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 3. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 4. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A;\n        new_tv (n + nat) A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 3. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (drule new_tv_not_free_tv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>nat \\<notin> free_tv A; new_tv (n + nat) A;\n        n \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 3. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (drule new_tv_not_free_tv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>nat \\<notin> free_tv A; n \\<notin> free_tv A;\n        n + nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> nat \\<notin> free_tv A \\<longrightarrow>\n                         n + nat \\<in> free_tv A \\<longrightarrow>\n                         S nat = TVar (n + nat)\n 2. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 3. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (simp (no_asm_simp) add: diff_add_inverse)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S nat.\n       \\<lbrakk>new_tv n A; nat \\<notin> free_tv A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + nat\n 2. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (simp (no_asm))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S x1a x2.\n       \\<lbrakk>new_tv n A;\n        bound_typ_inst S (gen A x1a) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x1a));\n        bound_typ_inst S (gen A x2) =\n        bound_typ_inst (\\<lambda>x. S (if n \\<le> x then x - n else x))\n         (gen A\n           ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x))\n             x2))\\<rbrakk>\n       \\<Longrightarrow> bound_typ_inst S (gen A (x1a -> x2)) =\n                         bound_typ_inst\n                          (\\<lambda>x. S (if n \\<le> x then x - n else x))\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              (x1a -> x2)))", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "declare has_type.intros [intro!]"], ["", "lemma has_type_le_env [rule_format (no_asm)]: \"A |- e::t \\<Longrightarrow> \\<forall>B. A \\<le> B \\<longrightarrow> B |- e::t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A |- e :: t \\<Longrightarrow> \\<forall>B\\<ge>A. B |- e :: t", "apply (erule has_type.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- Var n :: t\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>B\\<ge>mk_scheme t1 # A. B |- e :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- Abs e :: t1 -> t2\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1; \\<forall>B\\<ge>A. B |- e1 :: t2 -> t1;\n        A |- e2 :: t2; \\<forall>B\\<ge>A. B |- e2 :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- App e1 e2 :: t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>B\\<ge>A. B |- e1 :: t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>B\\<ge>gen A t1 # A. B |- e2 :: t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- LET e1 e2 :: t", "apply (simp (no_asm) add: le_env_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B.\n                            length B = length A \\<and>\n                            (\\<forall>i<length A.\n                                A ! i \\<le> B ! i) \\<longrightarrow>\n                            B |- Var n :: t\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>B\\<ge>mk_scheme t1 # A. B |- e :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- Abs e :: t1 -> t2\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1; \\<forall>B\\<ge>A. B |- e1 :: t2 -> t1;\n        A |- e2 :: t2; \\<forall>B\\<ge>A. B |- e2 :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- App e1 e2 :: t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>B\\<ge>A. B |- e1 :: t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>B\\<ge>gen A t1 # A. B |- e2 :: t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- LET e1 e2 :: t", "apply (fastforce elim: bound_typ_instance_trans)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>B\\<ge>mk_scheme t1 # A. B |- e :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- Abs e :: t1 -> t2\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1; \\<forall>B\\<ge>A. B |- e1 :: t2 -> t1;\n        A |- e2 :: t2; \\<forall>B\\<ge>A. B |- e2 :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- App e1 e2 :: t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>B\\<ge>A. B |- e1 :: t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>B\\<ge>gen A t1 # A. B |- e2 :: t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- LET e1 e2 :: t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1; \\<forall>B\\<ge>A. B |- e1 :: t2 -> t1;\n        A |- e2 :: t2; \\<forall>B\\<ge>A. B |- e2 :: t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- App e1 e2 :: t1\n 2. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>B\\<ge>A. B |- e1 :: t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>B\\<ge>gen A t1 # A. B |- e2 :: t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- LET e1 e2 :: t", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>B\\<ge>A. B |- e1 :: t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>B\\<ge>gen A t1 # A. B |- e2 :: t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>B\\<ge>A. B |- LET e1 e2 :: t", "apply (slow elim: le_env_free_tv [THEN free_tv_subset_gen_le])"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n\n\\<comment> \\<open>@{text has_type} is closed w.r.t. substitution\\<close>"], ["", "lemma has_type_cl_sub: \"A |- e :: t \\<Longrightarrow> \\<forall>S. $S A |- e :: $S t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A |- e :: t \\<Longrightarrow> \\<forall>S. $ S A |- e :: $ S t", "apply (erule has_type.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Var n :: $ S t\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "(* case VarI *)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Var n :: $ S t\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule allI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t S.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> $ S A |- Var n :: $ S t\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule has_type.VarI)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>n A t S.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> n < length ($ S A)\n 2. \\<And>n A t S.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> $ S t <| $ S A ! n\n 3. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 4. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 5. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (simp add: app_subst_list)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n A t S.\n       \\<lbrakk>n < length A; t <| A ! n\\<rbrakk>\n       \\<Longrightarrow> $ S t <| $ S A ! n\n 2. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 3. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 4. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (simp (no_asm_simp) add: app_subst_list)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "(* case AbsI *)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- Abs e :: $ S (t1 -> t2)\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule allI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2 S.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- Abs e :: $ S (t1 -> t2)\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (simp (no_asm))"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2 S.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- Abs e :: $ S t1 -> $ S t2\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule has_type.AbsI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t1 A e t2 S.\n       \\<lbrakk>mk_scheme t1 # A |- e :: t2;\n        \\<forall>S. $ S (mk_scheme t1 # A) |- e :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> mk_scheme ($ S t1) # $ S A |- e :: $ S t2\n 2. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 2. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "(* case AppI *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t2 t1 e2.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- App e1 e2 :: $ S t1\n 2. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- App e1 e2 :: $ S t1\n 2. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule has_type.AppI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- e1 :: ?t2.18 A e1 t2 t1 e2 S -> $ S t1\n 2. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- e2 :: ?t2.18 A e1 t2 t1 e2 S\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S t2 -> $ S t1; A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- e1 :: ?t2.18 A e1 t2 t1 e2 S -> $ S t1\n 2. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- e2 :: ?t2.18 A e1 t2 t1 e2 S\n 3. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (erule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t2 t1 e2 S.\n       \\<lbrakk>A |- e1 :: t2 -> t1;\n        \\<forall>S. $ S A |- e1 :: $ S (t2 -> t1); A |- e2 :: t2;\n        \\<forall>S. $ S A |- e2 :: $ S t2\\<rbrakk>\n       \\<Longrightarrow> $ S A |- e2 :: $ S t2\n 2. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (erule spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "(* case LetI *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> \\<forall>S. $ S A |- LET e1 e2 :: $ S t", "apply (rule allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> $ S A |- LET e1 e2 :: $ S t", "apply (rule replace_s_by_s')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         LET e1\n                          e2 :: $ (\\<lambda>n.\nif n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n                                 t", "apply (cut_tac A = \"$ S A\" and A' = \"A\" and t = \"t\" and t' = \"$ S t\" in ex_fresh_variable)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t;\n        \\<exists>n.\n           new_tv n ($ S A) \\<and>\n           new_tv n A \\<and> new_tv n t \\<and> new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         LET e1\n                          e2 :: $ (\\<lambda>n.\nif n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n                                 t", "apply (erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t;\n        new_tv n ($ S A) \\<and>\n        new_tv n A \\<and> new_tv n t \\<and> new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         LET e1\n                          e2 :: $ (\\<lambda>n.\nif n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n                                 t", "apply (erule conjE)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         LET e1\n                          e2 :: $ (\\<lambda>n.\nif n \\<in> free_tv A \\<union> free_tv t then S n else TVar n)\n                                 t", "apply (rule_tac ?t1.0 = \"$ ((\\<lambda>x. if x : free_tv A Un free_tv t then S x else TVar x) \\<circ> (\\<lambda>x. if x : free_tv A then x else n + x)) t1\" in has_type.LETI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e1 :: $ ((\\<lambda>x.\nif x \\<in> free_tv A \\<union> free_tv t then S x else TVar x) \\<circ>\n                                  (\\<lambda>x.\nif x \\<in> free_tv A then x else n + x))\n                                t1\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen ($ (\\<lambda>n.\n                                    if n \\<in> free_tv A \\<union> free_tv t\n                                    then S n else TVar n)\n                               A)\n                          ($ ((\\<lambda>x.\n                                  if x \\<in> free_tv A \\<union> free_tv t\n                                  then S x else TVar x) \\<circ>\n                              (\\<lambda>x.\n                                  if x \\<in> free_tv A then x else n + x))\n                            t1) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (drule_tac x = \" (\\<lambda>x. if x : free_tv A Un free_tv t then S x else TVar x) \\<circ> (\\<lambda>x. if x : free_tv A then x else n + x) \" in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        $ ((\\<lambda>x.\n               if x \\<in> free_tv A \\<union> free_tv t then S x\n               else TVar x) \\<circ>\n           (\\<lambda>x. if x \\<in> free_tv A then x else n + x))\n         A |-\n        e1 :: $ ((\\<lambda>x.\n                     if x \\<in> free_tv A \\<union> free_tv t then S x\n                     else TVar x) \\<circ>\n                 (\\<lambda>x. if x \\<in> free_tv A then x else n + x))\n               t1\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e1 :: $ ((\\<lambda>x.\nif x \\<in> free_tv A \\<union> free_tv t then S x else TVar x) \\<circ>\n                                  (\\<lambda>x.\nif x \\<in> free_tv A then x else n + x))\n                                t1\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen ($ (\\<lambda>n.\n                                    if n \\<in> free_tv A \\<union> free_tv t\n                                    then S n else TVar n)\n                               A)\n                          ($ ((\\<lambda>x.\n                                  if x \\<in> free_tv A \\<union> free_tv t\n                                  then S x else TVar x) \\<circ>\n                              (\\<lambda>x.\n                                  if x \\<in> free_tv A then x else n + x))\n                            t1) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subst S'_A_eq_S'_alpha_A)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        $ ((\\<lambda>x.\n               if x \\<in> free_tv A \\<union> free_tv t then S x\n               else TVar x) \\<circ>\n           (\\<lambda>x. if x \\<in> free_tv A then x else n + x))\n         A |-\n        e1 :: $ ((\\<lambda>x.\n                     if x \\<in> free_tv A \\<union> free_tv t then S x\n                     else TVar x) \\<circ>\n                 (\\<lambda>x. if x \\<in> free_tv A then x else n + x))\n               t1\\<rbrakk>\n       \\<Longrightarrow> $ ((\\<lambda>x.\n                                if x \\<in> free_tv A \\<union> free_tv t\n                                then S x else TVar x) \\<circ>\n                            (\\<lambda>x.\n                                if x \\<in> free_tv A then x\n                                else ?n41 A e1 t1 e2 t S n + x))\n                          A |-\n                         e1 :: $ ((\\<lambda>x.\nif x \\<in> free_tv A \\<union> free_tv t then S x else TVar x) \\<circ>\n                                  (\\<lambda>x.\nif x \\<in> free_tv A then x else n + x))\n                                t1\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen ($ (\\<lambda>n.\n                                    if n \\<in> free_tv A \\<union> free_tv t\n                                    then S n else TVar n)\n                               A)\n                          ($ ((\\<lambda>x.\n                                  if x \\<in> free_tv A \\<union> free_tv t\n                                  then S x else TVar x) \\<circ>\n                              (\\<lambda>x.\n                                  if x \\<in> free_tv A then x else n + x))\n                            t1) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen ($ (\\<lambda>n.\n                                    if n \\<in> free_tv A \\<union> free_tv t\n                                    then S n else TVar n)\n                               A)\n                          ($ ((\\<lambda>x.\n                                  if x \\<in> free_tv A \\<union> free_tv t\n                                  then S x else TVar x) \\<circ>\n                              (\\<lambda>x.\n                                  if x \\<in> free_tv A then x else n + x))\n                            t1) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subst S_o_alpha_typ)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen ($ (\\<lambda>n.\n                                    if n \\<in> free_tv A \\<union> free_tv t\n                                    then S n else TVar n)\n                               A)\n                          ($ (\\<lambda>x.\n                                 if x \\<in> free_tv A \\<union> free_tv t\n                                 then S x else TVar x)\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subst gen_subst_commutes)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          (\\<lambda>n.\n                              if n \\<in> free_tv A \\<union> free_tv t\n                              then S n else TVar n) \\<inter>\n                         (free_tv\n                           ($ (\\<lambda>x.\n                                  TVar\n                                   (if x \\<in> free_tv A then x else n + x))\n                             t1) -\n                          free_tv A) =\n                         {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule subset_antisym)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> free_tv\n                          (\\<lambda>n.\n                              if n \\<in> free_tv A \\<union> free_tv t\n                              then S n else TVar n) \\<inter>\n                         (free_tv\n                           ($ (\\<lambda>x.\n                                  TVar\n                                   (if x \\<in> free_tv A then x else n + x))\n                             t1) -\n                          free_tv A)\n                         \\<subseteq> {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule subsetI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv\n                 (\\<lambda>n.\n                     if n \\<in> free_tv A \\<union> free_tv t then S n\n                     else TVar n) \\<inter>\n                (free_tv\n                  ($ (\\<lambda>x.\n                         TVar (if x \\<in> free_tv A then x else n + x))\n                    t1) -\n                 free_tv A)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (erule IntE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv\n                 (\\<lambda>n.\n                     if n \\<in> free_tv A \\<union> free_tv t then S n\n                     else TVar n);\n        x \\<in> free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   t1) -\n                free_tv A\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (drule free_tv_S' [THEN subsetD])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv\n                 ($ (\\<lambda>x.\n                        TVar (if x \\<in> free_tv A then x else n + x))\n                   t1) -\n                free_tv A;\n        x \\<in> free_tv A \\<union> free_tv ($ S A) \\<union>\n                free_tv t \\<union>\n                free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (drule free_tv_alpha [THEN subsetD])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv A \\<union> free_tv ($ S A) \\<union>\n                free_tv t \\<union>\n                free_tv ($ S t);\n        x \\<in> {x. \\<exists>y. x = n + y}\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {}\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (simp del: full_SetCompr_eq)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv A \\<or>\n        x \\<in> free_tv ($ S A) \\<or>\n        x \\<in> free_tv t \\<or> x \\<in> free_tv ($ S t);\n        \\<exists>y. x = n + y\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (erule exE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        x \\<in> free_tv A \\<or>\n        x \\<in> free_tv ($ S A) \\<or>\n        x \\<in> free_tv t \\<or> x \\<in> free_tv ($ S t);\n        x = n + y\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (hypsubst)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subgoal_tac \"new_tv (n + y) ($ S A) \")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subgoal_tac \"new_tv (n + y) ($ S t) \")"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subgoal_tac \"new_tv (n + y) A\")"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (subgoal_tac \"new_tv (n + y) t\")"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t); new_tv (n + y) A;\n        new_tv (n + y) t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) t\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 5. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 7. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (drule new_tv_not_free_tv)+"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t;\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        n \\<notin> free_tv ($ S A); n \\<notin> free_tv A;\n        n \\<notin> free_tv t; n \\<notin> free_tv ($ S t);\n        n + y \\<notin> free_tv ($ S A); n + y \\<notin> free_tv ($ S t);\n        n + y \\<notin> free_tv A; n + y \\<notin> free_tv t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) t\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 5. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 7. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply fast"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) t\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule new_tv_le)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> ?n88 A e1 t1 e2 t S n x y \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n88 A e1 t1 e2 t S n x y) t\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 5. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 7. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "prefer 2"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n88 A e1 t1 e2 t S n x y) t\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> ?n88 A e1 t1 e2 t S n x y \\<le> n + y\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 5. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 7. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply assumption"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t);\n        new_tv (n + y) A\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) A\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule new_tv_le)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?n91 A e1 t1 e2 t S n x y \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n91 A e1 t1 e2 t S n x y) A\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "prefer 2"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n91 A e1 t1 e2 t S n x y) A\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?n91 A e1 t1 e2 t S n x y \\<le> n + y\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 4. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 6. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply assumption"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A); new_tv (n + y) ($ S t)\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S t)\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule new_tv_le)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> ?n94 A e1 t1 e2 t S n x y \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n94 A e1 t1 e2 t S n x y) ($ S t)\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "prefer 2"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n94 A e1 t1 e2 t S n x y) ($ S t)\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> ?n94 A e1 t1 e2 t S n x y \\<le> n + y\n 3. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 5. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply assumption"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t);\n        new_tv (n + y) ($ S A)\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (n + y) ($ S A)\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule new_tv_le)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?n97 A e1 t1 e2 t S n x y \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n97 A e1 t1 e2 t S n x y) ($ S A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "prefer 2"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> new_tv (?n97 A e1 t1 e2 t S n x y) ($ S A)\n 2. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?n97 A e1 t1 e2 t S n x y \\<le> n + y\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 4. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A e1 t1 e2 t S n x y.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1) # $ S A |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        n + y \\<in> free_tv A \\<or>\n        n + y \\<in> free_tv ($ S A) \\<or>\n        n + y \\<in> free_tv t \\<or> n + y \\<in> free_tv ($ S t)\\<rbrakk>\n       \\<Longrightarrow> n \\<le> n + y\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 3. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> {} \\<subseteq> free_tv\n   (\\<lambda>n.\n       if n \\<in> free_tv A \\<union> free_tv t then S n\n       else TVar n) \\<inter>\n  (free_tv\n    ($ (\\<lambda>x. TVar (if x \\<in> free_tv A then x else n + x)) t1) -\n   free_tv A)\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply fast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          (gen A\n                            ($ (\\<lambda>x.\n                                   TVar\n                                    (if x \\<in> free_tv A then x\n                                     else n + x))\n                              t1)) #\n                         $ (\\<lambda>n.\n                               if n \\<in> free_tv A \\<union> free_tv t\n                               then S n else TVar n)\n                          A |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t", "apply (rule has_type_le_env)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n\n                         \\<le> $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                (gen A\n                                  ($ (\\<lambda>x.\n   TVar (if x \\<in> free_tv A then x else n + x))\n                                    t1)) #\n                               $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                A", "apply (drule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        $ (?S106 A e1 t1 e2 t S n) A |-\n        e1 :: $ (?S106 A e1 t1 e2 t S n) t1\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n\n                         \\<le> $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                (gen A\n                                  ($ (\\<lambda>x.\n   TVar (if x \\<in> free_tv A then x else n + x))\n                                    t1)) #\n                               $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                A", "apply (drule spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; gen A t1 # A |- e2 :: t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t);\n        $ (?S106 A e1 t1 e2 t S n) A |- e1 :: $ (?S106 A e1 t1 e2 t S n) t1;\n        $ (?S108 A e1 t1 e2 t S n) (gen A t1 # A) |-\n        e2 :: $ (?S108 A e1 t1 e2 t S n) t\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n |-\n                         e2 :: $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                t\n 2. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> ?A103 A e1 t1 e2 t S n\n                         \\<le> $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                (gen A\n                                  ($ (\\<lambda>x.\n   TVar (if x \\<in> free_tv A then x else n + x))\n                                    t1)) #\n                               $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                A", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>a.\n                               if a \\<in> free_tv A \\<union> free_tv t\n                               then S a else TVar a)\n                          (gen A t1 # A)\n                         \\<le> $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                (gen A\n                                  ($ (\\<lambda>x.\n   TVar (if x \\<in> free_tv A then x else n + x))\n                                    t1)) #\n                               $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                A", "apply (rule app_subst_Cons [THEN subst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> $ (\\<lambda>a.\n                               if a \\<in> free_tv A \\<union> free_tv t\n                               then S a else TVar a)\n                          (gen A t1 # A)\n                         \\<le> $ (\\<lambda>n.\n                                     if n \\<in> free_tv A \\<union> free_tv t\n                                     then S n else TVar n)\n                                (gen A\n                                  ($ (\\<lambda>x.\n   TVar (if x \\<in> free_tv A then x else n + x))\n                                    t1) #\n                                 A)", "apply (rule S_compatible_le_scheme_lists)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A e1 t1 e2 t S n.\n       \\<lbrakk>A |- e1 :: t1; \\<forall>S. $ S A |- e1 :: $ S t1;\n        gen A t1 # A |- e2 :: t;\n        \\<forall>S. $ S (gen A t1 # A) |- e2 :: $ S t; new_tv n ($ S A);\n        new_tv n A; new_tv n t; new_tv n ($ S t)\\<rbrakk>\n       \\<Longrightarrow> gen A t1 # A\n                         \\<le> gen A\n                                ($ (\\<lambda>x.\n TVar (if x \\<in> free_tv A then x else n + x))\n                                  t1) #\n                               A", "apply (simp (no_asm_simp))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}