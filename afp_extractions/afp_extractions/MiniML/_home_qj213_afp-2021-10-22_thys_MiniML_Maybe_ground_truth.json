{"file_name": "/home/qj213/afp-2021-10-22/thys/MiniML/Maybe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MiniML", "problem_names": ["lemma option_bind_Some: \"option_bind (Some s) f = (f s)\"", "lemma option_bind_None: \"option_bind None f = None\"", "lemma split_option_bind: \"P(option_bind res f) =  \n          ((res = None \\<longrightarrow> P None) \\<and> (\\<forall>s. res = Some s \\<longrightarrow> P(f s)))\"", "lemma option_bind_eq_None [simp]:\n    \"((option_bind m f) = None) = ((m=None) | (\\<exists>p. m = Some p \\<and> f p = None))\"", "lemma rotate_Some: \"(y = Some x) = (Some x = y)\""], "translations": [["", "lemma option_bind_Some: \"option_bind (Some s) f = (f s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. option_bind (Some s) f = f s", "by (simp add: option_bind_def)"], ["", "lemma option_bind_None: \"option_bind None f = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. option_bind None f = None", "by (simp add: option_bind_def)"], ["", "declare option_bind_Some [simp] option_bind_None [simp]\n\n\\<comment> \\<open>expansion of @{text option_bind}\\<close>"], ["", "lemma split_option_bind: \"P(option_bind res f) =  \n          ((res = None \\<longrightarrow> P None) \\<and> (\\<forall>s. res = Some s \\<longrightarrow> P(f s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (option_bind res f) =\n    ((res = None \\<longrightarrow> P None) \\<and>\n     (\\<forall>s. res = Some s \\<longrightarrow> P (f s)))", "unfolding option_bind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case res of None \\<Rightarrow> None | Some x \\<Rightarrow> f x) =\n    ((res = None \\<longrightarrow> P None) \\<and>\n     (\\<forall>s. res = Some s \\<longrightarrow> P (f s)))", "by (rule option.split)"], ["", "lemma option_bind_eq_None [simp]:\n    \"((option_bind m f) = None) = ((m=None) | (\\<exists>p. m = Some p \\<and> f p = None))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (option_bind m f = None) =\n    (m = None \\<or> (\\<exists>p. m = Some p \\<and> f p = None))", "by (simp split: split_option_bind)"], ["", "lemma rotate_Some: \"(y = Some x) = (Some x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y = Some x) = (Some x = y)", "by (simp add: eq_sym_conv)"], ["", "end"]]}