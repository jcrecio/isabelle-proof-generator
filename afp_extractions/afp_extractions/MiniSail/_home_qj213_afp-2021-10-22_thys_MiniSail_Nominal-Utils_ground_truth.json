{"file_name": "/home/qj213/afp-2021-10-22/thys/MiniSail/Nominal-Utils.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MiniSail", "problem_names": ["lemma perm_rel_lemma:\n  assumes \"\\<And> \\<pi> x y. r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y) \\<Longrightarrow> r x y\"\n  shows \"r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y) \\<longleftrightarrow> r x y\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma perm_rel_lemma2:\n  assumes \"\\<And> \\<pi> x y. r x y \\<Longrightarrow> r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y)\"\n  shows \"r x y \\<longleftrightarrow> r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y)\" (is \"?l \\<longleftrightarrow> ?r\")", "lemma fun_eqvtI:\n  assumes f_eqvt[eqvt]: \"(\\<And> p x. p \\<bullet> (f x) = f (p \\<bullet> x))\"\n  shows \"p \\<bullet> f = f\"", "lemma eqvt_at_apply:\n  assumes \"eqvt_at f x\"\n  shows \"(p \\<bullet> f) x = f x\"", "lemma eqvt_at_apply':\n  assumes \"eqvt_at f x\"\n  shows \"p \\<bullet> f x = f (p \\<bullet> x)\"", "lemma eqvt_at_apply'':\n  assumes \"eqvt_at f x\"\n  shows \"(p \\<bullet> f) (p \\<bullet> x) = f (p \\<bullet> x)\"", "lemma size_list_eqvt[eqvt]: \"p \\<bullet> size_list f x = size_list (p \\<bullet> f) (p \\<bullet> x)\"", "lemma eqvt_fresh_cong1: \"(\\<And>p x. p \\<bullet> (f x) = f (p \\<bullet> x)) \\<Longrightarrow> a \\<sharp> x \\<Longrightarrow> a \\<sharp> f x \"", "lemma eqvt_fresh_cong2:\n  assumes eqvt: \"(\\<And>p x y. p \\<bullet> (f x y) = f (p \\<bullet> x) (p \\<bullet> y))\"\n  and fresh1: \"a \\<sharp> x\" and fresh2: \"a \\<sharp> y\"\n  shows \"a \\<sharp> f x y\"", "lemma eqvt_fresh_star_cong1:\n  assumes eqvt: \"(\\<And>p x. p \\<bullet> (f x) = f (p \\<bullet> x))\"\n  and fresh1: \"a \\<sharp>* x\"\n  shows \"a \\<sharp>* f x\"", "lemma eqvt_fresh_star_cong2:\n  assumes eqvt: \"(\\<And>p x y. p \\<bullet> (f x y) = f (p \\<bullet> x) (p \\<bullet> y))\"\n  and fresh1: \"a \\<sharp>* x\" and fresh2: \"a \\<sharp>* y\"\n  shows \"a \\<sharp>* f x y\"", "lemma eqvt_fresh_cong3:\n  assumes eqvt: \"(\\<And>p x y z. p \\<bullet> (f x y z) = f (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z))\"\n  and fresh1: \"a \\<sharp> x\" and fresh2: \"a \\<sharp> y\" and fresh3: \"a \\<sharp> z\"\n  shows \"a \\<sharp> f x y z\"", "lemma eqvt_fresh_star_cong3:\n  assumes eqvt: \"(\\<And>p x y z. p \\<bullet> (f x y z) = f (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z))\"\n  and fresh1: \"a \\<sharp>* x\" and fresh2: \"a \\<sharp>* y\" and fresh3: \"a \\<sharp>* z\"\n  shows \"a \\<sharp>* f x y z\"", "lemma not_self_fresh[simp]: \"atom x \\<sharp> x \\<longleftrightarrow> False\"", "lemma fresh_star_singleton: \"{ x } \\<sharp>* e \\<longleftrightarrow> x \\<sharp> e\"", "lemma eqvt_cases:\n  fixes f x \\<pi>\n  assumes eqvt: \"\\<And>x. \\<pi> \\<bullet> f x = f (\\<pi> \\<bullet> x)\"\n  obtains \"f x\" \"f (\\<pi> \\<bullet> x)\" | \"\\<not> f x \" \" \\<not> f (\\<pi> \\<bullet> x)\"", "lemma range_eqvt: \"\\<pi> \\<bullet> range Y = range (\\<pi> \\<bullet> Y)\"", "lemma case_option_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> case_option d f x = case_option (\\<pi> \\<bullet> d) (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> x)\"", "lemma supp_option_eqvt:\n  \"supp (case_option d f x) \\<subseteq> supp d \\<union> supp f \\<union> supp x\"", "lemma funpow_eqvt[simp,eqvt]:\n  \"\\<pi> \\<bullet> ((f :: 'a \\<Rightarrow> 'a::pt) ^^ n) = (\\<pi> \\<bullet> f) ^^ (\\<pi> \\<bullet> n)\"", "lemma delete_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.delete x \\<Gamma> = AList.delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma restrict_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.restrict S \\<Gamma> = AList.restrict (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma supp_restrict:\n  \"supp (AList.restrict S \\<Gamma>) \\<subseteq> supp \\<Gamma>\"", "lemma clearjunk_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.clearjunk \\<Gamma> = AList.clearjunk (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma map_ran_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> map_ran f \\<Gamma> = map_ran (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma dom_perm:\n  \"dom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> (dom f)\"", "lemmas dom_perm_rev[simp,eqvt] = dom_perm[symmetric]", "lemma ran_perm[simp]:\n  \"\\<pi> \\<bullet> (ran f) = ran (\\<pi> \\<bullet> f)\"", "lemma map_add_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (m1 ++ m2) = (\\<pi> \\<bullet> m1) ++ (\\<pi> \\<bullet> m2)\"", "lemma map_of_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> map_of l = map_of (\\<pi> \\<bullet> l)\"", "lemma concat_eqvt[eqvt]: \"\\<pi> \\<bullet> concat l = concat (\\<pi> \\<bullet> l)\"", "lemma tranclp_eqvt[eqvt]: \"\\<pi> \\<bullet> tranclp P v\\<^sub>1 v\\<^sub>2 = tranclp (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)\"", "lemma rtranclp_eqvt[eqvt]: \"\\<pi> \\<bullet> rtranclp P v\\<^sub>1 v\\<^sub>2 = rtranclp (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)\"", "lemma Set_filter_eqvt[eqvt]: \"\\<pi> \\<bullet> Set.filter P S = Set.filter (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> S)\"", "lemma Sigma_eqvt'[eqvt]: \"\\<pi> \\<bullet> Sigma = Sigma\"", "lemma override_on_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (override_on m1 m2 S) = override_on (\\<pi> \\<bullet> m1) (\\<pi> \\<bullet> m2) (\\<pi> \\<bullet> S)\"", "lemma card_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (card S) = card (\\<pi> \\<bullet> S)\"", "lemma Projl_permute:\n  assumes a: \"\\<exists>y. f = Inl y\"\n  shows \"(p \\<bullet> (Sum_Type.projl f)) = Sum_Type.projl (p \\<bullet> f)\"", "lemma Projr_permute:\n  assumes a: \"\\<exists>y. f = Inr y\"\n  shows \"(p \\<bullet> (Sum_Type.projr f)) = Sum_Type.projr (p \\<bullet> f)\"", "lemma fresh_list_elem:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"e \\<in> set \\<Gamma>\"\n  shows \"a \\<sharp> e\"", "lemma set_not_fresh:\n  \"x \\<in> set L \\<Longrightarrow> \\<not>(atom x \\<sharp> L)\"", "lemma pure_fresh_star[simp]: \"a \\<sharp>* (x :: 'a :: pure)\"", "lemma supp_set_mem: \"x \\<in> set L \\<Longrightarrow> supp x \\<subseteq> supp L\"", "lemma set_supp_mono: \"set L \\<subseteq> set L2 \\<Longrightarrow> supp L \\<subseteq> supp L2\"", "lemma fresh_star_at_base:\n  fixes x :: \"'a :: at_base\"\n  shows \"S \\<sharp>* x \\<longleftrightarrow> atom x \\<notin> S\"", "lemma supp_mono: \"finite (B::'a::fs set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> supp A \\<subseteq> supp B\"", "lemma fresh_subset:\n  \"finite B \\<Longrightarrow> x \\<sharp> (B :: 'a::at_base set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<sharp> A\"", "lemma fresh_star_subset:\n  \"finite B \\<Longrightarrow> x \\<sharp>* (B :: 'a::at_base set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<sharp>* A\"", "lemma fresh_star_set_subset:\n  \"x \\<sharp>* (B :: 'a::at_base list) \\<Longrightarrow> set A \\<subseteq> set B \\<Longrightarrow> x \\<sharp>* A\"", "lemma fv_eqvt[simp,eqvt]: \"\\<pi> \\<bullet> (fv e) = fv (\\<pi> \\<bullet> e)\"", "lemma fv_Nil[simp]: \"fv [] = {}\"", "lemma fv_Cons[simp]: \"fv (x # xs) = fv x \\<union> fv xs\"", "lemma fv_Pair[simp]: \"fv (x, y) = fv x \\<union> fv y\"", "lemma fv_append[simp]: \"fv (x @ y) = fv x \\<union> fv y\"", "lemma fv_at_base[simp]: \"fv a = {a::'a::at_base}\"", "lemma fv_pure[simp]: \"fv (a::'a::pure) = {}\"", "lemma fv_set_at_base[simp]: \"fv (l :: ('a :: at_base) list) = set l\"", "lemma flip_not_fv: \"a \\<notin> fv x \\<Longrightarrow> b \\<notin> fv x \\<Longrightarrow> (a \\<leftrightarrow> b) \\<bullet> x = x\"", "lemma fv_not_fresh: \"atom x \\<sharp> e \\<longleftrightarrow> x \\<notin> fv e\"", "lemma fresh_fv: \"finite (fv e :: 'a set) \\<Longrightarrow>  atom (x :: ('a::at_base)) \\<sharp> (fv e :: 'a set) \\<longleftrightarrow> atom x \\<sharp> e\"", "lemma finite_fv[simp]: \"finite (fv (e::'a::fs) :: ('b::at_base) set)\"", "lemma set_fv_list[simp]: \"set (fv_list e) = (fv e :: ('b::at_base) set)\"", "lemma fresh_fv_list[simp]:\n  \"a \\<sharp> (fv_list e :: 'b::at_base list) \\<longleftrightarrow> a \\<sharp> (fv e :: 'b::at_base set)\"", "lemma pure_permute_id: \"permute p = (\\<lambda> x. (x::'a::pure))\"", "lemma supp_set_elem_finite:\n  assumes \"finite S\"\n  and \"(m::'a::fs) \\<in> S\"\n  and \"y \\<in> supp m\"\n  shows \"y \\<in> supp S\"", "lemmas fresh_star_Cons = fresh_star_list(2)", "lemma mem_permute_set: \n  shows \"x \\<in> p \\<bullet> S \\<longleftrightarrow> (- p \\<bullet> x) \\<in> S\"", "lemma flip_set_both_not_in:\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"((x' \\<leftrightarrow> x) \\<bullet> S) = S\"", "lemma inj_atom: \"inj atom\"", "lemmas image_Int[OF inj_atom, simp]", "lemma eqvt_uncurry: \"eqvt f \\<Longrightarrow> eqvt (case_prod f)\"", "lemma supp_fun_app_eqvt2:\n  assumes a: \"eqvt f\"\n  shows \"supp (f x y) \\<subseteq> supp x \\<union> supp y\"", "lemma supp_fun_app_eqvt3:\n  assumes a: \"eqvt f\"\n  shows \"supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z\"", "lemma permute_0[simp]: \"permute 0 = (\\<lambda> x. x)\"", "lemma permute_comp[simp]: \"permute x \\<circ> permute y = permute (x + y)\"", "lemma map_permute: \"map (permute p) = permute p\"", "lemma fresh_star_restrictA[intro]: \"a \\<sharp>* \\<Gamma> \\<Longrightarrow> a \\<sharp>* AList.restrict V \\<Gamma>\"", "lemma Abs_lst_Nil_eq[simp]: \"[[]]lst. (x::'a::fs) = [xs]lst. x' \\<longleftrightarrow> (([],x) = (xs, x'))\"", "lemma Abs_lst_Nil_eq2[simp]: \"[xs]lst. (x::'a::fs) = [[]]lst. x' \\<longleftrightarrow> ((xs,x) = ([], x'))\"", "lemma prod_cases8 [cases type]:\n  obtains (fields) a b c d e f g h where \"y = (a, b, c, d, e, f, g,h)\"", "lemma prod_induct8 [case_names fields, induct type]:\n  \"(\\<And>a b c d e f g h. P (a, b, c, d, e, f, g, h)) \\<Longrightarrow> P x\"", "lemma prod_cases9 [cases type]:\n  obtains (fields) a b c d e f g h i where \"y = (a, b, c, d, e, f, g,h,i)\"", "lemma prod_induct9 [case_names fields, induct type]:\n  \"(\\<And>a b c d e f g h i. P (a, b, c, d, e, f, g, h, i)) \\<Longrightarrow> P x\"", "lemma fresh_prod2[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b) = (x \\<sharp> a \\<and> x \\<sharp> b )\"", "lemma fresh_prod3[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c)\"", "lemma fresh_prod4[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d)\"", "lemma fresh_prod5[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e)\"", "lemma fresh_prod6[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f)\"", "lemma fresh_prod7[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g)\"", "lemma fresh_prod8[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h )\"", "lemma fresh_prod9[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i)\"", "lemma fresh_prod10[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i,j) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j)\"", "lemma fresh_prod12[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i,j,k,l) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j \\<and> x \\<sharp> k \\<and> x \\<sharp> l)\"", "lemmas fresh_prodN = fresh_Pair fresh_prod3  fresh_prod4  fresh_prod5 fresh_prod6 fresh_prod7 fresh_prod8 fresh_prod9 fresh_prod10 fresh_prod12", "lemma fresh_prod2I:\n  fixes x and x1 and x2\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" \n  shows \"x \\<sharp> (x1,x2)\"", "lemma fresh_prod3I:\n  fixes x and x1 and x2 and x3 \n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" \n  shows \"x \\<sharp> (x1,x2,x3)\"", "lemma fresh_prod4I:\n  fixes x and x1 and x2 and x3 and x4\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" and \"x \\<sharp> x4\" \n  shows \"x \\<sharp> (x1,x2,x3,x4)\"", "lemma fresh_prod5I:\n  fixes x and x1 and x2 and x3 and x4 and x5\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" and \"x \\<sharp> x4\" and \"x \\<sharp> x5\"\n  shows \"x \\<sharp> (x1,x2,x3,x4,x5)\"", "lemma flip_collapse[simp]:\n  fixes b1::\"'a::pt\" and bv1::\"'b::at\" and bv2::\"'b::at\"\n  assumes \"atom bv2 \\<sharp> b1\" and \"atom c \\<sharp> (bv1,bv2,b1)\" and \"bv1 \\<noteq> bv2\" \n  shows \"(bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 = (bv1 \\<leftrightarrow> c) \\<bullet> b1\"", "lemma triple_eqvt[simp]:\n  \"p \\<bullet> (x, b,c) = (p \\<bullet> x,  p \\<bullet> b , p \\<bullet> c)\"", "lemma lst_fst:\n  fixes x::\"'a::at\" and t1::\"'b::fs\" and  x'::\"'a::at\" and t2::\"'c::fs\" \n  assumes \" ([[atom x]]lst. (t1,t2) = [[atom x']]lst. (t1',t2'))\"\n  shows \" ([[atom x]]lst. t1 = [[atom x']]lst. t1')\"", "lemma lst_snd:\n  fixes x::\"'a::at\" and t1::\"'b::fs\" and  x'::\"'a::at\" and t2::\"'c::fs\" \n  assumes \" ([[atom x]]lst. (t1,t2) = [[atom x']]lst. (t1',t2'))\"\n  shows \" ([[atom x]]lst. t2 = [[atom x']]lst. t2')\"", "lemma lst_head_cons_pair:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (x2 # xs2)\"\n  shows \"[[atom y1]]lst. (x1,xs1) = [[atom y2]]lst. (x2,xs2)\"", "lemma lst_head_cons_neq_nil:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (xs2)\"\n  shows \"xs2 \\<noteq> []\"", "lemma lst_head_cons:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (x2 # xs2)\"\n  shows \"[[atom y1]]lst. x1  = [[atom y2]]lst. x2\" and \"[[atom y1]]lst. xs1  = [[atom y2]]lst. xs2\"", "lemma lst_pure:\n  fixes x1::\"'a ::at\" and t1::\"'b::pure\" and  x2::\"'a ::at\" and t2::\"'b::pure\" \n  assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\"\n  shows \"t1=t2\"", "lemma lst_supp:\n assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\"\n shows \"supp t1 - {atom x1} = supp t2 - {atom x2}\"", "lemma lst_supp_subset:\n   assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\" and \"supp t1 \\<subseteq> {atom x1} \\<union> B\"\n   shows \"supp t2 \\<subseteq> {atom x2} \\<union> B\"", "lemma projl_inl_eqvt:\n  fixes \\<pi> :: perm\n  shows   \"\\<pi> \\<bullet> (projl (Inl x)) = projl (Inl (\\<pi> \\<bullet> x))\""], "translations": [["", "lemma perm_rel_lemma:\n  assumes \"\\<And> \\<pi> x y. r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y) \\<Longrightarrow> r x y\"\n  shows \"r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y) \\<longleftrightarrow> r x y\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y) = r x y", "by (metis (full_types) assms permute_minus_cancel(2))"], ["", "lemma perm_rel_lemma2:\n  assumes \"\\<And> \\<pi> x y. r x y \\<Longrightarrow> r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y)\"\n  shows \"r x y \\<longleftrightarrow> r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y)\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. r x y = r (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> y)", "by (metis (full_types) assms permute_minus_cancel(2))"], ["", "lemma fun_eqvtI:\n  assumes f_eqvt[eqvt]: \"(\\<And> p x. p \\<bullet> (f x) = f (p \\<bullet> x))\"\n  shows \"p \\<bullet> f = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> f = f", "by perm_simp rule"], ["", "lemma eqvt_at_apply:\n  assumes \"eqvt_at f x\"\n  shows \"(p \\<bullet> f) x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> f) x = f x", "by (metis (hide_lams, no_types) assms eqvt_at_def permute_fun_def permute_minus_cancel(1))"], ["", "lemma eqvt_at_apply':\n  assumes \"eqvt_at f x\"\n  shows \"p \\<bullet> f x = f (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> f x = f (p \\<bullet> x)", "by (metis (hide_lams, no_types) assms eqvt_at_def)"], ["", "lemma eqvt_at_apply'':\n  assumes \"eqvt_at f x\"\n  shows \"(p \\<bullet> f) (p \\<bullet> x) = f (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> f) (p \\<bullet> x) = f (p \\<bullet> x)", "by (metis (hide_lams, no_types) assms eqvt_at_def permute_fun_def permute_minus_cancel(1))"], ["", "lemma size_list_eqvt[eqvt]: \"p \\<bullet> size_list f x = size_list (p \\<bullet> f) (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> size_list f x = size_list (p \\<bullet> f) (p \\<bullet> x)", "proof (induction x)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])\n 2. \\<And>a x.\n       p \\<bullet> size_list f x =\n       size_list (p \\<bullet> f) (p \\<bullet> x) \\<Longrightarrow>\n       p \\<bullet> size_list f (a # x) =\n       size_list (p \\<bullet> f) (p \\<bullet> (a # x))", "case (Cons x xs)"], ["proof (state)\nthis:\n  p \\<bullet> size_list f xs = size_list (p \\<bullet> f) (p \\<bullet> xs)\n\ngoal (2 subgoals):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])\n 2. \\<And>a x.\n       p \\<bullet> size_list f x =\n       size_list (p \\<bullet> f) (p \\<bullet> x) \\<Longrightarrow>\n       p \\<bullet> size_list f (a # x) =\n       size_list (p \\<bullet> f) (p \\<bullet> (a # x))", "have \"f x = p \\<bullet> (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = p \\<bullet> f x", "by (simp add: permute_pure)"], ["proof (state)\nthis:\n  f x = p \\<bullet> f x\n\ngoal (2 subgoals):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])\n 2. \\<And>a x.\n       p \\<bullet> size_list f x =\n       size_list (p \\<bullet> f) (p \\<bullet> x) \\<Longrightarrow>\n       p \\<bullet> size_list f (a # x) =\n       size_list (p \\<bullet> f) (p \\<bullet> (a # x))", "also"], ["proof (state)\nthis:\n  f x = p \\<bullet> f x\n\ngoal (2 subgoals):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])\n 2. \\<And>a x.\n       p \\<bullet> size_list f x =\n       size_list (p \\<bullet> f) (p \\<bullet> x) \\<Longrightarrow>\n       p \\<bullet> size_list f (a # x) =\n       size_list (p \\<bullet> f) (p \\<bullet> (a # x))", "have \"... = (p \\<bullet> f) (p \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> f x = (p \\<bullet> f) (p \\<bullet> x)", "by simp"], ["proof (state)\nthis:\n  p \\<bullet> f x = (p \\<bullet> f) (p \\<bullet> x)\n\ngoal (2 subgoals):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])\n 2. \\<And>a x.\n       p \\<bullet> size_list f x =\n       size_list (p \\<bullet> f) (p \\<bullet> x) \\<Longrightarrow>\n       p \\<bullet> size_list f (a # x) =\n       size_list (p \\<bullet> f) (p \\<bullet> (a # x))", "with Cons"], ["proof (chain)\npicking this:\n  p \\<bullet> size_list f xs = size_list (p \\<bullet> f) (p \\<bullet> xs)\n  p \\<bullet> f x = (p \\<bullet> f) (p \\<bullet> x)", "show ?case"], ["proof (prove)\nusing this:\n  p \\<bullet> size_list f xs = size_list (p \\<bullet> f) (p \\<bullet> xs)\n  p \\<bullet> f x = (p \\<bullet> f) (p \\<bullet> x)\n\ngoal (1 subgoal):\n 1. p \\<bullet> size_list f (x # xs) =\n    size_list (p \\<bullet> f) (p \\<bullet> (x # xs))", "by (auto simp add: permute_pure)"], ["proof (state)\nthis:\n  p \\<bullet> size_list f (x # xs) =\n  size_list (p \\<bullet> f) (p \\<bullet> (x # xs))\n\ngoal (1 subgoal):\n 1. p \\<bullet> size_list f [] = size_list (p \\<bullet> f) (p \\<bullet> [])", "qed simp"], ["", "section \\<open> Freshness via equivariance \\<close>"], ["", "lemma eqvt_fresh_cong1: \"(\\<And>p x. p \\<bullet> (f x) = f (p \\<bullet> x)) \\<Longrightarrow> a \\<sharp> x \\<Longrightarrow> a \\<sharp> f x \""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> f x", "apply (rule fresh_fun_eqvt_app[of f])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> eqvt f\n 2. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> x", "apply (rule eqvtI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n        a \\<sharp> x\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet> f \\<equiv> f\n 2. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> x", "apply (rule eq_reflection)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n        a \\<sharp> x\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet> f = f\n 2. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> x", "apply (rule ext)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p xa.\n       \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n        a \\<sharp> x\\<rbrakk>\n       \\<Longrightarrow> (p \\<bullet> f) xa = f xa\n 2. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> x", "apply (metis permute_fun_def permute_minus_cancel(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>p x. p \\<bullet> f x = f (p \\<bullet> x);\n     a \\<sharp> x\\<rbrakk>\n    \\<Longrightarrow> a \\<sharp> x", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma eqvt_fresh_cong2:\n  assumes eqvt: \"(\\<And>p x y. p \\<bullet> (f x y) = f (p \\<bullet> x) (p \\<bullet> y))\"\n  and fresh1: \"a \\<sharp> x\" and fresh2: \"a \\<sharp> y\"\n  shows \"a \\<sharp> f x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "have \"eqvt (\\<lambda> (x,y). f x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt (\\<lambda>(x, y). f x y)", "using eqvt"], ["proof (prove)\nusing this:\n  ?p \\<bullet> f ?x ?y = f (?p \\<bullet> ?x) (?p \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. eqvt (\\<lambda>(x, y). f x y)", "apply (- , auto simp add: eqvt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (\\<And>p x y.\n           (p \\<bullet> f) (p \\<bullet> x) (p \\<bullet> y) =\n           f (p \\<bullet> x) (p \\<bullet> y)) \\<Longrightarrow>\n       (\\<lambda>(x, y). (p \\<bullet> f) x y) = (\\<lambda>(x, y). f x y)", "by (rule ext, auto, metis permute_minus_cancel(1))"], ["proof (state)\nthis:\n  eqvt (\\<lambda>(x, y). f x y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "moreover"], ["proof (state)\nthis:\n  eqvt (\\<lambda>(x, y). f x y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "have \"a \\<sharp> (x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> (x, y)", "using fresh1 fresh2"], ["proof (prove)\nusing this:\n  a \\<sharp> x\n  a \\<sharp> y\n\ngoal (1 subgoal):\n 1. a \\<sharp> (x, y)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> (x, y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "ultimately"], ["proof (chain)\npicking this:\n  eqvt (\\<lambda>(x, y). f x y)\n  a \\<sharp> (x, y)", "have \"a \\<sharp> (\\<lambda> (x,y). f x y) (x, y)\""], ["proof (prove)\nusing this:\n  eqvt (\\<lambda>(x, y). f x y)\n  a \\<sharp> (x, y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> (case (x, y) of (x, y) \\<Rightarrow> f x y)", "by (rule fresh_fun_eqvt_app)"], ["proof (state)\nthis:\n  a \\<sharp> (case (x, y) of (x, y) \\<Rightarrow> f x y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<sharp> (case (x, y) of (x, y) \\<Rightarrow> f x y)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y", "by simp"], ["proof (state)\nthis:\n  a \\<sharp> f x y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eqvt_fresh_star_cong1:\n  assumes eqvt: \"(\\<And>p x. p \\<bullet> (f x) = f (p \\<bullet> x))\"\n  and fresh1: \"a \\<sharp>* x\"\n  shows \"a \\<sharp>* f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* f x", "by (metis fresh_star_def eqvt_fresh_cong1 assms)"], ["", "lemma eqvt_fresh_star_cong2:\n  assumes eqvt: \"(\\<And>p x y. p \\<bullet> (f x y) = f (p \\<bullet> x) (p \\<bullet> y))\"\n  and fresh1: \"a \\<sharp>* x\" and fresh2: \"a \\<sharp>* y\"\n  shows \"a \\<sharp>* f x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* f x y", "by (metis fresh_star_def eqvt_fresh_cong2 assms)"], ["", "lemma eqvt_fresh_cong3:\n  assumes eqvt: \"(\\<And>p x y z. p \\<bullet> (f x y z) = f (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z))\"\n  and fresh1: \"a \\<sharp> x\" and fresh2: \"a \\<sharp> y\" and fresh3: \"a \\<sharp> z\"\n  shows \"a \\<sharp> f x y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "have \"eqvt (\\<lambda> (x,y,z). f x y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt (\\<lambda>(x, y, z). f x y z)", "using eqvt"], ["proof (prove)\nusing this:\n  ?p \\<bullet> f ?x ?y ?z =\n  f (?p \\<bullet> ?x) (?p \\<bullet> ?y) (?p \\<bullet> ?z)\n\ngoal (1 subgoal):\n 1. eqvt (\\<lambda>(x, y, z). f x y z)", "apply (- , auto simp add: eqvt_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       (\\<And>p x y z.\n           (p \\<bullet> f) (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z) =\n           f (p \\<bullet> x) (p \\<bullet> y)\n            (p \\<bullet> z)) \\<Longrightarrow>\n       (\\<lambda>(x, xa, y). (p \\<bullet> f) x xa y) =\n       (\\<lambda>(x, xa, y). f x xa y)", "by(rule ext, auto, metis permute_minus_cancel(1))"], ["proof (state)\nthis:\n  eqvt (\\<lambda>(x, y, z). f x y z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "moreover"], ["proof (state)\nthis:\n  eqvt (\\<lambda>(x, y, z). f x y z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "have \"a \\<sharp> (x, y, z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> (x, y, z)", "using fresh1 fresh2 fresh3"], ["proof (prove)\nusing this:\n  a \\<sharp> x\n  a \\<sharp> y\n  a \\<sharp> z\n\ngoal (1 subgoal):\n 1. a \\<sharp> (x, y, z)", "by auto"], ["proof (state)\nthis:\n  a \\<sharp> (x, y, z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "ultimately"], ["proof (chain)\npicking this:\n  eqvt (\\<lambda>(x, y, z). f x y z)\n  a \\<sharp> (x, y, z)", "have \"a \\<sharp> (\\<lambda> (x,y,z). f x y z) (x, y, z)\""], ["proof (prove)\nusing this:\n  eqvt (\\<lambda>(x, y, z). f x y z)\n  a \\<sharp> (x, y, z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> (case (x, y, z) of (x, y, z) \\<Rightarrow> f x y z)", "by (rule fresh_fun_eqvt_app)"], ["proof (state)\nthis:\n  a \\<sharp> (case (x, y, z) of (x, y, z) \\<Rightarrow> f x y z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "thus ?thesis"], ["proof (prove)\nusing this:\n  a \\<sharp> (case (x, y, z) of (x, y, z) \\<Rightarrow> f x y z)\n\ngoal (1 subgoal):\n 1. a \\<sharp> f x y z", "by simp"], ["proof (state)\nthis:\n  a \\<sharp> f x y z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma eqvt_fresh_star_cong3:\n  assumes eqvt: \"(\\<And>p x y z. p \\<bullet> (f x y z) = f (p \\<bullet> x) (p \\<bullet> y) (p \\<bullet> z))\"\n  and fresh1: \"a \\<sharp>* x\" and fresh2: \"a \\<sharp>* y\" and fresh3: \"a \\<sharp>* z\"\n  shows \"a \\<sharp>* f x y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* f x y z", "by (metis fresh_star_def eqvt_fresh_cong3 assms)"], ["", "section \\<open> Additional simplification rules \\<close>"], ["", "lemma not_self_fresh[simp]: \"atom x \\<sharp> x \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom x \\<sharp> x = False", "by (metis fresh_at_base(2))"], ["", "lemma fresh_star_singleton: \"{ x } \\<sharp>* e \\<longleftrightarrow> x \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<sharp>* e = x \\<sharp> e", "by (simp add: fresh_star_def)"], ["", "section \\<open> Additional equivariance lemmas \\<close>"], ["", "lemma eqvt_cases:\n  fixes f x \\<pi>\n  assumes eqvt: \"\\<And>x. \\<pi> \\<bullet> f x = f (\\<pi> \\<bullet> x)\"\n  obtains \"f x\" \"f (\\<pi> \\<bullet> x)\" | \"\\<not> f x \" \" \\<not> f (\\<pi> \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>f x; f (\\<pi> \\<bullet> x)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> f x; \\<not> f (\\<pi> \\<bullet> x)\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms[symmetric]"], ["proof (prove)\nusing this:\n  f (\\<pi> \\<bullet> ?x) = \\<pi> \\<bullet> f ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>f x; f (\\<pi> \\<bullet> x)\\<rbrakk>\n             \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> f x; \\<not> f (\\<pi> \\<bullet> x)\\<rbrakk>\n     \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases \"f x\") auto"], ["", "lemma range_eqvt: \"\\<pi> \\<bullet> range Y = range (\\<pi> \\<bullet> Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> range Y = range (\\<pi> \\<bullet> Y)", "unfolding image_eqvt UNIV_eqvt"], ["proof (prove)\ngoal (1 subgoal):\n 1. range (\\<pi> \\<bullet> Y) = range (\\<pi> \\<bullet> Y)", ".."], ["", "lemma case_option_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> case_option d f x = case_option (\\<pi> \\<bullet> d) (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (case x of None \\<Rightarrow> d\n                     | Some x \\<Rightarrow> f x) =\n    (case \\<pi> \\<bullet> x of None \\<Rightarrow> \\<pi> \\<bullet> d\n     | Some x \\<Rightarrow> (\\<pi> \\<bullet> f) x)", "by(cases x)(simp_all)"], ["", "lemma supp_option_eqvt:\n  \"supp (case_option d f x) \\<subseteq> supp d \\<union> supp f \\<union> supp x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (case x of None \\<Rightarrow> d | Some x \\<Rightarrow> f x)\n    \\<subseteq> supp d \\<union> supp f \\<union> supp x", "apply (cases x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x = None \\<Longrightarrow>\n    supp (case x of None \\<Rightarrow> d | Some x \\<Rightarrow> f x)\n    \\<subseteq> supp d \\<union> supp f \\<union> supp x\n 2. \\<And>a.\n       x = Some a \\<Longrightarrow>\n       supp (case x of None \\<Rightarrow> d | Some x \\<Rightarrow> f x)\n       \\<subseteq> supp d \\<union> supp f \\<union> supp x", "apply (auto simp add: supp_Some )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a xa.\n       \\<lbrakk>x = Some a; xa \\<in> supp (f a); xa \\<notin> supp a;\n        xa \\<notin> supp f\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> supp d", "apply (metis (mono_tags) Un_iff subsetCE supp_fun_app)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma funpow_eqvt[simp,eqvt]:\n  \"\\<pi> \\<bullet> ((f :: 'a \\<Rightarrow> 'a::pt) ^^ n) = (\\<pi> \\<bullet> f) ^^ (\\<pi> \\<bullet> n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> f ^^ n = (\\<pi> \\<bullet> f) ^^ (\\<pi> \\<bullet> n)", "by (induct n,simp, rule ext, simp, perm_simp,simp)"], ["", "lemma delete_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.delete x \\<Gamma> = AList.delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> AList.delete x \\<Gamma> =\n    AList.delete (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> \\<Gamma>)", "by (induct \\<Gamma>, auto)"], ["", "lemma restrict_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.restrict S \\<Gamma> = AList.restrict (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> AList.restrict S \\<Gamma> =\n    AList.restrict (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> \\<Gamma>)", "unfolding AList.restrict_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> filter (\\<lambda>(k, v). k \\<in> S) \\<Gamma> =\n    filter (\\<lambda>(k, v). k \\<in> \\<pi> \\<bullet> S)\n     (\\<pi> \\<bullet> \\<Gamma>)", "by perm_simp rule"], ["", "lemma supp_restrict:\n  \"supp (AList.restrict S \\<Gamma>) \\<subseteq> supp \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (AList.restrict S \\<Gamma>) \\<subseteq> supp \\<Gamma>", "by (induction \\<Gamma>) (auto simp add: supp_Pair supp_Cons)"], ["", "lemma clearjunk_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> AList.clearjunk \\<Gamma> = AList.clearjunk (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> AList.clearjunk \\<Gamma> =\n    AList.clearjunk (\\<pi> \\<bullet> \\<Gamma>)", "by (induction \\<Gamma> rule: clearjunk.induct) auto"], ["", "lemma map_ran_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> map_ran f \\<Gamma> = map_ran (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> map_ran f \\<Gamma> =\n    map_ran (\\<pi> \\<bullet> f) (\\<pi> \\<bullet> \\<Gamma>)", "by (induct \\<Gamma>, auto)"], ["", "lemma dom_perm:\n  \"dom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> (dom f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (\\<pi> \\<bullet> f) = \\<pi> \\<bullet> dom f", "unfolding dom_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a. (\\<pi> \\<bullet> f) a \\<noteq> None} =\n    \\<pi> \\<bullet> {a. f a \\<noteq> None}", "by (perm_simp) (simp)"], ["", "lemmas dom_perm_rev[simp,eqvt] = dom_perm[symmetric]"], ["", "lemma ran_perm[simp]:\n  \"\\<pi> \\<bullet> (ran f) = ran (\\<pi> \\<bullet> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> ran f = ran (\\<pi> \\<bullet> f)", "unfolding ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> {b. \\<exists>a. f a = Some b} =\n    {b. \\<exists>a. (\\<pi> \\<bullet> f) a = Some b}", "by (perm_simp) (simp)"], ["", "lemma map_add_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (m1 ++ m2) = (\\<pi> \\<bullet> m1) ++ (\\<pi> \\<bullet> m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> m1 ++ m2 = (\\<pi> \\<bullet> m1) ++ (\\<pi> \\<bullet> m2)", "unfolding map_add_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (\\<lambda>x.\n                        case m2 x of None \\<Rightarrow> m1 x\n                        | Some x \\<Rightarrow> Some x) =\n    (\\<lambda>x.\n        case (\\<pi> \\<bullet> m2) x of\n        None \\<Rightarrow> (\\<pi> \\<bullet> m1) x\n        | Some x \\<Rightarrow> Some x)", "by (perm_simp, rule)"], ["", "lemma map_of_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> map_of l = map_of (\\<pi> \\<bullet> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> map_of l = map_of (\\<pi> \\<bullet> l)", "by (induct l, simp add: permute_fun_def,simp,perm_simp,auto)"], ["", "lemma concat_eqvt[eqvt]: \"\\<pi> \\<bullet> concat l = concat (\\<pi> \\<bullet> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> concat l = concat (\\<pi> \\<bullet> l)", "by (induction l)(auto simp add: append_eqvt)"], ["", "lemma tranclp_eqvt[eqvt]: \"\\<pi> \\<bullet> tranclp P v\\<^sub>1 v\\<^sub>2 = tranclp (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> P\\<^sup>+\\<^sup>+ v\\<^sub>1 v\\<^sub>2 =\n    (\\<pi> \\<bullet> P)\\<^sup>+\\<^sup>+ (\\<pi> \\<bullet> v\\<^sub>1)\n     (\\<pi> \\<bullet> v\\<^sub>2)", "unfolding tranclp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> lfp (\\<lambda>p x1 x2.\n                            (\\<exists>a b.\n                                x1 = a \\<and> x2 = b \\<and> P a b) \\<or>\n                            (\\<exists>a b c.\n                                x1 = a \\<and>\n                                x2 = c \\<and> p a b \\<and> P b c))\n                     v\\<^sub>1 v\\<^sub>2 =\n    lfp (\\<lambda>p x1 x2.\n            (\\<exists>a b.\n                x1 = a \\<and> x2 = b \\<and> (\\<pi> \\<bullet> P) a b) \\<or>\n            (\\<exists>a b c.\n                x1 = a \\<and>\n                x2 = c \\<and> p a b \\<and> (\\<pi> \\<bullet> P) b c))\n     (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)", "by perm_simp rule"], ["", "lemma rtranclp_eqvt[eqvt]: \"\\<pi> \\<bullet> rtranclp P v\\<^sub>1 v\\<^sub>2 = rtranclp (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> P\\<^sup>*\\<^sup>* v\\<^sub>1 v\\<^sub>2 =\n    (\\<pi> \\<bullet> P)\\<^sup>*\\<^sup>* (\\<pi> \\<bullet> v\\<^sub>1)\n     (\\<pi> \\<bullet> v\\<^sub>2)", "unfolding rtranclp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> lfp (\\<lambda>p x1 x2.\n                            (\\<exists>a. x1 = a \\<and> x2 = a) \\<or>\n                            (\\<exists>a b c.\n                                x1 = a \\<and>\n                                x2 = c \\<and> p a b \\<and> P b c))\n                     v\\<^sub>1 v\\<^sub>2 =\n    lfp (\\<lambda>p x1 x2.\n            (\\<exists>a. x1 = a \\<and> x2 = a) \\<or>\n            (\\<exists>a b c.\n                x1 = a \\<and>\n                x2 = c \\<and> p a b \\<and> (\\<pi> \\<bullet> P) b c))\n     (\\<pi> \\<bullet> v\\<^sub>1) (\\<pi> \\<bullet> v\\<^sub>2)", "by perm_simp rule"], ["", "lemma Set_filter_eqvt[eqvt]: \"\\<pi> \\<bullet> Set.filter P S = Set.filter (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> Set.filter P S =\n    Set.filter (\\<pi> \\<bullet> P) (\\<pi> \\<bullet> S)", "unfolding Set.filter_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> {a \\<in> S. P a} =\n    {a \\<in> \\<pi> \\<bullet> S. (\\<pi> \\<bullet> P) a}", "by perm_simp rule"], ["", "lemma Sigma_eqvt'[eqvt]: \"\\<pi> \\<bullet> Sigma = Sigma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> Sigma = Sigma", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. (\\<pi> \\<bullet> Sigma) x = Sigma x", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. (\\<pi> \\<bullet> Sigma) x xa = Sigma x xa", "apply (subst permute_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (\\<pi> \\<bullet> Sigma (- \\<pi> \\<bullet> x)) xa = Sigma x xa", "apply (subst permute_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<pi> \\<bullet> Sigma (- \\<pi> \\<bullet> x) (- \\<pi> \\<bullet> xa) =\n       Sigma x xa", "unfolding Sigma_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<pi> \\<bullet> (\\<Union>x\\<in>- \\<pi> \\<bullet> x.\n                           \\<Union>y\\<in>(- \\<pi> \\<bullet> xa) x.\n                              {(x, y)}) =\n       (\\<Union>x\\<in>x. \\<Union>y\\<in>xa x. {(x, y)})", "apply perm_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (\\<Union>x\\<in>- (\\<pi> \\<bullet> \\<pi>) \\<bullet> \\<pi> \\<bullet> x.\n           \\<Union>xa\\<in>(- (\\<pi> \\<bullet> \\<pi>) \\<bullet> \\<pi> \\<bullet> xa)\n                           x.\n              {(x, xa)}) =\n       (\\<Union>x\\<in>x. \\<Union>y\\<in>xa x. {(x, y)})", "apply (simp add: permute_self)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma override_on_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (override_on m1 m2 S) = override_on (\\<pi> \\<bullet> m1) (\\<pi> \\<bullet> m2) (\\<pi> \\<bullet> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> override_on m1 m2 S =\n    override_on (\\<pi> \\<bullet> m1) (\\<pi> \\<bullet> m2)\n     (\\<pi> \\<bullet> S)", "by (auto simp add: override_on_def )"], ["", "lemma card_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (card S) = card (\\<pi> \\<bullet> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> card S = card (\\<pi> \\<bullet> S)", "by (cases \"finite S\", induct rule: finite_induct) (auto simp add: card_insert_if mem_permute_iff permute_pure)"], ["", "(* Helper lemmas provided by Christian Urban *)"], ["", "lemma Projl_permute:\n  assumes a: \"\\<exists>y. f = Inl y\"\n  shows \"(p \\<bullet> (Sum_Type.projl f)) = Sum_Type.projl (p \\<bullet> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> projl f = projl (p \\<bullet> f)", "using a"], ["proof (prove)\nusing this:\n  \\<exists>y. f = Inl y\n\ngoal (1 subgoal):\n 1. p \\<bullet> projl f = projl (p \\<bullet> f)", "by auto"], ["", "lemma Projr_permute:\n  assumes a: \"\\<exists>y. f = Inr y\"\n  shows \"(p \\<bullet> (Sum_Type.projr f)) = Sum_Type.projr (p \\<bullet> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> projr f = projr (p \\<bullet> f)", "using a"], ["proof (prove)\nusing this:\n  \\<exists>y. f = Inr y\n\ngoal (1 subgoal):\n 1. p \\<bullet> projr f = projr (p \\<bullet> f)", "by auto"], ["", "section \\<open> Freshness lemmas \\<close>"], ["", "lemma fresh_list_elem:\n  assumes \"a \\<sharp> \\<Gamma>\"\n  and \"e \\<in> set \\<Gamma>\"\n  shows \"a \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> e", "using assms"], ["proof (prove)\nusing this:\n  a \\<sharp> \\<Gamma>\n  e \\<in> set \\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<sharp> e", "by(induct \\<Gamma>)(auto simp add: fresh_Cons)"], ["", "lemma set_not_fresh:\n  \"x \\<in> set L \\<Longrightarrow> \\<not>(atom x \\<sharp> L)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set L \\<Longrightarrow> \\<not> atom x \\<sharp> L", "by (metis fresh_list_elem not_self_fresh)"], ["", "lemma pure_fresh_star[simp]: \"a \\<sharp>* (x :: 'a :: pure)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* x", "by (simp add: fresh_star_def pure_fresh)"], ["", "lemma supp_set_mem: \"x \\<in> set L \\<Longrightarrow> supp x \\<subseteq> supp L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set L \\<Longrightarrow> supp x \\<subseteq> supp L", "by (induct L) (auto simp add: supp_Cons)"], ["", "lemma set_supp_mono: \"set L \\<subseteq> set L2 \\<Longrightarrow> supp L \\<subseteq> supp L2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set L \\<subseteq> set L2 \\<Longrightarrow> supp L \\<subseteq> supp L2", "by (induct L)(auto simp add: supp_Cons supp_Nil dest:supp_set_mem)"], ["", "lemma fresh_star_at_base:\n  fixes x :: \"'a :: at_base\"\n  shows \"S \\<sharp>* x \\<longleftrightarrow> atom x \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<sharp>* x = (atom x \\<notin> S)", "by (metis fresh_at_base(2) fresh_star_def)"], ["", "section \\<open> Freshness and support for subsets of variables \\<close>"], ["", "lemma supp_mono: \"finite (B::'a::fs set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> supp A \\<subseteq> supp B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> supp A \\<subseteq> supp B", "by (metis infinite_super subset_Un_eq supp_of_finite_union)"], ["", "lemma fresh_subset:\n  \"finite B \\<Longrightarrow> x \\<sharp> (B :: 'a::at_base set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<sharp> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite B; x \\<sharp> B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> x \\<sharp> A", "by (auto dest:supp_mono simp add: fresh_def)"], ["", "lemma fresh_star_subset:\n  \"finite B \\<Longrightarrow> x \\<sharp>* (B :: 'a::at_base set) \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<sharp>* A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite B; x \\<sharp>* B; A \\<subseteq> B\\<rbrakk>\n    \\<Longrightarrow> x \\<sharp>* A", "by (metis fresh_star_def fresh_subset)"], ["", "lemma fresh_star_set_subset:\n  \"x \\<sharp>* (B :: 'a::at_base list) \\<Longrightarrow> set A \\<subseteq> set B \\<Longrightarrow> x \\<sharp>* A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<sharp>* B; set A \\<subseteq> set B\\<rbrakk>\n    \\<Longrightarrow> x \\<sharp>* A", "by (metis fresh_star_set fresh_star_subset[OF finite_set])"], ["", "section \\<open> The set of free variables of an expression \\<close>"], ["", "definition fv :: \"'a::pt \\<Rightarrow> 'b::at_base set\"\n  where \"fv e = {v. atom v \\<in> supp e}\""], ["", "lemma fv_eqvt[simp,eqvt]: \"\\<pi> \\<bullet> (fv e) = fv (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> fv e = fv (\\<pi> \\<bullet> e)", "unfolding fv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> {v. atom v \\<in> supp e} =\n    {v. atom v \\<in> supp (\\<pi> \\<bullet> e)}", "by simp"], ["", "lemma fv_Nil[simp]: \"fv [] = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv [] = {}", "by (auto simp add: fv_def supp_Nil)"], ["", "lemma fv_Cons[simp]: \"fv (x # xs) = fv x \\<union> fv xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (x # xs) = fv x \\<union> fv xs", "by (auto simp add: fv_def supp_Cons)"], ["", "lemma fv_Pair[simp]: \"fv (x, y) = fv x \\<union> fv y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (x, y) = fv x \\<union> fv y", "by (auto simp add: fv_def supp_Pair)"], ["", "lemma fv_append[simp]: \"fv (x @ y) = fv x \\<union> fv y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (x @ y) = fv x \\<union> fv y", "by (auto simp add: fv_def supp_append)"], ["", "lemma fv_at_base[simp]: \"fv a = {a::'a::at_base}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv a = {a}", "by (auto simp add: fv_def supp_at_base)"], ["", "lemma fv_pure[simp]: \"fv (a::'a::pure) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv a = {}", "by (auto simp add: fv_def pure_supp)"], ["", "lemma fv_set_at_base[simp]: \"fv (l :: ('a :: at_base) list) = set l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv l = set l", "by (induction l) auto"], ["", "lemma flip_not_fv: \"a \\<notin> fv x \\<Longrightarrow> b \\<notin> fv x \\<Longrightarrow> (a \\<leftrightarrow> b) \\<bullet> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<notin> fv x; b \\<notin> fv x\\<rbrakk>\n    \\<Longrightarrow> (a \\<leftrightarrow> b) \\<bullet> x = x", "by (metis flip_def fresh_def fv_def mem_Collect_eq swap_fresh_fresh)"], ["", "lemma fv_not_fresh: \"atom x \\<sharp> e \\<longleftrightarrow> x \\<notin> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom x \\<sharp> e = (x \\<notin> fv e)", "unfolding fv_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (atom x \\<notin> supp e) = (x \\<notin> {v. atom v \\<in> supp e})", "by blast"], ["", "lemma fresh_fv: \"finite (fv e :: 'a set) \\<Longrightarrow>  atom (x :: ('a::at_base)) \\<sharp> (fv e :: 'a set) \\<longleftrightarrow> atom x \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fv e) \\<Longrightarrow> atom x \\<sharp> fv e = atom x \\<sharp> e", "unfolding fv_def fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {v. atom v \\<in> supp e} \\<Longrightarrow>\n    (atom x \\<notin> supp {v. atom v \\<in> supp e}) =\n    (atom x \\<notin> supp e)", "by (auto simp add: supp_finite_set_at_base)"], ["", "lemma finite_fv[simp]: \"finite (fv (e::'a::fs) :: ('b::at_base) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fv e)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. finite (fv e)", "have \"finite (supp e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (supp e)", "by (metis finite_supp)"], ["proof (state)\nthis:\n  finite (supp e)\n\ngoal (1 subgoal):\n 1. finite (fv e)", "hence \"finite (atom -` supp e :: 'b set)\""], ["proof (prove)\nusing this:\n  finite (supp e)\n\ngoal (1 subgoal):\n 1. finite (atom -` supp e)", "apply (rule finite_vimageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj atom", "apply (rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV; atom x = atom y\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply (simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  finite (atom -` supp e)\n\ngoal (1 subgoal):\n 1. finite (fv e)", "moreover"], ["proof (state)\nthis:\n  finite (atom -` supp e)\n\ngoal (1 subgoal):\n 1. finite (fv e)", "have \"(atom -` supp e  :: 'b set) = fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom -` supp e = fv e", "unfolding fv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. atom -` supp e = {v. atom v \\<in> supp e}", "by auto"], ["proof (state)\nthis:\n  atom -` supp e = fv e\n\ngoal (1 subgoal):\n 1. finite (fv e)", "ultimately"], ["proof (chain)\npicking this:\n  finite (atom -` supp e)\n  atom -` supp e = fv e", "show ?thesis"], ["proof (prove)\nusing this:\n  finite (atom -` supp e)\n  atom -` supp e = fv e\n\ngoal (1 subgoal):\n 1. finite (fv e)", "by simp"], ["proof (state)\nthis:\n  finite (fv e)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition fv_list :: \"'a::fs \\<Rightarrow> 'b::at_base list\"\n  where \"fv_list e = (SOME l. set l = fv e)\""], ["", "lemma set_fv_list[simp]: \"set (fv_list e) = (fv e :: ('b::at_base) set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (fv_list e) = fv e", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. set (fv_list e) = fv e", "have \"finite (fv e :: 'b set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fv e)", "by (rule finite_fv)"], ["proof (state)\nthis:\n  finite (fv e)\n\ngoal (1 subgoal):\n 1. set (fv_list e) = fv e", "from finite_list[OF finite_fv]"], ["proof (chain)\npicking this:\n  \\<exists>xs. set xs = fv ?e1", "obtain l where \"set l = (fv e :: 'b set)\""], ["proof (prove)\nusing this:\n  \\<exists>xs. set xs = fv ?e1\n\ngoal (1 subgoal):\n 1. (\\<And>l. set l = fv e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  set l = fv e\n\ngoal (1 subgoal):\n 1. set (fv_list e) = fv e", "thus ?thesis"], ["proof (prove)\nusing this:\n  set l = fv e\n\ngoal (1 subgoal):\n 1. set (fv_list e) = fv e", "unfolding fv_list_def"], ["proof (prove)\nusing this:\n  set l = fv e\n\ngoal (1 subgoal):\n 1. set (SOME l. set l = fv e) = fv e", "by (rule someI)"], ["proof (state)\nthis:\n  set (fv_list e) = fv e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_fv_list[simp]:\n  \"a \\<sharp> (fv_list e :: 'b::at_base list) \\<longleftrightarrow> a \\<sharp> (fv e :: 'b::at_base set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "have \"a \\<sharp> (fv_list e :: 'b::at_base list) \\<longleftrightarrow> a \\<sharp> set (fv_list e :: 'b::at_base list)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> set (fv_list e)", "by (rule fresh_set[symmetric])"], ["proof (state)\nthis:\n  a \\<sharp> fv_list e = a \\<sharp> set (fv_list e)\n\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "also"], ["proof (state)\nthis:\n  a \\<sharp> fv_list e = a \\<sharp> set (fv_list e)\n\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "have \"\\<dots> \\<longleftrightarrow> a \\<sharp> (fv e :: 'b::at_base set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> set (fv_list e) = a \\<sharp> fv e", "by simp"], ["proof (state)\nthis:\n  a \\<sharp> set (fv_list e) = a \\<sharp> fv e\n\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "finally"], ["proof (chain)\npicking this:\n  a \\<sharp> fv_list e = a \\<sharp> fv e", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<sharp> fv_list e = a \\<sharp> fv e\n\ngoal (1 subgoal):\n 1. a \\<sharp> fv_list e = a \\<sharp> fv e", "."], ["proof (state)\nthis:\n  a \\<sharp> fv_list e = a \\<sharp> fv e\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open> Other useful lemmas \\<close>"], ["", "lemma pure_permute_id: \"permute p = (\\<lambda> x. (x::'a::pure))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute p = (\\<lambda>x. x)", "by rule (simp add: permute_pure)"], ["", "lemma supp_set_elem_finite:\n  assumes \"finite S\"\n  and \"(m::'a::fs) \\<in> S\"\n  and \"y \\<in> supp m\"\n  shows \"y \\<in> supp S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> supp S", "using assms supp_of_finite_sets"], ["proof (prove)\nusing this:\n  finite S\n  m \\<in> S\n  y \\<in> supp m\n  finite ?S \\<Longrightarrow> supp ?S = \\<Union> (supp ` ?S)\n\ngoal (1 subgoal):\n 1. y \\<in> supp S", "by auto"], ["", "lemmas fresh_star_Cons = fresh_star_list(2)"], ["", "lemma mem_permute_set: \n  shows \"x \\<in> p \\<bullet> S \\<longleftrightarrow> (- p \\<bullet> x) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> p \\<bullet> S) = (- p \\<bullet> x \\<in> S)", "by (metis mem_permute_iff permute_minus_cancel(2))"], ["", "lemma flip_set_both_not_in:\n  assumes \"x \\<notin> S\" and \"x' \\<notin> S\"\n  shows \"((x' \\<leftrightarrow> x) \\<bullet> S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x' \\<leftrightarrow> x) \\<bullet> S = S", "unfolding permute_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x' \\<leftrightarrow> x) \\<bullet> xa |xa. xa \\<in> S} = S", "by (auto) (metis assms flip_at_base_simps(3))+"], ["", "lemma inj_atom: \"inj atom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj atom", "by (metis atom_eq_iff injI)"], ["", "lemmas image_Int[OF inj_atom, simp]"], ["", "lemma eqvt_uncurry: \"eqvt f \\<Longrightarrow> eqvt (case_prod f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eqvt f \\<Longrightarrow> eqvt (\\<lambda>(x, y). f x y)", "unfolding eqvt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>p. p \\<bullet> f = f \\<Longrightarrow>\n    \\<forall>p.\n       p \\<bullet> (\\<lambda>(x, y). f x y) = (\\<lambda>(x, y). f x y)", "by perm_simp simp"], ["", "lemma supp_fun_app_eqvt2:\n  assumes a: \"eqvt f\"\n  shows \"supp (f x y) \\<subseteq> supp x \\<union> supp y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (f x y) \\<subseteq> supp x \\<union> supp y", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. supp (f x y) \\<subseteq> supp x \\<union> supp y", "from supp_fun_app_eqvt[OF eqvt_uncurry [OF a]]"], ["proof (chain)\npicking this:\n  supp (case ?x of (x, xa) \\<Rightarrow> f x xa) \\<subseteq> supp ?x", "have \"supp (case_prod f (x,y)) \\<subseteq> supp (x,y)\""], ["proof (prove)\nusing this:\n  supp (case ?x of (x, xa) \\<Rightarrow> f x xa) \\<subseteq> supp ?x\n\ngoal (1 subgoal):\n 1. supp (case (x, y) of (x, xa) \\<Rightarrow> f x xa)\n    \\<subseteq> supp (x, y)", "."], ["proof (state)\nthis:\n  supp (case (x, y) of (x, xa) \\<Rightarrow> f x xa) \\<subseteq> supp (x, y)\n\ngoal (1 subgoal):\n 1. supp (f x y) \\<subseteq> supp x \\<union> supp y", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp (case (x, y) of (x, xa) \\<Rightarrow> f x xa) \\<subseteq> supp (x, y)\n\ngoal (1 subgoal):\n 1. supp (f x y) \\<subseteq> supp x \\<union> supp y", "by (simp add: supp_Pair)"], ["proof (state)\nthis:\n  supp (f x y) \\<subseteq> supp x \\<union> supp y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma supp_fun_app_eqvt3:\n  assumes a: \"eqvt f\"\n  shows \"supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z", "from supp_fun_app_eqvt2[OF eqvt_uncurry [OF a]]"], ["proof (chain)\npicking this:\n  supp ((case ?x of (x, xa) \\<Rightarrow> f x xa) ?y)\n  \\<subseteq> supp ?x \\<union> supp ?y", "have \"supp (case_prod f (x,y) z) \\<subseteq> supp (x,y) \\<union> supp z\""], ["proof (prove)\nusing this:\n  supp ((case ?x of (x, xa) \\<Rightarrow> f x xa) ?y)\n  \\<subseteq> supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. supp ((case (x, y) of (x, xa) \\<Rightarrow> f x xa) z)\n    \\<subseteq> supp (x, y) \\<union> supp z", "."], ["proof (state)\nthis:\n  supp ((case (x, y) of (x, xa) \\<Rightarrow> f x xa) z)\n  \\<subseteq> supp (x, y) \\<union> supp z\n\ngoal (1 subgoal):\n 1. supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp ((case (x, y) of (x, xa) \\<Rightarrow> f x xa) z)\n  \\<subseteq> supp (x, y) \\<union> supp z\n\ngoal (1 subgoal):\n 1. supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z", "by (simp add: supp_Pair)"], ["proof (state)\nthis:\n  supp (f x y z) \\<subseteq> supp x \\<union> supp y \\<union> supp z\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Fighting eta-contraction *)"], ["", "lemma permute_0[simp]: \"permute 0 = (\\<lambda> x. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute 0 = (\\<lambda>x. x)", "by auto"], ["", "lemma permute_comp[simp]: \"permute x \\<circ> permute y = permute (x + y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. permute x \\<circ> permute y = permute (x + y)", "by auto"], ["", "lemma map_permute: \"map (permute p) = permute p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (permute p) = permute p", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. map (permute p) x = p \\<bullet> x", "apply (induct_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. map (permute p) [] = p \\<bullet> []\n 2. \\<And>x a list.\n       map (permute p) list = p \\<bullet> list \\<Longrightarrow>\n       map (permute p) (a # list) = p \\<bullet> (a # list)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fresh_star_restrictA[intro]: \"a \\<sharp>* \\<Gamma> \\<Longrightarrow> a \\<sharp>* AList.restrict V \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* \\<Gamma> \\<Longrightarrow>\n    a \\<sharp>* AList.restrict V \\<Gamma>", "by (induction \\<Gamma>) (auto simp add: fresh_star_Cons)"], ["", "lemma Abs_lst_Nil_eq[simp]: \"[[]]lst. (x::'a::fs) = [xs]lst. x' \\<longleftrightarrow> (([],x) = (xs, x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([[]]lst. x = [xs]lst. x') = (([], x) = (xs, x'))", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. [[]]lst. x = [xs]lst. x' \\<Longrightarrow> ([], x) = (xs, x')\n 2. ([], x) = (xs, x') \\<Longrightarrow> [[]]lst. x = [xs]lst. x'", "apply (frule Abs_lst_fcb2[where f = \"\\<lambda> x y _ . (x,y)\" and as = \"[]\" and bs = \"xs\" and c = \"()\"])"], ["proof (prove)\ngoal (7 subgoals):\n 1. [[]]lst. x = [xs]lst. x' \\<Longrightarrow> set [] \\<sharp>* ([], x)\n 2. [[]]lst. x = [xs]lst. x' \\<Longrightarrow> set [] \\<sharp>* ()\n 3. [[]]lst. x = [xs]lst. x' \\<Longrightarrow> set xs \\<sharp>* ()\n 4. \\<And>p.\n       \\<lbrakk>[[]]lst. x = [xs]lst. x'; supp p \\<sharp>* ()\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet> ([], x) =\n                         (p \\<bullet> [], p \\<bullet> x)\n 5. \\<And>p.\n       \\<lbrakk>[[]]lst. x = [xs]lst. x'; supp p \\<sharp>* ()\\<rbrakk>\n       \\<Longrightarrow> p \\<bullet> (xs, x') =\n                         (p \\<bullet> xs, p \\<bullet> x')\n 6. \\<lbrakk>[[]]lst. x = [xs]lst. x'; ([], x) = (xs, x')\\<rbrakk>\n    \\<Longrightarrow> ([], x) = (xs, x')\n 7. ([], x) = (xs, x') \\<Longrightarrow> [[]]lst. x = [xs]lst. x'", "apply (auto simp add: fresh_star_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abs_lst_Nil_eq2[simp]: \"[xs]lst. (x::'a::fs) = [[]]lst. x' \\<longleftrightarrow> ((xs,x) = ([], x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ([xs]lst. x = [[]]lst. x') = ((xs, x) = ([], x'))", "by (subst eq_commute) auto"], ["", "lemma prod_cases8 [cases type]:\n  obtains (fields) a b c d e f g h where \"y = (a, b, c, d, e, f, g,h)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e f g h.\n        y = (a, b, c, d, e, f, g, h) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases y, case_tac g) blast"], ["", "lemma prod_induct8 [case_names fields, induct type]:\n  \"(\\<And>a b c d e f g h. P (a, b, c, d, e, f, g, h)) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e f g h. P (a, b, c, d, e, f, g, h)) \\<Longrightarrow>\n    P x", "by (cases x) blast"], ["", "lemma prod_cases9 [cases type]:\n  obtains (fields) a b c d e f g h i where \"y = (a, b, c, d, e, f, g,h,i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e f g h i.\n        y = (a, b, c, d, e, f, g, h, i) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (cases y, case_tac h) blast"], ["", "lemma prod_induct9 [case_names fields, induct type]:\n  \"(\\<And>a b c d e f g h i. P (a, b, c, d, e, f, g, h, i)) \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b c d e f g h i.\n        P (a, b, c, d, e, f, g, h, i)) \\<Longrightarrow>\n    P x", "by (cases x) blast"], ["", "named_theorems nominal_prod_simps"], ["", "named_theorems ms_fresh \"Facts for helping with freshness proofs\""], ["", "lemma fresh_prod2[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b) = (x \\<sharp> a \\<and> x \\<sharp> b )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b) = (x \\<sharp> a \\<and> x \\<sharp> b)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b) = (x \\<sharp> a \\<and> x \\<sharp> b)", "by fastforce"], ["", "lemma fresh_prod3[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c) =\n    (x \\<sharp> a \\<and> x \\<sharp> b \\<and> x \\<sharp> c)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c) =\n    (x \\<sharp> a \\<and> x \\<sharp> b \\<and> x \\<sharp> c)", "by fastforce"], ["", "lemma fresh_prod4[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and> x \\<sharp> c \\<and> x \\<sharp> d)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and> x \\<sharp> c \\<and> x \\<sharp> d)", "by fastforce"], ["", "lemma fresh_prod5[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and> x \\<sharp> d \\<and> x \\<sharp> e)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and> x \\<sharp> d \\<and> x \\<sharp> e)", "by fastforce"], ["", "lemma fresh_prod6[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f)", "by fastforce"], ["", "lemma fresh_prod7[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g)", "by fastforce"], ["", "lemma fresh_prod8[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h)", "by fastforce"], ["", "lemma fresh_prod9[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i)", "by fastforce"], ["", "lemma fresh_prod10[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i,j) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i, j) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and>\n     x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i, j) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and>\n     x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j)", "by fastforce"], ["", "lemma fresh_prod12[nominal_prod_simps,ms_fresh]: \"x \\<sharp> (a,b,c,d,e,f,g,h,i,j,k,l) = (x \\<sharp> a \\<and> x \\<sharp> b  \\<and> x \\<sharp> c  \\<and> x \\<sharp> d \\<and> x \\<sharp> e \\<and> x \\<sharp> f \\<and> x \\<sharp> g \\<and> x \\<sharp> h \\<and> x \\<sharp> i \\<and> x \\<sharp> j \\<and> x \\<sharp> k \\<and> x \\<sharp> l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i, j, k, l) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and>\n     x \\<sharp> h \\<and>\n     x \\<sharp> i \\<and>\n     x \\<sharp> j \\<and> x \\<sharp> k \\<and> x \\<sharp> l)", "using fresh_def supp_Pair"], ["proof (prove)\nusing this:\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp (?x, ?y) = supp ?x \\<union> supp ?y\n\ngoal (1 subgoal):\n 1. x \\<sharp> (a, b, c, d, e, f, g, h, i, j, k, l) =\n    (x \\<sharp> a \\<and>\n     x \\<sharp> b \\<and>\n     x \\<sharp> c \\<and>\n     x \\<sharp> d \\<and>\n     x \\<sharp> e \\<and>\n     x \\<sharp> f \\<and>\n     x \\<sharp> g \\<and>\n     x \\<sharp> h \\<and>\n     x \\<sharp> i \\<and>\n     x \\<sharp> j \\<and> x \\<sharp> k \\<and> x \\<sharp> l)", "by fastforce"], ["", "lemmas fresh_prodN = fresh_Pair fresh_prod3  fresh_prod4  fresh_prod5 fresh_prod6 fresh_prod7 fresh_prod8 fresh_prod9 fresh_prod10 fresh_prod12"], ["", "lemma fresh_prod2I:\n  fixes x and x1 and x2\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" \n  shows \"x \\<sharp> (x1,x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2)", "using fresh_prod2 assms"], ["proof (prove)\nusing this:\n  ?x \\<sharp> (?a, ?b) = (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b)\n  x \\<sharp> x1\n  x \\<sharp> x2\n\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2)", "by auto"], ["", "lemma fresh_prod3I:\n  fixes x and x1 and x2 and x3 \n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" \n  shows \"x \\<sharp> (x1,x2,x3)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3)", "using fresh_prod3 assms"], ["proof (prove)\nusing this:\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n  x \\<sharp> x1\n  x \\<sharp> x2\n  x \\<sharp> x3\n\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3)", "by auto"], ["", "lemma fresh_prod4I:\n  fixes x and x1 and x2 and x3 and x4\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" and \"x \\<sharp> x4\" \n  shows \"x \\<sharp> (x1,x2,x3,x4)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3, x4)", "using fresh_prod4 assms"], ["proof (prove)\nusing this:\n  ?x \\<sharp> (?a, ?b, ?c, ?d) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d)\n  x \\<sharp> x1\n  x \\<sharp> x2\n  x \\<sharp> x3\n  x \\<sharp> x4\n\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3, x4)", "by auto"], ["", "lemma fresh_prod5I:\n  fixes x and x1 and x2 and x3 and x4 and x5\n  assumes \"x \\<sharp> x1\" and \"x \\<sharp> x2\" and \"x \\<sharp> x3\" and \"x \\<sharp> x4\" and \"x \\<sharp> x5\"\n  shows \"x \\<sharp> (x1,x2,x3,x4,x5)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3, x4, x5)", "using fresh_prod5 assms"], ["proof (prove)\nusing this:\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e)\n  x \\<sharp> x1\n  x \\<sharp> x2\n  x \\<sharp> x3\n  x \\<sharp> x4\n  x \\<sharp> x5\n\ngoal (1 subgoal):\n 1. x \\<sharp> (x1, x2, x3, x4, x5)", "by auto"], ["", "lemma flip_collapse[simp]:\n  fixes b1::\"'a::pt\" and bv1::\"'b::at\" and bv2::\"'b::at\"\n  assumes \"atom bv2 \\<sharp> b1\" and \"atom c \\<sharp> (bv1,bv2,b1)\" and \"bv1 \\<noteq> bv2\" \n  shows \"(bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 = (bv1 \\<leftrightarrow> c) \\<bullet> b1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "have \"c  \\<noteq> bv1\" and \"bv2 \\<noteq> bv1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<noteq> bv1 &&& bv2 \\<noteq> bv1", "using assms"], ["proof (prove)\nusing this:\n  atom bv2 \\<sharp> b1\n  atom c \\<sharp> (bv1, bv2, b1)\n  bv1 \\<noteq> bv2\n\ngoal (1 subgoal):\n 1. c \\<noteq> bv1 &&& bv2 \\<noteq> bv1", "by auto+"], ["proof (state)\nthis:\n  c \\<noteq> bv1\n  bv2 \\<noteq> bv1\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "hence \"(bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) + (bv2 \\<leftrightarrow> c) =  (bv1 \\<leftrightarrow> c)\""], ["proof (prove)\nusing this:\n  c \\<noteq> bv1\n  bv2 \\<noteq> bv1\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) +\n    (bv2 \\<leftrightarrow> c) =\n    (bv1 \\<leftrightarrow> c)", "using flip_triple[of c bv1 bv2] flip_commute"], ["proof (prove)\nusing this:\n  c \\<noteq> bv1\n  bv2 \\<noteq> bv1\n  \\<lbrakk>c \\<noteq> bv1; bv2 \\<noteq> bv1\\<rbrakk>\n  \\<Longrightarrow> (c \\<leftrightarrow> bv2) +\n                    (bv1 \\<leftrightarrow> bv2) +\n                    (c \\<leftrightarrow> bv2) =\n                    (c \\<leftrightarrow> bv1)\n  (?a \\<leftrightarrow> ?b) = (?b \\<leftrightarrow> ?a)\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) +\n    (bv2 \\<leftrightarrow> c) =\n    (bv1 \\<leftrightarrow> c)", "by metis"], ["proof (state)\nthis:\n  (bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) +\n  (bv2 \\<leftrightarrow> c) =\n  (bv1 \\<leftrightarrow> c)\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "hence \"(bv2 \\<leftrightarrow> c)  \\<bullet> (bv1 \\<leftrightarrow> bv2)  \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =  (bv1 \\<leftrightarrow> c) \\<bullet> b1\""], ["proof (prove)\nusing this:\n  (bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) +\n  (bv2 \\<leftrightarrow> c) =\n  (bv1 \\<leftrightarrow> c)\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "using permute_plus"], ["proof (prove)\nusing this:\n  (bv2 \\<leftrightarrow> c) + (bv1 \\<leftrightarrow> bv2) +\n  (bv2 \\<leftrightarrow> c) =\n  (bv1 \\<leftrightarrow> c)\n  (?p + ?q) \\<bullet> ?x = ?p \\<bullet> ?q \\<bullet> ?x\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "by metis"], ["proof (state)\nthis:\n  (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =\n  (bv1 \\<leftrightarrow> c) \\<bullet> b1\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =\n  (bv1 \\<leftrightarrow> c) \\<bullet> b1\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "using assms flip_fresh_fresh"], ["proof (prove)\nusing this:\n  (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> (bv2 \\<leftrightarrow> c) \\<bullet> b1 =\n  (bv1 \\<leftrightarrow> c) \\<bullet> b1\n  atom bv2 \\<sharp> b1\n  atom c \\<sharp> (bv1, bv2, b1)\n  bv1 \\<noteq> bv2\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n    (bv1 \\<leftrightarrow> c) \\<bullet> b1", "by force"], ["proof (state)\nthis:\n  (bv2 \\<leftrightarrow> c) \\<bullet> (bv1 \\<leftrightarrow> bv2) \\<bullet> b1 =\n  (bv1 \\<leftrightarrow> c) \\<bullet> b1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma triple_eqvt[simp]:\n  \"p \\<bullet> (x, b,c) = (p \\<bullet> x,  p \\<bullet> b , p \\<bullet> c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)", "have \"(x,b,c) = (x,(b,c))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, b, c) = (x, b, c)", "by simp"], ["proof (state)\nthis:\n  (x, b, c) = (x, b, c)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x, b, c) = (x, b, c)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)", "using Pair_eqvt"], ["proof (prove)\nusing this:\n  (x, b, c) = (x, b, c)\n  ?p \\<bullet> (?x, ?y) = (?p \\<bullet> ?x, ?p \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)", "by simp"], ["proof (state)\nthis:\n  p \\<bullet> (x, b, c) = (p \\<bullet> x, p \\<bullet> b, p \\<bullet> c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_fst:\n  fixes x::\"'a::at\" and t1::\"'b::fs\" and  x'::\"'a::at\" and t2::\"'c::fs\" \n  assumes \" ([[atom x]]lst. (t1,t2) = [[atom x']]lst. (t1',t2'))\"\n  shows \" ([[atom x]]lst. t1 = [[atom x']]lst. t1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom x]]lst. t1 = [[atom x']]lst. t1'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [[atom x]]lst. t1 = [[atom x']]lst. t1'", "have \"(\\<forall>c. atom c \\<sharp> (t2,t2') \\<longrightarrow> atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t1 = (x' \\<leftrightarrow> c) \\<bullet> t1')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c.\n       atom c \\<sharp> (t2, t2') \\<longrightarrow>\n       atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow>\n       (x \\<leftrightarrow> c) \\<bullet> t1 =\n       (x' \\<leftrightarrow> c) \\<bullet> t1'", "proof(rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t2, t2');\n        atom c \\<sharp> (x, x', t1, t1')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t1 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t1'", "fix c::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t2, t2');\n        atom c \\<sharp> (x, x', t1, t1')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t1 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t1'", "assume \"atom c \\<sharp>  (t2,t2')\" and \"atom c \\<sharp> (x, x', t1, t1')\""], ["proof (state)\nthis:\n  atom c \\<sharp> (t2, t2')\n  atom c \\<sharp> (x, x', t1, t1')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t2, t2');\n        atom c \\<sharp> (x, x', t1, t1')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t1 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t1'", "hence \"atom c \\<sharp> (x, x', (t1,t2), (t1',t2'))\""], ["proof (prove)\nusing this:\n  atom c \\<sharp> (t2, t2')\n  atom c \\<sharp> (x, x', t1, t1')\n\ngoal (1 subgoal):\n 1. atom c \\<sharp> (x, x', (t1, t2), t1', t2')", "using fresh_prod2"], ["proof (prove)\nusing this:\n  atom c \\<sharp> (t2, t2')\n  atom c \\<sharp> (x, x', t1, t1')\n  ?x \\<sharp> (?a, ?b) = (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b)\n\ngoal (1 subgoal):\n 1. atom c \\<sharp> (x, x', (t1, t2), t1', t2')", "by simp"], ["proof (state)\nthis:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t2, t2');\n        atom c \\<sharp> (x, x', t1, t1')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t1 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t1'", "thus  \" (x \\<leftrightarrow> c) \\<bullet> t1 = (x' \\<leftrightarrow> c) \\<bullet> t1'\""], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n\ngoal (1 subgoal):\n 1. (x \\<leftrightarrow> c) \\<bullet> t1 =\n    (x' \\<leftrightarrow> c) \\<bullet> t1'", "using assms Abs1_eq_iff_all(3) Pair_eqvt"], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n  [[atom x]]lst. (t1, t2) = [[atom x']]lst. (t1', t2')\n  ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =\n  (\\<forall>c.\n      atom c \\<sharp> ?z \\<longrightarrow>\n      atom c \\<sharp> (?a, ?b, ?x, ?y) \\<longrightarrow>\n      (?a \\<leftrightarrow> c) \\<bullet> ?x =\n      (?b \\<leftrightarrow> c) \\<bullet> ?y)\n  ?p \\<bullet> (?x, ?y) = (?p \\<bullet> ?x, ?p \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. (x \\<leftrightarrow> c) \\<bullet> t1 =\n    (x' \\<leftrightarrow> c) \\<bullet> t1'", "by simp"], ["proof (state)\nthis:\n  (x \\<leftrightarrow> c) \\<bullet> t1 =\n  (x' \\<leftrightarrow> c) \\<bullet> t1'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>c.\n     atom c \\<sharp> (t2, t2') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t1 =\n     (x' \\<leftrightarrow> c) \\<bullet> t1'\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t1 = [[atom x']]lst. t1'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>c.\n     atom c \\<sharp> (t2, t2') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t1 =\n     (x' \\<leftrightarrow> c) \\<bullet> t1'\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t1 = [[atom x']]lst. t1'", "using Abs1_eq_iff_all(3)[of x t1 x' t1' \"(t2,t2')\"]"], ["proof (prove)\nusing this:\n  \\<forall>c.\n     atom c \\<sharp> (t2, t2') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t1 =\n     (x' \\<leftrightarrow> c) \\<bullet> t1'\n  ([[atom x]]lst. t1 = [[atom x']]lst. t1') =\n  (\\<forall>c.\n      atom c \\<sharp> (t2, t2') \\<longrightarrow>\n      atom c \\<sharp> (x, x', t1, t1') \\<longrightarrow>\n      (x \\<leftrightarrow> c) \\<bullet> t1 =\n      (x' \\<leftrightarrow> c) \\<bullet> t1')\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t1 = [[atom x']]lst. t1'", "by simp"], ["proof (state)\nthis:\n  [[atom x]]lst. t1 = [[atom x']]lst. t1'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_snd:\n  fixes x::\"'a::at\" and t1::\"'b::fs\" and  x'::\"'a::at\" and t2::\"'c::fs\" \n  assumes \" ([[atom x]]lst. (t1,t2) = [[atom x']]lst. (t1',t2'))\"\n  shows \" ([[atom x]]lst. t2 = [[atom x']]lst. t2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom x]]lst. t2 = [[atom x']]lst. t2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [[atom x]]lst. t2 = [[atom x']]lst. t2'", "have \"(\\<forall>c. atom c \\<sharp> (t1,t1') \\<longrightarrow> atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t2 = (x' \\<leftrightarrow> c) \\<bullet> t2')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>c.\n       atom c \\<sharp> (t1, t1') \\<longrightarrow>\n       atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow>\n       (x \\<leftrightarrow> c) \\<bullet> t2 =\n       (x' \\<leftrightarrow> c) \\<bullet> t2'", "proof(rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t1, t1');\n        atom c \\<sharp> (x, x', t2, t2')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t2 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t2'", "fix c::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t1, t1');\n        atom c \\<sharp> (x, x', t2, t2')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t2 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t2'", "assume \"atom c \\<sharp>  (t1,t1')\" and \"atom c \\<sharp> (x, x', t2, t2')\""], ["proof (state)\nthis:\n  atom c \\<sharp> (t1, t1')\n  atom c \\<sharp> (x, x', t2, t2')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t1, t1');\n        atom c \\<sharp> (x, x', t2, t2')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t2 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t2'", "hence \"atom c \\<sharp> (x, x', (t1,t2), (t1',t2'))\""], ["proof (prove)\nusing this:\n  atom c \\<sharp> (t1, t1')\n  atom c \\<sharp> (x, x', t2, t2')\n\ngoal (1 subgoal):\n 1. atom c \\<sharp> (x, x', (t1, t2), t1', t2')", "using fresh_prod2"], ["proof (prove)\nusing this:\n  atom c \\<sharp> (t1, t1')\n  atom c \\<sharp> (x, x', t2, t2')\n  ?x \\<sharp> (?a, ?b) = (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b)\n\ngoal (1 subgoal):\n 1. atom c \\<sharp> (x, x', (t1, t2), t1', t2')", "by simp"], ["proof (state)\nthis:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> (t1, t1');\n        atom c \\<sharp> (x, x', t2, t2')\\<rbrakk>\n       \\<Longrightarrow> (x \\<leftrightarrow> c) \\<bullet> t2 =\n                         (x' \\<leftrightarrow> c) \\<bullet> t2'", "thus  \" (x \\<leftrightarrow> c) \\<bullet> t2 = (x' \\<leftrightarrow> c) \\<bullet> t2'\""], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n\ngoal (1 subgoal):\n 1. (x \\<leftrightarrow> c) \\<bullet> t2 =\n    (x' \\<leftrightarrow> c) \\<bullet> t2'", "using assms Abs1_eq_iff_all(3) Pair_eqvt"], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x, x', (t1, t2), t1', t2')\n  [[atom x]]lst. (t1, t2) = [[atom x']]lst. (t1', t2')\n  ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =\n  (\\<forall>c.\n      atom c \\<sharp> ?z \\<longrightarrow>\n      atom c \\<sharp> (?a, ?b, ?x, ?y) \\<longrightarrow>\n      (?a \\<leftrightarrow> c) \\<bullet> ?x =\n      (?b \\<leftrightarrow> c) \\<bullet> ?y)\n  ?p \\<bullet> (?x, ?y) = (?p \\<bullet> ?x, ?p \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. (x \\<leftrightarrow> c) \\<bullet> t2 =\n    (x' \\<leftrightarrow> c) \\<bullet> t2'", "by simp"], ["proof (state)\nthis:\n  (x \\<leftrightarrow> c) \\<bullet> t2 =\n  (x' \\<leftrightarrow> c) \\<bullet> t2'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>c.\n     atom c \\<sharp> (t1, t1') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t2 =\n     (x' \\<leftrightarrow> c) \\<bullet> t2'\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t2 = [[atom x']]lst. t2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>c.\n     atom c \\<sharp> (t1, t1') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t2 =\n     (x' \\<leftrightarrow> c) \\<bullet> t2'\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t2 = [[atom x']]lst. t2'", "using Abs1_eq_iff_all(3)[of x t2 x' t2' \"(t1,t1')\"]"], ["proof (prove)\nusing this:\n  \\<forall>c.\n     atom c \\<sharp> (t1, t1') \\<longrightarrow>\n     atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow>\n     (x \\<leftrightarrow> c) \\<bullet> t2 =\n     (x' \\<leftrightarrow> c) \\<bullet> t2'\n  ([[atom x]]lst. t2 = [[atom x']]lst. t2') =\n  (\\<forall>c.\n      atom c \\<sharp> (t1, t1') \\<longrightarrow>\n      atom c \\<sharp> (x, x', t2, t2') \\<longrightarrow>\n      (x \\<leftrightarrow> c) \\<bullet> t2 =\n      (x' \\<leftrightarrow> c) \\<bullet> t2')\n\ngoal (1 subgoal):\n 1. [[atom x]]lst. t2 = [[atom x']]lst. t2'", "by simp"], ["proof (state)\nthis:\n  [[atom x]]lst. t2 = [[atom x']]lst. t2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_head_cons_pair:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (x2 # xs2)\"\n  shows \"[[atom y1]]lst. (x1,xs1) = [[atom y2]]lst. (x2,xs2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom y1]]lst. (x1, xs1) = [[atom y2]]lst. (x2, xs2)", "proof(subst  Abs1_eq_iff_all(3)[of y1 \"(x1,xs1)\"  y2 \"(x2,xs2)\"],rule,rule,rule)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> ?z;\n        atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\\<rbrakk>\n       \\<Longrightarrow> (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n                         (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)", "fix c::'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> ?z;\n        atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\\<rbrakk>\n       \\<Longrightarrow> (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n                         (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)", "assume \"atom c \\<sharp> (x1#xs1,x2#xs2)\" and \"atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\""], ["proof (state)\nthis:\n  atom c \\<sharp> (x1 # xs1, x2 # xs2)\n  atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\n\ngoal (1 subgoal):\n 1. \\<And>c.\n       \\<lbrakk>atom c \\<sharp> ?z;\n        atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\\<rbrakk>\n       \\<Longrightarrow> (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n                         (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)", "thus  \"(y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) = (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)\""], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x1 # xs1, x2 # xs2)\n  atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\n\ngoal (1 subgoal):\n 1. (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n    (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)", "using assms Abs1_eq_iff_all(3)"], ["proof (prove)\nusing this:\n  atom c \\<sharp> (x1 # xs1, x2 # xs2)\n  atom c \\<sharp> (y1, y2, (x1, xs1), x2, xs2)\n  [[atom y1]]lst. x1 # xs1 = [[atom y2]]lst. x2 # xs2\n  ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =\n  (\\<forall>c.\n      atom c \\<sharp> ?z \\<longrightarrow>\n      atom c \\<sharp> (?a, ?b, ?x, ?y) \\<longrightarrow>\n      (?a \\<leftrightarrow> c) \\<bullet> ?x =\n      (?b \\<leftrightarrow> c) \\<bullet> ?y)\n\ngoal (1 subgoal):\n 1. (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n    (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)", "by auto"], ["proof (state)\nthis:\n  (y1 \\<leftrightarrow> c) \\<bullet> (x1, xs1) =\n  (y2 \\<leftrightarrow> c) \\<bullet> (x2, xs2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_head_cons_neq_nil:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (xs2)\"\n  shows \"xs2 \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs2 \\<noteq> []", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. xs2 = [] \\<Longrightarrow> False", "assume as:\"xs2 = []\""], ["proof (state)\nthis:\n  xs2 = []\n\ngoal (1 subgoal):\n 1. xs2 = [] \\<Longrightarrow> False", "thus  False"], ["proof (prove)\nusing this:\n  xs2 = []\n\ngoal (1 subgoal):\n 1. False", "using Abs1_eq_iff(3)[of y1 \"x1#xs1\" y2 Nil]  assms as"], ["proof (prove)\nusing this:\n  xs2 = []\n  ([[atom y1]]lst. x1 # xs1 = [[atom y2]]lst. []) =\n  (y1 = y2 \\<and> x1 # xs1 = [] \\<or>\n   y1 \\<noteq> y2 \\<and>\n   x1 # xs1 = (y1 \\<leftrightarrow> y2) \\<bullet> [] \\<and>\n   atom y1 \\<sharp> [])\n  [[atom y1]]lst. x1 # xs1 = [[atom y2]]lst. xs2\n  xs2 = []\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_head_cons:\n  fixes y1::\"'a ::at\" and y2::\"'a::at\" and x1::\"'b::fs\" and x2::\"'b::fs\" and xs1::\"('b::fs) list\" and xs2::\"('b::fs) list\"\n  assumes \"[[atom y1]]lst. (x1 # xs1) = [[atom y2]]lst. (x2 # xs2)\"\n  shows \"[[atom y1]]lst. x1  = [[atom y2]]lst. x2\" and \"[[atom y1]]lst. xs1  = [[atom y2]]lst. xs2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom y1]]lst. x1 = [[atom y2]]lst. x2 &&&\n    [[atom y1]]lst. xs1 = [[atom y2]]lst. xs2", "using lst_head_cons_pair lst_fst lst_snd assms"], ["proof (prove)\nusing this:\n  [[atom ?y1.0]]lst. ?x1.0 # ?xs1.0 =\n  [[atom ?y2.0]]lst. ?x2.0 # ?xs2.0 \\<Longrightarrow>\n  [[atom ?y1.0]]lst. (?x1.0, ?xs1.0) = [[atom ?y2.0]]lst. (?x2.0, ?xs2.0)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom y1]]lst. x1 # xs1 = [[atom y2]]lst. x2 # xs2\n\ngoal (1 subgoal):\n 1. [[atom y1]]lst. x1 = [[atom y2]]lst. x2 &&&\n    [[atom y1]]lst. xs1 = [[atom y2]]lst. xs2", "by metis+"], ["", "lemma lst_pure:\n  fixes x1::\"'a ::at\" and t1::\"'b::pure\" and  x2::\"'a ::at\" and t2::\"'b::pure\" \n  assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\"\n  shows \"t1=t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t1 = t2", "using assms Abs1_eq_iff_all(3) pure_fresh flip_fresh_fresh"], ["proof (prove)\nusing this:\n  [[atom x1]]lst. t1 = [[atom x2]]lst. t2\n  ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =\n  (\\<forall>c.\n      atom c \\<sharp> ?z \\<longrightarrow>\n      atom c \\<sharp> (?a, ?b, ?x, ?y) \\<longrightarrow>\n      (?a \\<leftrightarrow> c) \\<bullet> ?x =\n      (?b \\<leftrightarrow> c) \\<bullet> ?y)\n  ?a \\<sharp> ?x\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n\ngoal (1 subgoal):\n 1. t1 = t2", "by (metis Abs1_eq(3) permute_pure)"], ["", "lemma lst_supp:\n assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\"\n shows \"supp t1 - {atom x1} = supp t2 - {atom x2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp t1 - {atom x1} = supp t2 - {atom x2}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. supp t1 - {atom x1} = supp t2 - {atom x2}", "have \"supp ([[atom x1]]lst.t1) = supp ([[atom x2]]lst.t2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp ([[atom x1]]lst. t1) = supp ([[atom x2]]lst. t2)", "using assms"], ["proof (prove)\nusing this:\n  [[atom x1]]lst. t1 = [[atom x2]]lst. t2\n\ngoal (1 subgoal):\n 1. supp ([[atom x1]]lst. t1) = supp ([[atom x2]]lst. t2)", "by auto"], ["proof (state)\nthis:\n  supp ([[atom x1]]lst. t1) = supp ([[atom x2]]lst. t2)\n\ngoal (1 subgoal):\n 1. supp t1 - {atom x1} = supp t2 - {atom x2}", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp ([[atom x1]]lst. t1) = supp ([[atom x2]]lst. t2)\n\ngoal (1 subgoal):\n 1. supp t1 - {atom x1} = supp t2 - {atom x2}", "using Abs_finite_supp"], ["proof (prove)\nusing this:\n  supp ([[atom x1]]lst. t1) = supp ([[atom x2]]lst. t2)\n  finite (supp ?x) \\<Longrightarrow> supp ([?as]set. ?x) = supp ?x - ?as\n  finite (supp ?x) \\<Longrightarrow> supp ([?as]res. ?x) = supp ?x - ?as\n  finite (supp ?x) \\<Longrightarrow> supp ([?bs]lst. ?x) = supp ?x - set ?bs\n\ngoal (1 subgoal):\n 1. supp t1 - {atom x1} = supp t2 - {atom x2}", "by (metis assms empty_set list.simps(15) supp_lst.simps)"], ["proof (state)\nthis:\n  supp t1 - {atom x1} = supp t2 - {atom x2}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lst_supp_subset:\n   assumes \"[[atom x1]]lst. t1 = [[atom x2]]lst. t2\" and \"supp t1 \\<subseteq> {atom x1} \\<union> B\"\n   shows \"supp t2 \\<subseteq> {atom x2} \\<union> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp t2 \\<subseteq> {atom x2} \\<union> B", "using assms lst_supp"], ["proof (prove)\nusing this:\n  [[atom x1]]lst. t1 = [[atom x2]]lst. t2\n  supp t1 \\<subseteq> {atom x1} \\<union> B\n  [[atom ?x1.0]]lst. ?t1.0 = [[atom ?x2.0]]lst. ?t2.0 \\<Longrightarrow>\n  supp ?t1.0 - {atom ?x1.0} = supp ?t2.0 - {atom ?x2.0}\n\ngoal (1 subgoal):\n 1. supp t2 \\<subseteq> {atom x2} \\<union> B", "by fast"], ["", "lemma projl_inl_eqvt:\n  fixes \\<pi> :: perm\n  shows   \"\\<pi> \\<bullet> (projl (Inl x)) = projl (Inl (\\<pi> \\<bullet> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> projl (Inl x) = projl (Inl (\\<pi> \\<bullet> x))", "unfolding projl_def Inl_eqvt"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (case Inl x of Inl x1 \\<Rightarrow> x1) =\n    (case Inl (\\<pi> \\<bullet> x) of Inl x1 \\<Rightarrow> x1)", "by simp"], ["", "end"]]}