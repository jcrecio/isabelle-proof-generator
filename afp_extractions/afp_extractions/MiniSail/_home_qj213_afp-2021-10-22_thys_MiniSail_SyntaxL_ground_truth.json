{"file_name": "/home/qj213/afp-2021-10-22/thys/MiniSail/SyntaxL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MiniSail", "problem_names": ["lemma supp_v_tau [simp]:\n  assumes \"atom z \\<sharp> v\"\n  shows \"supp (\\<lbrace> z : b | CE_val (V_var z)  ==  CE_val v  \\<rbrace>) = supp v \\<union> supp b\"", "lemma supp_v_var_tau [simp]:\n  assumes \"z \\<noteq> x\"\n  shows  \"supp (\\<lbrace> z : b | CE_val (V_var z)  ==  CE_val (V_var x)  \\<rbrace>) = { atom x } \\<union> supp b\"", "lemma obtain_fresh_fun_def:\n  fixes t::\"'b::fs\" \n  shows  \"\\<exists>y::x. atom y \\<sharp> (s,c,\\<tau>,t) \\<and> (AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))  = AF_fundef f (AF_fun_typ_none (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c ) ((y \\<leftrightarrow> x) \\<bullet> \\<tau>) ((y \\<leftrightarrow> x) \\<bullet> s))))\"", "lemma lookup_fun_member:\n  assumes \"Some (AF_fundef f ft) = lookup_fun \\<Phi> f\"\n  shows \"AF_fundef f ft \\<in> set \\<Phi>\"", "lemma rig_dom_eq:\n  \"dom (G[x \\<longmapsto> c]) = dom G\"", "lemma lookup_in_rig_eq:\n  assumes \"Some (b,c) = lookup \\<Gamma> x\" \n  shows \"Some (b,c') = lookup (\\<Gamma>[x\\<longmapsto>c']) x\"", "lemma lookup_in_rig_neq:\n  assumes \"Some (b,c) = lookup \\<Gamma> y\" and \"x\\<noteq>y\"\n  shows \"Some (b,c) = lookup (\\<Gamma>[x\\<longmapsto>c']) y\"", "lemma lookup_in_rig:\n  assumes \"Some (b,c) = lookup \\<Gamma> y\" \n  shows \"\\<exists>c''. Some (b,c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\"", "lemma lookup_inside[simp]:\n  assumes \"x \\<notin> fst ` toSet \\<Gamma>'\"\n  shows \"Some (b1,c1) = lookup (\\<Gamma>'@(x,b1,c1)#\\<^sub>\\<Gamma>\\<Gamma>) x\"", "lemma lookup_inside2:\n  assumes \"Some (b1,c1) = lookup (\\<Gamma>'@((x,b0,c0)#\\<^sub>\\<Gamma>\\<Gamma>)) y\" and \"x\\<noteq>y\"\n  shows \"Some (b1,c1) = lookup (\\<Gamma>'@((x,b0,c0')#\\<^sub>\\<Gamma>\\<Gamma>)) y\"", "lemma lookup_options:\n  assumes \"Some (b,c) = lookup (xt#\\<^sub>\\<Gamma>G) x\"\n  shows  \"((x,b,c) = xt) \\<or> (Some (b,c) = lookup G x)\"", "lemma lookup_x:\n  assumes \"Some (b,c) = lookup G x\"\n  shows \"x \\<in> fst ` toSet G\"", "lemma GCons_eq_appendI:\n  fixes xs1::\\<Gamma>\n  shows \"[| x #\\<^sub>\\<Gamma> xs1 = ys; xs = xs1 @ zs |] ==> x #\\<^sub>\\<Gamma> xs = ys @ zs\"", "lemma split_G: \"x : toSet xs \\<Longrightarrow> \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs\"", "lemma lookup_not_empty:\n  assumes \"Some \\<tau> = lookup G x\"\n  shows \"G \\<noteq> GNil\"", "lemma lookup_in_g:\n  assumes \"Some (b,c) = lookup \\<Gamma> x\"\n  shows \"(x,b,c) \\<in> toSet \\<Gamma>\"", "lemma lookup_split:\n  fixes \\<Gamma>::\\<Gamma>\n  assumes \"Some (b,c) = lookup \\<Gamma> x\"\n  shows \"\\<exists>G G' . \\<Gamma> =  G'@(x,b,c)#\\<^sub>\\<Gamma>G\"", "lemma toSet_splitU[simp]:\n  \"(x',b',c') \\<in> toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) \\<longleftrightarrow> (x',b',c') \\<in> (toSet \\<Gamma>' \\<union> {(x, b, c)} \\<union> toSet \\<Gamma>)\"", "lemma toSet_splitP[simp]:\n  \"(\\<forall>(x', b', c')\\<in>toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>). P x' b' c') \\<longleftrightarrow> (\\<forall> (x', b', c')\\<in>toSet \\<Gamma>'. P x' b' c') \\<and> P x b c \\<and> (\\<forall> (x', b', c')\\<in>toSet \\<Gamma>. P x' b' c')\"  (is \"?A \\<longleftrightarrow> ?B\")", "lemma lookup_restrict:\n  assumes \"Some (b',c') = lookup (\\<Gamma>'@(x,b,c)#\\<^sub>\\<Gamma>\\<Gamma>) y\" and \"x \\<noteq> y\" \n  shows \"Some (b',c') = lookup (\\<Gamma>'@\\<Gamma>) y\"", "lemma supp_list_member:\n  fixes x::\"'a::fs\" and l::\"'a list\"\n  assumes \"x \\<in> set l\"\n  shows \"supp x \\<subseteq> supp l\"", "lemma GNil_append:\n  assumes \"GNil = G1@G2\"\n  shows \"G1 = GNil \\<and> G2 = GNil\"", "lemma GCons_eq_append_conv:\n  fixes xs::\\<Gamma>\n  shows \"x#\\<^sub>\\<Gamma>xs = ys@zs = (ys = GNil \\<and> x#\\<^sub>\\<Gamma>xs = zs \\<or> (\\<exists>ys'. x#\\<^sub>\\<Gamma>ys' = ys \\<and> xs = ys'@zs))\"", "lemma dclist_distinct_unique:\n  assumes  \"(dc, const) \\<in> set dclist2\" and  \"(cons, const1) \\<in> set dclist2\" and \"dc=cons\" and  \"distinct (List.map fst dclist2)\"\n  shows \"(const) = const1\"", "lemma fresh_d_fst_d:\n  assumes \"atom u \\<sharp> \\<delta>\"\n  shows  \"u \\<notin> fst ` set \\<delta>\"", "lemma bv_not_in_bset_supp:\n  fixes bv::bv\n  assumes \"bv |\\<notin>| B\"\n  shows \"atom bv \\<notin> supp B\"", "lemma u_fresh_d:\n  assumes \"atom u \\<sharp> D\"\n  shows \"u \\<notin> fst ` setD D\"", "lemma exist_fresh_bv:\n  fixes tm::\"'a::fs\"\n  shows  \"\\<exists>bva2 dclist2. AF_typedef_poly tyid bva dclist = AF_typedef_poly tyid bva2 dclist2 \\<and> \n             atom bva2 \\<sharp> tm\"", "lemma obtain_fresh_bv:\n  fixes tm::\"'a::fs\"\n  obtains bva2::bv and  dclist2 where \"AF_typedef_poly tyid bva dclist = AF_typedef_poly tyid bva2 dclist2 \\<and> \n             atom bva2 \\<sharp> tm\"", "lemma fun_typ_flip:\n  fixes bv1::bv and c::bv\n  shows   \"(bv1 \\<leftrightarrow> c) \\<bullet> AF_fun_typ x1 b1 c1 \\<tau>1 s1 = AF_fun_typ x1 ((bv1 \\<leftrightarrow> c) \\<bullet> b1) ((bv1 \\<leftrightarrow> c) \\<bullet> c1) ((bv1 \\<leftrightarrow> c) \\<bullet> \\<tau>1) ((bv1 \\<leftrightarrow> c) \\<bullet> s1)\"", "lemma fun_def_eq:\n  assumes  \"AF_fundef fa (AF_fun_typ_none (AF_fun_typ xa ba ca \\<tau>a sa)) = AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\"\n  shows \"f = fa\" and \"b = ba\" and \"[[atom xa]]lst. sa = [[atom x]]lst. s\" and \"[[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\" and\n    \" [[atom xa]]lst. ca = [[atom x]]lst. c\"", "lemma fun_arg_unique_aux: \n  assumes \"AF_fun_typ x1 b1 c1 \\<tau>1' s1' = AF_fun_typ x2 b2 c2 \\<tau>2' s2'\"\n  shows \"\\<lbrace> x1 : b1 | c1 \\<rbrace> = \\<lbrace> x2 : b2 | c2\\<rbrace>\"", "lemma fresh_x_neq:\n  fixes x::x and y::x\n  shows \"atom x \\<sharp> y = (x \\<noteq> y)\"", "lemma obtain_fresh_z3:\n  fixes tm::\"'b::fs\"\n  obtains z::x where \"\\<lbrace> x : b  | c \\<rbrace> =  \\<lbrace> z : b  | c[x::=V_var z]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>  atom z \\<sharp> tm \\<and> atom z \\<sharp> (x,c)\"", "lemma u_fresh_v:\n  fixes u::u and t::v\n  shows \"atom u \\<sharp> t\"", "lemma u_fresh_ce:\n  fixes u::u and t::ce\n  shows \"atom u \\<sharp> t\"", "lemma u_fresh_c:\n  fixes u::u and t::c\n  shows \"atom u \\<sharp> t\"", "lemma u_fresh_g:\n  fixes u::u and t::\\<Gamma>\n  shows \"atom u \\<sharp> t\"", "lemma u_fresh_t:\n  fixes u::u and t::\\<tau>\n  shows \"atom u \\<sharp> t\"", "lemma b_of_c_of_eq:\n  assumes \"atom z \\<sharp> \\<tau>\" \n  shows \"\\<lbrace> z : b_of \\<tau> |  c_of \\<tau> z \\<rbrace> = \\<tau>\"", "lemma fresh_d_not_in:\n  assumes \"atom u2 \\<sharp> \\<Delta>'\" \n  shows   \"u2 \\<notin> fst ` setD \\<Delta>'\""], "translations": [["", "lemma supp_v_tau [simp]:\n  assumes \"atom z \\<sharp> v\"\n  shows \"supp (\\<lbrace> z : b | CE_val (V_var z)  ==  CE_val v  \\<rbrace>) = supp v \\<union> supp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     \\<lbrace> z : b  | [ [ z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n    supp v \\<union> supp b", "using assms \\<tau>.supp c.supp ce.supp"], ["proof (prove)\nusing this:\n  atom z \\<sharp> v\n  supp \\<lbrace> ?x : ?b  | ?c \\<rbrace> =\n  supp ?c - set [atom ?x] \\<union> supp ?b\n  supp (TRUE) = {}\n  supp (FALSE) = {}\n  supp (?c1.0  AND  ?c2.0 ) = supp ?c1.0 \\<union> supp ?c2.0\n  supp (?c1.0 OR ?c2.0 ) = supp ?c1.0 \\<union> supp ?c2.0\n  supp (\\<not> ?c ) = supp ?c\n  supp (?c1.0  IMP  ?c2.0 ) = supp ?c1.0 \\<union> supp ?c2.0\n  supp (?ce1.0  ==  ?ce2.0 ) = supp ?ce1.0 \\<union> supp ?ce2.0\n  supp [ ?v ]\\<^sup>c\\<^sup>e = supp ?v\n  supp [ ?opp ?ce1.0 ?ce2.0 ]\\<^sup>c\\<^sup>e =\n  supp ?opp \\<union> (supp ?ce1.0 \\<union> supp ?ce2.0)\n  supp [ ?ce1.0 @@ ?ce2.0 ]\\<^sup>c\\<^sup>e =\n  supp ?ce1.0 \\<union> supp ?ce2.0\n  supp [#1?ce]\\<^sup>c\\<^sup>e = supp ?ce\n  supp [#2?ce]\\<^sup>c\\<^sup>e = supp ?ce\n  supp [| ?ce |]\\<^sup>c\\<^sup>e = supp ?ce\n\ngoal (1 subgoal):\n 1. supp\n     \\<lbrace> z : b  | [ [ z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n    supp v \\<union> supp b", "by (simp add: fresh_def supp_at_base)"], ["", "lemma supp_v_var_tau [simp]:\n  assumes \"z \\<noteq> x\"\n  shows  \"supp (\\<lbrace> z : b | CE_val (V_var z)  ==  CE_val (V_var x)  \\<rbrace>) = { atom x } \\<union> supp b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp\n     \\<lbrace> z : b  | [ [ z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ [ x ]\\<^sup>v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n    {atom x} \\<union> supp b", "using supp_v_tau assms"], ["proof (prove)\nusing this:\n  atom ?z \\<sharp> ?v \\<Longrightarrow>\n  supp\n   \\<lbrace> ?z : ?b  | [ [ ?z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ ?v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n  supp ?v \\<union> supp ?b\n  z \\<noteq> x\n\ngoal (1 subgoal):\n 1. supp\n     \\<lbrace> z : b  | [ [ z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ [ x ]\\<^sup>v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n    {atom x} \\<union> supp b", "using supp_at_base"], ["proof (prove)\nusing this:\n  atom ?z \\<sharp> ?v \\<Longrightarrow>\n  supp\n   \\<lbrace> ?z : ?b  | [ [ ?z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ ?v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n  supp ?v \\<union> supp ?b\n  z \\<noteq> x\n  supp ?a = {atom ?a}\n\ngoal (1 subgoal):\n 1. supp\n     \\<lbrace> z : b  | [ [ z ]\\<^sup>v ]\\<^sup>c\\<^sup>e  ==  [ [ x ]\\<^sup>v ]\\<^sup>c\\<^sup>e  \\<rbrace> =\n    {atom x} \\<union> supp b", "by fastforce"], ["", "text \\<open> Sometimes we need to work with a version of a binder where the variable is fresh \nin something else, such as  a bigger context. I think these could be generated automatically \\<close>"], ["", "lemma obtain_fresh_fun_def:\n  fixes t::\"'b::fs\" \n  shows  \"\\<exists>y::x. atom y \\<sharp> (s,c,\\<tau>,t) \\<and> (AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))  = AF_fundef f (AF_fun_typ_none (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c ) ((y \\<leftrightarrow> x) \\<bullet> \\<tau>) ((y \\<leftrightarrow> x) \\<bullet> s))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "obtain y::x where y: \"atom y \\<sharp> (s,c,\\<tau>,t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (s, c, \\<tau>, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obtain_fresh"], ["proof (prove)\nusing this:\n  (\\<And>a. atom a \\<sharp> ?x \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        atom y \\<sharp> (s, c, \\<tau>, t) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  atom y \\<sharp> (s, c, \\<tau>, t)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "moreover"], ["proof (state)\nthis:\n  atom y \\<sharp> (s, c, \\<tau>, t)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "have \"AF_fundef f (AF_fun_typ_none (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c ) ((y \\<leftrightarrow> x) \\<bullet> \\<tau>) ((y \\<leftrightarrow> x) \\<bullet> s))) =  (AF_fundef f (AF_fun_typ_none (AF_fun_typ  x b c \\<tau> s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "proof(cases \"x=y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n 2. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n 2. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "then"], ["proof (chain)\npicking this:\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "using fun_def.eq_iff Abs1_eq_iff(3)  flip_commute flip_fresh_fresh fresh_PairD"], ["proof (prove)\nusing this:\n  x = y\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  ([[atom ?a]]lst. ?x = [[atom ?b]]lst. ?y) =\n  (?a = ?b \\<and> ?x = ?y \\<or>\n   ?a \\<noteq> ?b \\<and>\n   ?x = (?a \\<leftrightarrow> ?b) \\<bullet> ?y \\<and> atom ?a \\<sharp> ?y)\n  (?a \\<leftrightarrow> ?b) = (?b \\<leftrightarrow> ?a)\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n  ?a \\<sharp> (?x, ?y) \\<Longrightarrow> ?a \\<sharp> ?x\n  ?a \\<sharp> (?x, ?y) \\<Longrightarrow> ?a \\<sharp> ?y\n\ngoal (1 subgoal):\n 1. AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "by auto"], ["proof (state)\nthis:\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "have  \"(AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c) ((y \\<leftrightarrow> x) \\<bullet> \\<tau>) ((y \\<leftrightarrow> x) \\<bullet> s)) =(AF_fun_typ x b c \\<tau> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n     ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n     ((y \\<leftrightarrow> x) \\<bullet> s) =\n    AF_fun_typ x b c \\<tau> s", "proof(subst fun_typ.eq_iff, subst Abs1_eq_iff(3))"], ["proof (state)\ngoal (1 subgoal):\n 1. (y = x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     ((c, \\<tau>), s) \\<or>\n     y \\<noteq> x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     (y \\<leftrightarrow> x) \\<bullet> ((c, \\<tau>), s) \\<and>\n     atom y \\<sharp> ((c, \\<tau>), s)) \\<and>\n    b = b", "show  \\<open>(y = x \\<and> (((y \\<leftrightarrow> x) \\<bullet> c, (y \\<leftrightarrow> x) \\<bullet> \\<tau>), (y \\<leftrightarrow> x) \\<bullet> s) = ((c, \\<tau>), s) \\<or>\n         y \\<noteq> x \\<and> (((y \\<leftrightarrow> x) \\<bullet> c, (y \\<leftrightarrow> x) \\<bullet> \\<tau>), (y \\<leftrightarrow> x) \\<bullet> s) = (y \\<leftrightarrow> x) \\<bullet> ((c, \\<tau>), s) \\<and> atom y \\<sharp> ((c, \\<tau>), s)) \\<and>\n         b = b\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. (y = x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     ((c, \\<tau>), s) \\<or>\n     y \\<noteq> x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     (y \\<leftrightarrow> x) \\<bullet> ((c, \\<tau>), s) \\<and>\n     atom y \\<sharp> ((c, \\<tau>), s)) \\<and>\n    b = b", "using False flip_commute flip_fresh_fresh fresh_PairD y"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  (?a \\<leftrightarrow> ?b) = (?b \\<leftrightarrow> ?a)\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n  ?a \\<sharp> (?x, ?y) \\<Longrightarrow> ?a \\<sharp> ?x\n  ?a \\<sharp> (?x, ?y) \\<Longrightarrow> ?a \\<sharp> ?y\n  atom y \\<sharp> (s, c, \\<tau>, t)\n\ngoal (1 subgoal):\n 1. (y = x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     ((c, \\<tau>), s) \\<or>\n     y \\<noteq> x \\<and>\n     (((y \\<leftrightarrow> x) \\<bullet> c,\n       (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n      (y \\<leftrightarrow> x) \\<bullet> s) =\n     (y \\<leftrightarrow> x) \\<bullet> ((c, \\<tau>), s) \\<and>\n     atom y \\<sharp> ((c, \\<tau>), s)) \\<and>\n    b = b", "by auto"], ["proof (state)\nthis:\n  (y = x \\<and>\n   (((y \\<leftrightarrow> x) \\<bullet> c,\n     (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n    (y \\<leftrightarrow> x) \\<bullet> s) =\n   ((c, \\<tau>), s) \\<or>\n   y \\<noteq> x \\<and>\n   (((y \\<leftrightarrow> x) \\<bullet> c,\n     (y \\<leftrightarrow> x) \\<bullet> \\<tau>),\n    (y \\<leftrightarrow> x) \\<bullet> s) =\n   (y \\<leftrightarrow> x) \\<bullet> ((c, \\<tau>), s) \\<and>\n   atom y \\<sharp> ((c, \\<tau>), s)) \\<and>\n  b = b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n   ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n   ((y \\<leftrightarrow> x) \\<bullet> s) =\n  AF_fun_typ x b c \\<tau> s\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "thus ?thesis"], ["proof (prove)\nusing this:\n  AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n   ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n   ((y \\<leftrightarrow> x) \\<bullet> s) =\n  AF_fun_typ x b c \\<tau> s\n\ngoal (1 subgoal):\n 1. AF_fundef f\n     (AF_fun_typ_none\n       (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n         ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n         ((y \\<leftrightarrow> x) \\<bullet> s))) =\n    AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "by metis"], ["proof (state)\nthis:\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "ultimately"], ["proof (chain)\npicking this:\n  atom y \\<sharp> (s, c, \\<tau>, t)\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))", "show  ?thesis"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (s, c, \\<tau>, t)\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "using y fresh_Pair"], ["proof (prove)\nusing this:\n  atom y \\<sharp> (s, c, \\<tau>, t)\n  AF_fundef f\n   (AF_fun_typ_none\n     (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n       ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n       ((y \\<leftrightarrow> x) \\<bullet> s))) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n  atom y \\<sharp> (s, c, \\<tau>, t)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n       AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n       AF_fundef f\n        (AF_fun_typ_none\n          (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n            ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n            ((y \\<leftrightarrow> x) \\<bullet> s)))", "by metis"], ["proof (state)\nthis:\n  \\<exists>y.\n     atom y \\<sharp> (s, c, \\<tau>, t) \\<and>\n     AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s)) =\n     AF_fundef f\n      (AF_fun_typ_none\n        (AF_fun_typ y b ((y \\<leftrightarrow> x) \\<bullet> c)\n          ((y \\<leftrightarrow> x) \\<bullet> \\<tau>)\n          ((y \\<leftrightarrow> x) \\<bullet> s)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_fun_member:\n  assumes \"Some (AF_fundef f ft) = lookup_fun \\<Phi> f\"\n  shows \"AF_fundef f ft \\<in> set \\<Phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AF_fundef f ft \\<in> set \\<Phi>", "using assms"], ["proof (prove)\nusing this:\n  Some (AF_fundef f ft) = lookup_fun \\<Phi> f\n\ngoal (1 subgoal):\n 1. AF_fundef f ft \\<in> set \\<Phi>", "proof (induct \\<Phi>)"], ["proof (state)\ngoal (2 subgoals):\n 1. Some (AF_fundef f ft) = lookup_fun [] f \\<Longrightarrow>\n    AF_fundef f ft \\<in> set []\n 2. \\<And>a \\<Phi>.\n       \\<lbrakk>Some (AF_fundef f ft) =\n                lookup_fun \\<Phi> f \\<Longrightarrow>\n                AF_fundef f ft \\<in> set \\<Phi>;\n        Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\\<rbrakk>\n       \\<Longrightarrow> AF_fundef f ft \\<in> set (a # \\<Phi>)", "case Nil"], ["proof (state)\nthis:\n  Some (AF_fundef f ft) = lookup_fun [] f\n\ngoal (2 subgoals):\n 1. Some (AF_fundef f ft) = lookup_fun [] f \\<Longrightarrow>\n    AF_fundef f ft \\<in> set []\n 2. \\<And>a \\<Phi>.\n       \\<lbrakk>Some (AF_fundef f ft) =\n                lookup_fun \\<Phi> f \\<Longrightarrow>\n                AF_fundef f ft \\<in> set \\<Phi>;\n        Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\\<rbrakk>\n       \\<Longrightarrow> AF_fundef f ft \\<in> set (a # \\<Phi>)", "then"], ["proof (chain)\npicking this:\n  Some (AF_fundef f ft) = lookup_fun [] f", "show ?case"], ["proof (prove)\nusing this:\n  Some (AF_fundef f ft) = lookup_fun [] f\n\ngoal (1 subgoal):\n 1. AF_fundef f ft \\<in> set []", "by auto"], ["proof (state)\nthis:\n  AF_fundef f ft \\<in> set []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<Phi>.\n       \\<lbrakk>Some (AF_fundef f ft) =\n                lookup_fun \\<Phi> f \\<Longrightarrow>\n                AF_fundef f ft \\<in> set \\<Phi>;\n        Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\\<rbrakk>\n       \\<Longrightarrow> AF_fundef f ft \\<in> set (a # \\<Phi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<Phi>.\n       \\<lbrakk>Some (AF_fundef f ft) =\n                lookup_fun \\<Phi> f \\<Longrightarrow>\n                AF_fundef f ft \\<in> set \\<Phi>;\n        Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\\<rbrakk>\n       \\<Longrightarrow> AF_fundef f ft \\<in> set (a # \\<Phi>)", "case (Cons a \\<Phi>)"], ["proof (state)\nthis:\n  Some (AF_fundef f ft) = lookup_fun \\<Phi> f \\<Longrightarrow>\n  AF_fundef f ft \\<in> set \\<Phi>\n  Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\n\ngoal (1 subgoal):\n 1. \\<And>a \\<Phi>.\n       \\<lbrakk>Some (AF_fundef f ft) =\n                lookup_fun \\<Phi> f \\<Longrightarrow>\n                AF_fundef f ft \\<in> set \\<Phi>;\n        Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\\<rbrakk>\n       \\<Longrightarrow> AF_fundef f ft \\<in> set (a # \\<Phi>)", "then"], ["proof (chain)\npicking this:\n  Some (AF_fundef f ft) = lookup_fun \\<Phi> f \\<Longrightarrow>\n  AF_fundef f ft \\<in> set \\<Phi>\n  Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f", "show ?case"], ["proof (prove)\nusing this:\n  Some (AF_fundef f ft) = lookup_fun \\<Phi> f \\<Longrightarrow>\n  AF_fundef f ft \\<in> set \\<Phi>\n  Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\n\ngoal (1 subgoal):\n 1. AF_fundef f ft \\<in> set (a # \\<Phi>)", "using lookup_fun.simps"], ["proof (prove)\nusing this:\n  Some (AF_fundef f ft) = lookup_fun \\<Phi> f \\<Longrightarrow>\n  AF_fundef f ft \\<in> set \\<Phi>\n  Some (AF_fundef f ft) = lookup_fun (a # \\<Phi>) f\n  lookup_fun [] ?g = None\n  lookup_fun (AF_fundef ?f ?ft # ?\\<Pi>) ?g =\n  (if ?f = ?g then Some (AF_fundef ?f ?ft) else lookup_fun ?\\<Pi> ?g)\n\ngoal (1 subgoal):\n 1. AF_fundef f ft \\<in> set (a # \\<Phi>)", "by (metis fun_def.exhaust insert_iff list.simps(15) option.inject)"], ["proof (state)\nthis:\n  AF_fundef f ft \\<in> set (a # \\<Phi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma rig_dom_eq:\n  \"dom (G[x \\<longmapsto> c]) = dom G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Syntax.dom (G[x\\<longmapsto>c]) = Syntax.dom G", "proof(induct G rule: \\<Gamma>.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. Syntax.dom (GNil[x\\<longmapsto>c]) = Syntax.dom GNil\n 2. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "case GNil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. Syntax.dom (GNil[x\\<longmapsto>c]) = Syntax.dom GNil\n 2. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Syntax.dom (GNil[x\\<longmapsto>c]) = Syntax.dom GNil", "using replace_in_g.simps"], ["proof (prove)\nusing this:\n  GNil[?uu\\<longmapsto>?uv] = GNil\n  ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G)[?x'\\<longmapsto>?c'] =\n  (if ?x = ?x' then (?x, ?b, ?c') #\\<^sub>\\<Gamma> ?G\n   else (?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G[?x'\\<longmapsto>?c'])\n\ngoal (1 subgoal):\n 1. Syntax.dom (GNil[x\\<longmapsto>c]) = Syntax.dom GNil", "by presburger"], ["proof (state)\nthis:\n  Syntax.dom (GNil[x\\<longmapsto>c]) = Syntax.dom GNil\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "case (GCons xbc \\<Gamma>')"], ["proof (state)\nthis:\n  Syntax.dom (\\<Gamma>'[x\\<longmapsto>c]) = Syntax.dom \\<Gamma>'\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "obtain x' and b' and c' where xbc: \"xbc=(x',b',c')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x' b' c'.\n        xbc = (x', b', c') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod_cases3"], ["proof (prove)\nusing this:\n  (\\<And>a b c. ?y = (a, b, c) \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>x' b' c'.\n        xbc = (x', b', c') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  xbc = (x', b', c')\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       Syntax.dom (x2[x\\<longmapsto>c]) = Syntax.dom x2 \\<Longrightarrow>\n       Syntax.dom ((x1 #\\<^sub>\\<Gamma> x2)[x\\<longmapsto>c]) =\n       Syntax.dom (x1 #\\<^sub>\\<Gamma> x2)", "then"], ["proof (chain)\npicking this:\n  xbc = (x', b', c')", "show ?case"], ["proof (prove)\nusing this:\n  xbc = (x', b', c')\n\ngoal (1 subgoal):\n 1. Syntax.dom ((xbc #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c]) =\n    Syntax.dom (xbc #\\<^sub>\\<Gamma> \\<Gamma>')", "using replace_in_g.simps GCons"], ["proof (prove)\nusing this:\n  xbc = (x', b', c')\n  GNil[?uu\\<longmapsto>?uv] = GNil\n  ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G)[?x'\\<longmapsto>?c'] =\n  (if ?x = ?x' then (?x, ?b, ?c') #\\<^sub>\\<Gamma> ?G\n   else (?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G[?x'\\<longmapsto>?c'])\n  Syntax.dom (\\<Gamma>'[x\\<longmapsto>c]) = Syntax.dom \\<Gamma>'\n\ngoal (1 subgoal):\n 1. Syntax.dom ((xbc #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c]) =\n    Syntax.dom (xbc #\\<^sub>\\<Gamma> \\<Gamma>')", "by simp"], ["proof (state)\nthis:\n  Syntax.dom ((xbc #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c]) =\n  Syntax.dom (xbc #\\<^sub>\\<Gamma> \\<Gamma>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_in_rig_eq:\n  assumes \"Some (b,c) = lookup \\<Gamma> x\" \n  shows \"Some (b,c') = lookup (\\<Gamma>[x\\<longmapsto>c']) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (b, c') = lookup (\\<Gamma>[x\\<longmapsto>c']) x", "using assms"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup \\<Gamma> x\n\ngoal (1 subgoal):\n 1. Some (b, c') = lookup (\\<Gamma>[x\\<longmapsto>c']) x", "proof(induct \\<Gamma> rule: \\<Gamma>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. Some (b, c) = lookup GNil x \\<Longrightarrow>\n    Some (b, c') = lookup (GNil[x\\<longmapsto>c']) x\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n                Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x;\n        Some (b, c) =\n        lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') x\\<rbrakk>\n       \\<Longrightarrow> Some (b, c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          x", "case GNil"], ["proof (state)\nthis:\n  Some (b, c) = lookup GNil x\n\ngoal (2 subgoals):\n 1. Some (b, c) = lookup GNil x \\<Longrightarrow>\n    Some (b, c') = lookup (GNil[x\\<longmapsto>c']) x\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n                Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x;\n        Some (b, c) =\n        lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') x\\<rbrakk>\n       \\<Longrightarrow> Some (b, c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          x", "then"], ["proof (chain)\npicking this:\n  Some (b, c) = lookup GNil x", "show ?case"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup GNil x\n\ngoal (1 subgoal):\n 1. Some (b, c') = lookup (GNil[x\\<longmapsto>c']) x", "by auto"], ["proof (state)\nthis:\n  Some (b, c') = lookup (GNil[x\\<longmapsto>c']) x\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n                Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x;\n        Some (b, c) =\n        lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') x\\<rbrakk>\n       \\<Longrightarrow> Some (b, c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n                Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x;\n        Some (b, c) =\n        lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') x\\<rbrakk>\n       \\<Longrightarrow> Some (b, c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          x", "case (GCons x b c \\<Gamma>')"], ["proof (state)\nthis:\n  Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n  Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x\n  Some (b, c) = lookup ((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>') x\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n                Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x;\n        Some (b, c) =\n        lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') x\\<rbrakk>\n       \\<Longrightarrow> Some (b, c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          x", "then"], ["proof (chain)\npicking this:\n  Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n  Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x\n  Some (b, c) = lookup ((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>') x", "show ?case"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n  Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x\n  Some (b, c) = lookup ((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>') x\n\ngoal (1 subgoal):\n 1. Some (b, c') =\n    lookup (((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) x", "using replace_in_g.simps lookup.simps"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup \\<Gamma>' x \\<Longrightarrow>\n  Some (b, c') = lookup (\\<Gamma>'[x\\<longmapsto>c']) x\n  Some (b, c) = lookup ((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>') x\n  GNil[?uu\\<longmapsto>?uv] = GNil\n  ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G)[?x'\\<longmapsto>?c'] =\n  (if ?x = ?x' then (?x, ?b, ?c') #\\<^sub>\\<Gamma> ?G\n   else (?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G[?x'\\<longmapsto>?c'])\n  lookup GNil ?x = None\n  lookup ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G) ?y =\n  (if ?x = ?y then Some (?b, ?c) else lookup ?G ?y)\n\ngoal (1 subgoal):\n 1. Some (b, c') =\n    lookup (((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) x", "by auto"], ["proof (state)\nthis:\n  Some (b, c') =\n  lookup (((x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_in_rig_neq:\n  assumes \"Some (b,c) = lookup \\<Gamma> y\" and \"x\\<noteq>y\"\n  shows \"Some (b,c) = lookup (\\<Gamma>[x\\<longmapsto>c']) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (b, c) = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "using assms"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup \\<Gamma> y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b, c) = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "proof(induct \\<Gamma> rule: \\<Gamma>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Some (b, c) = lookup GNil y; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> Some (b, c) = lookup (GNil[x\\<longmapsto>c']) y\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b, c) = lookup \\<Gamma>' y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b, c) =\n                                  lookup (\\<Gamma>'[x\\<longmapsto>c']) y;\n        Some (b, c) = lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b, c) =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          y", "case GNil"], ["proof (state)\nthis:\n  Some (b, c) = lookup GNil y\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Some (b, c) = lookup GNil y; x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> Some (b, c) = lookup (GNil[x\\<longmapsto>c']) y\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b, c) = lookup \\<Gamma>' y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b, c) =\n                                  lookup (\\<Gamma>'[x\\<longmapsto>c']) y;\n        Some (b, c) = lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b, c) =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          y", "then"], ["proof (chain)\npicking this:\n  Some (b, c) = lookup GNil y\n  x \\<noteq> y", "show ?case"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup GNil y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b, c) = lookup (GNil[x\\<longmapsto>c']) y", "by auto"], ["proof (state)\nthis:\n  Some (b, c) = lookup (GNil[x\\<longmapsto>c']) y\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b, c) = lookup \\<Gamma>' y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b, c) =\n                                  lookup (\\<Gamma>'[x\\<longmapsto>c']) y;\n        Some (b, c) = lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b, c) =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b, c) = lookup \\<Gamma>' y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b, c) =\n                                  lookup (\\<Gamma>'[x\\<longmapsto>c']) y;\n        Some (b, c) = lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b, c) =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          y", "case (GCons x' b' c' \\<Gamma>')"], ["proof (state)\nthis:\n  \\<lbrakk>Some (b, c) = lookup \\<Gamma>' y; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b, c) = lookup (\\<Gamma>'[x\\<longmapsto>c']) y\n  Some (b, c) = lookup ((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>') y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b, c) = lookup \\<Gamma>' y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b, c) =\n                                  lookup (\\<Gamma>'[x\\<longmapsto>c']) y;\n        Some (b, c) = lookup ((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b, c) =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma>\n                            \\<Gamma>')[x\\<longmapsto>c'])\n                          y", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Some (b, c) = lookup \\<Gamma>' y; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b, c) = lookup (\\<Gamma>'[x\\<longmapsto>c']) y\n  Some (b, c) = lookup ((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>') y\n  x \\<noteq> y", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Some (b, c) = lookup \\<Gamma>' y; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b, c) = lookup (\\<Gamma>'[x\\<longmapsto>c']) y\n  Some (b, c) = lookup ((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>') y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b, c) =\n    lookup (((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) y", "using replace_in_g.simps lookup.simps"], ["proof (prove)\nusing this:\n  \\<lbrakk>Some (b, c) = lookup \\<Gamma>' y; x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b, c) = lookup (\\<Gamma>'[x\\<longmapsto>c']) y\n  Some (b, c) = lookup ((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>') y\n  x \\<noteq> y\n  GNil[?uu\\<longmapsto>?uv] = GNil\n  ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G)[?x'\\<longmapsto>?c'] =\n  (if ?x = ?x' then (?x, ?b, ?c') #\\<^sub>\\<Gamma> ?G\n   else (?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G[?x'\\<longmapsto>?c'])\n  lookup GNil ?x = None\n  lookup ((?x, ?b, ?c) #\\<^sub>\\<Gamma> ?G) ?y =\n  (if ?x = ?y then Some (?b, ?c) else lookup ?G ?y)\n\ngoal (1 subgoal):\n 1. Some (b, c) =\n    lookup (((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) y", "by auto"], ["proof (state)\nthis:\n  Some (b, c) =\n  lookup (((x', b', c') #\\<^sub>\\<Gamma> \\<Gamma>')[x\\<longmapsto>c']) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_in_rig:\n  assumes \"Some (b,c) = lookup \\<Gamma> y\" \n  shows \"\\<exists>c''. Some (b,c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "proof(cases \"x=y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\n 2. x \\<noteq> y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "case True"], ["proof (state)\nthis:\n  x = y\n\ngoal (2 subgoals):\n 1. x = y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\n 2. x \\<noteq> y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "then"], ["proof (chain)\npicking this:\n  x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  x = y\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "using lookup_in_rig_eq"], ["proof (prove)\nusing this:\n  x = y\n  Some (?b, ?c) = lookup ?\\<Gamma> ?x \\<Longrightarrow>\n  Some (?b, ?c') = lookup (?\\<Gamma>[?x\\<longmapsto>?c']) ?x\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "using assms"], ["proof (prove)\nusing this:\n  x = y\n  Some (?b, ?c) = lookup ?\\<Gamma> ?x \\<Longrightarrow>\n  Some (?b, ?c') = lookup (?\\<Gamma>[?x\\<longmapsto>?c']) ?x\n  Some (b, c) = lookup \\<Gamma> y\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "by blast"], ["proof (state)\nthis:\n  \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "case False"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y \\<Longrightarrow>\n    \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "then"], ["proof (chain)\npicking this:\n  x \\<noteq> y", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "using lookup_in_rig_neq"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  \\<lbrakk>Some (?b, ?c) = lookup ?\\<Gamma> ?y; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> Some (?b, ?c) =\n                    lookup (?\\<Gamma>[?x\\<longmapsto>?c']) ?y\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "using assms"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  \\<lbrakk>Some (?b, ?c) = lookup ?\\<Gamma> ?y; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> Some (?b, ?c) =\n                    lookup (?\\<Gamma>[?x\\<longmapsto>?c']) ?y\n  Some (b, c) = lookup \\<Gamma> y\n\ngoal (1 subgoal):\n 1. \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y", "by blast"], ["proof (state)\nthis:\n  \\<exists>c''. Some (b, c'') = lookup (\\<Gamma>[x\\<longmapsto>c']) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_inside[simp]:\n  assumes \"x \\<notin> fst ` toSet \\<Gamma>'\"\n  shows \"Some (b1,c1) = lookup (\\<Gamma>'@(x,b1,c1)#\\<^sub>\\<Gamma>\\<Gamma>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (b1, c1) =\n    lookup (\\<Gamma>' @ (x, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>) x", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> fst ` toSet \\<Gamma>'\n\ngoal (1 subgoal):\n 1. Some (b1, c1) =\n    lookup (\\<Gamma>' @ (x, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>) x", "by(induct \\<Gamma>',auto)"], ["", "lemma lookup_inside2:\n  assumes \"Some (b1,c1) = lookup (\\<Gamma>'@((x,b0,c0)#\\<^sub>\\<Gamma>\\<Gamma>)) y\" and \"x\\<noteq>y\"\n  shows \"Some (b1,c1) = lookup (\\<Gamma>'@((x,b0,c0')#\\<^sub>\\<Gamma>\\<Gamma>)) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (b1, c1) =\n    lookup (\\<Gamma>' @ (x, b0, c0') #\\<^sub>\\<Gamma> \\<Gamma>) y", "using assms"], ["proof (prove)\nusing this:\n  Some (b1, c1) =\n  lookup (\\<Gamma>' @ (x, b0, c0) #\\<^sub>\\<Gamma> \\<Gamma>) y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b1, c1) =\n    lookup (\\<Gamma>' @ (x, b0, c0') #\\<^sub>\\<Gamma> \\<Gamma>) y", "by(induct \\<Gamma>' rule: \\<Gamma>.induct,auto+)"], ["", "fun tail:: \"'a list \\<Rightarrow> 'a list\" where\n  \"tail [] = []\"\n| \"tail (x#xs) = xs\""], ["", "lemma lookup_options:\n  assumes \"Some (b,c) = lookup (xt#\\<^sub>\\<Gamma>G) x\"\n  shows  \"((x,b,c) = xt) \\<or> (Some (b,c) = lookup G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, b, c) = xt \\<or> Some (b, c) = lookup G x", "by (metis assms lookup.simps(2) option.inject surj_pair)"], ["", "lemma lookup_x:\n  assumes \"Some (b,c) = lookup G x\"\n  shows \"x \\<in> fst ` toSet G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> fst ` toSet G", "using assms"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup G x\n\ngoal (1 subgoal):\n 1. x \\<in> fst ` toSet G", "by(induct \"G\" rule: \\<Gamma>.induct ,auto+)"], ["", "lemma GCons_eq_appendI:\n  fixes xs1::\\<Gamma>\n  shows \"[| x #\\<^sub>\\<Gamma> xs1 = ys; xs = xs1 @ zs |] ==> x #\\<^sub>\\<Gamma> xs = ys @ zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x #\\<^sub>\\<Gamma> xs1 = ys; xs = xs1 @ zs\\<rbrakk>\n    \\<Longrightarrow> x #\\<^sub>\\<Gamma> xs = ys @ zs", "by (drule sym) simp"], ["", "lemma split_G: \"x : toSet xs \\<Longrightarrow> \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> toSet xs \\<Longrightarrow>\n    \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> toSet GNil \\<Longrightarrow>\n    \\<exists>ys zs. GNil = ys @ x #\\<^sub>\\<Gamma> zs\n 2. \\<And>x1 xs.\n       \\<lbrakk>x \\<in> toSet xs \\<Longrightarrow>\n                \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs;\n        x \\<in> toSet (x1 #\\<^sub>\\<Gamma> xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            x1 #\\<^sub>\\<Gamma> xs =\n                            ys @ x #\\<^sub>\\<Gamma> zs", "case GNil"], ["proof (state)\nthis:\n  x \\<in> toSet GNil\n\ngoal (2 subgoals):\n 1. x \\<in> toSet GNil \\<Longrightarrow>\n    \\<exists>ys zs. GNil = ys @ x #\\<^sub>\\<Gamma> zs\n 2. \\<And>x1 xs.\n       \\<lbrakk>x \\<in> toSet xs \\<Longrightarrow>\n                \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs;\n        x \\<in> toSet (x1 #\\<^sub>\\<Gamma> xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            x1 #\\<^sub>\\<Gamma> xs =\n                            ys @ x #\\<^sub>\\<Gamma> zs", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> toSet GNil\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs. GNil = ys @ x #\\<^sub>\\<Gamma> zs", "by simp"], ["proof (state)\nthis:\n  \\<exists>ys zs. GNil = ys @ x #\\<^sub>\\<Gamma> zs\n\ngoal (1 subgoal):\n 1. \\<And>x1 xs.\n       \\<lbrakk>x \\<in> toSet xs \\<Longrightarrow>\n                \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs;\n        x \\<in> toSet (x1 #\\<^sub>\\<Gamma> xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            x1 #\\<^sub>\\<Gamma> xs =\n                            ys @ x #\\<^sub>\\<Gamma> zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 xs.\n       \\<lbrakk>x \\<in> toSet xs \\<Longrightarrow>\n                \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs;\n        x \\<in> toSet (x1 #\\<^sub>\\<Gamma> xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            x1 #\\<^sub>\\<Gamma> xs =\n                            ys @ x #\\<^sub>\\<Gamma> zs", "case GCons"], ["proof (state)\nthis:\n  x \\<in> toSet xs_ \\<Longrightarrow>\n  \\<exists>ys zs. xs_ = ys @ x #\\<^sub>\\<Gamma> zs\n  x \\<in> toSet (x1_ #\\<^sub>\\<Gamma> xs_)\n\ngoal (1 subgoal):\n 1. \\<And>x1 xs.\n       \\<lbrakk>x \\<in> toSet xs \\<Longrightarrow>\n                \\<exists>ys zs. xs = ys @ x #\\<^sub>\\<Gamma> zs;\n        x \\<in> toSet (x1 #\\<^sub>\\<Gamma> xs)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ys zs.\n                            x1 #\\<^sub>\\<Gamma> xs =\n                            ys @ x #\\<^sub>\\<Gamma> zs", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> toSet xs_ \\<Longrightarrow>\n  \\<exists>ys zs. xs_ = ys @ x #\\<^sub>\\<Gamma> zs\n  x \\<in> toSet (x1_ #\\<^sub>\\<Gamma> xs_)\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs. x1_ #\\<^sub>\\<Gamma> xs_ = ys @ x #\\<^sub>\\<Gamma> zs", "using  GCons_eq_appendI"], ["proof (prove)\nusing this:\n  x \\<in> toSet xs_ \\<Longrightarrow>\n  \\<exists>ys zs. xs_ = ys @ x #\\<^sub>\\<Gamma> zs\n  x \\<in> toSet (x1_ #\\<^sub>\\<Gamma> xs_)\n  \\<lbrakk>?x #\\<^sub>\\<Gamma> ?xs1.0 = ?ys; ?xs = ?xs1.0 @ ?zs\\<rbrakk>\n  \\<Longrightarrow> ?x #\\<^sub>\\<Gamma> ?xs = ?ys @ ?zs\n\ngoal (1 subgoal):\n 1. \\<exists>ys zs. x1_ #\\<^sub>\\<Gamma> xs_ = ys @ x #\\<^sub>\\<Gamma> zs", "by (metis Un_iff append_g.simps(1) singletonD toSet.simps(2))"], ["proof (state)\nthis:\n  \\<exists>ys zs. x1_ #\\<^sub>\\<Gamma> xs_ = ys @ x #\\<^sub>\\<Gamma> zs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lookup_not_empty:\n  assumes \"Some \\<tau> = lookup G x\"\n  shows \"G \\<noteq> GNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G \\<noteq> GNil", "using assms"], ["proof (prove)\nusing this:\n  Some \\<tau> = lookup G x\n\ngoal (1 subgoal):\n 1. G \\<noteq> GNil", "by auto"], ["", "lemma lookup_in_g:\n  assumes \"Some (b,c) = lookup \\<Gamma> x\"\n  shows \"(x,b,c) \\<in> toSet \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, b, c) \\<in> toSet \\<Gamma>", "using assms"], ["proof (prove)\nusing this:\n  Some (b, c) = lookup \\<Gamma> x\n\ngoal (1 subgoal):\n 1. (x, b, c) \\<in> toSet \\<Gamma>", "apply(induct \\<Gamma>, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1 \\<Gamma>.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma> x \\<Longrightarrow>\n                (x, b, c) \\<in> toSet \\<Gamma>;\n        Some (b, c) = lookup (x1 #\\<^sub>\\<Gamma> \\<Gamma>) x\\<rbrakk>\n       \\<Longrightarrow> (x, b, c)\n                         \\<in> toSet (x1 #\\<^sub>\\<Gamma> \\<Gamma>)", "using lookup_options"], ["proof (prove)\nusing this:\n  Some (?b, ?c) = lookup (?xt #\\<^sub>\\<Gamma> ?G) ?x \\<Longrightarrow>\n  (?x, ?b, ?c) = ?xt \\<or> Some (?b, ?c) = lookup ?G ?x\n\ngoal (1 subgoal):\n 1. \\<And>x1 \\<Gamma>.\n       \\<lbrakk>Some (b, c) = lookup \\<Gamma> x \\<Longrightarrow>\n                (x, b, c) \\<in> toSet \\<Gamma>;\n        Some (b, c) = lookup (x1 #\\<^sub>\\<Gamma> \\<Gamma>) x\\<rbrakk>\n       \\<Longrightarrow> (x, b, c)\n                         \\<in> toSet (x1 #\\<^sub>\\<Gamma> \\<Gamma>)", "by fastforce"], ["", "lemma lookup_split:\n  fixes \\<Gamma>::\\<Gamma>\n  assumes \"Some (b,c) = lookup \\<Gamma> x\"\n  shows \"\\<exists>G G' . \\<Gamma> =  G'@(x,b,c)#\\<^sub>\\<Gamma>G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>G G'. \\<Gamma> = G' @ (x, b, c) #\\<^sub>\\<Gamma> G", "by (meson assms(1) lookup_in_g split_G)"], ["", "lemma toSet_splitU[simp]:\n  \"(x',b',c') \\<in> toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) \\<longleftrightarrow> (x',b',c') \\<in> (toSet \\<Gamma>' \\<union> {(x, b, c)} \\<union> toSet \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x', b', c')\n     \\<in> toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)) =\n    ((x', b', c')\n     \\<in> toSet \\<Gamma>' \\<union> {(x, b, c)} \\<union> toSet \\<Gamma>)", "using append_g_toSetU toSet.simps"], ["proof (prove)\nusing this:\n  toSet (?G1.0 @ ?G2.0) = toSet ?G1.0 \\<union> toSet ?G2.0\n  toSet GNil = {}\n  toSet (?xbc #\\<^sub>\\<Gamma> ?G) = {?xbc} \\<union> toSet ?G\n\ngoal (1 subgoal):\n 1. ((x', b', c')\n     \\<in> toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)) =\n    ((x', b', c')\n     \\<in> toSet \\<Gamma>' \\<union> {(x, b, c)} \\<union> toSet \\<Gamma>)", "by auto"], ["", "lemma toSet_splitP[simp]:\n  \"(\\<forall>(x', b', c')\\<in>toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>). P x' b' c') \\<longleftrightarrow> (\\<forall> (x', b', c')\\<in>toSet \\<Gamma>'. P x' b' c') \\<and> P x b c \\<and> (\\<forall> (x', b', c')\\<in>toSet \\<Gamma>. P x' b' c')\"  (is \"?A \\<longleftrightarrow> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>(x', b', c')\n              \\<in>toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>).\n        P x' b' c') =\n    ((\\<forall>(x', b', c')\\<in>toSet \\<Gamma>'. P x' b' c') \\<and>\n     P x b c \\<and> (\\<forall>(x', b', c')\\<in>toSet \\<Gamma>. P x' b' c'))", "using toSet_splitU"], ["proof (prove)\nusing this:\n  ((?x', ?b', ?c')\n   \\<in> toSet (?\\<Gamma>' @ (?x, ?b, ?c) #\\<^sub>\\<Gamma> ?\\<Gamma>)) =\n  ((?x', ?b', ?c')\n   \\<in> toSet ?\\<Gamma>' \\<union> {(?x, ?b, ?c)} \\<union> toSet ?\\<Gamma>)\n\ngoal (1 subgoal):\n 1. (\\<forall>(x', b', c')\n              \\<in>toSet (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>).\n        P x' b' c') =\n    ((\\<forall>(x', b', c')\\<in>toSet \\<Gamma>'. P x' b' c') \\<and>\n     P x b c \\<and> (\\<forall>(x', b', c')\\<in>toSet \\<Gamma>. P x' b' c'))", "by force"], ["", "lemma lookup_restrict:\n  assumes \"Some (b',c') = lookup (\\<Gamma>'@(x,b,c)#\\<^sub>\\<Gamma>\\<Gamma>) y\" and \"x \\<noteq> y\" \n  shows \"Some (b',c') = lookup (\\<Gamma>'@\\<Gamma>) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (b', c') = lookup (\\<Gamma>' @ \\<Gamma>) y", "using assms"], ["proof (prove)\nusing this:\n  Some (b', c') = lookup (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b', c') = lookup (\\<Gamma>' @ \\<Gamma>) y", "proof(induct \\<Gamma>' rule:\\<Gamma>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Some (b', c') =\n             lookup (GNil @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> Some (b', c') = lookup (GNil @ \\<Gamma>) y\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b', c') =\n                         lookup\n                          (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n                          y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b', c') =\n                                  lookup (\\<Gamma>' @ \\<Gamma>) y;\n        Some (b', c') =\n        lookup\n         (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n          (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n         y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b', c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n                           \\<Gamma>)\n                          y", "case GNil"], ["proof (state)\nthis:\n  Some (b', c') = lookup (GNil @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y\n  x \\<noteq> y\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Some (b', c') =\n             lookup (GNil @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y;\n     x \\<noteq> y\\<rbrakk>\n    \\<Longrightarrow> Some (b', c') = lookup (GNil @ \\<Gamma>) y\n 2. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b', c') =\n                         lookup\n                          (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n                          y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b', c') =\n                                  lookup (\\<Gamma>' @ \\<Gamma>) y;\n        Some (b', c') =\n        lookup\n         (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n          (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n         y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b', c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n                           \\<Gamma>)\n                          y", "then"], ["proof (chain)\npicking this:\n  Some (b', c') = lookup (GNil @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y\n  x \\<noteq> y", "show ?case"], ["proof (prove)\nusing this:\n  Some (b', c') = lookup (GNil @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b', c') = lookup (GNil @ \\<Gamma>) y", "by auto"], ["proof (state)\nthis:\n  Some (b', c') = lookup (GNil @ \\<Gamma>) y\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b', c') =\n                         lookup\n                          (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n                          y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b', c') =\n                                  lookup (\\<Gamma>' @ \\<Gamma>) y;\n        Some (b', c') =\n        lookup\n         (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n          (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n         y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b', c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n                           \\<Gamma>)\n                          y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b', c') =\n                         lookup\n                          (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n                          y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b', c') =\n                                  lookup (\\<Gamma>' @ \\<Gamma>) y;\n        Some (b', c') =\n        lookup\n         (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n          (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n         y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b', c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n                           \\<Gamma>)\n                          y", "case (GCons x1 b1 c1 \\<Gamma>')"], ["proof (state)\nthis:\n  \\<lbrakk>Some (b', c') =\n           lookup (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y;\n   x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b', c') = lookup (\\<Gamma>' @ \\<Gamma>) y\n  Some (b', c') =\n  lookup\n   (((x1, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>') @\n    (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n   y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. \\<And>xa ba ca \\<Gamma>'.\n       \\<lbrakk>\\<lbrakk>Some (b', c') =\n                         lookup\n                          (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n                          y;\n                 x \\<noteq> y\\<rbrakk>\n                \\<Longrightarrow> Some (b', c') =\n                                  lookup (\\<Gamma>' @ \\<Gamma>) y;\n        Some (b', c') =\n        lookup\n         (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n          (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n         y;\n        x \\<noteq> y\\<rbrakk>\n       \\<Longrightarrow> Some (b', c') =\n                         lookup\n                          (((xa, ba, ca) #\\<^sub>\\<Gamma> \\<Gamma>') @\n                           \\<Gamma>)\n                          y", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Some (b', c') =\n           lookup (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y;\n   x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b', c') = lookup (\\<Gamma>' @ \\<Gamma>) y\n  Some (b', c') =\n  lookup\n   (((x1, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>') @\n    (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n   y\n  x \\<noteq> y", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Some (b', c') =\n           lookup (\\<Gamma>' @ (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>) y;\n   x \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> Some (b', c') = lookup (\\<Gamma>' @ \\<Gamma>) y\n  Some (b', c') =\n  lookup\n   (((x1, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>') @\n    (x, b, c) #\\<^sub>\\<Gamma> \\<Gamma>)\n   y\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. Some (b', c') =\n    lookup (((x1, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>') @ \\<Gamma>) y", "by auto"], ["proof (state)\nthis:\n  Some (b', c') =\n  lookup (((x1, b1, c1) #\\<^sub>\\<Gamma> \\<Gamma>') @ \\<Gamma>) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma supp_list_member:\n  fixes x::\"'a::fs\" and l::\"'a list\"\n  assumes \"x \\<in> set l\"\n  shows \"supp x \\<subseteq> supp l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp x \\<subseteq> supp l", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> set l\n\ngoal (1 subgoal):\n 1. supp x \\<subseteq> supp l", "apply(induct l, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>la xa.\n       \\<lbrakk>x \\<in> set la \\<Longrightarrow> supp x \\<subseteq> supp la;\n        x \\<in> set l; xa \\<in> supp x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> supp (x # la)\n 2. \\<And>a la xa.\n       \\<lbrakk>supp x \\<subseteq> supp la; x \\<in> set l; xa \\<in> supp x;\n        x \\<in> set la\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> supp (a # la)", "using supp_Cons"], ["proof (prove)\nusing this:\n  supp (?x # ?xs) = supp ?x \\<union> supp ?xs\n\ngoal (2 subgoals):\n 1. \\<And>la xa.\n       \\<lbrakk>x \\<in> set la \\<Longrightarrow> supp x \\<subseteq> supp la;\n        x \\<in> set l; xa \\<in> supp x\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> supp (x # la)\n 2. \\<And>a la xa.\n       \\<lbrakk>supp x \\<subseteq> supp la; x \\<in> set l; xa \\<in> supp x;\n        x \\<in> set la\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> supp (a # la)", "by auto"], ["", "lemma GNil_append:\n  assumes \"GNil = G1@G2\"\n  shows \"G1 = GNil \\<and> G2 = GNil\""], ["proof (prove)\ngoal (1 subgoal):\n 1. G1 = GNil \\<and> G2 = GNil", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (G1 = GNil \\<and> G2 = GNil) \\<Longrightarrow> False", "assume \"\\<not> (G1 = GNil \\<and> G2 = GNil)\""], ["proof (state)\nthis:\n  \\<not> (G1 = GNil \\<and> G2 = GNil)\n\ngoal (1 subgoal):\n 1. \\<not> (G1 = GNil \\<and> G2 = GNil) \\<Longrightarrow> False", "hence \"G1@G2 \\<noteq> GNil\""], ["proof (prove)\nusing this:\n  \\<not> (G1 = GNil \\<and> G2 = GNil)\n\ngoal (1 subgoal):\n 1. G1 @ G2 \\<noteq> GNil", "using append_g.simps"], ["proof (prove)\nusing this:\n  \\<not> (G1 = GNil \\<and> G2 = GNil)\n  GNil @ ?g = ?g\n  (?xbc #\\<^sub>\\<Gamma> ?g1.0) @ ?g2.0 =\n  ?xbc #\\<^sub>\\<Gamma> ?g1.0 @ ?g2.0\n\ngoal (1 subgoal):\n 1. G1 @ G2 \\<noteq> GNil", "by (metis \\<Gamma>.distinct(1) \\<Gamma>.exhaust)"], ["proof (state)\nthis:\n  G1 @ G2 \\<noteq> GNil\n\ngoal (1 subgoal):\n 1. \\<not> (G1 = GNil \\<and> G2 = GNil) \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  G1 @ G2 \\<noteq> GNil\n\ngoal (1 subgoal):\n 1. False", "using assms"], ["proof (prove)\nusing this:\n  G1 @ G2 \\<noteq> GNil\n  GNil = G1 @ G2\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma GCons_eq_append_conv:\n  fixes xs::\\<Gamma>\n  shows \"x#\\<^sub>\\<Gamma>xs = ys@zs = (ys = GNil \\<and> x#\\<^sub>\\<Gamma>xs = zs \\<or> (\\<exists>ys'. x#\\<^sub>\\<Gamma>ys' = ys \\<and> xs = ys'@zs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x #\\<^sub>\\<Gamma> xs = ys @ zs) =\n    (ys = GNil \\<and> x #\\<^sub>\\<Gamma> xs = zs \\<or>\n     (\\<exists>ys'. x #\\<^sub>\\<Gamma> ys' = ys \\<and> xs = ys' @ zs))", "by(cases ys) auto"], ["", "lemma dclist_distinct_unique:\n  assumes  \"(dc, const) \\<in> set dclist2\" and  \"(cons, const1) \\<in> set dclist2\" and \"dc=cons\" and  \"distinct (List.map fst dclist2)\"\n  shows \"(const) = const1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const = const1", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. const = const1", "have  \"(cons, const) = (dc, const1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (cons, const) = (dc, const1)", "using assms"], ["proof (prove)\nusing this:\n  (dc, const) \\<in> set dclist2\n  (cons, const1) \\<in> set dclist2\n  dc = cons\n  distinct (map fst dclist2)\n\ngoal (1 subgoal):\n 1. (cons, const) = (dc, const1)", "by (metis (no_types, lifting) assms(3) assms(4) distinct.simps(1) distinct.simps(2) empty_iff insert_iff list.set(1) list.simps(15) list.simps(8) list.simps(9) map_of_eq_Some_iff)"], ["proof (state)\nthis:\n  (cons, const) = (dc, const1)\n\ngoal (1 subgoal):\n 1. const = const1", "thus ?thesis"], ["proof (prove)\nusing this:\n  (cons, const) = (dc, const1)\n\ngoal (1 subgoal):\n 1. const = const1", "by auto"], ["proof (state)\nthis:\n  const = const1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_d_fst_d:\n  assumes \"atom u \\<sharp> \\<delta>\"\n  shows  \"u \\<notin> fst ` set \\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> fst ` set \\<delta>", "using assms"], ["proof (prove)\nusing this:\n  atom u \\<sharp> \\<delta>\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` set \\<delta>", "proof(induct \\<delta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. atom u \\<sharp> [] \\<Longrightarrow> u \\<notin> fst ` set []\n 2. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "case Nil"], ["proof (state)\nthis:\n  atom u \\<sharp> []\n\ngoal (2 subgoals):\n 1. atom u \\<sharp> [] \\<Longrightarrow> u \\<notin> fst ` set []\n 2. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "then"], ["proof (chain)\npicking this:\n  atom u \\<sharp> []", "show ?case"], ["proof (prove)\nusing this:\n  atom u \\<sharp> []\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` set []", "by auto"], ["proof (state)\nthis:\n  u \\<notin> fst ` set []\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "case (Cons ut \\<delta>')"], ["proof (state)\nthis:\n  atom u \\<sharp> \\<delta>' \\<Longrightarrow> u \\<notin> fst ` set \\<delta>'\n  atom u \\<sharp> ut # \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "obtain u' and t' where *:\"ut = (u',t') \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u' t'. ut = (u', t') \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  ut = (u', t')\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "hence \"atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\""], ["proof (prove)\nusing this:\n  ut = (u', t')\n\ngoal (1 subgoal):\n 1. atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'", "using fresh_Cons Cons"], ["proof (prove)\nusing this:\n  ut = (u', t')\n  ?a \\<sharp> ?x # ?xs = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?xs)\n  atom u \\<sharp> \\<delta>' \\<Longrightarrow> u \\<notin> fst ` set \\<delta>'\n  atom u \\<sharp> ut # \\<delta>'\n\ngoal (1 subgoal):\n 1. atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'", "by auto"], ["proof (state)\nthis:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "moreover"], ["proof (state)\nthis:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "hence \"atom u \\<sharp> fst ut\""], ["proof (prove)\nusing this:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n\ngoal (1 subgoal):\n 1. atom u \\<sharp> fst ut", "using * fresh_Pair[of \"atom u\" u' t'] Cons"], ["proof (prove)\nusing this:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n  ut = (u', t')\n  atom u \\<sharp> (u', t') = (atom u \\<sharp> u' \\<and> atom u \\<sharp> t')\n  atom u \\<sharp> \\<delta>' \\<Longrightarrow> u \\<notin> fst ` set \\<delta>'\n  atom u \\<sharp> ut # \\<delta>'\n\ngoal (1 subgoal):\n 1. atom u \\<sharp> fst ut", "by auto"], ["proof (state)\nthis:\n  atom u \\<sharp> fst ut\n\ngoal (1 subgoal):\n 1. \\<And>a \\<delta>.\n       \\<lbrakk>atom u \\<sharp> \\<delta> \\<Longrightarrow>\n                u \\<notin> fst ` set \\<delta>;\n        atom u \\<sharp> a # \\<delta>\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst ` set (a # \\<delta>)", "ultimately"], ["proof (chain)\npicking this:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n  atom u \\<sharp> fst ut", "show ?case"], ["proof (prove)\nusing this:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n  atom u \\<sharp> fst ut\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` set (ut # \\<delta>')", "using Cons"], ["proof (prove)\nusing this:\n  atom u \\<sharp> ut \\<and> atom u \\<sharp> \\<delta>'\n  atom u \\<sharp> fst ut\n  atom u \\<sharp> \\<delta>' \\<Longrightarrow> u \\<notin> fst ` set \\<delta>'\n  atom u \\<sharp> ut # \\<delta>'\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` set (ut # \\<delta>')", "by auto"], ["proof (state)\nthis:\n  u \\<notin> fst ` set (ut # \\<delta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bv_not_in_bset_supp:\n  fixes bv::bv\n  assumes \"bv |\\<notin>| B\"\n  shows \"atom bv \\<notin> supp B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "have *:\"supp B = fset (fimage atom B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp B = fset (atom |`| B)", "by (metis fimage.rep_eq finite_fset supp_finite_set_at_base supp_fset)"], ["proof (state)\nthis:\n  supp B = fset (atom |`| B)\n\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "thus ?thesis"], ["proof (prove)\nusing this:\n  supp B = fset (atom |`| B)\n\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "using assms"], ["proof (prove)\nusing this:\n  supp B = fset (atom |`| B)\n  bv |\\<notin>| B\n\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "using notin_fset"], ["proof (prove)\nusing this:\n  supp B = fset (atom |`| B)\n  bv |\\<notin>| B\n  (?x |\\<notin>| ?S) = (?x \\<notin> fset ?S)\n\ngoal (1 subgoal):\n 1. atom bv \\<notin> supp B", "by fastforce"], ["proof (state)\nthis:\n  atom bv \\<notin> supp B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma u_fresh_d:\n  assumes \"atom u \\<sharp> D\"\n  shows \"u \\<notin> fst ` setD D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<notin> fst ` setD D", "using assms"], ["proof (prove)\nusing this:\n  atom u \\<sharp> D\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` setD D", "proof(induct D rule: \\<Delta>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. atom u \\<sharp> []\\<^sub>\\<Delta> \\<Longrightarrow>\n    u \\<notin> fst ` setD []\\<^sub>\\<Delta>\n 2. \\<And>ua t \\<Delta>'.\n       \\<lbrakk>atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u \\<notin> fst ` setD \\<Delta>';\n        atom u \\<sharp> (ua, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst `\n                                    setD\n                                     ((ua, t) #\\<^sub>\\<Delta> \\<Delta>')", "case DNil"], ["proof (state)\nthis:\n  atom u \\<sharp> []\\<^sub>\\<Delta>\n\ngoal (2 subgoals):\n 1. atom u \\<sharp> []\\<^sub>\\<Delta> \\<Longrightarrow>\n    u \\<notin> fst ` setD []\\<^sub>\\<Delta>\n 2. \\<And>ua t \\<Delta>'.\n       \\<lbrakk>atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u \\<notin> fst ` setD \\<Delta>';\n        atom u \\<sharp> (ua, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst `\n                                    setD\n                                     ((ua, t) #\\<^sub>\\<Delta> \\<Delta>')", "then"], ["proof (chain)\npicking this:\n  atom u \\<sharp> []\\<^sub>\\<Delta>", "show ?case"], ["proof (prove)\nusing this:\n  atom u \\<sharp> []\\<^sub>\\<Delta>\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` setD []\\<^sub>\\<Delta>", "by auto"], ["proof (state)\nthis:\n  u \\<notin> fst ` setD []\\<^sub>\\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>ua t \\<Delta>'.\n       \\<lbrakk>atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u \\<notin> fst ` setD \\<Delta>';\n        atom u \\<sharp> (ua, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst `\n                                    setD\n                                     ((ua, t) #\\<^sub>\\<Delta> \\<Delta>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ua t \\<Delta>'.\n       \\<lbrakk>atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u \\<notin> fst ` setD \\<Delta>';\n        atom u \\<sharp> (ua, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst `\n                                    setD\n                                     ((ua, t) #\\<^sub>\\<Delta> \\<Delta>')", "case (DCons u' t' \\<Delta>')"], ["proof (state)\nthis:\n  atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u \\<notin> fst ` setD \\<Delta>'\n  atom u \\<sharp> (u', t') #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>ua t \\<Delta>'.\n       \\<lbrakk>atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u \\<notin> fst ` setD \\<Delta>';\n        atom u \\<sharp> (ua, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u \\<notin> fst `\n                                    setD\n                                     ((ua, t) #\\<^sub>\\<Delta> \\<Delta>')", "then"], ["proof (chain)\npicking this:\n  atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u \\<notin> fst ` setD \\<Delta>'\n  atom u \\<sharp> (u', t') #\\<^sub>\\<Delta> \\<Delta>'", "show ?case"], ["proof (prove)\nusing this:\n  atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u \\<notin> fst ` setD \\<Delta>'\n  atom u \\<sharp> (u', t') #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` setD ((u', t') #\\<^sub>\\<Delta> \\<Delta>')", "unfolding setD.simps"], ["proof (prove)\nusing this:\n  atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u \\<notin> fst ` setD \\<Delta>'\n  atom u \\<sharp> (u', t') #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` ({(u', t')} \\<union> setD \\<Delta>')", "using fresh_DCons fresh_Pair"], ["proof (prove)\nusing this:\n  atom u \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u \\<notin> fst ` setD \\<Delta>'\n  atom u \\<sharp> (u', t') #\\<^sub>\\<Delta> \\<Delta>'\n  ?a \\<sharp> ?x #\\<^sub>\\<Delta> ?xs =\n  (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?xs)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n\ngoal (1 subgoal):\n 1. u \\<notin> fst ` ({(u', t')} \\<union> setD \\<Delta>')", "by (simp add: fresh_Pair fresh_at_base(2))"], ["proof (state)\nthis:\n  u \\<notin> fst ` setD ((u', t') #\\<^sub>\\<Delta> \\<Delta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "section \\<open>Type Definitions\\<close>"], ["", "lemma exist_fresh_bv:\n  fixes tm::\"'a::fs\"\n  shows  \"\\<exists>bva2 dclist2. AF_typedef_poly tyid bva dclist = AF_typedef_poly tyid bva2 dclist2 \\<and> \n             atom bva2 \\<sharp> tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "obtain bva2::bv where *:\"atom bva2 \\<sharp> (bva, dclist,tyid,tm)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bva2.\n        atom bva2 \\<sharp> (bva, dclist, tyid, tm) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obtain_fresh"], ["proof (prove)\nusing this:\n  (\\<And>a. atom a \\<sharp> ?x \\<Longrightarrow> ?thesis) \\<Longrightarrow>\n  ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>bva2.\n        atom bva2 \\<sharp> (bva, dclist, tyid, tm) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "moreover"], ["proof (state)\nthis:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "hence \"bva2 \\<noteq> bva\""], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n\ngoal (1 subgoal):\n 1. bva2 \\<noteq> bva", "using fresh_at_base"], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  sort_of ?a \\<noteq> sort_of (atom ?b) \\<Longrightarrow> ?a \\<sharp> ?b\n  ?a \\<sharp> ?b = (?a \\<noteq> atom ?b)\n\ngoal (1 subgoal):\n 1. bva2 \\<noteq> bva", "by auto"], ["proof (state)\nthis:\n  bva2 \\<noteq> bva\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "moreover"], ["proof (state)\nthis:\n  bva2 \\<noteq> bva\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "have \" dclist = (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dclist =\n    (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "by simp"], ["proof (state)\nthis:\n  dclist =\n  (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "moreover"], ["proof (state)\nthis:\n  dclist =\n  (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "have \"atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "have \"atom bva2 \\<sharp> dclist\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom bva2 \\<sharp> dclist", "using * fresh_prodN"], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n  ?x \\<sharp> (?a, ?b, ?c, ?d) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i \\<and> ?x \\<sharp> ?j)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and>\n   ?x \\<sharp> ?i \\<and>\n   ?x \\<sharp> ?j \\<and> ?x \\<sharp> ?k \\<and> ?x \\<sharp> ?l)\n\ngoal (1 subgoal):\n 1. atom bva2 \\<sharp> dclist", "by auto"], ["proof (state)\nthis:\n  atom bva2 \\<sharp> dclist\n\ngoal (1 subgoal):\n 1. atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "hence \"atom ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\""], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> dclist\n\ngoal (1 subgoal):\n 1. atom\n     ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "using fresh_eqvt True_eqvt"], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> dclist\n  ?p \\<bullet> (?a \\<sharp> ?x) = ?p \\<bullet> ?a \\<sharp> ?p \\<bullet> ?x\n  ?p \\<bullet> True = True\n\ngoal (1 subgoal):\n 1. atom\n     ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>atom bva2 \\<sharp> dclist;\n     \\<And>p a x.\n        p \\<bullet> (a \\<sharp> x) = p \\<bullet> a \\<sharp> p \\<bullet> x;\n     \\<And>p. p \\<bullet> True = True\\<rbrakk>\n    \\<Longrightarrow> atom\n                       ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "have \"(bva2 \\<leftrightarrow> bva) \\<bullet> atom bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bva2 \\<leftrightarrow> bva) \\<bullet> atom\n      bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "by (metis True_eqvt \\<open>atom bva2 \\<sharp> dclist\\<close> fresh_eqvt)"], ["proof (state)\nthis:\n  (bva2 \\<leftrightarrow> bva) \\<bullet> atom\n    bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom bva2 \\<sharp> dclist;\n     \\<And>p a x.\n        p \\<bullet> (a \\<sharp> x) = p \\<bullet> a \\<sharp> p \\<bullet> x;\n     \\<And>p. p \\<bullet> True = True\\<rbrakk>\n    \\<Longrightarrow> atom\n                       ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "(* 62 ms *)"], ["proof (state)\nthis:\n  (bva2 \\<leftrightarrow> bva) \\<bullet> atom\n    bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. \\<lbrakk>atom bva2 \\<sharp> dclist;\n     \\<And>p a x.\n        p \\<bullet> (a \\<sharp> x) = p \\<bullet> a \\<sharp> p \\<bullet> x;\n     \\<And>p. p \\<bullet> True = True\\<rbrakk>\n    \\<Longrightarrow> atom\n                       ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "then"], ["proof (chain)\npicking this:\n  (bva2 \\<leftrightarrow> bva) \\<bullet> atom\n    bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "show ?thesis"], ["proof (prove)\nusing this:\n  (bva2 \\<leftrightarrow> bva) \\<bullet> atom\n    bva2 \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. atom\n     ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "by simp"], ["proof (state)\nthis:\n  atom\n   ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal:\nNo subgoals!", "(* 125 ms *)"], ["proof (state)\nthis:\n  atom\n   ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  atom\n   ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "thus ?thesis"], ["proof (prove)\nusing this:\n  atom\n   ((bva2 \\<leftrightarrow> bva) \\<bullet> bva2) \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "by auto"], ["proof (state)\nthis:\n  atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "ultimately"], ["proof (chain)\npicking this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  bva2 \\<noteq> bva\n  dclist =\n  (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n  atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist", "have \"AF_typedef_poly tyid bva dclist = AF_typedef_poly tyid bva2 ((bva2 \\<leftrightarrow> bva ) \\<bullet> dclist)\""], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  bva2 \\<noteq> bva\n  dclist =\n  (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n  atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. AF_typedef_poly tyid bva dclist =\n    AF_typedef_poly tyid bva2\n     ((bva2 \\<leftrightarrow> bva) \\<bullet> dclist)", "unfolding type_def.eq_iff   Abs1_eq_iff"], ["proof (prove)\nusing this:\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  bva2 \\<noteq> bva\n  dclist =\n  (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n  atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist\n\ngoal (1 subgoal):\n 1. (bva = bva2 \\<and>\n     dclist = (bva2 \\<leftrightarrow> bva) \\<bullet> dclist \\<or>\n     bva \\<noteq> bva2 \\<and>\n     dclist =\n     (bva \\<leftrightarrow> bva2) \\<bullet> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist \\<and>\n     atom bva \\<sharp> (bva2 \\<leftrightarrow> bva) \\<bullet> dclist) \\<and>\n    tyid = tyid", "by metis"], ["proof (state)\nthis:\n  AF_typedef_poly tyid bva dclist =\n  AF_typedef_poly tyid bva2 ((bva2 \\<leftrightarrow> bva) \\<bullet> dclist)\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "thus ?thesis"], ["proof (prove)\nusing this:\n  AF_typedef_poly tyid bva dclist =\n  AF_typedef_poly tyid bva2 ((bva2 \\<leftrightarrow> bva) \\<bullet> dclist)\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "using * fresh_prodN"], ["proof (prove)\nusing this:\n  AF_typedef_poly tyid bva dclist =\n  AF_typedef_poly tyid bva2 ((bva2 \\<leftrightarrow> bva) \\<bullet> dclist)\n  atom bva2 \\<sharp> (bva, dclist, tyid, tm)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n  ?x \\<sharp> (?a, ?b, ?c, ?d) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i \\<and> ?x \\<sharp> ?j)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and>\n   ?x \\<sharp> ?i \\<and>\n   ?x \\<sharp> ?j \\<and> ?x \\<sharp> ?k \\<and> ?x \\<sharp> ?l)\n\ngoal (1 subgoal):\n 1. \\<exists>bva2 dclist2.\n       AF_typedef_poly tyid bva dclist =\n       AF_typedef_poly tyid bva2 dclist2 \\<and>\n       atom bva2 \\<sharp> tm", "by metis"], ["proof (state)\nthis:\n  \\<exists>bva2 dclist2.\n     AF_typedef_poly tyid bva dclist =\n     AF_typedef_poly tyid bva2 dclist2 \\<and>\n     atom bva2 \\<sharp> tm\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obtain_fresh_bv:\n  fixes tm::\"'a::fs\"\n  obtains bva2::bv and  dclist2 where \"AF_typedef_poly tyid bva dclist = AF_typedef_poly tyid bva2 dclist2 \\<and> \n             atom bva2 \\<sharp> tm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bva2 dclist2.\n        AF_typedef_poly tyid bva dclist =\n        AF_typedef_poly tyid bva2 dclist2 \\<and>\n        atom bva2 \\<sharp> tm \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using exist_fresh_bv"], ["proof (prove)\nusing this:\n  \\<exists>bva2 dclist2.\n     AF_typedef_poly ?tyid ?bva ?dclist =\n     AF_typedef_poly ?tyid bva2 dclist2 \\<and>\n     atom bva2 \\<sharp> ?tm\n\ngoal (1 subgoal):\n 1. (\\<And>bva2 dclist2.\n        AF_typedef_poly tyid bva dclist =\n        AF_typedef_poly tyid bva2 dclist2 \\<and>\n        atom bva2 \\<sharp> tm \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["", "section \\<open>Function Definitions\\<close>"], ["", "lemma fun_typ_flip:\n  fixes bv1::bv and c::bv\n  shows   \"(bv1 \\<leftrightarrow> c) \\<bullet> AF_fun_typ x1 b1 c1 \\<tau>1 s1 = AF_fun_typ x1 ((bv1 \\<leftrightarrow> c) \\<bullet> b1) ((bv1 \\<leftrightarrow> c) \\<bullet> c1) ((bv1 \\<leftrightarrow> c) \\<bullet> \\<tau>1) ((bv1 \\<leftrightarrow> c) \\<bullet> s1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bv1 \\<leftrightarrow> c) \\<bullet> AF_fun_typ x1 b1 c1 \\<tau>1 s1 =\n    AF_fun_typ x1 ((bv1 \\<leftrightarrow> c) \\<bullet> b1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> c1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> \\<tau>1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> s1)", "using fun_typ.perm_simps flip_fresh_fresh supp_at_base  fresh_def\n    flip_fresh_fresh fresh_def supp_at_base"], ["proof (prove)\nusing this:\n  ?p \\<bullet> AF_fun_typ ?x ?b ?c ?\\<tau> ?s =\n  AF_fun_typ (?p \\<bullet> ?x) (?p \\<bullet> ?b) (?p \\<bullet> ?c)\n   (?p \\<bullet> ?\\<tau>) (?p \\<bullet> ?s)\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n  supp ?a = {atom ?a}\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  \\<lbrakk>atom ?a \\<sharp> ?x; atom ?b \\<sharp> ?x\\<rbrakk>\n  \\<Longrightarrow> (?a \\<leftrightarrow> ?b) \\<bullet> ?x = ?x\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n  supp ?a = {atom ?a}\n\ngoal (1 subgoal):\n 1. (bv1 \\<leftrightarrow> c) \\<bullet> AF_fun_typ x1 b1 c1 \\<tau>1 s1 =\n    AF_fun_typ x1 ((bv1 \\<leftrightarrow> c) \\<bullet> b1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> c1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> \\<tau>1)\n     ((bv1 \\<leftrightarrow> c) \\<bullet> s1)", "by (simp add: flip_fresh_fresh)"], ["", "lemma fun_def_eq:\n  assumes  \"AF_fundef fa (AF_fun_typ_none (AF_fun_typ xa ba ca \\<tau>a sa)) = AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\"\n  shows \"f = fa\" and \"b = ba\" and \"[[atom xa]]lst. sa = [[atom x]]lst. s\" and \"[[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\" and\n    \" [[atom xa]]lst. ca = [[atom x]]lst. c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f = fa &&& b = ba) &&&\n    [[atom xa]]lst. sa = [[atom x]]lst. s &&&\n    [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau> &&&\n    [[atom xa]]lst. ca = [[atom x]]lst. c", "using fun_def.eq_iff fun_typ_q.eq_iff fun_typ.eq_iff lst_snd lst_fst"], ["proof (prove)\nusing this:\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  (AF_fun_typ_some ?bv ?fun_typ = AF_fun_typ_some ?bva ?fun_typa) =\n  ([[atom ?bv]]lst. ?fun_typ = [[atom ?bva]]lst. ?fun_typa)\n  (AF_fun_typ_none ?fun_typ = AF_fun_typ_none ?fun_typa) =\n  (?fun_typ = ?fun_typa)\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n\ngoal (1 subgoal):\n 1. (f = fa &&& b = ba) &&&\n    [[atom xa]]lst. sa = [[atom x]]lst. s &&&\n    [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau> &&&\n    [[atom xa]]lst. ca = [[atom x]]lst. c", "using assms"], ["proof (prove)\nusing this:\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  (AF_fun_typ_some ?bv ?fun_typ = AF_fun_typ_some ?bva ?fun_typa) =\n  ([[atom ?bv]]lst. ?fun_typ = [[atom ?bva]]lst. ?fun_typa)\n  (AF_fun_typ_none ?fun_typ = AF_fun_typ_none ?fun_typa) =\n  (?fun_typ = ?fun_typa)\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n  AF_fundef fa (AF_fun_typ_none (AF_fun_typ xa ba ca \\<tau>a sa)) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal (1 subgoal):\n 1. (f = fa &&& b = ba) &&&\n    [[atom xa]]lst. sa = [[atom x]]lst. s &&&\n    [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau> &&&\n    [[atom xa]]lst. ca = [[atom x]]lst. c", "apply metis"], ["proof (prove)\ngoal (4 subgoals):\n 1. b = ba\n 2. [[atom xa]]lst. sa = [[atom x]]lst. s\n 3. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 4. [[atom xa]]lst. ca = [[atom x]]lst. c", "using fun_def.eq_iff fun_typ_q.eq_iff fun_typ.eq_iff lst_snd lst_fst"], ["proof (prove)\nusing this:\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  (AF_fun_typ_some ?bv ?fun_typ = AF_fun_typ_some ?bva ?fun_typa) =\n  ([[atom ?bv]]lst. ?fun_typ = [[atom ?bva]]lst. ?fun_typa)\n  (AF_fun_typ_none ?fun_typ = AF_fun_typ_none ?fun_typa) =\n  (?fun_typ = ?fun_typa)\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n\ngoal (4 subgoals):\n 1. b = ba\n 2. [[atom xa]]lst. sa = [[atom x]]lst. s\n 3. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 4. [[atom xa]]lst. ca = [[atom x]]lst. c", "using assms"], ["proof (prove)\nusing this:\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  (AF_fun_typ_some ?bv ?fun_typ = AF_fun_typ_some ?bva ?fun_typa) =\n  ([[atom ?bv]]lst. ?fun_typ = [[atom ?bva]]lst. ?fun_typa)\n  (AF_fun_typ_none ?fun_typ = AF_fun_typ_none ?fun_typa) =\n  (?fun_typ = ?fun_typa)\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n  AF_fundef fa (AF_fun_typ_none (AF_fun_typ xa ba ca \\<tau>a sa)) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n\ngoal (4 subgoals):\n 1. b = ba\n 2. [[atom xa]]lst. sa = [[atom x]]lst. s\n 3. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 4. [[atom xa]]lst. ca = [[atom x]]lst. c", "apply metis"], ["proof (prove)\ngoal (3 subgoals):\n 1. [[atom xa]]lst. sa = [[atom x]]lst. s\n 2. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 3. [[atom xa]]lst. ca = [[atom x]]lst. c", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. [[atom xa]]lst. sa = [[atom x]]lst. s\n 2. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 3. [[atom xa]]lst. ca = [[atom x]]lst. c", "have \"([[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s)", "using assms  fun_def.eq_iff fun_typ_q.eq_iff  fun_typ.eq_iff"], ["proof (prove)\nusing this:\n  AF_fundef fa (AF_fun_typ_none (AF_fun_typ xa ba ca \\<tau>a sa)) =\n  AF_fundef f (AF_fun_typ_none (AF_fun_typ x b c \\<tau> s))\n  (AF_fundef ?list ?fun_typ_q = AF_fundef ?lista ?fun_typ_qa) =\n  (?list = ?lista \\<and> ?fun_typ_q = ?fun_typ_qa)\n  (AF_fun_typ_some ?bv ?fun_typ = AF_fun_typ_some ?bva ?fun_typa) =\n  ([[atom ?bv]]lst. ?fun_typ = [[atom ?bva]]lst. ?fun_typa)\n  (AF_fun_typ_none ?fun_typ = AF_fun_typ_none ?fun_typa) =\n  (?fun_typ = ?fun_typa)\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n\ngoal (1 subgoal):\n 1. [[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s)", "by auto"], ["proof (state)\nthis:\n  [[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s)\n\ngoal (3 subgoals):\n 1. [[atom xa]]lst. sa = [[atom x]]lst. s\n 2. [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n 3. [[atom xa]]lst. ca = [[atom x]]lst. c", "thus \"[[atom xa]]lst. sa = [[atom x]]lst. s\" and \"[[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\" and\n    \" [[atom xa]]lst. ca = [[atom x]]lst. c\""], ["proof (prove)\nusing this:\n  [[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s)\n\ngoal (1 subgoal):\n 1. [[atom xa]]lst. sa = [[atom x]]lst. s &&&\n    [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau> &&&\n    [[atom xa]]lst. ca = [[atom x]]lst. c", "using lst_snd lst_fst"], ["proof (prove)\nusing this:\n  [[atom xa]]lst. ((ca, \\<tau>a), sa) = [[atom x]]lst. ((c, \\<tau>), s)\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t2.0 = [[atom ?x']]lst. ?t2'\n  [[atom ?x]]lst. (?t1.0, ?t2.0) =\n  [[atom ?x']]lst. (?t1', ?t2') \\<Longrightarrow>\n  [[atom ?x]]lst. ?t1.0 = [[atom ?x']]lst. ?t1'\n\ngoal (1 subgoal):\n 1. [[atom xa]]lst. sa = [[atom x]]lst. s &&&\n    [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau> &&&\n    [[atom xa]]lst. ca = [[atom x]]lst. c", "by metis+"], ["proof (state)\nthis:\n  [[atom xa]]lst. sa = [[atom x]]lst. s\n  [[atom xa]]lst. \\<tau>a = [[atom x]]lst. \\<tau>\n  [[atom xa]]lst. ca = [[atom x]]lst. c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fun_arg_unique_aux: \n  assumes \"AF_fun_typ x1 b1 c1 \\<tau>1' s1' = AF_fun_typ x2 b2 c2 \\<tau>2' s2'\"\n  shows \"\\<lbrace> x1 : b1 | c1 \\<rbrace> = \\<lbrace> x2 : b2 | c2\\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "have \" ([[atom x1]]lst. c1 = [[atom x2]]lst. c2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom x1]]lst. c1 = [[atom x2]]lst. c2", "using fun_def_eq assms"], ["proof (prove)\nusing this:\n  AF_fundef ?fa (AF_fun_typ_none (AF_fun_typ ?xa ?ba ?ca ?\\<tau>a ?sa)) =\n  AF_fundef ?f\n   (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\\<tau> ?s)) \\<Longrightarrow>\n  ?f = ?fa\n  AF_fundef ?fa (AF_fun_typ_none (AF_fun_typ ?xa ?ba ?ca ?\\<tau>a ?sa)) =\n  AF_fundef ?f\n   (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\\<tau> ?s)) \\<Longrightarrow>\n  ?b = ?ba\n  AF_fundef ?fa (AF_fun_typ_none (AF_fun_typ ?xa ?ba ?ca ?\\<tau>a ?sa)) =\n  AF_fundef ?f\n   (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\\<tau> ?s)) \\<Longrightarrow>\n  [[atom ?xa]]lst. ?sa = [[atom ?x]]lst. ?s\n  AF_fundef ?fa (AF_fun_typ_none (AF_fun_typ ?xa ?ba ?ca ?\\<tau>a ?sa)) =\n  AF_fundef ?f\n   (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\\<tau> ?s)) \\<Longrightarrow>\n  [[atom ?xa]]lst. ?\\<tau>a = [[atom ?x]]lst. ?\\<tau>\n  AF_fundef ?fa (AF_fun_typ_none (AF_fun_typ ?xa ?ba ?ca ?\\<tau>a ?sa)) =\n  AF_fundef ?f\n   (AF_fun_typ_none (AF_fun_typ ?x ?b ?c ?\\<tau> ?s)) \\<Longrightarrow>\n  [[atom ?xa]]lst. ?ca = [[atom ?x]]lst. ?c\n  AF_fun_typ x1 b1 c1 \\<tau>1' s1' = AF_fun_typ x2 b2 c2 \\<tau>2' s2'\n\ngoal (1 subgoal):\n 1. [[atom x1]]lst. c1 = [[atom x2]]lst. c2", "by metis"], ["proof (state)\nthis:\n  [[atom x1]]lst. c1 = [[atom x2]]lst. c2\n\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "moreover"], ["proof (state)\nthis:\n  [[atom x1]]lst. c1 = [[atom x2]]lst. c2\n\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "have \"b1 = b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 = b2", "using fun_typ.eq_iff assms"], ["proof (prove)\nusing this:\n  (AF_fun_typ ?x ?b ?c ?\\<tau> ?s = AF_fun_typ ?xa ?ba ?ca ?\\<tau>' ?sa) =\n  ([[atom ?x]]lst. ((?c, ?\\<tau>), ?s) =\n   [[atom ?xa]]lst. ((?ca, ?\\<tau>'), ?sa) \\<and>\n   ?b = ?ba)\n  AF_fun_typ x1 b1 c1 \\<tau>1' s1' = AF_fun_typ x2 b2 c2 \\<tau>2' s2'\n\ngoal (1 subgoal):\n 1. b1 = b2", "by metis"], ["proof (state)\nthis:\n  b1 = b2\n\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "ultimately"], ["proof (chain)\npicking this:\n  [[atom x1]]lst. c1 = [[atom x2]]lst. c2\n  b1 = b2", "show ?thesis"], ["proof (prove)\nusing this:\n  [[atom x1]]lst. c1 = [[atom x2]]lst. c2\n  b1 = b2\n\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "using \\<tau>.eq_iff"], ["proof (prove)\nusing this:\n  [[atom x1]]lst. c1 = [[atom x2]]lst. c2\n  b1 = b2\n  (\\<lbrace> ?x : ?b  | ?c \\<rbrace> =\n   \\<lbrace> ?xa : ?ba  | ?ca \\<rbrace>) =\n  ([[atom ?x]]lst. ?c = [[atom ?xa]]lst. ?ca \\<and> ?b = ?ba)\n\ngoal (1 subgoal):\n 1. \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>", "by fast"], ["proof (state)\nthis:\n  \\<lbrace> x1 : b1  | c1 \\<rbrace> = \\<lbrace> x2 : b2  | c2 \\<rbrace>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_x_neq:\n  fixes x::x and y::x\n  shows \"atom x \\<sharp> y = (x \\<noteq> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom x \\<sharp> y = (x \\<noteq> y)", "using fresh_at_base  fresh_def"], ["proof (prove)\nusing this:\n  sort_of ?a \\<noteq> sort_of (atom ?b) \\<Longrightarrow> ?a \\<sharp> ?b\n  ?a \\<sharp> ?b = (?a \\<noteq> atom ?b)\n  ?a \\<sharp> ?x \\<equiv> ?a \\<notin> supp ?x\n\ngoal (1 subgoal):\n 1. atom x \\<sharp> y = (x \\<noteq> y)", "by auto"], ["", "lemma obtain_fresh_z3:\n  fixes tm::\"'b::fs\"\n  obtains z::x where \"\\<lbrace> x : b  | c \\<rbrace> =  \\<lbrace> z : b  | c[x::=V_var z]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>  atom z \\<sharp> tm \\<and> atom z \\<sharp> (x,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>\n        atom z \\<sharp> tm \\<and> atom z \\<sharp> (x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>\n        atom z \\<sharp> tm \\<and> atom z \\<sharp> (x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "obtain z::x and c'::c where z:\"\\<lbrace> x : b  | c \\<rbrace> =  \\<lbrace> z : b | c' \\<rbrace> \\<and>  atom z \\<sharp> (tm,x,c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z c'.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n        atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using obtain_fresh_z2 b_of.simps"], ["proof (prove)\nusing this:\n  (\\<And>z c.\n      atom z \\<sharp> ?t \\<and>\n      ?\\<tau> = \\<lbrace> z : b_of ?\\<tau>  | c \\<rbrace> \\<Longrightarrow>\n      ?thesis) \\<Longrightarrow>\n  ?thesis\n  b_of \\<lbrace> ?z : ?b  | ?c \\<rbrace> = ?b\n\ngoal (1 subgoal):\n 1. (\\<And>z c'.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n        atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n  atom z \\<sharp> (tm, x, c)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>\n        atom z \\<sharp> tm \\<and> atom z \\<sharp> (x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "hence \"c' = c[x::=V_var z]\\<^sub>c\\<^sub>v\""], ["proof (prove)\nusing this:\n  \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n  atom z \\<sharp> (tm, x, c)\n\ngoal (1 subgoal):\n 1. c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n    atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n    c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "have \"([[atom z]]lst. c' = [[atom x]]lst. c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [[atom z]]lst. c' = [[atom x]]lst. c", "using z \\<tau>.eq_iff"], ["proof (prove)\nusing this:\n  \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n  atom z \\<sharp> (tm, x, c)\n  (\\<lbrace> ?x : ?b  | ?c \\<rbrace> =\n   \\<lbrace> ?xa : ?ba  | ?ca \\<rbrace>) =\n  ([[atom ?x]]lst. ?c = [[atom ?xa]]lst. ?ca \\<and> ?b = ?ba)\n\ngoal (1 subgoal):\n 1. [[atom z]]lst. c' = [[atom x]]lst. c", "by metis"], ["proof (state)\nthis:\n  [[atom z]]lst. c' = [[atom x]]lst. c\n\ngoal (1 subgoal):\n 1. \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n    atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n    c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "hence \"c' = (z \\<leftrightarrow> x) \\<bullet> c\""], ["proof (prove)\nusing this:\n  [[atom z]]lst. c' = [[atom x]]lst. c\n\ngoal (1 subgoal):\n 1. c' = (z \\<leftrightarrow> x) \\<bullet> c", "using Abs1_eq_iff[of z c' x c]  fresh_x_neq  fresh_prodN"], ["proof (prove)\nusing this:\n  [[atom z]]lst. c' = [[atom x]]lst. c\n  ([{atom z}]set. c' = [{atom x}]set. c) =\n  (z = x \\<and> c' = c \\<or>\n   z \\<noteq> x \\<and>\n   c' = (z \\<leftrightarrow> x) \\<bullet> c \\<and> atom z \\<sharp> c)\n  ([{atom z}]res. c' = [{atom x}]res. c) =\n  (z = x \\<and> c' = c \\<or>\n   z \\<noteq> x \\<and>\n   c' = (z \\<leftrightarrow> x) \\<bullet> c \\<and> atom z \\<sharp> c)\n  ([[atom z]]lst. c' = [[atom x]]lst. c) =\n  (z = x \\<and> c' = c \\<or>\n   z \\<noteq> x \\<and>\n   c' = (z \\<leftrightarrow> x) \\<bullet> c \\<and> atom z \\<sharp> c)\n  atom ?x \\<sharp> ?y = (?x \\<noteq> ?y)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n  ?x \\<sharp> (?a, ?b, ?c, ?d) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i \\<and> ?x \\<sharp> ?j)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and>\n   ?x \\<sharp> ?i \\<and>\n   ?x \\<sharp> ?j \\<and> ?x \\<sharp> ?k \\<and> ?x \\<sharp> ?l)\n\ngoal (1 subgoal):\n 1. c' = (z \\<leftrightarrow> x) \\<bullet> c", "by fastforce"], ["proof (state)\nthis:\n  c' = (z \\<leftrightarrow> x) \\<bullet> c\n\ngoal (1 subgoal):\n 1. \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n    atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n    c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "also"], ["proof (state)\nthis:\n  c' = (z \\<leftrightarrow> x) \\<bullet> c\n\ngoal (1 subgoal):\n 1. \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n    atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n    c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "have \"... = c[x::=V_var z]\\<^sub>c\\<^sub>v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (z \\<leftrightarrow> x) \\<bullet> c =\n    c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "using subst_v_c_def  flip_subst_v[of z c x] z fresh_prod3"], ["proof (prove)\nusing this:\n  subst_v = subst_cv_abbrev\n  atom z \\<sharp> c \\<Longrightarrow>\n  (z \\<leftrightarrow> x) \\<bullet> c = c[x::=[ z ]\\<^sup>v]\\<^sub>v\n  \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n  atom z \\<sharp> (tm, x, c)\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n\ngoal (1 subgoal):\n 1. (z \\<leftrightarrow> x) \\<bullet> c =\n    c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "by metis"], ["proof (state)\nthis:\n  (z \\<leftrightarrow> x) \\<bullet> c = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n\ngoal (1 subgoal):\n 1. \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n    atom z \\<sharp> (tm, x, c) \\<Longrightarrow>\n    c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "finally"], ["proof (chain)\npicking this:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "show ?thesis"], ["proof (prove)\nusing this:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n\ngoal (1 subgoal):\n 1. c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v", "by auto"], ["proof (state)\nthis:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrace> x : b  | c \\<rbrace> =\n        \\<lbrace> z : b  | c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>\n        atom z \\<sharp> tm \\<and> atom z \\<sharp> (x, c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n\ngoal (1 subgoal):\n 1. thesis", "using z fresh_prodN that"], ["proof (prove)\nusing this:\n  c' = c[x::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v\n  \\<lbrace> x : b  | c \\<rbrace> = \\<lbrace> z : b  | c' \\<rbrace> \\<and>\n  atom z \\<sharp> (tm, x, c)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n  ?x \\<sharp> (?a, ?b, ?c) =\n  (?x \\<sharp> ?a \\<and> ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c)\n  ?x \\<sharp> (?a, ?b, ?c, ?d) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and> ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and> ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and> ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and> ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and> ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and> ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and> ?x \\<sharp> ?i \\<and> ?x \\<sharp> ?j)\n  ?x \\<sharp> (?a, ?b, ?c, ?d, ?e, ?f, ?g, ?h, ?i, ?j, ?k, ?l) =\n  (?x \\<sharp> ?a \\<and>\n   ?x \\<sharp> ?b \\<and>\n   ?x \\<sharp> ?c \\<and>\n   ?x \\<sharp> ?d \\<and>\n   ?x \\<sharp> ?e \\<and>\n   ?x \\<sharp> ?f \\<and>\n   ?x \\<sharp> ?g \\<and>\n   ?x \\<sharp> ?h \\<and>\n   ?x \\<sharp> ?i \\<and>\n   ?x \\<sharp> ?j \\<and> ?x \\<sharp> ?k \\<and> ?x \\<sharp> ?l)\n  \\<lbrace> x : b  | c \\<rbrace> =\n  \\<lbrace> ?z : b  | c[x::=[ ?z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> \\<and>\n  atom ?z \\<sharp> tm \\<and> atom ?z \\<sharp> (x, c) \\<Longrightarrow>\n  thesis\n\ngoal (1 subgoal):\n 1. thesis", "by metis"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma u_fresh_v:\n  fixes u::u and t::v\n  shows \"atom u \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom u \\<sharp> t", "by(nominal_induct t rule:v.strong_induct,auto)"], ["", "lemma u_fresh_ce:\n  fixes u::u and t::ce\n  shows \"atom u \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom u \\<sharp> t", "apply(nominal_induct t rule:ce.strong_induct)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x. atom u \\<sharp> [ x ]\\<^sup>c\\<^sup>e\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>atom u \\<sharp> x2; atom u \\<sharp> x3\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> [ x1a x2 x3 ]\\<^sup>c\\<^sup>e\n 3. \\<And>x1a x2.\n       \\<lbrakk>atom u \\<sharp> x1a; atom u \\<sharp> x2\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> [ x1a @@ x2 ]\\<^sup>c\\<^sup>e\n 4. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [#1x]\\<^sup>c\\<^sup>e\n 5. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [#2x]\\<^sup>c\\<^sup>e\n 6. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [| x |]\\<^sup>c\\<^sup>e", "using  u_fresh_v pure_fresh"], ["proof (prove)\nusing this:\n  atom ?u \\<sharp> ?t\n  ?a \\<sharp> ?x\n\ngoal (6 subgoals):\n 1. \\<And>x. atom u \\<sharp> [ x ]\\<^sup>c\\<^sup>e\n 2. \\<And>x1a x2 x3.\n       \\<lbrakk>atom u \\<sharp> x2; atom u \\<sharp> x3\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> [ x1a x2 x3 ]\\<^sup>c\\<^sup>e\n 3. \\<And>x1a x2.\n       \\<lbrakk>atom u \\<sharp> x1a; atom u \\<sharp> x2\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> [ x1a @@ x2 ]\\<^sup>c\\<^sup>e\n 4. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [#1x]\\<^sup>c\\<^sup>e\n 5. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [#2x]\\<^sup>c\\<^sup>e\n 6. \\<And>x.\n       atom u \\<sharp> x \\<Longrightarrow>\n       atom u \\<sharp> [| x |]\\<^sup>c\\<^sup>e", "apply (auto simp add:  opp.fresh ce.fresh opp.fresh opp.exhaust)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>atom u \\<sharp> x2; atom u \\<sharp> x3;\n        \\<And>a x. a \\<sharp> x\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> x1a", "unfolding ce.fresh opp.fresh opp.exhaust"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x1a x2 x3.\n       \\<lbrakk>atom u \\<sharp> x2; atom u \\<sharp> x3;\n        \\<And>a x. a \\<sharp> x\\<rbrakk>\n       \\<Longrightarrow> atom u \\<sharp> x1a", "by (simp add: fresh_opp_all)"], ["", "lemma u_fresh_c:\n  fixes u::u and t::c\n  shows \"atom u \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom u \\<sharp> t", "by(nominal_induct t rule:c.strong_induct,auto simp add: c.fresh u_fresh_ce)"], ["", "lemma u_fresh_g:\n  fixes u::u and t::\\<Gamma>\n  shows \"atom u \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom u \\<sharp> t", "by(induct t rule:\\<Gamma>_induct, auto simp add: u_fresh_b u_fresh_c  fresh_GCons fresh_GNil)"], ["", "lemma u_fresh_t:\n  fixes u::u and t::\\<tau>\n  shows \"atom u \\<sharp> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom u \\<sharp> t", "by(nominal_induct t rule:\\<tau>.strong_induct,auto simp add: \\<tau>.fresh u_fresh_c u_fresh_b)"], ["", "lemma b_of_c_of_eq:\n  assumes \"atom z \\<sharp> \\<tau>\" \n  shows \"\\<lbrace> z : b_of \\<tau> |  c_of \\<tau> z \\<rbrace> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace> z : b_of \\<tau>  | c_of \\<tau> z \\<rbrace> = \\<tau>", "using assms"], ["proof (prove)\nusing this:\n  atom z \\<sharp> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrace> z : b_of \\<tau>  | c_of \\<tau> z \\<rbrace> = \\<tau>", "proof(nominal_induct \\<tau> avoiding: z rule: \\<tau>.strong_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a x3a z.\n       \\<lbrakk>atom x1a \\<sharp> z;\n        atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace> z : b_of\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n     \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n                         \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "case (T_refined_type x1a x2a x3a)"], ["proof (state)\nthis:\n  atom x1a \\<sharp> z\n  atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a x3a z.\n       \\<lbrakk>atom x1a \\<sharp> z;\n        atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace> z : b_of\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n     \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n                         \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "hence \" \\<lbrace> z : b_of \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> = \\<lbrace> z : x2a | x3a[x1a::=V_var z]\\<^sub>c\\<^sub>v \\<rbrace>\""], ["proof (prove)\nusing this:\n  atom x1a \\<sharp> z\n  atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace> z : b_of\n                   \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                      \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n    \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>", "using b_of.simps c_of.simps c_of_eq"], ["proof (prove)\nusing this:\n  atom x1a \\<sharp> z\n  atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n  b_of \\<lbrace> ?z : ?b  | ?c \\<rbrace> = ?b\n  atom ?z \\<sharp> ?x \\<Longrightarrow>\n  c_of \\<lbrace> ?z : ?b  | ?c \\<rbrace> ?x =\n  ?c[?z::=[ ?x ]\\<^sup>v]\\<^sub>c\\<^sub>v\n  c_of \\<lbrace> ?x : ?b  | ?c \\<rbrace> ?x = ?c\n\ngoal (1 subgoal):\n 1. \\<lbrace> z : b_of\n                   \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                      \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n    \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>", "by auto"], ["proof (state)\nthis:\n  \\<lbrace> z : b_of\n                 \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                    \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a x3a z.\n       \\<lbrakk>atom x1a \\<sharp> z;\n        atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace> z : b_of\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n     \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n                         \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "moreover"], ["proof (state)\nthis:\n  \\<lbrace> z : b_of\n                 \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                    \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a x3a z.\n       \\<lbrakk>atom x1a \\<sharp> z;\n        atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace> z : b_of\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n     \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n                         \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "have \"\\<lbrace> z : x2a | x3a[x1a::=V_var z]\\<^sub>c\\<^sub>v \\<rbrace> = \\<lbrace> x1a : x2a  | x3a \\<rbrace>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> =\n    \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "using T_refined_type \\<tau>.fresh"], ["proof (prove)\nusing this:\n  atom x1a \\<sharp> z\n  atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n  ?a \\<sharp> \\<lbrace> ?x : ?b  | ?c \\<rbrace> =\n  ((?a \\<sharp> ?c \\<or> ?a \\<in> set [atom ?x]) \\<and> ?a \\<sharp> ?b)\n\ngoal (1 subgoal):\n 1. \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> =\n    \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "by auto"], ["proof (state)\nthis:\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> =\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a x3a z.\n       \\<lbrakk>atom x1a \\<sharp> z;\n        atom z \\<sharp> \\<lbrace> x1a : x2a  | x3a \\<rbrace>\\<rbrakk>\n       \\<Longrightarrow> \\<lbrace> z : b_of\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n     \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n                         \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrace> z : b_of\n                 \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                    \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> =\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "show  ?case"], ["proof (prove)\nusing this:\n  \\<lbrace> z : b_of\n                 \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                    \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace>\n  \\<lbrace> z : x2a  | x3a[x1a::=[ z ]\\<^sup>v]\\<^sub>c\\<^sub>v \\<rbrace> =\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n\ngoal (1 subgoal):\n 1. \\<lbrace> z : b_of\n                   \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                      \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n    \\<lbrace> x1a : x2a  | x3a \\<rbrace>", "by auto"], ["proof (state)\nthis:\n  \\<lbrace> z : b_of\n                 \\<lbrace> x1a : x2a  | x3a \\<rbrace>  | c_of\n                    \\<lbrace> x1a : x2a  | x3a \\<rbrace> z \\<rbrace> =\n  \\<lbrace> x1a : x2a  | x3a \\<rbrace>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_d_not_in:\n  assumes \"atom u2 \\<sharp> \\<Delta>'\" \n  shows   \"u2 \\<notin> fst ` setD \\<Delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD \\<Delta>'", "using assms"], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> \\<Delta>'\n\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD \\<Delta>'", "proof(induct \\<Delta>' rule: \\<Delta>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. atom u2 \\<sharp> []\\<^sub>\\<Delta> \\<Longrightarrow>\n    u2 \\<notin> fst ` setD []\\<^sub>\\<Delta>\n 2. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "case DNil"], ["proof (state)\nthis:\n  atom u2 \\<sharp> []\\<^sub>\\<Delta>\n\ngoal (2 subgoals):\n 1. atom u2 \\<sharp> []\\<^sub>\\<Delta> \\<Longrightarrow>\n    u2 \\<notin> fst ` setD []\\<^sub>\\<Delta>\n 2. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "then"], ["proof (chain)\npicking this:\n  atom u2 \\<sharp> []\\<^sub>\\<Delta>", "show ?case"], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> []\\<^sub>\\<Delta>\n\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD []\\<^sub>\\<Delta>", "by simp"], ["proof (state)\nthis:\n  u2 \\<notin> fst ` setD []\\<^sub>\\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "case (DCons u t \\<Delta>')"], ["proof (state)\nthis:\n  atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u2 \\<notin> fst ` setD \\<Delta>'\n  atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "hence *: \"atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u,t)\""], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u2 \\<notin> fst ` setD \\<Delta>'\n  atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u, t)", "by (simp add: fresh_def supp_DCons)"], ["proof (state)\nthis:\n  atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u, t)\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "hence \"u2 \\<notin> fst ` setD \\<Delta>'\""], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u, t)\n\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD \\<Delta>'", "using DCons"], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u, t)\n  atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n  u2 \\<notin> fst ` setD \\<Delta>'\n  atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\n\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD \\<Delta>'", "by auto"], ["proof (state)\nthis:\n  u2 \\<notin> fst ` setD \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "moreover"], ["proof (state)\nthis:\n  u2 \\<notin> fst ` setD \\<Delta>'\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "have \"u2 \\<noteq> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u2 \\<noteq> u", "using * fresh_Pair"], ["proof (prove)\nusing this:\n  atom u2 \\<sharp> \\<Delta>' \\<and> atom u2 \\<sharp> (u, t)\n  ?a \\<sharp> (?x, ?y) = (?a \\<sharp> ?x \\<and> ?a \\<sharp> ?y)\n\ngoal (1 subgoal):\n 1. u2 \\<noteq> u", "by (metis eq_fst_iff not_self_fresh)"], ["proof (state)\nthis:\n  u2 \\<noteq> u\n\ngoal (1 subgoal):\n 1. \\<And>u t \\<Delta>'.\n       \\<lbrakk>atom u2 \\<sharp> \\<Delta>' \\<Longrightarrow>\n                u2 \\<notin> fst ` setD \\<Delta>';\n        atom u2 \\<sharp> (u, t) #\\<^sub>\\<Delta> \\<Delta>'\\<rbrakk>\n       \\<Longrightarrow> u2 \\<notin> fst `\n                                     setD\n((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "ultimately"], ["proof (chain)\npicking this:\n  u2 \\<notin> fst ` setD \\<Delta>'\n  u2 \\<noteq> u", "show ?case"], ["proof (prove)\nusing this:\n  u2 \\<notin> fst ` setD \\<Delta>'\n  u2 \\<noteq> u\n\ngoal (1 subgoal):\n 1. u2 \\<notin> fst ` setD ((u, t) #\\<^sub>\\<Delta> \\<Delta>')", "by simp"], ["proof (state)\nthis:\n  u2 \\<notin> fst ` setD ((u, t) #\\<^sub>\\<Delta> \\<Delta>')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}