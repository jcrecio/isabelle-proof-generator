{"file_name": "/home/qj213/afp-2021-10-22/thys/Winding_Number_Eval/Missing_Topology.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Winding_Number_Eval", "problem_names": ["lemma open_times_image:\n  fixes S::\"'a::real_normed_field set\"\n  assumes \"open S\" \"c\\<noteq>0\"\n  shows \"open (((*) c) ` S)\"", "lemma image_linear_greaterThan:\n  fixes x::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"((\\<lambda>x. c*x+b) ` {x<..}) = (if c>0 then {c*x+b <..} else {..< c*x+b})\"", "lemma image_linear_lessThan:\n  fixes x::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"((\\<lambda>x. c*x+b) ` {..<x}) = (if c>0 then {..<c*x+b} else {c*x+b<..})\"", "lemma continuous_on_neq_split:\n  fixes f :: \"'a::linear_continuum_topology \\<Rightarrow> 'b::linorder_topology\"\n  assumes \"\\<forall>x\\<in>s. f x\\<noteq>y\" \"continuous_on s f\" \"connected s\"\n  shows \"(\\<forall>x\\<in>s. f x>y) \\<or> (\\<forall>x\\<in>s. f x<y)\"", "lemma\n  fixes f::\"'a::linorder_topology \\<Rightarrow> 'b::topological_space\"\n  assumes \"continuous_on {a..b} f\" \"a<b\"\n  shows continuous_on_at_left:\"continuous (at_left b) f\" \n    and continuous_on_at_right:\"continuous (at_right a) f\"", "lemma eventually_comp_filtermap:\n    \"eventually (P o f) F \\<longleftrightarrow> eventually P (filtermap f F)\"", "lemma eventually_uminus_at_top_at_bot:\n  fixes P::\"'a::{ordered_ab_group_add,linorder} \\<Rightarrow> bool\"\n  shows \"eventually (P o uminus) at_bot \\<longleftrightarrow> eventually P at_top\"\n    \"eventually (P o uminus) at_top \\<longleftrightarrow> eventually P at_bot\"", "lemma eventually_at_infinityI:\n  fixes P::\"'a::real_normed_vector \\<Rightarrow> bool\"\n  assumes \"\\<And>x. c \\<le> norm x \\<Longrightarrow> P x\"\n  shows \"eventually P at_infinity\"", "lemma eventually_at_bot_linorderI:\n  fixes c::\"'a::linorder\"\n  assumes \"\\<And>x. x \\<le> c \\<Longrightarrow> P x\"\n  shows \"eventually P at_bot\"", "lemma eventually_times_inverse_1:\n  fixes f::\"'a \\<Rightarrow> 'b::{field,t2_space}\"\n  assumes \"(f \\<longlongrightarrow> c) F\" \"c\\<noteq>0\"\n  shows \"\\<forall>\\<^sub>F x in F. inverse (f x) * f x = 1\"", "lemma filtermap_linear_at_within:\n  assumes \"bij f\" and cont: \"isCont f a\" and open_map: \"\\<And>S. open S \\<Longrightarrow> open (f`S)\"\n  shows \"filtermap f (at a within S) = at (f a) within f`S\"", "lemma filtermap_at_bot_linear_eq:\n  fixes c::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. x * c + b) at_bot = (if c>0 then at_bot else at_top)\"", "lemma filtermap_linear_at_left:\n  fixes c::\"'a::{linordered_field,linorder_topology,real_normed_field}\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. c*x+b) (at_left x) = (if c>0 then at_left (c*x+b) else at_right (c*x+b))\"", "lemma filtermap_linear_at_right:\n  fixes c::\"'a::{linordered_field,linorder_topology,real_normed_field}\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. c*x+b) (at_right x) = (if c>0 then at_right (c*x+b) else at_left (c*x+b))\"", "lemma filtermap_at_top_linear_eq:\n  fixes c::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. x * c + b) at_top = (if c>0 then at_top else at_bot)\"", "lemma filtermap_nhds_open_map:\n  assumes cont: \"isCont f a\"\n    and open_map: \"\\<And>S. open S \\<Longrightarrow> open (f`S)\"\n  shows \"filtermap f (nhds a) = nhds (f a)\"", "lemma filterlim_at_infinity_times:\n  fixes f :: \"'a \\<Rightarrow> 'b::real_normed_field\"\n  assumes \"filterlim f at_infinity F\" \"filterlim g at_infinity F\"\n  shows \"filterlim (\\<lambda>x. f x * g x) at_infinity F\"", "lemma filterlim_at_top_at_bot[elim]:\n  fixes f::\"'a \\<Rightarrow> 'b::unbounded_dense_linorder\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_top F\" and bot: \"filterlim f at_bot F\" and \"F\\<noteq>bot\"\n  shows False", "lemma filterlim_at_top_nhds[elim]:      \n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_top F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" and \"F\\<noteq>bot\"\n  shows False", "lemma filterlim_at_bot_nhds[elim]:      \n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_bot F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" and \"F\\<noteq>bot\"\n  shows False", "lemma filterlim_at_top_linear_iff:\n  fixes f::\"'a::linordered_field \\<Rightarrow> 'b\"\n  assumes \"c\\<noteq>0\"\n  shows \"(LIM x at_top. f (x * c + b) :> F2) \\<longleftrightarrow> (if c>0 then (LIM x at_top. f x :> F2) \n            else (LIM x at_bot. f x :> F2))\"", "lemma filterlim_at_bot_linear_iff:\n  fixes f::\"'a::linordered_field \\<Rightarrow> 'b\"\n  assumes \"c\\<noteq>0\"\n  shows \"(LIM x at_bot. f (x * c + b) :> F2) \\<longleftrightarrow> (if c>0 then (LIM x at_bot. f x :> F2) \n            else (LIM x at_top. f x :> F2)) \"", "lemma filterlim_tendsto_add_at_top_iff:\n  assumes f: \"(f \\<longlongrightarrow> c) F\"\n  shows \"(LIM x F. (f x + g x :: real) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_top)\"", "lemma filterlim_tendsto_add_at_bot_iff:\n  fixes c::real\n  assumes f: \"(f \\<longlongrightarrow> c) F\"\n  shows \"(LIM x F. f x + g x :> at_bot) \\<longleftrightarrow> (LIM x F. g x :> at_bot)\"", "lemma tendsto_inverse_0_at_infinity: \n    \"LIM x F. f x :> at_infinity \\<Longrightarrow> ((\\<lambda>x. inverse (f x) :: real) \\<longlongrightarrow> 0) F\"", "lemma filterlim_at_infinity_divide_iff:\n  fixes f::\"'a \\<Rightarrow> 'b::real_normed_field\"\n  assumes \"(f \\<longlongrightarrow> c) F\" \"c\\<noteq>0\"\n  shows \"(LIM x F. f x / g x :> at_infinity) \\<longleftrightarrow> (LIM x F. g x :> at 0)\"", "lemma filterlim_tendsto_pos_mult_at_top_iff:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"(f \\<longlongrightarrow> c) F\" and \"0 < c\"\n  shows \"(LIM x F. (f x * g x) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_top)\"", "lemma filterlim_tendsto_pos_mult_at_bot_iff:\n  fixes c :: real\n  assumes \"(f \\<longlongrightarrow> c) F\" \"0 < c\" \n  shows \"(LIM x F. f x * g x :> at_bot) \\<longleftrightarrow> filterlim g at_bot F\"", "lemma filterlim_tendsto_neg_mult_at_top_iff:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"(f \\<longlongrightarrow> c) F\" and \"c < 0\"\n  shows \"(LIM x F. (f x * g x) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_bot)\"", "lemma filterlim_tendsto_neg_mult_at_bot_iff:\n  fixes c :: real\n  assumes \"(f \\<longlongrightarrow> c) F\" \"0 > c\" \n  shows \"(LIM x F. f x * g x :> at_bot) \\<longleftrightarrow> filterlim g at_top F\"", "lemma Lim_add:\n  fixes f g::\"_ \\<Rightarrow> 'a::{t2_space,topological_monoid_add}\"\n  assumes \"\\<exists>y. (f \\<longlongrightarrow> y) F\" and \"\\<exists>y. (g \\<longlongrightarrow> y) F\" and \"F\\<noteq>bot\"\n  shows \"Lim F f + Lim F g = Lim F (\\<lambda>x. f x+g x)\"", "lemma uniformI1:\n  assumes \"e>0\" \"\\<And>x y. \\<lbrakk>x\\<in>S;y\\<in>S;dist x y<e\\<rbrakk> \\<Longrightarrow> x =y \"\n  shows \"uniform_discrete S\"", "lemma uniformI2:\n  assumes \"e>0\" \"\\<And>x y. \\<lbrakk>x\\<in>S;y\\<in>S;x\\<noteq>y\\<rbrakk> \\<Longrightarrow> dist x y\\<ge>e \"\n  shows \"uniform_discrete S\"", "lemma isolate_islimpt_iff:\"(x isolate S) \\<longleftrightarrow> (\\<not> (x islimpt S) \\<and> x\\<in>S)\"", "lemma isolate_dist_Ex_iff:\n  fixes x::\"'a::metric_space\"\n  shows \"x isolate S \\<longleftrightarrow> (x\\<in>S \\<and> (\\<exists>e>0. \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> y=x))\"", "lemma discrete_empty[simp]: \"discrete {}\"", "lemma uniform_discrete_empty[simp]: \"uniform_discrete {}\"", "lemma isolate_insert: \n  fixes x :: \"'a::t1_space\"\n  shows \"x isolate (insert a S) \\<longleftrightarrow> x isolate S \\<or> (x=a \\<and> \\<not> (x islimpt S))\"", "lemma uniform_discrete_imp_closed:\n  \"uniform_discrete S \\<Longrightarrow> closed S\"", "lemma uniform_discrete_imp_discrete:\n  \"uniform_discrete S \\<Longrightarrow> discrete S\"", "lemma isolate_subset:\"x isolate S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> x\\<in>T \\<Longrightarrow> x isolate T\"", "lemma discrete_subset[elim]: \"discrete S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> discrete T\"", "lemma uniform_discrete_subset[elim]: \"uniform_discrete S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> uniform_discrete T\"", "lemma continuous_on_discrete: \"discrete S \\<Longrightarrow> continuous_on S f\"", "lemma uniform_discrete_insert:\n  fixes S :: \"'a::euclidean_space set\"\n  shows \"uniform_discrete (insert a S) \\<longleftrightarrow> uniform_discrete S\"", "lemma discrete_compact_finite_iff:\n  fixes S :: \"'a::t1_space set\"\n  shows \"discrete S \\<and> compact S \\<longleftrightarrow> finite S\"", "lemma uniform_discrete_finite_iff:\n  fixes S :: \"'a::heine_borel set\"\n  shows \"uniform_discrete S \\<and> bounded S \\<longleftrightarrow> finite S\"", "lemma uniform_discrete_image_scale:\n  fixes f :: \"'a::euclidean_space \\<Rightarrow> 'b::euclidean_space\"\n  assumes \"uniform_discrete S\" and dist:\"\\<forall>x\\<in>S. \\<forall>y\\<in>S. dist x y = c * dist (f x) (f y)\"\n  shows \"uniform_discrete (f ` S)\""], "translations": [["", "lemma open_times_image:\n  fixes S::\"'a::real_normed_field set\"\n  assumes \"open S\" \"c\\<noteq>0\"\n  shows \"open (((*) c) ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "let ?f = \"\\<lambda>x. x/c\" and ?g=\"((*) c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "have \"continuous_on UNIV ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. x / c)", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. continuous_on UNIV (\\<lambda>x. x / c)", "by (auto intro:continuous_intros)"], ["proof (state)\nthis:\n  continuous_on UNIV (\\<lambda>x. x / c)\n\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "then"], ["proof (chain)\npicking this:\n  continuous_on UNIV (\\<lambda>x. x / c)", "have \"open (?f -` S)\""], ["proof (prove)\nusing this:\n  continuous_on UNIV (\\<lambda>x. x / c)\n\ngoal (1 subgoal):\n 1. open ((\\<lambda>x. x / c) -` S)", "using \\<open>open S\\<close>"], ["proof (prove)\nusing this:\n  continuous_on UNIV (\\<lambda>x. x / c)\n  open S\n\ngoal (1 subgoal):\n 1. open ((\\<lambda>x. x / c) -` S)", "by (auto elim:open_vimage)"], ["proof (state)\nthis:\n  open ((\\<lambda>x. x / c) -` S)\n\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "moreover"], ["proof (state)\nthis:\n  open ((\\<lambda>x. x / c) -` S)\n\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "have \"?g ` S = ?f -` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (*) c ` S = (\\<lambda>x. x / c) -` S", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (*) c ` S = (\\<lambda>x. x / c) -` S", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<noteq> (0::'a); x / c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (*) c ` S", "using image_iff"], ["proof (prove)\nusing this:\n  (?z \\<in> ?f ` ?A) = (\\<exists>x\\<in>?A. ?z = ?f x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>c \\<noteq> (0::'a); x / c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (*) c ` S", "by fastforce"], ["proof (state)\nthis:\n  (*) c ` S = (\\<lambda>x. x / c) -` S\n\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "ultimately"], ["proof (chain)\npicking this:\n  open ((\\<lambda>x. x / c) -` S)\n  (*) c ` S = (\\<lambda>x. x / c) -` S", "show ?thesis"], ["proof (prove)\nusing this:\n  open ((\\<lambda>x. x / c) -` S)\n  (*) c ` S = (\\<lambda>x. x / c) -` S\n\ngoal (1 subgoal):\n 1. open ((*) c ` S)", "by auto"], ["proof (state)\nthis:\n  open ((*) c ` S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma image_linear_greaterThan:\n  fixes x::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"((\\<lambda>x. c*x+b) ` {x<..}) = (if c>0 then {c*x+b <..} else {..< c*x+b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} =\n    (if (0::'a) < c then {c * x + b<..} else {..<c * x + b})", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} =\n    (if (0::'a) < c then {c * x + b<..} else {..<c * x + b})", "apply (auto simp add:image_iff field_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(0::'a) < c; b + c * x < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{x<..}. xa = b + x * c\n 2. \\<And>xa.\n       \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c;\n        xa < b + c * x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{x<..}. xa = b + x * c", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0::'a) < c; b + c * x < y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>{x<..}. y = b + x * c", "by (rule bexI[where x=\"(y-b)/c\"],auto simp add:field_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c;\n        xa < b + c * x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{x<..}. xa = b + x * c", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c; y < b + c * x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>{x<..}. y = b + x * c", "by (rule bexI[where x=\"(y-b)/c\"],auto simp add:field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma image_linear_lessThan:\n  fixes x::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"((\\<lambda>x. c*x+b) ` {..<x}) = (if c>0 then {..<c*x+b} else {c*x+b<..})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} =\n    (if (0::'a) < c then {..<c * x + b} else {c * x + b<..})", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} =\n    (if (0::'a) < c then {..<c * x + b} else {c * x + b<..})", "apply (auto simp add:image_iff field_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>(0::'a) < c; xa < b + c * x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{..<x}. xa = b + x * c\n 2. \\<And>xa.\n       \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c;\n        b + c * x < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{..<x}. xa = b + x * c", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0::'a) < c; y < b + c * x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>{..<x}. y = b + x * c", "by (rule bexI[where x=\"(y-b)/c\"],auto simp add:field_simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c;\n        b + c * x < xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x\\<in>{..<x}. xa = b + x * c", "subgoal for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c \\<noteq> (0::'a); \\<not> (0::'a) < c; b + c * x < y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x\\<in>{..<x}. y = b + x * c", "by (rule bexI[where x=\"(y-b)/c\"],auto simp add:field_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma continuous_on_neq_split:\n  fixes f :: \"'a::linear_continuum_topology \\<Rightarrow> 'b::linorder_topology\"\n  assumes \"\\<forall>x\\<in>s. f x\\<noteq>y\" \"continuous_on s f\" \"connected s\"\n  shows \"(\\<forall>x\\<in>s. f x>y) \\<or> (\\<forall>x\\<in>s. f x<y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "fix aa :: 'a and aaa :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "have \"y \\<notin> f ` s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<notin> f ` s", "using assms(1)"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>s. f x \\<noteq> y\n\ngoal (1 subgoal):\n 1. y \\<notin> f ` s", "by blast"], ["proof (state)\nthis:\n  y \\<notin> f ` s\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "then"], ["proof (chain)\npicking this:\n  y \\<notin> f ` s", "have \"(aa \\<notin> s \\<or> y < f aa) \\<or> aaa \\<notin> s \\<or> f aaa < y\""], ["proof (prove)\nusing this:\n  y \\<notin> f ` s\n\ngoal (1 subgoal):\n 1. (aa \\<notin> s \\<or> y < f aa) \\<or> aaa \\<notin> s \\<or> f aaa < y", "by (meson Topological_Spaces.connected_continuous_image assms(2) assms(3) \n          connectedD_interval image_eqI linorder_not_le)"], ["proof (state)\nthis:\n  (aa \\<notin> s \\<or> y < f aa) \\<or> aaa \\<notin> s \\<or> f aaa < y\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "}"], ["proof (state)\nthis:\n  (?aa2 \\<notin> s \\<or> y < f ?aa2) \\<or>\n  ?aaa2 \\<notin> s \\<or> f ?aaa2 < y\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "then"], ["proof (chain)\npicking this:\n  (?aa2 \\<notin> s \\<or> y < f ?aa2) \\<or>\n  ?aaa2 \\<notin> s \\<or> f ?aaa2 < y", "show ?thesis"], ["proof (prove)\nusing this:\n  (?aa2 \\<notin> s \\<or> y < f ?aa2) \\<or>\n  ?aaa2 \\<notin> s \\<or> f ?aaa2 < y\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)", "by blast"], ["proof (state)\nthis:\n  (\\<forall>x\\<in>s. y < f x) \\<or> (\\<forall>x\\<in>s. f x < y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  fixes f::\"'a::linorder_topology \\<Rightarrow> 'b::topological_space\"\n  assumes \"continuous_on {a..b} f\" \"a<b\"\n  shows continuous_on_at_left:\"continuous (at_left b) f\" \n    and continuous_on_at_right:\"continuous (at_right a) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (at_left b) f &&& continuous (at_right a) f", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "have \"at b within {..a} = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "have \"closed {..a}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed {..a}", "by auto"], ["proof (state)\nthis:\n  closed {..a}\n\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "then"], ["proof (chain)\npicking this:\n  closed {..a}", "have \"closure ({..a} - {b}) = {..a}\""], ["proof (prove)\nusing this:\n  closed {..a}\n\ngoal (1 subgoal):\n 1. closure ({..a} - {b}) = {..a}", "by (simp add: assms(2) not_le)"], ["proof (state)\nthis:\n  closure ({..a} - {b}) = {..a}\n\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "then"], ["proof (chain)\npicking this:\n  closure ({..a} - {b}) = {..a}", "have \"b\\<notin>closure ({..a} - {b})\""], ["proof (prove)\nusing this:\n  closure ({..a} - {b}) = {..a}\n\ngoal (1 subgoal):\n 1. b \\<notin> closure ({..a} - {b})", "using \\<open>a<b\\<close>"], ["proof (prove)\nusing this:\n  closure ({..a} - {b}) = {..a}\n  a < b\n\ngoal (1 subgoal):\n 1. b \\<notin> closure ({..a} - {b})", "by auto"], ["proof (state)\nthis:\n  b \\<notin> closure ({..a} - {b})\n\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "then"], ["proof (chain)\npicking this:\n  b \\<notin> closure ({..a} - {b})", "show ?thesis"], ["proof (prove)\nusing this:\n  b \\<notin> closure ({..a} - {b})\n\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "using at_within_eq_bot_iff"], ["proof (prove)\nusing this:\n  b \\<notin> closure ({..a} - {b})\n  (at ?c within ?A = bot) = (?c \\<notin> closure (?A - {?c}))\n\ngoal (1 subgoal):\n 1. at b within {..a} = bot", "by auto"], ["proof (state)\nthis:\n  at b within {..a} = bot\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  at b within {..a} = bot\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  at b within {..a} = bot", "have \"(f \\<longlongrightarrow> f b) (at b within {..a})\""], ["proof (prove)\nusing this:\n  at b within {..a} = bot\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {..a})", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at b within {..a})\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "moreover"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at b within {..a})\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "have \"(f \\<longlongrightarrow> f b) (at b within {a..b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {a..b})", "using assms"], ["proof (prove)\nusing this:\n  continuous_on {a..b} f\n  a < b\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {a..b})", "unfolding continuous_on"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{a..b}. (f \\<longlongrightarrow> f x) (at x within {a..b})\n  a < b\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {a..b})", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at b within {a..b})\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "moreover"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at b within {a..b})\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "have \"{..a} \\<union> {a..b} = {..b}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {..a} \\<union> {a..b} = {..b}", "using \\<open>a<b\\<close>"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. {..a} \\<union> {a..b} = {..b}", "by auto"], ["proof (state)\nthis:\n  {..a} \\<union> {a..b} = {..b}\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "ultimately"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f b) (at b within {..a})\n  (f \\<longlongrightarrow> f b) (at b within {a..b})\n  {..a} \\<union> {a..b} = {..b}", "have \"(f \\<longlongrightarrow> f b) (at b within {..b})\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f b) (at b within {..a})\n  (f \\<longlongrightarrow> f b) (at b within {a..b})\n  {..a} \\<union> {a..b} = {..b}\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {..b})", "using Lim_Un[of f \"f b\" b \"{..a}\" \"{a..b}\"]"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f b) (at b within {..a})\n  (f \\<longlongrightarrow> f b) (at b within {a..b})\n  {..a} \\<union> {a..b} = {..b}\n  \\<lbrakk>(f \\<longlongrightarrow> f b) (at b within {..a});\n   (f \\<longlongrightarrow> f b) (at b within {a..b})\\<rbrakk>\n  \\<Longrightarrow> (f \\<longlongrightarrow> f b)\n                     (at b within {..a} \\<union> {a..b})\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at b within {..b})", "by presburger"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at b within {..b})\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f b) (at b within {..b})", "have \"(f \\<longlongrightarrow> f b) (at b within {..<b})\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f b) (at b within {..b})\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f b) (at_left b)", "apply (elim tendsto_within_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {..<b} \\<subseteq> {..b}", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f b) (at_left b)\n\ngoal (2 subgoals):\n 1. continuous (at_left b) f\n 2. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f b) (at_left b)", "show \"continuous (at_left b) f\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f b) (at_left b)\n\ngoal (1 subgoal):\n 1. continuous (at_left b) f", "using continuous_within"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f b) (at_left b)\n  continuous (at ?x within ?s) ?f =\n  (?f \\<longlongrightarrow> ?f ?x) (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. continuous (at_left b) f", "by auto"], ["proof (state)\nthis:\n  continuous (at_left b) f\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "have \"at a within {b..} = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "have \"closed {b..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed {b..}", "by auto"], ["proof (state)\nthis:\n  closed {b..}\n\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "then"], ["proof (chain)\npicking this:\n  closed {b..}", "have \"closure ({b..} - {a}) = {b..}\""], ["proof (prove)\nusing this:\n  closed {b..}\n\ngoal (1 subgoal):\n 1. closure ({b..} - {a}) = {b..}", "by (simp add: assms(2) not_le)"], ["proof (state)\nthis:\n  closure ({b..} - {a}) = {b..}\n\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "then"], ["proof (chain)\npicking this:\n  closure ({b..} - {a}) = {b..}", "have \"a\\<notin>closure ({b..} - {a})\""], ["proof (prove)\nusing this:\n  closure ({b..} - {a}) = {b..}\n\ngoal (1 subgoal):\n 1. a \\<notin> closure ({b..} - {a})", "using \\<open>a<b\\<close>"], ["proof (prove)\nusing this:\n  closure ({b..} - {a}) = {b..}\n  a < b\n\ngoal (1 subgoal):\n 1. a \\<notin> closure ({b..} - {a})", "by auto"], ["proof (state)\nthis:\n  a \\<notin> closure ({b..} - {a})\n\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "then"], ["proof (chain)\npicking this:\n  a \\<notin> closure ({b..} - {a})", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<notin> closure ({b..} - {a})\n\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "using at_within_eq_bot_iff"], ["proof (prove)\nusing this:\n  a \\<notin> closure ({b..} - {a})\n  (at ?c within ?A = bot) = (?c \\<notin> closure (?A - {?c}))\n\ngoal (1 subgoal):\n 1. at a within {b..} = bot", "by auto"], ["proof (state)\nthis:\n  at a within {b..} = bot\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  at a within {b..} = bot\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  at a within {b..} = bot", "have \"(f \\<longlongrightarrow> f a) (at a within {b..})\""], ["proof (prove)\nusing this:\n  at a within {b..} = bot\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {b..})", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at a within {b..})\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "moreover"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at a within {b..})\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "have \"(f \\<longlongrightarrow> f a) (at a within {a..b})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {a..b})", "using assms"], ["proof (prove)\nusing this:\n  continuous_on {a..b} f\n  a < b\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {a..b})", "unfolding continuous_on"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>{a..b}. (f \\<longlongrightarrow> f x) (at x within {a..b})\n  a < b\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {a..b})", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at a within {a..b})\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "moreover"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at a within {a..b})\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "have \"{b..} \\<union> {a..b} = {a..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {b..} \\<union> {a..b} = {a..}", "using \\<open>a<b\\<close>"], ["proof (prove)\nusing this:\n  a < b\n\ngoal (1 subgoal):\n 1. {b..} \\<union> {a..b} = {a..}", "by auto"], ["proof (state)\nthis:\n  {b..} \\<union> {a..b} = {a..}\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "ultimately"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f a) (at a within {b..})\n  (f \\<longlongrightarrow> f a) (at a within {a..b})\n  {b..} \\<union> {a..b} = {a..}", "have \"(f \\<longlongrightarrow> f a) (at a within {a..})\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f a) (at a within {b..})\n  (f \\<longlongrightarrow> f a) (at a within {a..b})\n  {b..} \\<union> {a..b} = {a..}\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {a..})", "using Lim_Un[of f \"f a\" a \"{b..}\" \"{a..b}\"]"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f a) (at a within {b..})\n  (f \\<longlongrightarrow> f a) (at a within {a..b})\n  {b..} \\<union> {a..b} = {a..}\n  \\<lbrakk>(f \\<longlongrightarrow> f a) (at a within {b..});\n   (f \\<longlongrightarrow> f a) (at a within {a..b})\\<rbrakk>\n  \\<Longrightarrow> (f \\<longlongrightarrow> f a)\n                     (at a within {b..} \\<union> {a..b})\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at a within {a..})", "by presburger"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at a within {a..})\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f a) (at a within {a..})", "have \"(f \\<longlongrightarrow> f a) (at a within {a<..})\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f a) (at a within {a..})\n\ngoal (1 subgoal):\n 1. (f \\<longlongrightarrow> f a) (at_right a)", "apply (elim tendsto_within_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {a<..} \\<subseteq> {a..}", "by auto"], ["proof (state)\nthis:\n  (f \\<longlongrightarrow> f a) (at_right a)\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "then"], ["proof (chain)\npicking this:\n  (f \\<longlongrightarrow> f a) (at_right a)", "show \"continuous (at_right a) f\""], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f a) (at_right a)\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "using continuous_within"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> f a) (at_right a)\n  continuous (at ?x within ?s) ?f =\n  (?f \\<longlongrightarrow> ?f ?x) (at ?x within ?s)\n\ngoal (1 subgoal):\n 1. continuous (at_right a) f", "by auto"], ["proof (state)\nthis:\n  continuous (at_right a) f\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>More about @{term eventually}\\<close>"], ["", "lemma eventually_comp_filtermap:\n    \"eventually (P o f) F \\<longleftrightarrow> eventually P (filtermap f F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually (P \\<circ> f) F = eventually P (filtermap f F)", "unfolding comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<^sub>F x in F. P (f x)) = eventually P (filtermap f F)", "using eventually_filtermap"], ["proof (prove)\nusing this:\n  eventually ?P (filtermap ?f ?F) = (\\<forall>\\<^sub>F x in ?F. ?P (?f x))\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<^sub>F x in F. P (f x)) = eventually P (filtermap f F)", "by auto"], ["", "lemma eventually_uminus_at_top_at_bot:\n  fixes P::\"'a::{ordered_ab_group_add,linorder} \\<Rightarrow> bool\"\n  shows \"eventually (P o uminus) at_bot \\<longleftrightarrow> eventually P at_top\"\n    \"eventually (P o uminus) at_top \\<longleftrightarrow> eventually P at_bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually (P \\<circ> uminus) at_bot = eventually P at_top &&&\n    eventually (P \\<circ> uminus) at_top = eventually P at_bot", "unfolding eventually_comp_filtermap"], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually P (filtermap uminus at_bot) = eventually P at_top &&&\n    eventually P (filtermap uminus at_top) = eventually P at_bot", "by (fold at_top_mirror at_bot_mirror,auto)"], ["", "lemma eventually_at_infinityI:\n  fixes P::\"'a::real_normed_vector \\<Rightarrow> bool\"\n  assumes \"\\<And>x. c \\<le> norm x \\<Longrightarrow> P x\"\n  shows \"eventually P at_infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually P at_infinity", "unfolding eventually_at_infinity"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. \\<forall>x. b \\<le> norm x \\<longrightarrow> P x", "using assms"], ["proof (prove)\nusing this:\n  c \\<le> norm ?x \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. \\<exists>b. \\<forall>x. b \\<le> norm x \\<longrightarrow> P x", "by auto"], ["", "lemma eventually_at_bot_linorderI:\n  fixes c::\"'a::linorder\"\n  assumes \"\\<And>x. x \\<le> c \\<Longrightarrow> P x\"\n  shows \"eventually P at_bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eventually P at_bot", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<le> c \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. eventually P at_bot", "by (auto simp: eventually_at_bot_linorder)"], ["", "lemma eventually_times_inverse_1:\n  fixes f::\"'a \\<Rightarrow> 'b::{field,t2_space}\"\n  assumes \"(f \\<longlongrightarrow> c) F\" \"c\\<noteq>0\"\n  shows \"\\<forall>\\<^sub>F x in F. inverse (f x) * f x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)", "have \"\\<forall>\\<^sub>F x in F. f x\\<noteq>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x \\<noteq> (0::'b)", "using assms tendsto_imp_eventually_ne"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> c) F\n  c \\<noteq> (0::'b)\n  \\<lbrakk>(?f \\<longlongrightarrow> ?c) ?F; ?c \\<noteq> ?c'\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F z in ?F. ?f z \\<noteq> ?c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x \\<noteq> (0::'b)", "by blast"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. f x \\<noteq> (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x \\<noteq> (0::'b)\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)", "apply (elim eventually_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       f x \\<noteq> (0::'b) \\<Longrightarrow> inverse (f x) * f x = (1::'b)", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>More about @{term filtermap}\\<close>"], ["", "lemma filtermap_linear_at_within:\n  assumes \"bij f\" and cont: \"isCont f a\" and open_map: \"\\<And>S. open S \\<Longrightarrow> open (f`S)\"\n  shows \"filtermap f (at a within S) = at (f a) within f`S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap f (at a within S) = at (f a) within f ` S", "unfolding filter_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       eventually P (filtermap f (at a within S)) =\n       eventually P (at (f a) within f ` S)", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (at a within S)) \\<Longrightarrow>\n       eventually P (at (f a) within f ` S)\n 2. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "fix P"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (at a within S)) \\<Longrightarrow>\n       eventually P (at (f a) within f ` S)\n 2. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "assume \"eventually P (filtermap f (at a within S))\""], ["proof (state)\nthis:\n  eventually P (filtermap f (at a within S))\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (at a within S)) \\<Longrightarrow>\n       eventually P (at (f a) within f ` S)\n 2. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  eventually P (filtermap f (at a within S))", "obtain T where \"open T\" \"a \\<in> T\" and impP:\"\\<forall>x\\<in>T. x\\<noteq>a \\<longrightarrow> x\\<in>S\\<longrightarrow> P (f x)\""], ["proof (prove)\nusing this:\n  eventually P (filtermap f (at a within S))\n\ngoal (1 subgoal):\n 1. (\\<And>T.\n        \\<lbrakk>open T; a \\<in> T;\n         \\<forall>x\\<in>T.\n            x \\<noteq> a \\<longrightarrow>\n            x \\<in> S \\<longrightarrow> P (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_filtermap eventually_at_topological)"], ["proof (state)\nthis:\n  open T\n  a \\<in> T\n  \\<forall>x\\<in>T.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (at a within S)) \\<Longrightarrow>\n       eventually P (at (f a) within f ` S)\n 2. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  open T\n  a \\<in> T\n  \\<forall>x\\<in>T.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)", "show \"eventually P (at (f a) within f ` S)\""], ["proof (prove)\nusing this:\n  open T\n  a \\<in> T\n  \\<forall>x\\<in>T.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (1 subgoal):\n 1. eventually P (at (f a) within f ` S)", "unfolding eventually_at_topological"], ["proof (prove)\nusing this:\n  open T\n  a \\<in> T\n  \\<forall>x\\<in>T.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>Sa.\n       open Sa \\<and>\n       f a \\<in> Sa \\<and>\n       (\\<forall>x\\<in>Sa.\n           x \\<noteq> f a \\<longrightarrow>\n           x \\<in> f ` S \\<longrightarrow> P x)", "apply (intro exI[of _ \"f`T\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>open T; a \\<in> T;\n     \\<forall>x\\<in>T.\n        x \\<noteq> a \\<longrightarrow>\n        x \\<in> S \\<longrightarrow> P (f x)\\<rbrakk>\n    \\<Longrightarrow> open (f ` T) \\<and>\n                      f a \\<in> f ` T \\<and>\n                      (\\<forall>x\\<in>f ` T.\n                          x \\<noteq> f a \\<longrightarrow>\n                          x \\<in> f ` S \\<longrightarrow> P x)", "using \\<open>bij f\\<close> open_map"], ["proof (prove)\nusing this:\n  bij f\n  open ?S \\<Longrightarrow> open (f ` ?S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>open T; a \\<in> T;\n     \\<forall>x\\<in>T.\n        x \\<noteq> a \\<longrightarrow>\n        x \\<in> S \\<longrightarrow> P (f x)\\<rbrakk>\n    \\<Longrightarrow> open (f ` T) \\<and>\n                      f a \\<in> f ` T \\<and>\n                      (\\<forall>x\\<in>f ` T.\n                          x \\<noteq> f a \\<longrightarrow>\n                          x \\<in> f ` S \\<longrightarrow> P x)", "by (metis bij_pointE imageE imageI)"], ["proof (state)\nthis:\n  eventually P (at (f a) within f ` S)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "fix P"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "assume \"eventually P (at (f a) within f ` S)\""], ["proof (state)\nthis:\n  eventually P (at (f a) within f ` S)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  eventually P (at (f a) within f ` S)", "obtain T1 where \"open T1\" \"f a \\<in> T1\" and impP:\"\\<forall>x\\<in>T1. x\\<noteq>f a \\<longrightarrow> x\\<in>f`S\\<longrightarrow> P (x)\""], ["proof (prove)\nusing this:\n  eventually P (at (f a) within f ` S)\n\ngoal (1 subgoal):\n 1. (\\<And>T1.\n        \\<lbrakk>open T1; f a \\<in> T1;\n         \\<forall>x\\<in>T1.\n            x \\<noteq> f a \\<longrightarrow>\n            x \\<in> f ` S \\<longrightarrow> P x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding eventually_at_topological"], ["proof (prove)\nusing this:\n  \\<exists>Sa.\n     open Sa \\<and>\n     f a \\<in> Sa \\<and>\n     (\\<forall>x\\<in>Sa.\n         x \\<noteq> f a \\<longrightarrow>\n         x \\<in> f ` S \\<longrightarrow> P x)\n\ngoal (1 subgoal):\n 1. (\\<And>T1.\n        \\<lbrakk>open T1; f a \\<in> T1;\n         \\<forall>x\\<in>T1.\n            x \\<noteq> f a \\<longrightarrow>\n            x \\<in> f ` S \\<longrightarrow> P x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  open T1\n  f a \\<in> T1\n  \\<forall>x\\<in>T1.\n     x \\<noteq> f a \\<longrightarrow> x \\<in> f ` S \\<longrightarrow> P x\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  open T1\n  f a \\<in> T1\n  \\<forall>x\\<in>T1.\n     x \\<noteq> f a \\<longrightarrow> x \\<in> f ` S \\<longrightarrow> P x", "obtain T2 where \"open T2\" \"a \\<in> T2\" \"(\\<forall>x'\\<in>T2. f x' \\<in> T1)\""], ["proof (prove)\nusing this:\n  open T1\n  f a \\<in> T1\n  \\<forall>x\\<in>T1.\n     x \\<noteq> f a \\<longrightarrow> x \\<in> f ` S \\<longrightarrow> P x\n\ngoal (1 subgoal):\n 1. (\\<And>T2.\n        \\<lbrakk>open T2; a \\<in> T2;\n         \\<forall>x'\\<in>T2. f x' \\<in> T1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cont[unfolded continuous_at_open,rule_format,of T1]"], ["proof (prove)\nusing this:\n  open T1\n  f a \\<in> T1\n  \\<forall>x\\<in>T1.\n     x \\<noteq> f a \\<longrightarrow> x \\<in> f ` S \\<longrightarrow> P x\n  open T1 \\<and> f a \\<in> T1 \\<Longrightarrow>\n  \\<exists>s.\n     open s \\<and> a \\<in> s \\<and> (\\<forall>x'\\<in>s. f x' \\<in> T1)\n\ngoal (1 subgoal):\n 1. (\\<And>T2.\n        \\<lbrakk>open T2; a \\<in> T2;\n         \\<forall>x'\\<in>T2. f x' \\<in> T1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  open T2\n  a \\<in> T2\n  \\<forall>x'\\<in>T2. f x' \\<in> T1\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  open T2\n  a \\<in> T2\n  \\<forall>x'\\<in>T2. f x' \\<in> T1", "have \"\\<forall>x\\<in>T2. x\\<noteq>a \\<longrightarrow> x\\<in>S\\<longrightarrow> P (f x)\""], ["proof (prove)\nusing this:\n  open T2\n  a \\<in> T2\n  \\<forall>x'\\<in>T2. f x' \\<in> T1\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>T2.\n       x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)", "using impP"], ["proof (prove)\nusing this:\n  open T2\n  a \\<in> T2\n  \\<forall>x'\\<in>T2. f x' \\<in> T1\n  \\<forall>x\\<in>T1.\n     x \\<noteq> f a \\<longrightarrow> x \\<in> f ` S \\<longrightarrow> P x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>T2.\n       x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)", "by (metis assms(1) bij_pointE imageI)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>T2.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (at (f a) within f ` S) \\<Longrightarrow>\n       eventually P (filtermap f (at a within S))", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>T2.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)", "show \"eventually P (filtermap f (at a within S))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>T2.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (1 subgoal):\n 1. eventually P (filtermap f (at a within S))", "unfolding eventually_filtermap eventually_at_topological"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>T2.\n     x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>Sa.\n       open Sa \\<and>\n       a \\<in> Sa \\<and>\n       (\\<forall>x\\<in>Sa.\n           x \\<noteq> a \\<longrightarrow>\n           x \\<in> S \\<longrightarrow> P (f x))", "apply (intro exI[of _ T2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>T2.\n       x \\<noteq> a \\<longrightarrow>\n       x \\<in> S \\<longrightarrow> P (f x) \\<Longrightarrow>\n    open T2 \\<and>\n    a \\<in> T2 \\<and>\n    (\\<forall>x\\<in>T2.\n        x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x))", "using \\<open>open T2\\<close> \\<open>a \\<in> T2\\<close>"], ["proof (prove)\nusing this:\n  open T2\n  a \\<in> T2\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>T2.\n       x \\<noteq> a \\<longrightarrow>\n       x \\<in> S \\<longrightarrow> P (f x) \\<Longrightarrow>\n    open T2 \\<and>\n    a \\<in> T2 \\<and>\n    (\\<forall>x\\<in>T2.\n        x \\<noteq> a \\<longrightarrow> x \\<in> S \\<longrightarrow> P (f x))", "by auto"], ["proof (state)\nthis:\n  eventually P (filtermap f (at a within S))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filtermap_at_bot_linear_eq:\n  fixes c::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. x * c + b) at_bot = (if c>0 then at_bot else at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "proof (cases \"c>0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "case True"], ["proof (state)\nthis:\n  (0::'a) < c\n\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "then"], ["proof (chain)\npicking this:\n  (0::'a) < c", "have \"filtermap (\\<lambda>x. x * c + b) at_bot = at_bot\""], ["proof (prove)\nusing this:\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot = at_bot", "apply (intro filtermap_fun_inverse[of \"\\<lambda>x. (x-b) / c\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_bot. (x - b) / c :> at_bot\n 2. (0::'a) < c \\<Longrightarrow> LIM x at_bot. x * c + b :> at_bot\n 3. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_bot. (x - b) / c :> at_bot", "unfolding eventually_at_bot_linorder filterlim_at_bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<le>N. (n - b) / c \\<le> Z", "by (auto simp add: field_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_bot. x * c + b :> at_bot\n 2. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_bot. x * c + b :> at_bot", "unfolding eventually_at_bot_linorder filterlim_at_bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<le>N. n * c + b \\<le> Z", "by (metis mult.commute real_affinity_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_bot\n\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "then"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_bot", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_bot\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "using \\<open>c>0\\<close>"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_bot\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_bot =\n  (if (0::'a) < c then at_bot else at_top)\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "case False"], ["proof (state)\nthis:\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "then"], ["proof (chain)\npicking this:\n  \\<not> (0::'a) < c", "have \"c<0\""], ["proof (prove)\nusing this:\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. c < (0::'a)", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (0::'a) < c\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. c < (0::'a)", "by auto"], ["proof (state)\nthis:\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "then"], ["proof (chain)\npicking this:\n  c < (0::'a)", "have \"filtermap (\\<lambda>x. x * c + b) at_bot = at_top\""], ["proof (prove)\nusing this:\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot = at_top", "apply (intro filtermap_fun_inverse[of \"\\<lambda>x. (x-b) / c\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_top. (x - b) / c :> at_bot\n 2. c < (0::'a) \\<Longrightarrow> LIM x at_bot. x * c + b :> at_top\n 3. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_top. (x - b) / c :> at_bot", "unfolding eventually_at_top_linorder filterlim_at_bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<ge>N. (n - b) / c \\<le> Z", "by (meson le_diff_eq neg_divide_le_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_bot. x * c + b :> at_top\n 2. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_bot. x * c + b :> at_top", "unfolding eventually_at_bot_linorder filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<le>N. Z \\<le> n * c + b", "using \\<open>c < 0\\<close>"], ["proof (prove)\nusing this:\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<le>N. Z \\<le> n * c + b", "by (meson False diff_le_eq le_divide_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_top\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "then"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_top", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_top\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "using \\<open>c<0\\<close>"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_bot = at_top\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_bot =\n    (if (0::'a) < c then at_bot else at_top)", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_bot =\n  (if (0::'a) < c then at_bot else at_top)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filtermap_linear_at_left:\n  fixes c::\"'a::{linordered_field,linorder_topology,real_normed_field}\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. c*x+b) (at_left x) = (if c>0 then at_left (c*x+b) else at_right (c*x+b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "let ?f = \"\\<lambda>x. c*x+b\""], ["proof (state)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "have \"filtermap (\\<lambda>x. c*x+b) (at_left x) = (at (?f x) within ?f ` {..<x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "proof (subst filtermap_linear_at_within)"], ["proof (state)\ngoal (4 subgoals):\n 1. bij (\\<lambda>x. c * x + b)\n 2. isCont (\\<lambda>x. c * x + b) x\n 3. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 4. at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "show \"bij ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (\\<lambda>x. c * x + b)", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. bij (\\<lambda>x. c * x + b)", "by (auto intro!: o_bij[of \"\\<lambda>x. (x-b)/c\"])"], ["proof (state)\nthis:\n  bij (\\<lambda>x. c * x + b)\n\ngoal (3 subgoals):\n 1. isCont (\\<lambda>x. c * x + b) x\n 2. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 3. at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "show \"isCont ?f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. c * x + b) x", "by auto"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. c * x + b) x\n\ngoal (2 subgoals):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 2. at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "show \"\\<And>S. open S \\<Longrightarrow> open (?f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)", "using open_times_image[OF _ \\<open>c\\<noteq>0\\<close>,THEN open_translation,of _ b]"], ["proof (prove)\nusing this:\n  open ?S1 \\<Longrightarrow> open ((+) b ` (*) c ` ?S1)\n\ngoal (1 subgoal):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)", "by (simp add:image_image add.commute)"], ["proof (state)\nthis:\n  open ?S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` ?S)\n\ngoal (1 subgoal):\n 1. at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "show \"at (?f x) within ?f ` {..<x} = at (?f x) within ?f ` {..<x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {..<x}", "by simp"], ["proof (state)\nthis:\n  at (c * x + b) within (\\<lambda>x. c * x + b) ` {..<x} = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {..<x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_left x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {..<x}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "moreover"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_left x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {..<x}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "have \"?f ` {..<x} =  {..<?f x}\" when \"c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}", "using image_linear_lessThan[OF \\<open>c\\<noteq>0\\<close>,of b x] that"], ["proof (prove)\nusing this:\n  (\\<lambda>x. c * x + b) ` {..<x} =\n  (if (0::'a) < c then {..<c * x + b} else {c * x + b<..})\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}", "by auto"], ["proof (state)\nthis:\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "moreover"], ["proof (state)\nthis:\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "have \"?f ` {..<x} =  {?f x<..}\" when \"\\<not> c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} = {c * x + b<..}", "using image_linear_lessThan[OF \\<open>c\\<noteq>0\\<close>,of b x] that"], ["proof (prove)\nusing this:\n  (\\<lambda>x. c * x + b) ` {..<x} =\n  (if (0::'a) < c then {..<c * x + b} else {c * x + b<..})\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {..<x} = {c * x + b<..}", "by auto"], ["proof (state)\nthis:\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {c * x + b<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "ultimately"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. c * x + b) (at_left x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {..<x}\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {c * x + b<..}", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. c * x + b) (at_left x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {..<x}\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {..<c * x + b}\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {..<x} = {c * x + b<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_left x) =\n    (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_left x) =\n  (if (0::'a) < c then at_left (c * x + b) else at_right (c * x + b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filtermap_linear_at_right:\n  fixes c::\"'a::{linordered_field,linorder_topology,real_normed_field}\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. c*x+b) (at_right x) = (if c>0 then at_right (c*x+b) else at_left (c*x+b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "let ?f = \"\\<lambda>x. c*x+b\""], ["proof (state)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "have \"filtermap ?f (at_right x) = (at (?f x) within ?f ` {x<..})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "proof (subst filtermap_linear_at_within)"], ["proof (state)\ngoal (4 subgoals):\n 1. bij (\\<lambda>x. c * x + b)\n 2. isCont (\\<lambda>x. c * x + b) x\n 3. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 4. at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "show \"bij ?f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (\\<lambda>x. c * x + b)", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. bij (\\<lambda>x. c * x + b)", "by (auto intro!: o_bij[of \"\\<lambda>x. (x-b)/c\"])"], ["proof (state)\nthis:\n  bij (\\<lambda>x. c * x + b)\n\ngoal (3 subgoals):\n 1. isCont (\\<lambda>x. c * x + b) x\n 2. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 3. at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "show \"isCont ?f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. isCont (\\<lambda>x. c * x + b) x", "by auto"], ["proof (state)\nthis:\n  isCont (\\<lambda>x. c * x + b) x\n\ngoal (2 subgoals):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)\n 2. at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "show \"\\<And>S. open S \\<Longrightarrow> open (?f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)", "using open_times_image[OF _ \\<open>c\\<noteq>0\\<close>,THEN open_translation,of _ b]"], ["proof (prove)\nusing this:\n  open ?S1 \\<Longrightarrow> open ((+) b ` (*) c ` ?S1)\n\ngoal (1 subgoal):\n 1. \\<And>S. open S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` S)", "by (simp add:image_image add.commute)"], ["proof (state)\nthis:\n  open ?S \\<Longrightarrow> open ((\\<lambda>x. c * x + b) ` ?S)\n\ngoal (1 subgoal):\n 1. at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "show \"at (?f x) within ?f ` {x<..} = at (?f x) within ?f ` {x<..}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n    within (\\<lambda>x. c * x + b) ` {x<..}", "by simp"], ["proof (state)\nthis:\n  at (c * x + b) within (\\<lambda>x. c * x + b) ` {x<..} = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {x<..}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_right x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {x<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "moreover"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_right x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {x<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "have \"?f ` {x<..} =  {?f x<..}\" when \"c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}", "using image_linear_greaterThan[OF \\<open>c\\<noteq>0\\<close>,of b x] that"], ["proof (prove)\nusing this:\n  (\\<lambda>x. c * x + b) ` {x<..} =\n  (if (0::'a) < c then {c * x + b<..} else {..<c * x + b})\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}", "by auto"], ["proof (state)\nthis:\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "moreover"], ["proof (state)\nthis:\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "have \"?f ` {x<..} =  {..<?f x}\" when \"\\<not> c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} = {..<c * x + b}", "using image_linear_greaterThan[OF \\<open>c\\<noteq>0\\<close>,of b x] that"], ["proof (prove)\nusing this:\n  (\\<lambda>x. c * x + b) ` {x<..} =\n  (if (0::'a) < c then {c * x + b<..} else {..<c * x + b})\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. c * x + b) ` {x<..} = {..<c * x + b}", "by auto"], ["proof (state)\nthis:\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {..<c * x + b}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "ultimately"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. c * x + b) (at_right x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {x<..}\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {..<c * x + b}", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. c * x + b) (at_right x) = at (c * x + b)\n  within (\\<lambda>x. c * x + b) ` {x<..}\n  (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {c * x + b<..}\n  \\<not> (0::'a) < c \\<Longrightarrow>\n  (\\<lambda>x. c * x + b) ` {x<..} = {..<c * x + b}\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. c * x + b) (at_right x) =\n    (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. c * x + b) (at_right x) =\n  (if (0::'a) < c then at_right (c * x + b) else at_left (c * x + b))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filtermap_at_top_linear_eq:\n  fixes c::\"'a::linordered_field\"\n  assumes \"c\\<noteq>0\"\n  shows \"filtermap (\\<lambda>x. x * c + b) at_top = (if c>0 then at_top else at_bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "proof (cases \"c>0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "case True"], ["proof (state)\nthis:\n  (0::'a) < c\n\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "then"], ["proof (chain)\npicking this:\n  (0::'a) < c", "have \"filtermap (\\<lambda>x. x * c + b) at_top = at_top\""], ["proof (prove)\nusing this:\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top = at_top", "apply (intro filtermap_fun_inverse[of \"\\<lambda>x. (x-b) / c\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_top. (x - b) / c :> at_top\n 2. (0::'a) < c \\<Longrightarrow> LIM x at_top. x * c + b :> at_top\n 3. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_top. (x - b) / c :> at_top", "unfolding eventually_at_top_linorder filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<ge>N. Z \\<le> (n - b) / c", "by (meson le_diff_eq pos_le_divide_eq)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_top. x * c + b :> at_top\n 2. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow> LIM x at_top. x * c + b :> at_top", "unfolding eventually_at_top_linorder filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<ge>N. Z \\<le> n * c + b", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Z.\n       (0::'a) < c \\<Longrightarrow>\n       \\<exists>N. \\<forall>n\\<ge>N. Z \\<le> n * c + b", "by (metis mult.commute real_le_affinity)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_top. (x - b) / c * c + b = x", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_top\n\ngoal (2 subgoals):\n 1. (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)\n 2. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "then"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_top", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_top\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "using \\<open>c>0\\<close>"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_top\n  (0::'a) < c\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_top =\n  (if (0::'a) < c then at_top else at_bot)\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "case False"], ["proof (state)\nthis:\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "then"], ["proof (chain)\npicking this:\n  \\<not> (0::'a) < c", "have \"c<0\""], ["proof (prove)\nusing this:\n  \\<not> (0::'a) < c\n\ngoal (1 subgoal):\n 1. c < (0::'a)", "using \\<open>c\\<noteq>0\\<close>"], ["proof (prove)\nusing this:\n  \\<not> (0::'a) < c\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. c < (0::'a)", "by auto"], ["proof (state)\nthis:\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "then"], ["proof (chain)\npicking this:\n  c < (0::'a)", "have \"filtermap (\\<lambda>x. x * c + b) at_top = at_bot\""], ["proof (prove)\nusing this:\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top = at_bot", "apply (intro filtermap_fun_inverse[of \"\\<lambda>x. (x-b) / c\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_bot. (x - b) / c :> at_top\n 2. c < (0::'a) \\<Longrightarrow> LIM x at_top. x * c + b :> at_bot\n 3. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_bot. (x - b) / c :> at_top", "unfolding eventually_at_bot_linorder filterlim_at_top"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<le>N. Z \\<le> (n - b) / c", "by (auto simp add: field_simps)"], ["proof (prove)\ngoal (2 subgoals):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_top. x * c + b :> at_bot\n 2. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow> LIM x at_top. x * c + b :> at_bot", "unfolding eventually_at_top_linorder filterlim_at_bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>Z. \\<exists>N. \\<forall>n\\<ge>N. n * c + b \\<le> Z", "by (meson le_diff_eq neg_divide_le_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. c < (0::'a) \\<Longrightarrow>\n    \\<forall>\\<^sub>F x in at_bot. (x - b) / c * c + b = x", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_bot\n\ngoal (1 subgoal):\n 1. \\<not> (0::'a) < c \\<Longrightarrow>\n    filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "then"], ["proof (chain)\npicking this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_bot", "show ?thesis"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_bot\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "using \\<open>c<0\\<close>"], ["proof (prove)\nusing this:\n  filtermap (\\<lambda>x. x * c + b) at_top = at_bot\n  c < (0::'a)\n\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. x * c + b) at_top =\n    (if (0::'a) < c then at_top else at_bot)", "by auto"], ["proof (state)\nthis:\n  filtermap (\\<lambda>x. x * c + b) at_top =\n  (if (0::'a) < c then at_top else at_bot)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filtermap_nhds_open_map:\n  assumes cont: \"isCont f a\"\n    and open_map: \"\\<And>S. open S \\<Longrightarrow> open (f`S)\"\n  shows \"filtermap f (nhds a) = nhds (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap f (nhds a) = nhds (f a)", "unfolding filter_eq_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       eventually P (filtermap f (nhds a)) = eventually P (nhds (f a))", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (nhds a)) \\<Longrightarrow>\n       eventually P (nhds (f a))\n 2. \\<And>P.\n       eventually P (nhds (f a)) \\<Longrightarrow>\n       eventually P (filtermap f (nhds a))", "fix P"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (nhds a)) \\<Longrightarrow>\n       eventually P (nhds (f a))\n 2. \\<And>P.\n       eventually P (nhds (f a)) \\<Longrightarrow>\n       eventually P (filtermap f (nhds a))", "assume \"eventually P (filtermap f (nhds a))\""], ["proof (state)\nthis:\n  eventually P (filtermap f (nhds a))\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (nhds a)) \\<Longrightarrow>\n       eventually P (nhds (f a))\n 2. \\<And>P.\n       eventually P (nhds (f a)) \\<Longrightarrow>\n       eventually P (filtermap f (nhds a))", "then"], ["proof (chain)\npicking this:\n  eventually P (filtermap f (nhds a))", "obtain S where \"open S\" \"a \\<in> S\" \"\\<forall>x\\<in>S. P (f x)\""], ["proof (prove)\nusing this:\n  eventually P (filtermap f (nhds a))\n\ngoal (1 subgoal):\n 1. (\\<And>S.\n        \\<lbrakk>open S; a \\<in> S; \\<forall>x\\<in>S. P (f x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_filtermap eventually_nhds)"], ["proof (state)\nthis:\n  open S\n  a \\<in> S\n  \\<forall>x\\<in>S. P (f x)\n\ngoal (2 subgoals):\n 1. \\<And>P.\n       eventually P (filtermap f (nhds a)) \\<Longrightarrow>\n       eventually P (nhds (f a))\n 2. \\<And>P.\n       eventually P (nhds (f a)) \\<Longrightarrow>\n       eventually P (filtermap f (nhds a))", "then"], ["proof (chain)\npicking this:\n  open S\n  a \\<in> S\n  \\<forall>x\\<in>S. P (f x)", "show \"eventually P (nhds (f a))\""], ["proof (prove)\nusing this:\n  open S\n  a \\<in> S\n  \\<forall>x\\<in>S. P (f x)\n\ngoal (1 subgoal):\n 1. eventually P (nhds (f a))", "unfolding eventually_nhds"], ["proof (prove)\nusing this:\n  open S\n  a \\<in> S\n  \\<forall>x\\<in>S. P (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>S. open S \\<and> f a \\<in> S \\<and> Ball S P", "apply (intro exI[of _ \"f`S\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>open S; a \\<in> S; \\<forall>x\\<in>S. P (f x)\\<rbrakk>\n    \\<Longrightarrow> open (f ` S) \\<and>\n                      f a \\<in> f ` S \\<and> Ball (f ` S) P", "by (auto intro!: open_map)"], ["proof (state)\nthis:\n  eventually P (nhds (f a))\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       eventually P (nhds (f a)) \\<Longrightarrow>\n       eventually P (filtermap f (nhds a))", "qed (metis filterlim_iff tendsto_at_iff_tendsto_nhds isCont_def eventually_filtermap cont)"], ["", "subsection \\<open>More about @{term filterlim}\\<close>"], ["", "lemma filterlim_at_infinity_times:\n  fixes f :: \"'a \\<Rightarrow> 'b::real_normed_field\"\n  assumes \"filterlim f at_infinity F\" \"filterlim g at_infinity F\"\n  shows \"filterlim (\\<lambda>x. f x * g x) at_infinity F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_infinity", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_infinity", "have \"((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow> 0 * 0) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n     (0::'b) * (0::'b))\n     F", "by (intro tendsto_mult tendsto_inverse assms filterlim_compose[OF tendsto_inverse_0])"], ["proof (state)\nthis:\n  ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n   (0::'b) * (0::'b))\n   F\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n   (0::'b) * (0::'b))\n   F", "have \"filterlim (\\<lambda>x. inverse (f x) * inverse (g x)) (at 0) F\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n   (0::'b) * (0::'b))\n   F\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (f x) * inverse (g x) :> at (0::'b)", "unfolding filterlim_at"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n   (0::'b) * (0::'b))\n   F\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<^sub>F x in F.\n        inverse (f x) * inverse (g x) \\<in> UNIV \\<and>\n        inverse (f x) * inverse (g x) \\<noteq> (0::'b)) \\<and>\n    ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n     (0::'b))\n     F", "using assms"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n   (0::'b) * (0::'b))\n   F\n  filterlim f at_infinity F\n  filterlim g at_infinity F\n\ngoal (1 subgoal):\n 1. (\\<forall>\\<^sub>F x in F.\n        inverse (f x) * inverse (g x) \\<in> UNIV \\<and>\n        inverse (f x) * inverse (g x) \\<noteq> (0::'b)) \\<and>\n    ((\\<lambda>x. inverse (f x) * inverse (g x)) \\<longlongrightarrow>\n     (0::'b))\n     F", "by (auto intro: filterlim_at_infinity_imp_eventually_ne tendsto_imp_eventually_ne eventually_conj)"], ["proof (state)\nthis:\n  LIM x F. inverse (f x) * inverse (g x) :> at (0::'b)\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  LIM x F. inverse (f x) * inverse (g x) :> at (0::'b)", "show ?thesis"], ["proof (prove)\nusing this:\n  LIM x F. inverse (f x) * inverse (g x) :> at (0::'b)\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_infinity", "by (subst filterlim_inverse_at_iff[symmetric]) simp_all"], ["proof (state)\nthis:\n  LIM x F. f x * g x :> at_infinity\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_at_top_at_bot[elim]:\n  fixes f::\"'a \\<Rightarrow> 'b::unbounded_dense_linorder\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_top F\" and bot: \"filterlim f at_bot F\" and \"F\\<noteq>bot\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "obtain c::'b where True"], ["proof (prove)\ngoal (1 subgoal):\n 1. (True \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  True\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. c < f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c < f x", "using top"], ["proof (prove)\nusing this:\n  filterlim f at_top F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c < f x", "unfolding filterlim_at_top_dense"], ["proof (prove)\nusing this:\n  \\<forall>Z. \\<forall>\\<^sub>F x in F. Z < f x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c < f x", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c < f x\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c < f x\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. f x < c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c", "using bot"], ["proof (prove)\nusing this:\n  filterlim f at_bot F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c", "unfolding filterlim_at_bot_dense"], ["proof (prove)\nusing this:\n  \\<forall>Z. \\<forall>\\<^sub>F x in F. f x < Z\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x < c\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. c < f x\n  \\<forall>\\<^sub>F x in F. f x < c", "have \"\\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c < f x\n  \\<forall>\\<^sub>F x in F. f x < c\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c", "using eventually_conj"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c < f x\n  \\<forall>\\<^sub>F x in F. f x < c\n  \\<lbrakk>eventually ?P ?F; eventually ?Q ?F\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?P x \\<and> ?Q x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c", "have \"\\<forall>\\<^sub>F x in F. False\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c < f x \\<and> f x < c\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. False", "by (auto elim:eventually_mono)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. False", "show False"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "using \\<open>F\\<noteq>bot\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n  F \\<noteq> bot\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_at_top_nhds[elim]:      \n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_top F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" and \"F\\<noteq>bot\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "obtain c'::'b where \"c'>c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c'. c < c' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using gt_ex"], ["proof (prove)\nusing this:\n  \\<exists>y. ?x < y\n\ngoal (1 subgoal):\n 1. (\\<And>c'. c < c' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  c < c'\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. c' < f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x", "using top"], ["proof (prove)\nusing this:\n  filterlim f at_top F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x", "unfolding filterlim_at_top_dense"], ["proof (prove)\nusing this:\n  \\<forall>Z. \\<forall>\\<^sub>F x in F. Z < f x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c' < f x\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c' < f x\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. f x < c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c'", "using order_tendstoD[OF tendsto,of c'] \\<open>c'>c\\<close>"], ["proof (prove)\nusing this:\n  c' < c \\<Longrightarrow> \\<forall>\\<^sub>F x in F. c' < f x\n  c < c' \\<Longrightarrow> \\<forall>\\<^sub>F x in F. f x < c'\n  c < c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c'", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x < c'\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. c' < f x\n  \\<forall>\\<^sub>F x in F. f x < c'", "have \"\\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c' < f x\n  \\<forall>\\<^sub>F x in F. f x < c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "using eventually_conj"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c' < f x\n  \\<forall>\\<^sub>F x in F. f x < c'\n  \\<lbrakk>eventually ?P ?F; eventually ?Q ?F\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?P x \\<and> ?Q x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "have \"\\<forall>\\<^sub>F x in F. False\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. False", "by (auto elim:eventually_mono)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. False", "show False"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "using \\<open>F\\<noteq>bot\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n  F \\<noteq> bot\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_at_bot_nhds[elim]:      \n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_bot F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" and \"F\\<noteq>bot\"\n  shows False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. False", "obtain c'::'b where \"c'<c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c'. c' < c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using lt_ex"], ["proof (prove)\nusing this:\n  \\<exists>y. y < ?x\n\ngoal (1 subgoal):\n 1. (\\<And>c'. c' < c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  c' < c\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. c' > f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c'", "using top"], ["proof (prove)\nusing this:\n  filterlim f at_bot F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c'", "unfolding filterlim_at_bot_dense"], ["proof (prove)\nusing this:\n  \\<forall>Z. \\<forall>\\<^sub>F x in F. f x < Z\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. f x < c'", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x < c'\n\ngoal (1 subgoal):\n 1. False", "moreover"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. f x < c'\n\ngoal (1 subgoal):\n 1. False", "have \"\\<forall>\\<^sub>F x in F. f x > c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x", "using order_tendstoD[OF tendsto,of c'] \\<open>c'<c\\<close>"], ["proof (prove)\nusing this:\n  c' < c \\<Longrightarrow> \\<forall>\\<^sub>F x in F. c' < f x\n  c < c' \\<Longrightarrow> \\<forall>\\<^sub>F x in F. f x < c'\n  c' < c\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c' < f x\n\ngoal (1 subgoal):\n 1. False", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. f x < c'\n  \\<forall>\\<^sub>F x in F. c' < f x", "have \"\\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x < c'\n  \\<forall>\\<^sub>F x in F. c' < f x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "using eventually_conj"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. f x < c'\n  \\<forall>\\<^sub>F x in F. c' < f x\n  \\<lbrakk>eventually ?P ?F; eventually ?Q ?F\\<rbrakk>\n  \\<Longrightarrow> \\<forall>\\<^sub>F x in ?F. ?P x \\<and> ?Q x\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "by auto"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'", "have \"\\<forall>\\<^sub>F x in F. False\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. c' < f x \\<and> f x < c'\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. False", "by (auto elim:eventually_mono)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F x in F. False", "show False"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n\ngoal (1 subgoal):\n 1. False", "using \\<open>F\\<noteq>bot\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. False\n  F \\<noteq> bot\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_at_top_linear_iff:\n  fixes f::\"'a::linordered_field \\<Rightarrow> 'b\"\n  assumes \"c\\<noteq>0\"\n  shows \"(LIM x at_top. f (x * c + b) :> F2) \\<longleftrightarrow> (if c>0 then (LIM x at_top. f x :> F2) \n            else (LIM x at_bot. f x :> F2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x at_top. f (x * c + b) :> F2) =\n    (if (0::'a) < c then filterlim f F2 at_top else filterlim f F2 at_bot)", "unfolding filterlim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (filtermap (\\<lambda>x. f (x * c + b)) at_top \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_top \\<le> F2\n     else filtermap f at_bot \\<le> F2)", "apply (subst filtermap_filtermap[of f \"\\<lambda>x. x * c + b\",symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (filtermap f (filtermap (\\<lambda>x. x * c + b) at_top) \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_top \\<le> F2\n     else filtermap f at_bot \\<le> F2)", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (filtermap f (filtermap (\\<lambda>x. x * c + b) at_top) \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_top \\<le> F2\n     else filtermap f at_bot \\<le> F2)", "by (auto simp add:filtermap_at_top_linear_eq)"], ["", "lemma filterlim_at_bot_linear_iff:\n  fixes f::\"'a::linordered_field \\<Rightarrow> 'b\"\n  assumes \"c\\<noteq>0\"\n  shows \"(LIM x at_bot. f (x * c + b) :> F2) \\<longleftrightarrow> (if c>0 then (LIM x at_bot. f x :> F2) \n            else (LIM x at_top. f x :> F2)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x at_bot. f (x * c + b) :> F2) =\n    (if (0::'a) < c then filterlim f F2 at_bot else filterlim f F2 at_top)", "unfolding filterlim_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (filtermap (\\<lambda>x. f (x * c + b)) at_bot \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_bot \\<le> F2\n     else filtermap f at_top \\<le> F2)", "apply (subst filtermap_filtermap[of f \"\\<lambda>x. x * c + b\",symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (filtermap f (filtermap (\\<lambda>x. x * c + b) at_bot) \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_bot \\<le> F2\n     else filtermap f at_top \\<le> F2)", "using assms"], ["proof (prove)\nusing this:\n  c \\<noteq> (0::'a)\n\ngoal (1 subgoal):\n 1. (filtermap f (filtermap (\\<lambda>x. x * c + b) at_bot) \\<le> F2) =\n    (if (0::'a) < c then filtermap f at_bot \\<le> F2\n     else filtermap f at_top \\<le> F2)", "by (auto simp add:filtermap_at_bot_linear_eq)"], ["", "lemma filterlim_tendsto_add_at_top_iff:\n  assumes f: \"(f \\<longlongrightarrow> c) F\"\n  shows \"(LIM x F. (f x + g x :: real) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_top) = filterlim g at_top F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. LIM x F. f x + g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x + g x :> at_top", "assume \"LIM x F. f x + g x :> at_top\""], ["proof (state)\nthis:\n  LIM x F. f x + g x :> at_top\n\ngoal (2 subgoals):\n 1. LIM x F. f x + g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x + g x :> at_top", "moreover"], ["proof (state)\nthis:\n  LIM x F. f x + g x :> at_top\n\ngoal (2 subgoals):\n 1. LIM x F. f x + g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x + g x :> at_top", "have \"((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F", "using f"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> c) F\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F", "by (intro tendsto_intros,simp)"], ["proof (state)\nthis:\n  ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n\ngoal (2 subgoals):\n 1. LIM x F. f x + g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x + g x :> at_top", "ultimately"], ["proof (chain)\npicking this:\n  LIM x F. f x + g x :> at_top\n  ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F", "show \"filterlim g at_top F\""], ["proof (prove)\nusing this:\n  LIM x F. f x + g x :> at_top\n  ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n\ngoal (1 subgoal):\n 1. filterlim g at_top F", "using filterlim_tendsto_add_at_top"], ["proof (prove)\nusing this:\n  LIM x F. f x + g x :> at_top\n  ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n  \\<lbrakk>(?f \\<longlongrightarrow> ?c) ?F; filterlim ?g at_top ?F\\<rbrakk>\n  \\<Longrightarrow> LIM x ?F. ?f x + ?g x :> at_top\n\ngoal (1 subgoal):\n 1. filterlim g at_top F", "by fastforce"], ["proof (state)\nthis:\n  filterlim g at_top F\n\ngoal (1 subgoal):\n 1. filterlim g at_top F \\<Longrightarrow> LIM x F. f x + g x :> at_top", "qed (auto simp add:filterlim_tendsto_add_at_top[OF f])"], ["", "lemma filterlim_tendsto_add_at_bot_iff:\n  fixes c::real\n  assumes f: \"(f \\<longlongrightarrow> c) F\"\n  shows \"(LIM x F. f x + g x :> at_bot) \\<longleftrightarrow> (LIM x F. g x :> at_bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "have \"(LIM x F. f x + g x :> at_bot) \n        \\<longleftrightarrow>  (LIM x F. - f x + (- g x)  :> at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = (LIM x F. - f x + - g x :> at_top)", "apply (subst filterlim_uminus_at_top)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = (LIM x F. - (- f x + - g x) :> at_bot)", "by (rule filterlim_cong,auto)"], ["proof (state)\nthis:\n  (LIM x F. f x + g x :> at_bot) = (LIM x F. - f x + - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "also"], ["proof (state)\nthis:\n  (LIM x F. f x + g x :> at_bot) = (LIM x F. - f x + - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "have \"... = (LIM x F. - g x  :> at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. - f x + - g x :> at_top) = (LIM x F. - g x :> at_top)", "apply (subst filterlim_tendsto_add_at_top_iff[of _ \"-c\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n 2. (LIM x F. - g x :> at_top) = (LIM x F. - g x :> at_top)", "by (auto intro:tendsto_intros simp add:f)"], ["proof (state)\nthis:\n  (LIM x F. - f x + - g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "also"], ["proof (state)\nthis:\n  (LIM x F. - f x + - g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "have \"... = (LIM x F. g x  :> at_bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. - g x :> at_top) = filterlim g at_bot F", "apply (subst filterlim_uminus_at_top)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. - (- g x) :> at_bot) = filterlim g at_bot F", "by (rule filterlim_cong,auto)"], ["proof (state)\nthis:\n  (LIM x F. - g x :> at_top) = filterlim g at_bot F\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "finally"], ["proof (chain)\npicking this:\n  (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "show ?thesis"], ["proof (prove)\nusing this:\n  (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F\n\ngoal (1 subgoal):\n 1. (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F", "."], ["proof (state)\nthis:\n  (LIM x F. f x + g x :> at_bot) = filterlim g at_bot F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tendsto_inverse_0_at_infinity: \n    \"LIM x F. f x :> at_infinity \\<Longrightarrow> ((\\<lambda>x. inverse (f x) :: real) \\<longlongrightarrow> 0) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filterlim f at_infinity F \\<Longrightarrow>\n    ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> 0) F", "by (metis filterlim_at filterlim_inverse_at_iff)"], ["", "lemma filterlim_at_infinity_divide_iff:\n  fixes f::\"'a \\<Rightarrow> 'b::real_normed_field\"\n  assumes \"(f \\<longlongrightarrow> c) F\" \"c\\<noteq>0\"\n  shows \"(LIM x F. f x / g x :> at_infinity) \\<longleftrightarrow> (LIM x F. g x :> at 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x / g x :> at_infinity) = filterlim g (at (0::'b)) F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. LIM x F. f x / g x :> at_infinity \\<Longrightarrow>\n    filterlim g (at (0::'b)) F\n 2. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "assume asm:\"LIM x F. f x / g x :> at_infinity\""], ["proof (state)\nthis:\n  LIM x F. f x / g x :> at_infinity\n\ngoal (2 subgoals):\n 1. LIM x F. f x / g x :> at_infinity \\<Longrightarrow>\n    filterlim g (at (0::'b)) F\n 2. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "have \"LIM x F. inverse (f x) * (f x / g x) :> at_infinity\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIM x F. inverse (f x) * (f x / g x) :> at_infinity", "apply (rule tendsto_mult_filterlim_at_infinity[of _ \"inverse c\", OF _ _ asm])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n 2. inverse c \\<noteq> (0::'b)", "by (auto simp add: assms(1) assms(2) tendsto_inverse)"], ["proof (state)\nthis:\n  LIM x F. inverse (f x) * (f x / g x) :> at_infinity\n\ngoal (2 subgoals):\n 1. LIM x F. f x / g x :> at_infinity \\<Longrightarrow>\n    filterlim g (at (0::'b)) F\n 2. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  LIM x F. inverse (f x) * (f x / g x) :> at_infinity", "have \"LIM x F. inverse (g x) :> at_infinity\""], ["proof (prove)\nusing this:\n  LIM x F. inverse (f x) * (f x / g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (g x) :> at_infinity", "apply (elim filterlim_mono_eventually)"], ["proof (prove)\ngoal (3 subgoals):\n 1. at_infinity \\<le> at_infinity\n 2. F \\<le> F\n 3. \\<forall>\\<^sub>F x in F. inverse (f x) * (f x / g x) = inverse (g x)", "using eventually_times_inverse_1[OF assms]"], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F x in F. inverse (f x) * f x = (1::'b)\n\ngoal (3 subgoals):\n 1. at_infinity \\<le> at_infinity\n 2. F \\<le> F\n 3. \\<forall>\\<^sub>F x in F. inverse (f x) * (f x / g x) = inverse (g x)", "by (auto elim:eventually_mono simp add:field_simps)"], ["proof (state)\nthis:\n  LIM x F. inverse (g x) :> at_infinity\n\ngoal (2 subgoals):\n 1. LIM x F. f x / g x :> at_infinity \\<Longrightarrow>\n    filterlim g (at (0::'b)) F\n 2. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  LIM x F. inverse (g x) :> at_infinity", "show \"filterlim g (at 0) F\""], ["proof (prove)\nusing this:\n  LIM x F. inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F", "using filterlim_inverse_at_iff[symmetric]"], ["proof (prove)\nusing this:\n  LIM x F. inverse (g x) :> at_infinity\n  filterlim ?g at_infinity ?F = (LIM x ?F. inverse (?g x) :> at (0::?'b))\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F", "by force"], ["proof (state)\nthis:\n  filterlim g (at (0::'b)) F\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "assume \"filterlim g (at 0) F\""], ["proof (state)\nthis:\n  filterlim g (at (0::'b)) F\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  filterlim g (at (0::'b)) F", "have \"filterlim (\\<lambda>x. inverse (g x)) at_infinity F\""], ["proof (prove)\nusing this:\n  filterlim g (at (0::'b)) F\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (g x) :> at_infinity", "using filterlim_compose filterlim_inverse_at_infinity"], ["proof (prove)\nusing this:\n  filterlim g (at (0::'b)) F\n  \\<lbrakk>filterlim ?g ?F3.0 ?F2.0; filterlim ?f ?F2.0 ?F1.0\\<rbrakk>\n  \\<Longrightarrow> LIM x ?F1.0. ?g (?f x) :> ?F3.0\n  filterlim inverse at_infinity (at (0::?'a))\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (g x) :> at_infinity", "by blast"], ["proof (state)\nthis:\n  LIM x F. inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  LIM x F. inverse (g x) :> at_infinity", "have \"LIM x F. f x * inverse (g x) :> at_infinity\""], ["proof (prove)\nusing this:\n  LIM x F. inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. LIM x F. f x * inverse (g x) :> at_infinity", "using tendsto_mult_filterlim_at_infinity[OF assms, of \"\\<lambda>x. inverse(g x)\"]"], ["proof (prove)\nusing this:\n  LIM x F. inverse (g x) :> at_infinity\n  LIM x F. inverse (g x) :> at_infinity \\<Longrightarrow>\n  LIM x F. f x * inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. LIM x F. f x * inverse (g x) :> at_infinity", "by simp"], ["proof (state)\nthis:\n  LIM x F. f x * inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. filterlim g (at (0::'b)) F \\<Longrightarrow>\n    LIM x F. f x / g x :> at_infinity", "then"], ["proof (chain)\npicking this:\n  LIM x F. f x * inverse (g x) :> at_infinity", "show \"LIM x F. f x / g x :> at_infinity\""], ["proof (prove)\nusing this:\n  LIM x F. f x * inverse (g x) :> at_infinity\n\ngoal (1 subgoal):\n 1. LIM x F. f x / g x :> at_infinity", "by (simp add: divide_inverse)"], ["proof (state)\nthis:\n  LIM x F. f x / g x :> at_infinity\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_tendsto_pos_mult_at_top_iff:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"(f \\<longlongrightarrow> c) F\" and \"0 < c\"\n  shows \"(LIM x F. (f x * g x) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_top F", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x * g x :> at_top", "assume \"filterlim g at_top F\""], ["proof (state)\nthis:\n  filterlim g at_top F\n\ngoal (2 subgoals):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F\n 2. filterlim g at_top F \\<Longrightarrow> LIM x F. f x * g x :> at_top", "then"], ["proof (chain)\npicking this:\n  filterlim g at_top F", "show \"LIM x F. f x * g x :> at_top\""], ["proof (prove)\nusing this:\n  filterlim g at_top F\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top", "using filterlim_tendsto_pos_mult_at_top[OF assms]"], ["proof (prove)\nusing this:\n  filterlim g at_top F\n  filterlim ?g at_top F \\<Longrightarrow> LIM x F. f x * ?g x :> at_top\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top", "by auto"], ["proof (state)\nthis:\n  LIM x F. f x * g x :> at_top\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "assume asm:\"LIM x F. f x * g x :> at_top\""], ["proof (state)\nthis:\n  LIM x F. f x * g x :> at_top\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "have \"((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F", "using tendsto_inverse[OF assms(1)] \\<open>0<c\\<close>"], ["proof (prove)\nusing this:\n  c \\<noteq> 0 \\<Longrightarrow>\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n  0 < c\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F", "by auto"], ["proof (state)\nthis:\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "moreover"], ["proof (state)\nthis:\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "have \"inverse c >0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < inverse c", "using assms(2)"], ["proof (prove)\nusing this:\n  0 < c\n\ngoal (1 subgoal):\n 1. 0 < inverse c", "by auto"], ["proof (state)\nthis:\n  0 < inverse c\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "ultimately"], ["proof (chain)\npicking this:\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n  0 < inverse c", "have \"LIM x F. inverse (f x) * (f x * g x) :> at_top\""], ["proof (prove)\nusing this:\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n  0 < inverse c\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (f x) * (f x * g x) :> at_top", "using filterlim_tendsto_pos_mult_at_top[OF _ _ asm,of \"\\<lambda>x. inverse (f x)\" \"inverse c\"]"], ["proof (prove)\nusing this:\n  ((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F\n  0 < inverse c\n  \\<lbrakk>((\\<lambda>x. inverse (f x)) \\<longlongrightarrow> inverse c) F;\n   0 < inverse c\\<rbrakk>\n  \\<Longrightarrow> LIM x F. inverse (f x) * (f x * g x) :> at_top\n\ngoal (1 subgoal):\n 1. LIM x F. inverse (f x) * (f x * g x) :> at_top", "by auto"], ["proof (state)\nthis:\n  LIM x F. inverse (f x) * (f x * g x) :> at_top\n\ngoal (1 subgoal):\n 1. LIM x F. f x * g x :> at_top \\<Longrightarrow> filterlim g at_top F", "then"], ["proof (chain)\npicking this:\n  LIM x F. inverse (f x) * (f x * g x) :> at_top", "show \"LIM x F. g x :> at_top\""], ["proof (prove)\nusing this:\n  LIM x F. inverse (f x) * (f x * g x) :> at_top\n\ngoal (1 subgoal):\n 1. filterlim g at_top F", "apply (elim filterlim_mono_eventually)"], ["proof (prove)\ngoal (3 subgoals):\n 1. at_top \\<le> at_top\n 2. F \\<le> F\n 3. \\<forall>\\<^sub>F x in F. inverse (f x) * (f x * g x) = g x", "apply simp_all[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * (f x * g x) = g x", "using eventually_times_inverse_1[OF assms(1)] \\<open>c>0\\<close> eventually_mono"], ["proof (prove)\nusing this:\n  c \\<noteq> 0 \\<Longrightarrow>\n  \\<forall>\\<^sub>F x in F. inverse (f x) * f x = 1\n  0 < c\n  \\<lbrakk>eventually ?P ?F; \\<And>x. ?P x \\<Longrightarrow> ?Q x\\<rbrakk>\n  \\<Longrightarrow> eventually ?Q ?F\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F x in F. inverse (f x) * (f x * g x) = g x", "by fastforce"], ["proof (state)\nthis:\n  filterlim g at_top F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_tendsto_pos_mult_at_bot_iff:\n  fixes c :: real\n  assumes \"(f \\<longlongrightarrow> c) F\" \"0 < c\" \n  shows \"(LIM x F. f x * g x :> at_bot) \\<longleftrightarrow> filterlim g at_bot F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_bot) = filterlim g at_bot F", "using filterlim_tendsto_pos_mult_at_top_iff[OF assms(1,2), of \"\\<lambda>x. - g x\"]"], ["proof (prove)\nusing this:\n  (LIM x F. f x * - g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_bot) = filterlim g at_bot F", "unfolding filterlim_uminus_at_bot"], ["proof (prove)\nusing this:\n  (LIM x F. f x * - g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. - (f x * g x) :> at_top) = (LIM x F. - g x :> at_top)", "by simp"], ["", "lemma filterlim_tendsto_neg_mult_at_top_iff:\n  fixes f::\"'a \\<Rightarrow> real\"\n  assumes \"(f \\<longlongrightarrow> c) F\" and \"c < 0\"\n  shows \"(LIM x F. (f x * g x) :> at_top) \\<longleftrightarrow> (LIM x F. g x :> at_bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "have \"(LIM x F. f x * g x :> at_top) = (LIM x F. - g x :> at_top)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = (LIM x F. - g x :> at_top)", "apply (rule filterlim_tendsto_pos_mult_at_top_iff[of \"\\<lambda>x. - f x\" \"-c\" F \"\\<lambda>x. - g x\", simplified])"], ["proof (prove)\ngoal (2 subgoals):\n 1. ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n 2. c < 0", "using assms"], ["proof (prove)\nusing this:\n  (f \\<longlongrightarrow> c) F\n  c < 0\n\ngoal (2 subgoals):\n 1. ((\\<lambda>x. - f x) \\<longlongrightarrow> - c) F\n 2. c < 0", "by (auto intro: tendsto_intros )"], ["proof (state)\nthis:\n  (LIM x F. f x * g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "also"], ["proof (state)\nthis:\n  (LIM x F. f x * g x :> at_top) = (LIM x F. - g x :> at_top)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "have \"... = (LIM x F. g x :> at_bot)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. - g x :> at_top) = filterlim g at_bot F", "using filterlim_uminus_at_bot[symmetric]"], ["proof (prove)\nusing this:\n  (LIM x ?F. - ?f x :> at_top) = filterlim ?f at_bot ?F\n\ngoal (1 subgoal):\n 1. (LIM x F. - g x :> at_top) = filterlim g at_bot F", "by auto"], ["proof (state)\nthis:\n  (LIM x F. - g x :> at_top) = filterlim g at_bot F\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "finally"], ["proof (chain)\npicking this:\n  (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "show ?thesis"], ["proof (prove)\nusing this:\n  (LIM x F. f x * g x :> at_top) = filterlim g at_bot F\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_top) = filterlim g at_bot F", "."], ["proof (state)\nthis:\n  (LIM x F. f x * g x :> at_top) = filterlim g at_bot F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma filterlim_tendsto_neg_mult_at_bot_iff:\n  fixes c :: real\n  assumes \"(f \\<longlongrightarrow> c) F\" \"0 > c\" \n  shows \"(LIM x F. f x * g x :> at_bot) \\<longleftrightarrow> filterlim g at_top F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_bot) = filterlim g at_top F", "using filterlim_tendsto_neg_mult_at_top_iff[OF assms(1,2), of \"\\<lambda>x. - g x\"]"], ["proof (prove)\nusing this:\n  (LIM x F. f x * - g x :> at_top) = (LIM x F. - g x :> at_bot)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_bot) = filterlim g at_top F", "unfolding filterlim_uminus_at_top"], ["proof (prove)\nusing this:\n  (LIM x F. - (f x * - g x) :> at_bot) = (LIM x F. - g x :> at_bot)\n\ngoal (1 subgoal):\n 1. (LIM x F. f x * g x :> at_bot) = (LIM x F. - g x :> at_bot)", "by simp"], ["", "lemma Lim_add:\n  fixes f g::\"_ \\<Rightarrow> 'a::{t2_space,topological_monoid_add}\"\n  assumes \"\\<exists>y. (f \\<longlongrightarrow> y) F\" and \"\\<exists>y. (g \\<longlongrightarrow> y) F\" and \"F\\<noteq>bot\"\n  shows \"Lim F f + Lim F g = Lim F (\\<lambda>x. f x+g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lim F f + Lim F g = Lim F (\\<lambda>x. f x + g x)", "apply (rule tendsto_Lim[OF \\<open>F\\<noteq>bot\\<close>, symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. f x + g x) \\<longlongrightarrow> Lim F f + Lim F g) F", "apply (auto intro!:tendsto_eq_intros)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (f \\<longlongrightarrow> Lim F f) F\n 2. (g \\<longlongrightarrow> Lim F g) F", "using assms tendsto_Lim"], ["proof (prove)\nusing this:\n  \\<exists>y. (f \\<longlongrightarrow> y) F\n  \\<exists>y. (g \\<longlongrightarrow> y) F\n  F \\<noteq> bot\n  \\<lbrakk>?net \\<noteq> bot; (?f \\<longlongrightarrow> ?l) ?net\\<rbrakk>\n  \\<Longrightarrow> Lim ?net ?f = ?l\n\ngoal (2 subgoals):\n 1. (f \\<longlongrightarrow> Lim F f) F\n 2. (g \\<longlongrightarrow> Lim F g) F", "by blast+"], ["", "(*\nlemma filterlim_at_top_tendsto[elim]:\n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_top F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" \n          and \"F\\<noteq>bot\"\n  shows False\nproof -\n  obtain cc where \"cc>c\" using gt_ex by blast\n  have \"\\<forall>\\<^sub>F x in F. cc < f x\" \n    using top unfolding filterlim_at_top_dense by auto\n  moreover have \"\\<forall>\\<^sub>F x in F. f x < cc\" \n    using tendsto order_tendstoD(2)[OF _ \\<open>cc>c\\<close>] by auto\n  ultimately have \"\\<forall>\\<^sub>F x in F. cc < f x \\<and> f x < cc\" \n    using eventually_conj by auto\n  then have \"\\<forall>\\<^sub>F x in F. False\" by (auto elim:eventually_mono)\n  then show False using \\<open>F\\<noteq>bot\\<close> by auto\nqed\n\nlemma filterlim_at_bot_tendsto[elim]:\n  fixes f::\"'a \\<Rightarrow> 'b::{unbounded_dense_linorder,order_topology}\" and F::\"'a filter\"\n  assumes top:\"filterlim f at_bot F\" and tendsto: \"(f \\<longlongrightarrow> c) F\" \n          and \"F\\<noteq>bot\"\n  shows False\nproof -\n  obtain cc where \"cc<c\" using lt_ex by blast\n  have \"\\<forall>\\<^sub>F x in F. cc > f x\" \n    using top unfolding filterlim_at_bot_dense by auto\n  moreover have \"\\<forall>\\<^sub>F x in F. f x > cc\" \n    using tendsto order_tendstoD(1)[OF _ \\<open>cc<c\\<close>] by auto\n  ultimately have \"\\<forall>\\<^sub>F x in F. cc < f x \\<and> f x < cc\" \n    using eventually_conj by auto\n  then have \"\\<forall>\\<^sub>F x in F. False\" by (auto elim:eventually_mono)\n  then show False using \\<open>F\\<noteq>bot\\<close> by auto\nqed\n*)"], ["", "subsection \\<open>Isolate and discrete\\<close>"], ["", "definition (in topological_space) isolate:: \"'a \\<Rightarrow> 'a set \\<Rightarrow> bool\"  (infixr \"isolate\" 60)\n  where \"x isolate S \\<longleftrightarrow> (x\\<in>S \\<and> (\\<exists>T. open T \\<and> T \\<inter> S = {x}))\""], ["", "definition (in topological_space) discrete:: \"'a set \\<Rightarrow> bool\" \n  where \"discrete S \\<longleftrightarrow> (\\<forall>x\\<in>S. x isolate S)\""], ["", "definition (in metric_space) uniform_discrete :: \"'a set \\<Rightarrow> bool\" where\n  \"uniform_discrete S \\<longleftrightarrow> (\\<exists>e>0. \\<forall>x\\<in>S. \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y)\""], ["", "lemma uniformI1:\n  assumes \"e>0\" \"\\<And>x y. \\<lbrakk>x\\<in>S;y\\<in>S;dist x y<e\\<rbrakk> \\<Longrightarrow> x =y \"\n  shows \"uniform_discrete S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S", "unfolding uniform_discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>S.\n          \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y", "using assms"], ["proof (prove)\nusing this:\n  0 < e\n  \\<lbrakk>?x \\<in> S; ?y \\<in> S; dist ?x ?y < e\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>S.\n          \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y", "by auto"], ["", "lemma uniformI2:\n  assumes \"e>0\" \"\\<And>x y. \\<lbrakk>x\\<in>S;y\\<in>S;x\\<noteq>y\\<rbrakk> \\<Longrightarrow> dist x y\\<ge>e \"\n  shows \"uniform_discrete S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S", "unfolding uniform_discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>S.\n          \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y", "using assms not_less"], ["proof (prove)\nusing this:\n  0 < e\n  \\<lbrakk>?x \\<in> S; ?y \\<in> S; ?x \\<noteq> ?y\\<rbrakk>\n  \\<Longrightarrow> e \\<le> dist ?x ?y\n  (\\<not> ?x < ?y) = (?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>S.\n          \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y", "by blast"], ["", "lemma isolate_islimpt_iff:\"(x isolate S) \\<longleftrightarrow> (\\<not> (x islimpt S) \\<and> x\\<in>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x isolate S = (\\<not> x islimpt S \\<and> x \\<in> S)", "unfolding isolate_def islimpt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> S \\<and> (\\<exists>T. open T \\<and> T \\<inter> S = {x})) =\n    (\\<not> (\\<forall>T.\n                x \\<in> T \\<longrightarrow>\n                open T \\<longrightarrow>\n                (\\<exists>y\\<in>S. y \\<in> T \\<and> y \\<noteq> x)) \\<and>\n     x \\<in> S)", "by auto"], ["", "lemma isolate_dist_Ex_iff:\n  fixes x::\"'a::metric_space\"\n  shows \"x isolate S \\<longleftrightarrow> (x\\<in>S \\<and> (\\<exists>e>0. \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> y=x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x isolate S =\n    (x \\<in> S \\<and>\n     (\\<exists>e>0. \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> y = x))", "unfolding isolate_islimpt_iff islimpt_approachable"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (\\<forall>e>0.\n                \\<exists>x'\\<in>S.\n                   x' \\<noteq> x \\<and> dist x' x < e) \\<and>\n     x \\<in> S) =\n    (x \\<in> S \\<and>\n     (\\<exists>e>0. \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> y = x))", "by (metis dist_commute)"], ["", "lemma discrete_empty[simp]: \"discrete {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete {}", "unfolding discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>{}. x isolate {}", "by auto"], ["", "lemma uniform_discrete_empty[simp]: \"uniform_discrete {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete {}", "unfolding uniform_discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>{}.\n          \\<forall>y\\<in>{}. dist x y < e \\<longrightarrow> x = y", "by (simp add: gt_ex)"], ["", "lemma isolate_insert: \n  fixes x :: \"'a::t1_space\"\n  shows \"x isolate (insert a S) \\<longleftrightarrow> x isolate S \\<or> (x=a \\<and> \\<not> (x islimpt S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x isolate insert a S =\n    (x isolate S \\<or> x = a \\<and> \\<not> x islimpt S)", "by (meson insert_iff islimpt_insert isolate_islimpt_iff)"], ["", "(*\nTODO. \nOther than \n\n  uniform_discrete S \\<longrightarrow> discrete S\n  uniform_discrete S \\<longrightarrow> closed S\n\n, we should be able to prove\n\n  discrete S \\<and> closed S \\<longrightarrow> uniform_discrete S\n\nbut the proof (based on Tietze Extension Theorem) seems not very trivial to me. Informal proofs can be found in\n\nhttp://topology.auburn.edu/tp/reprints/v30/tp30120.pdf\nhttp://msp.org/pjm/1959/9-2/pjm-v9-n2-p19-s.pdf\n*)"], ["", "lemma uniform_discrete_imp_closed:\n  \"uniform_discrete S \\<Longrightarrow> closed S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S \\<Longrightarrow> closed S", "by (meson discrete_imp_closed uniform_discrete_def)"], ["", "lemma uniform_discrete_imp_discrete:\n  \"uniform_discrete S \\<Longrightarrow> discrete S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S \\<Longrightarrow> discrete S", "by (metis discrete_def isolate_dist_Ex_iff uniform_discrete_def)"], ["", "lemma isolate_subset:\"x isolate S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> x\\<in>T \\<Longrightarrow> x isolate T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x isolate S; T \\<subseteq> S; x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> x isolate T", "unfolding isolate_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> S \\<and>\n             (\\<exists>T. open T \\<and> T \\<inter> S = {x});\n     T \\<subseteq> S; x \\<in> T\\<rbrakk>\n    \\<Longrightarrow> x \\<in> T \\<and>\n                      (\\<exists>Ta. open Ta \\<and> Ta \\<inter> T = {x})", "by fastforce"], ["", "lemma discrete_subset[elim]: \"discrete S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> discrete T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>discrete S; T \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> discrete T", "unfolding discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>S. x isolate S; T \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>T. x isolate T", "using islimpt_subset isolate_islimpt_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x islimpt ?S; ?S \\<subseteq> ?T\\<rbrakk>\n  \\<Longrightarrow> ?x islimpt ?T\n  ?x isolate ?S = (\\<not> ?x islimpt ?S \\<and> ?x \\<in> ?S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>S. x isolate S; T \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>T. x isolate T", "by blast"], ["", "lemma uniform_discrete_subset[elim]: \"uniform_discrete S \\<Longrightarrow> T \\<subseteq> S \\<Longrightarrow> uniform_discrete T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>uniform_discrete S; T \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> uniform_discrete T", "by (meson subsetD uniform_discrete_def)"], ["", "lemma continuous_on_discrete: \"discrete S \\<Longrightarrow> continuous_on S f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete S \\<Longrightarrow> continuous_on S f", "unfolding continuous_on_topological"], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete S \\<Longrightarrow>\n    \\<forall>x\\<in>S.\n       \\<forall>B.\n          open B \\<longrightarrow>\n          f x \\<in> B \\<longrightarrow>\n          (\\<exists>A.\n              open A \\<and>\n              x \\<in> A \\<and>\n              (\\<forall>y\\<in>S. y \\<in> A \\<longrightarrow> f y \\<in> B))", "by (metis discrete_def islimptI isolate_islimpt_iff)"], ["", "(* Is euclidean_space really necessary?*)"], ["", "lemma uniform_discrete_insert:\n  fixes S :: \"'a::euclidean_space set\"\n  shows \"uniform_discrete (insert a S) \\<longleftrightarrow> uniform_discrete S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S) = uniform_discrete S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "assume asm:\"uniform_discrete S\""], ["proof (state)\nthis:\n  uniform_discrete S\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "let ?thesis = \"uniform_discrete (insert a S)\""], ["proof (state)\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "have ?thesis when \"a\\<in>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "using that asm"], ["proof (prove)\nusing this:\n  a \\<in> S\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "by (simp add: insert_absorb)"], ["proof (state)\nthis:\n  a \\<in> S \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "moreover"], ["proof (state)\nthis:\n  a \\<in> S \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "have ?thesis when \"S={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "using that asm"], ["proof (prove)\nusing this:\n  S = {}\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "by (simp add: uniform_discrete_def)"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "moreover"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "have ?thesis when \"a\\<notin>S\" \"S\\<noteq>{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "obtain e1 where \"e1>0\" and e1_dist:\"\\<forall>x\\<in>S. \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using asm"], ["proof (prove)\nusing this:\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding uniform_discrete_def"], ["proof (prove)\nusing this:\n  \\<exists>e>0.\n     \\<forall>x\\<in>S.\n        \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < e1\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "define e2 where \"e2 \\<equiv> min (setdist {a} S) e1\""], ["proof (state)\nthis:\n  e2 \\<equiv> min (setdist {a} S) e1\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "have \"closed S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. closed S", "using asm uniform_discrete_imp_closed"], ["proof (prove)\nusing this:\n  uniform_discrete S\n  uniform_discrete ?S \\<Longrightarrow> closed ?S\n\ngoal (1 subgoal):\n 1. closed S", "by auto"], ["proof (state)\nthis:\n  closed S\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "then"], ["proof (chain)\npicking this:\n  closed S", "have \"e2>0\""], ["proof (prove)\nusing this:\n  closed S\n\ngoal (1 subgoal):\n 1. 0 < e2", "by (simp add: \\<open>0 < e1\\<close> e2_def setdist_gt_0_compact_closed that(1) that(2))"], ["proof (state)\nthis:\n  0 < e2\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "moreover"], ["proof (state)\nthis:\n  0 < e2\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "have \"x = y\" when \"x\\<in>insert a S\" \"y\\<in>insert a S\" \"dist x y < e2 \" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x = y", "have ?thesis when \"x=a\" \"y=a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using that"], ["proof (prove)\nusing this:\n  x = a\n  y = a\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>x = a; y = a\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>x = a; y = a\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "have ?thesis when \"x=a\" \"y\\<in>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using that setdist_le_dist[of x \"{a}\" y S] \\<open>dist x y < e2\\<close>"], ["proof (prove)\nusing this:\n  x = a\n  y \\<in> S\n  \\<lbrakk>x \\<in> {a}; y \\<in> S\\<rbrakk>\n  \\<Longrightarrow> setdist {a} S \\<le> dist x y\n  dist x y < e2\n\ngoal (1 subgoal):\n 1. x = y", "unfolding e2_def"], ["proof (prove)\nusing this:\n  x = a\n  y \\<in> S\n  \\<lbrakk>x \\<in> {a}; y \\<in> S\\<rbrakk>\n  \\<Longrightarrow> setdist {a} S \\<le> dist x y\n  dist x y < min (setdist {a} S) e1\n\ngoal (1 subgoal):\n 1. x = y", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>x = a; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>x = a; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "have ?thesis when \"y=a\" \"x\\<in>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using that setdist_le_dist[of y \"{a}\" x S] \\<open>dist x y < e2\\<close>"], ["proof (prove)\nusing this:\n  y = a\n  x \\<in> S\n  \\<lbrakk>y \\<in> {a}; x \\<in> S\\<rbrakk>\n  \\<Longrightarrow> setdist {a} S \\<le> dist y x\n  dist x y < e2\n\ngoal (1 subgoal):\n 1. x = y", "unfolding e2_def"], ["proof (prove)\nusing this:\n  y = a\n  x \\<in> S\n  \\<lbrakk>y \\<in> {a}; x \\<in> S\\<rbrakk>\n  \\<Longrightarrow> setdist {a} S \\<le> dist y x\n  dist x y < min (setdist {a} S) e1\n\ngoal (1 subgoal):\n 1. x = y", "by (simp add: dist_commute)"], ["proof (state)\nthis:\n  \\<lbrakk>y = a; x \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>y = a; x \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "have ?thesis when \"x\\<in>S\" \"y\\<in>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = y", "using e1_dist[rule_format, OF that] \\<open>dist x y < e2\\<close>"], ["proof (prove)\nusing this:\n  dist y x < e1 \\<Longrightarrow> y = x\n  dist x y < e2\n\ngoal (1 subgoal):\n 1. x = y", "unfolding e2_def"], ["proof (prove)\nusing this:\n  dist y x < e1 \\<Longrightarrow> y = x\n  dist x y < min (setdist {a} S) e1\n\ngoal (1 subgoal):\n 1. x = y", "by (simp add: dist_commute)"], ["proof (state)\nthis:\n  \\<lbrakk>x \\<in> S; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>x = a; y = a\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x = a; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>y = a; x \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x \\<in> S; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = a; y = a\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x = a; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>y = a; x \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x \\<in> S; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. x = y", "using that"], ["proof (prove)\nusing this:\n  \\<lbrakk>x = a; y = a\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x = a; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>y = a; x \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  \\<lbrakk>x \\<in> S; y \\<in> S\\<rbrakk> \\<Longrightarrow> x = y\n  x \\<in> insert a S\n  y \\<in> insert a S\n  dist x y < e2\n\ngoal (1 subgoal):\n 1. x = y", "by auto"], ["proof (state)\nthis:\n  x = y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> insert a S; ?y \\<in> insert a S;\n   dist ?x ?y < e2\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "ultimately"], ["proof (chain)\npicking this:\n  0 < e2\n  \\<lbrakk>?x \\<in> insert a S; ?y \\<in> insert a S;\n   dist ?x ?y < e2\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < e2\n  \\<lbrakk>?x \\<in> insert a S; ?y \\<in> insert a S;\n   dist ?x ?y < e2\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "unfolding uniform_discrete_def"], ["proof (prove)\nusing this:\n  0 < e2\n  \\<lbrakk>?x \\<in> insert a S; ?y \\<in> insert a S;\n   dist ?x ?y < e2\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>insert a S.\n          \\<forall>y\\<in>insert a S. dist x y < e \\<longrightarrow> x = y", "by meson"], ["proof (state)\nthis:\n  uniform_discrete (insert a S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>a \\<notin> S; S \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (2 subgoals):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S\n 2. uniform_discrete S \\<Longrightarrow> uniform_discrete (insert a S)", "ultimately"], ["proof (chain)\npicking this:\n  a \\<in> S \\<Longrightarrow> uniform_discrete (insert a S)\n  S = {} \\<Longrightarrow> uniform_discrete (insert a S)\n  \\<lbrakk>a \\<notin> S; S \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (insert a S)", "show ?thesis"], ["proof (prove)\nusing this:\n  a \\<in> S \\<Longrightarrow> uniform_discrete (insert a S)\n  S = {} \\<Longrightarrow> uniform_discrete (insert a S)\n  \\<lbrakk>a \\<notin> S; S \\<noteq> {}\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (insert a S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S)", "by auto"], ["proof (state)\nthis:\n  uniform_discrete (insert a S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (insert a S) \\<Longrightarrow> uniform_discrete S", "qed (simp add: subset_insertI uniform_discrete_subset)"], ["", "lemma discrete_compact_finite_iff:\n  fixes S :: \"'a::t1_space set\"\n  shows \"discrete S \\<and> compact S \\<longleftrightarrow> finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (discrete S \\<and> compact S) = finite S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> discrete S \\<and> compact S", "assume \"finite S\""], ["proof (state)\nthis:\n  finite S\n\ngoal (2 subgoals):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> discrete S \\<and> compact S", "then"], ["proof (chain)\npicking this:\n  finite S", "have \"compact S\""], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. compact S", "using finite_imp_compact"], ["proof (prove)\nusing this:\n  finite S\n  finite ?s \\<Longrightarrow> compact ?s\n\ngoal (1 subgoal):\n 1. compact S", "by auto"], ["proof (state)\nthis:\n  compact S\n\ngoal (2 subgoals):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> discrete S \\<and> compact S", "moreover"], ["proof (state)\nthis:\n  compact S\n\ngoal (2 subgoals):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> discrete S \\<and> compact S", "have \"discrete S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. discrete S", "unfolding discrete_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. x isolate S", "using isolate_islimpt_iff islimpt_finite[OF \\<open>finite S\\<close>]"], ["proof (prove)\nusing this:\n  ?x isolate ?S = (\\<not> ?x islimpt ?S \\<and> ?x \\<in> ?S)\n  \\<not> ?x islimpt S\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S. x isolate S", "by auto"], ["proof (state)\nthis:\n  discrete S\n\ngoal (2 subgoals):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> discrete S \\<and> compact S", "ultimately"], ["proof (chain)\npicking this:\n  compact S\n  discrete S", "show \"discrete S \\<and> compact S\""], ["proof (prove)\nusing this:\n  compact S\n  discrete S\n\ngoal (1 subgoal):\n 1. discrete S \\<and> compact S", "by auto"], ["proof (state)\nthis:\n  discrete S \\<and> compact S\n\ngoal (1 subgoal):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S", "assume \"discrete S \\<and> compact S\""], ["proof (state)\nthis:\n  discrete S \\<and> compact S\n\ngoal (1 subgoal):\n 1. discrete S \\<and> compact S \\<Longrightarrow> finite S", "then"], ["proof (chain)\npicking this:\n  discrete S \\<and> compact S", "show \"finite S\""], ["proof (prove)\nusing this:\n  discrete S \\<and> compact S\n\ngoal (1 subgoal):\n 1. finite S", "by (meson discrete_def Heine_Borel_imp_Bolzano_Weierstrass isolate_islimpt_iff order_refl)"], ["proof (state)\nthis:\n  finite S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniform_discrete_finite_iff:\n  fixes S :: \"'a::heine_borel set\"\n  shows \"uniform_discrete S \\<and> bounded S \\<longleftrightarrow> finite S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (uniform_discrete S \\<and> bounded S) = finite S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. uniform_discrete S \\<and> bounded S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "assume \"uniform_discrete S \\<and> bounded S\""], ["proof (state)\nthis:\n  uniform_discrete S \\<and> bounded S\n\ngoal (2 subgoals):\n 1. uniform_discrete S \\<and> bounded S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "then"], ["proof (chain)\npicking this:\n  uniform_discrete S \\<and> bounded S", "have \"discrete S\" \"compact S\""], ["proof (prove)\nusing this:\n  uniform_discrete S \\<and> bounded S\n\ngoal (1 subgoal):\n 1. discrete S &&& compact S", "using uniform_discrete_imp_discrete uniform_discrete_imp_closed compact_eq_bounded_closed"], ["proof (prove)\nusing this:\n  uniform_discrete S \\<and> bounded S\n  uniform_discrete ?S \\<Longrightarrow> discrete ?S\n  uniform_discrete ?S \\<Longrightarrow> closed ?S\n  compact ?S = (bounded ?S \\<and> closed ?S)\n\ngoal (1 subgoal):\n 1. discrete S &&& compact S", "by auto"], ["proof (state)\nthis:\n  discrete S\n  compact S\n\ngoal (2 subgoals):\n 1. uniform_discrete S \\<and> bounded S \\<Longrightarrow> finite S\n 2. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "then"], ["proof (chain)\npicking this:\n  discrete S\n  compact S", "show \"finite S\""], ["proof (prove)\nusing this:\n  discrete S\n  compact S\n\ngoal (1 subgoal):\n 1. finite S", "using discrete_compact_finite_iff"], ["proof (prove)\nusing this:\n  discrete S\n  compact S\n  (discrete ?S \\<and> compact ?S) = finite ?S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "assume asm:\"finite S\""], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "let ?thesis = \"uniform_discrete S \\<and> bounded S\""], ["proof (state)\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "have ?thesis when \"S={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "using that"], ["proof (prove)\nusing this:\n  S = {}\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "by auto"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "moreover"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "have ?thesis when \"S\\<noteq>{}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "have \"\\<forall>x. \\<exists>d>0. \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       \\<exists>d>0.\n          \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y", "using finite_set_avoid[OF \\<open>finite S\\<close>]"], ["proof (prove)\nusing this:\n  \\<exists>d>0.\n     \\<forall>x\\<in>S. x \\<noteq> ?a \\<longrightarrow> d \\<le> dist ?a x\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       \\<exists>d>0.\n          \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y", "by auto"], ["proof (state)\nthis:\n  \\<forall>x.\n     \\<exists>d>0.\n        \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     \\<exists>d>0.\n        \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y", "obtain f where f_pos:\"f x>0\" \n        and f_dist: \"\\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> f x \\<le> dist x y\"\n        if \"x\\<in>S\" for x"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     \\<exists>d>0.\n        \\<forall>y\\<in>S. y \\<noteq> x \\<longrightarrow> d \\<le> dist x y\n\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>\\<And>x. x \\<in> S \\<Longrightarrow> 0 < f x;\n         \\<And>x.\n            x \\<in> S \\<Longrightarrow>\n            \\<forall>y\\<in>S.\n               y \\<noteq> x \\<longrightarrow> f x \\<le> dist x y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  ?x \\<in> S \\<Longrightarrow> 0 < f ?x\n  ?x \\<in> S \\<Longrightarrow>\n  \\<forall>y\\<in>S. y \\<noteq> ?x \\<longrightarrow> f ?x \\<le> dist ?x y\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "define f_min where \"f_min \\<equiv> Min (f ` S)\""], ["proof (state)\nthis:\n  f_min \\<equiv> Min (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "have \"f_min > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < f_min", "unfolding f_min_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Min (f ` S)", "by (simp add: asm f_pos that)"], ["proof (state)\nthis:\n  0 < f_min\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "moreover"], ["proof (state)\nthis:\n  0 < f_min\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "have \"\\<forall>x\\<in>S. \\<forall>y\\<in>S. f_min > dist x y \\<longrightarrow> x=y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y", "using f_dist"], ["proof (prove)\nusing this:\n  ?x \\<in> S \\<Longrightarrow>\n  \\<forall>y\\<in>S. y \\<noteq> ?x \\<longrightarrow> f ?x \\<le> dist ?x y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y", "unfolding f_min_def"], ["proof (prove)\nusing this:\n  ?x \\<in> S \\<Longrightarrow>\n  \\<forall>y\\<in>S. y \\<noteq> ?x \\<longrightarrow> f ?x \\<le> dist ?x y\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>S.\n       \\<forall>y\\<in>S. dist x y < Min (f ` S) \\<longrightarrow> x = y", "by (metis Min_gr_iff all_not_in_conv asm dual_order.irrefl eq_iff finite_imageI imageI \n          less_eq_real_def)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>S.\n     \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "ultimately"], ["proof (chain)\npicking this:\n  0 < f_min\n  \\<forall>x\\<in>S.\n     \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y", "have \"uniform_discrete S\""], ["proof (prove)\nusing this:\n  0 < f_min\n  \\<forall>x\\<in>S.\n     \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. uniform_discrete S", "unfolding uniform_discrete_def"], ["proof (prove)\nusing this:\n  0 < f_min\n  \\<forall>x\\<in>S.\n     \\<forall>y\\<in>S. dist x y < f_min \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>S.\n          \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y", "by auto"], ["proof (state)\nthis:\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "moreover"], ["proof (state)\nthis:\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "have \"bounded S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded S", "using \\<open>finite S\\<close>"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. bounded S", "by auto"], ["proof (state)\nthis:\n  bounded S\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "ultimately"], ["proof (chain)\npicking this:\n  uniform_discrete S\n  bounded S", "show ?thesis"], ["proof (prove)\nusing this:\n  uniform_discrete S\n  bounded S\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "by auto"], ["proof (state)\nthis:\n  uniform_discrete S \\<and> bounded S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<noteq> {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n\ngoal (1 subgoal):\n 1. finite S \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "ultimately"], ["proof (chain)\npicking this:\n  S = {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n  S \\<noteq> {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S", "show ?thesis"], ["proof (prove)\nusing this:\n  S = {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n  S \\<noteq> {} \\<Longrightarrow> uniform_discrete S \\<and> bounded S\n\ngoal (1 subgoal):\n 1. uniform_discrete S \\<and> bounded S", "by blast"], ["proof (state)\nthis:\n  uniform_discrete S \\<and> bounded S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma uniform_discrete_image_scale:\n  fixes f :: \"'a::euclidean_space \\<Rightarrow> 'b::euclidean_space\"\n  assumes \"uniform_discrete S\" and dist:\"\\<forall>x\\<in>S. \\<forall>y\\<in>S. dist x y = c * dist (f x) (f y)\"\n  shows \"uniform_discrete (f ` S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have ?thesis when \"S={}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "using that"], ["proof (prove)\nusing this:\n  S = {}\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "by auto"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  S = {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have ?thesis when \"S\\<noteq>{}\" \"c\\<le>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "obtain x1 where \"x1\\<in>S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1. x1 \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using \\<open>S\\<noteq>{}\\<close>"], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x1. x1 \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> S\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have ?thesis when \"S-{x1} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have \"S={x1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S = {x1}", "using that \\<open>S\\<noteq>{}\\<close>"], ["proof (prove)\nusing this:\n  S - {x1} = {}\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. S = {x1}", "by auto"], ["proof (state)\nthis:\n  S = {x1}\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "then"], ["proof (chain)\npicking this:\n  S = {x1}", "show ?thesis"], ["proof (prove)\nusing this:\n  S = {x1}\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "using uniform_discrete_insert[of \"f x1\"]"], ["proof (prove)\nusing this:\n  S = {x1}\n  uniform_discrete (insert (f x1) ?S) = uniform_discrete ?S\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "by auto"], ["proof (state)\nthis:\n  uniform_discrete (f ` S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S - {x1} = {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  S - {x1} = {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have ?thesis when \"S-{x1} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "obtain x2 where \"x2\\<in>S-{x1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x2. x2 \\<in> S - {x1} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>S-{x1} \\<noteq> {}\\<close>"], ["proof (prove)\nusing this:\n  S - {x1} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x2. x2 \\<in> S - {x1} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x2 \\<in> S - {x1}\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "then"], ["proof (chain)\npicking this:\n  x2 \\<in> S - {x1}", "have \"x2\\<in>S\" \"x1\\<noteq>x2\""], ["proof (prove)\nusing this:\n  x2 \\<in> S - {x1}\n\ngoal (1 subgoal):\n 1. x2 \\<in> S &&& x1 \\<noteq> x2", "by auto"], ["proof (state)\nthis:\n  x2 \\<in> S\n  x1 \\<noteq> x2\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "then"], ["proof (chain)\npicking this:\n  x2 \\<in> S\n  x1 \\<noteq> x2", "have \"dist x1 x2 > 0\""], ["proof (prove)\nusing this:\n  x2 \\<in> S\n  x1 \\<noteq> x2\n\ngoal (1 subgoal):\n 1. 0 < dist x1 x2", "by auto"], ["proof (state)\nthis:\n  0 < dist x1 x2\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  0 < dist x1 x2\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have \"dist x1 x2 = c * dist (f x1) (f x2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist x1 x2 = c * dist (f x1) (f x2)", "using dist[rule_format, OF \\<open>x1\\<in>S\\<close> \\<open>x2\\<in>S\\<close>]"], ["proof (prove)\nusing this:\n  dist x1 x2 = c * dist (f x1) (f x2)\n\ngoal (1 subgoal):\n 1. dist x1 x2 = c * dist (f x1) (f x2)", "."], ["proof (state)\nthis:\n  dist x1 x2 = c * dist (f x1) (f x2)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  dist x1 x2 = c * dist (f x1) (f x2)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have \"dist (f x2) (f x2) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> dist (f x2) (f x2)", "by auto"], ["proof (state)\nthis:\n  0 \\<le> dist (f x2) (f x2)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "ultimately"], ["proof (chain)\npicking this:\n  0 < dist x1 x2\n  dist x1 x2 = c * dist (f x1) (f x2)\n  0 \\<le> dist (f x2) (f x2)", "have False"], ["proof (prove)\nusing this:\n  0 < dist x1 x2\n  dist x1 x2 = c * dist (f x1) (f x2)\n  0 \\<le> dist (f x2) (f x2)\n\ngoal (1 subgoal):\n 1. False", "using \\<open>c\\<le>0\\<close>"], ["proof (prove)\nusing this:\n  0 < dist x1 x2\n  dist x1 x2 = c * dist (f x1) (f x2)\n  0 \\<le> dist (f x2) (f x2)\n  c \\<le> 0\n\ngoal (1 subgoal):\n 1. False", "by (simp add: zero_less_mult_iff)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "by auto"], ["proof (state)\nthis:\n  uniform_discrete (f ` S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S - {x1} \\<noteq> {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "ultimately"], ["proof (chain)\npicking this:\n  S - {x1} = {} \\<Longrightarrow> uniform_discrete (f ` S)\n  S - {x1} \\<noteq> {} \\<Longrightarrow> uniform_discrete (f ` S)", "show ?thesis"], ["proof (prove)\nusing this:\n  S - {x1} = {} \\<Longrightarrow> uniform_discrete (f ` S)\n  S - {x1} \\<noteq> {} \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "by auto"], ["proof (state)\nthis:\n  uniform_discrete (f ` S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<noteq> {}; c \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<noteq> {}; c \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have ?thesis when \"S\\<noteq>{}\" \"c>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "obtain e1 where \"e1>0\" and e1_dist:\"\\<forall>x\\<in>S. \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>uniform_discrete S\\<close>"], ["proof (prove)\nusing this:\n  uniform_discrete S\n\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding uniform_discrete_def"], ["proof (prove)\nusing this:\n  \\<exists>e>0.\n     \\<forall>x\\<in>S.\n        \\<forall>y\\<in>S. dist x y < e \\<longrightarrow> x = y\n\ngoal (1 subgoal):\n 1. (\\<And>e1.\n        \\<lbrakk>0 < e1;\n         \\<forall>x\\<in>S.\n            \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  0 < e1\n  \\<forall>x\\<in>S. \\<forall>y\\<in>S. dist y x < e1 \\<longrightarrow> y = x\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "define e where \"e= e1/c\""], ["proof (state)\nthis:\n  e = e1 / c\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have \"x1 = x2\" when \"x1\\<in> f ` S\" \"x2\\<in> f ` S\" \"dist x1 x2 < e \" for x1 x2"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 = x2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 = x2", "obtain y1 where y1:\"y1\\<in>S\" \"x1=f y1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> S; x1 = f y1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>x1\\<in> f ` S\\<close>"], ["proof (prove)\nusing this:\n  x1 \\<in> f ` S\n\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        \\<lbrakk>y1 \\<in> S; x1 = f y1\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y1 \\<in> S\n  x1 = f y1\n\ngoal (1 subgoal):\n 1. x1 = x2", "obtain y2 where y2:\"y2\\<in>S\" \"x2=f y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y2.\n        \\<lbrakk>y2 \\<in> S; x2 = f y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>x2\\<in> f ` S\\<close>"], ["proof (prove)\nusing this:\n  x2 \\<in> f ` S\n\ngoal (1 subgoal):\n 1. (\\<And>y2.\n        \\<lbrakk>y2 \\<in> S; x2 = f y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y2 \\<in> S\n  x2 = f y2\n\ngoal (1 subgoal):\n 1. x1 = x2", "have \"dist y1 y2 < e1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dist y1 y2 < e1", "using dist[rule_format, OF y1(1) y2(1)] \\<open>c>0\\<close> \\<open>dist x1 x2 < e\\<close>"], ["proof (prove)\nusing this:\n  dist y1 y2 = c * dist (f y1) (f y2)\n  0 < c\n  dist x1 x2 < e\n\ngoal (1 subgoal):\n 1. dist y1 y2 < e1", "unfolding e_def"], ["proof (prove)\nusing this:\n  dist y1 y2 = c * dist (f y1) (f y2)\n  0 < c\n  dist x1 x2 < e1 / c\n\ngoal (1 subgoal):\n 1. dist y1 y2 < e1", "apply (fold y1(2) y2(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dist y1 y2 = c * dist x1 x2; 0 < c;\n     dist x1 x2 < e1 / c\\<rbrakk>\n    \\<Longrightarrow> dist y1 y2 < e1", "by (auto simp add:divide_simps mult.commute)"], ["proof (state)\nthis:\n  dist y1 y2 < e1\n\ngoal (1 subgoal):\n 1. x1 = x2", "then"], ["proof (chain)\npicking this:\n  dist y1 y2 < e1", "have \"y1=y2\""], ["proof (prove)\nusing this:\n  dist y1 y2 < e1\n\ngoal (1 subgoal):\n 1. y1 = y2", "using e1_dist[rule_format, OF y2(1) y1(1)]"], ["proof (prove)\nusing this:\n  dist y1 y2 < e1\n  dist y1 y2 < e1 \\<Longrightarrow> y1 = y2\n\ngoal (1 subgoal):\n 1. y1 = y2", "by simp"], ["proof (state)\nthis:\n  y1 = y2\n\ngoal (1 subgoal):\n 1. x1 = x2", "then"], ["proof (chain)\npicking this:\n  y1 = y2", "show \"x1=x2\""], ["proof (prove)\nusing this:\n  y1 = y2\n\ngoal (1 subgoal):\n 1. x1 = x2", "using y1(2) y2(2)"], ["proof (prove)\nusing this:\n  y1 = y2\n  x1 = f y1\n  x2 = f y2\n\ngoal (1 subgoal):\n 1. x1 = x2", "by auto"], ["proof (state)\nthis:\n  x1 = x2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x1.0 \\<in> f ` S; ?x2.0 \\<in> f ` S;\n   dist ?x1.0 ?x2.0 < e\\<rbrakk>\n  \\<Longrightarrow> ?x1.0 = ?x2.0\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>?x1.0 \\<in> f ` S; ?x2.0 \\<in> f ` S;\n   dist ?x1.0 ?x2.0 < e\\<rbrakk>\n  \\<Longrightarrow> ?x1.0 = ?x2.0\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "have \"e>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < e", "using \\<open>e1>0\\<close> \\<open>c>0\\<close>"], ["proof (prove)\nusing this:\n  0 < e1\n  0 < c\n\ngoal (1 subgoal):\n 1. 0 < e", "unfolding e_def"], ["proof (prove)\nusing this:\n  0 < e1\n  0 < c\n\ngoal (1 subgoal):\n 1. 0 < e1 / c", "by auto"], ["proof (state)\nthis:\n  0 < e\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x1.0 \\<in> f ` S; ?x2.0 \\<in> f ` S;\n   dist ?x1.0 ?x2.0 < e\\<rbrakk>\n  \\<Longrightarrow> ?x1.0 = ?x2.0\n  0 < e", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1.0 \\<in> f ` S; ?x2.0 \\<in> f ` S;\n   dist ?x1.0 ?x2.0 < e\\<rbrakk>\n  \\<Longrightarrow> ?x1.0 = ?x2.0\n  0 < e\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "unfolding uniform_discrete_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x1.0 \\<in> f ` S; ?x2.0 \\<in> f ` S;\n   dist ?x1.0 ?x2.0 < e\\<rbrakk>\n  \\<Longrightarrow> ?x1.0 = ?x2.0\n  0 < e\n\ngoal (1 subgoal):\n 1. \\<exists>e>0.\n       \\<forall>x\\<in>f ` S.\n          \\<forall>y\\<in>f ` S. dist x y < e \\<longrightarrow> x = y", "by meson"], ["proof (state)\nthis:\n  uniform_discrete (f ` S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>S \\<noteq> {}; 0 < c\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "ultimately"], ["proof (chain)\npicking this:\n  S = {} \\<Longrightarrow> uniform_discrete (f ` S)\n  \\<lbrakk>S \\<noteq> {}; c \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n  \\<lbrakk>S \\<noteq> {}; 0 < c\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)", "show ?thesis"], ["proof (prove)\nusing this:\n  S = {} \\<Longrightarrow> uniform_discrete (f ` S)\n  \\<lbrakk>S \\<noteq> {}; c \\<le> 0\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n  \\<lbrakk>S \\<noteq> {}; 0 < c\\<rbrakk>\n  \\<Longrightarrow> uniform_discrete (f ` S)\n\ngoal (1 subgoal):\n 1. uniform_discrete (f ` S)", "by fastforce"], ["proof (state)\nthis:\n  uniform_discrete (f ` S)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}