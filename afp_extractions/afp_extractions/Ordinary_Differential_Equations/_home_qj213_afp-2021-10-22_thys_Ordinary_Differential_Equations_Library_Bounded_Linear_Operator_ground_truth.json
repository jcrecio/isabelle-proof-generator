{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinary_Differential_Equations/Library/Bounded_Linear_Operator.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinary_Differential_Equations", "problem_names": ["lemma bounded_bilinear_blinop_apply: \"bounded_bilinear ($)\"", "lemma blinop_eqI: \"(\\<And>i. x $ i = y $ i) \\<Longrightarrow> x = y\"", "lemmas bounded_linear_apply_blinop[intro, simp] = blinop.bounded_linear_left", "lemma blinop_apply_one_blinop[simp]: \"1 $ x = x\"", "lemma blinop_apply_times_blinop[simp]: \"(f * g) $ x = f $ (g $ x)\"", "lemmas bounded_bilinear_bounded_uniform_limit_intros[uniform_limit_intros] =\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Operator.bounded_bilinear_blinop_apply]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Function.bounded_bilinear_blinfun_apply]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Operator.blinop.flip]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Function.blinfun.flip]\n  bounded_linear.uniform_limit[OF blinop.bounded_linear_right]\n  bounded_linear.uniform_limit[OF blinop.bounded_linear_left]\n  bounded_linear.uniform_limit[OF bounded_linear_apply_blinop]"], "translations": [["", "lemma bounded_bilinear_blinop_apply: \"bounded_bilinear ($)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_bilinear ($)", "unfolding bounded_bilinear_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<forall>a a' b. (a + a') $ b = a $ b + a' $ b) \\<and>\n     (\\<forall>a b b'. a $ (b + b') = a $ b + a $ b')) \\<and>\n    (\\<forall>r a b. (r *\\<^sub>R a) $ b = r *\\<^sub>R a $ b) \\<and>\n    (\\<forall>a r b. a $ (r *\\<^sub>R b) = r *\\<^sub>R a $ b) \\<and>\n    (\\<exists>K. \\<forall>a b. norm (a $ b) \\<le> norm a * norm b * K)", "by transfer (simp add: blinfun.bilinear_simps blinfun.bounded)"], ["", "interpretation blinop: bounded_bilinear \"($)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded_bilinear ($)", "by (rule bounded_bilinear_blinop_apply)"], ["", "lemma blinop_eqI: \"(\\<And>i. x $ i = y $ i) \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. x $ i = y $ i) \\<Longrightarrow> x = y", "by transfer (rule blinfun_eqI)"], ["", "lemmas bounded_linear_apply_blinop[intro, simp] = blinop.bounded_linear_left"], ["", "declare blinop.tendsto[tendsto_intros]"], ["", "declare blinop.FDERIV[derivative_intros]"], ["", "declare blinop.continuous[continuous_intros]"], ["", "declare blinop.continuous_on[continuous_intros]"], ["", "instance blinop :: (banach) banach"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a blinop, banach_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X. Cauchy X \\<Longrightarrow> convergent X", "unfolding convergent_def LIMSEQ_def Cauchy_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<forall>e>0.\n          \\<exists>M.\n             \\<forall>m\\<ge>M.\n                \\<forall>n\\<ge>M. dist (X m) (X n) < e \\<Longrightarrow>\n       \\<exists>L.\n          \\<forall>r>0. \\<exists>no. \\<forall>n\\<ge>no. dist (X n) L < r", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X.\n       \\<forall>e>0.\n          \\<exists>M.\n             \\<forall>m\\<ge>M.\n                \\<forall>n\\<ge>M. dist (X m) (X n) < e \\<Longrightarrow>\n       \\<exists>L.\n          \\<forall>r>0. \\<exists>no. \\<forall>n\\<ge>no. dist (X n) L < r", "unfolding convergent_def[symmetric] LIMSEQ_def[symmetric] Cauchy_def[symmetric]\n    Cauchy_convergent_iff"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X. convergent X \\<Longrightarrow> convergent X", "."], ["", "instance blinop :: (euclidean_space) heine_borel"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a blinop, heine_borel_class)", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       bounded (range f) \\<Longrightarrow>\n       \\<exists>l r.\n          strict_mono r \\<and> (f \\<circ> r) \\<longlonglongrightarrow> l", "unfolding LIMSEQ_def bounded_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<exists>x e.\n          \\<forall>y\\<in>range f. dist x y \\<le> e \\<Longrightarrow>\n       \\<exists>l r.\n          strict_mono r \\<and>\n          (\\<forall>ra>0.\n              \\<exists>no. \\<forall>n\\<ge>no. dist ((f \\<circ> r) n) l < ra)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<exists>x e.\n          \\<forall>y\\<in>range f. dist x y \\<le> e \\<Longrightarrow>\n       \\<exists>l r.\n          strict_mono r \\<and>\n          (\\<forall>ra>0.\n              \\<exists>no. \\<forall>n\\<ge>no. dist ((f \\<circ> r) n) l < ra)", "unfolding LIMSEQ_def[symmetric] bounded_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       bounded (range f) \\<Longrightarrow>\n       \\<exists>l r.\n          strict_mono r \\<and> (f \\<circ> r) \\<longlonglongrightarrow> l", "apply (rule bounded_imp_convergent_subsequence)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f. bounded (range f) \\<Longrightarrow> bounded (range f)", "."], ["", "instantiation blinop::(\"{real_normed_vector, perfect_space}\") real_normed_algebra_1\nbegin"], ["", "lift_definition one_blinop::\"'a blinop\" is id_blinfun"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma blinop_apply_one_blinop[simp]: \"1 $ x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 $ x = x", "by transfer simp"], ["", "lift_definition times_blinop :: \"'a blinop \\<Rightarrow> 'a blinop \\<Rightarrow> 'a blinop\" is blinfun_compose"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma blinop_apply_times_blinop[simp]: \"(f * g) $ x = f $ (g $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f * g) $ x = f $ (g $ x)", "by transfer simp"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a blinop, real_normed_algebra_1_class)", "proof"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c\n 3. \\<And>a b c. a * (b + c) = a * b + a * c\n 4. \\<And>a x y. a *\\<^sub>R x * y = a *\\<^sub>R (x * y)\n 5. \\<And>x a y. x * a *\\<^sub>R y = a *\\<^sub>R (x * y)\n 6. \\<And>a. 1 * a = a\n 7. \\<And>a. a * 1 = a\n 8. 0 \\<noteq> 1\n 9. \\<And>x y. norm (x * y) \\<le> norm x * norm y\n 10. norm 1 = 1", "from not_open_singleton[of \"0::'a\"]"], ["proof (chain)\npicking this:\n  \\<not> open {0::'a}", "have \"{0::'a} \\<noteq> UNIV\""], ["proof (prove)\nusing this:\n  \\<not> open {0::'a}\n\ngoal (1 subgoal):\n 1. {0::'a} \\<noteq> UNIV", "by force"], ["proof (state)\nthis:\n  {0::'a} \\<noteq> UNIV\n\ngoal (10 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c\n 3. \\<And>a b c. a * (b + c) = a * b + a * c\n 4. \\<And>a x y. a *\\<^sub>R x * y = a *\\<^sub>R (x * y)\n 5. \\<And>x a y. x * a *\\<^sub>R y = a *\\<^sub>R (x * y)\n 6. \\<And>a. 1 * a = a\n 7. \\<And>a. a * 1 = a\n 8. 0 \\<noteq> 1\n 9. \\<And>x y. norm (x * y) \\<le> norm x * norm y\n 10. norm 1 = 1", "then"], ["proof (chain)\npicking this:\n  {0::'a} \\<noteq> UNIV", "obtain x :: 'a where \"x \\<noteq> 0\""], ["proof (prove)\nusing this:\n  {0::'a} \\<noteq> UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<noteq> (0::'a) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x \\<noteq> (0::'a)\n\ngoal (10 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c\n 3. \\<And>a b c. a * (b + c) = a * b + a * c\n 4. \\<And>a x y. a *\\<^sub>R x * y = a *\\<^sub>R (x * y)\n 5. \\<And>x a y. x * a *\\<^sub>R y = a *\\<^sub>R (x * y)\n 6. \\<And>a. 1 * a = a\n 7. \\<And>a. a * 1 = a\n 8. 0 \\<noteq> 1\n 9. \\<And>x y. norm (x * y) \\<le> norm x * norm y\n 10. norm 1 = 1", "show \"0 \\<noteq> (1::'a blinop)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> 1", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<noteq> id_blinfun", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 0::'a) \\<noteq> (\\<lambda>x. x)", "apply (auto dest!: fun_cong[where x=x] simp: \\<open>x \\<noteq> 0\\<close>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  0 \\<noteq> 1\n\ngoal (9 subgoals):\n 1. \\<And>a b c. a * b * c = a * (b * c)\n 2. \\<And>a b c. (a + b) * c = a * c + b * c\n 3. \\<And>a b c. a * (b + c) = a * b + a * c\n 4. \\<And>a x y. a *\\<^sub>R x * y = a *\\<^sub>R (x * y)\n 5. \\<And>x a y. x * a *\\<^sub>R y = a *\\<^sub>R (x * y)\n 6. \\<And>a. 1 * a = a\n 7. \\<And>a. a * 1 = a\n 8. \\<And>x y. norm (x * y) \\<le> norm x * norm y\n 9. norm 1 = 1", "qed (transfer, transfer,\n  simp add: o_def linear_simps onorm_compose onorm_id onorm_compose[simplified o_def])+"], ["", "end"], ["", "lemmas bounded_bilinear_bounded_uniform_limit_intros[uniform_limit_intros] =\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Operator.bounded_bilinear_blinop_apply]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Function.bounded_bilinear_blinfun_apply]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Operator.blinop.flip]\n  bounded_bilinear.bounded_uniform_limit[OF Bounded_Linear_Function.blinfun.flip]\n  bounded_linear.uniform_limit[OF blinop.bounded_linear_right]\n  bounded_linear.uniform_limit[OF blinop.bounded_linear_left]\n  bounded_linear.uniform_limit[OF bounded_linear_apply_blinop]"], ["", "no_notation\n  blinop_apply (infixl \"$\" 999)"], ["", "notation vec_nth (infixl \"$\" 90)"], ["", "end"]]}