{"file_name": "/home/qj213/afp-2021-10-22/thys/Ordinary_Differential_Equations/Library/Linear_ODE.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Ordinary_Differential_Equations", "problem_names": ["lemma\n  exp_scaleR_has_derivative_right[derivative_intros]:\n  fixes f::\"real \\<Rightarrow> real\"\n  assumes \"(f has_derivative f') (at x within s)\"\n  shows \"((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A))) (at x within s)\"", "lemma linode_solution_solves_ode:\n  \"(linode_solution t0 x0 solves_ode (\\<lambda>_. A)) UNIV UNIV\" \"linode_solution t0 x0 t0 = x0\"", "lemma \"(linode_solution t0 x0 usolves_ode (\\<lambda>_. A) from t0) UNIV UNIV\""], "translations": [["", "lemma\n  exp_scaleR_has_derivative_right[derivative_intros]:\n  fixes f::\"real \\<Rightarrow> real\"\n  assumes \"(f has_derivative f') (at x within s)\"\n  shows \"((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A))) (at x within s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "from assms"], ["proof (chain)\npicking this:\n  (f has_derivative f') (at x within s)", "have \"bounded_linear f'\""], ["proof (prove)\nusing this:\n  (f has_derivative f') (at x within s)\n\ngoal (1 subgoal):\n 1. bounded_linear f'", "by auto"], ["proof (state)\nthis:\n  bounded_linear f'\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "with real_bounded_linear"], ["proof (chain)\npicking this:\n  bounded_linear ?f = (\\<exists>c. ?f = (\\<lambda>x. x * c))\n  bounded_linear f'", "obtain m where f': \"f' = (\\<lambda>h. h * m)\""], ["proof (prove)\nusing this:\n  bounded_linear ?f = (\\<exists>c. ?f = (\\<lambda>x. x * c))\n  bounded_linear f'\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        f' = (\\<lambda>h. h * m) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f' = (\\<lambda>h. h * m)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "using vector_diff_chain_within[OF _ exp_scaleR_has_vector_derivative_right, of f m x s A] assms f'"], ["proof (prove)\nusing this:\n  (f has_vector_derivative m) (at x within s) \\<Longrightarrow>\n  ((\\<lambda>t. exp (t *\\<^sub>R A)) \\<circ> f has_vector_derivative\n   m *\\<^sub>R (exp (f x *\\<^sub>R A) * A))\n   (at x within s)\n  (f has_derivative f') (at x within s)\n  f' = (\\<lambda>h. h * m)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n     (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n     (at x within s)", "by (auto simp: has_vector_derivative_def o_def)"], ["proof (state)\nthis:\n  ((\\<lambda>x. exp (f x *\\<^sub>R A)) has_derivative\n   (\\<lambda>h. f' h *\\<^sub>R (exp (f x *\\<^sub>R A) * A)))\n   (at x within s)\n\ngoal:\nNo subgoals!", "qed"], ["", "context\nfixes A::\"'a::{banach,perfect_space} blinop\"\nbegin"], ["", "definition \"linode_solution t0 x0 = (\\<lambda>t. exp ((t - t0) *\\<^sub>R A) x0)\""], ["", "lemma linode_solution_solves_ode:\n  \"(linode_solution t0 x0 solves_ode (\\<lambda>_. A)) UNIV UNIV\" \"linode_solution t0 x0 t0 = x0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.linode_solution t0 x0 solves_ode (\\<lambda>x. blinop_apply A))\n     UNIV UNIV &&&\n    local.linode_solution t0 x0 t0 = x0", "by (auto intro!: solves_odeI derivative_eq_intros\n    simp: has_vector_derivative_def blinop.bilinear_simps exp_times_scaleR_commute\n      has_vderiv_on_def linode_solution_def)"], ["", "lemma \"(linode_solution t0 x0 usolves_ode (\\<lambda>_. A) from t0) UNIV UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (local.linode_solution t0\n      x0 usolves_ode (\\<lambda>x. blinop_apply A) from t0)\n     UNIV UNIV", "using linode_solution_solves_ode(1)"], ["proof (prove)\nusing this:\n  (local.linode_solution ?t0.0 ?x0.0 solves_ode\n   (\\<lambda>x. blinop_apply A))\n   UNIV UNIV\n\ngoal (1 subgoal):\n 1. (local.linode_solution t0\n      x0 usolves_ode (\\<lambda>x. blinop_apply A) from t0)\n     UNIV UNIV", "proof (rule usolves_odeI)"], ["proof (state)\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "fix s t1"], ["proof (state)\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "assume s0: \"s t0 = linode_solution t0 x0 t0\""], ["proof (state)\nthis:\n  s t0 = local.linode_solution t0 x0 t0\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "assume sol: \"(s solves_ode (\\<lambda>x. blinop_apply A)) {t0--t1} UNIV\""], ["proof (state)\nthis:\n  (s solves_ode (\\<lambda>x. blinop_apply A)) {t0--t1} UNIV\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "then"], ["proof (chain)\npicking this:\n  (s solves_ode (\\<lambda>x. blinop_apply A)) {t0--t1} UNIV", "have [derivative_intros]:\n    \"(s has_derivative (\\<lambda>h. h *\\<^sub>R A (s t))) (at t within {t0 -- t1})\" if \"t \\<in> {t0 -- t1}\" for t"], ["proof (prove)\nusing this:\n  (s solves_ode (\\<lambda>x. blinop_apply A)) {t0--t1} UNIV\n\ngoal (1 subgoal):\n 1. (s has_derivative (\\<lambda>h. h *\\<^sub>R blinop_apply A (s t)))\n     (at t within {t0--t1})", "using that"], ["proof (prove)\nusing this:\n  (s solves_ode (\\<lambda>x. blinop_apply A)) {t0--t1} UNIV\n  t \\<in> {t0--t1}\n\ngoal (1 subgoal):\n 1. (s has_derivative (\\<lambda>h. h *\\<^sub>R blinop_apply A (s t)))\n     (at t within {t0--t1})", "by (auto dest!: solves_odeD(1) simp: has_vector_derivative_def has_vderiv_on_def)"], ["proof (state)\nthis:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  (s has_derivative (\\<lambda>h. h *\\<^sub>R blinop_apply A (s ?t)))\n   (at ?t within {t0--t1})\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "have \"((\\<lambda>t. exp (-(t - t0) *\\<^sub>R A) (s t)) has_derivative (\\<lambda>_. 0)) (at t within {t0 -- t1})\"\n    (is \"(?es has_derivative _) _\")\n    if \"t \\<in> {t0 -- t1}\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>t.\n         blinop_apply (exp (- (t - t0) *\\<^sub>R A)) (s t)) has_derivative\n     (\\<lambda>_. 0::'a))\n     (at t within {t0--t1})", "by (auto intro!: derivative_eq_intros that simp: has_vector_derivative_def\n      blinop.bilinear_simps)"], ["proof (state)\nthis:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  ((\\<lambda>t.\n       blinop_apply (exp (- (t - t0) *\\<^sub>R A)) (s t)) has_derivative\n   (\\<lambda>_. 0::'a))\n   (at ?t within {t0--t1})\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "from has_derivative_zero_constant[OF convex_closed_segment this]"], ["proof (chain)\npicking this:\n  (\\<And>x.\n      x \\<in> {t0--t1} \\<Longrightarrow> x \\<in> {t0--t1}) \\<Longrightarrow>\n  \\<exists>c.\n     \\<forall>x\\<in>{t0--t1}.\n        blinop_apply (exp (- (x - t0) *\\<^sub>R A)) (s x) = c", "obtain c where c: \"\\<And>t. t \\<in> {t0 -- t1} \\<Longrightarrow> ?es t = c\""], ["proof (prove)\nusing this:\n  (\\<And>x.\n      x \\<in> {t0--t1} \\<Longrightarrow> x \\<in> {t0--t1}) \\<Longrightarrow>\n  \\<exists>c.\n     \\<forall>x\\<in>{t0--t1}.\n        blinop_apply (exp (- (x - t0) *\\<^sub>R A)) (s x) = c\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        (\\<And>t.\n            t \\<in> {t0--t1} \\<Longrightarrow>\n            blinop_apply (exp (- (t - t0) *\\<^sub>R A)) (s t) =\n            c) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  blinop_apply (exp (- (?t - t0) *\\<^sub>R A)) (s ?t) = c\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "hence \"(exp ((t - t0) *\\<^sub>R A) * (exp (-((t - t0) *\\<^sub>R A)))) (s t) = exp ((t - t0) *\\<^sub>R A) c\"\n    if \"t \\<in> {t0 -- t1}\" for t"], ["proof (prove)\nusing this:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  blinop_apply (exp (- (?t - t0) *\\<^sub>R A)) (s ?t) = c\n\ngoal (1 subgoal):\n 1. blinop_apply\n     (exp ((t - t0) *\\<^sub>R A) * exp (- ((t - t0) *\\<^sub>R A))) (s t) =\n    blinop_apply (exp ((t - t0) *\\<^sub>R A)) c", "by (metis (no_types, hide_lams) blinop_apply_times_blinop real_vector.scale_minus_left that)"], ["proof (state)\nthis:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  blinop_apply\n   (exp ((?t - t0) *\\<^sub>R A) * exp (- ((?t - t0) *\\<^sub>R A))) (s ?t) =\n  blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "then"], ["proof (chain)\npicking this:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  blinop_apply\n   (exp ((?t - t0) *\\<^sub>R A) * exp (- ((?t - t0) *\\<^sub>R A))) (s ?t) =\n  blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c", "have s_def: \"s t = exp ((t - t0) *\\<^sub>R A) c\" if \"t \\<in> {t0 -- t1}\" for t"], ["proof (prove)\nusing this:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  blinop_apply\n   (exp ((?t - t0) *\\<^sub>R A) * exp (- ((?t - t0) *\\<^sub>R A))) (s ?t) =\n  blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c\n\ngoal (1 subgoal):\n 1. s t = blinop_apply (exp ((t - t0) *\\<^sub>R A)) c", "by (simp add: exp_minus_inverse that)"], ["proof (state)\nthis:\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  s ?t = blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "from s0 s_def"], ["proof (chain)\npicking this:\n  s t0 = local.linode_solution t0 x0 t0\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  s ?t = blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c", "have \"exp ((t0 - t0) *\\<^sub>R A) c = x0\""], ["proof (prove)\nusing this:\n  s t0 = local.linode_solution t0 x0 t0\n  ?t \\<in> {t0--t1} \\<Longrightarrow>\n  s ?t = blinop_apply (exp ((?t - t0) *\\<^sub>R A)) c\n\ngoal (1 subgoal):\n 1. blinop_apply (exp ((t0 - t0) *\\<^sub>R A)) c = x0", "by (simp add: linode_solution_solves_ode(2))"], ["proof (state)\nthis:\n  blinop_apply (exp ((t0 - t0) *\\<^sub>R A)) c = x0\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "hence \"c = x0\""], ["proof (prove)\nusing this:\n  blinop_apply (exp ((t0 - t0) *\\<^sub>R A)) c = x0\n\ngoal (1 subgoal):\n 1. c = x0", "by (simp add: )"], ["proof (state)\nthis:\n  c = x0\n\ngoal (3 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV\n 3. \\<And>z t.\n       \\<lbrakk>{t0--t} \\<subseteq> UNIV;\n        (z solves_ode (\\<lambda>x. blinop_apply A)) {t0--t} UNIV;\n        z t0 = local.linode_solution t0 x0 t0\\<rbrakk>\n       \\<Longrightarrow> z t = local.linode_solution t0 x0 t", "then"], ["proof (chain)\npicking this:\n  c = x0", "show \"s t1 = linode_solution t0 x0 t1\""], ["proof (prove)\nusing this:\n  c = x0\n\ngoal (1 subgoal):\n 1. s t1 = local.linode_solution t0 x0 t1", "using s_def[of t1]"], ["proof (prove)\nusing this:\n  c = x0\n  t1 \\<in> {t0--t1} \\<Longrightarrow>\n  s t1 = blinop_apply (exp ((t1 - t0) *\\<^sub>R A)) c\n\ngoal (1 subgoal):\n 1. s t1 = local.linode_solution t0 x0 t1", "by (simp add: linode_solution_def)"], ["proof (state)\nthis:\n  s t1 = local.linode_solution t0 x0 t1\n\ngoal (2 subgoals):\n 1. t0 \\<in> UNIV\n 2. is_interval UNIV", "qed auto"], ["", "end"], ["", "end"]]}