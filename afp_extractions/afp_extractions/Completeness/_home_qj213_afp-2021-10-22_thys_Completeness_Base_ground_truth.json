{"file_name": "/home/qj213/afp-2021-10-22/thys/Completeness/Base.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Completeness", "problem_names": ["lemma natset_finite_max: assumes a: \"finite A\"\n  shows \"Suc (Max A) \\<notin> A\"", "lemma not_finite_univ: \"~ finite (UNIV::nat set)\"", "lemma LeastI_ex: \"(\\<exists> x. P (x::'a::wellorder)) \\<Longrightarrow> P (LEAST x. P x)\"", "lemma preImage_insert: \"preImage f (insert a A) = pre f a Un preImage f A\"", "lemma preImageI: \"f x : A ==> x : preImage f A\"", "lemma preImageE: \"x : preImage f A ==> f x : A\"", "lemma equalOn_Un:  \"equalOn (A \\<union> B) f g = (equalOn A f g \\<and> equalOn B f g)\"", "lemma equalOnD: \"equalOn A f g \\<Longrightarrow> (\\<forall> x \\<in> A . f x = g x)\"", "lemma equalOnI:\"(\\<forall> x \\<in> A . f x = g x) \\<Longrightarrow> equalOn A f g\"", "lemma equalOn_UnD: \"equalOn (A Un B) f g ==> equalOn A f g & equalOn B f g\"", "lemma inj_inv_singleton[simp]: \"\\<lbrakk> inj f; f z = y \\<rbrakk> \\<Longrightarrow> {x. f x = y} = {z}\"", "lemma finite_pre[simp]: \"inj f \\<Longrightarrow> finite (pre f x)\"", "lemma finite_preImage[simp]: \"\\<lbrakk> finite A; inj f \\<rbrakk> \\<Longrightarrow> finite (preImage f A)\""], "translations": [["", "lemma natset_finite_max: assumes a: \"finite A\"\n  shows \"Suc (Max A) \\<notin> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Max A) \\<notin> A", "proof (cases \"A = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> Suc (Max A) \\<notin> A\n 2. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "case True"], ["proof (state)\nthis:\n  A = {}\n\ngoal (2 subgoals):\n 1. A = {} \\<Longrightarrow> Suc (Max A) \\<notin> A\n 2. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  A = {}\n\ngoal (1 subgoal):\n 1. Suc (Max A) \\<notin> A", "by auto"], ["proof (state)\nthis:\n  Suc (Max A) \\<notin> A\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "case False"], ["proof (state)\nthis:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "with a"], ["proof (chain)\npicking this:\n  finite A\n  A \\<noteq> {}", "have \"Max A \\<in> A \\<and> (\\<forall>s \\<in> A. s \\<le> Max A)\""], ["proof (prove)\nusing this:\n  finite A\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max A \\<in> A \\<and> (\\<forall>s\\<in>A. s \\<le> Max A)", "by simp"], ["proof (state)\nthis:\n  Max A \\<in> A \\<and> (\\<forall>s\\<in>A. s \\<le> Max A)\n\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow> Suc (Max A) \\<notin> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  Max A \\<in> A \\<and> (\\<forall>s\\<in>A. s \\<le> Max A)\n\ngoal (1 subgoal):\n 1. Suc (Max A) \\<notin> A", "by auto"], ["proof (state)\nthis:\n  Suc (Max A) \\<notin> A\n\ngoal:\nNo subgoals!", "qed\n\n    \\<comment> \\<open>not used\\<close>"], ["", "lemma not_finite_univ: \"~ finite (UNIV::nat set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. infinite UNIV", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. finite UNIV \\<Longrightarrow> False", "apply(drule_tac natset_finite_max)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Max UNIV) \\<notin> UNIV \\<Longrightarrow> False", "by force\n\n  \\<comment> \\<open>FIXME should be in main lib\\<close>"], ["", "lemma LeastI_ex: \"(\\<exists> x. P (x::'a::wellorder)) \\<Longrightarrow> P (LEAST x. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. P x \\<Longrightarrow> P (LEAST x. P x)", "by(blast intro: LeastI)"], ["", "subsection \"Summation\""], ["", "primrec summation :: \"(nat \\<Rightarrow> nat) \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere\n  \"summation f 0 = f 0\"\n| \"summation f (Suc n) = f (Suc n) + summation f n\""], ["", "subsection \"Termination Measure\""], ["", "primrec exp :: \"[nat,nat] \\<Rightarrow> nat\"\nwhere\n  \"exp x 0       = 1\"\n| \"exp x (Suc m) = x * exp x m\""], ["", "primrec sumList     :: \"nat list \\<Rightarrow> nat\"\nwhere\n  \"sumList []     = 0\"\n| \"sumList (x#xs) = x + sumList xs\""], ["", "subsection \"Functions\""], ["", "definition\n  preImage :: \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'b set \\<Rightarrow> 'a set\" where\n  \"preImage f A = { x . f x \\<in> A}\""], ["", "definition\n  pre :: \"('a \\<Rightarrow> 'b) => 'b \\<Rightarrow> 'a set\" where\n  \"pre f a = { x . f x = a}\""], ["", "definition\n  equalOn :: \"['a set,'a => 'b,'a => 'b] => bool\" where\n  \"equalOn A f g = (!x:A. f x = g x)\""], ["", "lemma preImage_insert: \"preImage f (insert a A) = pre f a Un preImage f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preImage f (insert a A) = pre f a \\<union> preImage f A", "by(auto simp add: preImage_def pre_def)"], ["", "lemma preImageI: \"f x : A ==> x : preImage f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<in> A \\<Longrightarrow> x \\<in> preImage f A", "by(simp add: preImage_def)"], ["", "lemma preImageE: \"x : preImage f A ==> f x : A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> preImage f A \\<Longrightarrow> f x \\<in> A", "by(simp add: preImage_def)"], ["", "lemma equalOn_Un:  \"equalOn (A \\<union> B) f g = (equalOn A f g \\<and> equalOn B f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equalOn (A \\<union> B) f g = (equalOn A f g \\<and> equalOn B f g)", "by(auto simp add: equalOn_def)"], ["", "lemma equalOnD: \"equalOn A f g \\<Longrightarrow> (\\<forall> x \\<in> A . f x = g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equalOn A f g \\<Longrightarrow> \\<forall>x\\<in>A. f x = g x", "by(simp add: equalOn_def)"], ["", "lemma equalOnI:\"(\\<forall> x \\<in> A . f x = g x) \\<Longrightarrow> equalOn A f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. f x = g x \\<Longrightarrow> equalOn A f g", "by(simp add: equalOn_def)"], ["", "lemma equalOn_UnD: \"equalOn (A Un B) f g ==> equalOn A f g & equalOn B f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equalOn (A \\<union> B) f g \\<Longrightarrow>\n    equalOn A f g \\<and> equalOn B f g", "by(auto simp: equalOn_def)\n\n\n    \\<comment> \\<open>FIXME move following elsewhere?\\<close>"], ["", "lemma inj_inv_singleton[simp]: \"\\<lbrakk> inj f; f z = y \\<rbrakk> \\<Longrightarrow> {x. f x = y} = {z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj f; f z = y\\<rbrakk> \\<Longrightarrow> {x. f x = y} = {z}", "apply rule"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inj f; f z = y\\<rbrakk>\n    \\<Longrightarrow> {x. f x = y} \\<subseteq> {z}\n 2. \\<lbrakk>inj f; f z = y\\<rbrakk>\n    \\<Longrightarrow> {z} \\<subseteq> {x. f x = y}", "apply(auto simp: inj_on_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_pre[simp]: \"inj f \\<Longrightarrow> finite (pre f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> finite (pre f x)", "apply(simp add: pre_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj f \\<Longrightarrow> finite {xa. f xa = x}", "apply (cases \"\\<exists> y. f y = x\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finite_preImage[simp]: \"\\<lbrakk> finite A; inj f \\<rbrakk> \\<Longrightarrow> finite (preImage f A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; inj f\\<rbrakk>\n    \\<Longrightarrow> finite (preImage f A)", "apply(induct A rule: finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inj f \\<Longrightarrow> finite (preImage f {})\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        inj f \\<Longrightarrow> finite (preImage f F); inj f\\<rbrakk>\n       \\<Longrightarrow> finite (preImage f (insert x F))", "apply(simp add: preImage_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        inj f \\<Longrightarrow> finite (preImage f F); inj f\\<rbrakk>\n       \\<Longrightarrow> finite (preImage f (insert x F))", "apply(simp add: preImage_insert)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}