{"file_name": "/home/qj213/afp-2021-10-22/thys/Completeness/Tree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Completeness", "problem_names": ["lemma tree0Eq: \"(0,y) : tree subs gamma = (y = gamma)\"", "lemma tree1Eq [rule_format]:\n    \"\\<forall>Y. (Suc n,Y) \\<in> tree subs gamma = (\\<exists>sigma \\<in> subs gamma . (n,Y) \\<in> tree subs sigma)\"", "lemma injIncLevel: \"inj incLevel\"", "lemma treeEquation: \"tree subs gamma = insert (0,gamma) (UN delta:subs gamma . incLevel ` tree subs delta)\"", "lemma fansD: \"fans subs ==> finite (subs A)\"", "lemma fansI:  \"(!A. finite (subs A)) ==> fans subs\"", "lemma terminalD: \"terminal subs Gamma ==> x ~: subs Gamma\"", "lemma terminalI: \"x \\<in> subs Gamma ==> ~ terminal subs Gamma\"", "lemma inheritedUn[rule_format]:\"inherited subs P --> P A --> P B --> P (A Un B)\"", "lemma inheritedIncLevel[rule_format]: \"inherited subs P --> P A --> P (incLevel ` A)\"", "lemma inheritedEmpty[rule_format]: \"inherited subs P --> P {}\"", "lemma inheritedInsert[rule_format]:\n  \"inherited subs P --> ~(terminal subs Gamma) --> P A --> P (insert (n,Gamma) A)\"", "lemma inheritedI[rule_format]: \"[| \\<forall>A B . (P A & P B) = P (A Un B);\n  \\<forall>A . P A = P (incLevel ` A);\n  \\<forall>n Gamma A . ~(terminal subs Gamma) --> P A = P (insert (n,Gamma) A);\n  P {} |] ==> inherited subs P\"", "lemma inheritedUnEq[rule_format, symmetric]: \"inherited subs P --> (P A & P B) = P (A Un B)\"", "lemma inheritedIncLevelEq[rule_format, symmetric]: \"inherited subs P --> P A = P (incLevel ` A)\"", "lemma inheritedInsertEq[rule_format, symmetric]: \"inherited subs P --> ~(terminal subs Gamma) --> P A = P (insert (n,Gamma) A)\"", "lemmas inheritedUnD = iffD1[OF inheritedUnEq]", "lemmas inheritedInsertD = inheritedInsertEq[THEN iffD1]", "lemmas inheritedIncLevelD = inheritedIncLevelEq[THEN iffD1]", "lemma inheritedUNEq[rule_format]:\n  \"finite A --> inherited subs P --> (!x:A. P (B x)) = P (UN a:A. B a)\"", "lemmas inheritedUN  = inheritedUNEq[THEN iffD1]", "lemmas inheritedUND[rule_format] = inheritedUNEq[THEN iffD2]", "lemma inheritedPropagateEq[rule_format]: assumes a: \"inherited subs P\"\n  and b: \"fans subs\"\n  and c: \"~(terminal subs delta)\"\n  shows \"P(tree subs delta) = (!sigma:subs delta. P(tree subs sigma))\"", "lemma inheritedPropagate:\n \"[| ~P(tree subs delta); inherited subs P; fans subs; ~(terminal subs delta)|]\n  ==> \\<exists>sigma \\<in> subs delta . ~P(tree subs sigma)\"", "lemma inheritedViaSub: \"[| inherited subs P; fans subs; P(tree subs delta); sigma \\<in> subs delta |]\n  ==> P(tree subs sigma)\"", "lemma inheritedJoin[rule_format]:\n    \"(inherited subs P & inherited subs Q) --> inherited subs (%x. P x & Q x)\"", "lemma inheritedJoinI[rule_format]: \"[| inherited subs P; inherited subs Q; R = ( % x . P x & Q x) |] ==> inherited subs R\"", "lemma boundedByEmpty[simp]: \"boundedBy N {}\"", "lemma boundedByInsert: \"boundedBy N (insert (n,delta) B)     = (n < N & boundedBy N B)\"", "lemma boundedByUn: \"boundedBy N (A Un B) = (boundedBy N A & boundedBy N B)\"", "lemma boundedByIncLevel': \"boundedBy (Suc N) (incLevel ` A) = boundedBy N A\"", "lemma boundedByAdd1: \"boundedBy N B \\<Longrightarrow> boundedBy (N+M) B\"", "lemma boundedByAdd2: \"boundedBy M B \\<Longrightarrow> boundedBy (N+M) B\"", "lemma boundedByMono: \"boundedBy m B \\<Longrightarrow> m < M \\<Longrightarrow> boundedBy M B\"", "lemmas boundedByMonoD  = boundedByMono", "lemma boundedBy0: \"boundedBy 0 A = (A = {})\"", "lemma boundedBySuc': \"boundedBy N A \\<Longrightarrow> boundedBy (Suc N) A\"", "lemma boundedByIncLevel: \"boundedBy n (incLevel ` (tree subs gamma)) = ( \\<exists>m . n = Suc m & boundedBy m (tree subs gamma))\"", "lemma boundedByUN: \"boundedBy N (UN x:A. B x) = (!x:A. boundedBy N (B x))\"", "lemma boundedBySuc[rule_format]: \"sigma \\<in> subs Gamma \\<Longrightarrow> boundedBy (Suc n) (tree subs Gamma) \\<longrightarrow> boundedBy n (tree subs sigma)\"", "lemma boundedEmpty: \"bounded {}\"", "lemma boundedUn: \"bounded (A Un B) = (bounded A & bounded B)\"", "lemma boundedIncLevel: \"bounded (incLevel` A) = (bounded A)\"", "lemma boundedInsert: \"bounded (insert a B) = (bounded B)\"", "lemma inheritedBounded: \"inherited subs bounded\"", "lemma foundedD: \"founded subs P (tree subs delta) ==> terminal subs delta ==> P delta\"", "lemma foundedMono: \"[| founded subs P A; \\<forall>x. P x --> Q x |] ==> founded subs Q A\"", "lemma foundedSubs: \"founded subs P (tree subs Gamma) \\<Longrightarrow> sigma \\<in> subs Gamma \\<Longrightarrow> founded subs P (tree subs sigma)\"", "lemma foundedInsert[rule_format]: \"~ terminal subs delta --> founded subs P (insert (n,delta) B) = (founded subs P B)\"", "lemma foundedUn: \"(founded subs P (A Un B)) = (founded subs P A & founded subs P B)\"", "lemma foundedIncLevel: \"founded subs P (incLevel ` A) = (founded subs P A)\"", "lemma foundedEmpty: \"founded subs P {}\"", "lemma inheritedFounded: \"inherited subs (founded subs P)\"", "lemmas finiteInsert = finite_insert", "lemma finiteUn: \"finite (A Un B) = (finite A & finite B)\"", "lemma finiteIncLevel: \"finite (incLevel ` A) = finite A\"", "lemma finiteEmpty: \"finite {}\"", "lemma inheritedFinite: \"inherited subs (%A. finite A)\"", "lemma failingSubProps: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> failingSub subs P gamma \\<in> subs gamma & ~(P (tree subs (failingSub subs P gamma)))\"", "lemma failingSubFailsI: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> ~(P (tree subs (failingSub subs P gamma)))\"", "lemmas failingSubFailsE = failingSubFailsI[THEN notE]", "lemma failingSubSubs: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> failingSub subs P gamma \\<in> subs gamma\"", "lemma pathFailsP: \"[| inherited subs P; fans subs; ~P(tree subs gamma) |]\n  ==> ~(P (tree subs (path subs gamma P n)))\"", "lemmas PpathE = pathFailsP[THEN notE]", "lemma pathTerminal[rule_format]: \"[| inherited subs P; fans subs; terminal subs gamma |]\n  ==> terminal subs (path subs gamma P n)\"", "lemma pathStarts:  \"path subs gamma P 0 = gamma\"", "lemma pathSubs: \"[| inherited subs P; fans subs; ~P(tree subs gamma); ~ (terminal subs (path subs gamma P n)) |]\n  ==> path subs gamma P (Suc n) \\<in> subs (path subs gamma P n)\"", "lemma pathStops: \"terminal subs (path subs gamma P n) ==> path subs gamma P (Suc n) = path subs gamma P n\"", "lemma branch0: \"branch subs Gamma f ==> f 0 = Gamma\"", "lemma branchStops: \"branch subs Gamma f ==> terminal subs (f n) ==> f (Suc n) = f n\"", "lemma branchSubs: \"branch subs Gamma f ==> ~ terminal subs (f n) ==> f (Suc n) \\<in> subs (f n)\"", "lemma branchI: \"[| (f 0 = Gamma);\n  !n . terminal subs (f n) --> f (Suc n) = f n;\n  !n . ~ terminal subs (f n) --> f (Suc n) \\<in> subs (f n) |] ==> branch subs Gamma f\"", "lemma branchTerminalPropagates: \"branch subs Gamma f ==> terminal subs (f m) ==> terminal subs (f (m + n))\"", "lemma branchTerminalMono: \"branch subs Gamma f ==> m < n ==> terminal subs (f m) ==> terminal subs (f n)\"", "lemma branchPath:\n      \"[| inherited subs P; fans subs; ~P(tree subs gamma) |]\n       ==> branch subs gamma (path subs gamma P)\"", "lemma failingBranchExistence:  \"!!subs.\n  [| inherited subs P; fans subs; ~P(tree subs gamma) |]\n  ==> \\<exists>f . branch subs gamma f & (\\<forall>n . ~P(tree subs (f n)))\"", "lemma infBranchI: \"[| (f 0 = Gamma); !n . f (Suc n) \\<in> subs (f n) |] ==> infBranch subs Gamma f\"", "lemma boundedTreeInduction':\n \"\\<lbrakk> fans subs;\n    \\<forall>delta. ~ terminal subs delta --> (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta \\<rbrakk>\n  \\<Longrightarrow> \\<forall>Gamma. boundedBy m (tree subs Gamma) \\<longrightarrow>  founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma\"", "lemma boundedTreeInduction:\n   \"\\<lbrakk>fans subs;\n     bounded (tree subs Gamma); founded subs P (tree subs Gamma);\n  \\<forall>delta. ~ terminal subs delta --> (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta\n  \\<rbrakk> \\<Longrightarrow> P Gamma\"", "lemma boundedTreeInduction2':\n \"[| fans subs;\n    \\<forall>delta. (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta |]\n  ==> \\<forall>Gamma. boundedBy m (tree subs Gamma) \\<longrightarrow> P Gamma\"", "lemma boundedTreeInduction2:\n     \"[| fans subs; boundedBy m (tree subs Gamma);\n          \\<forall>delta. (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta |]\n      ==> P Gamma\""], "translations": [["", "lemma tree0Eq: \"(0,y) : tree subs gamma = (y = gamma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((0, y) \\<in> tree subs gamma) = (y = gamma)", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (0, y) \\<in> tree subs gamma \\<Longrightarrow> y = gamma\n 2. y = gamma \\<Longrightarrow> (0, y) \\<in> tree subs gamma", "apply (erule tree.cases, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma tree1Eq [rule_format]:\n    \"\\<forall>Y. (Suc n,Y) \\<in> tree subs gamma = (\\<exists>sigma \\<in> subs gamma . (n,Y) \\<in> tree subs sigma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Y.\n       ((Suc n, Y) \\<in> tree subs gamma) =\n       (\\<exists>sigma\\<in>subs gamma. (n, Y) \\<in> tree subs sigma)", "by (induct n) (blast, force)\n    \\<comment> \\<open>moving down a tree\\<close>"], ["", "definition\n  incLevel :: \"nat * 'a => nat * 'a\" where\n  \"incLevel = (% (n,a). (Suc n,a))\""], ["", "lemma injIncLevel: \"inj incLevel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj incLevel", "apply(simp add: incLevel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj (\\<lambda>(n, a). (Suc n, a))", "apply(rule inj_onI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> UNIV; y \\<in> UNIV;\n        (case x of (n, a) \\<Rightarrow> (Suc n, a)) =\n        (case y of (n, a) \\<Rightarrow> (Suc n, a))\\<rbrakk>\n       \\<Longrightarrow> x = y", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma treeEquation: \"tree subs gamma = insert (0,gamma) (UN delta:subs gamma . incLevel ` tree subs delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tree subs gamma =\n    insert (0, gamma)\n     (\\<Union>delta\\<in>subs gamma. incLevel ` tree subs delta)", "apply(rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> tree subs gamma) =\n       (x \\<in> insert (0, gamma)\n                 (\\<Union>delta\\<in>subs gamma. incLevel ` tree subs delta))", "apply(simp add: split_paired_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       ((a, b) \\<in> tree subs gamma) =\n       (a = 0 \\<and> b = gamma \\<or>\n        (\\<exists>x\\<in>subs gamma. (a, b) \\<in> incLevel ` tree subs x))", "apply(case_tac a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       a = 0 \\<Longrightarrow>\n       ((a, b) \\<in> tree subs gamma) =\n       (a = 0 \\<and> b = gamma \\<or>\n        (\\<exists>x\\<in>subs gamma. (a, b) \\<in> incLevel ` tree subs x))\n 2. \\<And>a b nat.\n       a = Suc nat \\<Longrightarrow>\n       ((a, b) \\<in> tree subs gamma) =\n       (a = 0 \\<and> b = gamma \\<or>\n        (\\<exists>x\\<in>subs gamma. (a, b) \\<in> incLevel ` tree subs x))", "apply(force simp add: tree0Eq incLevel_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b nat.\n       a = Suc nat \\<Longrightarrow>\n       ((a, b) \\<in> tree subs gamma) =\n       (a = 0 \\<and> b = gamma \\<or>\n        (\\<exists>x\\<in>subs gamma. (a, b) \\<in> incLevel ` tree subs x))", "apply(force simp add: tree1Eq incLevel_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  fans :: \"['a => 'a set] => bool\" where\n  \"fans subs \\<longleftrightarrow> (!x. finite (subs x))\""], ["", "lemma fansD: \"fans subs ==> finite (subs A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fans subs \\<Longrightarrow> finite (subs A)", "by(simp add: fans_def)"], ["", "lemma fansI:  \"(!A. finite (subs A)) ==> fans subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A. finite (subs A) \\<Longrightarrow> fans subs", "by(simp add: fans_def)"], ["", "subsection \"Terminal\""], ["", "definition\n  terminal :: \"['a => 'a set,'a] => bool\" where\n  \"terminal subs delta \\<longleftrightarrow> subs(delta) = {}\""], ["", "lemma terminalD: \"terminal subs Gamma ==> x ~: subs Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal subs Gamma \\<Longrightarrow> x \\<notin> subs Gamma", "by(simp add: terminal_def)\n  \\<comment> \\<open>not a good dest rule\\<close>"], ["", "lemma terminalI: \"x \\<in> subs Gamma ==> ~ terminal subs Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> subs Gamma \\<Longrightarrow> \\<not> terminal subs Gamma", "by(auto simp add: terminal_def)\n  \\<comment> \\<open>not a good intro rule\\<close>"], ["", "subsection \"Inherited\""], ["", "definition\n  inherited :: \"['a => 'a set,(nat * 'a) set => bool] => bool\" where\n  \"inherited subs P \\<longleftrightarrow> (!A B. (P A & P B) = P (A Un B))\n                       & (!A. P A = P (incLevel ` A))\n                       & (!n Gamma A. ~(terminal subs Gamma) --> P A = P (insert (n,Gamma) A))\n                       & (P {})\"\n\n    (******\n     inherited properties:\n        - preserved under: dividing into 2, join 2 parts\n                           moving up/down levels\n                           inserting non terminal nodes\n        - hold on empty node set\n     ******)\n\n  \\<comment> \\<open>FIXME tjr why does it have to be invariant under inserting nonterminal nodes?\\<close>"], ["", "lemma inheritedUn[rule_format]:\"inherited subs P --> P A --> P B --> P (A Un B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow>\n    P A \\<longrightarrow> P B \\<longrightarrow> P (A \\<union> B)", "by (auto simp add: inherited_def)"], ["", "lemma inheritedIncLevel[rule_format]: \"inherited subs P --> P A --> P (incLevel ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow>\n    P A \\<longrightarrow> P (incLevel ` A)", "by (auto simp add: inherited_def)"], ["", "lemma inheritedEmpty[rule_format]: \"inherited subs P --> P {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow> P {}", "by (auto simp add: inherited_def)"], ["", "lemma inheritedInsert[rule_format]:\n  \"inherited subs P --> ~(terminal subs Gamma) --> P A --> P (insert (n,Gamma) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow>\n    \\<not> terminal subs Gamma \\<longrightarrow>\n    P A \\<longrightarrow> P (insert (n, Gamma) A)", "by (auto simp add: inherited_def)"], ["", "lemma inheritedI[rule_format]: \"[| \\<forall>A B . (P A & P B) = P (A Un B);\n  \\<forall>A . P A = P (incLevel ` A);\n  \\<forall>n Gamma A . ~(terminal subs Gamma) --> P A = P (insert (n,Gamma) A);\n  P {} |] ==> inherited subs P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>A B. (P A \\<and> P B) = P (A \\<union> B);\n     \\<forall>A. P A = P (incLevel ` A);\n     \\<forall>n Gamma A.\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        P A = P (insert (n, Gamma) A);\n     P {}\\<rbrakk>\n    \\<Longrightarrow> inherited subs P", "by (simp add: inherited_def)"], ["", "(* These only for inherited join, and a few more places... *)"], ["", "lemma inheritedUnEq[rule_format, symmetric]: \"inherited subs P --> (P A & P B) = P (A Un B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow> (P A \\<and> P B) = P (A \\<union> B)", "by (auto simp add: inherited_def)"], ["", "lemma inheritedIncLevelEq[rule_format, symmetric]: \"inherited subs P --> P A = P (incLevel ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow> P A = P (incLevel ` A)", "by (auto simp add: inherited_def)"], ["", "lemma inheritedInsertEq[rule_format, symmetric]: \"inherited subs P --> ~(terminal subs Gamma) --> P A = P (insert (n,Gamma) A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<longrightarrow>\n    \\<not> terminal subs Gamma \\<longrightarrow>\n    P A = P (insert (n, Gamma) A)", "by (auto simp add: inherited_def)"], ["", "lemmas inheritedUnD = iffD1[OF inheritedUnEq]"], ["", "lemmas inheritedInsertD = inheritedInsertEq[THEN iffD1]"], ["", "lemmas inheritedIncLevelD = inheritedIncLevelEq[THEN iffD1]"], ["", "lemma inheritedUNEq[rule_format]:\n  \"finite A --> inherited subs P --> (!x:A. P (B x)) = P (UN a:A. B a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<longrightarrow>\n    inherited subs P \\<longrightarrow>\n    (\\<forall>x\\<in>A. P (B x)) = P (\\<Union> (B ` A))", "apply(intro impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite A; inherited subs P\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>A. P (B x)) = P (\\<Union> (B ` A))", "apply(erule finite_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inherited subs P \\<Longrightarrow>\n    (\\<forall>x\\<in>{}. P (B x)) = P (\\<Union> (B ` {}))\n 2. \\<And>x F.\n       \\<lbrakk>inherited subs P; finite F; x \\<notin> F;\n        (\\<forall>x\\<in>F. P (B x)) = P (\\<Union> (B ` F))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>insert x F. P (B x)) =\n                         P (\\<Union> (B ` insert x F))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. inherited subs P \\<Longrightarrow> P {}\n 2. \\<And>x F.\n       \\<lbrakk>inherited subs P; finite F; x \\<notin> F;\n        (\\<forall>x\\<in>F. P (B x)) = P (\\<Union> (B ` F))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>insert x F. P (B x)) =\n                         P (\\<Union> (B ` insert x F))", "apply(simp add: inheritedEmpty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>inherited subs P; finite F; x \\<notin> F;\n        (\\<forall>x\\<in>F. P (B x)) = P (\\<Union> (B ` F))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x\\<in>insert x F. P (B x)) =\n                         P (\\<Union> (B ` insert x F))", "apply(force dest: inheritedUnEq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas inheritedUN  = inheritedUNEq[THEN iffD1]"], ["", "lemmas inheritedUND[rule_format] = inheritedUNEq[THEN iffD2]"], ["", "lemma inheritedPropagateEq[rule_format]: assumes a: \"inherited subs P\"\n  and b: \"fans subs\"\n  and c: \"~(terminal subs delta)\"\n  shows \"P(tree subs delta) = (!sigma:subs delta. P(tree subs sigma))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (tree subs delta) =\n    (\\<forall>sigma\\<in>subs delta. P (tree subs sigma))", "apply(insert fansD[OF b])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A. finite (subs A)) \\<Longrightarrow>\n    P (tree subs delta) =\n    (\\<forall>sigma\\<in>subs delta. P (tree subs sigma))", "apply(subst treeEquation [of _ delta])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>A. finite (subs A)) \\<Longrightarrow>\n    P (insert (0, delta)\n        (\\<Union>delta\\<in>subs delta. incLevel ` tree subs delta)) =\n    (\\<forall>sigma\\<in>subs delta. P (tree subs sigma))", "using assms"], ["proof (prove)\nusing this:\n  inherited subs P\n  fans subs\n  \\<not> terminal subs delta\n\ngoal (1 subgoal):\n 1. (\\<And>A. finite (subs A)) \\<Longrightarrow>\n    P (insert (0, delta)\n        (\\<Union>delta\\<in>subs delta. incLevel ` tree subs delta)) =\n    (\\<forall>sigma\\<in>subs delta. P (tree subs sigma))", "apply(simp add: inheritedInsertEq inheritedUNEq[symmetric] inheritedIncLevelEq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inheritedPropagate:\n \"[| ~P(tree subs delta); inherited subs P; fans subs; ~(terminal subs delta)|]\n  ==> \\<exists>sigma \\<in> subs delta . ~P(tree subs sigma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> P (tree subs delta); inherited subs P; fans subs;\n     \\<not> terminal subs delta\\<rbrakk>\n    \\<Longrightarrow> \\<exists>sigma\\<in>subs delta.\n                         \\<not> P (tree subs sigma)", "by(simp add: inheritedPropagateEq)"], ["", "lemma inheritedViaSub: \"[| inherited subs P; fans subs; P(tree subs delta); sigma \\<in> subs delta |]\n  ==> P(tree subs sigma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs; P (tree subs delta);\n     sigma \\<in> subs delta\\<rbrakk>\n    \\<Longrightarrow> P (tree subs sigma)", "apply(frule_tac terminalI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs; P (tree subs delta);\n     sigma \\<in> subs delta; \\<not> terminal subs delta\\<rbrakk>\n    \\<Longrightarrow> P (tree subs sigma)", "apply(simp add: inheritedPropagateEq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inheritedJoin[rule_format]:\n    \"(inherited subs P & inherited subs Q) --> inherited subs (%x. P x & Q x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs P \\<and> inherited subs Q \\<longrightarrow>\n    inherited subs (\\<lambda>x. P x \\<and> Q x)", "by(blast intro!: inheritedI\n     dest: inheritedUnEq inheritedIncLevelEq inheritedInsertEq inheritedEmpty)"], ["", "lemma inheritedJoinI[rule_format]: \"[| inherited subs P; inherited subs Q; R = ( % x . P x & Q x) |] ==> inherited subs R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; inherited subs Q;\n     R = (\\<lambda>x. P x \\<and> Q x)\\<rbrakk>\n    \\<Longrightarrow> inherited subs R", "by(blast intro!:inheritedI dest: inheritedUnEq inheritedIncLevelEq inheritedInsertEq inheritedEmpty)"], ["", "subsection \"bounded, boundedBy\""], ["", "definition\n  boundedBy :: \"nat => (nat * 'a) set => bool\" where\n  \"boundedBy N A \\<longleftrightarrow> (\\<forall>(n,delta) \\<in> A. n < N)\""], ["", "definition\n  bounded :: \"(nat * 'a) set => bool\" where\n  \"bounded A \\<longleftrightarrow> (\\<exists>N . boundedBy N A)\""], ["", "lemma boundedByEmpty[simp]: \"boundedBy N {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N {}", "by(simp add: boundedBy_def)"], ["", "lemma boundedByInsert: \"boundedBy N (insert (n,delta) B)     = (n < N & boundedBy N B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N (insert (n, delta) B) = (n < N \\<and> boundedBy N B)", "by(simp add: boundedBy_def)"], ["", "lemma boundedByUn: \"boundedBy N (A Un B) = (boundedBy N A & boundedBy N B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N (A \\<union> B) = (boundedBy N A \\<and> boundedBy N B)", "by(auto simp add: boundedBy_def)"], ["", "lemma boundedByIncLevel': \"boundedBy (Suc N) (incLevel ` A) = boundedBy N A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy (Suc N) (incLevel ` A) = boundedBy N A", "by(auto simp add: incLevel_def boundedBy_def)"], ["", "lemma boundedByAdd1: \"boundedBy N B \\<Longrightarrow> boundedBy (N+M) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N B \\<Longrightarrow> boundedBy (N + M) B", "by(auto simp add: boundedBy_def)"], ["", "lemma boundedByAdd2: \"boundedBy M B \\<Longrightarrow> boundedBy (N+M) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy M B \\<Longrightarrow> boundedBy (N + M) B", "by(auto simp add: boundedBy_def)"], ["", "lemma boundedByMono: \"boundedBy m B \\<Longrightarrow> m < M \\<Longrightarrow> boundedBy M B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>boundedBy m B; m < M\\<rbrakk> \\<Longrightarrow> boundedBy M B", "by(auto simp: boundedBy_def)"], ["", "lemmas boundedByMonoD  = boundedByMono"], ["", "lemma boundedBy0: \"boundedBy 0 A = (A = {})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy 0 A = (A = {})", "apply(simp add: boundedBy_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>a b. (a, b) \\<notin> A) = (A = {})", "apply(auto simp add: boundedBy_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedBySuc': \"boundedBy N A \\<Longrightarrow> boundedBy (Suc N) A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N A \\<Longrightarrow> boundedBy (Suc N) A", "by (auto simp add: boundedBy_def)"], ["", "lemma boundedByIncLevel: \"boundedBy n (incLevel ` (tree subs gamma)) = ( \\<exists>m . n = Suc m & boundedBy m (tree subs gamma))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy n (incLevel ` tree subs gamma) =\n    (\\<exists>m. n = Suc m \\<and> boundedBy m (tree subs gamma))", "apply(cases n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    boundedBy n (incLevel ` tree subs gamma) =\n    (\\<exists>m. n = Suc m \\<and> boundedBy m (tree subs gamma))\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       boundedBy n (incLevel ` tree subs gamma) =\n       (\\<exists>m. n = Suc m \\<and> boundedBy m (tree subs gamma))", "apply(force simp add: boundedBy0 tree0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       boundedBy n (incLevel ` tree subs gamma) =\n       (\\<exists>m. n = Suc m \\<and> boundedBy m (tree subs gamma))", "apply(force simp add: treeEquation [of _ gamma] incLevel_def boundedBy_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedByUN: \"boundedBy N (UN x:A. B x) = (!x:A. boundedBy N (B x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. boundedBy N (\\<Union> (B ` A)) = (\\<forall>x\\<in>A. boundedBy N (B x))", "by(simp add: boundedBy_def)"], ["", "lemma boundedBySuc[rule_format]: \"sigma \\<in> subs Gamma \\<Longrightarrow> boundedBy (Suc n) (tree subs Gamma) \\<longrightarrow> boundedBy n (tree subs sigma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma \\<in> subs Gamma \\<Longrightarrow>\n    boundedBy (Suc n) (tree subs Gamma) \\<longrightarrow>\n    boundedBy n (tree subs sigma)", "apply(subst treeEquation [of _ Gamma])"], ["proof (prove)\ngoal (1 subgoal):\n 1. sigma \\<in> subs Gamma \\<Longrightarrow>\n    boundedBy (Suc n)\n     (insert (0, Gamma)\n       (\\<Union>delta\\<in>subs Gamma.\n           incLevel ` tree subs delta)) \\<longrightarrow>\n    boundedBy n (tree subs sigma)", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sigma \\<in> subs Gamma;\n     boundedBy (Suc n)\n      (insert (0, Gamma)\n        (\\<Union>delta\\<in>subs Gamma. incLevel ` tree subs delta))\\<rbrakk>\n    \\<Longrightarrow> boundedBy n (tree subs sigma)", "apply(simp add: boundedByInsert)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sigma \\<in> subs Gamma;\n     boundedBy (Suc n)\n      (\\<Union>x\\<in>subs Gamma. incLevel ` tree subs x)\\<rbrakk>\n    \\<Longrightarrow> boundedBy n (tree subs sigma)", "apply(simp add: boundedByUN)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sigma \\<in> subs Gamma;\n     \\<forall>x\\<in>subs Gamma.\n        boundedBy (Suc n) (incLevel ` tree subs x)\\<rbrakk>\n    \\<Longrightarrow> boundedBy n (tree subs sigma)", "apply(drule_tac x=sigma in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. sigma \\<in> subs Gamma \\<Longrightarrow> sigma \\<in> subs Gamma\n 2. \\<lbrakk>sigma \\<in> subs Gamma;\n     boundedBy (Suc n) (incLevel ` tree subs sigma)\\<rbrakk>\n    \\<Longrightarrow> boundedBy n (tree subs sigma)", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sigma \\<in> subs Gamma;\n     boundedBy (Suc n) (incLevel ` tree subs sigma)\\<rbrakk>\n    \\<Longrightarrow> boundedBy n (tree subs sigma)", "apply(simp add: boundedByIncLevel)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Inherited Properties- bounded\""], ["", "lemma boundedEmpty: \"bounded {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded {}", "by(simp add: bounded_def)"], ["", "lemma boundedUn: \"bounded (A Un B) = (bounded A & bounded B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (A \\<union> B) = (bounded A \\<and> bounded B)", "apply(auto simp add: bounded_def boundedByUn)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N Na.\n       \\<lbrakk>boundedBy N A; boundedBy Na B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N. boundedBy N A \\<and> boundedBy N B", "apply(rule_tac x=\"N+Na\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N Na.\n       \\<lbrakk>boundedBy N A; boundedBy Na B\\<rbrakk>\n       \\<Longrightarrow> boundedBy (N + Na) A \\<and> boundedBy (N + Na) B", "apply(blast intro: boundedByAdd1 boundedByAdd2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedIncLevel: \"bounded (incLevel` A) = (bounded A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (incLevel ` A) = bounded A", "apply (simp add: bounded_def, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>N. boundedBy N (incLevel ` A) \\<Longrightarrow>\n    \\<exists>N. boundedBy N A\n 2. \\<exists>N. boundedBy N A \\<Longrightarrow>\n    \\<exists>N. boundedBy N (incLevel ` A)", "apply(erule exE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>N.\n       boundedBy N (incLevel ` A) \\<Longrightarrow>\n       \\<exists>N. boundedBy N A\n 2. \\<exists>N. boundedBy N A \\<Longrightarrow>\n    \\<exists>N. boundedBy N (incLevel ` A)", "apply(rule_tac x=N in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>N. boundedBy N (incLevel ` A) \\<Longrightarrow> boundedBy N A\n 2. \\<exists>N. boundedBy N A \\<Longrightarrow>\n    \\<exists>N. boundedBy N (incLevel ` A)", "apply (simp add: boundedBy_def incLevel_def, force)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. boundedBy N A \\<Longrightarrow>\n    \\<exists>N. boundedBy N (incLevel ` A)", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N.\n       boundedBy N A \\<Longrightarrow>\n       \\<exists>N. boundedBy N (incLevel ` A)", "apply(rule_tac x=\"Suc N\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N.\n       boundedBy N A \\<Longrightarrow> boundedBy (Suc N) (incLevel ` A)", "apply (simp add: boundedBy_def incLevel_def, force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedInsert: \"bounded (insert a B) = (bounded B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bounded (insert a B) = bounded B", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       a = (aa, b) \\<Longrightarrow> bounded (insert a B) = bounded B", "apply (simp add: bounded_def boundedByInsert, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa b.\n       \\<lbrakk>a = (aa, b); \\<exists>N>aa. boundedBy N B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N. boundedBy N B\n 2. \\<And>aa b.\n       \\<lbrakk>a = (aa, b); \\<exists>N. boundedBy N B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N>aa. boundedBy N B", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b.\n       \\<lbrakk>a = (aa, b); \\<exists>N. boundedBy N B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N>aa. boundedBy N B", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b N.\n       \\<lbrakk>a = (aa, b); boundedBy N B\\<rbrakk>\n       \\<Longrightarrow> \\<exists>N>aa. boundedBy N B", "apply(rule_tac x=\"Suc(aa+N)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa b N.\n       \\<lbrakk>a = (aa, b); boundedBy N B\\<rbrakk>\n       \\<Longrightarrow> aa < Suc (aa + N) \\<and> boundedBy (Suc (aa + N)) B", "apply(force intro:boundedByMono)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inheritedBounded: \"inherited subs bounded\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs bounded", "by(blast intro!: inheritedI boundedUn[symmetric] boundedIncLevel[symmetric]\n    boundedInsert[symmetric] boundedEmpty)"], ["", "subsection \"founded\""], ["", "definition\n  founded :: \"['a => 'a set,'a => bool,(nat * 'a) set] => bool\" where\n  \"founded subs Pred = (%A. !(n,delta):A. terminal subs delta --> Pred delta)\""], ["", "lemma foundedD: \"founded subs P (tree subs delta) ==> terminal subs delta ==> P delta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>founded subs P (tree subs delta); terminal subs delta\\<rbrakk>\n    \\<Longrightarrow> P delta", "by(simp add: treeEquation [of _ delta] founded_def)"], ["", "lemma foundedMono: \"[| founded subs P A; \\<forall>x. P x --> Q x |] ==> founded subs Q A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>founded subs P A;\n     \\<forall>x. P x \\<longrightarrow> Q x\\<rbrakk>\n    \\<Longrightarrow> founded subs Q A", "by (auto simp: founded_def)"], ["", "lemma foundedSubs: \"founded subs P (tree subs Gamma) \\<Longrightarrow> sigma \\<in> subs Gamma \\<Longrightarrow> founded subs P (tree subs sigma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>founded subs P (tree subs Gamma);\n     sigma \\<in> subs Gamma\\<rbrakk>\n    \\<Longrightarrow> founded subs P (tree subs sigma)", "apply(simp add: founded_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>tree subs Gamma.\n                case x of\n                (n, delta) \\<Rightarrow>\n                  terminal subs delta \\<longrightarrow> P delta;\n     sigma \\<in> subs Gamma\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x\\<in>tree subs sigma.\n                         case x of\n                         (n, delta) \\<Rightarrow>\n                           terminal subs delta \\<longrightarrow> P delta", "apply(intro ballI impI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<forall>x\\<in>tree subs Gamma.\n                   case x of\n                   (n, delta) \\<Rightarrow>\n                     terminal subs delta \\<longrightarrow> P delta;\n        sigma \\<in> subs Gamma; x \\<in> tree subs sigma\\<rbrakk>\n       \\<Longrightarrow> case x of\n                         (n, delta) \\<Rightarrow>\n                           terminal subs delta \\<longrightarrow> P delta", "apply (case_tac x, simp, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x a b.\n       \\<lbrakk>\\<forall>x\\<in>tree subs Gamma.\n                   case x of\n                   (n, delta) \\<Rightarrow>\n                     terminal subs delta \\<longrightarrow> P delta;\n        sigma \\<in> subs Gamma; (a, b) \\<in> tree subs sigma; x = (a, b);\n        terminal subs b\\<rbrakk>\n       \\<Longrightarrow> P b", "apply(drule_tac x=\"(Suc a, b)\" in bspec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>sigma \\<in> subs Gamma; (a, b) \\<in> tree subs sigma;\n        x = (a, b); terminal subs b\\<rbrakk>\n       \\<Longrightarrow> (Suc a, b) \\<in> tree subs Gamma\n 2. \\<And>x a b.\n       \\<lbrakk>sigma \\<in> subs Gamma; (a, b) \\<in> tree subs sigma;\n        x = (a, b); terminal subs b;\n        case (Suc a, b) of\n        (n, delta) \\<Rightarrow>\n          terminal subs delta \\<longrightarrow> P delta\\<rbrakk>\n       \\<Longrightarrow> P b", "apply(subst treeEquation)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x a b.\n       \\<lbrakk>sigma \\<in> subs Gamma; (a, b) \\<in> tree subs sigma;\n        x = (a, b); terminal subs b\\<rbrakk>\n       \\<Longrightarrow> (Suc a, b)\n                         \\<in> insert (0, Gamma)\n                                (\\<Union>delta\\<in>subs Gamma.\n                                    incLevel ` tree subs delta)\n 2. \\<And>x a b.\n       \\<lbrakk>sigma \\<in> subs Gamma; (a, b) \\<in> tree subs sigma;\n        x = (a, b); terminal subs b;\n        case (Suc a, b) of\n        (n, delta) \\<Rightarrow>\n          terminal subs delta \\<longrightarrow> P delta\\<rbrakk>\n       \\<Longrightarrow> P b", "apply (force simp: incLevel_def, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Inherited Properties- founded\""], ["", "lemma foundedInsert[rule_format]: \"~ terminal subs delta --> founded subs P (insert (n,delta) B) = (founded subs P B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> terminal subs delta \\<longrightarrow>\n    founded subs P (insert (n, delta) B) = founded subs P B", "apply(simp add: terminal_def founded_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma foundedUn: \"(founded subs P (A Un B)) = (founded subs P A & founded subs P B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. founded subs P (A \\<union> B) =\n    (founded subs P A \\<and> founded subs P B)", "apply(simp add: founded_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>A \\<union> B.\n        case x of\n        (n, delta) \\<Rightarrow>\n          terminal subs delta \\<longrightarrow> P delta) =\n    ((\\<forall>x\\<in>A.\n         case x of\n         (n, delta) \\<Rightarrow>\n           terminal subs delta \\<longrightarrow> P delta) \\<and>\n     (\\<forall>x\\<in>B.\n         case x of\n         (n, delta) \\<Rightarrow>\n           terminal subs delta \\<longrightarrow> P delta))", "by force"], ["", "lemma foundedIncLevel: \"founded subs P (incLevel ` A) = (founded subs P A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. founded subs P (incLevel ` A) = founded subs P A", "apply (simp add: founded_def incLevel_def, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma foundedEmpty: \"founded subs P {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. founded subs P {}", "by(auto simp add: founded_def)"], ["", "lemma inheritedFounded: \"inherited subs (founded subs P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs (founded subs P)", "by(blast intro!: inheritedI foundedUn[symmetric] foundedIncLevel[symmetric]\n    foundedInsert[symmetric] foundedEmpty)"], ["", "subsection \"Inherited Properties- finite\""], ["", "lemmas finiteInsert = finite_insert"], ["", "lemma finiteUn: \"finite (A Un B) = (finite A & finite B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (A \\<union> B) = (finite A \\<and> finite B)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma finiteIncLevel: \"finite (incLevel ` A) = finite A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (incLevel ` A) = finite A", "apply (insert injIncLevel, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>inj incLevel; finite (incLevel ` A)\\<rbrakk>\n    \\<Longrightarrow> finite A\n 2. \\<lbrakk>inj incLevel; finite A\\<rbrakk>\n    \\<Longrightarrow> finite (incLevel ` A)", "apply(frule finite_imageD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>inj incLevel; finite (incLevel ` A)\\<rbrakk>\n    \\<Longrightarrow> inj_on incLevel A\n 2. \\<lbrakk>inj incLevel; finite (incLevel ` A); finite A\\<rbrakk>\n    \\<Longrightarrow> finite A\n 3. \\<lbrakk>inj incLevel; finite A\\<rbrakk>\n    \\<Longrightarrow> finite (incLevel ` A)", "apply (blast intro: subset_inj_on, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj incLevel; finite A\\<rbrakk>\n    \\<Longrightarrow> finite (incLevel ` A)", "apply(rule finite_imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj incLevel; finite A\\<rbrakk> \\<Longrightarrow> finite A", "by assumption\n  \\<comment> \\<open>FIXME often have injOn f A, finite f ` A, to show A finite\\<close>"], ["", "lemma finiteEmpty: \"finite {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {}", "by auto"], ["", "lemma inheritedFinite: \"inherited subs (%A. finite A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inherited subs finite", "apply(blast intro!: inheritedI finiteUn[symmetric] finiteIncLevel[symmetric] finiteInsert[symmetric] finiteEmpty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"path: follows a failing inherited property through tree\""], ["", "definition\n  failingSub :: \"['a => 'a set,(nat * 'a) set => bool,'a] => 'a\" where\n  \"failingSub subs P gamma = (SOME sigma. (sigma:subs gamma & ~P(tree subs sigma)))\""], ["", "lemma failingSubProps: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> failingSub subs P gamma \\<in> subs gamma & ~(P (tree subs (failingSub subs P gamma)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> failingSub subs P gamma \\<in> subs gamma \\<and>\n                      \\<not> P (tree subs (failingSub subs P gamma))", "apply(simp add: failingSub_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> (SOME sigma.\n                          sigma \\<in> subs gamma \\<and>\n                          \\<not> P (tree subs sigma))\n                      \\<in> subs gamma \\<and>\n                      \\<not> P (tree subs\n                                 (SOME sigma.\n                                     sigma \\<in> subs gamma \\<and>\n                                     \\<not> P (tree subs sigma)))", "apply(drule inheritedPropagate)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>inherited subs P; \\<not> terminal subs gamma;\n     fans subs\\<rbrakk>\n    \\<Longrightarrow> inherited subs P\n 2. \\<lbrakk>inherited subs P; \\<not> terminal subs gamma;\n     fans subs\\<rbrakk>\n    \\<Longrightarrow> fans subs\n 3. \\<lbrakk>inherited subs P; \\<not> terminal subs gamma;\n     fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> terminal subs gamma\n 4. \\<lbrakk>inherited subs P; \\<not> terminal subs gamma; fans subs;\n     \\<exists>sigma\\<in>subs gamma. \\<not> P (tree subs sigma)\\<rbrakk>\n    \\<Longrightarrow> (SOME sigma.\n                          sigma \\<in> subs gamma \\<and>\n                          \\<not> P (tree subs sigma))\n                      \\<in> subs gamma \\<and>\n                      \\<not> P (tree subs\n                                 (SOME sigma.\n                                     sigma \\<in> subs gamma \\<and>\n                                     \\<not> P (tree subs sigma)))", "apply(assumption+)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; \\<not> terminal subs gamma; fans subs;\n     \\<exists>sigma\\<in>subs gamma. \\<not> P (tree subs sigma)\\<rbrakk>\n    \\<Longrightarrow> (SOME sigma.\n                          sigma \\<in> subs gamma \\<and>\n                          \\<not> P (tree subs sigma))\n                      \\<in> subs gamma \\<and>\n                      \\<not> P (tree subs\n                                 (SOME sigma.\n                                     sigma \\<in> subs gamma \\<and>\n                                     \\<not> P (tree subs sigma)))", "apply(erule bexE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sigma.\n       \\<lbrakk>inherited subs P; \\<not> terminal subs gamma; fans subs;\n        sigma \\<in> subs gamma; \\<not> P (tree subs sigma)\\<rbrakk>\n       \\<Longrightarrow> (SOME sigma.\n                             sigma \\<in> subs gamma \\<and>\n                             \\<not> P (tree subs sigma))\n                         \\<in> subs gamma \\<and>\n                         \\<not> P (tree subs\n                                    (SOME sigma.\n  sigma \\<in> subs gamma \\<and> \\<not> P (tree subs sigma)))", "apply (rule someI2, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma failingSubFailsI: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> ~(P (tree subs (failingSub subs P gamma)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs (failingSub subs P gamma))", "apply(rule conjunct2[OF failingSubProps])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> inherited subs P\n 2. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs gamma)\n 3. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> terminal subs gamma\n 4. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> fans subs", "."], ["", "lemmas failingSubFailsE = failingSubFailsI[THEN notE]"], ["", "lemma failingSubSubs: \"[| inherited subs P; ~P (tree subs gamma); ~(terminal subs gamma); fans subs |]\n  ==> failingSub subs P gamma \\<in> subs gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> failingSub subs P gamma \\<in> subs gamma", "apply(rule conjunct1[OF failingSubProps])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> inherited subs P\n 2. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs gamma)\n 3. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> \\<not> terminal subs gamma\n 4. \\<lbrakk>inherited subs P; \\<not> P (tree subs gamma);\n     \\<not> terminal subs gamma; fans subs\\<rbrakk>\n    \\<Longrightarrow> fans subs", "."], ["", "primrec path :: \"['a => 'a set,'a,(nat * 'a) set => bool,nat] => 'a\"\nwhere\n  path0:   \"path subs gamma P 0       = gamma\"\n| pathSuc: \"path subs gamma P (Suc n) = (if terminal subs (path subs gamma P n)\n                                          then path subs gamma P n\n                                          else failingSub subs P (path subs gamma P n))\""], ["", "lemma pathFailsP: \"[| inherited subs P; fans subs; ~P(tree subs gamma) |]\n  ==> ~(P (tree subs (path subs gamma P n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs;\n     \\<not> P (tree subs gamma)\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs (path subs gamma P n))", "apply (induct_tac n, simp, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n))\\<rbrakk>\n       \\<Longrightarrow> \\<not> terminal subs\n                                 (path subs gamma P n) \\<longrightarrow>\n                         \\<not> P (tree subs\n                                    (failingSub subs P\n(path subs gamma P n)))", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n));\n        \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (tree subs\n                                    (failingSub subs P\n(path subs gamma P n)))", "apply(rule failingSubFailsI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n));\n        \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n       \\<Longrightarrow> inherited subs P\n 2. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n));\n        \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (tree subs (path subs gamma P n))\n 3. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n));\n        \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n       \\<Longrightarrow> \\<not> terminal subs (path subs gamma P n)\n 4. \\<And>n.\n       \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n        \\<not> P (tree subs (path subs gamma P n));\n        \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n       \\<Longrightarrow> fans subs", "apply(assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas PpathE = pathFailsP[THEN notE]"], ["", "lemma pathTerminal[rule_format]: \"[| inherited subs P; fans subs; terminal subs gamma |]\n  ==> terminal subs (path subs gamma P n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs; terminal subs gamma\\<rbrakk>\n    \\<Longrightarrow> terminal subs (path subs gamma P n)", "apply (induct_tac n, simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pathStarts:  \"path subs gamma P 0 = gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. path subs gamma P 0 = gamma", "by simp"], ["", "lemma pathSubs: \"[| inherited subs P; fans subs; ~P(tree subs gamma); ~ (terminal subs (path subs gamma P n)) |]\n  ==> path subs gamma P (Suc n) \\<in> subs (path subs gamma P n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> path subs gamma P (Suc n)\n                      \\<in> subs (path subs gamma P n)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> failingSub subs P (path subs gamma P n)\n                      \\<in> subs (path subs gamma P n)", "apply (rule failingSubSubs, assumption)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs (path subs gamma P n))\n 2. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> \\<not> terminal subs (path subs gamma P n)\n 3. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> fans subs", "apply(rule pathFailsP)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> inherited subs P\n 2. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> fans subs\n 3. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> \\<not> P (tree subs gamma)\n 4. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> \\<not> terminal subs (path subs gamma P n)\n 5. \\<lbrakk>inherited subs P; fans subs; \\<not> P (tree subs gamma);\n     \\<not> terminal subs (path subs gamma P n)\\<rbrakk>\n    \\<Longrightarrow> fans subs", "apply(assumption+)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma pathStops: \"terminal subs (path subs gamma P n) ==> path subs gamma P (Suc n) = path subs gamma P n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal subs (path subs gamma P n) \\<Longrightarrow>\n    path subs gamma P (Suc n) = path subs gamma P n", "by simp"], ["", "subsection \"Branch\""], ["", "definition\n  branch :: \"['a => 'a set,'a,nat => 'a] => bool\" where\n  \"branch subs Gamma f \\<longleftrightarrow> f 0 = Gamma\n    & (!n . terminal subs (f n) --> f (Suc n) = f n)\n    & (!n . ~ terminal subs (f n) --> f (Suc n) \\<in> subs (f n))\""], ["", "lemma branch0: \"branch subs Gamma f ==> f 0 = Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. branch subs Gamma f \\<Longrightarrow> f 0 = Gamma", "by (simp add: branch_def)"], ["", "lemma branchStops: \"branch subs Gamma f ==> terminal subs (f n) ==> f (Suc n) = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>branch subs Gamma f; terminal subs (f n)\\<rbrakk>\n    \\<Longrightarrow> f (Suc n) = f n", "by (simp add: branch_def)"], ["", "lemma branchSubs: \"branch subs Gamma f ==> ~ terminal subs (f n) ==> f (Suc n) \\<in> subs (f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>branch subs Gamma f; \\<not> terminal subs (f n)\\<rbrakk>\n    \\<Longrightarrow> f (Suc n) \\<in> subs (f n)", "by (simp add: branch_def)"], ["", "lemma branchI: \"[| (f 0 = Gamma);\n  !n . terminal subs (f n) --> f (Suc n) = f n;\n  !n . ~ terminal subs (f n) --> f (Suc n) \\<in> subs (f n) |] ==> branch subs Gamma f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = Gamma;\n     \\<forall>n. terminal subs (f n) \\<longrightarrow> f (Suc n) = f n;\n     \\<forall>n.\n        \\<not> terminal subs (f n) \\<longrightarrow>\n        f (Suc n) \\<in> subs (f n)\\<rbrakk>\n    \\<Longrightarrow> branch subs Gamma f", "by (simp add: branch_def)"], ["", "lemma branchTerminalPropagates: \"branch subs Gamma f ==> terminal subs (f m) ==> terminal subs (f (m + n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>branch subs Gamma f; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f (m + n))", "apply (induct_tac n, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>branch subs Gamma f; terminal subs (f m);\n        terminal subs (f (m + n))\\<rbrakk>\n       \\<Longrightarrow> terminal subs (f (m + Suc n))", "by(simp add: branchStops)"], ["", "lemma branchTerminalMono: \"branch subs Gamma f ==> m < n ==> terminal subs (f m) ==> terminal subs (f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f n)", "apply(subgoal_tac \"terminal subs (f (m+(n-m)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m);\n     terminal subs (f (m + (n - m)))\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f n)\n 2. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f (m + (n - m)))", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f (m + (n - m)))", "apply(rule branchTerminalPropagates)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> branch subs ?Gamma8 f\n 2. \\<lbrakk>branch subs Gamma f; m < n; terminal subs (f m)\\<rbrakk>\n    \\<Longrightarrow> terminal subs (f m)", "."], ["", "lemma branchPath:\n      \"[| inherited subs P; fans subs; ~P(tree subs gamma) |]\n       ==> branch subs gamma (path subs gamma P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inherited subs P; fans subs;\n     \\<not> P (tree subs gamma)\\<rbrakk>\n    \\<Longrightarrow> branch subs gamma (path subs gamma P)", "by(auto intro!: branchI pathStarts pathSubs pathStops)"], ["", "subsection \"failing branch property: abstracts path defn\""], ["", "lemma failingBranchExistence:  \"!!subs.\n  [| inherited subs P; fans subs; ~P(tree subs gamma) |]\n  ==> \\<exists>f . branch subs gamma f & (\\<forall>n . ~P(tree subs (f n)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>subs.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>f.\n                            branch subs gamma f \\<and>\n                            (\\<forall>n. \\<not> P (tree subs (f n)))", "apply(rule_tac x=\"path subs gamma P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>subs.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> branch subs gamma (path subs gamma P) \\<and>\n                         (\\<forall>n.\n                             \\<not> P (tree subs (path subs gamma P n)))", "apply(rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>subs.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> branch subs gamma (path subs gamma P)\n 2. \\<And>subs.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            \\<not> P (tree subs (path subs gamma P n))", "apply(force intro!: branchPath)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>subs.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>n.\n                            \\<not> P (tree subs (path subs gamma P n))", "apply(intro allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>subs n.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (tree subs (path subs gamma P n))", "apply(rule pathFailsP)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>subs n.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> inherited subs P\n 2. \\<And>subs n.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> fans subs\n 3. \\<And>subs n.\n       \\<lbrakk>inherited subs P; fans subs;\n        \\<not> P (tree subs gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<not> P (tree subs gamma)", "by auto"], ["", "definition\n  infBranch :: \"['a => 'a set,'a,nat => 'a] => bool\" where\n  \"infBranch subs Gamma f \\<longleftrightarrow> f 0 = Gamma & (\\<forall>n. f (Suc n) \\<in> subs (f n))\""], ["", "lemma infBranchI: \"[| (f 0 = Gamma); !n . f (Suc n) \\<in> subs (f n) |] ==> infBranch subs Gamma f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f 0 = Gamma; \\<forall>n. f (Suc n) \\<in> subs (f n)\\<rbrakk>\n    \\<Longrightarrow> infBranch subs Gamma f", "by (simp add: infBranch_def)"], ["", "subsection \"Tree induction principles\"\n\n  \\<comment> \\<open>we work hard to use nothing fancier that induction over naturals\\<close>"], ["", "lemma boundedTreeInduction':\n \"\\<lbrakk> fans subs;\n    \\<forall>delta. ~ terminal subs delta --> (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta \\<rbrakk>\n  \\<Longrightarrow> \\<forall>Gamma. boundedBy m (tree subs Gamma) \\<longrightarrow>  founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fans subs;\n     \\<forall>delta.\n        \\<not> terminal subs delta \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Gamma.\n                         boundedBy m (tree subs Gamma) \\<longrightarrow>\n                         founded subs P (tree subs Gamma) \\<longrightarrow>\n                         P Gamma", "apply(induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fans subs;\n     \\<forall>delta.\n        \\<not> terminal subs delta \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Gamma.\n                         boundedBy 0 (tree subs Gamma) \\<longrightarrow>\n                         founded subs P (tree subs Gamma) \\<longrightarrow>\n                         P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(intro impI allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy 0 (tree subs Gamma);\n        founded subs P (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(simp add: boundedBy0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}; founded subs P {}\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(subgoal_tac \"(0,Gamma) \\<in> tree subs Gamma\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}; founded subs P {};\n        (0, Gamma) \\<in> tree subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}; founded subs P {}\\<rbrakk>\n       \\<Longrightarrow> (0, Gamma) \\<in> tree subs Gamma\n 3. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}; founded subs P {}\\<rbrakk>\n       \\<Longrightarrow> (0, Gamma) \\<in> tree subs Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(rule tree0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            founded subs P\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(intro impI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(drule_tac x=Gamma in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma);\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow>\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply (case_tac \"terminal subs Gamma\", simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma);\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow> P Gamma;\n        \\<not> terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(drule_tac foundedD)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> terminal subs Gamma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma);\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow> P Gamma;\n        \\<not> terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma);\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow> P Gamma;\n        \\<not> terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma);\n        \\<not> terminal subs Gamma \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow> P Gamma;\n        \\<not> terminal subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply (erule impE, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow>\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply (erule impE, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(drule_tac x=sigma in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma;\n        boundedBy n (tree subs sigma) \\<longrightarrow>\n        founded subs P (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy n (tree subs sigma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma;\n        founded subs P (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(rule boundedBySuc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> sigma \\<in> subs (?Gamma44 n Gamma sigma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy (Suc n)\n                          (tree subs (?Gamma44 n Gamma sigma))\n 3. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma;\n        founded subs P (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 4. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy (Suc n) (tree subs Gamma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma;\n        founded subs P (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma;\n        founded subs P (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> founded subs P (tree subs sigma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(rule foundedSubs)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> founded subs P (tree subs (?Gamma50 n Gamma sigma))\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> sigma \\<in> subs (?Gamma50 n Gamma sigma)\n 3. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 4. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> sigma \\<in> subs Gamma\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        founded subs P (tree subs Gamma); \\<not> terminal subs Gamma;\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done\n  \\<comment> \\<open>tjr tidied and introduced new lemmas\\<close>"], ["", "lemma boundedTreeInduction:\n   \"\\<lbrakk>fans subs;\n     bounded (tree subs Gamma); founded subs P (tree subs Gamma);\n  \\<forall>delta. ~ terminal subs delta --> (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta\n  \\<rbrakk> \\<Longrightarrow> P Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fans subs; bounded (tree subs Gamma);\n     founded subs P (tree subs Gamma);\n     \\<forall>delta.\n        \\<not> terminal subs delta \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> P Gamma", "apply(unfold bounded_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fans subs; \\<exists>N. boundedBy N (tree subs Gamma);\n     founded subs P (tree subs Gamma);\n     \\<forall>delta.\n        \\<not> terminal subs delta \\<longrightarrow>\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> P Gamma", "apply(erule exE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N.\n       \\<lbrakk>fans subs; founded subs P (tree subs Gamma);\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy N (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(frule_tac boundedTreeInduction')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>N.\n       \\<lbrakk>fans subs; founded subs P (tree subs Gamma);\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy N (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>delta.\n                            \\<not> terminal subs delta \\<longrightarrow>\n                            (\\<forall>sigma\\<in>subs delta.\n                                ?P2 N sigma) \\<longrightarrow>\n                            ?P2 N delta\n 2. \\<And>N.\n       \\<lbrakk>fans subs; founded subs P (tree subs Gamma);\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy N (tree subs Gamma);\n        \\<forall>Gamma.\n           boundedBy (?m2 N) (tree subs Gamma) \\<longrightarrow>\n           founded subs (?P2 N) (tree subs Gamma) \\<longrightarrow>\n           ?P2 N Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N.\n       \\<lbrakk>fans subs; founded subs P (tree subs Gamma);\n        \\<forall>delta.\n           \\<not> terminal subs delta \\<longrightarrow>\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy N (tree subs Gamma);\n        \\<forall>Gamma.\n           boundedBy (?m2 N) (tree subs Gamma) \\<longrightarrow>\n           founded subs P (tree subs Gamma) \\<longrightarrow>\n           P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedTreeInduction2':\n \"[| fans subs;\n    \\<forall>delta. (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta |]\n  ==> \\<forall>Gamma. boundedBy m (tree subs Gamma) \\<longrightarrow> P Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fans subs;\n     \\<forall>delta.\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Gamma.\n                         boundedBy m (tree subs Gamma) \\<longrightarrow>\n                         P Gamma", "apply(induct_tac m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>fans subs;\n     \\<forall>delta.\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> \\<forall>Gamma.\n                         boundedBy 0 (tree subs Gamma) \\<longrightarrow>\n                         P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(intro impI allI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        boundedBy 0 (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(simp (no_asm_use) add: boundedBy0)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(subgoal_tac \"(0,Gamma) \\<in> tree subs Gamma\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}; (0, Gamma) \\<in> tree subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma\n 2. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}\\<rbrakk>\n       \\<Longrightarrow> (0, Gamma) \\<in> tree subs Gamma\n 3. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        tree subs Gamma = {}\\<rbrakk>\n       \\<Longrightarrow> (0, Gamma) \\<in> tree subs Gamma\n 2. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(rule tree0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma\\<rbrakk>\n       \\<Longrightarrow> \\<forall>Gamma.\n                            boundedBy (Suc n)\n                             (tree subs Gamma) \\<longrightarrow>\n                            P Gamma", "apply(intro impI allI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>delta.\n           (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n           P delta;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma)\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(drule_tac x=Gamma in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma);\n        (\\<forall>sigma\\<in>subs Gamma. P sigma) \\<longrightarrow>\n        P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply (erule impE, rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(drule_tac x=sigma in spec)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma;\n        boundedBy n (tree subs sigma) \\<longrightarrow> P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(erule impE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy n (tree subs sigma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply(rule boundedBySuc)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> sigma \\<in> subs (?Gamma30 n Gamma sigma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy (Suc n)\n                          (tree subs (?Gamma30 n Gamma sigma))\n 3. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 4. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma\\<rbrakk>\n       \\<Longrightarrow> boundedBy (Suc n) (tree subs Gamma)\n 2. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 3. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n Gamma sigma.\n       \\<lbrakk>fans subs; boundedBy (Suc n) (tree subs Gamma);\n        sigma \\<in> subs Gamma; P sigma\\<rbrakk>\n       \\<Longrightarrow> P sigma\n 2. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n Gamma.\n       \\<lbrakk>fans subs;\n        \\<forall>Gamma.\n           boundedBy n (tree subs Gamma) \\<longrightarrow> P Gamma;\n        boundedBy (Suc n) (tree subs Gamma); P Gamma\\<rbrakk>\n       \\<Longrightarrow> P Gamma", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma boundedTreeInduction2:\n     \"[| fans subs; boundedBy m (tree subs Gamma);\n          \\<forall>delta. (\\<forall>sigma \\<in> subs delta. P sigma) --> P delta |]\n      ==> P Gamma\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>fans subs; boundedBy m (tree subs Gamma);\n     \\<forall>delta.\n        (\\<forall>sigma\\<in>subs delta. P sigma) \\<longrightarrow>\n        P delta\\<rbrakk>\n    \\<Longrightarrow> P Gamma", "by (frule_tac boundedTreeInduction2', assumption, blast)"], ["", "end"]]}