{"file_name": "/home/qj213/afp-2021-10-22/thys/Completeness/Sequents.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Completeness", "problem_names": ["lemma evalS_nil[simp]: \"evalS M phi [] = False\"", "lemma evalS_cons[simp]: \"evalS M phi (A # Gamma) = (evalF M phi A | evalS M phi Gamma)\"", "lemma evalS_append: \"evalS M phi (Gamma @ Delta) = (evalS M phi Gamma | evalS M phi Delta)\"", "lemma evalS_equiv[rule_format]: \"(equalOn (freeVarsFL Gamma) f g) --> (evalS M f Gamma = evalS M g Gamma)\"", "lemma modelAssignsI: \"range f <= objects M \\<Longrightarrow> f : modelAssigns M\"", "lemma modelAssignsD: \"f : modelAssigns M \\<Longrightarrow> range f <= objects M\"", "lemma mapRuleI: \"[| A = map f a; B = (map f) ` b |] ==> (A,B) = mapRule f (a,b)\"", "lemmas Powp_mono [mono] = Pow_mono [to_pred pred_subset_eq]", "lemma mono_deductions: \"[| A <= B |] ==> deductions(A) <= deductions(B)\"", "lemma AxiomI: \"[| Axioms <= A |] ==> [FAtom Pos p vs,FAtom Neg p vs] : deductions(A)\"", "lemma DAxiomsI: \"[| DAxioms <= A |] ==> [FAtom Neg p vs,FAtom Pos p vs] : deductions(A)\"", "lemma DisjI: \"[| A0#A1#Gamma : deductions(A); Disjs <= A |] ==> (FConj Neg A0 A1#Gamma) : deductions(A)\"", "lemma ConjI: \"[| (A0#Gamma) : deductions(A); (A1#Delta) : deductions(A); Conjs <= A |] ==> FConj Pos A0 A1#Gamma @ Delta : deductions(A)\"", "lemma AllI: \"[| instanceF w A#Gamma : deductions(R); w ~: freeVarsFL (FAll Pos A#Gamma); Alls <= R |] ==> (FAll Pos A#Gamma) : deductions(R)\"", "lemma ExI: \"[| instanceF w A#Gamma : deductions(R); Exs <= R |] ==> (FAll Neg A#Gamma) : deductions(R)\"", "lemma WeakI: \"[| Gamma : deductions R; Weaks <= R |] ==> A#Gamma : deductions(R)\"", "lemma ContrI: \"[| A#A#Gamma : deductions R; Contrs <= R |] ==> A#Gamma : deductions(R)\"", "lemma PermI: \"[| Gamma' : deductions R; Gamma <~~> Gamma'; Perms <= R |] ==> Gamma : deductions(R)\"", "lemma WeakI1: \"[| Gamma : deductions(A); Weaks <= A |] ==> (Delta @ Gamma) : deductions(A)\"", "lemma WeakI2: \"[| Gamma : deductions(A); Perms <= A; Weaks <= A |] ==> (Gamma @ Delta) : deductions(A)\"", "lemma SATAxiomI: \"[| Axioms <= A; Weaks <= A; Perms <= A; forms = [FAtom Pos n vs,FAtom Neg n vs] @ Gamma |] ==> forms : deductions(A)\"", "lemma DisjI1: \"[| (A1#Gamma) : deductions(A); Disjs <= A; Weaks <= A |] ==> FConj Neg A0 A1#Gamma : deductions(A)\"", "lemma DisjI2: \"!!A. [| (A0#Gamma) : deductions(A); Disjs <= A; Weaks <= A; Perms <= A |] ==> FConj Neg A0 A1#Gamma : deductions(A)\"", "lemma perm_tmp4: \"Perms \\<subseteq> R \\<Longrightarrow> A @ (a # list) @ (a # list) : deductions R \\<Longrightarrow> (a # a # A) @ list @ list : deductions R\"", "lemma weaken_append[rule_format]: \"Contrs <= R ==> Perms <= R ==> !A. A @ Gamma @ Gamma : deductions(R) -->  A @ Gamma : deductions(R)\"", "lemma ListWeakI: \"Perms <= R ==> Contrs <= R ==> x # Gamma @ Gamma : deductions(R) ==> x # Gamma : deductions(R)\"", "lemma ConjI': \"[| (A0#Gamma) : deductions(A);  (A1#Gamma) : deductions(A); Contrs <= A; Conjs <= A; Perms <= A |] ==> FConj Pos A0 A1#Gamma : deductions(A)\"", "lemma rulesInPCs: \"Axioms <= PC\" \"Axioms <= CutFreePC\"\n  \"Conjs  <= PC\" \"Conjs  <= CutFreePC\"\n  \"Disjs  <= PC\" \"Disjs  <= CutFreePC\"\n  \"Alls   <= PC\" \"Alls   <= CutFreePC\"\n  \"Exs    <= PC\" \"Exs    <= CutFreePC\"\n  \"Weaks  <= PC\" \"Weaks  <= CutFreePC\"\n  \"Contrs <= PC\" \"Contrs <= CutFreePC\"\n  \"Perms  <= PC\" \"Perms  <= CutFreePC\"\n  \"Cuts   <= PC\"\n  \"CutFreePC <= PC\"", "lemma perm: \"! xs ys. xs <~~> ys --> (inDed xs = inDed ys)\"", "lemma contr: \"! x xs. inDed (x#x#xs) --> inDed (x#xs)\"", "lemma weak: \"! x xs. inDed xs --> inDed (x#xs)\"", "lemma inDed_mono'[simplified inDed_def]: \"set x <= set y ==> inDed x ==> inDed y\"", "lemma inDed_mono[simplified inDed_def]: \"inDed x ==> set x <= set y ==> inDed y\""], "translations": [["", "lemma evalS_nil[simp]: \"evalS M phi [] = False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS M phi [] = False", "by(simp add: evalS_def)"], ["", "lemma evalS_cons[simp]: \"evalS M phi (A # Gamma) = (evalF M phi A | evalS M phi Gamma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS M phi (A # Gamma) = (evalF M phi A \\<or> evalS M phi Gamma)", "by(simp add: evalS_def)"], ["", "lemma evalS_append: \"evalS M phi (Gamma @ Delta) = (evalS M phi Gamma | evalS M phi Delta)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. evalS M phi (Gamma @ Delta) =\n    (evalS M phi Gamma \\<or> evalS M phi Delta)", "by(force simp add: evalS_def)"], ["", "lemma evalS_equiv[rule_format]: \"(equalOn (freeVarsFL Gamma) f g) --> (evalS M f Gamma = evalS M g Gamma)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. equalOn (freeVarsFL Gamma) f g \\<longrightarrow>\n    evalS M f Gamma = evalS M g Gamma", "apply (induct Gamma, simp, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Gamma.\n       \\<lbrakk>equalOn (freeVarsFL Gamma) f g \\<longrightarrow>\n                evalS M f Gamma = evalS M g Gamma;\n        equalOn (freeVarsFL (a # Gamma)) f g\\<rbrakk>\n       \\<Longrightarrow> evalS M f (a # Gamma) = evalS M g (a # Gamma)", "apply(simp add: freeVarsFL_cons)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Gamma.\n       \\<lbrakk>equalOn (freeVarsFL Gamma) f g \\<longrightarrow>\n                evalS M f Gamma = evalS M g Gamma;\n        equalOn (freeVarsF a \\<union> freeVarsFL Gamma) f g\\<rbrakk>\n       \\<Longrightarrow> (evalF M f a \\<or> evalS M f Gamma) =\n                         (evalF M g a \\<or> evalS M g Gamma)", "apply(drule_tac equalOn_UnD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Gamma.\n       \\<lbrakk>equalOn (freeVarsFL Gamma) f g \\<longrightarrow>\n                evalS M f Gamma = evalS M g Gamma;\n        equalOn (freeVarsF a) f g \\<and>\n        equalOn (freeVarsFL Gamma) f g\\<rbrakk>\n       \\<Longrightarrow> (evalF M f a \\<or> evalS M f Gamma) =\n                         (evalF M g a \\<or> evalS M g Gamma)", "apply(blast dest: evalF_equiv)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "definition\n  modelAssigns :: \"[model] => (vbl => object) set\" where\n  \"modelAssigns M = { phi . range phi <= objects M }\""], ["", "lemma modelAssignsI: \"range f <= objects M \\<Longrightarrow> f : modelAssigns M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. range f \\<subseteq> objects M \\<Longrightarrow> f \\<in> modelAssigns M", "by(simp add: modelAssigns_def)"], ["", "lemma modelAssignsD: \"f : modelAssigns M \\<Longrightarrow> range f <= objects M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> modelAssigns M \\<Longrightarrow> range f \\<subseteq> objects M", "by(simp add: modelAssigns_def)"], ["", "definition\n  validS :: \"formula list => bool\" where\n  \"validS fs \\<longleftrightarrow> (! M . ! phi : modelAssigns M . evalS M phi fs = True)\""], ["", "subsection \"Rules\""], ["", "type_synonym rule = \"sequent * (sequent set)\""], ["", "definition\n  concR :: \"rule => sequent\" where\n  \"concR = (%(conc,prems). conc)\""], ["", "definition\n  premsR :: \"rule => sequent set\" where\n  \"premsR = (%(conc,prems). prems)\""], ["", "definition\n  mapRule :: \"(formula => formula) => rule => rule\" where\n  \"mapRule = (%f (conc,prems) . (map f conc,(map f) ` prems))\""], ["", "lemma mapRuleI: \"[| A = map f a; B = (map f) ` b |] ==> (A,B) = mapRule f (a,b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A = map f a; B = map f ` b\\<rbrakk>\n    \\<Longrightarrow> (A, B) = mapRule f (a, b)", "by(simp add: mapRule_def)\n    \\<comment> \\<open>FIXME tjr would like symmetric\\<close>"], ["", "subsection \"Deductions\""], ["", "(*FIXME. I don't see why plain Pow_mono is rejected.*)"], ["", "lemmas Powp_mono [mono] = Pow_mono [to_pred pred_subset_eq]"], ["", "inductive_set\n  deductions  :: \"rule set => formula list set\"\n  for rules :: \"rule set\"\n  (******\n   * Given a set of rules,\n   *   1. Given a rule conc/prem(i) in rules,\n   *       and the prem(i) are deductions from rules,\n   *       then conc is a deduction from rules.\n   *   2. can derive permutation of any deducible formula list.\n   *      (supposed to be multisets not lists).\n   ******)\n  where\n    inferI: \"[| (conc,prems) : rules;\n               prems : Pow(deductions(rules))\n            |] ==> conc : deductions(rules)\""], ["", "(*\n    perms   \"[| permutation conc' conc;\n                conc' : deductions(rules)\n             |] ==> conc : deductions(rules)\"\n*)"], ["", "lemma mono_deductions: \"[| A <= B |] ==> deductions(A) <= deductions(B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> B \\<Longrightarrow> deductions A \\<subseteq> deductions B", "apply(best intro: deductions.inferI elim: deductions.induct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(*lemmas deductionsMono = mono_deductions*)\n\n(*\n-- \"tjr following should be subsetD?\"\nlemmas deductionSubsetI = mono_deductions[THEN subsetD]\nthm deductionSubsetI\n*)\n\n(******\n * (f : formula -> formula) extended structurally over rules, deductions etc...\n * (((If f maps rules into themselves then can consider mapping derivation trees.)))\n * (((Is the asm necessary - think not?)))\n * The mapped deductions from the rules are same as\n * the deductions from the mapped rules.\n *\n * WHY:\n *\n * map f `` deductions rules <= deductions (mapRule f `` rules)     (this thm)\n *                           <= deductions rules                    (closed)\n *\n * If rules are closed under f then so are deductions.\n * Can take f = (subst u v) and have application to exercise #1.\n *\n * Q: maybe also make f dual mapping, (what about quantifier side conditions...?).\n ******)\n\n(*\nlemma map_deductions: \"map f ` deductions rules <= deductions (mapRule f ` rules)\"\n  apply(rule subsetI)\n  apply (erule_tac imageE, simp)\n  apply(erule deductions.induct)\n  apply(blast intro: deductions.inferI mapRuleI)\n  done\n\nlemma deductionsCloseRules: \"! (conc,prems) : S . prems <= deductions R --> conc : deductions R ==> deductions (R Un S) = deductions R\"\n  apply(rule equalityI)\n  prefer 2\n  apply(rule mono_deductions) apply blast\n  apply(rule subsetI)\n  apply (erule_tac deductions.induct, simp) apply(erule conjE) apply(thin_tac \"prems \\<subseteq> deductions (R \\<union> S)\")\n  apply(erule disjE)\n  apply(rule inferI) apply assumption apply force\n  apply blast\n  done\n*)"], ["", "subsection \"Basic Rule sets\""], ["", "definition\n  \"Axioms  = { z. ? p vs.              z = ([FAtom Pos p vs,FAtom Neg p vs],{}) }\""], ["", "definition\n  \"Conjs   = { z. ? A0 A1 Delta Gamma. z = (FConj Pos A0 A1#Gamma @ Delta,{A0#Gamma,A1#Delta}) }\""], ["", "definition\n  \"Disjs   = { z. ? A0 A1       Gamma. z = (FConj Neg A0 A1#Gamma,{A0#A1#Gamma}) }\""], ["", "definition\n  \"Alls    = { z. ? A x         Gamma. z = (FAll Pos A#Gamma,{instanceF x A#Gamma}) & x ~: freeVarsFL (FAll Pos A#Gamma) }\""], ["", "definition\n  \"Exs     = { z. ? A x         Gamma. z = (FAll Neg A#Gamma,{instanceF x A#Gamma})}\""], ["", "definition\n  \"Weaks   = { z. ? A           Gamma. z = (A#Gamma,{Gamma})}\""], ["", "definition\n  \"Contrs  = { z. ? A           Gamma. z = (A#Gamma,{A#A#Gamma})}\""], ["", "definition\n  \"Cuts    = { z. ? C Delta     Gamma. z = (Gamma @ Delta,{C#Gamma,FNot C#Delta})}\""], ["", "definition\n  \"Perms   = { z. ? Gamma Gamma'     . z = (Gamma,{Gamma'}) & Gamma <~~> Gamma'}\""], ["", "definition\n  \"DAxioms = { z. ? p vs.              z = ([FAtom Neg p vs,FAtom Pos p vs],{}) }\""], ["", "lemma AxiomI: \"[| Axioms <= A |] ==> [FAtom Pos p vs,FAtom Neg p vs] : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Axioms \\<subseteq> A \\<Longrightarrow>\n    [FAtom Pos p vs, FAtom Neg p vs] \\<in> deductions A", "apply(rule deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Axioms \\<subseteq> A \\<Longrightarrow>\n    ([FAtom Pos p vs, FAtom Neg p vs], ?prems) \\<in> A\n 2. Axioms \\<subseteq> A \\<Longrightarrow> ?prems \\<in> Pow (deductions A)", "apply(auto simp add: Axioms_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DAxiomsI: \"[| DAxioms <= A |] ==> [FAtom Neg p vs,FAtom Pos p vs] : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. DAxioms \\<subseteq> A \\<Longrightarrow>\n    [FAtom Neg p vs, FAtom Pos p vs] \\<in> deductions A", "apply(rule deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. DAxioms \\<subseteq> A \\<Longrightarrow>\n    ([FAtom Neg p vs, FAtom Pos p vs], ?prems) \\<in> A\n 2. DAxioms \\<subseteq> A \\<Longrightarrow> ?prems \\<in> Pow (deductions A)", "apply(auto simp add: DAxioms_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DisjI: \"[| A0#A1#Gamma : deductions(A); Disjs <= A |] ==> (FConj Neg A0 A1#Gamma) : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A0 # A1 # Gamma \\<in> deductions A;\n     Disjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> FConj Neg A0 A1 # Gamma \\<in> deductions A", "apply(rule deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A0 # A1 # Gamma \\<in> deductions A;\n     Disjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> (FConj Neg A0 A1 # Gamma, ?prems) \\<in> A\n 2. \\<lbrakk>A0 # A1 # Gamma \\<in> deductions A;\n     Disjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> ?prems \\<in> Pow (deductions A)", "apply(auto simp add: Disjs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ConjI: \"[| (A0#Gamma) : deductions(A); (A1#Delta) : deductions(A); Conjs <= A |] ==> FConj Pos A0 A1#Gamma @ Delta : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Delta \\<in> deductions A;\n     Conjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> FConj Pos A0 A1 # Gamma @ Delta \\<in> deductions A", "apply(rule_tac prems=\"{A0#Gamma,A1#Delta}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Delta \\<in> deductions A;\n     Conjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> (FConj Pos A0 A1 # Gamma @ Delta,\n                       {A0 # Gamma, A1 # Delta})\n                      \\<in> A\n 2. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Delta \\<in> deductions A;\n     Conjs \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> {A0 # Gamma, A1 # Delta} \\<in> Pow (deductions A)", "apply(auto simp add: Conjs_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Delta \\<in> deductions A;\n     {z. \\<exists>A0 A1 Delta Gamma.\n            z = (FConj Pos A0 A1 # Gamma @ Delta, {A0 # Gamma, A1 # Delta})}\n     \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> (FConj Pos A0 A1 # Gamma @ Delta,\n                       {A0 # Gamma, A1 # Delta})\n                      \\<in> A", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AllI: \"[| instanceF w A#Gamma : deductions(R); w ~: freeVarsFL (FAll Pos A#Gamma); Alls <= R |] ==> (FAll Pos A#Gamma) : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     w \\<notin> freeVarsFL (FAll Pos A # Gamma); Alls \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> FAll Pos A # Gamma \\<in> deductions R", "apply(rule_tac prems=\"{instanceF w A#Gamma}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     w \\<notin> freeVarsFL (FAll Pos A # Gamma); Alls \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> (FAll Pos A # Gamma, {instanceF w A # Gamma}) \\<in> R\n 2. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     w \\<notin> freeVarsFL (FAll Pos A # Gamma); Alls \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> {instanceF w A # Gamma} \\<in> Pow (deductions R)", "apply(auto simp add: Alls_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ExI: \"[| instanceF w A#Gamma : deductions(R); Exs <= R |] ==> (FAll Neg A#Gamma) : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     Exs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> FAll Neg A # Gamma \\<in> deductions R", "apply(rule_tac prems = \"{instanceF w A#Gamma}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     Exs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> (FAll Neg A # Gamma, {instanceF w A # Gamma}) \\<in> R\n 2. \\<lbrakk>instanceF w A # Gamma \\<in> deductions R;\n     Exs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> {instanceF w A # Gamma} \\<in> Pow (deductions R)", "apply(auto simp add: Exs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma WeakI: \"[| Gamma : deductions R; Weaks <= R |] ==> A#Gamma : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<in> deductions R; Weaks \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> A # Gamma \\<in> deductions R", "apply(rule_tac prems=\"{Gamma}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Gamma \\<in> deductions R; Weaks \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> (A # Gamma, {Gamma}) \\<in> R\n 2. \\<lbrakk>Gamma \\<in> deductions R; Weaks \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> {Gamma} \\<in> Pow (deductions R)", "apply(auto simp add: Weaks_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ContrI: \"[| A#A#Gamma : deductions R; Contrs <= R |] ==> A#Gamma : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A # A # Gamma \\<in> deductions R; Contrs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> A # Gamma \\<in> deductions R", "apply(rule_tac prems=\"{A#A#Gamma}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>A # A # Gamma \\<in> deductions R; Contrs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> (A # Gamma, {A # A # Gamma}) \\<in> R\n 2. \\<lbrakk>A # A # Gamma \\<in> deductions R; Contrs \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> {A # A # Gamma} \\<in> Pow (deductions R)", "apply(auto simp add: Contrs_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PermI: \"[| Gamma' : deductions R; Gamma <~~> Gamma'; Perms <= R |] ==> Gamma : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma' \\<in> deductions R; Gamma <~~> Gamma';\n     Perms \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> Gamma \\<in> deductions R", "apply(rule_tac prems=\"{Gamma'}\" in deductions.inferI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>Gamma' \\<in> deductions R; Gamma <~~> Gamma';\n     Perms \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> (Gamma, {Gamma'}) \\<in> R\n 2. \\<lbrakk>Gamma' \\<in> deductions R; Gamma <~~> Gamma';\n     Perms \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> {Gamma'} \\<in> Pow (deductions R)", "apply(auto simp add: Perms_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \"Derived Rules\""], ["", "lemma WeakI1: \"[| Gamma : deductions(A); Weaks <= A |] ==> (Delta @ Gamma) : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<in> deductions A; Weaks \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> Delta @ Gamma \\<in> deductions A", "apply (induct Delta, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a Delta.\n       \\<lbrakk>\\<lbrakk>Gamma \\<in> deductions A;\n                 Weaks \\<subseteq> A\\<rbrakk>\n                \\<Longrightarrow> Delta @ Gamma \\<in> deductions A;\n        Gamma \\<in> deductions A; Weaks \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> (a # Delta) @ Gamma \\<in> deductions A", "apply(auto intro: WeakI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma WeakI2: \"[| Gamma : deductions(A); Perms <= A; Weaks <= A |] ==> (Gamma @ Delta) : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Gamma \\<in> deductions A; Perms \\<subseteq> A;\n     Weaks \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> Gamma @ Delta \\<in> deductions A", "apply(blast intro: PermI perm_append_swap WeakI1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma SATAxiomI: \"[| Axioms <= A; Weaks <= A; Perms <= A; forms = [FAtom Pos n vs,FAtom Neg n vs] @ Gamma |] ==> forms : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Axioms \\<subseteq> A; Weaks \\<subseteq> A; Perms \\<subseteq> A;\n     forms = [FAtom Pos n vs, FAtom Neg n vs] @ Gamma\\<rbrakk>\n    \\<Longrightarrow> forms \\<in> deductions A", "apply(simp only:)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Axioms \\<subseteq> A; Weaks \\<subseteq> A; Perms \\<subseteq> A;\n     forms = [FAtom Pos n vs, FAtom Neg n vs] @ Gamma\\<rbrakk>\n    \\<Longrightarrow> [FAtom Pos n vs, FAtom Neg n vs] @ Gamma\n                      \\<in> deductions A", "apply(blast intro: WeakI2 AxiomI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DisjI1: \"[| (A1#Gamma) : deductions(A); Disjs <= A; Weaks <= A |] ==> FConj Neg A0 A1#Gamma : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A1 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n     Weaks \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> FConj Neg A0 A1 # Gamma \\<in> deductions A", "apply(blast intro: DisjI WeakI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma DisjI2: \"!!A. [| (A0#Gamma) : deductions(A); Disjs <= A; Weaks <= A; Perms <= A |] ==> FConj Neg A0 A1#Gamma : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> FConj Neg A0 A1 # Gamma \\<in> deductions A", "apply(rule DisjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> A0 # A1 # Gamma \\<in> deductions A\n 2. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Disjs \\<subseteq> A", "apply(rule PermI[OF _ perm.swap])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> A1 # A0 # Gamma \\<in> deductions A\n 2. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> A\n 3. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Disjs \\<subseteq> A", "apply(rule WeakI)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> A0 # Gamma \\<in> deductions A\n 2. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Weaks \\<subseteq> A\n 3. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> A\n 4. \\<And>A.\n       \\<lbrakk>A0 # Gamma \\<in> deductions A; Disjs \\<subseteq> A;\n        Weaks \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> Disjs \\<subseteq> A", ".\n\n    \\<comment> \\<open>FIXME the following 4 lemmas could all be proved for the standard rule sets using monotonicity as below\\<close>\n    \\<comment> \\<open>we keep proofs as in original, but they are slightly ugly, and do not state what is intuitively happening\\<close>"], ["", "lemma perm_tmp4: \"Perms \\<subseteq> R \\<Longrightarrow> A @ (a # list) @ (a # list) : deductions R \\<Longrightarrow> (a # a # A) @ list @ list : deductions R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Perms \\<subseteq> R;\n     A @ (a # list) @ a # list \\<in> deductions R\\<rbrakk>\n    \\<Longrightarrow> (a # a # A) @ list @ list \\<in> deductions R", "apply (rule PermI, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Perms \\<subseteq> R;\n     A @ a # list @ a # list \\<in> deductions R\\<rbrakk>\n    \\<Longrightarrow> a # a # A @ list @ list <~~> A @ a # list @ a # list", "apply(simp add: perm_count_conv count_append)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma weaken_append[rule_format]: \"Contrs <= R ==> Perms <= R ==> !A. A @ Gamma @ Gamma : deductions(R) -->  A @ Gamma : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A.\n                         A @ Gamma @ Gamma\n                         \\<in> deductions R \\<longrightarrow>\n                         A @ Gamma \\<in> deductions R", "apply (induct_tac Gamma, simp, rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        \\<forall>A.\n           A @ list @ list \\<in> deductions R \\<longrightarrow>\n           A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ (a # list) @ a # list\n                         \\<in> deductions R \\<longrightarrow>\n                         A @ a # list \\<in> deductions R", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        \\<forall>A.\n           A @ list @ list \\<in> deductions R \\<longrightarrow>\n           A @ list \\<in> deductions R;\n        A @ (a # list) @ a # list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(drule_tac x=\"a#a#A\" in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R;\n        (a # a # A) @ list @ list \\<in> deductions R \\<longrightarrow>\n        (a # a # A) @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(erule_tac impE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> (a # a # A) @ list @ list \\<in> deductions R\n 2. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R;\n        (a # a # A) @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(rule perm_tmp4)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> R\n 2. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ (a # list) @ a # list \\<in> deductions R\n 3. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R;\n        (a # a # A) @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(assumption, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        A @ (a # list) @ a # list \\<in> deductions R;\n        (a # a # A) @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(thin_tac \"A @ (a # list) @ a # list \\<in> deductions R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        (a # a # A) @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(frule_tac ContrI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> Contrs \\<subseteq> R\n 2. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # a # A @ list \\<in> deductions R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # a # A @ list \\<in> deductions R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(thin_tac \"a # a # A @ list \\<in> deductions R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list \\<in> deductions R", "apply(rule PermI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> ?Gamma'16 a list A \\<in> deductions R\n 2. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list <~~> ?Gamma'16 a list A\n 3. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> R", "apply assumption"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> A @ a # list <~~> a # A @ list\n 2. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> R", "apply(simp add: perm_count_conv count_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a list A.\n       \\<lbrakk>Contrs \\<subseteq> R; Perms \\<subseteq> R;\n        a # A @ list \\<in> deductions R\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> R", "by assumption\n  \\<comment> \\<open>FIXME horrible\\<close>"], ["", "lemma ListWeakI: \"Perms <= R ==> Contrs <= R ==> x # Gamma @ Gamma : deductions(R) ==> x # Gamma : deductions(R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Perms \\<subseteq> R; Contrs \\<subseteq> R;\n     x # Gamma @ Gamma \\<in> deductions R\\<rbrakk>\n    \\<Longrightarrow> x # Gamma \\<in> deductions R", "by(rule weaken_append[of R \"[x]\" Gamma, simplified])"], ["", "lemma ConjI': \"[| (A0#Gamma) : deductions(A);  (A1#Gamma) : deductions(A); Contrs <= A; Conjs <= A; Perms <= A |] ==> FConj Pos A0 A1#Gamma : deductions(A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Gamma \\<in> deductions A;\n     Contrs \\<subseteq> A; Conjs \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> FConj Pos A0 A1 # Gamma \\<in> deductions A", "apply(rule ListWeakI, assumption, assumption)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Gamma \\<in> deductions A;\n     Contrs \\<subseteq> A; Conjs \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> FConj Pos A0 A1 # Gamma @ Gamma \\<in> deductions A", "apply(rule ConjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Gamma \\<in> deductions A;\n     Contrs \\<subseteq> A; Conjs \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> A0 # Gamma \\<in> deductions A\n 2. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Gamma \\<in> deductions A;\n     Contrs \\<subseteq> A; Conjs \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> A1 # Gamma \\<in> deductions A\n 3. \\<lbrakk>A0 # Gamma \\<in> deductions A; A1 # Gamma \\<in> deductions A;\n     Contrs \\<subseteq> A; Conjs \\<subseteq> A; Perms \\<subseteq> A\\<rbrakk>\n    \\<Longrightarrow> Conjs \\<subseteq> A", "."], ["", "subsection \"Standard Rule Sets For Predicate Calculus\""], ["", "definition\n  PC :: \"rule set\" where\n  \"PC = Union {Perms,Axioms,Conjs,Disjs,Alls,Exs,Weaks,Contrs,Cuts}\""], ["", "definition\n  CutFreePC :: \"rule set\" where\n  \"CutFreePC = Union {Perms,Axioms,Conjs,Disjs,Alls,Exs,Weaks,Contrs}\""], ["", "lemma rulesInPCs: \"Axioms <= PC\" \"Axioms <= CutFreePC\"\n  \"Conjs  <= PC\" \"Conjs  <= CutFreePC\"\n  \"Disjs  <= PC\" \"Disjs  <= CutFreePC\"\n  \"Alls   <= PC\" \"Alls   <= CutFreePC\"\n  \"Exs    <= PC\" \"Exs    <= CutFreePC\"\n  \"Weaks  <= PC\" \"Weaks  <= CutFreePC\"\n  \"Contrs <= PC\" \"Contrs <= CutFreePC\"\n  \"Perms  <= PC\" \"Perms  <= CutFreePC\"\n  \"Cuts   <= PC\"\n  \"CutFreePC <= PC\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((Axioms \\<subseteq> PC &&& Axioms \\<subseteq> CutFreePC) &&&\n      Conjs \\<subseteq> PC &&& Conjs \\<subseteq> CutFreePC) &&&\n     (Disjs \\<subseteq> PC &&& Disjs \\<subseteq> CutFreePC) &&&\n     Alls \\<subseteq> PC &&&\n     Alls \\<subseteq> CutFreePC &&& Exs \\<subseteq> PC) &&&\n    ((Exs \\<subseteq> CutFreePC &&& Weaks \\<subseteq> PC) &&&\n     Weaks \\<subseteq> CutFreePC &&& Contrs \\<subseteq> PC) &&&\n    (Contrs \\<subseteq> CutFreePC &&& Perms \\<subseteq> PC) &&&\n    Perms \\<subseteq> CutFreePC &&&\n    Cuts \\<subseteq> PC &&& CutFreePC \\<subseteq> PC", "by(auto simp: PC_def CutFreePC_def)"], ["", "subsection \"Monotonicity for CutFreePC deductions\"\n\n  \\<comment> \\<open>these lemmas can be used to replace complicated permutation reasoning above\\<close>\n  \\<comment> \\<open>essentially if x is a deduction, and set x subset set y, then y is a deduction\\<close>"], ["", "definition\n  inDed :: \"formula list => bool\" where\n  \"inDed xs \\<longleftrightarrow> xs : deductions CutFreePC\""], ["", "lemma perm: \"! xs ys. xs <~~> ys --> (inDed xs = inDed ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xs ys. xs <~~> ys \\<longrightarrow> inDed xs = inDed ys", "apply(subgoal_tac \"! xs ys. xs <~~> ys --> inDed xs --> inDed ys\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>xs ys.\n       xs <~~> ys \\<longrightarrow>\n       inDed xs \\<longrightarrow> inDed ys \\<Longrightarrow>\n    \\<forall>xs ys. xs <~~> ys \\<longrightarrow> inDed xs = inDed ys\n 2. \\<forall>xs ys.\n       xs <~~> ys \\<longrightarrow> inDed xs \\<longrightarrow> inDed ys", "apply (blast intro: perm_sym, clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; inDed xs\\<rbrakk> \\<Longrightarrow> inDed ys", "apply(simp add: inDed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> ys \\<in> deductions CutFreePC", "apply (rule PermI, assumption)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> ys <~~> xs\n 2. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> CutFreePC", "apply(rule perm_sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> xs <~~> ys\n 2. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> CutFreePC", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs ys.\n       \\<lbrakk>xs <~~> ys; xs \\<in> deductions CutFreePC\\<rbrakk>\n       \\<Longrightarrow> Perms \\<subseteq> CutFreePC", "by(blast intro!: rulesInPCs)"], ["", "lemma contr: \"! x xs. inDed (x#x#xs) --> inDed (x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xs. inDed (x # x # xs) \\<longrightarrow> inDed (x # xs)", "apply(simp add: inDed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xs.\n       x # x # xs \\<in> deductions CutFreePC \\<longrightarrow>\n       x # xs \\<in> deductions CutFreePC", "apply(blast intro!: ContrI rulesInPCs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma weak: \"! x xs. inDed xs --> inDed (x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xs. inDed xs \\<longrightarrow> inDed (x # xs)", "apply(simp add: inDed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x xs.\n       xs \\<in> deductions CutFreePC \\<longrightarrow>\n       x # xs \\<in> deductions CutFreePC", "apply(blast intro!: WeakI rulesInPCs)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inDed_mono'[simplified inDed_def]: \"set x <= set y ==> inDed x ==> inDed y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set x \\<subseteq> set y; inDed x\\<rbrakk>\n    \\<Longrightarrow> inDed y", "using perm_weak_contr_mono[OF perm contr weak]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?x \\<subseteq> set ?y; inDed ?x\\<rbrakk>\n  \\<Longrightarrow> inDed ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>set x \\<subseteq> set y; inDed x\\<rbrakk>\n    \\<Longrightarrow> inDed y", "."], ["", "lemma inDed_mono[simplified inDed_def]: \"inDed x ==> set x <= set y ==> inDed y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inDed x; set x \\<subseteq> set y\\<rbrakk>\n    \\<Longrightarrow> inDed y", "using perm_weak_contr_mono[OF perm contr weak]"], ["proof (prove)\nusing this:\n  \\<lbrakk>set ?x \\<subseteq> set ?y; inDed ?x\\<rbrakk>\n  \\<Longrightarrow> inDed ?y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>inDed x; set x \\<subseteq> set y\\<rbrakk>\n    \\<Longrightarrow> inDed y", "."], ["", "end"]]}