{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Applicative_Set.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma ap_set_transfer[transfer_rule]:\n  \"rel_fun (rel_set (rel_fun A B)) (rel_fun (rel_set A) (rel_set B)) ap_set ap_set\""], "translations": [["", "lemma ap_set_transfer[transfer_rule]:\n  \"rel_fun (rel_set (rel_fun A B)) (rel_fun (rel_set A) (rel_set B)) ap_set ap_set\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun (rel_set (rel_fun A B)) (rel_fun (rel_set A) (rel_set B))\n     Applicative.ap Applicative.ap", "unfolding ap_set_def[abs_def] rel_set_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun\n     (\\<lambda>Aa Ba.\n         (\\<forall>x\\<in>Aa. Bex Ba (rel_fun A B x)) \\<and>\n         (\\<forall>y\\<in>Ba. \\<exists>x\\<in>Aa. rel_fun A B x y))\n     (rel_fun\n       (\\<lambda>Aa B.\n           (\\<forall>x\\<in>Aa. Bex B (A x)) \\<and>\n           (\\<forall>y\\<in>B. \\<exists>x\\<in>Aa. A x y))\n       (\\<lambda>A Ba.\n           (\\<forall>x\\<in>A. Bex Ba (B x)) \\<and>\n           (\\<forall>y\\<in>Ba. \\<exists>x\\<in>A. B x y)))\n     (\\<lambda>F X. {f x |f x. f \\<in> F \\<and> x \\<in> X})\n     (\\<lambda>F X. {f x |f x. f \\<in> F \\<and> x \\<in> X})", "by (fastforce elim: rel_funE)"], ["", "applicative set (C)\nfor\n  pure: \"\\<lambda>x. {x}\"\n  ap: ap_set\n  rel: rel_set\n  set: \"\\<lambda>x. x\""], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R. rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})\n 6. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R. rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})\n 6. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "fix R :: \"'a \\<Rightarrow> 'b \\<Rightarrow> bool\""], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R. rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})\n 6. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "show \"rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})", "by (auto intro: rel_setI)"], ["proof (state)\nthis:\n  rel_fun R (rel_set R) (\\<lambda>x. {x}) (\\<lambda>x. {x})\n\ngoal (5 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "fix R and f :: \"('a \\<Rightarrow> 'b) set\" and g :: \"('a \\<Rightarrow> 'c) set\" and x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "assume [transfer_rule]: \"rel_set (rel_fun (eq_on x) R) f g\""], ["proof (state)\nthis:\n  rel_set (rel_fun (eq_on x) R) f g\n\ngoal (5 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "have [transfer_rule]: \"rel_set (eq_on x) x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set (eq_on x) x x", "by (auto intro: rel_setI)"], ["proof (state)\nthis:\n  rel_set (eq_on x) x x\n\ngoal (5 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x\n 5. \\<And>R f g x.\n       rel_set (rel_fun (eq_on x) R) f g \\<Longrightarrow>\n       rel_set R (Applicative.ap f x) (Applicative.ap g x)", "show \"rel_set R (ap_set f x) (ap_set g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_set R (Applicative.ap f x) (Applicative.ap g x)", "by transfer_prover"], ["proof (state)\nthis:\n  rel_set R (Applicative.ap f x) (Applicative.ap g x)\n\ngoal (4 subgoals):\n 1. \\<And>f x. Applicative.ap {f} {x} = {f x}\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>g f x. g (f x)} g) f) x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>f x y.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap {\\<lambda>f x y. f y x} f) x) y =\n       Applicative.ap (Applicative.ap f y) x\n 4. \\<And>x. Applicative.ap {\\<lambda>x. x} x = x", "qed (unfold ap_set_def, fast+)"], ["", "end"]]}