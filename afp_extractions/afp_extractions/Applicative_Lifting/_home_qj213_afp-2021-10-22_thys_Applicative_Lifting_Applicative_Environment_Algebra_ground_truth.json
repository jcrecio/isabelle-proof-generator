{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Applicative_Environment_Algebra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma plus_fun_af [applicative_unfold]: \"f + g = pure (+) \\<diamondop> f \\<diamondop> g\"", "lemma zero_fun_af [applicative_unfold]: \"0 = pure 0\"", "lemma times_fun_af [applicative_unfold]: \"f * g = pure (*) \\<diamondop> f \\<diamondop> g\"", "lemma one_fun_af [applicative_unfold]: \"1 = pure 1\"", "lemma of_nat_fun_af [applicative_unfold]: \"of_nat n = pure (of_nat n)\"", "lemma inverse_fun_af [applicative_unfold]: \"inverse f = pure inverse \\<diamondop> f\"", "lemma divide_fun_af [applicative_unfold]: \"divide f g = pure divide \\<diamondop> f \\<diamondop> g\""], "translations": [["", "lemma plus_fun_af [applicative_unfold]: \"f + g = pure (+) \\<diamondop> f \\<diamondop> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f + g = pure (+) \\<diamondop> f \\<diamondop> g", "unfolding plus_fun_def const_def apf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x + g x) = (\\<lambda>z. f z + g z)", ".."], ["", "lemma zero_fun_af [applicative_unfold]: \"0 = pure 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 = pure (0::'b)", "unfolding zero_fun_def const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 0::'b) = (\\<lambda>_. 0::'b)", ".."], ["", "lemma times_fun_af [applicative_unfold]: \"f * g = pure (*) \\<diamondop> f \\<diamondop> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f * g = pure (*) \\<diamondop> f \\<diamondop> g", "unfolding times_fun_def const_def apf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x * g x) = (\\<lambda>z. f z * g z)", ".."], ["", "lemma one_fun_af [applicative_unfold]: \"1 = pure 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = pure (1::'b)", "unfolding one_fun_def const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. 1::'b) = (\\<lambda>_. 1::'b)", ".."], ["", "lemma of_nat_fun_af [applicative_unfold]: \"of_nat n = pure (of_nat n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat n = pure (of_nat n)", "unfolding of_nat_fun const_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. of_nat n) = (\\<lambda>_. of_nat n)", ".."], ["", "lemma inverse_fun_af [applicative_unfold]: \"inverse f = pure inverse \\<diamondop> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inverse f = pure inverse \\<diamondop> f", "unfolding inverse_fun_def o_def const_def apf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. inverse (f x)) = (\\<lambda>z. inverse (f z))", ".."], ["", "lemma divide_fun_af [applicative_unfold]: \"divide f g = pure divide \\<diamondop> f \\<diamondop> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f / g = pure (/) \\<diamondop> f \\<diamondop> g", "unfolding divide_fun_def const_def apf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. f x / g x) = (\\<lambda>z. f z / g z)", ".."], ["", "end"], ["", "end"]]}