{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Applicative_Stream.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma ap_stream_id: \"pure (\\<lambda>x. x) \\<diamondop> x = x\"", "lemma ap_stream_homo: \"pure f \\<diamondop> pure x = pure (f x)\"", "lemma ap_stream_interchange: \"f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\"", "lemma ap_stream_composition: \"pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> (f \\<diamondop> x)\"", "lemma smap_applicative[applicative_unfold]: \"smap f x = pure f \\<diamondop> x\"", "lemma smap2_applicative[applicative_unfold]: \"smap2 f x y = pure f \\<diamondop> x \\<diamondop> y\""], "translations": [["", "lemma ap_stream_id: \"pure (\\<lambda>x. x) \\<diamondop> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>x. x) \\<diamondop> x = x", "by (coinduction arbitrary: x) simp"], ["", "lemma ap_stream_homo: \"pure f \\<diamondop> pure x = pure (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure f \\<diamondop> pure x = pure (f x)", "by coinduction simp"], ["", "lemma ap_stream_interchange: \"f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f", "by (coinduction arbitrary: f) auto"], ["", "lemma ap_stream_composition: \"pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> (f \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n    f \\<diamondop>\n    x =\n    g \\<diamondop> (f \\<diamondop> x)", "by (coinduction arbitrary: g f x) auto"], ["", "applicative stream (S, K)\nfor\n  pure: sconst\n  ap: ap_stream\n  rel: stream_all2\n  set: sset"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>f g x.\n       pure (\\<lambda>f g x. f x (g x)) \\<diamondop> f \\<diamondop>\n       g \\<diamondop>\n       x =\n       f \\<diamondop> x \\<diamondop> (g \\<diamondop> x)\n 4. \\<And>R. (R ===> stream_all2 R) pure pure\n 5. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "proof -"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>f g x.\n       pure (\\<lambda>f g x. f x (g x)) \\<diamondop> f \\<diamondop>\n       g \\<diamondop>\n       x =\n       f \\<diamondop> x \\<diamondop> (g \\<diamondop> x)\n 4. \\<And>R. (R ===> stream_all2 R) pure pure\n 5. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "fix g :: \"('b \\<Rightarrow> 'a \\<Rightarrow> 'c) stream\" and f x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>f g x.\n       pure (\\<lambda>f g x. f x (g x)) \\<diamondop> f \\<diamondop>\n       g \\<diamondop>\n       x =\n       f \\<diamondop> x \\<diamondop> (g \\<diamondop> x)\n 4. \\<And>R. (R ===> stream_all2 R) pure pure\n 5. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "show \"pure (\\<lambda>g f x. g x (f x)) \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> x \\<diamondop> (f \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>g f x. g x (f x)) \\<diamondop> g \\<diamondop>\n    f \\<diamondop>\n    x =\n    g \\<diamondop> x \\<diamondop> (f \\<diamondop> x)", "by (coinduction arbitrary: g f x) auto"], ["proof (state)\nthis:\n  pure (\\<lambda>g f x. g x (f x)) \\<diamondop> g \\<diamondop>\n  f \\<diamondop>\n  x =\n  g \\<diamondop> x \\<diamondop> (f \\<diamondop> x)\n\ngoal (4 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>R. (R ===> stream_all2 R) pure pure\n 4. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>R. (R ===> stream_all2 R) pure pure\n 4. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "fix x :: \"'b stream\" and y :: \"'a stream\""], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x y. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n 3. \\<And>R. (R ===> stream_all2 R) pure pure\n 4. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "show \"pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x", "by (coinduction arbitrary: x y) auto"], ["proof (state)\nthis:\n  pure (\\<lambda>x y. x) \\<diamondop> x \\<diamondop> y = x\n\ngoal (3 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R. (R ===> stream_all2 R) pure pure\n 3. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R. (R ===> stream_all2 R) pure pure\n 3. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "fix R :: \"'a \\<Rightarrow> 'b \\<Rightarrow> bool\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R. (R ===> stream_all2 R) pure pure\n 3. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "show \"(R ===> stream_all2 R) pure pure\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R ===> stream_all2 R) pure pure", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. R x y \\<Longrightarrow> stream_all2 R (pure x) (pure y)", "fix x y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. R x y \\<Longrightarrow> stream_all2 R (pure x) (pure y)", "assume \"R x y\""], ["proof (state)\nthis:\n  R x y\n\ngoal (1 subgoal):\n 1. \\<And>x y. R x y \\<Longrightarrow> stream_all2 R (pure x) (pure y)", "then"], ["proof (chain)\npicking this:\n  R x y", "show \"stream_all2 R (pure x) (pure y)\""], ["proof (prove)\nusing this:\n  R x y\n\ngoal (1 subgoal):\n 1. stream_all2 R (pure x) (pure y)", "by coinduction simp"], ["proof (state)\nthis:\n  stream_all2 R (pure x) (pure y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (R ===> stream_all2 R) pure pure\n\ngoal (2 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "fix R and f :: \"('a \\<Rightarrow> 'b) stream\" and g :: \"('a \\<Rightarrow> 'c) stream\" and x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "assume [transfer_rule]: \"stream_all2 (eq_on (sset x) ===> R) f g\""], ["proof (state)\nthis:\n  stream_all2 (eq_on (sset x) ===> R) f g\n\ngoal (2 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "have [transfer_rule]: \"stream_all2 (eq_on (sset x)) x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 (eq_on (sset x)) x x", "by(simp add: stream.rel_refl_strong)"], ["proof (state)\nthis:\n  stream_all2 (eq_on (sset x)) x x\n\ngoal (2 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>R f g x.\n       stream_all2 (eq_on (sset x) ===> R) f g \\<Longrightarrow>\n       stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "show \"stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)", "by transfer_prover"], ["proof (state)\nthis:\n  stream_all2 R (f \\<diamondop> x) (g \\<diamondop> x)\n\ngoal (1 subgoal):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)", "qed (rule ap_stream_homo)"], ["", "lemma smap_applicative[applicative_unfold]: \"smap f x = pure f \\<diamondop> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smap f x = pure f \\<diamondop> x", "unfolding ap_stream_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. smap f x =\n    corec_stream (\\<lambda>(f, x). shd f (shd x)) (\\<lambda>(f, x). False)\n     (\\<lambda>(f, x). undefined) (\\<lambda>(f, x). (stl f, stl x))\n     (pure f, x)", "by (coinduction arbitrary: x) auto"], ["", "lemma smap2_applicative[applicative_unfold]: \"smap2 f x y = pure f \\<diamondop> x \\<diamondop> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. smap2 f x y = pure f \\<diamondop> x \\<diamondop> y", "unfolding ap_stream_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. smap2 f x y =\n    corec_stream (\\<lambda>(f, x). shd f (shd x)) (\\<lambda>(f, x). False)\n     (\\<lambda>(f, x). undefined) (\\<lambda>(f, x). (stl f, stl x))\n     (corec_stream (\\<lambda>(f, x). shd f (shd x)) (\\<lambda>(f, x). False)\n       (\\<lambda>(f, x). undefined) (\\<lambda>(f, x). (stl f, stl x))\n       (pure f, x),\n      y)", "by (coinduction arbitrary: x y) auto"], ["", "end"], ["", "end"]]}