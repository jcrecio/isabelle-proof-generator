{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Idiomatic_Terms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma ap_congL[intro]: \"itrm_cong R f f' \\<Longrightarrow> itrm_cong R (f \\<diamondop> x) (f' \\<diamondop> x)\"", "lemma ap_congR[intro]: \"itrm_cong R x x' \\<Longrightarrow> itrm_cong R (f \\<diamondop> x) (f \\<diamondop> x')\"", "lemma pure_similarE:\n  assumes \"Pure x' \\<cong> y\"\n  obtains y' where \"y = Pure y'\" and \"x' \\<leftrightarrow> y'\"", "lemma opaque_similarE:\n  assumes \"Opaque x' \\<cong> y\"\n  obtains y' where \"y = Opaque y'\" and \"x' = y'\"", "lemma ap_similarE:\n  assumes \"x1 \\<diamondop> x2 \\<cong> y\"\n  obtains y1 y2 where \"y = y1 \\<diamondop> y2\" and \"x1 \\<cong> y1\" and \"x2 \\<cong> y2\"", "lemma idiom_rule_into_equiv: \"idiom_rule x y \\<Longrightarrow> x \\<simeq> y\"", "lemmas itrm_id = idiom_id[THEN idiom_rule_into_equiv]", "lemmas itrm_comp = idiom_comp[THEN idiom_rule_into_equiv]", "lemmas itrm_hom = idiom_hom[THEN idiom_rule_into_equiv]", "lemmas itrm_xchng = idiom_xchng[THEN idiom_rule_into_equiv]", "lemma similar_into_equiv: \"x \\<cong> y \\<Longrightarrow> x \\<simeq> y\"", "lemma opaque_equiv: \"x \\<simeq> y \\<Longrightarrow> opaque x = opaque y\"", "lemma iorder_equiv: \"x \\<simeq> y \\<Longrightarrow> iorder x = iorder y\"", "lemma equiv_into_ext_equiv: \"x \\<simeq> y \\<Longrightarrow> x \\<simeq>\\<^sup>+ y\"", "lemmas itrm_ext_id = itrm_id[THEN equiv_into_ext_equiv]", "lemmas itrm_ext_comp = itrm_comp[THEN equiv_into_ext_equiv]", "lemmas itrm_ext_hom = itrm_hom[THEN equiv_into_ext_equiv]", "lemmas itrm_ext_xchng = itrm_xchng[THEN equiv_into_ext_equiv]", "lemma funpow_Suc_inside: \"(f ^^ Suc n) x = (f ^^ n) (f x)\"", "lemma absn_cong[intro]: \"s \\<leftrightarrow> t \\<Longrightarrow> (Abs^^n) s \\<leftrightarrow> (Abs^^n) t\"", "lemma free_unlift: \"free (unlift' n x i) j \\<Longrightarrow> j \\<ge> n \\<or> (j \\<ge> i \\<and> j < i + iorder x)\"", "lemma unlift_subst: \"j \\<le> i \\<and> j \\<le> n \\<Longrightarrow> (unlift' (Suc n) t (Suc i))[s/j] = unlift' n t i\"", "lemma unlift'_equiv: \"x \\<simeq> y \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n y i\"", "lemma unlift_equiv: \"x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y\"", "lemma all_pure_unlift_vars: \"opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\"", "lemma ap_cfD1[dest]: \"f \\<diamondop> x \\<in> CF \\<Longrightarrow> f \\<in> CF\"", "lemma ap_cfD2[dest]: \"f \\<diamondop> x \\<in> CF \\<Longrightarrow> \\<exists>x'. x = Opaque x'\"", "lemma opaque_not_cf[simp]: \"Opaque x \\<in> CF \\<Longrightarrow> False\"", "lemma cf_unlift:\n  assumes \"x \\<in> CF\"\n    shows \"CF_pure x \\<leftrightarrow> unlift x\"", "lemma cf_similarI:\n  assumes \"x \\<in> CF\" \"y \\<in> CF\"\n      and \"opaque x = opaque y\"\n      and \"CF_pure x \\<leftrightarrow> CF_pure y\"\n    shows \"x \\<cong> y\"", "lemma cf_similarD:\n  assumes in_cf: \"x \\<in> CF\" \"y \\<in> CF\"\n      and similar: \"x \\<cong> y\"\n    shows \"CF_pure x \\<leftrightarrow> CF_pure y \\<and> opaque x = opaque y\"", "lemma cf_unique:\n  assumes in_cf: \"x \\<in> CF\" \"y \\<in> CF\"\n      and equiv: \"x \\<simeq> y\"\n    shows \"x \\<cong> y\"", "lemma norm_pn_in_cf:\n  assumes \"x \\<in> CF\"\n    shows \"norm_pn f x \\<in> CF\"", "lemma norm_nn_in_cf:\n  assumes \"n \\<in> CF\" \"n' \\<in> CF\"\n    shows \"norm_nn n n' \\<in> CF\"", "lemma norm_in_cf: \"norm x \\<in> CF\"", "lemma norm_pn_equiv:\n  assumes \"x \\<in> CF\"\n    shows \"norm_pn f x \\<simeq> Pure f \\<diamondop> x\"", "lemma norm_nn_equiv:\n  assumes \"n \\<in> CF\" \"n' \\<in> CF\"\n    shows \"norm_nn n n' \\<simeq> n \\<diamondop> n'\"", "lemma norm_equiv: \"norm x \\<simeq> x\"", "lemma normal_form: obtains n where \"n \\<simeq> x\" and \"n \\<in> CF\"", "lemma nf_unlift:\n  assumes equiv: \"n \\<simeq> x\" and cf: \"n \\<in> CF\"\n    shows \"CF_pure n \\<leftrightarrow> unlift x\"", "theorem nf_lifting:\n  assumes opaque: \"opaque x = opaque y\"\n      and base_eq: \"unlift x \\<leftrightarrow> unlift y\"\n    shows \"x \\<simeq> y\"", "lemma var_dist_Nil[simp]: \"var_dist [] t = t\"", "lemma var_dist_Cons[simp]: \"var_dist (v # vs) t = var_dist vs (t \\<degree> Var v)\"", "lemma var_dist_append1: \"var_dist (vs @ [v]) t = var_dist vs t \\<degree> Var v\"", "lemma var_dist_frees: \"frees (var_dist vs t) = frees t \\<union> set vs\"", "lemma var_dist_subst_lt:\n  \"\\<forall>v\\<in>set vs. i < v \\<Longrightarrow> (var_dist vs s)[t/i] = var_dist (map (\\<lambda>v. v - 1) vs) (s[t/i])\"", "lemma var_dist_subst_gt:\n  \"\\<forall>v\\<in>set vs. v < i \\<Longrightarrow> (var_dist vs s)[t/i] = var_dist vs (s[t/i])\"", "lemma vsubst_subst[simp]: \"(Var u)[Var v/w] = Var (vsubst u v w)\"", "lemma vsubst_subst_lt[simp]: \"u < w \\<Longrightarrow> vsubst u v w = u\"", "lemma var_dist_subst_Var:\n  \"(var_dist vs s)[Var i/j] = var_dist (map (\\<lambda>v. vsubst v i j) vs) (s[Var i/j])\"", "lemma var_dist_cong: \"s \\<leftrightarrow> t \\<Longrightarrow> var_dist vs s \\<leftrightarrow> var_dist vs t\"", "lemma absn_subst: \"((Abs^^n) s)[t/k] = (Abs^^n) (s[liftn n t 0/k+n])\"", "lemma absn_beta_equiv: \"(Abs^^Suc n) s \\<degree> t \\<leftrightarrow> (Abs^^n) (s[liftn n t 0/n])\"", "lemma absn_dist_eta: \"(Abs^^n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t\"", "lemma strip_context_liftn: \"strip_context n (liftn (m + n) t k) k = liftn m t k\"", "lemma liftn_strip_context:\n  assumes \"\\<forall>i\\<in>frees t. i < k \\<or> k + n \\<le> i\"\n    shows \"liftn n (strip_context n t k) k = t\"", "lemma absn_dist_eta_free:\n  assumes \"\\<forall>i\\<in>frees t. n \\<le> i\"\n  shows \"(Abs^^n) (var_dist (rev [0..<n]) t) \\<leftrightarrow> strip_context n t 0\" (is \"?lhs t \\<leftrightarrow> ?rhs\")", "lemma perm_vars_distinct: \"perm_vars n vs \\<Longrightarrow> distinct vs\"", "lemma perm_vars_length: \"perm_vars n vs \\<Longrightarrow> length vs = n\"", "lemma perm_vars_lt: \"perm_vars n vs \\<Longrightarrow> \\<forall>i\\<in>set vs. i < n\"", "lemma perm_vars_nth_lt: \"perm_vars n vs \\<Longrightarrow> i < n \\<Longrightarrow> vs ! i < n\"", "lemma perm_vars_inj_on_nth:\n  assumes \"perm_vars n vs\"\n    shows \"inj_on (nth vs) {0..<n}\"", "lemma perm_vars_inv_nth:\n  assumes \"perm_vars n vs\"\n      and \"i < n\"\n    shows \"perm_vars_inv n vs (vs ! i) = i\"", "lemma dist_perm_eta:\n  assumes perm_vars: \"perm_vars n vs\"\n  obtains vs' where \"\\<And>t. \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n    (Abs^^n) (var_dist vs' ((Abs^^n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow> strip_context n t 0\"", "lemma liftn_absn: \"liftn n ((Abs^^m) t) k = (Abs^^m) (liftn n t (k + m))\"", "lemma liftn_var_dist_lt:\n  \"\\<forall>i\\<in>set vs. i < k \\<Longrightarrow> liftn n (var_dist vs t) k = var_dist vs (liftn n t k)\"", "lemma liftn_context_conv: \"k \\<le> k' \\<Longrightarrow> \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i \\<Longrightarrow> liftn n t k = liftn n t k'\"", "lemma liftn_liftn0: \"\\<forall>i\\<in>frees t. k \\<le> i \\<Longrightarrow> liftn n t k = liftn n t 0\"", "lemma dist_perm_eta_equiv:\n  assumes perm_vars: \"perm_vars n vs\"\n      and not_free: \"\\<forall>i\\<in>frees s. n \\<le> i\" \"\\<forall>i\\<in>frees t. n \\<le> i\"\n      and perm_equiv: \"(Abs^^n) (var_dist vs s) \\<leftrightarrow> (Abs^^n) (var_dist vs t)\"\n    shows \"strip_context n s 0 \\<leftrightarrow> strip_context n t 0\"", "lemma bind_eq_SomeE:\n  assumes \"Option.bind x f = Some y\"\n  obtains x' where \"x = Some x'\" and \"f x' = Some y\"", "lemma foldr_option_Nil[simp]: \"foldr_option f [] e = Some e\"", "lemma foldr_option_Cons_SomeE:\n  assumes \"foldr_option f (x#xs) e = Some y\"\n  obtains y' where \"foldr_option f xs e = Some y'\" and \"f x y' = Some y\"", "lemma term_brackets_Nil[simp]: \"term_brackets [] t = Some t\"", "lemma term_brackets_Cons_SomeE:\n  assumes \"term_brackets (v#vs) t = Some t'\"\n  obtains s' where \"term_brackets vs t = Some s'\" and \"term_bracket v s' = Some t'\"", "lemma term_brackets_ConsI:\n  assumes \"term_brackets vs t = Some t'\"\n      and \"term_bracket v t' = Some t''\"\n    shows \"term_brackets (v#vs) t = Some t''\"", "lemma term_brackets_dist:\n  assumes \"term_brackets vs t = Some t'\"\n    shows \"var_dist vs t' \\<leftrightarrow> t\"", "lemma strip_unlift_vars:\n  assumes \"opaque x = []\"\n  shows \"strip_context n (unlift_vars n x) 0 = unlift_vars 0 x\"", "lemma unlift_vars_frees: \"\\<forall>i\\<in>frees (unlift_vars n x). i \\<in> set (opaque x) \\<or> n \\<le> i\"", "lemma itrm_brackets_Nil[simp]: \"itrm_brackets [] x = Some x\"", "lemma itrm_brackets_Cons_SomeE:\n  assumes \"itrm_brackets (v#vs) x = Some x'\"\n  obtains y' where \"itrm_brackets vs x = Some y'\" and \"itrm_bracket v y' = Some x'\"", "lemma opaque_dist_cong: \"x \\<simeq>\\<^sup>+ y \\<Longrightarrow> opaque_dist vs x \\<simeq>\\<^sup>+ opaque_dist vs y\"", "lemma itrm_brackets_dist:\n  assumes defined: \"itrm_brackets vs x = Some x'\"\n    shows \"opaque_dist vs x' \\<simeq>\\<^sup>+ x\"", "lemma itrm_brackets_opaque:\n  assumes \"itrm_brackets vs x = Some x'\"\n    shows \"set (opaque x') = set (opaque x) - set vs\"", "lemma itrm_brackets_all:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> set vs\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"opaque x' = []\"", "lemma itrm_brackets_all_unlift_vars:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> set vs\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"x' \\<simeq>\\<^sup>+ Pure (unlift_vars 0 x')\"", "lemma brackets_unlift_vars_swap:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> {0..<n}\"\n      and vs_bound: \"set vs \\<subseteq> {0..<n}\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')\"", "theorem bracket_lifting:\n  assumes all_vars: \"set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\"\n      and perm_vars: \"perm_vars n vs\"\n      and defined: \"itrm_brackets vs x = Some x'\" \"itrm_brackets vs y = Some y'\"\n      and base_eq: \"(Abs^^n) (unlift_vars n x) \\<leftrightarrow> (Abs^^n) (unlift_vars n y)\"\n    shows \"x \\<simeq>\\<^sup>+ y\""], "translations": [["", "lemma ap_congL[intro]: \"itrm_cong R f f' \\<Longrightarrow> itrm_cong R (f \\<diamondop> x) (f' \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. itrm_cong R f f' \\<Longrightarrow>\n    itrm_cong R (f \\<diamondop> x) (f' \\<diamondop> x)", "by (blast intro: ap_cong)"], ["", "lemma ap_congR[intro]: \"itrm_cong R x x' \\<Longrightarrow> itrm_cong R (f \\<diamondop> x) (f \\<diamondop> x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. itrm_cong R x x' \\<Longrightarrow>\n    itrm_cong R (f \\<diamondop> x) (f \\<diamondop> x')", "by (blast intro: ap_cong)"], ["", "text \\<open>Idiomatic terms are \\emph{similar} iff they have the same structure, and all contained\n  lambda terms are equivalent.\\<close>"], ["", "abbreviation similar :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> bool\" (infixl \"\\<cong>\" 50)\nwhere \"x \\<cong> y \\<equiv> itrm_cong (\\<lambda>_ _. False) x y\""], ["", "lemma pure_similarE:\n  assumes \"Pure x' \\<cong> y\"\n  obtains y' where \"y = Pure y'\" and \"x' \\<leftrightarrow> y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Pure y'; x' \\<leftrightarrow> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Pure y'; x' \\<leftrightarrow> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define x :: \"'a itrm\" where \"x = Pure x'\""], ["proof (state)\nthis:\n  x = Pure x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Pure y'; x' \\<leftrightarrow> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  Pure x' \\<cong> y", "have \"x \\<cong> y\""], ["proof (prove)\nusing this:\n  Pure x' \\<cong> y\n\ngoal (1 subgoal):\n 1. x \\<cong> y", "unfolding x_def"], ["proof (prove)\nusing this:\n  Pure x' \\<cong> y\n\ngoal (1 subgoal):\n 1. Pure x' \\<cong> y", "."], ["proof (state)\nthis:\n  x \\<cong> y\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Pure y'; x' \\<leftrightarrow> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  x \\<cong> y", "have \"(\\<forall>x''. x = Pure x'' \\<longrightarrow> (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n    (\\<forall>x''. y = Pure x'' \\<longrightarrow> (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\""], ["proof (prove)\nusing this:\n  x \\<cong> y\n\ngoal (1 subgoal):\n 1. (\\<forall>x''.\n        x = Pure x'' \\<longrightarrow>\n        (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n    (\\<forall>x''.\n        y = Pure x'' \\<longrightarrow>\n        (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))", "proof (induction)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x''.\n           Pure x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               Pure y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           Pure y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. Pure x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 4. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 5. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        y \\<cong> z;\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                z = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            z = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 z = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             z = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "case pure_cong"], ["proof (state)\nthis:\n  x_ \\<leftrightarrow> y_\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x''.\n           Pure x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               Pure y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           Pure y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. Pure x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 4. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 5. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        y \\<cong> z;\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                z = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            z = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 z = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             z = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<leftrightarrow> y_\n\ngoal (1 subgoal):\n 1. (\\<forall>x''.\n        Pure x_ = Pure x'' \\<longrightarrow>\n        (\\<exists>y'.\n            Pure y_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n    (\\<forall>x''.\n        Pure y_ = Pure x'' \\<longrightarrow>\n        (\\<exists>y'. Pure x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))", "by (auto intro: term_sym)"], ["proof (state)\nthis:\n  (\\<forall>x''.\n      Pure x_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'.\n          Pure y_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      Pure y_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. Pure x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 3. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        y \\<cong> z;\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                z = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            z = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 z = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             z = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 3. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        y \\<cong> z;\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                z = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            z = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 z = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             z = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "case itrm_trans"], ["proof (state)\nthis:\n  x_ \\<cong> y_\n  y_ \\<cong> z_\n  (\\<forall>x''.\n      x_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n  (\\<forall>x''.\n      y_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. z_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      z_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 3. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        y \\<cong> z;\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                z = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            z = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 z = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             z = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<cong> y_\n  y_ \\<cong> z_\n  (\\<forall>x''.\n      x_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n  (\\<forall>x''.\n      y_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. z_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      z_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (1 subgoal):\n 1. (\\<forall>x''.\n        x_ = Pure x'' \\<longrightarrow>\n        (\\<exists>y'. z_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n    (\\<forall>x''.\n        z_ = Pure x'' \\<longrightarrow>\n        (\\<exists>y'. x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))", "by (fastforce intro: term_trans)"], ["proof (state)\nthis:\n  (\\<forall>x''.\n      x_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. z_ = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      z_ = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x_ = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (4 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           y = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 2. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x''.\n            f = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                f' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            f' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'. f = Pure y' \\<and> x'' \\<leftrightarrow> y'));\n        x \\<cong> x';\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x' = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            x' = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             f \\<diamondop> x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f' \\<diamondop> x' = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             f' \\<diamondop> x' = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 f \\<diamondop> x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))\n 3. \\<And>x.\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'.\n               x = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n       (\\<forall>x''.\n           x = Pure x'' \\<longrightarrow>\n           (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x''.\n            x = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n        (\\<forall>x''.\n            y = Pure x'' \\<longrightarrow>\n            (\\<exists>y'.\n                x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x''.\n                             y = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 x = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y')) \\<and>\n                         (\\<forall>x''.\n                             x = Pure x'' \\<longrightarrow>\n                             (\\<exists>y'.\n                                 y = Pure y' \\<and>\n                                 x'' \\<leftrightarrow> y'))", "qed simp_all"], ["proof (state)\nthis:\n  (\\<forall>x''.\n      x = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Pure y'; x' \\<leftrightarrow> y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>y = Pure ?y'; x' \\<leftrightarrow> ?y'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      x = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))", "show thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Pure ?y'; x' \\<leftrightarrow> ?y'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      x = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. x = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (1 subgoal):\n 1. thesis", "unfolding x_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Pure ?y'; x' \\<leftrightarrow> ?y'\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      Pure x' = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. y = Pure y' \\<and> x'' \\<leftrightarrow> y')) \\<and>\n  (\\<forall>x''.\n      y = Pure x'' \\<longrightarrow>\n      (\\<exists>y'. Pure x' = Pure y' \\<and> x'' \\<leftrightarrow> y'))\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma opaque_similarE:\n  assumes \"Opaque x' \\<cong> y\"\n  obtains y' where \"y = Opaque y'\" and \"x' = y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Opaque y'; x' = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Opaque y'; x' = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "define x :: \"'a itrm\" where \"x = Opaque x'\""], ["proof (state)\nthis:\n  x = Opaque x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Opaque y'; x' = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  Opaque x' \\<cong> y", "have \"x \\<cong> y\""], ["proof (prove)\nusing this:\n  Opaque x' \\<cong> y\n\ngoal (1 subgoal):\n 1. x \\<cong> y", "unfolding x_def"], ["proof (prove)\nusing this:\n  Opaque x' \\<cong> y\n\ngoal (1 subgoal):\n 1. Opaque x' \\<cong> y", "."], ["proof (state)\nthis:\n  x \\<cong> y\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Opaque y'; x' = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  x \\<cong> y", "have \"(\\<forall>x''. x = Opaque x'' \\<longrightarrow> (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n    (\\<forall>x''. y = Opaque x'' \\<longrightarrow> (\\<exists>y'. x = Opaque y' \\<and> x'' = y'))\""], ["proof (prove)\nusing this:\n  x \\<cong> y\n\ngoal (1 subgoal):\n 1. (\\<forall>x''.\n        x = Opaque x'' \\<longrightarrow>\n        (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n    (\\<forall>x''.\n        y = Opaque x'' \\<longrightarrow>\n        (\\<exists>y'. x = Opaque y' \\<and> x'' = y'))", "by induction fast+"], ["proof (state)\nthis:\n  (\\<forall>x''.\n      x = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n  (\\<forall>x''.\n      y = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. x = Opaque y' \\<and> x'' = y'))\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y = Opaque y'; x' = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>y = Opaque ?y'; x' = ?y'\\<rbrakk> \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      x = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n  (\\<forall>x''.\n      y = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. x = Opaque y' \\<and> x'' = y'))", "show thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Opaque ?y'; x' = ?y'\\<rbrakk> \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      x = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n  (\\<forall>x''.\n      y = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. x = Opaque y' \\<and> x'' = y'))\n\ngoal (1 subgoal):\n 1. thesis", "unfolding x_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>y = Opaque ?y'; x' = ?y'\\<rbrakk> \\<Longrightarrow> thesis\n  (\\<forall>x''.\n      Opaque x' = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. y = Opaque y' \\<and> x'' = y')) \\<and>\n  (\\<forall>x''.\n      y = Opaque x'' \\<longrightarrow>\n      (\\<exists>y'. Opaque x' = Opaque y' \\<and> x'' = y'))\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ap_similarE:\n  assumes \"x1 \\<diamondop> x2 \\<cong> y\"\n  obtains y1 y2 where \"y = y1 \\<diamondop> y2\" and \"x1 \\<cong> y1\" and \"x2 \\<cong> y2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y1 y2.\n        \\<lbrakk>y = y1 \\<diamondop> y2; x1 \\<cong> y1;\n         x2 \\<cong> y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>y1 y2.\n        \\<lbrakk>y = y1 \\<diamondop> y2; x1 \\<cong> y1;\n         x2 \\<cong> y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  x1 \\<diamondop> x2 \\<cong> y", "have \"(\\<forall>x1' x2'. x1 \\<diamondop> x2 = x1' \\<diamondop> x2' \\<longrightarrow> (\\<exists>y1 y2. y = y1 \\<diamondop> y2 \\<and> x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n    (\\<forall>x1' x2'. y = x1' \\<diamondop> x2' \\<longrightarrow> (\\<exists>y1 y2. x1 \\<diamondop> x2 = y1 \\<diamondop> y2 \\<and> x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\""], ["proof (prove)\nusing this:\n  x1 \\<diamondop> x2 \\<cong> y\n\ngoal (1 subgoal):\n 1. (\\<forall>x1' x2'.\n        x1 \\<diamondop> x2 = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            y = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n    (\\<forall>x1' x2'.\n        y = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            x1 \\<diamondop> x2 = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "proof (induction)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x1' x2'.\n            f = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                f' = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            f' = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                f = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        x \\<cong> x';\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x' = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            x' = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             f \\<diamondop> x =\n                             x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 f' \\<diamondop> x' =\n                                 y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             f' \\<diamondop> x' =\n                             x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 f \\<diamondop> x =\n                                 y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 5. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        y \\<cong> z;\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                z = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            z = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 z = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             z = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "case ap_cong"], ["proof (state)\nthis:\n  f_ \\<cong> f'_\n  x_ \\<cong> x'_\n  (\\<forall>x1' x2'.\n      f_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f'_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      f'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n  (\\<forall>x1' x2'.\n      x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x'_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      x'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (6 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<cong> f';\n        (\\<forall>x1' x2'.\n            f = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                f' = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            f' = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                f = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        x \\<cong> x';\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x' = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            x' = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             f \\<diamondop> x =\n                             x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 f' \\<diamondop> x' =\n                                 y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             f' \\<diamondop> x' =\n                             x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 f \\<diamondop> x =\n                                 y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 5. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        y \\<cong> z;\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                z = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            z = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 z = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             z = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "thus ?case"], ["proof (prove)\nusing this:\n  f_ \\<cong> f'_\n  x_ \\<cong> x'_\n  (\\<forall>x1' x2'.\n      f_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f'_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      f'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n  (\\<forall>x1' x2'.\n      x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x'_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      x'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (1 subgoal):\n 1. (\\<forall>x1' x2'.\n        f_ \\<diamondop> x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            f'_ \\<diamondop> x'_ = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n    (\\<forall>x1' x2'.\n        f'_ \\<diamondop> x'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            f_ \\<diamondop> x_ = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "by (blast intro: itrm_sym)"], ["proof (state)\nthis:\n  (\\<forall>x1' x2'.\n      f_ \\<diamondop> x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f'_ \\<diamondop> x'_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      f'_ \\<diamondop> x'_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          f_ \\<diamondop> x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        y \\<cong> z;\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                z = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            z = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 z = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             z = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        y \\<cong> z;\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                z = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            z = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 z = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             z = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "case trans: itrm_trans"], ["proof (state)\nthis:\n  x_ \\<cong> y_\n  y_ \\<cong> z_\n  (\\<forall>x1' x2'.\n      x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      y_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n  (\\<forall>x1' x2'.\n      y_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          z_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      z_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2));\n        y \\<cong> z;\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                z = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            z = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 z = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             z = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<cong> y_\n  y_ \\<cong> z_\n  (\\<forall>x1' x2'.\n      x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      y_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n  (\\<forall>x1' x2'.\n      y_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          z_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      z_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (1 subgoal):\n 1. (\\<forall>x1' x2'.\n        x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            z_ = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n    (\\<forall>x1' x2'.\n        z_ = x1' \\<diamondop> x2' \\<longrightarrow>\n        (\\<exists>y1 y2.\n            x_ = y1 \\<diamondop> y2 \\<and>\n            x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "by (fastforce intro: itrm_trans)"], ["proof (state)\nthis:\n  (\\<forall>x1' x2'.\n      x_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          z_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      z_ = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x_ = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (4 subgoals):\n 1. \\<And>x y.\n       False \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       (\\<forall>x1' x2'.\n           Pure x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure y = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           Pure y = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               Pure x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 3. \\<And>x.\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n       (\\<forall>x1' x2'.\n           x = x1' \\<diamondop> x2' \\<longrightarrow>\n           (\\<exists>y1 y2.\n               x = y1 \\<diamondop> y2 \\<and>\n               x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n 4. \\<And>x y.\n       \\<lbrakk>x \\<cong> y;\n        (\\<forall>x1' x2'.\n            x = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                y = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n        (\\<forall>x1' x2'.\n            y = x1' \\<diamondop> x2' \\<longrightarrow>\n            (\\<exists>y1 y2.\n                x = y1 \\<diamondop> y2 \\<and>\n                x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\\<rbrakk>\n       \\<Longrightarrow> (\\<forall>x1' x2'.\n                             y = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 x = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and>\n                                 x2' \\<cong> y2)) \\<and>\n                         (\\<forall>x1' x2'.\n                             x = x1' \\<diamondop> x2' \\<longrightarrow>\n                             (\\<exists>y1 y2.\n                                 y = y1 \\<diamondop> y2 \\<and>\n                                 x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "qed simp_all"], ["proof (state)\nthis:\n  (\\<forall>x1' x2'.\n      x1 \\<diamondop> x2 = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      y = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x1 \\<diamondop> x2 = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (1 subgoal):\n 1. (\\<And>y1 y2.\n        \\<lbrakk>y = y1 \\<diamondop> y2; x1 \\<cong> y1;\n         x2 \\<cong> y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  \\<lbrakk>y = ?y1.0 \\<diamondop> ?y2.0; x1 \\<cong> ?y1.0;\n   x2 \\<cong> ?y2.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (\\<forall>x1' x2'.\n      x1 \\<diamondop> x2 = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      y = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x1 \\<diamondop> x2 = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))", "show thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>y = ?y1.0 \\<diamondop> ?y2.0; x1 \\<cong> ?y1.0;\n   x2 \\<cong> ?y2.0\\<rbrakk>\n  \\<Longrightarrow> thesis\n  (\\<forall>x1' x2'.\n      x1 \\<diamondop> x2 = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          y = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2)) \\<and>\n  (\\<forall>x1' x2'.\n      y = x1' \\<diamondop> x2' \\<longrightarrow>\n      (\\<exists>y1 y2.\n          x1 \\<diamondop> x2 = y1 \\<diamondop> y2 \\<and>\n          x1' \\<cong> y1 \\<and> x2' \\<cong> y2))\n\ngoal (1 subgoal):\n 1. thesis", "by blast"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>The following relations define semantic equivalence of idiomatic terms.\n  We consider equivalences that hold universally in all idioms, as well as arbitrary\n  specialisations using additional laws.\\<close>"], ["", "inductive idiom_rule :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> bool\"\nwhere\n    idiom_id: \"idiom_rule (Pure \\<I> \\<diamondop> x) x\"\n  | idiom_comp: \"idiom_rule (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) (g \\<diamondop> (f \\<diamondop> x))\"\n  | idiom_hom: \"idiom_rule (Pure f \\<diamondop> Pure x) (Pure (f \\<degree> x))\"\n  | idiom_xchng: \"idiom_rule (f \\<diamondop> Pure x) (Pure (\\<T> \\<degree> x) \\<diamondop> f)\""], ["", "abbreviation itrm_equiv :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> bool\" (infixl \"\\<simeq>\" 50)\nwhere \"x \\<simeq> y \\<equiv> itrm_cong idiom_rule x y\""], ["", "lemma idiom_rule_into_equiv: \"idiom_rule x y \\<Longrightarrow> x \\<simeq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. idiom_rule x y \\<Longrightarrow> x \\<simeq> y", ".."], ["", "lemmas itrm_id = idiom_id[THEN idiom_rule_into_equiv]"], ["", "lemmas itrm_comp = idiom_comp[THEN idiom_rule_into_equiv]"], ["", "lemmas itrm_hom = idiom_hom[THEN idiom_rule_into_equiv]"], ["", "lemmas itrm_xchng = idiom_xchng[THEN idiom_rule_into_equiv]"], ["", "lemma similar_into_equiv: \"x \\<cong> y \\<Longrightarrow> x \\<simeq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cong> y \\<Longrightarrow> x \\<simeq> y", "by (induction pred: itrm_cong) (auto intro: ap_cong itrm_sym itrm_trans)"], ["", "lemma opaque_equiv: \"x \\<simeq> y \\<Longrightarrow> opaque x = opaque y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> opaque x = opaque y", "proof (induction pred: itrm_cong)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y. idiom_rule x y \\<Longrightarrow> opaque x = opaque y\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       opaque (Pure x) = opaque (Pure y)\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<simeq> f'; opaque f = opaque f'; x \\<simeq> x';\n        opaque x = opaque x'\\<rbrakk>\n       \\<Longrightarrow> opaque (f \\<diamondop> x) =\n                         opaque (f' \\<diamondop> x')\n 4. \\<And>x. opaque x = opaque x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y\\<rbrakk>\n       \\<Longrightarrow> opaque y = opaque x\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y; y \\<simeq> z;\n        opaque y = opaque z\\<rbrakk>\n       \\<Longrightarrow> opaque x = opaque z", "case (into_itrm_cong x y)"], ["proof (state)\nthis:\n  idiom_rule x y\n\ngoal (6 subgoals):\n 1. \\<And>x y. idiom_rule x y \\<Longrightarrow> opaque x = opaque y\n 2. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       opaque (Pure x) = opaque (Pure y)\n 3. \\<And>f f' x x'.\n       \\<lbrakk>f \\<simeq> f'; opaque f = opaque f'; x \\<simeq> x';\n        opaque x = opaque x'\\<rbrakk>\n       \\<Longrightarrow> opaque (f \\<diamondop> x) =\n                         opaque (f' \\<diamondop> x')\n 4. \\<And>x. opaque x = opaque x\n 5. \\<And>x y.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y\\<rbrakk>\n       \\<Longrightarrow> opaque y = opaque x\n 6. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y; y \\<simeq> z;\n        opaque y = opaque z\\<rbrakk>\n       \\<Longrightarrow> opaque x = opaque z", "thus ?case"], ["proof (prove)\nusing this:\n  idiom_rule x y\n\ngoal (1 subgoal):\n 1. opaque x = opaque y", "by induction auto"], ["proof (state)\nthis:\n  opaque x = opaque y\n\ngoal (5 subgoals):\n 1. \\<And>x y.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       opaque (Pure x) = opaque (Pure y)\n 2. \\<And>f f' x x'.\n       \\<lbrakk>f \\<simeq> f'; opaque f = opaque f'; x \\<simeq> x';\n        opaque x = opaque x'\\<rbrakk>\n       \\<Longrightarrow> opaque (f \\<diamondop> x) =\n                         opaque (f' \\<diamondop> x')\n 3. \\<And>x. opaque x = opaque x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y\\<rbrakk>\n       \\<Longrightarrow> opaque y = opaque x\n 5. \\<And>x y z.\n       \\<lbrakk>x \\<simeq> y; opaque x = opaque y; y \\<simeq> z;\n        opaque y = opaque z\\<rbrakk>\n       \\<Longrightarrow> opaque x = opaque z", "qed simp_all"], ["", "lemma iorder_equiv: \"x \\<simeq> y \\<Longrightarrow> iorder x = iorder y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> iorder x = iorder y", "by (auto dest: opaque_equiv)"], ["", "locale special_idiom =\n  fixes extra_rule :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> bool\"\nbegin"], ["", "definition \"idiom_ext_rule = sup idiom_rule extra_rule\""], ["", "abbreviation itrm_ext_equiv :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> bool\" (infixl \"\\<simeq>\\<^sup>+\" 50)\nwhere \"x \\<simeq>\\<^sup>+ y \\<equiv> itrm_cong idiom_ext_rule x y\""], ["", "lemma equiv_into_ext_equiv: \"x \\<simeq> y \\<Longrightarrow> x \\<simeq>\\<^sup>+ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> x \\<simeq>\\<^sup>+ y", "unfolding idiom_ext_rule_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> itrm_cong (sup idiom_rule extra_rule) x y", "by (induction pred: itrm_cong)\n   (auto intro: into_itrm_cong ap_cong itrm_sym itrm_trans)"], ["", "lemmas itrm_ext_id = itrm_id[THEN equiv_into_ext_equiv]"], ["", "lemmas itrm_ext_comp = itrm_comp[THEN equiv_into_ext_equiv]"], ["", "lemmas itrm_ext_hom = itrm_hom[THEN equiv_into_ext_equiv]"], ["", "lemmas itrm_ext_xchng = itrm_xchng[THEN equiv_into_ext_equiv]"], ["", "end"], ["", "subsubsection \\<open>Syntactic unlifting\\<close>"], ["", "paragraph \\<open>With generalisation of variables\\<close>"], ["", "primrec unlift' :: \"nat \\<Rightarrow> 'a itrm \\<Rightarrow> nat \\<Rightarrow> dB\"\nwhere\n    \"unlift' n (Opaque _) i = Var i\"\n  | \"unlift' n (Pure x) i = liftn n x 0\"\n  | \"unlift' n (f \\<diamondop> x) i = unlift' n f (i + iorder x) \\<degree> unlift' n x i\""], ["", "abbreviation \"unlift x \\<equiv> (Abs^^iorder x) (unlift' (iorder x) x 0)\""], ["", "lemma funpow_Suc_inside: \"(f ^^ Suc n) x = (f ^^ n) (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ Suc n) x = (f ^^ n) (f x)", "using funpow_Suc_right"], ["proof (prove)\nusing this:\n  ?f ^^ Suc ?n = ?f ^^ ?n \\<circ> ?f\n\ngoal (1 subgoal):\n 1. (f ^^ Suc n) x = (f ^^ n) (f x)", "unfolding comp_def"], ["proof (prove)\nusing this:\n  ?f ^^ Suc ?n = (\\<lambda>x. (?f ^^ ?n) (?f x))\n\ngoal (1 subgoal):\n 1. (f ^^ Suc n) x = (f ^^ n) (f x)", "by metis"], ["", "lemma absn_cong[intro]: \"s \\<leftrightarrow> t \\<Longrightarrow> (Abs^^n) s \\<leftrightarrow> (Abs^^n) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t \\<Longrightarrow>\n    (Abs ^^ n) s \\<leftrightarrow> (Abs ^^ n) t", "by (induction n) auto"], ["", "lemma free_unlift: \"free (unlift' n x i) j \\<Longrightarrow> j \\<ge> n \\<or> (j \\<ge> i \\<and> j < i + iorder x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free (unlift' n x i) j \\<Longrightarrow>\n    n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x", "proof (induction x arbitrary: i)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x i.\n       free (unlift' n (Opaque x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Opaque x)\n 2. \\<And>x i.\n       free (unlift' n (Pure x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n 3. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "case (Opaque x)"], ["proof (state)\nthis:\n  free (unlift' n (Opaque x) i) j\n\ngoal (3 subgoals):\n 1. \\<And>x i.\n       free (unlift' n (Opaque x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Opaque x)\n 2. \\<And>x i.\n       free (unlift' n (Pure x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n 3. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "thus ?case"], ["proof (prove)\nusing this:\n  free (unlift' n (Opaque x) i) j\n\ngoal (1 subgoal):\n 1. n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Opaque x)", "by simp"], ["proof (state)\nthis:\n  n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Opaque x)\n\ngoal (2 subgoals):\n 1. \\<And>x i.\n       free (unlift' n (Pure x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n 2. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       free (unlift' n (Pure x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n 2. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "case (Pure x)"], ["proof (state)\nthis:\n  free (unlift' n (Pure x) i) j\n\ngoal (2 subgoals):\n 1. \\<And>x i.\n       free (unlift' n (Pure x) i) j \\<Longrightarrow>\n       n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n 2. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "thus ?case"], ["proof (prove)\nusing this:\n  free (unlift' n (Pure x) i) j\n\ngoal (1 subgoal):\n 1. n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)", "using free_liftn"], ["proof (prove)\nusing this:\n  free (unlift' n (Pure x) i) j\n  free (liftn ?n ?t ?k) ?i =\n  (?i < ?k \\<and> free ?t ?i \\<or>\n   ?k + ?n \\<le> ?i \\<and> free ?t (?i - ?n))\n\ngoal (1 subgoal):\n 1. n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)", "by simp"], ["proof (state)\nthis:\n  n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (Pure x)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "case (IAp x y)"], ["proof (state)\nthis:\n  free (unlift' n x ?i) j \\<Longrightarrow>\n  n \\<le> j \\<or> ?i \\<le> j \\<and> j < ?i + iorder x\n  free (unlift' n y ?i) j \\<Longrightarrow>\n  n \\<le> j \\<or> ?i \\<le> j \\<and> j < ?i + iorder y\n  free (unlift' n (x \\<diamondop> y) i) j\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 i.\n       \\<lbrakk>\\<And>i.\n                   free (unlift' n x1 i) j \\<Longrightarrow>\n                   n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x1;\n        \\<And>i.\n           free (unlift' n x2 i) j \\<Longrightarrow>\n           n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder x2;\n        free (unlift' n (x1 \\<diamondop> x2) i) j\\<rbrakk>\n       \\<Longrightarrow> n \\<le> j \\<or>\n                         i \\<le> j \\<and>\n                         j < i + iorder (x1 \\<diamondop> x2)", "thus ?case"], ["proof (prove)\nusing this:\n  free (unlift' n x ?i) j \\<Longrightarrow>\n  n \\<le> j \\<or> ?i \\<le> j \\<and> j < ?i + iorder x\n  free (unlift' n y ?i) j \\<Longrightarrow>\n  n \\<le> j \\<or> ?i \\<le> j \\<and> j < ?i + iorder y\n  free (unlift' n (x \\<diamondop> y) i) j\n\ngoal (1 subgoal):\n 1. n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (x \\<diamondop> y)", "by fastforce"], ["proof (state)\nthis:\n  n \\<le> j \\<or> i \\<le> j \\<and> j < i + iorder (x \\<diamondop> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unlift_subst: \"j \\<le> i \\<and> j \\<le> n \\<Longrightarrow> (unlift' (Suc n) t (Suc i))[s/j] = unlift' n t i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n    unlift' (Suc n) t (Suc i)[s/j] = unlift' n t i", "proof (induction t arbitrary: i)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Opaque x) (Suc i)[s/j] = unlift' n (Opaque x) i\n 2. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n 3. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "case (Opaque x)"], ["proof (state)\nthis:\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (3 subgoals):\n 1. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Opaque x) (Suc i)[s/j] = unlift' n (Opaque x) i\n 2. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n 3. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "thus ?case"], ["proof (prove)\nusing this:\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (1 subgoal):\n 1. unlift' (Suc n) (Opaque x) (Suc i)[s/j] = unlift' n (Opaque x) i", "by simp"], ["proof (state)\nthis:\n  unlift' (Suc n) (Opaque x) (Suc i)[s/j] = unlift' n (Opaque x) i\n\ngoal (2 subgoals):\n 1. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "case (Pure x)"], ["proof (state)\nthis:\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>x i.\n       j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n       unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n 2. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "thus ?case"], ["proof (prove)\nusing this:\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (1 subgoal):\n 1. unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i", "using subst_liftn"], ["proof (prove)\nusing this:\n  j \\<le> i \\<and> j \\<le> n\n  ?i \\<le> ?n + ?k \\<and> ?k \\<le> ?i \\<Longrightarrow>\n  liftn (Suc ?n) ?s ?k[?t/?i] = liftn ?n ?s ?k\n\ngoal (1 subgoal):\n 1. unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i", "by simp"], ["proof (state)\nthis:\n  unlift' (Suc n) (Pure x) (Suc i)[s/j] = unlift' n (Pure x) i\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "case (IAp x y)"], ["proof (state)\nthis:\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) x (Suc ?i)[s/j] = unlift' n x ?i\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) y (Suc ?i)[s/j] = unlift' n y ?i\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "hence \"j \\<le> i + iorder y\""], ["proof (prove)\nusing this:\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) x (Suc ?i)[s/j] = unlift' n x ?i\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) y (Suc ?i)[s/j] = unlift' n y ?i\n  j \\<le> i \\<and> j \\<le> n\n\ngoal (1 subgoal):\n 1. j \\<le> i + iorder y", "by simp"], ["proof (state)\nthis:\n  j \\<le> i + iorder y\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2 i.\n       \\<lbrakk>\\<And>i.\n                   j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n                   unlift' (Suc n) t1 (Suc i)[s/j] = unlift' n t1 i;\n        \\<And>i.\n           j \\<le> i \\<and> j \\<le> n \\<Longrightarrow>\n           unlift' (Suc n) t2 (Suc i)[s/j] = unlift' n t2 i;\n        j \\<le> i \\<and> j \\<le> n\\<rbrakk>\n       \\<Longrightarrow> unlift' (Suc n) (t1 \\<diamondop> t2) (Suc i)[s/j] =\n                         unlift' n (t1 \\<diamondop> t2) i", "with IAp"], ["proof (chain)\npicking this:\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) x (Suc ?i)[s/j] = unlift' n x ?i\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) y (Suc ?i)[s/j] = unlift' n y ?i\n  j \\<le> i \\<and> j \\<le> n\n  j \\<le> i + iorder y", "show ?case"], ["proof (prove)\nusing this:\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) x (Suc ?i)[s/j] = unlift' n x ?i\n  j \\<le> ?i \\<and> j \\<le> n \\<Longrightarrow>\n  unlift' (Suc n) y (Suc ?i)[s/j] = unlift' n y ?i\n  j \\<le> i \\<and> j \\<le> n\n  j \\<le> i + iorder y\n\ngoal (1 subgoal):\n 1. unlift' (Suc n) (x \\<diamondop> y) (Suc i)[s/j] =\n    unlift' n (x \\<diamondop> y) i", "by auto"], ["proof (state)\nthis:\n  unlift' (Suc n) (x \\<diamondop> y) (Suc i)[s/j] =\n  unlift' n (x \\<diamondop> y) i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unlift'_equiv: \"x \\<simeq> y \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n y i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow>\n    unlift' n x i \\<leftrightarrow> unlift' n y i", "proof (induction arbitrary: n i pred: itrm_cong)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x y n i.\n       idiom_rule x y \\<Longrightarrow>\n       unlift' n x i \\<leftrightarrow> unlift' n y i\n 2. \\<And>x y n i.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       unlift' n (Pure x) i \\<leftrightarrow> unlift' n (Pure y) i\n 3. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 4. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 5. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 6. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case (into_itrm_cong x y)"], ["proof (state)\nthis:\n  idiom_rule x y\n\ngoal (6 subgoals):\n 1. \\<And>x y n i.\n       idiom_rule x y \\<Longrightarrow>\n       unlift' n x i \\<leftrightarrow> unlift' n y i\n 2. \\<And>x y n i.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       unlift' n (Pure x) i \\<leftrightarrow> unlift' n (Pure y) i\n 3. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 4. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 5. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 6. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "thus ?case"], ["proof (prove)\nusing this:\n  idiom_rule x y\n\ngoal (1 subgoal):\n 1. unlift' n x i \\<leftrightarrow> unlift' n y i", "proof induction"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x.\n       unlift' n (Pure \\<I> \\<diamondop> x) i \\<leftrightarrow>\n       unlift' n x i\n 2. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 3. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 4. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "case (idiom_id x)"], ["proof (state)\nthis:\n  \n\ngoal (4 subgoals):\n 1. \\<And>x.\n       unlift' n (Pure \\<I> \\<diamondop> x) i \\<leftrightarrow>\n       unlift' n x i\n 2. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 3. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 4. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (Pure \\<I> \\<diamondop> x) i \\<leftrightarrow> unlift' n x i", "using I_equiv[symmetric]"], ["proof (prove)\nusing this:\n  ?t \\<leftrightarrow> \\<I> \\<degree> ?t\n\ngoal (1 subgoal):\n 1. unlift' n (Pure \\<I> \\<diamondop> x) i \\<leftrightarrow> unlift' n x i", "by simp"], ["proof (state)\nthis:\n  unlift' n (Pure \\<I> \\<diamondop> x) i \\<leftrightarrow> unlift' n x i\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "case (idiom_comp g f x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "let ?G = \"unlift' n g (i + iorder f + iorder x)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "let ?F = \"unlift' n f (i + iorder x)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "let ?X = \"unlift' n x i\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"unlift' n (g \\<diamondop> (f \\<diamondop> x)) i = ?G \\<degree> (?F \\<degree> ?X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (g \\<diamondop> (f \\<diamondop> x)) i =\n    unlift' n g (i + iorder f + iorder x) \\<degree>\n    (unlift' n f (i + iorder x) \\<degree> unlift' n x i)", "by (simp add: add.assoc)"], ["proof (state)\nthis:\n  unlift' n (g \\<diamondop> (f \\<diamondop> x)) i =\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i)\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "moreover"], ["proof (state)\nthis:\n  unlift' n (g \\<diamondop> (f \\<diamondop> x)) i =\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i)\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i = \\<B> \\<degree> ?G \\<degree> ?F \\<degree> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i =\n    \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n    unlift' n f (i + iorder x) \\<degree>\n    unlift' n x i", "by (simp add: add.commute add.left_commute)"], ["proof (state)\nthis:\n  unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i =\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "moreover"], ["proof (state)\nthis:\n  unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i =\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"?G \\<degree> (?F \\<degree> ?X) \\<leftrightarrow> \\<B> \\<degree> ?G \\<degree> ?F \\<degree> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n g (i + iorder f + iorder x) \\<degree>\n    (unlift' n f (i + iorder x) \\<degree> unlift' n x i) \\<leftrightarrow>\n    \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n    unlift' n f (i + iorder x) \\<degree>\n    unlift' n x i", "using B_equiv[symmetric]"], ["proof (prove)\nusing this:\n  ?g \\<degree> (?f \\<degree> ?x) \\<leftrightarrow>\n  \\<B> \\<degree> ?g \\<degree> ?f \\<degree> ?x\n\ngoal (1 subgoal):\n 1. unlift' n g (i + iorder f + iorder x) \\<degree>\n    (unlift' n f (i + iorder x) \\<degree> unlift' n x i) \\<leftrightarrow>\n    \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n    unlift' n f (i + iorder x) \\<degree>\n    unlift' n x i", "."], ["proof (state)\nthis:\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i) \\<leftrightarrow>\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n\ngoal (3 subgoals):\n 1. \\<And>g f x.\n       unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n        i \\<leftrightarrow>\n       unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n 2. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 3. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "ultimately"], ["proof (chain)\npicking this:\n  unlift' n (g \\<diamondop> (f \\<diamondop> x)) i =\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i)\n  unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i =\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i) \\<leftrightarrow>\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i", "show ?case"], ["proof (prove)\nusing this:\n  unlift' n (g \\<diamondop> (f \\<diamondop> x)) i =\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i)\n  unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x) i =\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n  unlift' n g (i + iorder f + iorder x) \\<degree>\n  (unlift' n f (i + iorder x) \\<degree> unlift' n x i) \\<leftrightarrow>\n  \\<B> \\<degree> unlift' n g (i + iorder f + iorder x) \\<degree>\n  unlift' n f (i + iorder x) \\<degree>\n  unlift' n x i\n\ngoal (1 subgoal):\n 1. unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n     i \\<leftrightarrow>\n    unlift' n (g \\<diamondop> (f \\<diamondop> x)) i", "by simp"], ["proof (state)\nthis:\n  unlift' n (Pure \\<B> \\<diamondop> g \\<diamondop> f \\<diamondop> x)\n   i \\<leftrightarrow>\n  unlift' n (g \\<diamondop> (f \\<diamondop> x)) i\n\ngoal (2 subgoals):\n 1. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 2. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 2. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "case (idiom_hom f x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f x.\n       unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (f \\<degree> x)) i\n 2. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n    unlift' n (Pure (f \\<degree> x)) i", "by auto"], ["proof (state)\nthis:\n  unlift' n (Pure f \\<diamondop> Pure x) i \\<leftrightarrow>\n  unlift' n (Pure (f \\<degree> x)) i\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "case (idiom_xchng f x)"], ["proof (state)\nthis:\n  \n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "let ?F = \"unlift' n f i\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "let ?X = \"liftn n x 0\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"unlift' n (f \\<diamondop> Pure x) i = ?F \\<degree> ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (f \\<diamondop> Pure x) i =\n    unlift' n f i \\<degree> liftn n x 0", "by simp"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> Pure x) i = unlift' n f i \\<degree> liftn n x 0\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "moreover"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> Pure x) i = unlift' n f i \\<degree> liftn n x 0\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i = \\<T> \\<degree> ?X \\<degree> ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i =\n    \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i", "by simp"], ["proof (state)\nthis:\n  unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i =\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "moreover"], ["proof (state)\nthis:\n  unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i =\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "have \"?F \\<degree> ?X \\<leftrightarrow> \\<T> \\<degree> ?X \\<degree> ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n f i \\<degree> liftn n x 0 \\<leftrightarrow>\n    \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i", "using T_equiv[symmetric]"], ["proof (prove)\nusing this:\n  ?f \\<degree> ?x \\<leftrightarrow> \\<T> \\<degree> ?x \\<degree> ?f\n\ngoal (1 subgoal):\n 1. unlift' n f i \\<degree> liftn n x 0 \\<leftrightarrow>\n    \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i", "."], ["proof (state)\nthis:\n  unlift' n f i \\<degree> liftn n x 0 \\<leftrightarrow>\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n       unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "ultimately"], ["proof (chain)\npicking this:\n  unlift' n (f \\<diamondop> Pure x) i = unlift' n f i \\<degree> liftn n x 0\n  unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i =\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n  unlift' n f i \\<degree> liftn n x 0 \\<leftrightarrow>\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i", "show ?case"], ["proof (prove)\nusing this:\n  unlift' n (f \\<diamondop> Pure x) i = unlift' n f i \\<degree> liftn n x 0\n  unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i =\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n  unlift' n f i \\<degree> liftn n x 0 \\<leftrightarrow>\n  \\<T> \\<degree> liftn n x 0 \\<degree> unlift' n f i\n\ngoal (1 subgoal):\n 1. unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n    unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i", "by simp"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> Pure x) i \\<leftrightarrow>\n  unlift' n (Pure (\\<T> \\<degree> x) \\<diamondop> f) i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  unlift' n x i \\<leftrightarrow> unlift' n y i\n\ngoal (5 subgoals):\n 1. \\<And>x y n i.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       unlift' n (Pure x) i \\<leftrightarrow> unlift' n (Pure y) i\n 2. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 3. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 5. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y n i.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       unlift' n (Pure x) i \\<leftrightarrow> unlift' n (Pure y) i\n 2. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 3. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 5. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case pure_cong"], ["proof (state)\nthis:\n  x_ \\<leftrightarrow> y_\n\ngoal (5 subgoals):\n 1. \\<And>x y n i.\n       x \\<leftrightarrow> y \\<Longrightarrow>\n       unlift' n (Pure x) i \\<leftrightarrow> unlift' n (Pure y) i\n 2. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 3. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 5. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<leftrightarrow> y_\n\ngoal (1 subgoal):\n 1. unlift' n (Pure x_) i \\<leftrightarrow> unlift' n (Pure y_) i", "by (auto intro: equiv_liftn)"], ["proof (state)\nthis:\n  unlift' n (Pure x_) i \\<leftrightarrow> unlift' n (Pure y_) i\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case (ap_cong f f' x x')"], ["proof (state)\nthis:\n  f \\<simeq> f'\n  x \\<simeq> x'\n  unlift' ?n f ?i \\<leftrightarrow> unlift' ?n f' ?i\n  unlift' ?n x ?i \\<leftrightarrow> unlift' ?n x' ?i\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "from \\<open>x \\<simeq> x'\\<close>"], ["proof (chain)\npicking this:\n  x \\<simeq> x'", "have iorder_eq: \"iorder x = iorder x'\""], ["proof (prove)\nusing this:\n  x \\<simeq> x'\n\ngoal (1 subgoal):\n 1. iorder x = iorder x'", "by (rule iorder_equiv)"], ["proof (state)\nthis:\n  iorder x = iorder x'\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "have \"unlift' n (f \\<diamondop> x) i = unlift' n f (i + iorder x) \\<degree> unlift' n x i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (f \\<diamondop> x) i =\n    unlift' n f (i + iorder x) \\<degree> unlift' n x i", "by simp"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> x) i =\n  unlift' n f (i + iorder x) \\<degree> unlift' n x i\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "moreover"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> x) i =\n  unlift' n f (i + iorder x) \\<degree> unlift' n x i\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "have \"unlift' n (f' \\<diamondop> x') i = unlift' n f' (i + iorder x) \\<degree> unlift' n x' i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n (f' \\<diamondop> x') i =\n    unlift' n f' (i + iorder x) \\<degree> unlift' n x' i", "using iorder_eq"], ["proof (prove)\nusing this:\n  iorder x = iorder x'\n\ngoal (1 subgoal):\n 1. unlift' n (f' \\<diamondop> x') i =\n    unlift' n f' (i + iorder x) \\<degree> unlift' n x' i", "by simp"], ["proof (state)\nthis:\n  unlift' n (f' \\<diamondop> x') i =\n  unlift' n f' (i + iorder x) \\<degree> unlift' n x' i\n\ngoal (4 subgoals):\n 1. \\<And>f f' x x' n i.\n       \\<lbrakk>f \\<simeq> f';\n        \\<And>n i. unlift' n f i \\<leftrightarrow> unlift' n f' i;\n        x \\<simeq> x';\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n x' i\\<rbrakk>\n       \\<Longrightarrow> unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n                         unlift' n (f' \\<diamondop> x') i\n 2. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 4. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "ultimately"], ["proof (chain)\npicking this:\n  unlift' n (f \\<diamondop> x) i =\n  unlift' n f (i + iorder x) \\<degree> unlift' n x i\n  unlift' n (f' \\<diamondop> x') i =\n  unlift' n f' (i + iorder x) \\<degree> unlift' n x' i", "show ?case"], ["proof (prove)\nusing this:\n  unlift' n (f \\<diamondop> x) i =\n  unlift' n f (i + iorder x) \\<degree> unlift' n x i\n  unlift' n (f' \\<diamondop> x') i =\n  unlift' n f' (i + iorder x) \\<degree> unlift' n x' i\n\ngoal (1 subgoal):\n 1. unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n    unlift' n (f' \\<diamondop> x') i", "using ap_cong.IH"], ["proof (prove)\nusing this:\n  unlift' n (f \\<diamondop> x) i =\n  unlift' n f (i + iorder x) \\<degree> unlift' n x i\n  unlift' n (f' \\<diamondop> x') i =\n  unlift' n f' (i + iorder x) \\<degree> unlift' n x' i\n  unlift' ?n f ?i \\<leftrightarrow> unlift' ?n f' ?i\n  unlift' ?n x ?i \\<leftrightarrow> unlift' ?n x' ?i\n\ngoal (1 subgoal):\n 1. unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n    unlift' n (f' \\<diamondop> x') i", "by (auto intro: equiv_app)"], ["proof (state)\nthis:\n  unlift' n (f \\<diamondop> x) i \\<leftrightarrow>\n  unlift' n (f' \\<diamondop> x') i\n\ngoal (3 subgoals):\n 1. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case itrm_refl"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x n i. unlift' n x i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 3. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' n x_ i \\<leftrightarrow> unlift' n x_ i", "by simp"], ["proof (state)\nthis:\n  unlift' n x_ i \\<leftrightarrow> unlift' n x_ i\n\ngoal (2 subgoals):\n 1. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case itrm_sym"], ["proof (state)\nthis:\n  x_ \\<simeq> y_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n\ngoal (2 subgoals):\n 1. \\<And>x y n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i\\<rbrakk>\n       \\<Longrightarrow> unlift' n y i \\<leftrightarrow> unlift' n x i\n 2. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<simeq> y_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n\ngoal (1 subgoal):\n 1. unlift' n y_ i \\<leftrightarrow> unlift' n x_ i", "using term_sym"], ["proof (prove)\nusing this:\n  x_ \\<simeq> y_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n  ?s \\<leftrightarrow> ?t \\<Longrightarrow> ?t \\<leftrightarrow> ?s\n\ngoal (1 subgoal):\n 1. unlift' n y_ i \\<leftrightarrow> unlift' n x_ i", "by simp"], ["proof (state)\nthis:\n  unlift' n y_ i \\<leftrightarrow> unlift' n x_ i\n\ngoal (1 subgoal):\n 1. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "case itrm_trans"], ["proof (state)\nthis:\n  x_ \\<simeq> y_\n  y_ \\<simeq> z_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n  unlift' ?n y_ ?i \\<leftrightarrow> unlift' ?n z_ ?i\n\ngoal (1 subgoal):\n 1. \\<And>x y z n i.\n       \\<lbrakk>x \\<simeq> y;\n        \\<And>n i. unlift' n x i \\<leftrightarrow> unlift' n y i;\n        y \\<simeq> z;\n        \\<And>n i. unlift' n y i \\<leftrightarrow> unlift' n z i\\<rbrakk>\n       \\<Longrightarrow> unlift' n x i \\<leftrightarrow> unlift' n z i", "thus ?case"], ["proof (prove)\nusing this:\n  x_ \\<simeq> y_\n  y_ \\<simeq> z_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n  unlift' ?n y_ ?i \\<leftrightarrow> unlift' ?n z_ ?i\n\ngoal (1 subgoal):\n 1. unlift' n x_ i \\<leftrightarrow> unlift' n z_ i", "using term_trans"], ["proof (prove)\nusing this:\n  x_ \\<simeq> y_\n  y_ \\<simeq> z_\n  unlift' ?n x_ ?i \\<leftrightarrow> unlift' ?n y_ ?i\n  unlift' ?n y_ ?i \\<leftrightarrow> unlift' ?n z_ ?i\n  \\<lbrakk>?s \\<leftrightarrow> ?t; ?t \\<leftrightarrow> ?u\\<rbrakk>\n  \\<Longrightarrow> ?s \\<leftrightarrow> ?u\n\ngoal (1 subgoal):\n 1. unlift' n x_ i \\<leftrightarrow> unlift' n z_ i", "by blast"], ["proof (state)\nthis:\n  unlift' n x_ i \\<leftrightarrow> unlift' n z_ i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unlift_equiv: \"x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "assume \"x \\<simeq> y\""], ["proof (state)\nthis:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "then"], ["proof (chain)\npicking this:\n  x \\<simeq> y", "have \"unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0\""], ["proof (prove)\nusing this:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0", "by (rule unlift'_equiv)"], ["proof (state)\nthis:\n  unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0\n\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "moreover"], ["proof (state)\nthis:\n  unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0\n\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "from \\<open>x \\<simeq> y\\<close>"], ["proof (chain)\npicking this:\n  x \\<simeq> y", "have \"iorder x = iorder y\""], ["proof (prove)\nusing this:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. iorder x = iorder y", "by (rule iorder_equiv)"], ["proof (state)\nthis:\n  iorder x = iorder y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y \\<Longrightarrow> unlift x \\<leftrightarrow> unlift y", "ultimately"], ["proof (chain)\npicking this:\n  unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0\n  iorder x = iorder y", "show ?thesis"], ["proof (prove)\nusing this:\n  unlift' (iorder y) x 0 \\<leftrightarrow> unlift' (iorder y) y 0\n  iorder x = iorder y\n\ngoal (1 subgoal):\n 1. unlift x \\<leftrightarrow> unlift y", "by auto"], ["proof (state)\nthis:\n  unlift x \\<leftrightarrow> unlift y\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>Preserving variables\\<close>"], ["", "primrec unlift_vars :: \"nat \\<Rightarrow> nat itrm \\<Rightarrow> dB\"\nwhere\n    \"unlift_vars n (Opaque i) = Var i\"\n  | \"unlift_vars n (Pure x) = liftn n x 0\"\n  | \"unlift_vars n (x \\<diamondop> y) = unlift_vars n x \\<degree> unlift_vars n y\""], ["", "lemma all_pure_unlift_vars: \"opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)", "proof (induction x)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       opaque (Opaque x) = [] \\<Longrightarrow>\n       Opaque x \\<simeq> Pure (unlift_vars 0 (Opaque x))\n 2. \\<And>x.\n       opaque (Pure x) = [] \\<Longrightarrow>\n       Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n 3. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "case (Opaque x)"], ["proof (state)\nthis:\n  opaque (Opaque x) = []\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       opaque (Opaque x) = [] \\<Longrightarrow>\n       Opaque x \\<simeq> Pure (unlift_vars 0 (Opaque x))\n 2. \\<And>x.\n       opaque (Pure x) = [] \\<Longrightarrow>\n       Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n 3. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "then"], ["proof (chain)\npicking this:\n  opaque (Opaque x) = []", "show ?case"], ["proof (prove)\nusing this:\n  opaque (Opaque x) = []\n\ngoal (1 subgoal):\n 1. Opaque x \\<simeq> Pure (unlift_vars 0 (Opaque x))", "by simp"], ["proof (state)\nthis:\n  Opaque x \\<simeq> Pure (unlift_vars 0 (Opaque x))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       opaque (Pure x) = [] \\<Longrightarrow>\n       Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n 2. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       opaque (Pure x) = [] \\<Longrightarrow>\n       Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n 2. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "case (Pure x)"], ["proof (state)\nthis:\n  opaque (Pure x) = []\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       opaque (Pure x) = [] \\<Longrightarrow>\n       Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n 2. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "then"], ["proof (chain)\npicking this:\n  opaque (Pure x) = []", "show ?case"], ["proof (prove)\nusing this:\n  opaque (Pure x) = []\n\ngoal (1 subgoal):\n 1. Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))", "by simp"], ["proof (state)\nthis:\n  Pure x \\<simeq> Pure (unlift_vars 0 (Pure x))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "case (IAp x y)"], ["proof (state)\nthis:\n  opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\n  opaque y = [] \\<Longrightarrow> y \\<simeq> Pure (unlift_vars 0 y)\n  opaque (x \\<diamondop> y) = []\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "then"], ["proof (chain)\npicking this:\n  opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\n  opaque y = [] \\<Longrightarrow> y \\<simeq> Pure (unlift_vars 0 y)\n  opaque (x \\<diamondop> y) = []", "have no_opaque: \"opaque x = []\" \"opaque y = []\""], ["proof (prove)\nusing this:\n  opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\n  opaque y = [] \\<Longrightarrow> y \\<simeq> Pure (unlift_vars 0 y)\n  opaque (x \\<diamondop> y) = []\n\ngoal (1 subgoal):\n 1. opaque x = [] &&& opaque y = []", "by simp+"], ["proof (state)\nthis:\n  opaque x = []\n  opaque y = []\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "then"], ["proof (chain)\npicking this:\n  opaque x = []\n  opaque y = []", "have unlift_ap: \"unlift_vars 0 (x \\<diamondop> y) = unlift_vars 0 x \\<degree> unlift_vars 0 y\""], ["proof (prove)\nusing this:\n  opaque x = []\n  opaque y = []\n\ngoal (1 subgoal):\n 1. unlift_vars 0 (x \\<diamondop> y) =\n    unlift_vars 0 x \\<degree> unlift_vars 0 y", "by simp"], ["proof (state)\nthis:\n  unlift_vars 0 (x \\<diamondop> y) =\n  unlift_vars 0 x \\<degree> unlift_vars 0 y\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "from no_opaque IAp.IH"], ["proof (chain)\npicking this:\n  opaque x = []\n  opaque y = []\n  opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\n  opaque y = [] \\<Longrightarrow> y \\<simeq> Pure (unlift_vars 0 y)", "have \"x \\<diamondop> y \\<simeq> Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y)\""], ["proof (prove)\nusing this:\n  opaque x = []\n  opaque y = []\n  opaque x = [] \\<Longrightarrow> x \\<simeq> Pure (unlift_vars 0 x)\n  opaque y = [] \\<Longrightarrow> y \\<simeq> Pure (unlift_vars 0 y)\n\ngoal (1 subgoal):\n 1. x \\<diamondop> y \\<simeq>\n    Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y)", "by (blast intro: ap_cong)"], ["proof (state)\nthis:\n  x \\<diamondop> y \\<simeq>\n  Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "also"], ["proof (state)\nthis:\n  x \\<diamondop> y \\<simeq>\n  Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "have \"... \\<simeq> Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y) \\<simeq>\n    Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y)", "by (rule itrm_hom)"], ["proof (state)\nthis:\n  Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y) \\<simeq>\n  Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "also"], ["proof (state)\nthis:\n  Pure (unlift_vars 0 x) \\<diamondop> Pure (unlift_vars 0 y) \\<simeq>\n  Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y)\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "have \"... = Pure (unlift_vars 0 (x \\<diamondop> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y) =\n    Pure (unlift_vars 0 (x \\<diamondop> y))", "by (simp only: unlift_ap)"], ["proof (state)\nthis:\n  Pure (unlift_vars 0 x \\<degree> unlift_vars 0 y) =\n  Pure (unlift_vars 0 (x \\<diamondop> y))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2.\n       \\<lbrakk>opaque x1 = [] \\<Longrightarrow>\n                x1 \\<simeq> Pure (unlift_vars 0 x1);\n        opaque x2 = [] \\<Longrightarrow>\n        x2 \\<simeq> Pure (unlift_vars 0 x2);\n        opaque (x1 \\<diamondop> x2) = []\\<rbrakk>\n       \\<Longrightarrow> x1 \\<diamondop> x2 \\<simeq>\n                         Pure (unlift_vars 0 (x1 \\<diamondop> x2))", "finally"], ["proof (chain)\npicking this:\n  x \\<diamondop> y \\<simeq> Pure (unlift_vars 0 (x \\<diamondop> y))", "show ?case"], ["proof (prove)\nusing this:\n  x \\<diamondop> y \\<simeq> Pure (unlift_vars 0 (x \\<diamondop> y))\n\ngoal (1 subgoal):\n 1. x \\<diamondop> y \\<simeq> Pure (unlift_vars 0 (x \\<diamondop> y))", "."], ["proof (state)\nthis:\n  x \\<diamondop> y \\<simeq> Pure (unlift_vars 0 (x \\<diamondop> y))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Canonical forms\\<close>"], ["", "inductive_set CF :: \"'a itrm set\"\nwhere\n    pure_cf[iff]: \"Pure x \\<in> CF\"\n  | ap_cf[intro]: \"f \\<in> CF \\<Longrightarrow> f \\<diamondop> Opaque x \\<in> CF\""], ["", "primrec CF_pure :: \"'a itrm \\<Rightarrow> dB\"\nwhere\n    \"CF_pure (Opaque _) = undefined\"\n  | \"CF_pure (Pure x) = x\"\n  | \"CF_pure (x \\<diamondop> _) = CF_pure x\""], ["", "lemma ap_cfD1[dest]: \"f \\<diamondop> x \\<in> CF \\<Longrightarrow> f \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<diamondop> x \\<in> CF \\<Longrightarrow> f \\<in> CF", "by (rule CF.cases) auto"], ["", "lemma ap_cfD2[dest]: \"f \\<diamondop> x \\<in> CF \\<Longrightarrow> \\<exists>x'. x = Opaque x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<diamondop> x \\<in> CF \\<Longrightarrow> \\<exists>x'. x = Opaque x'", "by (rule CF.cases) auto"], ["", "lemma opaque_not_cf[simp]: \"Opaque x \\<in> CF \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Opaque x \\<in> CF \\<Longrightarrow> False", "by (rule CF.cases) auto"], ["", "lemma cf_unlift:\n  assumes \"x \\<in> CF\"\n    shows \"CF_pure x \\<leftrightarrow> unlift x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> unlift x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> CF\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> unlift x", "proof (induction set: CF)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. CF_pure (Pure x) \\<leftrightarrow> unlift (Pure x)\n 2. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "case (pure_cf x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. CF_pure (Pure x) \\<leftrightarrow> unlift (Pure x)\n 2. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. CF_pure (Pure x) \\<leftrightarrow> unlift (Pure x)", "by simp"], ["proof (state)\nthis:\n  CF_pure (Pure x) \\<leftrightarrow> unlift (Pure x)\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "case (ap_cf f x)"], ["proof (state)\nthis:\n  f \\<in> CF\n  CF_pure f \\<leftrightarrow> unlift f\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "let ?n = \"iorder f + 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "have \"unlift (f \\<diamondop> Opaque x) = (Abs^^?n) (unlift' ?n f 1 \\<degree> Var 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift (f \\<diamondop> Opaque x) =\n    (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0)", "by simp"], ["proof (state)\nthis:\n  unlift (f \\<diamondop> Opaque x) =\n  (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0)\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  unlift (f \\<diamondop> Opaque x) =\n  (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0)\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "have \"... = (Abs^^iorder f) (Abs (unlift' ?n f 1 \\<degree> Var 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0) =\n    (Abs ^^ iorder f) (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0))", "using funpow_Suc_inside"], ["proof (prove)\nusing this:\n  (?f ^^ Suc ?n) ?x = (?f ^^ ?n) (?f ?x)\n\ngoal (1 subgoal):\n 1. (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0) =\n    (Abs ^^ iorder f) (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0))", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0) =\n  (Abs ^^ iorder f) (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0))\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  (Abs ^^ (iorder f + 1)) (unlift' (iorder f + 1) f 1 \\<degree> Var 0) =\n  (Abs ^^ iorder f) (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0))\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "have \"... \\<leftrightarrow> unlift f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "have \"\\<not> free (unlift' ?n f 1) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> free (unlift' (iorder f + 1) f 1) 0", "using free_unlift"], ["proof (prove)\nusing this:\n  free (unlift' ?n ?x ?i) ?j \\<Longrightarrow>\n  ?n \\<le> ?j \\<or> ?i \\<le> ?j \\<and> ?j < ?i + iorder ?x\n\ngoal (1 subgoal):\n 1. \\<not> free (unlift' (iorder f + 1) f 1) 0", "by fastforce"], ["proof (state)\nthis:\n  \\<not> free (unlift' (iorder f + 1) f 1) 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "hence \"Abs (unlift' ?n f 1 \\<degree> Var 0) \\<rightarrow>\\<^sub>\\<eta> (unlift' ?n f 1)[Var 0/0]\""], ["proof (prove)\nusing this:\n  \\<not> free (unlift' (iorder f + 1) f 1) 0\n\ngoal (1 subgoal):\n 1. Abs (unlift' (iorder f + 1) f 1 \\<degree>\n         Var 0) \\<rightarrow>\\<^sub>\\<eta>\n    unlift' (iorder f + 1) f 1[Var 0/0]", ".."], ["proof (state)\nthis:\n  Abs (unlift' (iorder f + 1) f 1 \\<degree>\n       Var 0) \\<rightarrow>\\<^sub>\\<eta>\n  unlift' (iorder f + 1) f 1[Var 0/0]\n\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "also"], ["proof (state)\nthis:\n  Abs (unlift' (iorder f + 1) f 1 \\<degree>\n       Var 0) \\<rightarrow>\\<^sub>\\<eta>\n  unlift' (iorder f + 1) f 1[Var 0/0]\n\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "have \"... = unlift' (iorder f) f 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. unlift' (iorder f + 1) f 1[Var 0/0] = unlift' (iorder f) f 0", "using unlift_subst"], ["proof (prove)\nusing this:\n  ?j \\<le> ?i \\<and> ?j \\<le> ?n \\<Longrightarrow>\n  unlift' (Suc ?n) ?t (Suc ?i)[?s/?j] = unlift' ?n ?t ?i\n\ngoal (1 subgoal):\n 1. unlift' (iorder f + 1) f 1[Var 0/0] = unlift' (iorder f) f 0", "by (metis One_nat_def Suc_eq_plus1 le0)"], ["proof (state)\nthis:\n  unlift' (iorder f + 1) f 1[Var 0/0] = unlift' (iorder f) f 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "finally"], ["proof (chain)\npicking this:\n  Abs (unlift' (iorder f + 1) f 1 \\<degree>\n       Var 0) \\<rightarrow>\\<^sub>\\<eta>\n  unlift' (iorder f) f 0", "show ?thesis"], ["proof (prove)\nusing this:\n  Abs (unlift' (iorder f + 1) f 1 \\<degree>\n       Var 0) \\<rightarrow>\\<^sub>\\<eta>\n  unlift' (iorder f) f 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ iorder f)\n     (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n    unlift f", "by (simp add: r_into_rtranclp absn_cong eta_into_equiv)"], ["proof (state)\nthis:\n  (Abs ^^ iorder f)\n   (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n  unlift f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Abs ^^ iorder f)\n   (Abs (unlift' (iorder f + 1) f 1 \\<degree> Var 0)) \\<leftrightarrow>\n  unlift f\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       \\<lbrakk>f \\<in> CF; CF_pure f \\<leftrightarrow> unlift f\\<rbrakk>\n       \\<Longrightarrow> CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n                         unlift (f \\<diamondop> Opaque x)", "finally"], ["proof (chain)\npicking this:\n  unlift (f \\<diamondop> Opaque x) \\<leftrightarrow> unlift f", "show ?case"], ["proof (prove)\nusing this:\n  unlift (f \\<diamondop> Opaque x) \\<leftrightarrow> unlift f\n\ngoal (1 subgoal):\n 1. CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n    unlift (f \\<diamondop> Opaque x)", "using ap_cf.IH"], ["proof (prove)\nusing this:\n  unlift (f \\<diamondop> Opaque x) \\<leftrightarrow> unlift f\n  CF_pure f \\<leftrightarrow> unlift f\n\ngoal (1 subgoal):\n 1. CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n    unlift (f \\<diamondop> Opaque x)", "by (auto intro: term_sym term_trans)"], ["proof (state)\nthis:\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n  unlift (f \\<diamondop> Opaque x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_similarI:\n  assumes \"x \\<in> CF\" \"y \\<in> CF\"\n      and \"opaque x = opaque y\"\n      and \"CF_pure x \\<leftrightarrow> CF_pure y\"\n    shows \"x \\<cong> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cong> y", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> CF\n  y \\<in> CF\n  opaque x = opaque y\n  CF_pure x \\<leftrightarrow> CF_pure y\n\ngoal (1 subgoal):\n 1. x \\<cong> y", "proof (induction arbitrary: y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> CF; opaque (Pure x) = opaque y;\n        CF_pure (Pure x) \\<leftrightarrow> CF_pure y\\<rbrakk>\n       \\<Longrightarrow> Pure x \\<cong> y\n 2. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "case (pure_cf x)"], ["proof (state)\nthis:\n  y \\<in> CF\n  opaque (Pure x) = opaque y\n  CF_pure (Pure x) \\<leftrightarrow> CF_pure y\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> CF; opaque (Pure x) = opaque y;\n        CF_pure (Pure x) \\<leftrightarrow> CF_pure y\\<rbrakk>\n       \\<Longrightarrow> Pure x \\<cong> y\n 2. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "hence \"opaque y = []\""], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque (Pure x) = opaque y\n  CF_pure (Pure x) \\<leftrightarrow> CF_pure y\n\ngoal (1 subgoal):\n 1. opaque y = []", "by auto"], ["proof (state)\nthis:\n  opaque y = []\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> CF; opaque (Pure x) = opaque y;\n        CF_pure (Pure x) \\<leftrightarrow> CF_pure y\\<rbrakk>\n       \\<Longrightarrow> Pure x \\<cong> y\n 2. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with \\<open>y \\<in> CF\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> CF\n  opaque y = []", "obtain y' where \"y = Pure y'\""], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque y = []\n\ngoal (1 subgoal):\n 1. (\\<And>y'. y = Pure y' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  y = Pure y'\n\ngoal (2 subgoals):\n 1. \\<And>x y.\n       \\<lbrakk>y \\<in> CF; opaque (Pure x) = opaque y;\n        CF_pure (Pure x) \\<leftrightarrow> CF_pure y\\<rbrakk>\n       \\<Longrightarrow> Pure x \\<cong> y\n 2. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with pure_cf.prems"], ["proof (chain)\npicking this:\n  y \\<in> CF\n  opaque (Pure x) = opaque y\n  CF_pure (Pure x) \\<leftrightarrow> CF_pure y\n  y = Pure y'", "show ?case"], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque (Pure x) = opaque y\n  CF_pure (Pure x) \\<leftrightarrow> CF_pure y\n  y = Pure y'\n\ngoal (1 subgoal):\n 1. Pure x \\<cong> y", "by auto"], ["proof (state)\nthis:\n  Pure x \\<cong> y\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "case (ap_cf f x)"], ["proof (state)\nthis:\n  f \\<in> CF\n  \\<lbrakk>?y \\<in> CF; opaque f = opaque ?y;\n   CF_pure f \\<leftrightarrow> CF_pure ?y\\<rbrakk>\n  \\<Longrightarrow> f \\<cong> ?y\n  y \\<in> CF\n  opaque (f \\<diamondop> Opaque x) = opaque y\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow> CF_pure y\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "from \\<open>opaque (f \\<diamondop> Opaque x) = opaque y\\<close>"], ["proof (chain)\npicking this:\n  opaque (f \\<diamondop> Opaque x) = opaque y", "obtain y1 y2 where \"opaque y = y1 @ y2\"\n    and \"opaque f = y1\" and \"[x] = y2\""], ["proof (prove)\nusing this:\n  opaque (f \\<diamondop> Opaque x) = opaque y\n\ngoal (1 subgoal):\n 1. (\\<And>y1 y2.\n        \\<lbrakk>opaque y = y1 @ y2; opaque f = y1; [x] = y2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  opaque y = y1 @ y2\n  opaque f = y1\n  [x] = y2\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "from \\<open>[x] = y2\\<close>"], ["proof (chain)\npicking this:\n  [x] = y2", "obtain y' where \"y2 = [y']\" and \"x = y'\""], ["proof (prove)\nusing this:\n  [x] = y2\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>y2 = [y']; x = y'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  y2 = [y']\n  x = y'\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with \\<open>y \\<in> CF\\<close> and \\<open>opaque y = y1 @ y2\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> CF\n  opaque y = y1 @ y2\n  y2 = [y']\n  x = y'", "obtain g\n    where \"opaque g = y1\" and y_split: \"y = g \\<diamondop> Opaque y'\" \"g \\<in> CF\""], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque y = y1 @ y2\n  y2 = [y']\n  x = y'\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        \\<lbrakk>opaque g = y1; y = g \\<diamondop> Opaque y';\n         g \\<in> CF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by cases auto"], ["proof (state)\nthis:\n  opaque g = y1\n  y = g \\<diamondop> Opaque y'\n  g \\<in> CF\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with ap_cf.prems \\<open>opaque f = y1\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> CF\n  opaque (f \\<diamondop> Opaque x) = opaque y\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow> CF_pure y\n  opaque f = y1\n  opaque g = y1\n  y = g \\<diamondop> Opaque y'\n  g \\<in> CF", "have \"opaque f = opaque g\" \"CF_pure f \\<leftrightarrow> CF_pure g\""], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque (f \\<diamondop> Opaque x) = opaque y\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow> CF_pure y\n  opaque f = y1\n  opaque g = y1\n  y = g \\<diamondop> Opaque y'\n  g \\<in> CF\n\ngoal (1 subgoal):\n 1. opaque f = opaque g &&& CF_pure f \\<leftrightarrow> CF_pure g", "by auto"], ["proof (state)\nthis:\n  opaque f = opaque g\n  CF_pure f \\<leftrightarrow> CF_pure g\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with ap_cf.IH \\<open>g \\<in> CF\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y \\<in> CF; opaque f = opaque ?y;\n   CF_pure f \\<leftrightarrow> CF_pure ?y\\<rbrakk>\n  \\<Longrightarrow> f \\<cong> ?y\n  g \\<in> CF\n  opaque f = opaque g\n  CF_pure f \\<leftrightarrow> CF_pure g", "have \"f \\<cong> g\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y \\<in> CF; opaque f = opaque ?y;\n   CF_pure f \\<leftrightarrow> CF_pure ?y\\<rbrakk>\n  \\<Longrightarrow> f \\<cong> ?y\n  g \\<in> CF\n  opaque f = opaque g\n  CF_pure f \\<leftrightarrow> CF_pure g\n\ngoal (1 subgoal):\n 1. f \\<cong> g", "by simp"], ["proof (state)\nthis:\n  f \\<cong> g\n\ngoal (1 subgoal):\n 1. \\<And>f x y.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>y.\n           \\<lbrakk>y \\<in> CF; opaque f = opaque y;\n            CF_pure f \\<leftrightarrow> CF_pure y\\<rbrakk>\n           \\<Longrightarrow> f \\<cong> y;\n        y \\<in> CF; opaque (f \\<diamondop> Opaque x) = opaque y;\n        CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow>\n        CF_pure y\\<rbrakk>\n       \\<Longrightarrow> f \\<diamondop> Opaque x \\<cong> y", "with ap_cf.prems y_split \\<open>x = y'\\<close>"], ["proof (chain)\npicking this:\n  y \\<in> CF\n  opaque (f \\<diamondop> Opaque x) = opaque y\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow> CF_pure y\n  y = g \\<diamondop> Opaque y'\n  g \\<in> CF\n  x = y'\n  f \\<cong> g", "show ?case"], ["proof (prove)\nusing this:\n  y \\<in> CF\n  opaque (f \\<diamondop> Opaque x) = opaque y\n  CF_pure (f \\<diamondop> Opaque x) \\<leftrightarrow> CF_pure y\n  y = g \\<diamondop> Opaque y'\n  g \\<in> CF\n  x = y'\n  f \\<cong> g\n\ngoal (1 subgoal):\n 1. f \\<diamondop> Opaque x \\<cong> y", "by (auto intro: ap_cong)"], ["proof (state)\nthis:\n  f \\<diamondop> Opaque x \\<cong> y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cf_similarD:\n  assumes in_cf: \"x \\<in> CF\" \"y \\<in> CF\"\n      and similar: \"x \\<cong> y\"\n    shows \"CF_pure x \\<leftrightarrow> CF_pure y \\<and> opaque x = opaque y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y \\<and> opaque x = opaque y", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> CF\n  y \\<in> CF\n  x \\<cong> y\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y \\<and> opaque x = opaque y", "by (blast intro!: similar_into_equiv opaque_equiv cf_unlift unlift_equiv\n      intro: term_trans term_sym)"], ["", "text \\<open>Equivalent idiomatic terms in canonical form are similar. This justifies speaking of a\n  normal form.\\<close>"], ["", "lemma cf_unique:\n  assumes in_cf: \"x \\<in> CF\" \"y \\<in> CF\"\n      and equiv: \"x \\<simeq> y\"\n    shows \"x \\<cong> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cong> y", "using in_cf"], ["proof (prove)\nusing this:\n  x \\<in> CF\n  y \\<in> CF\n\ngoal (1 subgoal):\n 1. x \\<cong> y", "proof (rule cf_similarI)"], ["proof (state)\ngoal (2 subgoals):\n 1. opaque x = opaque y\n 2. CF_pure x \\<leftrightarrow> CF_pure y", "from equiv"], ["proof (chain)\npicking this:\n  x \\<simeq> y", "show \"opaque x = opaque y\""], ["proof (prove)\nusing this:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. opaque x = opaque y", "by (rule opaque_equiv)"], ["proof (state)\nthis:\n  opaque x = opaque y\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y", "from equiv"], ["proof (chain)\npicking this:\n  x \\<simeq> y", "have \"unlift x \\<leftrightarrow> unlift y\""], ["proof (prove)\nusing this:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. unlift x \\<leftrightarrow> unlift y", "by (rule unlift_equiv)"], ["proof (state)\nthis:\n  unlift x \\<leftrightarrow> unlift y\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y", "thus \"CF_pure x \\<leftrightarrow> CF_pure y\""], ["proof (prove)\nusing this:\n  unlift x \\<leftrightarrow> unlift y\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y", "using cf_unlift[OF in_cf(1)] cf_unlift[OF in_cf(2)]"], ["proof (prove)\nusing this:\n  unlift x \\<leftrightarrow> unlift y\n  CF_pure x \\<leftrightarrow> unlift x\n  CF_pure y \\<leftrightarrow> unlift y\n\ngoal (1 subgoal):\n 1. CF_pure x \\<leftrightarrow> CF_pure y", "by (auto intro: term_sym term_trans)"], ["proof (state)\nthis:\n  CF_pure x \\<leftrightarrow> CF_pure y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Normalisation of idiomatic terms\\<close>"], ["", "primrec norm_pn :: \"dB \\<Rightarrow> 'a itrm \\<Rightarrow> 'a itrm\"\nwhere\n    \"norm_pn f (Opaque x) = undefined\"\n  | \"norm_pn f (Pure x) = Pure (f \\<degree> x)\"\n  | \"norm_pn f (n \\<diamondop> x) = norm_pn (\\<B> \\<degree> f) n \\<diamondop> x\""], ["", "primrec norm_nn :: \"'a itrm \\<Rightarrow> 'a itrm \\<Rightarrow> 'a itrm\"\nwhere\n    \"norm_nn n (Opaque x) = undefined\"\n  | \"norm_nn n (Pure x) = norm_pn (\\<T> \\<degree> x) n\"\n  | \"norm_nn n (n' \\<diamondop> x) = norm_nn (norm_pn \\<B> n) n' \\<diamondop> x\""], ["", "primrec norm :: \"'a itrm \\<Rightarrow> 'a itrm\"\nwhere\n    \"norm (Opaque x) = Pure \\<I> \\<diamondop> Opaque x\"\n  | \"norm (Pure x) = Pure x\"\n  | \"norm (f \\<diamondop> x) = norm_nn (norm f) (norm x)\""], ["", "lemma norm_pn_in_cf:\n  assumes \"x \\<in> CF\"\n    shows \"norm_pn f x \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_pn f x \\<in> CF", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_pn f x \\<in> CF", "by (induction x arbitrary: f) auto"], ["", "lemma norm_nn_in_cf:\n  assumes \"n \\<in> CF\" \"n' \\<in> CF\"\n    shows \"norm_nn n n' \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_nn n n' \\<in> CF", "using assms(2,1)"], ["proof (prove)\nusing this:\n  n' \\<in> CF\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_nn n n' \\<in> CF", "by (induction n' arbitrary: n) (auto intro: norm_pn_in_cf)"], ["", "lemma norm_in_cf: \"norm x \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm x \\<in> CF", "by (induction x) (auto intro: norm_nn_in_cf)"], ["", "lemma norm_pn_equiv:\n  assumes \"x \\<in> CF\"\n    shows \"norm_pn f x \\<simeq> Pure f \\<diamondop> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_pn f x \\<simeq> Pure f \\<diamondop> x", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_pn f x \\<simeq> Pure f \\<diamondop> x", "proof (induction x arbitrary: f)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x f. norm_pn f (Pure x) \\<simeq> Pure f \\<diamondop> Pure x\n 2. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "case (pure_cf x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x f. norm_pn f (Pure x) \\<simeq> Pure f \\<diamondop> Pure x\n 2. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "have \"Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x", "using itrm_hom[symmetric]"], ["proof (prove)\nusing this:\n  Pure (?f \\<degree> ?x) \\<simeq> Pure ?f \\<diamondop> Pure ?x\n\ngoal (1 subgoal):\n 1. Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x", "."], ["proof (state)\nthis:\n  Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x\n\ngoal (2 subgoals):\n 1. \\<And>x f. norm_pn f (Pure x) \\<simeq> Pure f \\<diamondop> Pure x\n 2. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "then"], ["proof (chain)\npicking this:\n  Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x", "show ?case"], ["proof (prove)\nusing this:\n  Pure (f \\<degree> x) \\<simeq> Pure f \\<diamondop> Pure x\n\ngoal (1 subgoal):\n 1. norm_pn f (Pure x) \\<simeq> Pure f \\<diamondop> Pure x", "by simp"], ["proof (state)\nthis:\n  norm_pn f (Pure x) \\<simeq> Pure f \\<diamondop> Pure x\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "case (ap_cf n x)"], ["proof (state)\nthis:\n  n \\<in> CF\n  norm_pn ?f n \\<simeq> Pure ?f \\<diamondop> n\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "from ap_cf.IH"], ["proof (chain)\npicking this:\n  norm_pn ?f n \\<simeq> Pure ?f \\<diamondop> n", "have \"norm_pn (\\<B> \\<degree> f) n \\<simeq> Pure (\\<B> \\<degree> f) \\<diamondop> n\""], ["proof (prove)\nusing this:\n  norm_pn ?f n \\<simeq> Pure ?f \\<diamondop> n\n\ngoal (1 subgoal):\n 1. norm_pn (\\<B> \\<degree> f) n \\<simeq>\n    Pure (\\<B> \\<degree> f) \\<diamondop> n", "."], ["proof (state)\nthis:\n  norm_pn (\\<B> \\<degree> f) n \\<simeq>\n  Pure (\\<B> \\<degree> f) \\<diamondop> n\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "then"], ["proof (chain)\npicking this:\n  norm_pn (\\<B> \\<degree> f) n \\<simeq>\n  Pure (\\<B> \\<degree> f) \\<diamondop> n", "have \"norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq> Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x\""], ["proof (prove)\nusing this:\n  norm_pn (\\<B> \\<degree> f) n \\<simeq>\n  Pure (\\<B> \\<degree> f) \\<diamondop> n\n\ngoal (1 subgoal):\n 1. norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq>\n    Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x", ".."], ["proof (state)\nthis:\n  norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq>\n  Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq>\n  Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "have \"... \\<simeq> Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop> Opaque x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x \\<simeq>\n    Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop> Opaque x", "using itrm_hom[symmetric]"], ["proof (prove)\nusing this:\n  Pure (?f \\<degree> ?x) \\<simeq> Pure ?f \\<diamondop> Pure ?x\n\ngoal (1 subgoal):\n 1. Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x \\<simeq>\n    Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop> Opaque x", "by blast"], ["proof (state)\nthis:\n  Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x \\<simeq>\n  Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  Pure (\\<B> \\<degree> f) \\<diamondop> n \\<diamondop> Opaque x \\<simeq>\n  Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "have \"... \\<simeq> Pure f \\<diamondop> (n \\<diamondop> Opaque x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop>\n    Opaque x \\<simeq>\n    Pure f \\<diamondop> (n \\<diamondop> Opaque x)", "using itrm_comp"], ["proof (prove)\nusing this:\n  Pure \\<B> \\<diamondop> ?g \\<diamondop> ?f \\<diamondop> ?x \\<simeq>\n  ?g \\<diamondop> (?f \\<diamondop> ?x)\n\ngoal (1 subgoal):\n 1. Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop>\n    Opaque x \\<simeq>\n    Pure f \\<diamondop> (n \\<diamondop> Opaque x)", "."], ["proof (state)\nthis:\n  Pure \\<B> \\<diamondop> Pure f \\<diamondop> n \\<diamondop>\n  Opaque x \\<simeq>\n  Pure f \\<diamondop> (n \\<diamondop> Opaque x)\n\ngoal (1 subgoal):\n 1. \\<And>f x fa.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>fa. norm_pn fa f \\<simeq> Pure fa \\<diamondop> f\\<rbrakk>\n       \\<Longrightarrow> norm_pn fa (f \\<diamondop> Opaque x) \\<simeq>\n                         Pure fa \\<diamondop> (f \\<diamondop> Opaque x)", "finally"], ["proof (chain)\npicking this:\n  norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq>\n  Pure f \\<diamondop> (n \\<diamondop> Opaque x)", "show ?case"], ["proof (prove)\nusing this:\n  norm_pn (\\<B> \\<degree> f) n \\<diamondop> Opaque x \\<simeq>\n  Pure f \\<diamondop> (n \\<diamondop> Opaque x)\n\ngoal (1 subgoal):\n 1. norm_pn f (n \\<diamondop> Opaque x) \\<simeq>\n    Pure f \\<diamondop> (n \\<diamondop> Opaque x)", "by simp"], ["proof (state)\nthis:\n  norm_pn f (n \\<diamondop> Opaque x) \\<simeq>\n  Pure f \\<diamondop> (n \\<diamondop> Opaque x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma norm_nn_equiv:\n  assumes \"n \\<in> CF\" \"n' \\<in> CF\"\n    shows \"norm_nn n n' \\<simeq> n \\<diamondop> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_nn n n' \\<simeq> n \\<diamondop> n'", "using assms(2,1)"], ["proof (prove)\nusing this:\n  n' \\<in> CF\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_nn n n' \\<simeq> n \\<diamondop> n'", "proof (induction n' arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x n.\n       n \\<in> CF \\<Longrightarrow>\n       norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n 2. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "case (pure_cf x)"], ["proof (state)\nthis:\n  n \\<in> CF\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       n \\<in> CF \\<Longrightarrow>\n       norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n 2. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "then"], ["proof (chain)\npicking this:\n  n \\<in> CF", "have \"norm_pn (\\<T> \\<degree> x) n \\<simeq> Pure (\\<T> \\<degree> x) \\<diamondop> n\""], ["proof (prove)\nusing this:\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_pn (\\<T> \\<degree> x) n \\<simeq>\n    Pure (\\<T> \\<degree> x) \\<diamondop> n", "by (rule norm_pn_equiv)"], ["proof (state)\nthis:\n  norm_pn (\\<T> \\<degree> x) n \\<simeq>\n  Pure (\\<T> \\<degree> x) \\<diamondop> n\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       n \\<in> CF \\<Longrightarrow>\n       norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n 2. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  norm_pn (\\<T> \\<degree> x) n \\<simeq>\n  Pure (\\<T> \\<degree> x) \\<diamondop> n\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       n \\<in> CF \\<Longrightarrow>\n       norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n 2. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "have \"... \\<simeq> n \\<diamondop> Pure x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (\\<T> \\<degree> x) \\<diamondop> n \\<simeq> n \\<diamondop> Pure x", "using itrm_xchng[symmetric]"], ["proof (prove)\nusing this:\n  Pure (\\<T> \\<degree> ?x) \\<diamondop> ?f \\<simeq> ?f \\<diamondop> Pure ?x\n\ngoal (1 subgoal):\n 1. Pure (\\<T> \\<degree> x) \\<diamondop> n \\<simeq> n \\<diamondop> Pure x", "."], ["proof (state)\nthis:\n  Pure (\\<T> \\<degree> x) \\<diamondop> n \\<simeq> n \\<diamondop> Pure x\n\ngoal (2 subgoals):\n 1. \\<And>x n.\n       n \\<in> CF \\<Longrightarrow>\n       norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n 2. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "finally"], ["proof (chain)\npicking this:\n  norm_pn (\\<T> \\<degree> x) n \\<simeq> n \\<diamondop> Pure x", "show ?case"], ["proof (prove)\nusing this:\n  norm_pn (\\<T> \\<degree> x) n \\<simeq> n \\<diamondop> Pure x\n\ngoal (1 subgoal):\n 1. norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x", "by simp"], ["proof (state)\nthis:\n  norm_nn n (Pure x) \\<simeq> n \\<diamondop> Pure x\n\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "case (ap_cf n' x)"], ["proof (state)\nthis:\n  n' \\<in> CF\n  ?n \\<in> CF \\<Longrightarrow> norm_nn ?n n' \\<simeq> ?n \\<diamondop> n'\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "have \"norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq> Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "from \\<open>n \\<in> CF\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> CF", "have \"norm_pn \\<B> n \\<in> CF\""], ["proof (prove)\nusing this:\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_pn \\<B> n \\<in> CF", "by (rule norm_pn_in_cf)"], ["proof (state)\nthis:\n  norm_pn \\<B> n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "with ap_cf.IH"], ["proof (chain)\npicking this:\n  ?n \\<in> CF \\<Longrightarrow> norm_nn ?n n' \\<simeq> ?n \\<diamondop> n'\n  norm_pn \\<B> n \\<in> CF", "have \"norm_nn (norm_pn \\<B> n) n' \\<simeq> norm_pn \\<B> n \\<diamondop> n'\""], ["proof (prove)\nusing this:\n  ?n \\<in> CF \\<Longrightarrow> norm_nn ?n n' \\<simeq> ?n \\<diamondop> n'\n  norm_pn \\<B> n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq> norm_pn \\<B> n \\<diamondop> n'", "."], ["proof (state)\nthis:\n  norm_nn (norm_pn \\<B> n) n' \\<simeq> norm_pn \\<B> n \\<diamondop> n'\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "also"], ["proof (state)\nthis:\n  norm_nn (norm_pn \\<B> n) n' \\<simeq> norm_pn \\<B> n \\<diamondop> n'\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "have \"... \\<simeq> Pure \\<B> \\<diamondop> n \\<diamondop> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm_pn \\<B> n \\<diamondop> n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "using norm_pn_equiv \\<open>n \\<in> CF\\<close>"], ["proof (prove)\nusing this:\n  ?x \\<in> CF \\<Longrightarrow>\n  norm_pn ?f ?x \\<simeq> Pure ?f \\<diamondop> ?x\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_pn \\<B> n \\<diamondop> n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "by blast"], ["proof (state)\nthis:\n  norm_pn \\<B> n \\<diamondop> n' \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n'\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "finally"], ["proof (chain)\npicking this:\n  norm_nn (norm_pn \\<B> n) n' \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n'", "show \"norm_nn (norm_pn \\<B> n) n' \\<simeq> Pure \\<B> \\<diamondop> n \\<diamondop> n'\""], ["proof (prove)\nusing this:\n  norm_nn (norm_pn \\<B> n) n' \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n'\n\ngoal (1 subgoal):\n 1. norm_nn (norm_pn \\<B> n) n' \\<simeq>\n    Pure \\<B> \\<diamondop> n \\<diamondop> n'", "."], ["proof (state)\nthis:\n  norm_nn (norm_pn \\<B> n) n' \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "also"], ["proof (state)\nthis:\n  norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq>\n  Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x\n\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "have \"... \\<simeq> n \\<diamondop> (n' \\<diamondop> Opaque x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x \\<simeq>\n    n \\<diamondop> (n' \\<diamondop> Opaque x)", "using itrm_comp"], ["proof (prove)\nusing this:\n  Pure \\<B> \\<diamondop> ?g \\<diamondop> ?f \\<diamondop> ?x \\<simeq>\n  ?g \\<diamondop> (?f \\<diamondop> ?x)\n\ngoal (1 subgoal):\n 1. Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x \\<simeq>\n    n \\<diamondop> (n' \\<diamondop> Opaque x)", "."], ["proof (state)\nthis:\n  Pure \\<B> \\<diamondop> n \\<diamondop> n' \\<diamondop> Opaque x \\<simeq>\n  n \\<diamondop> (n' \\<diamondop> Opaque x)\n\ngoal (1 subgoal):\n 1. \\<And>f x n.\n       \\<lbrakk>f \\<in> CF;\n        \\<And>n.\n           n \\<in> CF \\<Longrightarrow>\n           norm_nn n f \\<simeq> n \\<diamondop> f;\n        n \\<in> CF\\<rbrakk>\n       \\<Longrightarrow> norm_nn n (f \\<diamondop> Opaque x) \\<simeq>\n                         n \\<diamondop> (f \\<diamondop> Opaque x)", "finally"], ["proof (chain)\npicking this:\n  norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq>\n  n \\<diamondop> (n' \\<diamondop> Opaque x)", "show ?case"], ["proof (prove)\nusing this:\n  norm_nn (norm_pn \\<B> n) n' \\<diamondop> Opaque x \\<simeq>\n  n \\<diamondop> (n' \\<diamondop> Opaque x)\n\ngoal (1 subgoal):\n 1. norm_nn n (n' \\<diamondop> Opaque x) \\<simeq>\n    n \\<diamondop> (n' \\<diamondop> Opaque x)", "by simp"], ["proof (state)\nthis:\n  norm_nn n (n' \\<diamondop> Opaque x) \\<simeq>\n  n \\<diamondop> (n' \\<diamondop> Opaque x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma norm_equiv: \"norm x \\<simeq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm x \\<simeq> x", "proof (induction)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. norm (Opaque x) \\<simeq> Opaque x\n 2. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 3. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "case (Opaque x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>x. norm (Opaque x) \\<simeq> Opaque x\n 2. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 3. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "have \"Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x", "using itrm_id"], ["proof (prove)\nusing this:\n  Pure \\<I> \\<diamondop> ?y \\<simeq> ?y\n\ngoal (1 subgoal):\n 1. Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x", "."], ["proof (state)\nthis:\n  Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x\n\ngoal (3 subgoals):\n 1. \\<And>x. norm (Opaque x) \\<simeq> Opaque x\n 2. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 3. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "then"], ["proof (chain)\npicking this:\n  Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x", "show ?case"], ["proof (prove)\nusing this:\n  Pure \\<I> \\<diamondop> Opaque x \\<simeq> Opaque x\n\ngoal (1 subgoal):\n 1. norm (Opaque x) \\<simeq> Opaque x", "by simp"], ["proof (state)\nthis:\n  norm (Opaque x) \\<simeq> Opaque x\n\ngoal (2 subgoals):\n 1. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 2. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 2. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "case (Pure x)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x. norm (Pure x) \\<simeq> Pure x\n 2. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. norm (Pure x) \\<simeq> Pure x", "by simp"], ["proof (state)\nthis:\n  norm (Pure x) \\<simeq> Pure x\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "case (IAp f x)"], ["proof (state)\nthis:\n  norm f \\<simeq> f\n  norm x \\<simeq> x\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "have \"norm f \\<in> CF\" and \"norm x \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm f \\<in> CF &&& norm x \\<in> CF", "by (rule norm_in_cf)+"], ["proof (state)\nthis:\n  norm f \\<in> CF\n  norm x \\<in> CF\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "then"], ["proof (chain)\npicking this:\n  norm f \\<in> CF\n  norm x \\<in> CF", "have \"norm_nn (norm f) (norm x) \\<simeq> norm f \\<diamondop> norm x\""], ["proof (prove)\nusing this:\n  norm f \\<in> CF\n  norm x \\<in> CF\n\ngoal (1 subgoal):\n 1. norm_nn (norm f) (norm x) \\<simeq> norm f \\<diamondop> norm x", "by (rule norm_nn_equiv)"], ["proof (state)\nthis:\n  norm_nn (norm f) (norm x) \\<simeq> norm f \\<diamondop> norm x\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "also"], ["proof (state)\nthis:\n  norm_nn (norm f) (norm x) \\<simeq> norm f \\<diamondop> norm x\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "have \"... \\<simeq> f \\<diamondop> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. norm f \\<diamondop> norm x \\<simeq> f \\<diamondop> x", "using IAp.IH"], ["proof (prove)\nusing this:\n  norm f \\<simeq> f\n  norm x \\<simeq> x\n\ngoal (1 subgoal):\n 1. norm f \\<diamondop> norm x \\<simeq> f \\<diamondop> x", ".."], ["proof (state)\nthis:\n  norm f \\<diamondop> norm x \\<simeq> f \\<diamondop> x\n\ngoal (1 subgoal):\n 1. \\<And>x1a x2a.\n       \\<lbrakk>norm x1a \\<simeq> x1a; norm x2a \\<simeq> x2a\\<rbrakk>\n       \\<Longrightarrow> norm (x1a \\<diamondop> x2a) \\<simeq>\n                         x1a \\<diamondop> x2a", "finally"], ["proof (chain)\npicking this:\n  norm_nn (norm f) (norm x) \\<simeq> f \\<diamondop> x", "show ?case"], ["proof (prove)\nusing this:\n  norm_nn (norm f) (norm x) \\<simeq> f \\<diamondop> x\n\ngoal (1 subgoal):\n 1. norm (f \\<diamondop> x) \\<simeq> f \\<diamondop> x", "by simp"], ["proof (state)\nthis:\n  norm (f \\<diamondop> x) \\<simeq> f \\<diamondop> x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma normal_form: obtains n where \"n \\<simeq> x\" and \"n \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<simeq> x; n \\<in> CF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using norm_equiv norm_in_cf"], ["proof (prove)\nusing this:\n  norm ?x \\<simeq> ?x\n  norm ?x \\<in> CF\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<simeq> x; n \\<in> CF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["", "subsubsection \\<open>Lifting with normal forms\\<close>"], ["", "lemma nf_unlift:\n  assumes equiv: \"n \\<simeq> x\" and cf: \"n \\<in> CF\"\n    shows \"CF_pure n \\<leftrightarrow> unlift x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "from cf"], ["proof (chain)\npicking this:\n  n \\<in> CF", "have \"CF_pure n \\<leftrightarrow> unlift n\""], ["proof (prove)\nusing this:\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift n", "by (rule cf_unlift)"], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> unlift n\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "also"], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> unlift n\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "from equiv"], ["proof (chain)\npicking this:\n  n \\<simeq> x", "have \"unlift n \\<leftrightarrow> unlift x\""], ["proof (prove)\nusing this:\n  n \\<simeq> x\n\ngoal (1 subgoal):\n 1. unlift n \\<leftrightarrow> unlift x", "by (rule unlift_equiv)"], ["proof (state)\nthis:\n  unlift n \\<leftrightarrow> unlift x\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "finally"], ["proof (chain)\npicking this:\n  CF_pure n \\<leftrightarrow> unlift x", "show ?thesis"], ["proof (prove)\nusing this:\n  CF_pure n \\<leftrightarrow> unlift x\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "."], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> unlift x\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem nf_lifting:\n  assumes opaque: \"opaque x = opaque y\"\n      and base_eq: \"unlift x \\<leftrightarrow> unlift y\"\n    shows \"x \\<simeq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq> y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<simeq> y", "obtain n where nf_x: \"n \\<simeq> x\" \"n \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        \\<lbrakk>n \\<simeq> x; n \\<in> CF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule normal_form)"], ["proof (state)\nthis:\n  n \\<simeq> x\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "obtain n' where nf_y: \"n' \\<simeq> y\" \"n' \\<in> CF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n'.\n        \\<lbrakk>n' \\<simeq> y; n' \\<in> CF\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule normal_form)"], ["proof (state)\nthis:\n  n' \\<simeq> y\n  n' \\<in> CF\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_x"], ["proof (chain)\npicking this:\n  n \\<simeq> x\n  n \\<in> CF", "have \"CF_pure n \\<leftrightarrow> unlift x\""], ["proof (prove)\nusing this:\n  n \\<simeq> x\n  n \\<in> CF\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> unlift x", "by (rule nf_unlift)"], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> unlift x\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> unlift x\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "note base_eq"], ["proof (state)\nthis:\n  unlift x \\<leftrightarrow> unlift y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  unlift x \\<leftrightarrow> unlift y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_y"], ["proof (chain)\npicking this:\n  n' \\<simeq> y\n  n' \\<in> CF", "have \"unlift y \\<leftrightarrow> CF_pure n'\""], ["proof (prove)\nusing this:\n  n' \\<simeq> y\n  n' \\<in> CF\n\ngoal (1 subgoal):\n 1. unlift y \\<leftrightarrow> CF_pure n'", "by (rule nf_unlift[THEN term_sym])"], ["proof (state)\nthis:\n  unlift y \\<leftrightarrow> CF_pure n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "finally"], ["proof (chain)\npicking this:\n  CF_pure n \\<leftrightarrow> CF_pure n'", "have pure_eq: \"CF_pure n \\<leftrightarrow> CF_pure n'\""], ["proof (prove)\nusing this:\n  CF_pure n \\<leftrightarrow> CF_pure n'\n\ngoal (1 subgoal):\n 1. CF_pure n \\<leftrightarrow> CF_pure n'", "."], ["proof (state)\nthis:\n  CF_pure n \\<leftrightarrow> CF_pure n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_x(1)"], ["proof (chain)\npicking this:\n  n \\<simeq> x", "have \"opaque n = opaque x\""], ["proof (prove)\nusing this:\n  n \\<simeq> x\n\ngoal (1 subgoal):\n 1. opaque n = opaque x", "by (rule opaque_equiv)"], ["proof (state)\nthis:\n  opaque n = opaque x\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  opaque n = opaque x\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "note opaque"], ["proof (state)\nthis:\n  opaque x = opaque y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  opaque x = opaque y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_y(1)"], ["proof (chain)\npicking this:\n  n' \\<simeq> y", "have \"opaque y = opaque n'\""], ["proof (prove)\nusing this:\n  n' \\<simeq> y\n\ngoal (1 subgoal):\n 1. opaque y = opaque n'", "by (rule opaque_equiv[THEN sym])"], ["proof (state)\nthis:\n  opaque y = opaque n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "finally"], ["proof (chain)\npicking this:\n  opaque n = opaque n'", "have opaque_eq: \"opaque n = opaque n'\""], ["proof (prove)\nusing this:\n  opaque n = opaque n'\n\ngoal (1 subgoal):\n 1. opaque n = opaque n'", "."], ["proof (state)\nthis:\n  opaque n = opaque n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_x(1)"], ["proof (chain)\npicking this:\n  n \\<simeq> x", "have \"x \\<simeq> n\""], ["proof (prove)\nusing this:\n  n \\<simeq> x\n\ngoal (1 subgoal):\n 1. x \\<simeq> n", ".."], ["proof (state)\nthis:\n  x \\<simeq> n\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  x \\<simeq> n\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "have \"n \\<simeq> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<simeq> n'", "using nf_x nf_y pure_eq opaque_eq"], ["proof (prove)\nusing this:\n  n \\<simeq> x\n  n \\<in> CF\n  n' \\<simeq> y\n  n' \\<in> CF\n  CF_pure n \\<leftrightarrow> CF_pure n'\n  opaque n = opaque n'\n\ngoal (1 subgoal):\n 1. n \\<simeq> n'", "by (blast intro: similar_into_equiv cf_similarI)"], ["proof (state)\nthis:\n  n \\<simeq> n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "also"], ["proof (state)\nthis:\n  n \\<simeq> n'\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "from nf_y(1)"], ["proof (chain)\npicking this:\n  n' \\<simeq> y", "have \"n' \\<simeq> y\""], ["proof (prove)\nusing this:\n  n' \\<simeq> y\n\ngoal (1 subgoal):\n 1. n' \\<simeq> y", "."], ["proof (state)\nthis:\n  n' \\<simeq> y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "finally"], ["proof (chain)\npicking this:\n  x \\<simeq> y", "show \"x \\<simeq> y\""], ["proof (prove)\nusing this:\n  x \\<simeq> y\n\ngoal (1 subgoal):\n 1. x \\<simeq> y", "."], ["proof (state)\nthis:\n  x \\<simeq> y\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Bracket abstraction, twice\\<close>"], ["", "paragraph \\<open>Preliminaries: Sequential application of variables\\<close>"], ["", "definition frees :: \"dB \\<Rightarrow> nat set\"\nwhere [simp]: \"frees t = {i. free t i}\""], ["", "definition var_dist :: \"nat list \\<Rightarrow> dB \\<Rightarrow> dB\"\nwhere \"var_dist = fold (\\<lambda>i t. t \\<degree> Var i)\""], ["", "lemma var_dist_Nil[simp]: \"var_dist [] t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist [] t = t", "unfolding var_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>i t. t \\<degree> Var i) [] t = t", "by simp"], ["", "lemma var_dist_Cons[simp]: \"var_dist (v # vs) t = var_dist vs (t \\<degree> Var v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (v # vs) t = var_dist vs (t \\<degree> Var v)", "unfolding var_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>i t. t \\<degree> Var i) (v # vs) t =\n    fold (\\<lambda>i t. t \\<degree> Var i) vs (t \\<degree> Var v)", "by simp"], ["", "lemma var_dist_append1: \"var_dist (vs @ [v]) t = var_dist vs t \\<degree> Var v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (vs @ [v]) t = var_dist vs t \\<degree> Var v", "unfolding var_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fold (\\<lambda>i t. t \\<degree> Var i) (vs @ [v]) t =\n    fold (\\<lambda>i t. t \\<degree> Var i) vs t \\<degree> Var v", "by simp"], ["", "lemma var_dist_frees: \"frees (var_dist vs t) = frees t \\<union> set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frees (var_dist vs t) = frees t \\<union> set vs", "by (induction vs arbitrary: t) auto"], ["", "lemma var_dist_subst_lt:\n  \"\\<forall>v\\<in>set vs. i < v \\<Longrightarrow> (var_dist vs s)[t/i] = var_dist (map (\\<lambda>v. v - 1) vs) (s[t/i])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set vs. i < v \\<Longrightarrow>\n    var_dist vs s[t/i] = var_dist (map (\\<lambda>v. v - 1) vs) (s[t/i])", "by (induction vs arbitrary: s) simp_all"], ["", "lemma var_dist_subst_gt:\n  \"\\<forall>v\\<in>set vs. v < i \\<Longrightarrow> (var_dist vs s)[t/i] = var_dist vs (s[t/i])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set vs. v < i \\<Longrightarrow>\n    var_dist vs s[t/i] = var_dist vs (s[t/i])", "by (induction vs arbitrary: s) simp_all"], ["", "definition vsubst :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere \"vsubst u v w = (if u < w then u else if u = w then v else u - 1)\""], ["", "lemma vsubst_subst[simp]: \"(Var u)[Var v/w] = Var (vsubst u v w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Var u[Var v/w] = Var (vsubst u v w)", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Var u[Var v/w] = Var (if u < w then u else if u = w then v else u - 1)", "by simp"], ["", "lemma vsubst_subst_lt[simp]: \"u < w \\<Longrightarrow> vsubst u v w = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u < w \\<Longrightarrow> vsubst u v w = u", "unfolding vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. u < w \\<Longrightarrow>\n    (if u < w then u else if u = w then v else u - 1) = u", "by simp"], ["", "lemma var_dist_subst_Var:\n  \"(var_dist vs s)[Var i/j] = var_dist (map (\\<lambda>v. vsubst v i j) vs) (s[Var i/j])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs s[Var i/j] =\n    var_dist (map (\\<lambda>v. vsubst v i j) vs) (s[Var i/j])", "by (induction vs arbitrary: s) simp_all"], ["", "lemma var_dist_cong: \"s \\<leftrightarrow> t \\<Longrightarrow> var_dist vs s \\<leftrightarrow> var_dist vs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t \\<Longrightarrow>\n    var_dist vs s \\<leftrightarrow> var_dist vs t", "by (induction vs arbitrary: s t) auto"], ["", "paragraph \\<open>Preliminaries: Eta reductions with permuted variables\\<close>"], ["", "lemma absn_subst: \"((Abs^^n) s)[t/k] = (Abs^^n) (s[liftn n t 0/k+n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) s[t/k] = (Abs ^^ n) (s[liftn n t 0/k + n])", "by (induction n arbitrary: t k) (simp_all add: liftn_lift_swap)"], ["", "lemma absn_beta_equiv: \"(Abs^^Suc n) s \\<degree> t \\<leftrightarrow> (Abs^^n) (s[liftn n t 0/n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "have \"(Abs^^Suc n) s \\<degree> t = Abs ((Abs^^n) s) \\<degree> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t = Abs ((Abs ^^ n) s) \\<degree> t", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ Suc n) s \\<degree> t = Abs ((Abs ^^ n) s) \\<degree> t\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "also"], ["proof (state)\nthis:\n  (Abs ^^ Suc n) s \\<degree> t = Abs ((Abs ^^ n) s) \\<degree> t\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "have \"... \\<leftrightarrow> ((Abs^^n) s)[t/0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs ((Abs ^^ n) s) \\<degree> t \\<leftrightarrow> (Abs ^^ n) s[t/0]", "by (rule beta_into_equiv) (rule beta.beta)"], ["proof (state)\nthis:\n  Abs ((Abs ^^ n) s) \\<degree> t \\<leftrightarrow> (Abs ^^ n) s[t/0]\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "also"], ["proof (state)\nthis:\n  Abs ((Abs ^^ n) s) \\<degree> t \\<leftrightarrow> (Abs ^^ n) s[t/0]\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "have \"... = (Abs^^n) (s[liftn n t 0/n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) s[t/0] = (Abs ^^ n) (s[liftn n t 0/n])", "by (simp add: absn_subst)"], ["proof (state)\nthis:\n  (Abs ^^ n) s[t/0] = (Abs ^^ n) (s[liftn n t 0/n])\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "finally"], ["proof (chain)\npicking this:\n  (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n  (Abs ^^ n) (s[liftn n t 0/n])", "show ?thesis"], ["proof (prove)\nusing this:\n  (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n  (Abs ^^ n) (s[liftn n t 0/n])\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n    (Abs ^^ n) (s[liftn n t 0/n])", "."], ["proof (state)\nthis:\n  (Abs ^^ Suc n) s \\<degree> t \\<leftrightarrow>\n  (Abs ^^ n) (s[liftn n t 0/n])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma absn_dist_eta: \"(Abs^^n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (Abs ^^ 0) (var_dist (rev [0..<0]) (liftn 0 t 0)) \\<leftrightarrow> t\n 2. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (Abs ^^ 0) (var_dist (rev [0..<0]) (liftn 0 t 0)) \\<leftrightarrow> t\n 2. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ 0) (var_dist (rev [0..<0]) (liftn 0 t 0)) \\<leftrightarrow> t", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ 0) (var_dist (rev [0..<0]) (liftn 0 t 0)) \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "case (Suc n)"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "let ?dist_range = \"\\<lambda>a k. var_dist (rev [a..<k]) (liftn k t 0)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "have append: \"rev [0..<Suc n] = rev [1..<Suc n] @ [0]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [0..<Suc n] = rev [1..<Suc n] @ [0]", "by (simp add: upt_rec)"], ["proof (state)\nthis:\n  rev [0..<Suc n] = rev [1..<Suc n] @ [0]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "have dist_last: \"?dist_range 0 (Suc n) = ?dist_range 1 (Suc n) \\<degree> Var 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0) =\n    var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0) \\<degree> Var 0", "unfolding append var_dist_append1"], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0) \\<degree> Var 0 =\n    var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0) \\<degree> Var 0", ".."], ["proof (state)\nthis:\n  var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0) =\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0) \\<degree> Var 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "have \"\\<not> free (?dist_range 1 (Suc n)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "have \"frees (?dist_range 1 (Suc n)) = frees (liftn (Suc n) t 0) \\<union> {1..n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) =\n    frees (liftn (Suc n) t 0) \\<union> {1..n}", "unfolding var_dist_frees"], ["proof (prove)\ngoal (1 subgoal):\n 1. frees (liftn (Suc n) t 0) \\<union> set (rev [1..<Suc n]) =\n    frees (liftn (Suc n) t 0) \\<union> {1..n}", "by fastforce"], ["proof (state)\nthis:\n  frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) =\n  frees (liftn (Suc n) t 0) \\<union> {1..n}\n\ngoal (1 subgoal):\n 1. \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "then"], ["proof (chain)\npicking this:\n  frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) =\n  frees (liftn (Suc n) t 0) \\<union> {1..n}", "have \"0 \\<notin> frees (?dist_range 1 (Suc n))\""], ["proof (prove)\nusing this:\n  frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) =\n  frees (liftn (Suc n) t 0) \\<union> {1..n}\n\ngoal (1 subgoal):\n 1. 0 \\<notin> frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0))", "by simp"], ["proof (state)\nthis:\n  0 \\<notin> frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0))\n\ngoal (1 subgoal):\n 1. \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "then"], ["proof (chain)\npicking this:\n  0 \\<notin> frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 \\<notin> frees (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0))\n\ngoal (1 subgoal):\n 1. \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "by simp"], ["proof (state)\nthis:\n  \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "then"], ["proof (chain)\npicking this:\n  \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0", "have \"Abs (?dist_range 0 (Suc n)) \\<rightarrow>\\<^sub>\\<eta> (?dist_range 1 (Suc n))[Var 0/0]\""], ["proof (prove)\nusing this:\n  \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0\n\ngoal (1 subgoal):\n 1. Abs (var_dist (rev [0..<Suc n])\n          (liftn (Suc n) t 0)) \\<rightarrow>\\<^sub>\\<eta>\n    var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0]", "unfolding dist_last"], ["proof (prove)\nusing this:\n  \\<not> free (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)) 0\n\ngoal (1 subgoal):\n 1. Abs (var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0) \\<degree>\n         Var 0) \\<rightarrow>\\<^sub>\\<eta>\n    var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0]", "by (rule eta)"], ["proof (state)\nthis:\n  Abs (var_dist (rev [0..<Suc n])\n        (liftn (Suc n) t 0)) \\<rightarrow>\\<^sub>\\<eta>\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "also"], ["proof (state)\nthis:\n  Abs (var_dist (rev [0..<Suc n])\n        (liftn (Suc n) t 0)) \\<rightarrow>\\<^sub>\\<eta>\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0]\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "have \"... = var_dist (rev [0..<n]) ((liftn (Suc n) t 0)[Var 0/0])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "have \"\\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v\n\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "moreover"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v\n\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "have \"rev [0..<n] = map (\\<lambda>v. v - 1) (rev [1..<Suc n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rev [0..<n] = map (\\<lambda>v. v - 1) (rev [1..<Suc n])", "by (induction n) simp_all"], ["proof (state)\nthis:\n  rev [0..<n] = map (\\<lambda>v. v - 1) (rev [1..<Suc n])\n\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v\n  rev [0..<n] = map (\\<lambda>v. v - 1) (rev [1..<Suc n])", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (rev [1..<Suc n]). 0 < v\n  rev [0..<n] = map (\\<lambda>v. v - 1) (rev [1..<Suc n])\n\ngoal (1 subgoal):\n 1. var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n    var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])", "by (simp only: var_dist_subst_lt)"], ["proof (state)\nthis:\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n  var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n  var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "also"], ["proof (state)\nthis:\n  var_dist (rev [1..<Suc n]) (liftn (Suc n) t 0)[Var 0/0] =\n  var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0])\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "have \"... = ?dist_range 0 n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0]) =\n    var_dist (rev [0..<n]) (liftn n t 0)", "using subst_liftn[of 0 n 0 t \"Var 0\"]"], ["proof (prove)\nusing this:\n  0 \\<le> n + 0 \\<and> 0 \\<le> 0 \\<Longrightarrow>\n  liftn (Suc n) t 0[Var 0/0] = liftn n t 0\n\ngoal (1 subgoal):\n 1. var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0]) =\n    var_dist (rev [0..<n]) (liftn n t 0)", "by simp"], ["proof (state)\nthis:\n  var_dist (rev [0..<n]) (liftn (Suc n) t 0[Var 0/0]) =\n  var_dist (rev [0..<n]) (liftn n t 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "finally"], ["proof (chain)\npicking this:\n  Abs (var_dist (rev [0..<Suc n])\n        (liftn (Suc n) t 0)) \\<rightarrow>\\<^sub>\\<eta>\n  var_dist (rev [0..<n]) (liftn n t 0)", "have \"Abs (?dist_range 0 (Suc n)) \\<leftrightarrow> ?dist_range 0 n\""], ["proof (prove)\nusing this:\n  Abs (var_dist (rev [0..<Suc n])\n        (liftn (Suc n) t 0)) \\<rightarrow>\\<^sub>\\<eta>\n  var_dist (rev [0..<n]) (liftn n t 0)\n\ngoal (1 subgoal):\n 1. Abs (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n    var_dist (rev [0..<n]) (liftn n t 0)", ".."], ["proof (state)\nthis:\n  Abs (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  var_dist (rev [0..<n]) (liftn n t 0)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "then"], ["proof (chain)\npicking this:\n  Abs (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  var_dist (rev [0..<n]) (liftn n t 0)", "have \"(Abs^^Suc n) (?dist_range 0 (Suc n)) \\<leftrightarrow> (Abs^^n) (?dist_range 0 n)\""], ["proof (prove)\nusing this:\n  Abs (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  var_dist (rev [0..<n]) (liftn n t 0)\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n)\n     (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0))", "unfolding funpow_Suc_inside"], ["proof (prove)\nusing this:\n  Abs (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  var_dist (rev [0..<n]) (liftn n t 0)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (Abs (var_dist (rev [0..<Suc n])\n            (liftn (Suc n) t 0))) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0))", "by (rule absn_cong)"], ["proof (state)\nthis:\n  (Abs ^^ Suc n)\n   (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "also"], ["proof (state)\nthis:\n  (Abs ^^ Suc n)\n   (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "from Suc.IH"], ["proof (chain)\npicking this:\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t", "have \"... \\<leftrightarrow> t\""], ["proof (prove)\nusing this:\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t", "."], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (Abs ^^ n) (var_dist (rev [0..<n]) (liftn n t 0)) \\<leftrightarrow>\n       t \\<Longrightarrow>\n       (Abs ^^ Suc n)\n        (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n       t", "finally"], ["proof (chain)\npicking this:\n  (Abs ^^ Suc n)\n   (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  t", "show ?case"], ["proof (prove)\nusing this:\n  (Abs ^^ Suc n)\n   (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  t\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n)\n     (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n    t", "."], ["proof (state)\nthis:\n  (Abs ^^ Suc n)\n   (var_dist (rev [0..<Suc n]) (liftn (Suc n) t 0)) \\<leftrightarrow>\n  t\n\ngoal:\nNo subgoals!", "qed"], ["", "primrec strip_context :: \"nat \\<Rightarrow> dB \\<Rightarrow> nat \\<Rightarrow> dB\"\nwhere\n    \"strip_context n (Var i) k = (if i < k then Var i else Var (i - n))\"\n  | \"strip_context n (Abs t) k = Abs (strip_context n t (Suc k))\"\n  | \"strip_context n (s \\<degree> t) k = strip_context n s k \\<degree> strip_context n t k\""], ["", "lemma strip_context_liftn: \"strip_context n (liftn (m + n) t k) k = liftn m t k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_context n (liftn (m + n) t k) k = liftn m t k", "by (induction t arbitrary: k) simp_all"], ["", "lemma liftn_strip_context:\n  assumes \"\\<forall>i\\<in>frees t. i < k \\<or> k + n \\<le> i\"\n    shows \"liftn n (strip_context n t k) k = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n (strip_context n t k) k = t", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees t. i < k \\<or> k + n \\<le> i\n\ngoal (1 subgoal):\n 1. liftn n (strip_context n t k) k = t", "proof (induction t arbitrary: k)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x k.\n       \\<forall>i\\<in>frees (Var x).\n          i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n       liftn n (strip_context n (Var x) k) k = Var x\n 2. \\<And>t1 t2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t1.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t1 k) k = t1;\n        \\<And>k.\n           \\<forall>i\\<in>frees t2.\n              i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n           liftn n (strip_context n t2 k) k = t2;\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (t1 \\<degree> t2) k) k =\n                         t1 \\<degree> t2\n 3. \\<And>t k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t k) k = t;\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (Abs t) k) k = Abs t", "case (Abs t)"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees t. i < ?k \\<or> ?k + n \\<le> i \\<Longrightarrow>\n  liftn n (strip_context n t ?k) ?k = t\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\n\ngoal (3 subgoals):\n 1. \\<And>x k.\n       \\<forall>i\\<in>frees (Var x).\n          i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n       liftn n (strip_context n (Var x) k) k = Var x\n 2. \\<And>t1 t2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t1.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t1 k) k = t1;\n        \\<And>k.\n           \\<forall>i\\<in>frees t2.\n              i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n           liftn n (strip_context n t2 k) k = t2;\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (t1 \\<degree> t2) k) k =\n                         t1 \\<degree> t2\n 3. \\<And>t k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t k) k = t;\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (Abs t) k) k = Abs t", "have \"\\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k + n \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k + n \\<le> i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "assume free: \"i \\<in> frees t\""], ["proof (state)\nthis:\n  i \\<in> frees t\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "show \"i < Suc k \\<or> Suc k + n \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < Suc k \\<or> Suc k + n \\<le> i", "proof (cases \"i > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i\n 2. \\<not> 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "assume \"i > 0\""], ["proof (state)\nthis:\n  0 < i\n\ngoal (2 subgoals):\n 1. 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i\n 2. \\<not> 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "with free Abs.prems"], ["proof (chain)\npicking this:\n  i \\<in> frees t\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\n  0 < i", "have \"i-1 < k \\<or> k + n \\<le> i-1\""], ["proof (prove)\nusing this:\n  i \\<in> frees t\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\n  0 < i\n\ngoal (1 subgoal):\n 1. i - 1 < k \\<or> k + n \\<le> i - 1", "by simp"], ["proof (state)\nthis:\n  i - 1 < k \\<or> k + n \\<le> i - 1\n\ngoal (2 subgoals):\n 1. 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i\n 2. \\<not> 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "then"], ["proof (chain)\npicking this:\n  i - 1 < k \\<or> k + n \\<le> i - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  i - 1 < k \\<or> k + n \\<le> i - 1\n\ngoal (1 subgoal):\n 1. i < Suc k \\<or> Suc k + n \\<le> i", "by arith"], ["proof (state)\nthis:\n  i < Suc k \\<or> Suc k + n \\<le> i\n\ngoal (1 subgoal):\n 1. \\<not> 0 < i \\<Longrightarrow> i < Suc k \\<or> Suc k + n \\<le> i", "qed simp"], ["proof (state)\nthis:\n  i < Suc k \\<or> Suc k + n \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k + n \\<le> i\n\ngoal (3 subgoals):\n 1. \\<And>x k.\n       \\<forall>i\\<in>frees (Var x).\n          i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n       liftn n (strip_context n (Var x) k) k = Var x\n 2. \\<And>t1 t2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t1.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t1 k) k = t1;\n        \\<And>k.\n           \\<forall>i\\<in>frees t2.\n              i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n           liftn n (strip_context n t2 k) k = t2;\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (t1 \\<degree> t2) k) k =\n                         t1 \\<degree> t2\n 3. \\<And>t k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t k) k = t;\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (Abs t) k) k = Abs t", "with Abs.IH"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>frees t. i < ?k \\<or> ?k + n \\<le> i \\<Longrightarrow>\n  liftn n (strip_context n t ?k) ?k = t\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k + n \\<le> i", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees t. i < ?k \\<or> ?k + n \\<le> i \\<Longrightarrow>\n  liftn n (strip_context n t ?k) ?k = t\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k + n \\<le> i\n\ngoal (1 subgoal):\n 1. liftn n (strip_context n (Abs t) k) k = Abs t", "by simp"], ["proof (state)\nthis:\n  liftn n (strip_context n (Abs t) k) k = Abs t\n\ngoal (2 subgoals):\n 1. \\<And>x k.\n       \\<forall>i\\<in>frees (Var x).\n          i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n       liftn n (strip_context n (Var x) k) k = Var x\n 2. \\<And>t1 t2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<forall>i\\<in>frees t1.\n                      i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n                   liftn n (strip_context n t1 k) k = t1;\n        \\<And>k.\n           \\<forall>i\\<in>frees t2.\n              i < k \\<or> k + n \\<le> i \\<Longrightarrow>\n           liftn n (strip_context n t2 k) k = t2;\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k + n \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (strip_context n (t1 \\<degree> t2) k) k =\n                         t1 \\<degree> t2", "qed auto"], ["", "lemma absn_dist_eta_free:\n  assumes \"\\<forall>i\\<in>frees t. n \\<le> i\"\n  shows \"(Abs^^n) (var_dist (rev [0..<n]) t) \\<leftrightarrow> strip_context n t 0\" (is \"?lhs t \\<leftrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "have \"?lhs (liftn n ?rhs 0) \\<leftrightarrow> ?rhs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist (rev [0..<n])\n       (liftn n (strip_context n t 0) 0)) \\<leftrightarrow>\n    strip_context n t 0", "by (rule absn_dist_eta)"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist (rev [0..<n])\n     (liftn n (strip_context n t 0) 0)) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "moreover"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist (rev [0..<n])\n     (liftn n (strip_context n t 0) 0)) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "have \"liftn n ?rhs 0 = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n (strip_context n t 0) 0 = t", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees t. n \\<le> i\n\ngoal (1 subgoal):\n 1. liftn n (strip_context n t 0) 0 = t", "by (auto intro: liftn_strip_context)"], ["proof (state)\nthis:\n  liftn n (strip_context n t 0) 0 = t\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "ultimately"], ["proof (chain)\npicking this:\n  (Abs ^^ n)\n   (var_dist (rev [0..<n])\n     (liftn n (strip_context n t 0) 0)) \\<leftrightarrow>\n  strip_context n t 0\n  liftn n (strip_context n t 0) 0 = t", "show ?thesis"], ["proof (prove)\nusing this:\n  (Abs ^^ n)\n   (var_dist (rev [0..<n])\n     (liftn n (strip_context n t 0) 0)) \\<leftrightarrow>\n  strip_context n t 0\n  liftn n (strip_context n t 0) 0 = t\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal:\nNo subgoals!", "qed"], ["", "definition perm_vars :: \"nat \\<Rightarrow> nat list \\<Rightarrow> bool\"\nwhere \"perm_vars n vs \\<longleftrightarrow> distinct vs \\<and> set vs = {0..<n}\""], ["", "lemma perm_vars_distinct: \"perm_vars n vs \\<Longrightarrow> distinct vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm_vars n vs \\<Longrightarrow> distinct vs", "unfolding perm_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct vs \\<and> set vs = {0..<n} \\<Longrightarrow> distinct vs", "by simp"], ["", "lemma perm_vars_length: \"perm_vars n vs \\<Longrightarrow> length vs = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm_vars n vs \\<Longrightarrow> length vs = n", "unfolding perm_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct vs \\<and> set vs = {0..<n} \\<Longrightarrow> length vs = n", "using distinct_card"], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n\ngoal (1 subgoal):\n 1. distinct vs \\<and> set vs = {0..<n} \\<Longrightarrow> length vs = n", "by force"], ["", "lemma perm_vars_lt: \"perm_vars n vs \\<Longrightarrow> \\<forall>i\\<in>set vs. i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm_vars n vs \\<Longrightarrow> \\<forall>i\\<in>set vs. i < n", "unfolding perm_vars_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct vs \\<and> set vs = {0..<n} \\<Longrightarrow>\n    \\<forall>i\\<in>set vs. i < n", "by simp"], ["", "lemma perm_vars_nth_lt: \"perm_vars n vs \\<Longrightarrow> i < n \\<Longrightarrow> vs ! i < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>perm_vars n vs; i < n\\<rbrakk> \\<Longrightarrow> vs ! i < n", "using perm_vars_length perm_vars_lt"], ["proof (prove)\nusing this:\n  perm_vars ?n ?vs \\<Longrightarrow> length ?vs = ?n\n  perm_vars ?n ?vs \\<Longrightarrow> \\<forall>i\\<in>set ?vs. i < ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>perm_vars n vs; i < n\\<rbrakk> \\<Longrightarrow> vs ! i < n", "by simp"], ["", "lemma perm_vars_inj_on_nth:\n  assumes \"perm_vars n vs\"\n    shows \"inj_on (nth vs) {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((!) vs) {0..<n}", "proof (rule inj_onI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"i \\<in> {0..<n}\" and \"j \\<in> {0..<n}\""], ["proof (state)\nthis:\n  i \\<in> {0..<n}\n  j \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "with assms"], ["proof (chain)\npicking this:\n  perm_vars n vs\n  i \\<in> {0..<n}\n  j \\<in> {0..<n}", "have \"i < length vs\" and \"j < length vs\""], ["proof (prove)\nusing this:\n  perm_vars n vs\n  i \\<in> {0..<n}\n  j \\<in> {0..<n}\n\ngoal (1 subgoal):\n 1. i < length vs &&& j < length vs", "using perm_vars_length"], ["proof (prove)\nusing this:\n  perm_vars n vs\n  i \\<in> {0..<n}\n  j \\<in> {0..<n}\n  perm_vars ?n ?vs \\<Longrightarrow> length ?vs = ?n\n\ngoal (1 subgoal):\n 1. i < length vs &&& j < length vs", "by simp+"], ["proof (state)\nthis:\n  i < length vs\n  j < length vs\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  i < length vs\n  j < length vs\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "from assms"], ["proof (chain)\npicking this:\n  perm_vars n vs", "have \"distinct vs\""], ["proof (prove)\nusing this:\n  perm_vars n vs\n\ngoal (1 subgoal):\n 1. distinct vs", "by (rule perm_vars_distinct)"], ["proof (state)\nthis:\n  distinct vs\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "moreover"], ["proof (state)\nthis:\n  distinct vs\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "assume \"vs ! i = vs ! j\""], ["proof (state)\nthis:\n  vs ! i = vs ! j\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<in> {0..<n}; y \\<in> {0..<n}; vs ! x = vs ! y\\<rbrakk>\n       \\<Longrightarrow> x = y", "ultimately"], ["proof (chain)\npicking this:\n  i < length vs\n  j < length vs\n  distinct vs\n  vs ! i = vs ! j", "show \"i = j\""], ["proof (prove)\nusing this:\n  i < length vs\n  j < length vs\n  distinct vs\n  vs ! i = vs ! j\n\ngoal (1 subgoal):\n 1. i = j", "using nth_eq_iff_index_eq"], ["proof (prove)\nusing this:\n  i < length vs\n  j < length vs\n  distinct vs\n  vs ! i = vs ! j\n  \\<lbrakk>distinct ?xs; ?i < length ?xs; ?j < length ?xs\\<rbrakk>\n  \\<Longrightarrow> (?xs ! ?i = ?xs ! ?j) = (?i = ?j)\n\ngoal (1 subgoal):\n 1. i = j", "by blast"], ["proof (state)\nthis:\n  i = j\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation perm_vars_inv :: \"nat \\<Rightarrow> nat list \\<Rightarrow> nat \\<Rightarrow> nat\"\nwhere \"perm_vars_inv n vs i \\<equiv> the_inv_into {0..<n} ((!) vs) i\""], ["", "lemma perm_vars_inv_nth:\n  assumes \"perm_vars n vs\"\n      and \"i < n\"\n    shows \"perm_vars_inv n vs (vs ! i) = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm_vars_inv n vs (vs ! i) = i", "using assms"], ["proof (prove)\nusing this:\n  perm_vars n vs\n  i < n\n\ngoal (1 subgoal):\n 1. perm_vars_inv n vs (vs ! i) = i", "by (auto intro: the_inv_into_f_f perm_vars_inj_on_nth)"], ["", "lemma dist_perm_eta:\n  assumes perm_vars: \"perm_vars n vs\"\n  obtains vs' where \"\\<And>t. \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n    (Abs^^n) (var_dist vs' ((Abs^^n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "define vsubsts where \"vsubsts n vs' vs =\n    map (\\<lambda>v.\n      if v < n - length vs' then v\n      else if v < n then vs' ! (n - v - 1) + (n - length vs')\n      else v - length vs') vs\" for n vs' vs"], ["proof (state)\nthis:\n  vsubsts ?n ?vs' ?vs =\n  map (\\<lambda>v.\n          if v < ?n - length ?vs' then v\n          else if v < ?n then ?vs' ! (?n - v - 1) + (?n - length ?vs')\n               else v - length ?vs')\n   ?vs\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?app_vars = \"\\<lambda>t n vs' vs. var_dist vs' ((Abs^^n) (var_dist vs (liftn n t 0)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "fix t :: dB and vs' :: \"nat list\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "assume partial: \"length vs' \\<le> n\""], ["proof (state)\nthis:\n  length vs' \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?m = \"n - length vs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"?app_vars t n vs' vs \\<leftrightarrow> (Abs^^?m) (var_dist (vsubsts n vs' vs) (liftn ?m t 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    (Abs ^^ (n - length vs'))\n     (var_dist (vsubsts n vs' vs) (liftn (n - length vs') t 0))", "using partial"], ["proof (prove)\nusing this:\n  length vs' \\<le> n\n\ngoal (1 subgoal):\n 1. var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    (Abs ^^ (n - length vs'))\n     (var_dist (vsubsts n vs' vs) (liftn (n - length vs') t 0))", "proof (induction vs' arbitrary: vs n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>vs n.\n       length [] \\<le> n \\<Longrightarrow>\n       var_dist []\n        ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n       (Abs ^^ (n - length []))\n        (var_dist (vsubsts n [] vs) (liftn (n - length []) t 0))\n 2. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "case Nil"], ["proof (state)\nthis:\n  length [] \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>vs n.\n       length [] \\<le> n \\<Longrightarrow>\n       var_dist []\n        ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n       (Abs ^^ (n - length []))\n        (var_dist (vsubsts n [] vs) (liftn (n - length []) t 0))\n 2. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "then"], ["proof (chain)\npicking this:\n  length [] \\<le> n", "have \"vsubsts n [] vs = vs\""], ["proof (prove)\nusing this:\n  length [] \\<le> n\n\ngoal (1 subgoal):\n 1. vsubsts n [] vs = vs", "unfolding vsubsts_def"], ["proof (prove)\nusing this:\n  length [] \\<le> n\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v.\n            if v < n - length [] then v\n            else if v < n then [] ! (n - v - 1) + (n - length [])\n                 else v - length [])\n     vs =\n    vs", "by (auto intro: map_idI)"], ["proof (state)\nthis:\n  vsubsts n [] vs = vs\n\ngoal (2 subgoals):\n 1. \\<And>vs n.\n       length [] \\<le> n \\<Longrightarrow>\n       var_dist []\n        ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n       (Abs ^^ (n - length []))\n        (var_dist (vsubsts n [] vs) (liftn (n - length []) t 0))\n 2. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "then"], ["proof (chain)\npicking this:\n  vsubsts n [] vs = vs", "show ?case"], ["proof (prove)\nusing this:\n  vsubsts n [] vs = vs\n\ngoal (1 subgoal):\n 1. var_dist [] ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    (Abs ^^ (n - length []))\n     (var_dist (vsubsts n [] vs) (liftn (n - length []) t 0))", "by simp"], ["proof (state)\nthis:\n  var_dist [] ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length []))\n   (var_dist (vsubsts n [] vs) (liftn (n - length []) t 0))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "case (Cons v vs')"], ["proof (state)\nthis:\n  length vs' \\<le> ?n \\<Longrightarrow>\n  var_dist vs' ((Abs ^^ ?n) (var_dist ?vs (liftn ?n t 0))) \\<leftrightarrow>\n  (Abs ^^ (?n - length vs'))\n   (var_dist (vsubsts ?n vs' ?vs) (liftn (?n - length vs') t 0))\n  length (v # vs') \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "define n' where \"n' = n - 1\""], ["proof (state)\nthis:\n  n' = n - 1\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have Suc_n': \"Suc n' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc n' = n", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (n - 1) = n", "using Cons.prems"], ["proof (prove)\nusing this:\n  length (v # vs') \\<le> n\n\ngoal (1 subgoal):\n 1. Suc (n - 1) = n", "by simp"], ["proof (state)\nthis:\n  Suc n' = n\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have vs'_length: \"length vs' \\<le> n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length vs' \\<le> n'", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length vs' \\<le> n - 1", "using Cons.prems"], ["proof (prove)\nusing this:\n  length (v # vs') \\<le> n\n\ngoal (1 subgoal):\n 1. length vs' \\<le> n - 1", "by simp"], ["proof (state)\nthis:\n  length vs' \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "let ?m' = \"n' - length vs'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have m'_conv: \"?m' = n - length (v # vs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' - length vs' = n - length (v # vs')", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. n - 1 - length vs' = n - length (v # vs')", "by simp"], ["proof (state)\nthis:\n  n' - length vs' = n - length (v # vs')\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have \"?app_vars t n (v # vs') vs = ?app_vars t (Suc n') (v # vs') vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (v # vs') ((Abs ^^ n) (var_dist vs (liftn n t 0))) =\n    var_dist (v # vs') ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)))", "unfolding Suc_n'"], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (v # vs') ((Abs ^^ n) (var_dist vs (liftn n t 0))) =\n    var_dist (v # vs') ((Abs ^^ n) (var_dist vs (liftn n t 0)))", ".."], ["proof (state)\nthis:\n  var_dist (v # vs') ((Abs ^^ n) (var_dist vs (liftn n t 0))) =\n  var_dist (v # vs') ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "also"], ["proof (state)\nthis:\n  var_dist (v # vs') ((Abs ^^ n) (var_dist vs (liftn n t 0))) =\n  var_dist (v # vs') ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have \"... \\<leftrightarrow> var_dist vs' ((Abs^^Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (v # vs')\n     ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0))) \\<leftrightarrow>\n    var_dist vs'\n     ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v)", "unfolding var_dist_Cons"], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs'\n     ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n      Var v) \\<leftrightarrow>\n    var_dist vs'\n     ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v)", ".."], ["proof (state)\nthis:\n  var_dist (v # vs')\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0))) \\<leftrightarrow>\n  var_dist vs'\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v)\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "also"], ["proof (state)\nthis:\n  var_dist (v # vs')\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0))) \\<leftrightarrow>\n  var_dist vs'\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v)\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have \"... \\<leftrightarrow> ?app_vars t n' vs' (vsubsts n [v] vs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs'\n     ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n      Var v) \\<leftrightarrow>\n    var_dist vs' ((Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0)))", "proof (rule var_dist_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v \\<leftrightarrow>\n    (Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))", "have \"map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs", "unfolding Suc_n'[symmetric] vsubsts_def vsubst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>vv.\n            if vv < n' then vv else if vv = n' then v + n' else vv - 1)\n     vs =\n    map (\\<lambda>va.\n            if va < Suc n' - length [v] then va\n            else if va < Suc n'\n                 then [v] ! (Suc n' - va - 1) + (Suc n' - length [v])\n                 else va - length [v])\n     vs", "by (auto cong: if_cong)"], ["proof (state)\nthis:\n  map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v \\<leftrightarrow>\n    (Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))", "then"], ["proof (chain)\npicking this:\n  map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs", "have \"(var_dist vs (liftn (Suc n') t 0))[liftn n' (Var v) 0/n']\n                  = var_dist (vsubsts n [v] vs) (liftn n' t 0)\""], ["proof (prove)\nusing this:\n  map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs\n\ngoal (1 subgoal):\n 1. var_dist vs (liftn (Suc n') t 0)[liftn n' (Var v) 0/n'] =\n    var_dist (vsubsts n [v] vs) (liftn n' t 0)", "using var_dist_subst_Var subst_liftn"], ["proof (prove)\nusing this:\n  map (\\<lambda>vv. vsubst vv (v + n') n') vs = vsubsts n [v] vs\n  var_dist ?vs ?s[Var ?i/?j] =\n  var_dist (map (\\<lambda>v. vsubst v ?i ?j) ?vs) (?s[Var ?i/?j])\n  ?i \\<le> ?n + ?k \\<and> ?k \\<le> ?i \\<Longrightarrow>\n  liftn (Suc ?n) ?s ?k[?t/?i] = liftn ?n ?s ?k\n\ngoal (1 subgoal):\n 1. var_dist vs (liftn (Suc n') t 0)[liftn n' (Var v) 0/n'] =\n    var_dist (vsubsts n [v] vs) (liftn n' t 0)", "by simp"], ["proof (state)\nthis:\n  var_dist vs (liftn (Suc n') t 0)[liftn n' (Var v) 0/n'] =\n  var_dist (vsubsts n [v] vs) (liftn n' t 0)\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v \\<leftrightarrow>\n    (Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))", "then"], ["proof (chain)\npicking this:\n  var_dist vs (liftn (Suc n') t 0)[liftn n' (Var v) 0/n'] =\n  var_dist (vsubsts n [v] vs) (liftn n' t 0)", "show \"(Abs^^Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree> Var v\n                  \\<leftrightarrow> (Abs^^n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))\""], ["proof (prove)\nusing this:\n  var_dist vs (liftn (Suc n') t 0)[liftn n' (Var v) 0/n'] =\n  var_dist (vsubsts n [v] vs) (liftn n' t 0)\n\ngoal (1 subgoal):\n 1. (Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v \\<leftrightarrow>\n    (Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))", "by (fastforce intro: absn_beta_equiv[THEN term_trans])"], ["proof (state)\nthis:\n  (Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n  Var v \\<leftrightarrow>\n  (Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var_dist vs'\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v) \\<leftrightarrow>\n  var_dist vs' ((Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0)))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "also"], ["proof (state)\nthis:\n  var_dist vs'\n   ((Abs ^^ Suc n') (var_dist vs (liftn (Suc n') t 0)) \\<degree>\n    Var v) \\<leftrightarrow>\n  var_dist vs' ((Abs ^^ n') (var_dist (vsubsts n [v] vs) (liftn n' t 0)))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have \"... \\<leftrightarrow> (Abs^^?m') (var_dist (vsubsts n' vs' (vsubsts n [v] vs)) (liftn ?m' t 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs'\n     ((Abs ^^ n')\n       (var_dist (vsubsts n [v] vs) (liftn n' t 0))) \\<leftrightarrow>\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0))", "using vs'_length Cons.IH"], ["proof (prove)\nusing this:\n  length vs' \\<le> n'\n  length vs' \\<le> ?n \\<Longrightarrow>\n  var_dist vs' ((Abs ^^ ?n) (var_dist ?vs (liftn ?n t 0))) \\<leftrightarrow>\n  (Abs ^^ (?n - length vs'))\n   (var_dist (vsubsts ?n vs' ?vs) (liftn (?n - length vs') t 0))\n\ngoal (1 subgoal):\n 1. var_dist vs'\n     ((Abs ^^ n')\n       (var_dist (vsubsts n [v] vs) (liftn n' t 0))) \\<leftrightarrow>\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0))", "by blast"], ["proof (state)\nthis:\n  var_dist vs'\n   ((Abs ^^ n')\n     (var_dist (vsubsts n [v] vs) (liftn n' t 0))) \\<leftrightarrow>\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n     (liftn (n' - length vs') t 0))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "also"], ["proof (state)\nthis:\n  var_dist vs'\n   ((Abs ^^ n')\n     (var_dist (vsubsts n [v] vs) (liftn n' t 0))) \\<leftrightarrow>\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n     (liftn (n' - length vs') t 0))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "have \"... = (Abs^^?m') (var_dist (vsubsts n (v # vs') vs) (liftn ?m' t 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0)) =\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0)) =\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "have \"vsubsts n' vs' (vsubsts (Suc n') [v] vs) = vsubsts (Suc n') (v # vs') vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vsubsts n' vs' (vsubsts (Suc n') [v] vs) = vsubsts (Suc n') (v # vs') vs", "unfolding vsubsts_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>v.\n            if v < n' - length vs' then v\n            else if v < n' then vs' ! (n' - v - 1) + (n' - length vs')\n                 else v - length vs')\n     (map (\\<lambda>va.\n              if va < Suc n' - length [v] then va\n              else if va < Suc n'\n                   then [v] ! (Suc n' - va - 1) + (Suc n' - length [v])\n                   else va - length [v])\n       vs) =\n    map (\\<lambda>va.\n            if va < Suc n' - length (v # vs') then va\n            else if va < Suc n'\n                 then (v # vs') ! (Suc n' - va - 1) +\n                      (Suc n' - length (v # vs'))\n                 else va - length (v # vs'))\n     vs", "using vs'_length [[linarith_split_limit=10]]"], ["proof (prove)\nusing this:\n  length vs' \\<le> n'\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v.\n            if v < n' - length vs' then v\n            else if v < n' then vs' ! (n' - v - 1) + (n' - length vs')\n                 else v - length vs')\n     (map (\\<lambda>va.\n              if va < Suc n' - length [v] then va\n              else if va < Suc n'\n                   then [v] ! (Suc n' - va - 1) + (Suc n' - length [v])\n                   else va - length [v])\n       vs) =\n    map (\\<lambda>va.\n            if va < Suc n' - length (v # vs') then va\n            else if va < Suc n'\n                 then (v # vs') ! (Suc n' - va - 1) +\n                      (Suc n' - length (v # vs'))\n                 else va - length (v # vs'))\n     vs", "by auto"], ["proof (state)\nthis:\n  vsubsts n' vs' (vsubsts (Suc n') [v] vs) = vsubsts (Suc n') (v # vs') vs\n\ngoal (1 subgoal):\n 1. (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0)) =\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "then"], ["proof (chain)\npicking this:\n  vsubsts n' vs' (vsubsts (Suc n') [v] vs) = vsubsts (Suc n') (v # vs') vs", "show ?thesis"], ["proof (prove)\nusing this:\n  vsubsts n' vs' (vsubsts (Suc n') [v] vs) = vsubsts (Suc n') (v # vs') vs\n\ngoal (1 subgoal):\n 1. (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0)) =\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "unfolding Suc_n'"], ["proof (prove)\nusing this:\n  vsubsts n' vs' (vsubsts n [v] vs) = vsubsts n (v # vs') vs\n\ngoal (1 subgoal):\n 1. (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n       (liftn (n' - length vs') t 0)) =\n    (Abs ^^ (n' - length vs'))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n     (liftn (n' - length vs') t 0)) =\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n' vs' (vsubsts n [v] vs))\n     (liftn (n' - length vs') t 0)) =\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))\n\ngoal (1 subgoal):\n 1. \\<And>a vs' vs n.\n       \\<lbrakk>\\<And>vs n.\n                   length vs' \\<le> n \\<Longrightarrow>\n                   var_dist vs'\n                    ((Abs ^^ n)\n                      (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                   (Abs ^^ (n - length vs'))\n                    (var_dist (vsubsts n vs' vs)\n                      (liftn (n - length vs') t 0));\n        length (a # vs') \\<le> n\\<rbrakk>\n       \\<Longrightarrow> var_dist (a # vs')\n                          ((Abs ^^ n)\n                            (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n                         (Abs ^^ (n - length (a # vs')))\n                          (var_dist (vsubsts n (a # vs') vs)\n                            (liftn (n - length (a # vs')) t 0))", "finally"], ["proof (chain)\npicking this:\n  var_dist (v # vs')\n   ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))", "show ?case"], ["proof (prove)\nusing this:\n  var_dist (v # vs')\n   ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n' - length vs'))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n' - length vs') t 0))\n\ngoal (1 subgoal):\n 1. var_dist (v # vs')\n     ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    (Abs ^^ (n - length (v # vs')))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n - length (v # vs')) t 0))", "unfolding m'_conv"], ["proof (prove)\nusing this:\n  var_dist (v # vs')\n   ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length (v # vs')))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n - length (v # vs')) t 0))\n\ngoal (1 subgoal):\n 1. var_dist (v # vs')\n     ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    (Abs ^^ (n - length (v # vs')))\n     (var_dist (vsubsts n (v # vs') vs) (liftn (n - length (v # vs')) t 0))", "."], ["proof (state)\nthis:\n  var_dist (v # vs')\n   ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length (v # vs')))\n   (var_dist (vsubsts n (v # vs') vs) (liftn (n - length (v # vs')) t 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length vs'))\n   (var_dist (vsubsts n vs' vs) (liftn (n - length vs') t 0))\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  length ?vs'2 \\<le> n \\<Longrightarrow>\n  var_dist ?vs'2\n   ((Abs ^^ n) (var_dist vs (liftn n ?t2 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length ?vs'2))\n   (var_dist (vsubsts n ?vs'2 vs) (liftn (n - length ?vs'2) ?t2 0))\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "note partial_appd = this"], ["proof (state)\nthis:\n  length ?vs'2 \\<le> n \\<Longrightarrow>\n  var_dist ?vs'2\n   ((Abs ^^ n) (var_dist vs (liftn n ?t2 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length ?vs'2))\n   (var_dist (vsubsts n ?vs'2 vs) (liftn (n - length ?vs'2) ?t2 0))\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "define vs' where \"vs' = map (\\<lambda>i. n - perm_vars_inv n vs (n - i - 1) - 1) [0..<n]\""], ["proof (state)\nthis:\n  vs' = map (\\<lambda>i. n - perm_vars_inv n vs (n - i - 1) - 1) [0..<n]\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "from perm_vars"], ["proof (chain)\npicking this:\n  perm_vars n vs", "have vs_length: \"length vs = n\""], ["proof (prove)\nusing this:\n  perm_vars n vs\n\ngoal (1 subgoal):\n 1. length vs = n", "by (rule perm_vars_length)"], ["proof (state)\nthis:\n  length vs = n\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have vs'_length: \"length vs' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length vs' = n", "unfolding vs'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (map (\\<lambda>i. n - perm_vars_inv n vs (n - i - 1) - 1) [0..<n]) =\n    n", "by simp"], ["proof (state)\nthis:\n  length vs' = n\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "have \"length vs = length (rev [0..<n])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length vs = length (rev [0..<n])", "unfolding vs_length"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = length (rev [0..<n])", "by simp"], ["proof (state)\nthis:\n  length vs = length (rev [0..<n])\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "then"], ["proof (chain)\npicking this:\n  length vs = length (rev [0..<n])", "have \"list_all2 (\\<lambda>v v'. vs' ! (n - v - 1) = v') vs (rev [0..<n])\""], ["proof (prove)\nusing this:\n  length vs = length (rev [0..<n])\n\ngoal (1 subgoal):\n 1. list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "assume \"i < length vs\""], ["proof (state)\nthis:\n  i < length vs\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "then"], ["proof (chain)\npicking this:\n  i < length vs", "have \"i < n\""], ["proof (prove)\nusing this:\n  i < length vs\n\ngoal (1 subgoal):\n 1. i < n", "unfolding vs_length"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. i < n", "."], ["proof (state)\nthis:\n  i < n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "then"], ["proof (chain)\npicking this:\n  i < n", "have \"vs ! i < n\""], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. vs ! i < n", "using perm_vars perm_vars_nth_lt"], ["proof (prove)\nusing this:\n  i < n\n  perm_vars n vs\n  \\<lbrakk>perm_vars ?n ?vs; ?i < ?n\\<rbrakk>\n  \\<Longrightarrow> ?vs ! ?i < ?n\n\ngoal (1 subgoal):\n 1. vs ! i < n", "by simp"], ["proof (state)\nthis:\n  vs ! i < n\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "with \\<open>i < n\\<close>"], ["proof (chain)\npicking this:\n  i < n\n  vs ! i < n", "have \"vs' ! (n - vs ! i - 1) = n - perm_vars_inv n vs (vs ! i) - 1\""], ["proof (prove)\nusing this:\n  i < n\n  vs ! i < n\n\ngoal (1 subgoal):\n 1. vs' ! (n - vs ! i - 1) = n - perm_vars_inv n vs (vs ! i) - 1", "unfolding vs'_def"], ["proof (prove)\nusing this:\n  i < n\n  vs ! i < n\n\ngoal (1 subgoal):\n 1. map (\\<lambda>i. n - perm_vars_inv n vs (n - i - 1) - 1) [0..<n] !\n    (n - vs ! i - 1) =\n    n - perm_vars_inv n vs (vs ! i) - 1", "by simp"], ["proof (state)\nthis:\n  vs' ! (n - vs ! i - 1) = n - perm_vars_inv n vs (vs ! i) - 1\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "also"], ["proof (state)\nthis:\n  vs' ! (n - vs ! i - 1) = n - perm_vars_inv n vs (vs ! i) - 1\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "from \\<open>i < n\\<close>"], ["proof (chain)\npicking this:\n  i < n", "have \"... = n - i - 1\""], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. n - perm_vars_inv n vs (vs ! i) - 1 = n - i - 1", "using perm_vars perm_vars_inv_nth"], ["proof (prove)\nusing this:\n  i < n\n  perm_vars n vs\n  \\<lbrakk>perm_vars ?n ?vs; ?i < ?n\\<rbrakk>\n  \\<Longrightarrow> perm_vars_inv ?n ?vs (?vs ! ?i) = ?i\n\ngoal (1 subgoal):\n 1. n - perm_vars_inv n vs (vs ! i) - 1 = n - i - 1", "by simp"], ["proof (state)\nthis:\n  n - perm_vars_inv n vs (vs ! i) - 1 = n - i - 1\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "also"], ["proof (state)\nthis:\n  n - perm_vars_inv n vs (vs ! i) - 1 = n - i - 1\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "from \\<open>i < n\\<close>"], ["proof (chain)\npicking this:\n  i < n", "have \"... = rev [0..<n] ! i\""], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. n - i - 1 = rev [0..<n] ! i", "by (simp add: rev_nth)"], ["proof (state)\nthis:\n  n - i - 1 = rev [0..<n] ! i\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       na < length vs \\<Longrightarrow>\n       vs' ! (n - vs ! na - 1) = rev [0..<n] ! na", "finally"], ["proof (chain)\npicking this:\n  vs' ! (n - vs ! i - 1) = rev [0..<n] ! i", "show \"vs' ! (n - vs ! i - 1) = rev [0..<n] ! i\""], ["proof (prove)\nusing this:\n  vs' ! (n - vs ! i - 1) = rev [0..<n] ! i\n\ngoal (1 subgoal):\n 1. vs' ! (n - vs ! i - 1) = rev [0..<n] ! i", "."], ["proof (state)\nthis:\n  vs' ! (n - vs ! i - 1) = rev [0..<n] ! i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "then"], ["proof (chain)\npicking this:\n  list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])", "show ?thesis"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "unfolding list.rel_eq[symmetric]"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])\n\ngoal (1 subgoal):\n 1. list_all2 (=) (map (\\<lambda>v. vs' ! (n - v - 1)) vs) (rev [0..<n])", "using list.rel_map"], ["proof (prove)\nusing this:\n  list_all2 (\\<lambda>v. (=) (vs' ! (n - v - 1))) vs (rev [0..<n])\n  list_all2 ?Sb (map ?i ?x) ?y = list_all2 (\\<lambda>x. ?Sb (?i x)) ?x ?y\n  list_all2 ?Sa ?x (map ?g ?y) =\n  list_all2 (\\<lambda>x y. ?Sa x (?g y)) ?x ?y\n\ngoal (1 subgoal):\n 1. list_all2 (=) (map (\\<lambda>v. vs' ! (n - v - 1)) vs) (rev [0..<n])", "by auto"], ["proof (state)\nthis:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]", "have vs'_vs: \"vsubsts n vs' vs = rev [0..<n]\""], ["proof (prove)\nusing this:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\n\ngoal (1 subgoal):\n 1. vsubsts n vs' vs = rev [0..<n]", "unfolding vsubsts_def vs'_length"], ["proof (prove)\nusing this:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v.\n            if v < n - n then v\n            else if v < n then vs' ! (n - v - 1) + (n - n) else v - n)\n     vs =\n    rev [0..<n]", "using perm_vars perm_vars_lt"], ["proof (prove)\nusing this:\n  map (\\<lambda>v. vs' ! (n - v - 1)) vs = rev [0..<n]\n  perm_vars n vs\n  perm_vars ?n ?vs \\<Longrightarrow> \\<forall>i\\<in>set ?vs. i < ?n\n\ngoal (1 subgoal):\n 1. map (\\<lambda>v.\n            if v < n - n then v\n            else if v < n then vs' ! (n - v - 1) + (n - n) else v - n)\n     vs =\n    rev [0..<n]", "by (auto intro: map_ext[THEN trans])"], ["proof (state)\nthis:\n  vsubsts n vs' vs = rev [0..<n]\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "let ?appd_vars = \"\\<lambda>t n. var_dist (rev [0..<n]) t\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "assume not_free: \"\\<forall>i\\<in>frees t. n \\<le> i\""], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees t. n \\<le> i\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"?app_vars t n vs' vs \\<leftrightarrow> ?appd_vars t n\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    var_dist (rev [0..<n]) t", "using partial_appd[of vs'] vs'_length vs'_vs"], ["proof (prove)\nusing this:\n  length vs' \\<le> n \\<Longrightarrow>\n  var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n ?t2 0))) \\<leftrightarrow>\n  (Abs ^^ (n - length vs'))\n   (var_dist (vsubsts n vs' vs) (liftn (n - length vs') ?t2 0))\n  length vs' = n\n  vsubsts n vs' vs = rev [0..<n]\n\ngoal (1 subgoal):\n 1. var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))) \\<leftrightarrow>\n    var_dist (rev [0..<n]) t", "by simp"], ["proof (state)\nthis:\n  var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n ?t 0))) \\<leftrightarrow>\n  var_dist (rev [0..<n]) ?t\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "then"], ["proof (chain)\npicking this:\n  var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n ?t 0))) \\<leftrightarrow>\n  var_dist (rev [0..<n]) ?t", "have \"(Abs^^n) (?app_vars t n vs' vs) \\<leftrightarrow> (Abs^^n) (?appd_vars t n)\""], ["proof (prove)\nusing this:\n  var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n ?t 0))) \\<leftrightarrow>\n  var_dist (rev [0..<n]) ?t\n\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist vs'\n       ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist (rev [0..<n]) t)", "by (rule absn_cong)"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist (rev [0..<n]) t)\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "also"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist (rev [0..<n]) t)\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "have \"... \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "using not_free"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees t. n \\<le> i\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n    strip_context n t 0", "by (rule absn_dist_eta_free)"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist (rev [0..<n]) t) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "finally"], ["proof (chain)\npicking this:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  strip_context n t 0", "have \"(Abs^^n) (?app_vars t n vs' vs) \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\nusing this:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist vs'\n       ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n    strip_context n t 0", "."], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "}"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees ?t2. n \\<le> i \\<Longrightarrow>\n  (Abs ^^ n)\n   (var_dist vs'\n     ((Abs ^^ n) (var_dist vs (liftn n ?t2 0)))) \\<leftrightarrow>\n  strip_context n ?t2 0\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "with that"], ["proof (chain)\npicking this:\n  (\\<And>t.\n      \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n      (Abs ^^ n)\n       (var_dist ?vs'\n         ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n      strip_context n t 0) \\<Longrightarrow>\n  thesis\n  \\<forall>i\\<in>frees ?t2. n \\<le> i \\<Longrightarrow>\n  (Abs ^^ n)\n   (var_dist vs'\n     ((Abs ^^ n) (var_dist vs (liftn n ?t2 0)))) \\<leftrightarrow>\n  strip_context n ?t2 0", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<And>t.\n      \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n      (Abs ^^ n)\n       (var_dist ?vs'\n         ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n      strip_context n t 0) \\<Longrightarrow>\n  thesis\n  \\<forall>i\\<in>frees ?t2. n \\<le> i \\<Longrightarrow>\n  (Abs ^^ n)\n   (var_dist vs'\n     ((Abs ^^ n) (var_dist vs (liftn n ?t2 0)))) \\<leftrightarrow>\n  strip_context n ?t2 0\n\ngoal (1 subgoal):\n 1. thesis", "."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma liftn_absn: \"liftn n ((Abs^^m) t) k = (Abs^^m) (liftn n t (k + m))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n ((Abs ^^ m) t) k = (Abs ^^ m) (liftn n t (k + m))", "by (induction m arbitrary: k) auto"], ["", "lemma liftn_var_dist_lt:\n  \"\\<forall>i\\<in>set vs. i < k \\<Longrightarrow> liftn n (var_dist vs t) k = var_dist vs (liftn n t k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>set vs. i < k \\<Longrightarrow>\n    liftn n (var_dist vs t) k = var_dist vs (liftn n t k)", "by (induction vs arbitrary: t) auto"], ["", "lemma liftn_context_conv: \"k \\<le> k' \\<Longrightarrow> \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i \\<Longrightarrow> liftn n t k = liftn n t k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>k \\<le> k';\n     \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i\\<rbrakk>\n    \\<Longrightarrow> liftn n t k = liftn n t k'", "proof (induction t arbitrary: k k')"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x k k'.\n       \\<lbrakk>k \\<le> k';\n        \\<forall>i\\<in>frees (Var x). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Var x) k = liftn n (Var x) k'\n 2. \\<And>t1 t2 k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t1. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t1 k = liftn n t1 k';\n        \\<And>k k'.\n           \\<lbrakk>k \\<le> k';\n            \\<forall>i\\<in>frees t2. i < k \\<or> k' \\<le> i\\<rbrakk>\n           \\<Longrightarrow> liftn n t2 k = liftn n t2 k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (t1 \\<degree> t2) k =\n                         liftn n (t1 \\<degree> t2) k'\n 3. \\<And>t k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t k = liftn n t k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Abs t) k = liftn n (Abs t) k'", "case (Abs t)"], ["proof (state)\nthis:\n  \\<lbrakk>?k \\<le> ?k';\n   \\<forall>i\\<in>frees t. i < ?k \\<or> ?k' \\<le> i\\<rbrakk>\n  \\<Longrightarrow> liftn n t ?k = liftn n t ?k'\n  k \\<le> k'\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i\n\ngoal (3 subgoals):\n 1. \\<And>x k k'.\n       \\<lbrakk>k \\<le> k';\n        \\<forall>i\\<in>frees (Var x). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Var x) k = liftn n (Var x) k'\n 2. \\<And>t1 t2 k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t1. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t1 k = liftn n t1 k';\n        \\<And>k k'.\n           \\<lbrakk>k \\<le> k';\n            \\<forall>i\\<in>frees t2. i < k \\<or> k' \\<le> i\\<rbrakk>\n           \\<Longrightarrow> liftn n t2 k = liftn n t2 k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (t1 \\<degree> t2) k =\n                         liftn n (t1 \\<degree> t2) k'\n 3. \\<And>t k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t k = liftn n t k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Abs t) k = liftn n (Abs t) k'", "have \"\\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k' \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k' \\<le> i", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "assume \"i \\<in> frees t\""], ["proof (state)\nthis:\n  i \\<in> frees t\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> frees t \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "show \"i < Suc k \\<or> Suc k' \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < Suc k \\<or> Suc k' \\<le> i", "proof (cases \"i = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i\n 2. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "assume \"i = 0\""], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i\n 2. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. i < Suc k \\<or> Suc k' \\<le> i", "by simp"], ["proof (state)\nthis:\n  i < Suc k \\<or> Suc k' \\<le> i\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "assume \"i \\<noteq> 0\""], ["proof (state)\nthis:\n  i \\<noteq> 0\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "from Abs.prems(2)"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i", "have \"\\<forall>i. free t (Suc i) \\<longrightarrow> i < k \\<or> k' \\<le> i\""], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i\n\ngoal (1 subgoal):\n 1. \\<forall>i. free t (Suc i) \\<longrightarrow> i < k \\<or> k' \\<le> i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i. free t (Suc i) \\<longrightarrow> i < k \\<or> k' \\<le> i\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. free t (Suc i) \\<longrightarrow> i < k \\<or> k' \\<le> i", "have \"\\<forall>i. 0 < i \\<and> free t i \\<longrightarrow> i - 1 < k \\<or> k' \\<le> i - 1\""], ["proof (prove)\nusing this:\n  \\<forall>i. free t (Suc i) \\<longrightarrow> i < k \\<or> k' \\<le> i\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       0 < i \\<and> free t i \\<longrightarrow>\n       i - 1 < k \\<or> k' \\<le> i - 1", "by simp"], ["proof (state)\nthis:\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i - 1 < k \\<or> k' \\<le> i - 1\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "then"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i - 1 < k \\<or> k' \\<le> i - 1", "have \"\\<forall>i. 0 < i \\<and> free t i \\<longrightarrow> i < Suc k \\<or> Suc k' \\<le> i\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i - 1 < k \\<or> k' \\<le> i - 1\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       0 < i \\<and> free t i \\<longrightarrow>\n       i < Suc k \\<or> Suc k' \\<le> i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i < Suc k \\<or> Suc k' \\<le> i\n\ngoal (1 subgoal):\n 1. i \\<noteq> 0 \\<Longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "with \\<open>i \\<noteq> 0\\<close> \\<open>i \\<in> frees t\\<close>"], ["proof (chain)\npicking this:\n  i \\<noteq> 0\n  i \\<in> frees t\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i < Suc k \\<or> Suc k' \\<le> i", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<noteq> 0\n  i \\<in> frees t\n  \\<forall>i.\n     0 < i \\<and> free t i \\<longrightarrow> i < Suc k \\<or> Suc k' \\<le> i\n\ngoal (1 subgoal):\n 1. i < Suc k \\<or> Suc k' \\<le> i", "by simp"], ["proof (state)\nthis:\n  i < Suc k \\<or> Suc k' \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < Suc k \\<or> Suc k' \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k' \\<le> i\n\ngoal (3 subgoals):\n 1. \\<And>x k k'.\n       \\<lbrakk>k \\<le> k';\n        \\<forall>i\\<in>frees (Var x). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Var x) k = liftn n (Var x) k'\n 2. \\<And>t1 t2 k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t1. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t1 k = liftn n t1 k';\n        \\<And>k k'.\n           \\<lbrakk>k \\<le> k';\n            \\<forall>i\\<in>frees t2. i < k \\<or> k' \\<le> i\\<rbrakk>\n           \\<Longrightarrow> liftn n t2 k = liftn n t2 k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (t1 \\<degree> t2) k =\n                         liftn n (t1 \\<degree> t2) k'\n 3. \\<And>t k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t k = liftn n t k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (Abs t). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Abs t) k = liftn n (Abs t) k'", "with Abs.IH Abs.prems(1)"], ["proof (chain)\npicking this:\n  \\<lbrakk>?k \\<le> ?k';\n   \\<forall>i\\<in>frees t. i < ?k \\<or> ?k' \\<le> i\\<rbrakk>\n  \\<Longrightarrow> liftn n t ?k = liftn n t ?k'\n  k \\<le> k'\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k' \\<le> i", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?k \\<le> ?k';\n   \\<forall>i\\<in>frees t. i < ?k \\<or> ?k' \\<le> i\\<rbrakk>\n  \\<Longrightarrow> liftn n t ?k = liftn n t ?k'\n  k \\<le> k'\n  \\<forall>i\\<in>frees t. i < Suc k \\<or> Suc k' \\<le> i\n\ngoal (1 subgoal):\n 1. liftn n (Abs t) k = liftn n (Abs t) k'", "by auto"], ["proof (state)\nthis:\n  liftn n (Abs t) k = liftn n (Abs t) k'\n\ngoal (2 subgoals):\n 1. \\<And>x k k'.\n       \\<lbrakk>k \\<le> k';\n        \\<forall>i\\<in>frees (Var x). i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (Var x) k = liftn n (Var x) k'\n 2. \\<And>t1 t2 k k'.\n       \\<lbrakk>\\<And>k k'.\n                   \\<lbrakk>k \\<le> k';\n                    \\<forall>i\\<in>frees t1. i < k \\<or> k' \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> liftn n t1 k = liftn n t1 k';\n        \\<And>k k'.\n           \\<lbrakk>k \\<le> k';\n            \\<forall>i\\<in>frees t2. i < k \\<or> k' \\<le> i\\<rbrakk>\n           \\<Longrightarrow> liftn n t2 k = liftn n t2 k';\n        k \\<le> k';\n        \\<forall>i\\<in>frees (t1 \\<degree> t2).\n           i < k \\<or> k' \\<le> i\\<rbrakk>\n       \\<Longrightarrow> liftn n (t1 \\<degree> t2) k =\n                         liftn n (t1 \\<degree> t2) k'", "qed auto"], ["", "lemma liftn_liftn0: \"\\<forall>i\\<in>frees t. k \\<le> i \\<Longrightarrow> liftn n t k = liftn n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees t. k \\<le> i \\<Longrightarrow>\n    liftn n t k = liftn n t 0", "using liftn_context_conv"], ["proof (prove)\nusing this:\n  \\<lbrakk>?k \\<le> ?k';\n   \\<forall>i\\<in>frees ?t. i < ?k \\<or> ?k' \\<le> i\\<rbrakk>\n  \\<Longrightarrow> liftn ?n ?t ?k = liftn ?n ?t ?k'\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees t. k \\<le> i \\<Longrightarrow>\n    liftn n t k = liftn n t 0", "by auto"], ["", "lemma dist_perm_eta_equiv:\n  assumes perm_vars: \"perm_vars n vs\"\n      and not_free: \"\\<forall>i\\<in>frees s. n \\<le> i\" \"\\<forall>i\\<in>frees t. n \\<le> i\"\n      and perm_equiv: \"(Abs^^n) (var_dist vs s) \\<leftrightarrow> (Abs^^n) (var_dist vs t)\"\n    shows \"strip_context n s 0 \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "from perm_vars"], ["proof (chain)\npicking this:\n  perm_vars n vs", "have vs_lt_n: \"\\<forall>i\\<in>set vs. i < n\""], ["proof (prove)\nusing this:\n  perm_vars n vs\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>set vs. i < n", "using perm_vars_lt"], ["proof (prove)\nusing this:\n  perm_vars n vs\n  perm_vars ?n ?vs \\<Longrightarrow> \\<forall>i\\<in>set ?vs. i < ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>set vs. i < n", "by simp"], ["proof (state)\nthis:\n  \\<forall>i\\<in>set vs. i < n\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "obtain vs' where\n    etas: \"\\<And>t. \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n          (Abs^^n) (var_dist vs' ((Abs^^n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using perm_vars dist_perm_eta"], ["proof (prove)\nusing this:\n  perm_vars n vs\n  \\<lbrakk>perm_vars ?n ?vs;\n   \\<And>vs'.\n      (\\<And>t.\n          \\<forall>i\\<in>frees t. ?n \\<le> i \\<Longrightarrow>\n          (Abs ^^ ?n)\n           (var_dist vs'\n             ((Abs ^^ ?n) (var_dist ?vs (liftn ?n t 0)))) \\<leftrightarrow>\n          strip_context ?n t 0) \\<Longrightarrow>\n      ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>vs'.\n        (\\<And>t.\n            \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n            (Abs ^^ n)\n             (var_dist vs'\n               ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n            strip_context n t 0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees ?t. n \\<le> i \\<Longrightarrow>\n  (Abs ^^ n)\n   (var_dist vs'\n     ((Abs ^^ n) (var_dist vs (liftn n ?t 0)))) \\<leftrightarrow>\n  strip_context n ?t 0\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "have \"strip_context n s 0 \\<leftrightarrow> (Abs^^n) (var_dist vs' ((Abs^^n) (var_dist vs (liftn n s 0))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0))))", "using etas[THEN term_sym] not_free(1)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees ?t1. n \\<le> i \\<Longrightarrow>\n  strip_context n ?t1 0 \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n ?t1 0))))\n  \\<forall>i\\<in>frees s. n \\<le> i\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0))))", "."], ["proof (state)\nthis:\n  strip_context n s 0 \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0))))\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "also"], ["proof (state)\nthis:\n  strip_context n s 0 \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0))))\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "have \"... \\<leftrightarrow> (Abs^^n) (var_dist vs' ((Abs^^n) (var_dist vs (liftn n t 0))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist vs'\n       ((Abs ^^ n) (var_dist vs (liftn n s 0)))) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))))", "proof (rule absn_cong, rule var_dist_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"(Abs^^n) (var_dist vs (liftn n s 0)) = (Abs^^n) (var_dist vs (liftn n s n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) =\n    (Abs ^^ n) (var_dist vs (liftn n s n))", "using not_free(1) liftn_liftn0[of s n]"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees s. n \\<le> i\n  \\<forall>i\\<in>frees s. n \\<le> i \\<Longrightarrow>\n  liftn ?n s n = liftn ?n s 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) =\n    (Abs ^^ n) (var_dist vs (liftn n s n))", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n s 0)) =\n  (Abs ^^ n) (var_dist vs (liftn n s n))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n s 0)) =\n  (Abs ^^ n) (var_dist vs (liftn n s n))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... = (Abs^^n) (liftn n (var_dist vs s) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s n)) =\n    (Abs ^^ n) (liftn n (var_dist vs s) n)", "using vs_lt_n liftn_var_dist_lt"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>set vs. i < n\n  \\<forall>i\\<in>set ?vs. i < ?k \\<Longrightarrow>\n  liftn ?n (var_dist ?vs ?t) ?k = var_dist ?vs (liftn ?n ?t ?k)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s n)) =\n    (Abs ^^ n) (liftn n (var_dist vs s) n)", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n s n)) =\n  (Abs ^^ n) (liftn n (var_dist vs s) n)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n s n)) =\n  (Abs ^^ n) (liftn n (var_dist vs s) n)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... = liftn n ((Abs^^n) (var_dist vs s)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (liftn n (var_dist vs s) n) =\n    liftn n ((Abs ^^ n) (var_dist vs s)) 0", "using liftn_absn"], ["proof (prove)\nusing this:\n  liftn ?n ((Abs ^^ ?m) ?t) ?k = (Abs ^^ ?m) (liftn ?n ?t (?k + ?m))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (liftn n (var_dist vs s) n) =\n    liftn n ((Abs ^^ n) (var_dist vs s)) 0", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (liftn n (var_dist vs s) n) =\n  liftn n ((Abs ^^ n) (var_dist vs s)) 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (liftn n (var_dist vs s) n) =\n  liftn n ((Abs ^^ n) (var_dist vs s)) 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... \\<leftrightarrow> liftn n ((Abs^^n) (var_dist vs t)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n ((Abs ^^ n) (var_dist vs s)) 0 \\<leftrightarrow>\n    liftn n ((Abs ^^ n) (var_dist vs t)) 0", "using perm_equiv"], ["proof (prove)\nusing this:\n  (Abs ^^ n) (var_dist vs s) \\<leftrightarrow> (Abs ^^ n) (var_dist vs t)\n\ngoal (1 subgoal):\n 1. liftn n ((Abs ^^ n) (var_dist vs s)) 0 \\<leftrightarrow>\n    liftn n ((Abs ^^ n) (var_dist vs t)) 0", "by (rule equiv_liftn)"], ["proof (state)\nthis:\n  liftn n ((Abs ^^ n) (var_dist vs s)) 0 \\<leftrightarrow>\n  liftn n ((Abs ^^ n) (var_dist vs t)) 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  liftn n ((Abs ^^ n) (var_dist vs s)) 0 \\<leftrightarrow>\n  liftn n ((Abs ^^ n) (var_dist vs t)) 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... = (Abs^^n) (liftn n (var_dist vs t) n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n ((Abs ^^ n) (var_dist vs t)) 0 =\n    (Abs ^^ n) (liftn n (var_dist vs t) n)", "using liftn_absn"], ["proof (prove)\nusing this:\n  liftn ?n ((Abs ^^ ?m) ?t) ?k = (Abs ^^ ?m) (liftn ?n ?t (?k + ?m))\n\ngoal (1 subgoal):\n 1. liftn n ((Abs ^^ n) (var_dist vs t)) 0 =\n    (Abs ^^ n) (liftn n (var_dist vs t) n)", "by simp"], ["proof (state)\nthis:\n  liftn n ((Abs ^^ n) (var_dist vs t)) 0 =\n  (Abs ^^ n) (liftn n (var_dist vs t) n)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  liftn n ((Abs ^^ n) (var_dist vs t)) 0 =\n  (Abs ^^ n) (liftn n (var_dist vs t) n)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... = (Abs^^n) (var_dist vs (liftn n t n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (liftn n (var_dist vs t) n) =\n    (Abs ^^ n) (var_dist vs (liftn n t n))", "using vs_lt_n liftn_var_dist_lt"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>set vs. i < n\n  \\<forall>i\\<in>set ?vs. i < ?k \\<Longrightarrow>\n  liftn ?n (var_dist ?vs ?t) ?k = var_dist ?vs (liftn ?n ?t ?k)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (liftn n (var_dist vs t) n) =\n    (Abs ^^ n) (var_dist vs (liftn n t n))", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (liftn n (var_dist vs t) n) =\n  (Abs ^^ n) (var_dist vs (liftn n t n))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (liftn n (var_dist vs t) n) =\n  (Abs ^^ n) (var_dist vs (liftn n t n))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "have \"... = (Abs^^n) (var_dist vs (liftn n t 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n t n)) =\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "using not_free(2) liftn_liftn0[of t n]"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees t. n \\<le> i\n  \\<forall>i\\<in>frees t. n \\<le> i \\<Longrightarrow>\n  liftn ?n t n = liftn ?n t 0\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n t n)) =\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "by simp"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n t n)) =\n  (Abs ^^ n) (var_dist vs (liftn n t 0))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "finally"], ["proof (chain)\npicking this:\n  (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (liftn n t 0))", "show \"(Abs^^n) (var_dist vs (liftn n s 0)) \\<leftrightarrow> ...\""], ["proof (prove)\nusing this:\n  (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (liftn n t 0))\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (liftn n t 0))", "."], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (liftn n s 0)) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (liftn n t 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0)))) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))))\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "also"], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n s 0)))) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0))))\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "have \"... \\<leftrightarrow> strip_context n t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist vs'\n       ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n    strip_context n t 0", "using etas not_free(2)"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>frees ?t. n \\<le> i \\<Longrightarrow>\n  (Abs ^^ n)\n   (var_dist vs'\n     ((Abs ^^ n) (var_dist vs (liftn n ?t 0)))) \\<leftrightarrow>\n  strip_context n ?t 0\n  \\<forall>i\\<in>frees t. n \\<le> i\n\ngoal (1 subgoal):\n 1. (Abs ^^ n)\n     (var_dist vs'\n       ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n    strip_context n t 0", "."], ["proof (state)\nthis:\n  (Abs ^^ n)\n   (var_dist vs' ((Abs ^^ n) (var_dist vs (liftn n t 0)))) \\<leftrightarrow>\n  strip_context n t 0\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "finally"], ["proof (chain)\npicking this:\n  strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "show ?thesis"], ["proof (prove)\nusing this:\n  strip_context n s 0 \\<leftrightarrow> strip_context n t 0\n\ngoal (1 subgoal):\n 1. strip_context n s 0 \\<leftrightarrow> strip_context n t 0", "."], ["proof (state)\nthis:\n  strip_context n s 0 \\<leftrightarrow> strip_context n t 0\n\ngoal:\nNo subgoals!", "qed"], ["", "paragraph \\<open>General notion of bracket abstraction for lambda terms\\<close>"], ["", "definition foldr_option :: \"('a \\<Rightarrow> 'b \\<Rightarrow> 'b option) \\<Rightarrow> 'a list \\<Rightarrow> 'b \\<Rightarrow> 'b option\"\nwhere \"foldr_option f xs e = foldr (\\<lambda>a b. Option.bind b (f a)) xs (Some e)\""], ["", "lemma bind_eq_SomeE:\n  assumes \"Option.bind x f = Some y\"\n  obtains x' where \"x = Some x'\" and \"f x' = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x = Some x'; f x' = Some y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  Option.bind x f = Some y\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x = Some x'; f x' = Some y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto iff: bind_eq_Some_conv)"], ["", "lemma foldr_option_Nil[simp]: \"foldr_option f [] e = Some e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr_option f [] e = Some e", "unfolding foldr_option_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (\\<lambda>a b. Option.bind b (f a)) [] (Some e) = Some e", "by simp"], ["", "lemma foldr_option_Cons_SomeE:\n  assumes \"foldr_option f (x#xs) e = Some y\"\n  obtains y' where \"foldr_option f xs e = Some y'\" and \"f x y' = Some y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>foldr_option f xs e = Some y'; f x y' = Some y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  foldr_option f (x # xs) e = Some y\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>foldr_option f xs e = Some y'; f x y' = Some y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding foldr_option_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>a b. Option.bind b (f a)) (x # xs) (Some e) = Some y\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>foldr (\\<lambda>a b. Option.bind b (f a)) xs (Some e) =\n                 Some y';\n         f x y' = Some y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: bind_eq_SomeE)"], ["", "locale bracket_abstraction =\n  fixes term_bracket :: \"nat \\<Rightarrow> dB \\<Rightarrow> dB option\"\n  assumes bracket_app: \"term_bracket i s = Some s' \\<Longrightarrow> s' \\<degree> Var i \\<leftrightarrow> s\"\n  assumes bracket_frees: \"term_bracket i s = Some s' \\<Longrightarrow> frees s' = frees s - {i}\"\nbegin"], ["", "definition term_brackets :: \"nat list \\<Rightarrow> dB \\<Rightarrow> dB option\"\nwhere \"term_brackets = foldr_option term_bracket\""], ["", "lemma term_brackets_Nil[simp]: \"term_brackets [] t = Some t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_brackets [] t = Some t", "unfolding term_brackets_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr_option term_bracket [] t = Some t", "by simp"], ["", "lemma term_brackets_Cons_SomeE:\n  assumes \"term_brackets (v#vs) t = Some t'\"\n  obtains s' where \"term_brackets vs t = Some s'\" and \"term_bracket v s' = Some t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>term_brackets vs t = Some s';\n         term_bracket v s' = Some t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  term_brackets (v # vs) t = Some t'\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>term_brackets vs t = Some s';\n         term_bracket v s' = Some t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding term_brackets_def"], ["proof (prove)\nusing this:\n  foldr_option term_bracket (v # vs) t = Some t'\n\ngoal (1 subgoal):\n 1. (\\<And>s'.\n        \\<lbrakk>foldr_option term_bracket vs t = Some s';\n         term_bracket v s' = Some t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim foldr_option_Cons_SomeE)"], ["", "lemma term_brackets_ConsI:\n  assumes \"term_brackets vs t = Some t'\"\n      and \"term_bracket v t' = Some t''\"\n    shows \"term_brackets (v#vs) t = Some t''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_brackets (v # vs) t = Some t''", "using assms"], ["proof (prove)\nusing this:\n  term_brackets vs t = Some t'\n  term_bracket v t' = Some t''\n\ngoal (1 subgoal):\n 1. term_brackets (v # vs) t = Some t''", "unfolding term_brackets_def foldr_option_def"], ["proof (prove)\nusing this:\n  foldr (\\<lambda>a b. Option.bind b (term_bracket a)) vs (Some t) = Some t'\n  term_bracket v t' = Some t''\n\ngoal (1 subgoal):\n 1. foldr (\\<lambda>a b. Option.bind b (term_bracket a)) (v # vs) (Some t) =\n    Some t''", "by simp"], ["", "lemma term_brackets_dist:\n  assumes \"term_brackets vs t = Some t'\"\n    shows \"var_dist vs t' \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs t' \\<leftrightarrow> t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. var_dist vs t' \\<leftrightarrow> t", "from assms"], ["proof (chain)\npicking this:\n  term_brackets vs t = Some t'", "have \"\\<forall>t''. t' \\<leftrightarrow> t'' \\<longrightarrow> var_dist vs t'' \\<leftrightarrow> t\""], ["proof (prove)\nusing this:\n  term_brackets vs t = Some t'\n\ngoal (1 subgoal):\n 1. \\<forall>t''.\n       t' \\<leftrightarrow> t'' \\<longrightarrow>\n       var_dist vs t'' \\<leftrightarrow> t", "proof (induction vs arbitrary: t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t'.\n       term_brackets [] t = Some t' \\<Longrightarrow>\n       \\<forall>t''.\n          t' \\<leftrightarrow> t'' \\<longrightarrow>\n          var_dist [] t'' \\<leftrightarrow> t\n 2. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "case Nil"], ["proof (state)\nthis:\n  term_brackets [] t = Some t'\n\ngoal (2 subgoals):\n 1. \\<And>t'.\n       term_brackets [] t = Some t' \\<Longrightarrow>\n       \\<forall>t''.\n          t' \\<leftrightarrow> t'' \\<longrightarrow>\n          var_dist [] t'' \\<leftrightarrow> t\n 2. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "then"], ["proof (chain)\npicking this:\n  term_brackets [] t = Some t'", "show ?case"], ["proof (prove)\nusing this:\n  term_brackets [] t = Some t'\n\ngoal (1 subgoal):\n 1. \\<forall>t''.\n       t' \\<leftrightarrow> t'' \\<longrightarrow>\n       var_dist [] t'' \\<leftrightarrow> t", "by (simp add: term_sym)"], ["proof (state)\nthis:\n  \\<forall>t''.\n     t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist [] t'' \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "case (Cons v vs)"], ["proof (state)\nthis:\n  term_brackets vs t = Some ?t' \\<Longrightarrow>\n  \\<forall>t''.\n     ?t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist vs t'' \\<leftrightarrow> t\n  term_brackets (v # vs) t = Some t'\n\ngoal (1 subgoal):\n 1. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "from Cons.prems"], ["proof (chain)\npicking this:\n  term_brackets (v # vs) t = Some t'", "obtain u where\n        inner: \"term_brackets vs t = Some u\" and\n        step: \"term_bracket v u = Some t'\""], ["proof (prove)\nusing this:\n  term_brackets (v # vs) t = Some t'\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>term_brackets vs t = Some u;\n         term_bracket v u = Some t'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: term_brackets_Cons_SomeE)"], ["proof (state)\nthis:\n  term_brackets vs t = Some u\n  term_bracket v u = Some t'\n\ngoal (1 subgoal):\n 1. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "from step"], ["proof (chain)\npicking this:\n  term_bracket v u = Some t'", "have red1: \"t' \\<degree> Var v \\<leftrightarrow> u\""], ["proof (prove)\nusing this:\n  term_bracket v u = Some t'\n\ngoal (1 subgoal):\n 1. t' \\<degree> Var v \\<leftrightarrow> u", "by (rule bracket_app)"], ["proof (state)\nthis:\n  t' \\<degree> Var v \\<leftrightarrow> u\n\ngoal (1 subgoal):\n 1. \\<And>a vs t'.\n       \\<lbrakk>\\<And>t'.\n                   term_brackets vs t = Some t' \\<Longrightarrow>\n                   \\<forall>t''.\n                      t' \\<leftrightarrow> t'' \\<longrightarrow>\n                      var_dist vs t'' \\<leftrightarrow> t;\n        term_brackets (a # vs) t = Some t'\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t''.\n                            t' \\<leftrightarrow> t'' \\<longrightarrow>\n                            var_dist (a # vs) t'' \\<leftrightarrow> t", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t''.\n       t' \\<leftrightarrow> t'' \\<longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "proof rule+"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "fix t''"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "assume \"t' \\<leftrightarrow> t''\""], ["proof (state)\nthis:\n  t' \\<leftrightarrow> t''\n\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "with red1"], ["proof (chain)\npicking this:\n  t' \\<degree> Var v \\<leftrightarrow> u\n  t' \\<leftrightarrow> t''", "have red: \"t'' \\<degree> Var v \\<leftrightarrow> u\""], ["proof (prove)\nusing this:\n  t' \\<degree> Var v \\<leftrightarrow> u\n  t' \\<leftrightarrow> t''\n\ngoal (1 subgoal):\n 1. t'' \\<degree> Var v \\<leftrightarrow> u", "using term_sym term_trans"], ["proof (prove)\nusing this:\n  t' \\<degree> Var v \\<leftrightarrow> u\n  t' \\<leftrightarrow> t''\n  ?s \\<leftrightarrow> ?t \\<Longrightarrow> ?t \\<leftrightarrow> ?s\n  \\<lbrakk>?s \\<leftrightarrow> ?t; ?t \\<leftrightarrow> ?u\\<rbrakk>\n  \\<Longrightarrow> ?s \\<leftrightarrow> ?u\n\ngoal (1 subgoal):\n 1. t'' \\<degree> Var v \\<leftrightarrow> u", "by blast"], ["proof (state)\nthis:\n  t'' \\<degree> Var v \\<leftrightarrow> u\n\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "have \"var_dist (v # vs) t'' = var_dist vs (t'' \\<degree> Var v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist (v # vs) t'' = var_dist vs (t'' \\<degree> Var v)", "by simp"], ["proof (state)\nthis:\n  var_dist (v # vs) t'' = var_dist vs (t'' \\<degree> Var v)\n\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "also"], ["proof (state)\nthis:\n  var_dist (v # vs) t'' = var_dist vs (t'' \\<degree> Var v)\n\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "have \"... \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. var_dist vs (t'' \\<degree> Var v) \\<leftrightarrow> t", "using Cons.IH[OF inner] red[symmetric]"], ["proof (prove)\nusing this:\n  \\<forall>t''.\n     u \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist vs t'' \\<leftrightarrow> t\n  u \\<leftrightarrow> t'' \\<degree> Var v\n\ngoal (1 subgoal):\n 1. var_dist vs (t'' \\<degree> Var v) \\<leftrightarrow> t", "by blast"], ["proof (state)\nthis:\n  var_dist vs (t'' \\<degree> Var v) \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. \\<And>t''.\n       t' \\<leftrightarrow> t'' \\<Longrightarrow>\n       var_dist (v # vs) t'' \\<leftrightarrow> t", "finally"], ["proof (chain)\npicking this:\n  var_dist (v # vs) t'' \\<leftrightarrow> t", "show \"var_dist (v # vs) t'' \\<leftrightarrow> t\""], ["proof (prove)\nusing this:\n  var_dist (v # vs) t'' \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. var_dist (v # vs) t'' \\<leftrightarrow> t", "."], ["proof (state)\nthis:\n  var_dist (v # vs) t'' \\<leftrightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t''.\n     t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist (v # vs) t'' \\<leftrightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>t''.\n     t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist vs t'' \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. var_dist vs t' \\<leftrightarrow> t", "then"], ["proof (chain)\npicking this:\n  \\<forall>t''.\n     t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist vs t'' \\<leftrightarrow> t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t''.\n     t' \\<leftrightarrow> t'' \\<longrightarrow>\n     var_dist vs t'' \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. var_dist vs t' \\<leftrightarrow> t", "by blast"], ["proof (state)\nthis:\n  var_dist vs t' \\<leftrightarrow> t\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale bracket_abstraction *)"], ["", "paragraph \\<open>Bracket abstraction for idiomatic terms\\<close>"], ["", "text \\<open>We consider idiomatic terms with explicitly assigned variables.\\<close>"], ["", "lemma strip_unlift_vars:\n  assumes \"opaque x = []\"\n  shows \"strip_context n (unlift_vars n x) 0 = unlift_vars 0 x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strip_context n (unlift_vars n x) 0 = unlift_vars 0 x", "using assms"], ["proof (prove)\nusing this:\n  opaque x = []\n\ngoal (1 subgoal):\n 1. strip_context n (unlift_vars n x) 0 = unlift_vars 0 x", "by (induction x) (simp_all add: strip_context_liftn[where m=0, simplified])"], ["", "lemma unlift_vars_frees: \"\\<forall>i\\<in>frees (unlift_vars n x). i \\<in> set (opaque x) \\<or> n \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees (unlift_vars n x).\n       i \\<in> set (opaque x) \\<or> n \\<le> i", "by (induction x) (auto simp add: free_liftn)"], ["", "locale itrm_abstraction = special_idiom extra_rule for extra_rule :: \"nat itrm \\<Rightarrow> _\" +\n  fixes itrm_bracket :: \"nat \\<Rightarrow> nat itrm \\<Rightarrow> nat itrm option\"\n  assumes itrm_bracket_ap: \"itrm_bracket i x = Some x' \\<Longrightarrow> x' \\<diamondop> Opaque i \\<simeq>\\<^sup>+ x\"\n  assumes itrm_bracket_opaque:\n    \"itrm_bracket i x = Some x' \\<Longrightarrow> set (opaque x') = set (opaque x) - {i}\"\nbegin"], ["", "definition \"itrm_brackets = foldr_option itrm_bracket\""], ["", "lemma itrm_brackets_Nil[simp]: \"itrm_brackets [] x = Some x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. itrm_brackets [] x = Some x", "unfolding itrm_brackets_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr_option itrm_bracket [] x = Some x", "by simp"], ["", "lemma itrm_brackets_Cons_SomeE:\n  assumes \"itrm_brackets (v#vs) x = Some x'\"\n  obtains y' where \"itrm_brackets vs x = Some y'\" and \"itrm_bracket v y' = Some x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>itrm_brackets vs x = Some y';\n         itrm_bracket v y' = Some x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>itrm_brackets vs x = Some y';\n         itrm_bracket v y' = Some x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding itrm_brackets_def"], ["proof (prove)\nusing this:\n  foldr_option itrm_bracket (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>foldr_option itrm_bracket vs x = Some y';\n         itrm_bracket v y' = Some x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim foldr_option_Cons_SomeE)"], ["", "definition \"opaque_dist = fold (\\<lambda>i y. y \\<diamondop> Opaque i)\""], ["", "lemma opaque_dist_cong: \"x \\<simeq>\\<^sup>+ y \\<Longrightarrow> opaque_dist vs x \\<simeq>\\<^sup>+ opaque_dist vs y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y \\<Longrightarrow>\n    opaque_dist vs x \\<simeq>\\<^sup>+ opaque_dist vs y", "unfolding opaque_dist_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y \\<Longrightarrow>\n    fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs x \\<simeq>\\<^sup>+\n    fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs y", "by (induction vs arbitrary: x y) (simp_all add: ap_congL)"], ["", "lemma itrm_brackets_dist:\n  assumes defined: \"itrm_brackets vs x = Some x'\"\n    shows \"opaque_dist vs x' \\<simeq>\\<^sup>+ x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+ x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+ x", "define x'' where \"x'' = x'\""], ["proof (state)\nthis:\n  x'' = x'\n\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+ x", "have \"x' \\<simeq>\\<^sup>+ x''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<simeq>\\<^sup>+ x''", "unfolding x''_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<simeq>\\<^sup>+ x'", ".."], ["proof (state)\nthis:\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+ x", "with defined"], ["proof (chain)\npicking this:\n  itrm_brackets vs x = Some x'\n  x' \\<simeq>\\<^sup>+ x''", "show \"opaque_dist vs x'' \\<simeq>\\<^sup>+ x\""], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. opaque_dist vs x'' \\<simeq>\\<^sup>+ x", "unfolding opaque_dist_def"], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+ x", "proof (induction vs arbitrary: x' x'')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x' x''.\n       \\<lbrakk>itrm_brackets [] x = Some x';\n        x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i) []\n                          x'' \\<simeq>\\<^sup>+\n                         x\n 2. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "case Nil"], ["proof (state)\nthis:\n  itrm_brackets [] x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (2 subgoals):\n 1. \\<And>x' x''.\n       \\<lbrakk>itrm_brackets [] x = Some x';\n        x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i) []\n                          x'' \\<simeq>\\<^sup>+\n                         x\n 2. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "then"], ["proof (chain)\npicking this:\n  itrm_brackets [] x = Some x'\n  x' \\<simeq>\\<^sup>+ x''", "show ?case"], ["proof (prove)\nusing this:\n  itrm_brackets [] x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) [] x'' \\<simeq>\\<^sup>+ x", "unfolding itrm_brackets_def"], ["proof (prove)\nusing this:\n  foldr_option itrm_bracket [] x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) [] x'' \\<simeq>\\<^sup>+ x", "by (simp add: itrm_sym)"], ["proof (state)\nthis:\n  fold (\\<lambda>i y. y \\<diamondop> Opaque i) [] x'' \\<simeq>\\<^sup>+ x\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "case (Cons v vs)"], ["proof (state)\nthis:\n  \\<lbrakk>itrm_brackets vs x = Some ?x'; ?x' \\<simeq>\\<^sup>+ ?x''\\<rbrakk>\n  \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n                     ?x'' \\<simeq>\\<^sup>+\n                    x\n  itrm_brackets (v # vs) x = Some x'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "from Cons.prems(1)"], ["proof (chain)\npicking this:\n  itrm_brackets (v # vs) x = Some x'", "obtain y'\n        where defined': \"itrm_brackets vs x = Some y'\"\n          and \"itrm_bracket v y' = Some x'\""], ["proof (prove)\nusing this:\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>itrm_brackets vs x = Some y';\n         itrm_bracket v y' = Some x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule itrm_brackets_Cons_SomeE)"], ["proof (state)\nthis:\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "then"], ["proof (chain)\npicking this:\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'", "have \"x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\""], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'\n\ngoal (1 subgoal):\n 1. x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'", "by (elim itrm_bracket_ap)"], ["proof (state)\nthis:\n  x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "then"], ["proof (chain)\npicking this:\n  x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'", "have \"x'' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\""], ["proof (prove)\nusing this:\n  x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\n\ngoal (1 subgoal):\n 1. x'' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'", "using Cons.prems(2)"], ["proof (prove)\nusing this:\n  x' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\n  x' \\<simeq>\\<^sup>+ x''\n\ngoal (1 subgoal):\n 1. x'' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'", "by (blast intro: itrm_sym itrm_trans)"], ["proof (state)\nthis:\n  x'' \\<diamondop> Opaque v \\<simeq>\\<^sup>+ y'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "note this[symmetric]"], ["proof (state)\nthis:\n  y' \\<simeq>\\<^sup>+ x'' \\<diamondop> Opaque v\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "with defined'"], ["proof (chain)\npicking this:\n  itrm_brackets vs x = Some y'\n  y' \\<simeq>\\<^sup>+ x'' \\<diamondop> Opaque v", "have \"fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+ x\""], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some y'\n  y' \\<simeq>\\<^sup>+ x'' \\<diamondop> Opaque v\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n     (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+\n    x", "using Cons.IH"], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some y'\n  y' \\<simeq>\\<^sup>+ x'' \\<diamondop> Opaque v\n  \\<lbrakk>itrm_brackets vs x = Some ?x'; ?x' \\<simeq>\\<^sup>+ ?x''\\<rbrakk>\n  \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n                     ?x'' \\<simeq>\\<^sup>+\n                    x\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n     (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+\n    x", "by blast"], ["proof (state)\nthis:\n  fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n   (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+\n  x\n\ngoal (1 subgoal):\n 1. \\<And>a vs x' x''.\n       \\<lbrakk>\\<And>x' x''.\n                   \\<lbrakk>itrm_brackets vs x = Some x';\n                    x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n                   \\<Longrightarrow> fold\n(\\<lambda>i y. y \\<diamondop> Opaque i) vs x'' \\<simeq>\\<^sup>+\n                                     x;\n        itrm_brackets (a # vs) x = Some x'; x' \\<simeq>\\<^sup>+ x''\\<rbrakk>\n       \\<Longrightarrow> fold (\\<lambda>i y. y \\<diamondop> Opaque i)\n                          (a # vs) x'' \\<simeq>\\<^sup>+\n                         x", "then"], ["proof (chain)\npicking this:\n  fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n   (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+\n  x", "show ?case"], ["proof (prove)\nusing this:\n  fold (\\<lambda>i y. y \\<diamondop> Opaque i) vs\n   (x'' \\<diamondop> Opaque v) \\<simeq>\\<^sup>+\n  x\n\ngoal (1 subgoal):\n 1. fold (\\<lambda>i y. y \\<diamondop> Opaque i) (v # vs)\n     x'' \\<simeq>\\<^sup>+\n    x", "by simp"], ["proof (state)\nthis:\n  fold (\\<lambda>i y. y \\<diamondop> Opaque i) (v # vs) x'' \\<simeq>\\<^sup>+\n  x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opaque_dist vs x'' \\<simeq>\\<^sup>+ x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma itrm_brackets_opaque:\n  assumes \"itrm_brackets vs x = Some x'\"\n    shows \"set (opaque x') = set (opaque x) - set vs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set vs", "using assms"], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set vs", "proof (induction vs arbitrary: x')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x'.\n       itrm_brackets [] x = Some x' \\<Longrightarrow>\n       set (opaque x') = set (opaque x) - set []\n 2. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   itrm_brackets vs x = Some x' \\<Longrightarrow>\n                   set (opaque x') = set (opaque x) - set vs;\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> set (opaque x') = set (opaque x) - set (a # vs)", "case Nil"], ["proof (state)\nthis:\n  itrm_brackets [] x = Some x'\n\ngoal (2 subgoals):\n 1. \\<And>x'.\n       itrm_brackets [] x = Some x' \\<Longrightarrow>\n       set (opaque x') = set (opaque x) - set []\n 2. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   itrm_brackets vs x = Some x' \\<Longrightarrow>\n                   set (opaque x') = set (opaque x) - set vs;\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> set (opaque x') = set (opaque x) - set (a # vs)", "then"], ["proof (chain)\npicking this:\n  itrm_brackets [] x = Some x'", "show ?case"], ["proof (prove)\nusing this:\n  itrm_brackets [] x = Some x'\n\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set []", "unfolding itrm_brackets_def"], ["proof (prove)\nusing this:\n  foldr_option itrm_bracket [] x = Some x'\n\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set []", "by simp"], ["proof (state)\nthis:\n  set (opaque x') = set (opaque x) - set []\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   itrm_brackets vs x = Some x' \\<Longrightarrow>\n                   set (opaque x') = set (opaque x) - set vs;\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> set (opaque x') = set (opaque x) - set (a # vs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   itrm_brackets vs x = Some x' \\<Longrightarrow>\n                   set (opaque x') = set (opaque x) - set vs;\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> set (opaque x') = set (opaque x) - set (a # vs)", "case (Cons v vs)"], ["proof (state)\nthis:\n  itrm_brackets vs x = Some ?x' \\<Longrightarrow>\n  set (opaque ?x') = set (opaque x) - set vs\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   itrm_brackets vs x = Some x' \\<Longrightarrow>\n                   set (opaque x') = set (opaque x) - set vs;\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> set (opaque x') = set (opaque x) - set (a # vs)", "then"], ["proof (chain)\npicking this:\n  itrm_brackets vs x = Some ?x' \\<Longrightarrow>\n  set (opaque ?x') = set (opaque x) - set vs\n  itrm_brackets (v # vs) x = Some x'", "show ?case"], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some ?x' \\<Longrightarrow>\n  set (opaque ?x') = set (opaque x) - set vs\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set (v # vs)", "by (auto elim: itrm_brackets_Cons_SomeE dest!: itrm_bracket_opaque)"], ["proof (state)\nthis:\n  set (opaque x') = set (opaque x) - set (v # vs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma itrm_brackets_all:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> set vs\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"opaque x' = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque x' = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. opaque x' = []", "from defined"], ["proof (chain)\npicking this:\n  itrm_brackets vs x = Some x'", "have \"set (opaque x') = set (opaque x) - set vs\""], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. set (opaque x') = set (opaque x) - set vs", "by (rule itrm_brackets_opaque)"], ["proof (state)\nthis:\n  set (opaque x') = set (opaque x) - set vs\n\ngoal (1 subgoal):\n 1. opaque x' = []", "with all_opaque"], ["proof (chain)\npicking this:\n  set (opaque x) \\<subseteq> set vs\n  set (opaque x') = set (opaque x) - set vs", "have \"set (opaque x') = {}\""], ["proof (prove)\nusing this:\n  set (opaque x) \\<subseteq> set vs\n  set (opaque x') = set (opaque x) - set vs\n\ngoal (1 subgoal):\n 1. set (opaque x') = {}", "by simp"], ["proof (state)\nthis:\n  set (opaque x') = {}\n\ngoal (1 subgoal):\n 1. opaque x' = []", "then"], ["proof (chain)\npicking this:\n  set (opaque x') = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  set (opaque x') = {}\n\ngoal (1 subgoal):\n 1. opaque x' = []", "by simp"], ["proof (state)\nthis:\n  opaque x' = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma itrm_brackets_all_unlift_vars:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> set vs\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"x' \\<simeq>\\<^sup>+ Pure (unlift_vars 0 x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<simeq>\\<^sup>+ Pure (unlift_vars 0 x')", "proof (rule equiv_into_ext_equiv)"], ["proof (state)\ngoal (1 subgoal):\n 1. x' \\<simeq> Pure (unlift_vars 0 x')", "from assms"], ["proof (chain)\npicking this:\n  set (opaque x) \\<subseteq> set vs\n  itrm_brackets vs x = Some x'", "have \"opaque x' = []\""], ["proof (prove)\nusing this:\n  set (opaque x) \\<subseteq> set vs\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. opaque x' = []", "by (rule itrm_brackets_all)"], ["proof (state)\nthis:\n  opaque x' = []\n\ngoal (1 subgoal):\n 1. x' \\<simeq> Pure (unlift_vars 0 x')", "then"], ["proof (chain)\npicking this:\n  opaque x' = []", "show \"x' \\<simeq> Pure (unlift_vars 0 x')\""], ["proof (prove)\nusing this:\n  opaque x' = []\n\ngoal (1 subgoal):\n 1. x' \\<simeq> Pure (unlift_vars 0 x')", "by (rule all_pure_unlift_vars)"], ["proof (state)\nthis:\n  x' \\<simeq> Pure (unlift_vars 0 x')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale itrm_abstraction *)"], ["", "subsubsection \\<open>Lifting with bracket abstraction\\<close>"], ["", "locale lifted_bracket = bracket_abstraction + itrm_abstraction +\n  assumes bracket_compat:\n    \"set (opaque x) \\<subseteq> {0..<n} \\<Longrightarrow> i < n \\<Longrightarrow>\n      term_bracket i (unlift_vars n x) = map_option (unlift_vars n) (itrm_bracket i x)\"\nbegin"], ["", "lemma brackets_unlift_vars_swap:\n  assumes all_opaque: \"set (opaque x) \\<subseteq> {0..<n}\"\n      and vs_bound: \"set vs \\<subseteq> {0..<n}\"\n      and defined: \"itrm_brackets vs x = Some x'\"\n    shows \"term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')", "using vs_bound defined"], ["proof (prove)\nusing this:\n  set vs \\<subseteq> {0..<n}\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')", "proof (induction vs arbitrary: x')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x'.\n       \\<lbrakk>set [] \\<subseteq> {0..<n};\n        itrm_brackets [] x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets [] (unlift_vars n x) =\n                         Some (unlift_vars n x')\n 2. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> {0..<n}\n  itrm_brackets [] x = Some x'\n\ngoal (2 subgoals):\n 1. \\<And>x'.\n       \\<lbrakk>set [] \\<subseteq> {0..<n};\n        itrm_brackets [] x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets [] (unlift_vars n x) =\n                         Some (unlift_vars n x')\n 2. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "then"], ["proof (chain)\npicking this:\n  set [] \\<subseteq> {0..<n}\n  itrm_brackets [] x = Some x'", "show ?case"], ["proof (prove)\nusing this:\n  set [] \\<subseteq> {0..<n}\n  itrm_brackets [] x = Some x'\n\ngoal (1 subgoal):\n 1. term_brackets [] (unlift_vars n x) = Some (unlift_vars n x')", "by simp"], ["proof (state)\nthis:\n  term_brackets [] (unlift_vars n x) = Some (unlift_vars n x')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "case (Cons v vs)"], ["proof (state)\nthis:\n  \\<lbrakk>set vs \\<subseteq> {0..<n};\n   itrm_brackets vs x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                    Some (unlift_vars n ?x')\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>set vs \\<subseteq> {0..<n};\n   itrm_brackets vs x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                    Some (unlift_vars n ?x')\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'", "obtain y'\n    where ivs: \"itrm_brackets vs x = Some y'\"\n      and iv: \"itrm_bracket v y' = Some x'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set vs \\<subseteq> {0..<n};\n   itrm_brackets vs x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                    Some (unlift_vars n ?x')\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. (\\<And>y'.\n        \\<lbrakk>itrm_brackets vs x = Some y';\n         itrm_bracket v y' = Some x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (elim itrm_brackets_Cons_SomeE)"], ["proof (state)\nthis:\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>set vs \\<subseteq> {0..<n};\n   itrm_brackets vs x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                    Some (unlift_vars n ?x')\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'", "have \"term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set vs \\<subseteq> {0..<n};\n   itrm_brackets vs x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                    Some (unlift_vars n ?x')\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'\n  itrm_brackets vs x = Some y'\n  itrm_bracket v y' = Some x'\n\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')", "by auto"], ["proof (state)\nthis:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "moreover"], ["proof (state)\nthis:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "{"], ["proof (state)\nthis:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "have \"Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')", "unfolding iv"], ["proof (prove)\ngoal (1 subgoal):\n 1. Some (unlift_vars n x') = map_option (unlift_vars n) (Some x')", "by simp"], ["proof (state)\nthis:\n  Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "moreover"], ["proof (state)\nthis:\n  Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "have \"set (opaque y') \\<subseteq> {0..<n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (opaque y') \\<subseteq> {0..<n}", "using all_opaque ivs"], ["proof (prove)\nusing this:\n  set (opaque x) \\<subseteq> {0..<n}\n  itrm_brackets vs x = Some y'\n\ngoal (1 subgoal):\n 1. set (opaque y') \\<subseteq> {0..<n}", "by (auto dest: itrm_brackets_opaque)"], ["proof (state)\nthis:\n  set (opaque y') \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "moreover"], ["proof (state)\nthis:\n  set (opaque y') \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "have \"v < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v < n", "using Cons.prems"], ["proof (prove)\nusing this:\n  set (v # vs) \\<subseteq> {0..<n}\n  itrm_brackets (v # vs) x = Some x'\n\ngoal (1 subgoal):\n 1. v < n", "by simp"], ["proof (state)\nthis:\n  v < n\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "ultimately"], ["proof (chain)\npicking this:\n  Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\n  set (opaque y') \\<subseteq> {0..<n}\n  v < n", "have \"term_bracket v (unlift_vars n y') = Some (unlift_vars n x')\""], ["proof (prove)\nusing this:\n  Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\n  set (opaque y') \\<subseteq> {0..<n}\n  v < n\n\ngoal (1 subgoal):\n 1. term_bracket v (unlift_vars n y') = Some (unlift_vars n x')", "using bracket_compat"], ["proof (prove)\nusing this:\n  Some (unlift_vars n x') = map_option (unlift_vars n) (itrm_bracket v y')\n  set (opaque y') \\<subseteq> {0..<n}\n  v < n\n  \\<lbrakk>set (opaque ?x) \\<subseteq> {0..<?n}; ?i < ?n\\<rbrakk>\n  \\<Longrightarrow> term_bracket ?i (unlift_vars ?n ?x) =\n                    map_option (unlift_vars ?n) (itrm_bracket ?i ?x)\n\ngoal (1 subgoal):\n 1. term_bracket v (unlift_vars n y') = Some (unlift_vars n x')", "by auto"], ["proof (state)\nthis:\n  term_bracket v (unlift_vars n y') = Some (unlift_vars n x')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "}"], ["proof (state)\nthis:\n  term_bracket v (unlift_vars n y') = Some (unlift_vars n x')\n\ngoal (1 subgoal):\n 1. \\<And>a vs x'.\n       \\<lbrakk>\\<And>x'.\n                   \\<lbrakk>set vs \\<subseteq> {0..<n};\n                    itrm_brackets vs x = Some x'\\<rbrakk>\n                   \\<Longrightarrow> term_brackets vs (unlift_vars n x) =\n                                     Some (unlift_vars n x');\n        set (a # vs) \\<subseteq> {0..<n};\n        itrm_brackets (a # vs) x = Some x'\\<rbrakk>\n       \\<Longrightarrow> term_brackets (a # vs) (unlift_vars n x) =\n                         Some (unlift_vars n x')", "ultimately"], ["proof (chain)\npicking this:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\n  term_bracket v (unlift_vars n y') = Some (unlift_vars n x')", "show ?case"], ["proof (prove)\nusing this:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n y')\n  term_bracket v (unlift_vars n y') = Some (unlift_vars n x')\n\ngoal (1 subgoal):\n 1. term_brackets (v # vs) (unlift_vars n x) = Some (unlift_vars n x')", "by (rule term_brackets_ConsI)"], ["proof (state)\nthis:\n  term_brackets (v # vs) (unlift_vars n x) = Some (unlift_vars n x')\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem bracket_lifting:\n  assumes all_vars: \"set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\"\n      and perm_vars: \"perm_vars n vs\"\n      and defined: \"itrm_brackets vs x = Some x'\" \"itrm_brackets vs y = Some y'\"\n      and base_eq: \"(Abs^^n) (unlift_vars n x) \\<leftrightarrow> (Abs^^n) (unlift_vars n y)\"\n    shows \"x \\<simeq>\\<^sup>+ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "from perm_vars"], ["proof (chain)\npicking this:\n  perm_vars n vs", "have set_vs: \"set vs = {0..<n}\""], ["proof (prove)\nusing this:\n  perm_vars n vs\n\ngoal (1 subgoal):\n 1. set vs = {0..<n}", "unfolding perm_vars_def"], ["proof (prove)\nusing this:\n  distinct vs \\<and> set vs = {0..<n}\n\ngoal (1 subgoal):\n 1. set vs = {0..<n}", "by simp"], ["proof (state)\nthis:\n  set vs = {0..<n}\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have x_swap: \"term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')", "using all_vars set_vs defined(1)"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n  set vs = {0..<n}\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')", "by (auto intro: brackets_unlift_vars_swap)"], ["proof (state)\nthis:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have y_swap: \"term_brackets vs (unlift_vars n y) = Some (unlift_vars n y')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n y) = Some (unlift_vars n y')", "using all_vars set_vs defined(2)"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n  set vs = {0..<n}\n  itrm_brackets vs y = Some y'\n\ngoal (1 subgoal):\n 1. term_brackets vs (unlift_vars n y) = Some (unlift_vars n y')", "by (auto intro: brackets_unlift_vars_swap)"], ["proof (state)\nthis:\n  term_brackets vs (unlift_vars n y) = Some (unlift_vars n y')\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "from all_vars"], ["proof (chain)\npicking this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}", "have \"set (opaque x) \\<subseteq> set vs\""], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (opaque x) \\<subseteq> set vs", "unfolding set_vs"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (opaque x) \\<subseteq> {0..<n}", "by simp"], ["proof (state)\nthis:\n  set (opaque x) \\<subseteq> set vs\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "then"], ["proof (chain)\npicking this:\n  set (opaque x) \\<subseteq> set vs", "have complete_x: \"opaque x' = []\""], ["proof (prove)\nusing this:\n  set (opaque x) \\<subseteq> set vs\n\ngoal (1 subgoal):\n 1. opaque x' = []", "using defined(1) itrm_brackets_all"], ["proof (prove)\nusing this:\n  set (opaque x) \\<subseteq> set vs\n  itrm_brackets vs x = Some x'\n  \\<lbrakk>set (opaque ?x) \\<subseteq> set ?vs;\n   itrm_brackets ?vs ?x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> opaque ?x' = []\n\ngoal (1 subgoal):\n 1. opaque x' = []", "by blast"], ["proof (state)\nthis:\n  opaque x' = []\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "then"], ["proof (chain)\npicking this:\n  opaque x' = []", "have ux_frees: \"\\<forall>i\\<in>frees (unlift_vars n x'). n \\<le> i\""], ["proof (prove)\nusing this:\n  opaque x' = []\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees (unlift_vars n x'). n \\<le> i", "using unlift_vars_frees"], ["proof (prove)\nusing this:\n  opaque x' = []\n  \\<forall>i\\<in>frees (unlift_vars ?n ?x).\n     i \\<in> set (opaque ?x) \\<or> ?n \\<le> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees (unlift_vars n x'). n \\<le> i", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees (unlift_vars n x'). n \\<le> i\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "from all_vars"], ["proof (chain)\npicking this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}", "have \"set (opaque y) \\<subseteq> set vs\""], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (opaque y) \\<subseteq> set vs", "unfolding set_vs"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n\ngoal (1 subgoal):\n 1. set (opaque y) \\<subseteq> {0..<n}", "by simp"], ["proof (state)\nthis:\n  set (opaque y) \\<subseteq> set vs\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "then"], ["proof (chain)\npicking this:\n  set (opaque y) \\<subseteq> set vs", "have complete_y: \"opaque y' = []\""], ["proof (prove)\nusing this:\n  set (opaque y) \\<subseteq> set vs\n\ngoal (1 subgoal):\n 1. opaque y' = []", "using defined(2) itrm_brackets_all"], ["proof (prove)\nusing this:\n  set (opaque y) \\<subseteq> set vs\n  itrm_brackets vs y = Some y'\n  \\<lbrakk>set (opaque ?x) \\<subseteq> set ?vs;\n   itrm_brackets ?vs ?x = Some ?x'\\<rbrakk>\n  \\<Longrightarrow> opaque ?x' = []\n\ngoal (1 subgoal):\n 1. opaque y' = []", "by blast"], ["proof (state)\nthis:\n  opaque y' = []\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "then"], ["proof (chain)\npicking this:\n  opaque y' = []", "have uy_frees: \"\\<forall>i\\<in>frees (unlift_vars n y'). n \\<le> i\""], ["proof (prove)\nusing this:\n  opaque y' = []\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees (unlift_vars n y'). n \\<le> i", "using unlift_vars_frees"], ["proof (prove)\nusing this:\n  opaque y' = []\n  \\<forall>i\\<in>frees (unlift_vars ?n ?x).\n     i \\<in> set (opaque ?x) \\<or> ?n \\<le> i\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>frees (unlift_vars n y'). n \\<le> i", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>i\\<in>frees (unlift_vars n y'). n \\<le> i\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have \"x \\<simeq>\\<^sup>+ opaque_dist vs x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ opaque_dist vs x'", "using defined(1)"], ["proof (prove)\nusing this:\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ opaque_dist vs x'", "by (rule itrm_brackets_dist[symmetric])"], ["proof (state)\nthis:\n  x \\<simeq>\\<^sup>+ opaque_dist vs x'\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "also"], ["proof (state)\nthis:\n  x \\<simeq>\\<^sup>+ opaque_dist vs x'\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have \"... \\<simeq>\\<^sup>+ opaque_dist vs (Pure (unlift_vars 0 x'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+\n    opaque_dist vs (Pure (unlift_vars 0 x'))", "using all_vars set_vs defined(1)"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n  set vs = {0..<n}\n  itrm_brackets vs x = Some x'\n\ngoal (1 subgoal):\n 1. opaque_dist vs x' \\<simeq>\\<^sup>+\n    opaque_dist vs (Pure (unlift_vars 0 x'))", "by (auto intro: opaque_dist_cong itrm_brackets_all_unlift_vars)"], ["proof (state)\nthis:\n  opaque_dist vs x' \\<simeq>\\<^sup>+\n  opaque_dist vs (Pure (unlift_vars 0 x'))\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "also"], ["proof (state)\nthis:\n  opaque_dist vs x' \\<simeq>\\<^sup>+\n  opaque_dist vs (Pure (unlift_vars 0 x'))\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have \"... \\<simeq>\\<^sup>+ opaque_dist vs (Pure (unlift_vars 0 y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque_dist vs (Pure (unlift_vars 0 x')) \\<simeq>\\<^sup>+\n    opaque_dist vs (Pure (unlift_vars 0 y'))", "proof (rule opaque_dist_cong, rule pure_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "have \"(Abs^^n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow> (Abs^^n) (unlift_vars n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n    (Abs ^^ n) (unlift_vars n x)", "using x_swap term_brackets_dist"], ["proof (prove)\nusing this:\n  term_brackets vs (unlift_vars n x) = Some (unlift_vars n x')\n  term_brackets ?vs ?t = Some ?t' \\<Longrightarrow>\n  var_dist ?vs ?t' \\<leftrightarrow> ?t\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n    (Abs ^^ n) (unlift_vars n x)", "by auto"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n  (Abs ^^ n) (unlift_vars n x)\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n  (Abs ^^ n) (unlift_vars n x)\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "have \"... \\<leftrightarrow> (Abs^^n) (unlift_vars n y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (unlift_vars n x) \\<leftrightarrow>\n    (Abs ^^ n) (unlift_vars n y)", "using base_eq"], ["proof (prove)\nusing this:\n  (Abs ^^ n) (unlift_vars n x) \\<leftrightarrow>\n  (Abs ^^ n) (unlift_vars n y)\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (unlift_vars n x) \\<leftrightarrow>\n    (Abs ^^ n) (unlift_vars n y)", "."], ["proof (state)\nthis:\n  (Abs ^^ n) (unlift_vars n x) \\<leftrightarrow>\n  (Abs ^^ n) (unlift_vars n y)\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "also"], ["proof (state)\nthis:\n  (Abs ^^ n) (unlift_vars n x) \\<leftrightarrow>\n  (Abs ^^ n) (unlift_vars n y)\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "have \"... \\<leftrightarrow> (Abs^^n) (var_dist vs (unlift_vars n y'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Abs ^^ n) (unlift_vars n y) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (unlift_vars n y'))", "using y_swap term_brackets_dist[THEN term_sym]"], ["proof (prove)\nusing this:\n  term_brackets vs (unlift_vars n y) = Some (unlift_vars n y')\n  term_brackets ?vs1 ?t = Some ?t'1 \\<Longrightarrow>\n  ?t \\<leftrightarrow> var_dist ?vs1 ?t'1\n\ngoal (1 subgoal):\n 1. (Abs ^^ n) (unlift_vars n y) \\<leftrightarrow>\n    (Abs ^^ n) (var_dist vs (unlift_vars n y'))", "by auto"], ["proof (state)\nthis:\n  (Abs ^^ n) (unlift_vars n y) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (unlift_vars n y'))\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "finally"], ["proof (chain)\npicking this:\n  (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (unlift_vars n y'))", "have \"strip_context n (unlift_vars n x') 0 \\<leftrightarrow> strip_context n (unlift_vars n y') 0\""], ["proof (prove)\nusing this:\n  (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (unlift_vars n y'))\n\ngoal (1 subgoal):\n 1. strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n    strip_context n (unlift_vars n y') 0", "using perm_vars ux_frees uy_frees"], ["proof (prove)\nusing this:\n  (Abs ^^ n) (var_dist vs (unlift_vars n x')) \\<leftrightarrow>\n  (Abs ^^ n) (var_dist vs (unlift_vars n y'))\n  perm_vars n vs\n  \\<forall>i\\<in>frees (unlift_vars n x'). n \\<le> i\n  \\<forall>i\\<in>frees (unlift_vars n y'). n \\<le> i\n\ngoal (1 subgoal):\n 1. strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n    strip_context n (unlift_vars n y') 0", "by (intro dist_perm_eta_equiv)"], ["proof (state)\nthis:\n  strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n  strip_context n (unlift_vars n y') 0\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "then"], ["proof (chain)\npicking this:\n  strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n  strip_context n (unlift_vars n y') 0", "show \"unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'\""], ["proof (prove)\nusing this:\n  strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n  strip_context n (unlift_vars n y') 0\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "using strip_unlift_vars complete_x complete_y"], ["proof (prove)\nusing this:\n  strip_context n (unlift_vars n x') 0 \\<leftrightarrow>\n  strip_context n (unlift_vars n y') 0\n  opaque ?x = [] \\<Longrightarrow>\n  strip_context ?n (unlift_vars ?n ?x) 0 = unlift_vars 0 ?x\n  opaque x' = []\n  opaque y' = []\n\ngoal (1 subgoal):\n 1. unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'", "by simp"], ["proof (state)\nthis:\n  unlift_vars 0 x' \\<leftrightarrow> unlift_vars 0 y'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opaque_dist vs (Pure (unlift_vars 0 x')) \\<simeq>\\<^sup>+\n  opaque_dist vs (Pure (unlift_vars 0 y'))\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "also"], ["proof (state)\nthis:\n  opaque_dist vs (Pure (unlift_vars 0 x')) \\<simeq>\\<^sup>+\n  opaque_dist vs (Pure (unlift_vars 0 y'))\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have \"... \\<simeq>\\<^sup>+ opaque_dist vs y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque_dist vs (Pure (unlift_vars 0 y')) \\<simeq>\\<^sup>+\n    opaque_dist vs y'", "proof (rule opaque_dist_cong)"], ["proof (state)\ngoal (1 subgoal):\n 1. Pure (unlift_vars 0 y') \\<simeq>\\<^sup>+ y'", "show \"Pure (unlift_vars 0 y') \\<simeq>\\<^sup>+ y'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Pure (unlift_vars 0 y') \\<simeq>\\<^sup>+ y'", "using all_vars set_vs defined(2) itrm_brackets_all_unlift_vars[THEN itrm_sym]"], ["proof (prove)\nusing this:\n  set (opaque x) \\<union> set (opaque y) \\<subseteq> {0..<n}\n  set vs = {0..<n}\n  itrm_brackets vs y = Some y'\n  \\<lbrakk>set (opaque ?x1) \\<subseteq> set ?vs1;\n   itrm_brackets ?vs1 ?x1 = Some ?x\\<rbrakk>\n  \\<Longrightarrow> Pure (unlift_vars 0 ?x) \\<simeq>\\<^sup>+ ?x\n\ngoal (1 subgoal):\n 1. Pure (unlift_vars 0 y') \\<simeq>\\<^sup>+ y'", "by blast"], ["proof (state)\nthis:\n  Pure (unlift_vars 0 y') \\<simeq>\\<^sup>+ y'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  opaque_dist vs (Pure (unlift_vars 0 y')) \\<simeq>\\<^sup>+\n  opaque_dist vs y'\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "also"], ["proof (state)\nthis:\n  opaque_dist vs (Pure (unlift_vars 0 y')) \\<simeq>\\<^sup>+\n  opaque_dist vs y'\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "have \"... \\<simeq>\\<^sup>+ y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. opaque_dist vs y' \\<simeq>\\<^sup>+ y", "using defined(2)"], ["proof (prove)\nusing this:\n  itrm_brackets vs y = Some y'\n\ngoal (1 subgoal):\n 1. opaque_dist vs y' \\<simeq>\\<^sup>+ y", "by (rule itrm_brackets_dist)"], ["proof (state)\nthis:\n  opaque_dist vs y' \\<simeq>\\<^sup>+ y\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "finally"], ["proof (chain)\npicking this:\n  x \\<simeq>\\<^sup>+ y", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<simeq>\\<^sup>+ y\n\ngoal (1 subgoal):\n 1. x \\<simeq>\\<^sup>+ y", "."], ["proof (state)\nthis:\n  x \\<simeq>\\<^sup>+ y\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* locale lifted_bracket *)"], ["", "end"]]}