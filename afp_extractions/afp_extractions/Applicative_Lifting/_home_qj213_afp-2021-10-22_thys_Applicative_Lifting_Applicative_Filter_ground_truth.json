{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Applicative_Filter.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma eq_on_UNIV: \"eq_on UNIV = (=)\""], "translations": [["", "lemma eq_on_UNIV: \"eq_on UNIV = (=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_on UNIV = (=)", "by auto"], ["", "declare filtermap_parametric[transfer_rule]"], ["", "parametric_constant pure_filter_parametric[transfer_rule]: pure_filter_def"], ["", "parametric_constant ap_filter_parametric [transfer_rule]: ap_filter_def"], ["", "applicative filter (C)\n  \\<comment> \\<open>K is available for not-@{term bot} filters and W isholds not available\\<close>\nfor \n  pure: \"pure_filter\"\n  ap: \"ap_filter\"\n  rel: \"rel_filter\""], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>f x. ap_filter (pure_filter f) (pure_filter x) = pure_filter (f x)\n 2. \\<And>g f x.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) g) f)\n        x =\n       ap_filter g (ap_filter f x)\n 3. \\<And>f x y.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x)\n        y =\n       ap_filter (ap_filter f y) x\n 4. \\<And>x. ap_filter (pure_filter (\\<lambda>x. x)) x = x\n 5. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 6. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "proof -"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. ap_filter (pure_filter f) (pure_filter x) = pure_filter (f x)\n 2. \\<And>g f x.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) g) f)\n        x =\n       ap_filter g (ap_filter f x)\n 3. \\<And>f x y.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x)\n        y =\n       ap_filter (ap_filter f y) x\n 4. \\<And>x. ap_filter (pure_filter (\\<lambda>x. x)) x = x\n 5. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 6. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"ap_filter (pure_filter f) (pure_filter x) = pure_filter (f x)\" for f :: \"'a \\<Rightarrow> 'b\" and x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_filter (pure_filter f) (pure_filter x) = pure_filter (f x)", "by(simp add: ap_filter_def pure_filter_def principal_prod_principal)"], ["proof (state)\nthis:\n  ap_filter (pure_filter ?f) (pure_filter ?x) = pure_filter (?f ?x)\n\ngoal (5 subgoals):\n 1. \\<And>g f x.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) g) f)\n        x =\n       ap_filter g (ap_filter f x)\n 2. \\<And>f x y.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x)\n        y =\n       ap_filter (ap_filter f y) x\n 3. \\<And>x. ap_filter (pure_filter (\\<lambda>x. x)) x = x\n 4. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 5. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"ap_filter (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) g) f) x =\n    ap_filter g (ap_filter f x)\" for f :: \"('a \\<Rightarrow> 'b) filter\" and g :: \"('b \\<Rightarrow> 'c) filter\" and x"], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_filter\n     (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) g) f) x =\n    ap_filter g (ap_filter f x)", "by(simp add: ap_filter_def pure_filter_def filtermap_filtermap prod_filtermap1 prod_filtermap2 apfst_def case_prod_map_prod prod_filter_assoc prod_filter_principal_singleton split_beta)"], ["proof (state)\nthis:\n  ap_filter\n   (ap_filter (ap_filter (pure_filter (\\<lambda>g f x. g (f x))) ?g) ?f)\n   ?x =\n  ap_filter ?g (ap_filter ?f ?x)\n\ngoal (4 subgoals):\n 1. \\<And>f x y.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x)\n        y =\n       ap_filter (ap_filter f y) x\n 2. \\<And>x. ap_filter (pure_filter (\\<lambda>x. x)) x = x\n 3. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 4. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"ap_filter (pure_filter (\\<lambda>x. x)) x = x\" for x :: \"'a filter\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_filter (pure_filter (\\<lambda>x. x)) x = x", "by(simp add: ap_filter_def pure_filter_def prod_filter_principal_singleton filtermap_filtermap)"], ["proof (state)\nthis:\n  ap_filter (pure_filter (\\<lambda>x. x)) ?x = ?x\n\ngoal (3 subgoals):\n 1. \\<And>f x y.\n       ap_filter\n        (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x)\n        y =\n       ap_filter (ap_filter f y) x\n 2. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 3. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"ap_filter (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x) y =\n    ap_filter (ap_filter f y) x\" for f :: \"('b \\<Rightarrow> 'a \\<Rightarrow> 'c) filter\" and x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_filter\n     (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) f) x) y =\n    ap_filter (ap_filter f y) x", "apply(simp add: ap_filter_def pure_filter_def filtermap_filtermap prod_filter_principal_singleton2 prod_filter_principal_singleton prod_filtermap1 prod_filtermap2 prod_filter_assoc split_beta)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. fst x (snd (snd x)) (fst (snd x)))\n     (f \\<times>\\<^sub>F x \\<times>\\<^sub>F y) =\n    filtermap (\\<lambda>x. fst x (fst (snd x)) (snd (snd x)))\n     (f \\<times>\\<^sub>F y \\<times>\\<^sub>F x)", "apply(subst (2) prod_filter_commute)"], ["proof (prove)\ngoal (1 subgoal):\n 1. filtermap (\\<lambda>x. fst x (snd (snd x)) (fst (snd x)))\n     (f \\<times>\\<^sub>F filtermap prod.swap (y \\<times>\\<^sub>F x)) =\n    filtermap (\\<lambda>x. fst x (fst (snd x)) (snd (snd x)))\n     (f \\<times>\\<^sub>F y \\<times>\\<^sub>F x)", "apply(simp add: filtermap_filtermap prod_filtermap1 prod_filtermap2)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ap_filter\n   (ap_filter (ap_filter (pure_filter (\\<lambda>f x y. f y x)) ?f) ?x) ?y =\n  ap_filter (ap_filter ?f ?y) ?x\n\ngoal (2 subgoals):\n 1. \\<And>R. rel_fun R (rel_filter R) pure_filter pure_filter\n 2. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"rel_fun R (rel_filter R) pure_filter pure_filter\" for R :: \"'a \\<Rightarrow> 'b \\<Rightarrow> bool\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_fun R (rel_filter R) pure_filter pure_filter", "by(rule pure_filter_parametric)"], ["proof (state)\nthis:\n  rel_fun ?R (rel_filter ?R) pure_filter pure_filter\n\ngoal (1 subgoal):\n 1. \\<And>R f g x.\n       rel_filter (rel_fun (eq_on UNIV) R) f g \\<Longrightarrow>\n       rel_filter R (ap_filter f x) (ap_filter g x)", "show \"rel_filter R (ap_filter f x) (ap_filter g x)\" if \"rel_filter (rel_fun (eq_on UNIV) R) f g\" \n    for R and f :: \"('a \\<Rightarrow> 'b) filter\" and g :: \"('a \\<Rightarrow> 'c) filter\" and x"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_filter R (ap_filter f x) (ap_filter g x)", "supply that[unfolded eq_on_UNIV, transfer_rule]"], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_filter R (ap_filter f x) (ap_filter g x)", "by transfer_prover"], ["proof (state)\nthis:\n  rel_filter (rel_fun (eq_on UNIV) ?R) ?f ?g \\<Longrightarrow>\n  rel_filter ?R (ap_filter ?f ?x) (ap_filter ?g ?x)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}