{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Abstract_AF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma af_identity: \"af_pure id \\<diamondop> x = x\"", "lemma af_homomorphism: \"af_pure f \\<diamondop> af_pure x = af_pure (f x)\"", "lemma af_composition: \"af_pure comp \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> (f \\<diamondop> x)\"", "lemma af_interchange: \"f \\<diamondop> af_pure x = af_pure (\\<lambda>g. g x) \\<diamondop> f\""], "translations": [["", "lemma af_identity: \"af_pure id \\<diamondop> x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure id \\<diamondop> x = x", "by transfer simp"], ["", "lemma af_homomorphism: \"af_pure f \\<diamondop> af_pure x = af_pure (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure f \\<diamondop> pure x = pure (f x)", "by(fact af_ap.abs_eq)"], ["", "lemma af_composition: \"af_pure comp \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> (f \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<circ>) \\<diamondop> g \\<diamondop> f \\<diamondop> x =\n    g \\<diamondop> (f \\<diamondop> x)", "by transfer simp"], ["", "lemma af_interchange: \"f \\<diamondop> af_pure x = af_pure (\\<lambda>g. g x) \\<diamondop> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<diamondop> pure x = pure (\\<lambda>g. g x) \\<diamondop> f", "by transfer simp"], ["", "end"], ["", "lifting_forget af.lifting"], ["", "hide_const Abs_af Rep_af"], ["", "hide_fact af_ap_def"], ["", "applicative af\nfor\n  pure: af_pure\n  ap: af_ap"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x. Applicative.ap (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap (pure (\\<lambda>g f x. g (f x))) g)\n          f)\n        x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>x. Applicative.ap (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x.\n       Applicative.ap f (pure x) = Applicative.ap (pure (\\<lambda>f. f x)) f", "using af_homomorphism af_composition af_identity af_interchange"], ["proof (prove)\nusing this:\n  Applicative.ap (pure ?f) (pure ?x) = pure (?f ?x)\n  Applicative.ap (Applicative.ap (Applicative.ap (pure (\\<circ>)) ?g) ?f)\n   ?x =\n  Applicative.ap ?g (Applicative.ap ?f ?x)\n  Applicative.ap (pure id) ?x = ?x\n  Applicative.ap ?f (pure ?x) = Applicative.ap (pure (\\<lambda>g. g ?x)) ?f\n\ngoal (4 subgoals):\n 1. \\<And>f x. Applicative.ap (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap (pure (\\<lambda>g f x. g (f x))) g)\n          f)\n        x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>x. Applicative.ap (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x.\n       Applicative.ap f (pure x) = Applicative.ap (pure (\\<lambda>f. f x)) f", "unfolding id_def comp_def[abs_def]"], ["proof (prove)\nusing this:\n  Applicative.ap (pure ?f) (pure ?x) = pure (?f ?x)\n  Applicative.ap\n   (Applicative.ap (Applicative.ap (pure (\\<lambda>f g x. f (g x))) ?g) ?f)\n   ?x =\n  Applicative.ap ?g (Applicative.ap ?f ?x)\n  Applicative.ap (pure (\\<lambda>x. x)) ?x = ?x\n  Applicative.ap ?f (pure ?x) = Applicative.ap (pure (\\<lambda>g. g ?x)) ?f\n\ngoal (4 subgoals):\n 1. \\<And>f x. Applicative.ap (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap (pure (\\<lambda>g f x. g (f x))) g)\n          f)\n        x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>x. Applicative.ap (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x.\n       Applicative.ap f (pure x) = Applicative.ap (pure (\\<lambda>f. f x)) f", "."], ["", "end"]]}