{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Applicative_Sum.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma ap_sum_id: \"ap_sum c (Inl id) x = x\"", "lemma ap_sum_ichng: \"ap_sum c f (Inl x) = ap_sum c (Inl (\\<lambda>f. f x)) f\"", "lemma (in semigroup) ap_sum_comp:\n  \"ap_sum f (ap_sum f (ap_sum f (Inl (o)) h) g) x = ap_sum f h (ap_sum f g x)\"", "lemma semigroup_const: \"semigroup (\\<lambda>x y. x)\""], "translations": [["", "lemma ap_sum_id: \"ap_sum c (Inl id) x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_sum c (pure id) x = x", "by (cases x) simp_all"], ["", "lemma ap_sum_ichng: \"ap_sum c f (Inl x) = ap_sum c (Inl (\\<lambda>f. f x)) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_sum c f (pure x) = ap_sum c (pure (\\<lambda>f. f x)) f", "by (cases f) simp_all"], ["", "lemma (in semigroup) ap_sum_comp:\n  \"ap_sum f (ap_sum f (ap_sum f (Inl (o)) h) g) x = ap_sum f h (ap_sum f g x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ap_sum (\\<^bold>*)\n     (ap_sum (\\<^bold>*) (ap_sum (\\<^bold>*) (pure (\\<circ>)) h) g) x =\n    ap_sum (\\<^bold>*) h (ap_sum (\\<^bold>*) g x)", "by(cases h g x rule: sum.exhaust[case_product sum.exhaust, case_product sum.exhaust])\n  (simp_all add: local.assoc)"], ["", "lemma semigroup_const: \"semigroup (\\<lambda>x y. x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup (\\<lambda>x y. x)", "by unfold_locales simp"], ["", "locale either_af =\n  fixes B :: \"'b \\<Rightarrow> 'b \\<Rightarrow> bool\"\n  assumes B_refl: \"reflp B\"\nbegin"], ["", "applicative either (W)\nfor\n  pure: Inl\n  ap: ap_either\n  rel: \"\\<lambda>A. rel_sum A B\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>f x. Applicative.ap (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap (pure (\\<lambda>g f x. g (f x))) g)\n          f)\n        x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>x. Applicative.ap (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x.\n       Applicative.ap (Applicative.ap (pure (\\<lambda>f x. f x x)) f) x =\n       Applicative.ap (Applicative.ap f x) x\n 5. \\<And>f x.\n       Applicative.ap f (pure x) = Applicative.ap (pure (\\<lambda>f. f x)) f\n 6. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 7. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (Applicative.ap f x) (Applicative.ap g x)", "proof -"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f x. Applicative.ap (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       Applicative.ap\n        (Applicative.ap (Applicative.ap (pure (\\<lambda>g f x. g (f x))) g)\n          f)\n        x =\n       Applicative.ap g (Applicative.ap f x)\n 3. \\<And>x. Applicative.ap (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x.\n       Applicative.ap (Applicative.ap (pure (\\<lambda>f x. f x x)) f) x =\n       Applicative.ap (Applicative.ap f x) x\n 5. \\<And>f x.\n       Applicative.ap f (pure x) = Applicative.ap (pure (\\<lambda>f. f x)) f\n 6. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 7. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (Applicative.ap f x) (Applicative.ap g x)", "include applicative_syntax"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x.\n       pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x =\n       f \\<diamondop> x \\<diamondop> x\n 5. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 6. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 7. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "{"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x.\n       pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x =\n       f \\<diamondop> x \\<diamondop> x\n 5. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 6. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 7. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "fix f :: \"('c \\<Rightarrow> 'c \\<Rightarrow> 'd) + 'a\" and x"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x.\n       pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x =\n       f \\<diamondop> x \\<diamondop> x\n 5. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 6. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 7. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "show \"pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x = f \\<diamondop> x \\<diamondop> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x =\n    f \\<diamondop> x \\<diamondop> x", "by (cases f x rule: sum.exhaust[case_product sum.exhaust]) simp_all"], ["proof (state)\nthis:\n  pure (\\<lambda>f x. f x x) \\<diamondop> f \\<diamondop> x =\n  f \\<diamondop> x \\<diamondop> x\n\ngoal (6 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 5. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 6. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 5. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 6. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "interpret semigroup \"\\<lambda>x y. x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. semigroup (\\<lambda>x y. x)", "by(rule semigroup_const)"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 5. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 6. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "fix g :: \"('d \\<Rightarrow> 'e) + 'a\" and f :: \"('c \\<Rightarrow> 'd) + 'a\" and x"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>g f x.\n       pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n       f \\<diamondop>\n       x =\n       g \\<diamondop> (f \\<diamondop> x)\n 3. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 4. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 5. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 6. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "show \"pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop> f \\<diamondop> x = g \\<diamondop> (f \\<diamondop> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop>\n    f \\<diamondop>\n    x =\n    g \\<diamondop> (f \\<diamondop> x)", "by(rule ap_sum_comp[simplified comp_def[abs_def]])"], ["proof (state)\nthis:\n  pure (\\<lambda>g f x. g (f x)) \\<diamondop> g \\<diamondop> f \\<diamondop>\n  x =\n  g \\<diamondop> (f \\<diamondop> x)\n\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 5. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 5. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "fix R and f :: \"('c \\<Rightarrow> 'd) + 'b\" and g :: \"('c \\<Rightarrow> 'e) + 'b\" and x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 5. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "assume \"rel_sum (rel_fun (eq_on UNIV) R) B f g\""], ["proof (state)\nthis:\n  rel_sum (rel_fun (eq_on UNIV) R) B f g\n\ngoal (5 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure\n 5. \\<And>R f g x.\n       rel_sum (rel_fun (eq_on UNIV) R) B f g \\<Longrightarrow>\n       rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "then"], ["proof (chain)\npicking this:\n  rel_sum (rel_fun (eq_on UNIV) R) B f g", "show \"rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)\""], ["proof (prove)\nusing this:\n  rel_sum (rel_fun (eq_on UNIV) R) B f g\n\ngoal (1 subgoal):\n 1. rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)", "by (cases f g x rule: sum.exhaust[case_product sum.exhaust, case_product sum.exhaust])\n        (auto intro: B_refl[THEN reflpD] elim: rel_funE)"], ["proof (state)\nthis:\n  rel_sum R B (f \\<diamondop> x) (g \\<diamondop> x)\n\ngoal (4 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure", "}"], ["proof (state)\nthis:\n  rel_sum (rel_fun (eq_on UNIV) ?R2) B ?f2 ?g2 \\<Longrightarrow>\n  rel_sum ?R2 B (?f2 \\<diamondop> ?x2) (?g2 \\<diamondop> ?x2)\n\ngoal (4 subgoals):\n 1. \\<And>f x. pure f \\<diamondop> pure x = pure (f x)\n 2. \\<And>x. pure (\\<lambda>x. x) \\<diamondop> x = x\n 3. \\<And>f x. f \\<diamondop> pure x = pure (\\<lambda>f. f x) \\<diamondop> f\n 4. \\<And>R. rel_fun R (rel_sum R B) pure pure", "qed (auto intro: ap_sum_id[simplified id_def] ap_sum_ichng)"], ["", "end"], ["", "(* locale *)"], ["", "interpretation either_af \"(=)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. either_af (=)", "by unfold_locales simp"], ["", "applicative semigroup_sum\nfor\n  pure: Inl\n  ap: ap_plus"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>f x. ap_plus (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       ap_plus (ap_plus (ap_plus (pure (\\<lambda>g f x. g (f x))) g) f) x =\n       ap_plus g (ap_plus f x)\n 3. \\<And>x. ap_plus (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x. ap_plus f (pure x) = ap_plus (pure (\\<lambda>f. f x)) f", "using\n  ap_sum_id[simplified id_def]\n  ap_sum_ichng\n  add.ap_sum_comp[simplified comp_def[abs_def]]"], ["proof (prove)\nusing this:\n  ap_sum ?c (pure (\\<lambda>x. x)) ?x = ?x\n  ap_sum ?c ?f (pure ?x) = ap_sum ?c (pure (\\<lambda>f. f ?x)) ?f\n  ap_plus (ap_plus (ap_plus (pure (\\<lambda>f g x. f (g x))) ?h) ?g) ?x =\n  ap_plus ?h (ap_plus ?g ?x)\n\ngoal (4 subgoals):\n 1. \\<And>f x. ap_plus (pure f) (pure x) = pure (f x)\n 2. \\<And>g f x.\n       ap_plus (ap_plus (ap_plus (pure (\\<lambda>g f x. g (f x))) g) f) x =\n       ap_plus g (ap_plus f x)\n 3. \\<And>x. ap_plus (pure (\\<lambda>x. x)) x = x\n 4. \\<And>f x. ap_plus f (pure x) = ap_plus (pure (\\<lambda>f. f x)) f", "by auto"], ["", "no_adhoc_overloading Applicative.pure pure_sum"], ["", "end"]]}