{"file_name": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting/Beta_Eta.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Applicative_Lifting", "problem_names": ["lemma liftn_lift_swap: \"liftn n (lift t k) k = lift (liftn n t k) k\"", "lemma subst_liftn:\n  \"i \\<le> n + k \\<and> k \\<le> i \\<Longrightarrow> (liftn (Suc n) s k)[t/i] = liftn n s k\"", "lemma subst_lift2[simp]: \"(lift (lift t 0) 0)[x/Suc 0] = lift t 0\"", "lemma free_liftn:\n  \"free (liftn n t k) i = (i < k \\<and> free t i \\<or> k + n \\<le> i \\<and> free t (i - n))\"", "lemma beta_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\"", "lemma eta_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\"", "lemma beta_reds_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\"", "lemma eta_reds_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\"", "lemma beta_eta_appL[intro]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s' \\<Longrightarrow> s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s' \\<degree> t\"", "lemma beta_eta_appR[intro]: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow> s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s \\<degree> t'\"", "lemma beta_eta_abs[intro]: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow> Abs t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* Abs t'\"", "lemma beta_eta_lift: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift t k\"", "lemma confluent_beta_eta_reds: \"Joinable.confluent {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}\"", "lemma term_equivI:\n  assumes \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\" and \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\"\n  shows \"s \\<leftrightarrow> t\"", "lemma term_equivE:\n  assumes \"s \\<leftrightarrow> t\"\n  obtains u where \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\" and \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\"", "lemma reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\"", "lemma beta_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow> s \\<leftrightarrow> t\"", "lemma eta_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow> s \\<leftrightarrow> t\"", "lemma beta_reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\"", "lemma eta_reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\"", "lemma term_refl[iff]: \"t \\<leftrightarrow> t\"", "lemma term_sym[sym]: \"(s \\<leftrightarrow> t) \\<Longrightarrow> (t \\<leftrightarrow> s)\"", "lemma conversep_term [simp]: \"conversep (\\<leftrightarrow>) = (\\<leftrightarrow>)\"", "lemma term_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<leftrightarrow> u \\<Longrightarrow> s \\<leftrightarrow> u\"", "lemma term_beta_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<rightarrow>\\<^sub>\\<beta> u \\<Longrightarrow> s \\<leftrightarrow> u\"", "lemma term_eta_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<rightarrow>\\<^sub>\\<eta> u \\<Longrightarrow> s \\<leftrightarrow> u\"", "lemma equiv_appL[intro]: \"s \\<leftrightarrow> s' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s' \\<degree> t\"", "lemma equiv_appR[intro]: \"t \\<leftrightarrow> t' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s \\<degree> t'\"", "lemma equiv_app: \"s \\<leftrightarrow> s' \\<Longrightarrow> t \\<leftrightarrow> t' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s' \\<degree> t'\"", "lemma equiv_abs[intro]: \"t \\<leftrightarrow> t' \\<Longrightarrow> Abs t \\<leftrightarrow> Abs t'\"", "lemma equiv_lift: \"s \\<leftrightarrow> t \\<Longrightarrow> lift s k \\<leftrightarrow> lift t k\"", "lemma equiv_liftn: \"s \\<leftrightarrow> t \\<Longrightarrow> liftn n s k \\<leftrightarrow> liftn n t k\"", "lemma equiv_eq_rtscl_reds: \"term_equiv = (sup beta_eta beta_eta\\<inverse>\\<inverse>)\\<^sup>*\\<^sup>*\""], "translations": [["", "lemma liftn_lift_swap: \"liftn n (lift t k) k = lift (liftn n t k) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. liftn n (lift t k) k = lift (liftn n t k) k", "by (induction n) simp_all"], ["", "lemma subst_liftn:\n  \"i \\<le> n + k \\<and> k \\<le> i \\<Longrightarrow> (liftn (Suc n) s k)[t/i] = liftn n s k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> n + k \\<and> k \\<le> i \\<Longrightarrow>\n    liftn (Suc n) s k[t/i] = liftn n s k", "by (induction s arbitrary: i k t) auto"], ["", "lemma subst_lift2[simp]: \"(lift (lift t 0) 0)[x/Suc 0] = lift t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (lift t 0) 0[x/Suc 0] = lift t 0", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lift (lift t 0) 0[x/Suc 0] = lift t 0", "have \"lift (lift t 0) 0 = lift (lift t 0) (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift (lift t 0) 0 = lift (lift t 0) (Suc 0)", "using lift_lift"], ["proof (prove)\nusing this:\n  ?i < ?k + 1 \\<Longrightarrow>\n  lift (lift ?t ?i) (Suc ?k) = lift (lift ?t ?k) ?i\n\ngoal (1 subgoal):\n 1. lift (lift t 0) 0 = lift (lift t 0) (Suc 0)", "by simp"], ["proof (state)\nthis:\n  lift (lift t 0) 0 = lift (lift t 0) (Suc 0)\n\ngoal (1 subgoal):\n 1. lift (lift t 0) 0[x/Suc 0] = lift t 0", "thus ?thesis"], ["proof (prove)\nusing this:\n  lift (lift t 0) 0 = lift (lift t 0) (Suc 0)\n\ngoal (1 subgoal):\n 1. lift (lift t 0) 0[x/Suc 0] = lift t 0", "by simp"], ["proof (state)\nthis:\n  lift (lift t 0) 0[x/Suc 0] = lift t 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma free_liftn:\n  \"free (liftn n t k) i = (i < k \\<and> free t i \\<or> k + n \\<le> i \\<and> free t (i - n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. free (liftn n t k) i =\n    (i < k \\<and> free t i \\<or> k + n \\<le> i \\<and> free t (i - n))", "by (induction t arbitrary: k i) (auto simp add: Suc_diff_le)"], ["", "subsubsection \\<open>Reduction\\<close>"], ["", "abbreviation beta_eta :: \"dB \\<Rightarrow> dB \\<Rightarrow> bool\" (infixl \"\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\" 50)\nwhere \"beta_eta \\<equiv> sup beta eta\""], ["", "abbreviation beta_eta_reds :: \"dB \\<Rightarrow> dB \\<Rightarrow> bool\" (infixl \"\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\" 50)\nwhere \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<equiv> (beta_eta)\\<^sup>*\\<^sup>* s t\""], ["", "lemma beta_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow>\n    s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t", "by auto"], ["", "lemma eta_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow>\n    s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t", "by auto"], ["", "lemma beta_reds_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow>\n    s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t", "by (auto intro: rtranclp_mono[THEN predicate2D])"], ["", "lemma eta_reds_into_beta_eta_reds: \"s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow>\n    s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t", "by (auto intro: rtranclp_mono[THEN predicate2D])"], ["", "lemma beta_eta_appL[intro]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s' \\<Longrightarrow> s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s' \\<degree> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s' \\<Longrightarrow>\n    s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n    s' \\<degree> t", "by (induction set: rtranclp) (auto intro: rtranclp.rtrancl_into_rtrancl)"], ["", "lemma beta_eta_appR[intro]: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow> s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* s \\<degree> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow>\n    s \\<degree> t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n    s \\<degree> t'", "by (induction set: rtranclp) (auto intro: rtranclp.rtrancl_into_rtrancl)"], ["", "lemma beta_eta_abs[intro]: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow> Abs t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* Abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t' \\<Longrightarrow>\n    Abs t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* Abs t'", "by (induction set: rtranclp) (auto intro: rtranclp.rtrancl_into_rtrancl)"], ["", "lemma beta_eta_lift: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift t k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow>\n    lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift t k", "proof (induction pred: rtranclp)"], ["proof (state)\ngoal (2 subgoals):\n 1. lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift s k\n 2. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift s k\n 2. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift s k", ".."], ["proof (state)\nthis:\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift s k\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "case (step y z)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y\n  y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift y k\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "hence \"lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k\""], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y\n  y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift y k\n\ngoal (1 subgoal):\n 1. lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k", "using lift_preserves_beta eta_lift"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y\n  y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift y k\n  ?r \\<rightarrow>\\<^sub>\\<beta> ?s \\<Longrightarrow>\n  lift ?r ?i \\<rightarrow>\\<^sub>\\<beta> lift ?s ?i\n  ?s \\<rightarrow>\\<^sub>\\<eta> ?t \\<Longrightarrow>\n  lift ?s ?i \\<rightarrow>\\<^sub>\\<eta> lift ?t ?i\n\ngoal (1 subgoal):\n 1. lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k", "by blast"], ["proof (state)\nthis:\n  lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y;\n        y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> z;\n        lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n        lift y k\\<rbrakk>\n       \\<Longrightarrow> lift s\n                          k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n                         lift z k", "with step.IH"], ["proof (chain)\npicking this:\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift y k\n  lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k", "show \"lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift z k\""], ["proof (prove)\nusing this:\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift y k\n  lift y k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta> lift z k\n\ngoal (1 subgoal):\n 1. lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift z k", "by iprover"], ["proof (state)\nthis:\n  lift s k \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* lift z k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma confluent_beta_eta_reds: \"Joinable.confluent {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Joinable.confluent\n     {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}", "using confluent_beta_eta"], ["proof (prove)\nusing this:\n  Commutation.confluent (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\n\ngoal (1 subgoal):\n 1. Joinable.confluent\n     {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}", "unfolding diamond_def commute_def square_def"], ["proof (prove)\nusing this:\n  \\<forall>x y.\n     x \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* y \\<longrightarrow>\n     (\\<forall>z.\n         x \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n         z \\<longrightarrow>\n         (\\<exists>u.\n             y \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u \\<and>\n             z \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u))\n\ngoal (1 subgoal):\n 1. Joinable.confluent\n     {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}", "by (blast intro!: confluentI)"], ["", "subsubsection \\<open>Equivalence\\<close>"], ["", "text \\<open>Terms are equivalent iff they can be reduced to a common term.\\<close>"], ["", "definition term_equiv :: \"dB \\<Rightarrow> dB \\<Rightarrow> bool\" (infixl \"\\<leftrightarrow>\" 50)\nwhere \"term_equiv = joinablep beta_eta_reds\""], ["", "lemma term_equivI:\n  assumes \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\" and \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\"\n  shows \"s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t", "using assms"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\n  t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t", "unfolding term_equiv_def"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\n  t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\n\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s t", "by (rule joinableI[to_pred])"], ["", "lemma term_equivE:\n  assumes \"s \\<leftrightarrow> t\"\n  obtains u where \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\" and \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u;\n         t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  s \\<leftrightarrow> t\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u;\n         t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding term_equiv_def"], ["proof (prove)\nusing this:\n  joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s t\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u;\n         t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule joinableE[to_pred])"], ["", "lemma reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow>\n    s \\<leftrightarrow> t", "by (blast intro: term_equivI)"], ["", "lemma beta_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow> s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta> t \\<Longrightarrow> s \\<leftrightarrow> t", "by (rule reds_into_equiv) (rule beta_into_beta_eta_reds)"], ["", "lemma eta_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow> s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<eta> t \\<Longrightarrow> s \\<leftrightarrow> t", "by (rule reds_into_equiv) (rule eta_into_beta_eta_reds)"], ["", "lemma beta_reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* t \\<Longrightarrow>\n    s \\<leftrightarrow> t", "by (rule reds_into_equiv) (rule beta_reds_into_beta_eta_reds)"], ["", "lemma eta_reds_into_equiv[elim]: \"s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow> s \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* t \\<Longrightarrow>\n    s \\<leftrightarrow> t", "by (rule reds_into_equiv) (rule eta_reds_into_beta_eta_reds)"], ["", "lemma term_refl[iff]: \"t \\<leftrightarrow> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<leftrightarrow> t", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t t", "by (blast intro: joinablep_refl reflpI)"], ["", "lemma term_sym[sym]: \"(s \\<leftrightarrow> t) \\<Longrightarrow> (t \\<leftrightarrow> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t \\<Longrightarrow> t \\<leftrightarrow> s", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n     t \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t s", "by (rule joinable_sym[to_pred])"], ["", "lemma conversep_term [simp]: \"conversep (\\<leftrightarrow>) = (\\<leftrightarrow>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<leftrightarrow>)\\<inverse>\\<inverse> = (\\<leftrightarrow>)", "by (auto simp add: fun_eq_iff intro: term_sym)"], ["", "lemma term_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<leftrightarrow> u \\<Longrightarrow> s \\<leftrightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<leftrightarrow> t; t \\<leftrightarrow> u\\<rbrakk>\n    \\<Longrightarrow> s \\<leftrightarrow> u", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n              t;\n     joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n      u\\<rbrakk>\n    \\<Longrightarrow> joinablep\n                       (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n                       u", "using trans_joinable[to_pred] trans_rtrancl[to_pred] confluent_beta_eta_reds"], ["proof (prove)\nusing this:\n  \\<lbrakk>transp ?R; Joinable.confluent {(xa, x). ?R xa x}\\<rbrakk>\n  \\<Longrightarrow> transp (joinablep ?R)\n  transp ?r\\<^sup>*\\<^sup>*\n  Joinable.confluent\n   {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n              t;\n     joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n      u\\<rbrakk>\n    \\<Longrightarrow> joinablep\n                       (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n                       u", "by (blast elim: transpE)"], ["", "lemma term_beta_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<rightarrow>\\<^sub>\\<beta> u \\<Longrightarrow> s \\<leftrightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<leftrightarrow> t; t \\<rightarrow>\\<^sub>\\<beta> u\\<rbrakk>\n    \\<Longrightarrow> s \\<leftrightarrow> u", "by (fast dest!: beta_into_beta_eta_reds intro: term_trans)"], ["", "lemma term_eta_trans[trans]: \"s \\<leftrightarrow> t \\<Longrightarrow> t \\<rightarrow>\\<^sub>\\<eta> u \\<Longrightarrow> s \\<leftrightarrow> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<leftrightarrow> t; t \\<rightarrow>\\<^sub>\\<eta> u\\<rbrakk>\n    \\<Longrightarrow> s \\<leftrightarrow> u", "by (fast dest!: eta_into_beta_eta_reds intro: term_trans)"], ["", "lemma equiv_appL[intro]: \"s \\<leftrightarrow> s' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s' \\<degree> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> s' \\<Longrightarrow>\n    s \\<degree> t \\<leftrightarrow> s' \\<degree> t", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n     s' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*)\n     (s \\<degree> t) (s' \\<degree> t)", "using beta_eta_appL"], ["proof (prove)\nusing this:\n  ?s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* ?s' \\<Longrightarrow>\n  ?s \\<degree> ?t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n  ?s' \\<degree> ?t\n\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) s\n     s' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*)\n     (s \\<degree> t) (s' \\<degree> t)", "by (iprover intro: joinable_subst[to_pred])"], ["", "lemma equiv_appR[intro]: \"t \\<leftrightarrow> t' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s \\<degree> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<leftrightarrow> t' \\<Longrightarrow>\n    s \\<degree> t \\<leftrightarrow> s \\<degree> t'", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n     t' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*)\n     (s \\<degree> t) (s \\<degree> t')", "using beta_eta_appR"], ["proof (prove)\nusing this:\n  ?t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* ?t' \\<Longrightarrow>\n  ?s \\<degree> ?t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*\n  ?s \\<degree> ?t'\n\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n     t' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*)\n     (s \\<degree> t) (s \\<degree> t')", "by (iprover intro: joinable_subst[to_pred])"], ["", "lemma equiv_app: \"s \\<leftrightarrow> s' \\<Longrightarrow> t \\<leftrightarrow> t' \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s' \\<degree> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<leftrightarrow> s'; t \\<leftrightarrow> t'\\<rbrakk>\n    \\<Longrightarrow> s \\<degree> t \\<leftrightarrow> s' \\<degree> t'", "by (blast intro: term_trans)"], ["", "lemma equiv_abs[intro]: \"t \\<leftrightarrow> t' \\<Longrightarrow> Abs t \\<leftrightarrow> Abs t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<leftrightarrow> t' \\<Longrightarrow> Abs t \\<leftrightarrow> Abs t'", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n     t' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) (Abs t)\n     (Abs t')", "using beta_eta_abs"], ["proof (prove)\nusing this:\n  ?t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* ?t' \\<Longrightarrow>\n  Abs ?t \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* Abs ?t'\n\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) t\n     t' \\<Longrightarrow>\n    joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) (Abs t)\n     (Abs t')", "by (iprover intro: joinable_subst[to_pred])"], ["", "lemma equiv_lift: \"s \\<leftrightarrow> t \\<Longrightarrow> lift s k \\<leftrightarrow> lift t k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t \\<Longrightarrow>\n    lift s k \\<leftrightarrow> lift t k", "by (auto intro: term_equivI beta_eta_lift elim: term_equivE)"], ["", "lemma equiv_liftn: \"s \\<leftrightarrow> t \\<Longrightarrow> liftn n s k \\<leftrightarrow> liftn n t k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<leftrightarrow> t \\<Longrightarrow>\n    liftn n s k \\<leftrightarrow> liftn n t k", "by (induction n) (auto intro: equiv_lift)"], ["", "text \\<open>Our definition is equivalent to the the symmetric and transitive closure of\n  the reduction relation.\\<close>"], ["", "lemma equiv_eq_rtscl_reds: \"term_equiv = (sup beta_eta beta_eta\\<inverse>\\<inverse>)\\<^sup>*\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<leftrightarrow>) =\n    (sup (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\n      (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\\<inverse>\\<inverse>)\\<^sup>*\\<^sup>*", "unfolding term_equiv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) =\n    (sup (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\n      (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\\<inverse>\\<inverse>)\\<^sup>*\\<^sup>*", "using confluent_beta_eta_reds"], ["proof (prove)\nusing this:\n  Joinable.confluent\n   {(s, t). s \\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>* t}\n\ngoal (1 subgoal):\n 1. joinablep (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>\\<^sup>*) =\n    (sup (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\n      (\\<rightarrow>\\<^sub>\\<beta>\\<^sub>\\<eta>)\\<inverse>\\<inverse>)\\<^sup>*\\<^sup>*", "by (rule joinable_eq_rtscl[to_pred])"], ["", "end"]]}