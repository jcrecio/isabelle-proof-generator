{"file_name": "/home/qj213/afp-2021-10-22/thys/RefinementReactive/Reactive.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/RefinementReactive", "problem_names": ["lemma [simp]: \"SKIP = id\"", "lemma \"HAVOC o ASSERT_LIVE = FAIL\"", "lemma \"HAVOC o AE = FAIL\"", "lemma \"HAVOC o ASSERT_LIVE = FAIL\"", "lemma \"SKIP o AE = AE\"", "lemma \"(REQ_RESP o AE) = AE\"", "lemma \"fail (LocalSystem init p r) = fail_sys init p r\"", "lemma prec_st_simp: \"prec_st p r u x = (\\<forall> n . (\\<forall> i < n . inpt_st r (u i) (u (Suc i)) (x i)) \\<longrightarrow> p (u n) (u (Suc n)) (x n))\"", "lemma SymSystem_rel: \"SymSystem init p r = {. x . \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ> \n    [: x \\<leadsto> y . \\<exists> u . u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y :] \"", "theorem \"SymSystem init p r q x = LocalSystem init p r q x\"", "lemma [simp]: \"fst \\<circ> x || y = x\"", "lemma [simp]: \"snd \\<circ> x || y = y\"", "lemma [simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> B \\<Longrightarrow> (x || y) \\<in> zip_set A B\"", "lemma local_demonic_init: \"local_init init (\\<lambda> u . {. x . p u x.} o [:x \\<leadsto> y . r u x y :]) = \n        [:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :]\"", "lemma local_init_comp: \"u' \\<in> init' \\<Longrightarrow> (\\<forall> u. sconjunctive (S u)) \\<Longrightarrow> (local_init init S) o (local_init init' S') \n                       = local_init (zip_set init init') (\\<lambda> u . (S (fst o u)) o (S' (snd o u)))\"", "lemma init_state: \"[:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :] \n      = [:z \\<leadsto> u, x . z = x:] o {.u, x . u \\<in> init \\<longrightarrow> p u x.} o [:u, x \\<leadsto> y . u \\<in> init \\<and> r u x y :]\"", "lemma always_lft_rel_comp: \"(\\<box> lft_rel_st r) (fst \\<circ> u) OO (\\<box> lft_rel_st r') (snd \\<circ> u) \n              = (\\<box> lft_rel_st (\\<lambda> (u, v) (u', v') . ((r u u') OO (r' v v')))) u\"", "theorem SymSystem_comp: \"u' \\<in> init' \\<Longrightarrow> SymSystem init p r o SymSystem init' p' r' \n                   = [:z \\<leadsto> u, x . fst o u \\<in> init \\<and> snd o u \\<in> init' \\<and> z = x:] \n                   o {. u, x . prec_st p r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st p' r' (snd \\<circ> u) y) .} \n                   o [: u, x \\<leadsto> y . (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u x y :]\"\n                   (is \"?p \\<Longrightarrow> ?S  = ?T\")", "lemma always_lft_rel_comp_a: \"(\\<box> lft_rel_st r) u OO (\\<box> lft_rel_st r') v \n              = (\\<box> lft_rel_st (\\<lambda> (u, v) (u', v') . ((r u u') OO (r' v v')))) (u || v)\"", "theorem SymSystem_comp_a: \"u' \\<in> init' \\<Longrightarrow> SymSystem init p r o SymSystem init' p' r' \n                   = {.x . \\<forall> u v . u \\<in> init \\<and> v \\<in> init' \\<longrightarrow> (prec_st p r u x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) u x y \\<longrightarrow> prec_st p' r' v y)) .} \n                   o [: x \\<leadsto> y . \\<exists> u v . u \\<in> init \\<and> v \\<in> init' \\<and> (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) (u || v) x y :]\"\n                   (is \"?p \\<Longrightarrow> ?S = ?T\")", "lemma localSS'_aux: \"( \\<lambda>x. \\<forall> (a::nat) (aa::nat) (b::nat). \\<not> (case x of (x::nat, u::nat, v::nat) \\<Rightarrow> \\<lambda>ab. u = 0 \\<and> \n    (case ab of (y, u', v') \\<Rightarrow> u' = Suc 0 \\<and> v = v')) (a, aa, b)) \n    = (\\<lambda> (x, u, v) . u > 0)\"", "lemma localSS'_aux_b: \"((\\<lambda>(x, u, v) ab. u = 0 \\<and> (case ab of (y, u', v') \\<Rightarrow> u' = Suc 0 \\<and> v = v')) OO (\\<lambda>(x, u, v) (y, u', v'). u = u')) \n    = (\\<lambda> (x, u, v) (y, u', v') . u = 0 \\<and> u' = 1)\"", "lemma \"{.x, (u, v) . localPrecS (u, v) (a,b) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelS (u,v) (u',v') x y:] o \n         {.x, (u, v) . localPrecS' (u, v) (c, d) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelS' (u,v) (u',v') x y:]\n       = {.x, (u, v) . localPrecSS' (u, v) (e, f) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelSS' (u,v) (u',v') x y:]\"", "lemma [simp]: \"[: \\<bottom>::('a \\<Rightarrow> 'b => ('c::boolean_algebra)) :] = \\<top>\"", "lemma symbSS'_aux: \"( \\<lambda>x. \\<forall>u. fst (u 0) = 0 \\<longrightarrow>\n                (\\<forall>n. (\\<forall>i<n. Ex ((case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'::nat) x z. u = 0 \\<and> u' = Suc 0) (u (Suc i)) (x i))) \n                \\<longrightarrow> (case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v') x. 0 < u) (u (Suc n)) (x n)) ) = \\<bottom>\"", "lemma symbSS': \"symbSS' = \\<bottom>\"", "lemma symbS: \"symbS = \\<top>\"", "lemma \"symbS o symbS' \\<noteq> symbSS'\"", "lemma prec_st_inpt: \"prec_st (inpt_st r) r = (\\<box> (lft_pred_st (inpt_st r)))\"", "lemma \"grd (SymSystem init p r) = Sup ((- prec_st p r \\<squnion> (\\<box> (lft_pred_st (inpt_st r)))) ` init)\"", "lemma \"((grd (local_init init S))::'a\\<Rightarrow>bool) = Sup ((grd o S) ` init)\"", "lemma \"u \\<in> init \\<Longrightarrow> guard ([:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :])\n      = [:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . u \\<in> init \\<and> (\\<exists>a. a \\<in> init \\<and> (p a x \\<longrightarrow> Ex (r a x))) \\<and> p u x.} o [:u, x \\<leadsto> y . ((r u x y)::bool) :]\"", "lemma inpt_str_comp_aux: \"(\\<forall>n. (\\<forall>i<n. inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n        (\\<forall> i < n . inpt_st r ((fst o u) i) ((fst o u) (Suc i)) (x i) \\<and> (\\<forall>y. r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\"\n        (is \"(\\<forall> n . ?p n) \\<longrightarrow> ?q n\")", "lemma inpt_str_comp_aux_a: \"(\\<forall>n. (\\<forall>i<n. inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<Longrightarrow>\n        inpt_st r ((fst o u) n) ((fst o u) (Suc n)) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\"", "lemma inpt_str_comp_a: \"(prec_st (inpt_st r) r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st (inpt_st r') r' (snd \\<circ> u) y)) = \n    prec_st (\\<lambda> u u' x . inpt_st r (fst u) (fst u') x \\<and> (\\<forall> y . r (fst u) (fst u') x y \\<longrightarrow> (inpt_st r' (snd u) (snd u') y))) (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x\"", "lemma inpt_str_comp_b: \"prec_st (\\<lambda> u u' x . inpt_st r (fst u) (fst u') x \\<and> \n    (\\<forall> y . r (fst u) (fst u') x y \\<longrightarrow> (inpt_st r' (snd u) (snd u') y))) (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x\n    =  (\\<box> (lft_pred_st (inpt_st (rel_st r r')))) u x\"", "lemma inpt_str_comp: \"(prec_st (inpt_st r) r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st (inpt_st r') r' (snd \\<circ> u) y)) \n               = (\\<box> (lft_pred_st (inpt_st (rel_st r r')))) u x\"", "lemma RSysTmp_inpt_comp: \"u' \\<in> init' \\<Longrightarrow> SymSystem init (inpt_st r) r o SymSystem init'(inpt_st r') r' \n      =  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\"", "lemma inpt_always: \"inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) = (\\<lambda>(x, y). (\\<box> lft_pred_st (inpt_st r)) x y)\"", "lemma \"GrdSymSystem init r = SymSystem init (inpt_st r) r\"", "lemma counter_a_aux: \"u 0 = 0 \\<Longrightarrow> \\<forall>i < n. (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and> (\\<not> x i \\<longrightarrow> u (Suc i) = u i) \\<Longrightarrow> (\\<forall> i < n . count x i = u (Suc i))\"", "lemma counter_b_aux: \"u 0 = 0 \\<Longrightarrow> \\<forall>n. (xa n \\<longrightarrow> u (Suc n) = Suc (u n)) \\<and> (\\<not> xa n \\<longrightarrow> u (Suc n) = u n) \\<and> xb n = u (Suc n) \n                \\<Longrightarrow> count xa n = u (Suc n)\"", "lemma \"COUNTER = Counter_global\"", "lemma LIVE_fusion: \"LIVE = (SymSystem {u . u 0 = 0} prec_ex rel_ex) \\<parallel> [:x \\<leadsto> y . (\\<box> (\\<diamond> (\\<lambda> y . y 0))) y:]\"", "lemma monotonic_SymSystem[simp]: \"mono (SymSystem init p r)\"", "lemma event_ex_aux_a: \"a 0 = (0::int) \\<Longrightarrow> \\<forall>n. xa (Suc n) = (\\<not> xa n) \\<Longrightarrow> \n        \\<forall>n. (xa n \\<and> a (Suc n) = a n + 1 \\<or> \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0) \\<Longrightarrow> \n        (a n = -1 \\<longrightarrow> xa n) \\<and> (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and> -1 \\<le> a n \\<and> a n \\<le> 1\"", "lemma event_ex_aux: \"a 0 = (0::int) \\<Longrightarrow> \\<forall>n. xa (Suc n) = (\\<not> xa n) \\<Longrightarrow> \n         \\<forall>n. (xa n \\<and> a (Suc n) = a n + 1 \\<or> \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0) \\<Longrightarrow> \n        (\\<forall> n . (a n = -1 \\<longrightarrow> xa n) \\<and> (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and> -1 \\<le> a n \\<and> a n \\<le> 1)\"", "lemma \"{.\\<box> preca_ex.} o LIVE \\<le> SymSystem {u . u 0 = 0} prec_ex rel_ex\""], "translations": [["", "lemma [simp]: \"SKIP = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SKIP = id", "by (auto simp add: fun_eq_iff SKIP_def demonic_def)"], ["", "definition \"REQ_RESP = [: \\<box>(\\<lambda> xs ys . xs (0::nat) \\<longrightarrow> (\\<diamond> (\\<lambda> ys . ys (0::nat))) ys) :]\""], ["", "definition \"FAIL = \\<bottom>\""], ["", "lemma \"HAVOC o ASSERT_LIVE = FAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAVOC \\<circ> ASSERT_LIVE = FAIL", "by (auto simp add: HAVOC_def AE_def FAIL_def ASSERT_LIVE_def fun_eq_iff assert_def demonic_def always_def at_fun_def le_fun_def eventually_def)"], ["", "lemma \"HAVOC o AE = FAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAVOC \\<circ> AE = FAIL", "by (auto simp add: HAVOC_def AE_def FAIL_def ASSERT_LIVE_def fun_eq_iff assert_def demonic_def always_def at_fun_def le_fun_def eventually_def)"], ["", "lemma \"HAVOC o ASSERT_LIVE = FAIL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. HAVOC \\<circ> ASSERT_LIVE = FAIL", "by (auto simp add: HAVOC_def AE_def FAIL_def ASSERT_LIVE_def fun_eq_iff assert_def demonic_def always_def  at_fun_def eventually_def)"], ["", "lemma \"SKIP o AE = AE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SKIP \\<circ> AE = AE", "by simp"], ["", "lemma \"(REQ_RESP o AE) = AE\""], ["proof (prove)\ngoal (1 subgoal):\n 1. REQ_RESP \\<circ> AE = AE", "proof (auto simp add: fun_eq_iff HAVOC_def AE_def FAIL_def REQ_RESP_def ASSERT_LIVE_def  assert_def \n      demonic_def always_def le_fun_def eventually_def at_fun_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix x :: \"'a \\<Rightarrow> bool\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix xa :: \"nat \\<Rightarrow> bool\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix xb :: nat"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "assume \"\\<forall>xb::nat \\<Rightarrow> bool . (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow> (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\""], ["proof (state)\nthis:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\n\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "then"], ["proof (chain)\npicking this:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x", "have \"(\\<forall>x. xa x \\<longrightarrow> Ex (xa[x ..])) \\<longrightarrow> (\\<forall>x. \\<exists>a. xa (x + a)) \\<and> All x\""], ["proof (prove)\nusing this:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\n\ngoal (1 subgoal):\n 1. (\\<forall>x. xa x \\<longrightarrow> Ex (xa[x ..])) \\<longrightarrow>\n    (\\<forall>x. \\<exists>a. xa (x + a)) \\<and> All x", "by auto"], ["proof (state)\nthis:\n  (\\<forall>x. xa x \\<longrightarrow> Ex (xa[x ..])) \\<longrightarrow>\n  (\\<forall>x. \\<exists>a. xa (x + a)) \\<and> All x\n\ngoal (3 subgoals):\n 1. \\<And>x xa f.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       \\<exists>fa. xa (f + fa)\n 2. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 3. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "then"], ["proof (chain)\npicking this:\n  (\\<forall>x. xa x \\<longrightarrow> Ex (xa[x ..])) \\<longrightarrow>\n  (\\<forall>x. \\<exists>a. xa (x + a)) \\<and> All x", "show \"\\<exists>x. xa (xb + x)\""], ["proof (prove)\nusing this:\n  (\\<forall>x. xa x \\<longrightarrow> Ex (xa[x ..])) \\<longrightarrow>\n  (\\<forall>x. \\<exists>a. xa (x + a)) \\<and> All x\n\ngoal (1 subgoal):\n 1. \\<exists>x. xa (xb + x)", "by (auto, rule_tac x = 0 in exI, simp)"], ["proof (state)\nthis:\n  \\<exists>x. xa (xb + x)\n\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix x :: \"'a \\<Rightarrow> bool\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix xa :: \"nat \\<Rightarrow> bool\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix xb :: 'a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "assume \"\\<forall>xb::nat \\<Rightarrow> bool . (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow> (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\""], ["proof (state)\nthis:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\n\ngoal (2 subgoals):\n 1. \\<And>x xa xb.\n       \\<forall>xb.\n          (\\<forall>f.\n              xa f \\<longrightarrow> Ex (xb[f ..])) \\<longrightarrow>\n          (\\<forall>f. \\<exists>fa. xb (f + fa)) \\<and>\n          All x \\<Longrightarrow>\n       x xb\n 2. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "from this"], ["proof (chain)\npicking this:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x", "show \"x xb\""], ["proof (prove)\nusing this:\n  \\<forall>xb.\n     (\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])) \\<longrightarrow>\n     (\\<forall>x. \\<exists>a. xb (x + a)) \\<and> All x\n\ngoal (1 subgoal):\n 1. x xb", "by (metis at_trace_def le0)"], ["proof (state)\nthis:\n  x xb\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "fix x :: \"'a \\<Rightarrow> bool\" and xa :: \"nat \\<Rightarrow> bool\" and xb :: \"nat \\<Rightarrow> bool\" and xc :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "assume A: \"\\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])\""], ["proof (state)\nthis:\n  \\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "assume B: \"\\<forall>x. \\<exists>xb. xa (x + xb)\""], ["proof (state)\nthis:\n  \\<forall>x. \\<exists>xb. xa (x + xb)\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "have \"\\<exists>x1. xc \\<le> AbsNat x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x1. xc \\<le> AbsNat x1", "by (metis (full_types) le_add2 plus_Nat_def)"], ["proof (state)\nthis:\n  \\<exists>x1. xc \\<le> AbsNat x1\n\ngoal (1 subgoal):\n 1. \\<And>x xa xb f.\n       \\<lbrakk>\\<forall>f. \\<exists>fa. xa (f + fa); All x;\n        \\<forall>f. xa f \\<longrightarrow> Ex (xb[f ..])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa. xb (f + fa)", "thus \"\\<exists>x. xb (xc + x)\""], ["proof (prove)\nusing this:\n  \\<exists>x1. xc \\<le> AbsNat x1\n\ngoal (1 subgoal):\n 1. \\<exists>x. xb (xc + x)", "using A B"], ["proof (prove)\nusing this:\n  \\<exists>x1. xc \\<le> AbsNat x1\n  \\<forall>x. xa x \\<longrightarrow> Ex (xb[x ..])\n  \\<forall>x. \\<exists>xb. xa (x + xb)\n\ngoal (1 subgoal):\n 1. \\<exists>x. xb (xc + x)", "by (metis AbsNat_plus add.commute at_trace_def le_Suc_ex trans_le_add2)"], ["proof (state)\nthis:\n  \\<exists>x. xb (xc + x)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Symbolic transition systems\\<close>"], ["", "text\\<open>\n    In this section we introduce property transformers basend on symbolic\n    transition systems. These are systems with local state. The execution\n    starts in some initial state, and with some input value the system computes\n    a new state and an output value. Then using the current state, and a \n    new input value the system computes a new state, and a new output, and\n    so on. The system may fail if at some point the input and the current \n    state do not statisfy a required predicate.\n\n    In the folowing definitions the variables $u$, $x$, $y$ stand for the\n    state of the system, the input, and the output respectively. The $init$ \n    is the property that the initial state should satisfy. The predicate\n    $p$ is the precondition of the input and the current state, and the\n    relation $r$ gives the next state and the output based on the\n    input and the current state.\n\\<close>"], ["", "definition \"fail_sys init p r x = (\\<exists> n u y . u \\<in> init \\<and> (\\<forall> i < n . r (u i) (u (Suc i)) (x i) (y i)) \\<and> (\\<not> p (u n) (u (Suc n)) (x n)))\""], ["", "definition \"run r u x y = (\\<forall> i . r (u i) (u (Suc i)) (x i) (y i))\""], ["", "definition \"LocalSystem init p r q x = (\\<not> fail_sys init p r x \\<and> (\\<forall> u y . (u \\<in> init \\<and> run r u x y) \\<longrightarrow> q y))\""], ["", "lemma \"fail (LocalSystem init p r) = fail_sys init p r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fail (LocalSystem init p r) = fail_sys init p r", "by (simp add: fun_eq_iff LocalSystem_def fail_def fail_sys_def run_def)"], ["", "definition \"inpt_st r u u' x =  (\\<exists> y . r u u' x y)\""], ["", "definition \"lft_pred_st p u x = p (u (0::nat)) (u 1) (x (0::nat))\""], ["", "definition \"lft_pred_loc_st p u x = p (u (0::nat)) (x (0::nat))\""], ["", "definition \"lft_rel_st r u x y = r (u (0::nat)) (u 1) (x (0::nat)) (y (0::nat))\""], ["", "definition \"prec_st p r = -((lft_pred_st (inpt_st r)) until -(lft_pred_st p))\""], ["", "lemma prec_st_simp: \"prec_st p r u x = (\\<forall> n . (\\<forall> i < n . inpt_st r (u i) (u (Suc i)) (x i)) \\<longrightarrow> p (u n) (u (Suc n)) (x n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prec_st p r u x =\n    (\\<forall>n.\n        (\\<forall>i<n. inpt_st r (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        p (u n) (u (Suc n)) (x n))", "by (simp add: prec_st_def until_def lft_pred_st_def inpt_st_def at_fun_def, metis)"], ["", "definition \"SymSystem init p r = [:z \\<leadsto>  u, x . u \\<in> init \\<and> z = x:] o {.u, x . prec_st p r u x.} o \n      [:u, x \\<leadsto> y . (\\<box> (lft_rel_st r)) u x y :]\""], ["", "lemma SymSystem_rel: \"SymSystem init p r = {. x . \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ> \n    [: x \\<leadsto> y . \\<exists> u . u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y :] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. SymSystem init p r =\n    {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. SymSystem init p r =\n    {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :]", "have [simp]:  \"((\\<lambda>z (u, x). u \\<in> init \\<and> z = x) OO (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y)) = (\\<lambda>x y. \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>z (u, x). u \\<in> init \\<and> z = x) OO\n    (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) =\n    (\\<lambda>x y.\n        \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>z (u, x). u \\<in> init \\<and> z = x) OO\n  (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) =\n  (\\<lambda>x y.\n      \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n\ngoal (1 subgoal):\n 1. SymSystem init p r =\n    {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. SymSystem init p r =\n    {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :]", "by  (simp add: SymSystem_def demonic_assert_comp comp_assoc demonic_demonic)"], ["proof (state)\nthis:\n  SymSystem init p r =\n  {.x. \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y :]\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem \"SymSystem init p r q x = LocalSystem init p r q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SymSystem init p r q x = LocalSystem init p r q x", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. SymSystem init p r q x \\<Longrightarrow> LocalSystem init p r q x\n 2. LocalSystem init p r q x \\<Longrightarrow> SymSystem init p r q x", "assume \"SymSystem init p r q x\""], ["proof (state)\nthis:\n  SymSystem init p r q x\n\ngoal (2 subgoals):\n 1. SymSystem init p r q x \\<Longrightarrow> LocalSystem init p r q x\n 2. LocalSystem init p r q x \\<Longrightarrow> SymSystem init p r q x", "then"], ["proof (chain)\npicking this:\n  SymSystem init p r q x", "show \"LocalSystem init p r q x\""], ["proof (prove)\nusing this:\n  SymSystem init p r q x\n\ngoal (1 subgoal):\n 1. LocalSystem init p r q x", "apply (auto simp add: SymSystem_def LocalSystem_def assert_def \n          demonic_def prec_st_simp lft_rel_st_def lft_pred_st_def inpt_st_def\n          always_def  le_fun_def fail_sys_def run_def at_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n u y.\n       \\<lbrakk>\\<forall>a.\n                   a \\<in> init \\<longrightarrow>\n                   (\\<forall>n.\n                       (\\<forall>i<n.\n                           Ex (r (a i) (a (Suc i)) (x i))) \\<longrightarrow>\n                       p (a n) (a (Suc n)) (x n)) \\<and>\n                   (\\<forall>xa.\n                       (\\<forall>f.\n                           r (a f) (a (Suc f)) (x f)\n                            (xa f)) \\<longrightarrow>\n                       q xa);\n        u \\<in> init; \\<not> p (u n) (u (Suc n)) (x n)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i<n.\n                            \\<not> r (u i) (u (Suc i)) (x i) (y i)", "by metis"], ["proof (state)\nthis:\n  LocalSystem init p r q x\n\ngoal (1 subgoal):\n 1. LocalSystem init p r q x \\<Longrightarrow> SymSystem init p r q x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. LocalSystem init p r q x \\<Longrightarrow> SymSystem init p r q x", "assume \"LocalSystem init p r q x\""], ["proof (state)\nthis:\n  LocalSystem init p r q x\n\ngoal (1 subgoal):\n 1. LocalSystem init p r q x \\<Longrightarrow> SymSystem init p r q x", "then"], ["proof (chain)\npicking this:\n  LocalSystem init p r q x", "show \"SymSystem init p r q x\""], ["proof (prove)\nusing this:\n  LocalSystem init p r q x\n\ngoal (1 subgoal):\n 1. SymSystem init p r q x", "apply (auto simp add: SymSystem_def LocalSystem_def assert_def \n          demonic_def prec_st_simp lft_rel_st_def lft_pred_st_def inpt_st_def\n          always_def  le_fun_def fail_sys_def run_def at_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a n.\n       \\<lbrakk>\\<forall>n u.\n                   u \\<in> init \\<longrightarrow>\n                   (\\<forall>y.\n                       \\<exists>i<n.\n                          \\<not> r (u i) (u (Suc i)) (x i) (y i)) \\<or>\n                   p (u n) (u (Suc n)) (x n);\n        \\<forall>u y.\n           u \\<in> init \\<and>\n           (\\<forall>i. r (u i) (u (Suc i)) (x i) (y i)) \\<longrightarrow>\n           q y;\n        a \\<in> init; \\<forall>i<n. Ex (r (a i) (a (Suc i)) (x i))\\<rbrakk>\n       \\<Longrightarrow> p (a n) (a (Suc n)) (x n)", "by metis"], ["proof (state)\nthis:\n  SymSystem init p r q x\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"local_init init S = Inf (S ` init)\""], ["", "definition \"zip_set A B = {u . ((fst o u) \\<in> A) \\<and> ((snd o u) \\<in> B)}\""], ["", "definition nzip:: \"('x \\<Rightarrow> 'a) \\<Rightarrow> ('x \\<Rightarrow> 'b) \\<Rightarrow> 'x \\<Rightarrow> ('a\\<times>'b)\" (infixl \"||\" 65) where \"(xs || ys) i = (xs i, ys i)\""], ["", "lemma [simp]: \"fst \\<circ> x || y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst \\<circ> x || y = x", "by (simp add: fun_eq_iff nzip_def)"], ["", "lemma [simp]: \"snd \\<circ> x || y = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd \\<circ> x || y = y", "by (simp add: fun_eq_iff nzip_def)"], ["", "lemma [simp]: \"x \\<in> A \\<Longrightarrow> y \\<in> B \\<Longrightarrow> (x || y) \\<in> zip_set A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> A; y \\<in> B\\<rbrakk>\n    \\<Longrightarrow> x || y \\<in> zip_set A B", "by (simp add: zip_set_def)"], ["", "lemma local_demonic_init: \"local_init init (\\<lambda> u . {. x . p u x.} o [:x \\<leadsto> y . r u x y :]) = \n        [:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init init\n     (\\<lambda>u.\n         {. id (p u) .} \\<circ> [: id (\\<lambda>x. id (r u x)) :]) =\n    [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n    {.u, x. p u x.} \\<circ>\n    [: id (\\<lambda>(u, x). id (r u x)) :]", "by (auto simp add: fun_eq_iff demonic_def assert_def local_init_def le_fun_def)"], ["", "lemma local_init_comp: \"u' \\<in> init' \\<Longrightarrow> (\\<forall> u. sconjunctive (S u)) \\<Longrightarrow> (local_init init S) o (local_init init' S') \n                       = local_init (zip_set init init') (\\<lambda> u . (S (fst o u)) o (S' (snd o u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n    \\<Longrightarrow> local_init init S \\<circ> local_init init' S' =\n                      local_init (zip_set init init')\n                       (\\<lambda>u.\n                           S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))", "proof (subst fun_eq_iff, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "fix x :: 'f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "assume A: \"u' \\<in> init'\""], ["proof (state)\nthis:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "assume \"\\<forall> u . sconjunctive (S u)\""], ["proof (state)\nthis:\n  \\<forall>u. sconjunctive (S u)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "from this"], ["proof (chain)\npicking this:\n  \\<forall>u. sconjunctive (S u)", "have [simp]: \"\\<And> u . sconjunctive (S u)\""], ["proof (prove)\nusing this:\n  \\<forall>u. sconjunctive (S u)\n\ngoal (1 subgoal):\n 1. \\<And>u. sconjunctive (S u)", "by simp"], ["proof (state)\nthis:\n  sconjunctive (S ?u)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "from A"], ["proof (chain)\npicking this:\n  u' \\<in> init'", "have [simp]: \"\\<And> y . S y (INF y' \\<in> init'. S' y' x) =  (INF y' \\<in> init' . S y (S' y' x))\""], ["proof (prove)\nusing this:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       S y (INF y'\\<in>init'. S' y' x) = (INF y'\\<in>init'. S y (S' y' x))", "by (simp add: sconjunctive_INF_simp image_comp)"], ["proof (state)\nthis:\n  S ?y (INF y'\\<in>init'. S' y' x) = (INF y'\\<in>init'. S ?y (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have [simp]: \"(INF y \\<in> init . (INF y' \\<in> init' . S y (S' y' x))) \\<le> (INF u \\<in> zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n    \\<le> (INF u\\<in>zip_set init init'.\n              S (fst \\<circ> u) (S' (snd \\<circ> u) x))", "proof (rule INF_greatest, auto simp add: zip_set_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "fix u :: \"'a \\<Rightarrow> 'c \\<times> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "assume [simp]: \"fst \\<circ> u \\<in> init\""], ["proof (state)\nthis:\n  fst \\<circ> u \\<in> init\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "assume [simp]: \"snd \\<circ> u \\<in> init'\""], ["proof (state)\nthis:\n  snd \\<circ> u \\<in> init'\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "have \"(INF y \\<in> init. INF y' \\<in> init'. S y (S' y' x)) \\<le> (INF y' \\<in> init'. S (fst o u) (S' y' x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n    \\<le> (INF y'\\<in>init'. S (fst \\<circ> u) (S' y' x))", "by (rule INF_lower, simp)"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> (INF y'\\<in>init'. S (fst \\<circ> u) (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "also"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> (INF y'\\<in>init'. S (fst \\<circ> u) (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "have \"... \\<le> S (fst o u) (S' (snd o u) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF y'\\<in>init'. S (fst \\<circ> u) (S' y' x))\n    \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "by (rule INF_lower, simp)"], ["proof (state)\nthis:\n  (INF y'\\<in>init'. S (fst \\<circ> u) (S' y' x))\n  \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>fst \\<circ> u \\<in> init; snd \\<circ> u \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n                         \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "finally"], ["proof (chain)\npicking this:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "show \"(INF y \\<in> init. INF y' \\<in> init'. S y (S' y' x)) \\<le> S (fst o u) (S' (snd o u) x)\""], ["proof (prove)\nusing this:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)\n\ngoal (1 subgoal):\n 1. (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n    \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)", "by simp"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> S (fst \\<circ> u) (S' (snd \\<circ> u) x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n  \\<le> (INF u\\<in>zip_set init init'.\n            S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have [simp]: \"(INF u \\<in> zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x)) \\<le> (INF y \\<in> init . (INF y' \\<in> init' . S y (S' y' x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n    \\<le> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))", "proof (rule INF_greatest, rule INF_greatest)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "fix y :: \"'a \\<Rightarrow> 'c\" and y':: \"'a \\<Rightarrow> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "assume [simp]: \"y \\<in> init\""], ["proof (state)\nthis:\n  y \\<in> init\n\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "assume [simp]: \"y' \\<in> init'\""], ["proof (state)\nthis:\n  y' \\<in> init'\n\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "have \"(INF u \\<in> zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x)) \\<le> S (fst o (y || y')) (S' (snd o (y || y')) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n    \\<le> S (fst \\<circ> y || y') (S' (snd \\<circ> y || y') x)", "by (rule INF_lower, simp)"], ["proof (state)\nthis:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> S (fst \\<circ> y || y') (S' (snd \\<circ> y || y') x)\n\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "also"], ["proof (state)\nthis:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> S (fst \\<circ> y || y') (S' (snd \\<circ> y || y') x)\n\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "have \"... \\<le>  S y (S' y' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S (fst \\<circ> y || y') (S' (snd \\<circ> y || y') x) \\<le> S y (S' y' x)", "by simp"], ["proof (state)\nthis:\n  S (fst \\<circ> y || y') (S' (snd \\<circ> y || y') x) \\<le> S y (S' y' x)\n\ngoal (1 subgoal):\n 1. \\<And>y y'.\n       \\<lbrakk>y \\<in> init; y' \\<in> init'\\<rbrakk>\n       \\<Longrightarrow> (INF u\\<in>zip_set init init'.\n                             S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n                         \\<le> S y (S' y' x)", "finally"], ["proof (chain)\npicking this:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> S y (S' y' x)", "show \"(INF u :: 'a \\<Rightarrow> 'c \\<times> 'b \\<in> zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x)) \\<le> S y (S' y' x)\""], ["proof (prove)\nusing this:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> S y (S' y' x)\n\ngoal (1 subgoal):\n 1. (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n    \\<le> S y (S' y' x)", "by simp"], ["proof (state)\nthis:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> S y (S' y' x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (INF u\\<in>zip_set init init'. S (fst \\<circ> u) (S' (snd \\<circ> u) x))\n  \\<le> (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have \"local_init init S (local_init init' S' x) = (INF y \\<in> init. S y (INF y' \\<in> init'. S' y' x)) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init init S (local_init init' S' x) =\n    (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x))", "by (simp add: local_init_def image_comp)"], ["proof (state)\nthis:\n  local_init init S (local_init init' S' x) =\n  (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "also"], ["proof (state)\nthis:\n  local_init init S (local_init init' S' x) =\n  (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have \"... = (INF y \\<in> init . (INF y' \\<in> init' . S y (S' y' x)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x)) =\n    (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))", "by simp"], ["proof (state)\nthis:\n  (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x)) =\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "also"], ["proof (state)\nthis:\n  (INF y\\<in>init. S y (INF y'\\<in>init'. S' y' x)) =\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have \"... = (INF u \\<in> zip_set init init'. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x)) =\n    (INF u\\<in>zip_set init init'.\n        S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n     x", "by (rule antisym) (simp_all add: image_comp)"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x)) =\n  (INF u\\<in>zip_set init init'.\n      S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n   x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "also"], ["proof (state)\nthis:\n  (INF y\\<in>init. INF y'\\<in>init'. S y (S' y' x)) =\n  (INF u\\<in>zip_set init init'.\n      S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n   x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "have \"... = local_init (zip_set init init') (\\<lambda> u . (S (fst o u)) o (S' (snd o u))) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF u\\<in>zip_set init init'.\n        S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n     x =\n    local_init (zip_set init init')\n     (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x", "by (simp add: local_init_def)"], ["proof (state)\nthis:\n  (INF u\\<in>zip_set init init'.\n      S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n   x =\n  local_init (zip_set init init')\n   (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>u' \\<in> init'; \\<forall>u. sconjunctive (S u)\\<rbrakk>\n       \\<Longrightarrow> local_init init S (local_init init' S' x) =\n                         local_init (zip_set init init')\n                          (\\<lambda>u.\n                              S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u))\n                          x", "finally"], ["proof (chain)\npicking this:\n  local_init init S (local_init init' S' x) =\n  local_init (zip_set init init')\n   (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x", "show \"local_init init S (local_init init' S' x) = local_init (zip_set init init') (\\<lambda>u::'a \\<Rightarrow> 'c \\<times> 'b. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x\""], ["proof (prove)\nusing this:\n  local_init init S (local_init init' S' x) =\n  local_init (zip_set init init')\n   (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x\n\ngoal (1 subgoal):\n 1. local_init init S (local_init init' S' x) =\n    local_init (zip_set init init')\n     (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x", "by simp"], ["proof (state)\nthis:\n  local_init init S (local_init init' S' x) =\n  local_init (zip_set init init')\n   (\\<lambda>u. S (fst \\<circ> u) \\<circ> S' (snd \\<circ> u)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma init_state: \"[:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :] \n      = [:z \\<leadsto> u, x . z = x:] o {.u, x . u \\<in> init \\<longrightarrow> p u x.} o [:u, x \\<leadsto> y . u \\<in> init \\<and> r u x y :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n    {.u, x. p u x.} \\<circ>\n    [: id (\\<lambda>(u, x). id (r u x)) :] =\n    [: z \\<leadsto> (u, x) . z = x :] \\<circ>\n    {.u, x. u \\<in> init \\<longrightarrow> p u x.} \\<circ>\n    [: (u, x) \\<leadsto> y . u \\<in> init \\<and> r u x y :]", "by (auto simp add: fun_eq_iff demonic_def assert_def local_init_def le_fun_def)"], ["", "lemma always_lft_rel_comp: \"(\\<box> lft_rel_st r) (fst \\<circ> u) OO (\\<box> lft_rel_st r') (snd \\<circ> u) \n              = (\\<box> lft_rel_st (\\<lambda> (u, v) (u', v') . ((r u u') OO (r' v v')))) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> lft_rel_st r) (fst \\<circ> u) OO\n    (\\<box> lft_rel_st r') (snd \\<circ> u) =\n    (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u", "proof (auto simp add: fun_eq_iff lft_rel_st_def always_def at_fun_def relcompp_exists)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa ua f.\n       \\<lbrakk>\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f);\n        \\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f)\\<rbrakk>\n       \\<Longrightarrow> (case u f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v'). r u u' OO r' v v')\n                          (u (Suc f)) (x f) (xa f)\n 2. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "fix x::\"nat \\<Rightarrow>'a\" and\n          y::\"nat \\<Rightarrow> 'b\" and\n          v::\"nat \\<Rightarrow> 'c\" and\n          n:: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa ua f.\n       \\<lbrakk>\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f);\n        \\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f)\\<rbrakk>\n       \\<Longrightarrow> (case u f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v'). r u u' OO r' v v')\n                          (u (Suc f)) (x f) (xa f)\n 2. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "assume \"\\<forall>i . r (fst (u i)) (fst (u (Suc i))) (x i) (v i)\"\n      and \"\\<forall>i . r' (snd (u i)) (snd (u (Suc i))) (v i) (y i)\""], ["proof (state)\nthis:\n  \\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (v i)\n  \\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (v i) (y i)\n\ngoal (2 subgoals):\n 1. \\<And>x xa ua f.\n       \\<lbrakk>\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f);\n        \\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f)\\<rbrakk>\n       \\<Longrightarrow> (case u f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v'). r u u' OO r' v v')\n                          (u (Suc f)) (x f) (xa f)\n 2. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "from this"], ["proof (chain)\npicking this:\n  \\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (v i)\n  \\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (v i) (y i)", "show \"(case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v') (u (Suc n)) (x n) (y n)\""], ["proof (prove)\nusing this:\n  \\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (v i)\n  \\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (v i) (y i)\n\ngoal (1 subgoal):\n 1. (case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n     (u (Suc n)) (x n) (y n)", "by (metis (mono_tags, lifting)  prod.case_eq_if relcompp.relcompI)"], ["proof (state)\nthis:\n  (case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n   (u (Suc n)) (x n) (y n)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "fix x::\"nat \\<Rightarrow>'a\" and\n          z::\"nat \\<Rightarrow> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "define a where \"a n = (SOME y . r (fst (u n)) (fst (u (Suc n))) (x n) y \\<and> r' (snd (u n)) (snd (u (Suc n))) y (z n))\"\n        for n"], ["proof (state)\nthis:\n  a ?n =\n  (SOME y.\n      r (fst (u ?n)) (fst (u (Suc ?n))) (x ?n) y \\<and>\n      r' (snd (u ?n)) (snd (u (Suc ?n))) y (z ?n))\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "assume \"\\<forall>i . (case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v') (u (Suc i)) (x i) (z i)\""], ["proof (state)\nthis:\n  \\<forall>i.\n     (case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (u (Suc i)) (x i) (z i)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "from this and a_def"], ["proof (chain)\npicking this:\n  \\<forall>i.\n     (case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (u (Suc i)) (x i) (z i)\n  a ?n =\n  (SOME y.\n      r (fst (u ?n)) (fst (u (Suc ?n))) (x ?n) y \\<and>\n      r' (snd (u ?n)) (snd (u (Suc ?n))) y (z ?n))", "have \"(\\<forall>i :: nat. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and> (\\<forall>i :: nat. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))\""], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (u (Suc i)) (x i) (z i)\n  a ?n =\n  (SOME y.\n      r (fst (u ?n)) (fst (u (Suc ?n))) (x ?n) y \\<and>\n      r' (snd (u ?n)) (snd (u (Suc ?n))) y (z ?n))\n\ngoal (1 subgoal):\n 1. (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n    (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   (case u i of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>(u', v'). r u u' OO r' v v')\n                    (u (Suc i)) (x i) (z i);\n        \\<And>n.\n           a n =\n           (SOME y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<and>\n               r' (snd (u n)) (snd (u (Suc n))) y (z n))\\<rbrakk>\n       \\<Longrightarrow> r (fst (u i)) (fst (u (Suc i))) (x i)\n                          (SOME y.\n                              r (fst (u i)) (fst (u (Suc i))) (x i) y \\<and>\n                              r' (snd (u i)) (snd (u (Suc i))) y (z i))\n 2. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   (case u i of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>(u', v'). r u u' OO r' v v')\n                    (u (Suc i)) (x i) (z i);\n        \\<And>n.\n           a n =\n           (SOME y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<and>\n               r' (snd (u n)) (snd (u (Suc n))) y (z n))\\<rbrakk>\n       \\<Longrightarrow> r' (snd (u i)) (snd (u (Suc i)))\n                          (SOME y.\n                              r (fst (u i)) (fst (u (Suc i))) (x i) y \\<and>\n                              r' (snd (u i)) (snd (u (Suc i))) y (z i))\n                          (z i)", "apply (metis (mono_tags, lifting) pick_middlep prod.collapse split_conv tfl_some)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>i.\n                   (case u i of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>(u', v'). r u u' OO r' v v')\n                    (u (Suc i)) (x i) (z i);\n        \\<And>n.\n           a n =\n           (SOME y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<and>\n               r' (snd (u n)) (snd (u (Suc n))) y (z n))\\<rbrakk>\n       \\<Longrightarrow> r' (snd (u i)) (snd (u (Suc i)))\n                          (SOME y.\n                              r (fst (u i)) (fst (u (Suc i))) (x i) y \\<and>\n                              r' (snd (u i)) (snd (u (Suc i))) y (z i))\n                          (z i)", "by (metis (mono_tags, lifting) pick_middlep prod.collapse split_conv tfl_some)"], ["proof (state)\nthis:\n  (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n  (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       \\<exists>ua.\n          (\\<forall>f. r (fst (u f)) (fst (u (Suc f))) (x f) (ua f)) \\<and>\n          (\\<forall>f. r' (snd (u f)) (snd (u (Suc f))) (ua f) (xa f))", "from this"], ["proof (chain)\npicking this:\n  (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n  (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))", "show \"\\<exists> a . (\\<forall>i . r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and> (\\<forall>i . r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))\""], ["proof (prove)\nusing this:\n  (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n  (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))\n\ngoal (1 subgoal):\n 1. \\<exists>a.\n       (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n       (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))", "by blast"], ["proof (state)\nthis:\n  \\<exists>a.\n     (\\<forall>i. r (fst (u i)) (fst (u (Suc i))) (x i) (a i)) \\<and>\n     (\\<forall>i. r' (snd (u i)) (snd (u (Suc i))) (a i) (z i))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem SymSystem_comp: \"u' \\<in> init' \\<Longrightarrow> SymSystem init p r o SymSystem init' p' r' \n                   = [:z \\<leadsto> u, x . fst o u \\<in> init \\<and> snd o u \\<in> init' \\<and> z = x:] \n                   o {. u, x . prec_st p r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st p' r' (snd \\<circ> u) y) .} \n                   o [: u, x \\<leadsto> y . (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u x y :]\"\n                   (is \"?p \\<Longrightarrow> ?S  = ?T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "assume A: \"?p\""], ["proof (state)\nthis:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \"?S = \n        [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ> {.x, y. prec_st p r x y.} \\<circ>\n        [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n        ([: z \\<leadsto> u, x . u \\<in> init' \\<and> z = x :] \\<circ> {.x, y. prec_st p' r' x y.} \\<circ>\n        [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n    {.x, y. prec_st p r x y.} \\<circ>\n    [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n    ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n     {.x, y. prec_st p' r' x y.} \\<circ>\n     [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :])", "by (unfold SymSystem_def, simp)"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n  {.x, y. prec_st p r x y.} \\<circ>\n  [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n  ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n   {.x, y. prec_st p' r' x y.} \\<circ>\n   [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n  {.x, y. prec_st p r x y.} \\<circ>\n  [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n  ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n   {.x, y. prec_st p' r' x y.} \\<circ>\n   [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \"... =  local_init init (\\<lambda>u::nat \\<Rightarrow> 'e. {. id (prec_st p r u) .} \\<circ> [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n          local_init init' (\\<lambda>u. {. id (prec_st p' r' u) .} \\<circ> [: id (\\<lambda>x::nat \\<Rightarrow> 'd. id ((\\<box> lft_rel_st r') u x)) :])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n    {.x, y. prec_st p r x y.} \\<circ>\n    [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n    ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n     {.x, y. prec_st p' r' x y.} \\<circ>\n     [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :]) =\n    local_init init\n     (\\<lambda>u.\n         {. id (prec_st p r u) .} \\<circ>\n         [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n    local_init init'\n     (\\<lambda>u.\n         {. id (prec_st p' r' u) .} \\<circ>\n         [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :])", "by (unfold local_demonic_init [THEN sym], simp)"], ["proof (state)\nthis:\n  [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n  {.x, y. prec_st p r x y.} \\<circ>\n  [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n  ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n   {.x, y. prec_st p' r' x y.} \\<circ>\n   [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :]) =\n  local_init init\n   (\\<lambda>u.\n       {. id (prec_st p r u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n  local_init init'\n   (\\<lambda>u.\n       {. id (prec_st p' r' u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n  {.x, y. prec_st p r x y.} \\<circ>\n  [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r) u x)) :] \\<circ>\n  ([: z \\<leadsto> (u, x) . u \\<in> init' \\<and> z = x :] \\<circ>\n   {.x, y. prec_st p' r' x y.} \\<circ>\n   [: id (\\<lambda>(u, x). id ((\\<box> lft_rel_st r') u x)) :]) =\n  local_init init\n   (\\<lambda>u.\n       {. id (prec_st p r u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n  local_init init'\n   (\\<lambda>u.\n       {. id (prec_st p' r' u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "from A"], ["proof (chain)\npicking this:\n  u' \\<in> init'", "have \"... = local_init (zip_set init init')\n            (\\<lambda>u. {. prec_st p r (fst \\<circ> u) .} \\<circ> [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ> ({. prec_st p' r' (snd \\<circ> u) .} \\<circ> [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]))\""], ["proof (prove)\nusing this:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. local_init init\n     (\\<lambda>u.\n         {. id (prec_st p r u) .} \\<circ>\n         [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n    local_init init'\n     (\\<lambda>u.\n         {. id (prec_st p' r' u) .} \\<circ>\n         [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :]) =\n    local_init (zip_set init init')\n     (\\<lambda>u.\n         {. prec_st p r (fst \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n         ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n          [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]))", "by (simp add: local_init_comp)"], ["proof (state)\nthis:\n  local_init init\n   (\\<lambda>u.\n       {. id (prec_st p r u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n  local_init init'\n   (\\<lambda>u.\n       {. id (prec_st p' r' u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n        [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]))\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  local_init init\n   (\\<lambda>u.\n       {. id (prec_st p r u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r) u x)) :]) \\<circ>\n  local_init init'\n   (\\<lambda>u.\n       {. id (prec_st p' r' u) .} \\<circ>\n       [: id (\\<lambda>x. id ((\\<box> lft_rel_st r') u x)) :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n        [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]))\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \" ... = local_init (zip_set init init')\n         (\\<lambda>u. {. prec_st p r (fst \\<circ> u) .} \\<circ> [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ> {. prec_st p' r' (snd \\<circ> u) .} \\<circ> [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init (zip_set init init')\n     (\\<lambda>u.\n         {. prec_st p r (fst \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n         ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n          [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])) =\n    local_init (zip_set init init')\n     (\\<lambda>u.\n         {. prec_st p r (fst \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n         {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])", "by (simp add: comp_assoc [THEN sym])"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n        [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       ({. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n        [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r') (snd \\<circ> u) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \"... =  local_init (zip_set init init')\n        (\\<lambda>u.{. x . prec_st p r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st p' r' (snd \\<circ> u) y) .} \\<circ>\n            [: (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u :]) \""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init (zip_set init init')\n     (\\<lambda>u.\n         {. prec_st p r (fst \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n         {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n         [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]) =\n    local_init (zip_set init init')\n     (\\<lambda>u.\n         {.x.\n          prec_st p r (fst \\<circ> u) x \\<and>\n          (\\<forall>y.\n              (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n              prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n         [: (\\<box> lft_rel_st\n                     (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n             u :])", "by (simp add: assert_demonic_comp always_lft_rel_comp)"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n           u :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {. prec_st p r (fst \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r) (fst \\<circ> u) :] \\<circ>\n       {. prec_st p' r' (snd \\<circ> u) .} \\<circ>\n       [: (\\<box> lft_rel_st r') (snd \\<circ> u) :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n           u :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \"... = local_init (zip_set init init')\n     (\\<lambda>u.{.x. prec_st p r (fst \\<circ> u) x \\<and> (\\<forall>y::nat \\<Rightarrow> 'd. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n         [: id (\\<lambda>x::nat \\<Rightarrow> 'c. id ((\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u x)) :])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init (zip_set init init')\n     (\\<lambda>u.\n         {.x.\n          prec_st p r (fst \\<circ> u) x \\<and>\n          (\\<forall>y.\n              (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n              prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n         [: (\\<box> lft_rel_st\n                     (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n             u :]) =\n    local_init (zip_set init init')\n     (\\<lambda>u.\n         {.x.\n          prec_st p r (fst \\<circ> u) x \\<and>\n          (\\<forall>y.\n              (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n              prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n         [: id (\\<lambda>x.\n                   id ((\\<box> lft_rel_st\n                                (\\<lambda>(u, v) (u', v').\n                                    r u u' OO r' v v'))\n                        u x)) :])", "by simp"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n           u :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: id (\\<lambda>x.\n                 id ((\\<box> lft_rel_st\n                              (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                      u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "also"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n           u :]) =\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: id (\\<lambda>x.\n                 id ((\\<box> lft_rel_st\n                              (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                      u x)) :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "have \"... = ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local_init (zip_set init init')\n     (\\<lambda>u.\n         {.x.\n          prec_st p r (fst \\<circ> u) x \\<and>\n          (\\<forall>y.\n              (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n              prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n         [: id (\\<lambda>x.\n                   id ((\\<box> lft_rel_st\n                                (\\<lambda>(u, v) (u', v').\n                                    r u u' OO r' v v'))\n                        u x)) :]) =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "by (unfold local_demonic_init, simp add: zip_set_def)"], ["proof (state)\nthis:\n  local_init (zip_set init init')\n   (\\<lambda>u.\n       {.x.\n        prec_st p r (fst \\<circ> u) x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n            prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n       [: id (\\<lambda>x.\n                 id ((\\<box> lft_rel_st\n                              (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                      u x)) :]) =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  {.u, x.\n   prec_st p r (fst \\<circ> u) x \\<and>\n   (\\<forall>y.\n       (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n       prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n  [: id (\\<lambda>(u, x).\n            id ((\\<box> lft_rel_st\n                         (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                 u x)) :]\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "finally"], ["proof (chain)\npicking this:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  {.u, x.\n   prec_st p r (fst \\<circ> u) x \\<and>\n   (\\<forall>y.\n       (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n       prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n  [: id (\\<lambda>(u, x).\n            id ((\\<box> lft_rel_st\n                         (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                 u x)) :]", "show ?thesis"], ["proof (prove)\nusing this:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  {.u, x.\n   prec_st p r (fst \\<circ> u) x \\<and>\n   (\\<forall>y.\n       (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n       prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n  [: id (\\<lambda>(u, x).\n            id ((\\<box> lft_rel_st\n                         (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                 u x)) :]\n\ngoal (1 subgoal):\n 1. SymSystem init p r \\<circ> SymSystem init' p' r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    {.u, x.\n     prec_st p r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n    [: id (\\<lambda>(u, x).\n              id ((\\<box> lft_rel_st\n                           (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                   u x)) :]", "by simp"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  {.u, x.\n   prec_st p r (fst \\<circ> u) x \\<and>\n   (\\<forall>y.\n       (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n       prec_st p' r' (snd \\<circ> u) y).} \\<circ>\n  [: id (\\<lambda>(u, x).\n            id ((\\<box> lft_rel_st\n                         (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n                 u x)) :]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma always_lft_rel_comp_a: \"(\\<box> lft_rel_st r) u OO (\\<box> lft_rel_st r') v \n              = (\\<box> lft_rel_st (\\<lambda> (u, v) (u', v') . ((r u u') OO (r' v v')))) (u || v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<box> lft_rel_st r) u OO (\\<box> lft_rel_st r') v =\n    (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n     (u || v)", "by (unfold always_lft_rel_comp [THEN sym], auto)"], ["", "theorem SymSystem_comp_a: \"u' \\<in> init' \\<Longrightarrow> SymSystem init p r o SymSystem init' p' r' \n                   = {.x . \\<forall> u v . u \\<in> init \\<and> v \\<in> init' \\<longrightarrow> (prec_st p r u x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) u x y \\<longrightarrow> prec_st p' r' v y)) .} \n                   o [: x \\<leadsto> y . \\<exists> u v . u \\<in> init \\<and> v \\<in> init' \\<and> (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) (u || v) x y :]\"\n                   (is \"?p \\<Longrightarrow> ?S = ?T\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "assume A: \"u' \\<in> init'\""], ["proof (state)\nthis:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "from A"], ["proof (chain)\npicking this:\n  u' \\<in> init'", "have [simp]: \"(\\<lambda>x. (\\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x) \\<and> (\\<forall>y. (\\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y) \\<longrightarrow> (\\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u y)))\n          = (\\<lambda>x. \\<forall>u v. u \\<in> init \\<and> v \\<in> init' \\<longrightarrow> prec_st p r u x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) u x y \\<longrightarrow> prec_st p' r' v y))\""], ["proof (prove)\nusing this:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (\\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x) \\<and>\n        (\\<forall>y.\n            (\\<exists>u.\n                u \\<in> init \\<and>\n                (\\<box> lft_rel_st r) u x y) \\<longrightarrow>\n            (\\<forall>u.\n                u \\<in> init' \\<longrightarrow> prec_st p' r' u y))) =\n    (\\<lambda>x.\n        \\<forall>u v.\n           u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n           prec_st p r u x \\<and>\n           (\\<forall>y.\n               (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n               prec_st p' r' v y))", "by (auto simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (\\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x) \\<and>\n      (\\<forall>y.\n          (\\<exists>u.\n              u \\<in> init \\<and>\n              (\\<box> lft_rel_st r) u x y) \\<longrightarrow>\n          (\\<forall>u.\n              u \\<in> init' \\<longrightarrow> prec_st p' r' u y))) =\n  (\\<lambda>x.\n      \\<forall>u v.\n         u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n         prec_st p r u x \\<and>\n         (\\<forall>y.\n             (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n             prec_st p' r' v y))\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "have [simp]: \"(\\<lambda>x y. \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y) OO (\\<lambda>x y. \\<exists>u. u \\<in> init' \\<and> (\\<box> lft_rel_st r') u x y) \n        = (\\<lambda> x y . \\<exists> u v . u \\<in> init \\<and> v \\<in> init' \\<and> (((\\<box> lft_rel_st r) u) OO ((\\<box> lft_rel_st r') v)) x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y) OO\n    (\\<lambda>x y.\n        \\<exists>u. u \\<in> init' \\<and> (\\<box> lft_rel_st r') u x y) =\n    (\\<lambda>x y.\n        \\<exists>u v.\n           u \\<in> init \\<and>\n           v \\<in> init' \\<and>\n           ((\\<box> lft_rel_st r) u OO (\\<box> lft_rel_st r') v) x y)", "by (auto simp add: fun_eq_iff)"], ["proof (state)\nthis:\n  (\\<lambda>x y.\n      \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y) OO\n  (\\<lambda>x y.\n      \\<exists>u. u \\<in> init' \\<and> (\\<box> lft_rel_st r') u x y) =\n  (\\<lambda>x y.\n      \\<exists>u v.\n         u \\<in> init \\<and>\n         v \\<in> init' \\<and>\n         ((\\<box> lft_rel_st r) u OO (\\<box> lft_rel_st r') v) x y)\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "from A"], ["proof (chain)\npicking this:\n  u' \\<in> init'", "have \"?S = {.x . \\<forall>u . u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ> \n            [: x \\<leadsto> y . \\<exists>u::nat \\<Rightarrow> 'e. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y :] \\<circ>\n            ({.x. \\<forall>u . u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ> [: x \\<leadsto> y . \\<exists>u . u \\<in> init' \\<and> (\\<box> lft_rel_st r') u x y :])\""], ["proof (prove)\nusing this:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :] \\<circ>\n    ({.x.\n      \\<forall>u.\n         u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n     [: x \\<leadsto> y . \\<exists>u.\n                            u \\<in> init' \\<and>\n                            (\\<box> lft_rel_st r') u x y :])", "by (simp add: SymSystem_rel)"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  {.x. \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  ({.x.\n    \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n   [: x \\<leadsto> y . \\<exists>u.\n                          u \\<in> init' \\<and>\n                          (\\<box> lft_rel_st r') u x y :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "also"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  {.x. \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  ({.x.\n    \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n   [: x \\<leadsto> y . \\<exists>u.\n                          u \\<in> init' \\<and>\n                          (\\<box> lft_rel_st r') u x y :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "have \"... = {. \\<lambda>x . \\<forall>u . u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ> [: x \\<leadsto> y . \\<exists>u . u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y :] \\<circ> \n          {. x . \\<forall>u . u \\<in> init' \\<longrightarrow> prec_st p' r' u x .} \\<circ> [: x \\<leadsto> y . \\<exists>u . u \\<in> init' \\<and> (\\<box> lft_rel_st r') u x y :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {.x.\n     \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :] \\<circ>\n    ({.x.\n      \\<forall>u.\n         u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n     [: x \\<leadsto> y . \\<exists>u.\n                            u \\<in> init' \\<and>\n                            (\\<box> lft_rel_st r') u x y :]) =\n    {. \\<lambda>x.\n          \\<forall>u.\n             u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :] \\<circ>\n    {.x.\n     \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init' \\<and>\n                           (\\<box> lft_rel_st r') u x y :]", "by (simp add: comp_assoc [THEN sym])"], ["proof (state)\nthis:\n  {.x. \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  ({.x.\n    \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n   [: x \\<leadsto> y . \\<exists>u.\n                          u \\<in> init' \\<and>\n                          (\\<box> lft_rel_st r') u x y :]) =\n  {. \\<lambda>x.\n        \\<forall>u.\n           u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  {.x.\n   \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init' \\<and>\n                         (\\<box> lft_rel_st r') u x y :]\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "also"], ["proof (state)\nthis:\n  {.x. \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  ({.x.\n    \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n   [: x \\<leadsto> y . \\<exists>u.\n                          u \\<in> init' \\<and>\n                          (\\<box> lft_rel_st r') u x y :]) =\n  {. \\<lambda>x.\n        \\<forall>u.\n           u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  {.x.\n   \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init' \\<and>\n                         (\\<box> lft_rel_st r') u x y :]\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "have \"... = ?T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {. \\<lambda>x.\n          \\<forall>u.\n             u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init \\<and>\n                           (\\<box> lft_rel_st r) u x y :] \\<circ>\n    {.x.\n     \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u.\n                           u \\<in> init' \\<and>\n                           (\\<box> lft_rel_st r') u x y :] =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "by (simp add: assert_demonic_comp always_lft_rel_comp_a)"], ["proof (state)\nthis:\n  {. \\<lambda>x.\n        \\<forall>u.\n           u \\<in> init \\<longrightarrow> prec_st p r u x .} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init \\<and>\n                         (\\<box> lft_rel_st r) u x y :] \\<circ>\n  {.x.\n   \\<forall>u. u \\<in> init' \\<longrightarrow> prec_st p' r' u x.} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u.\n                         u \\<in> init' \\<and>\n                         (\\<box> lft_rel_st r') u x y :] =\n  {.x.\n   \\<forall>u v.\n      u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n      prec_st p r u x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n          prec_st p' r' v y).} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u v.\n                         u \\<in> init \\<and>\n                         v \\<in> init' \\<and>\n                         (\\<box> lft_rel_st\n                                  (\\<lambda>(u, v) (u', v').\nr u u' OO r' v v'))\n                          (u || v) x y :]\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "finally"], ["proof (chain)\npicking this:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  {.x.\n   \\<forall>u v.\n      u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n      prec_st p r u x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n          prec_st p' r' v y).} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u v.\n                         u \\<in> init \\<and>\n                         v \\<in> init' \\<and>\n                         (\\<box> lft_rel_st\n                                  (\\<lambda>(u, v) (u', v').\nr u u' OO r' v v'))\n                          (u || v) x y :]", "show ?thesis"], ["proof (prove)\nusing this:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  {.x.\n   \\<forall>u v.\n      u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n      prec_st p r u x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n          prec_st p' r' v y).} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u v.\n                         u \\<in> init \\<and>\n                         v \\<in> init' \\<and>\n                         (\\<box> lft_rel_st\n                                  (\\<lambda>(u, v) (u', v').\nr u u' OO r' v v'))\n                          (u || v) x y :]\n\ngoal (1 subgoal):\n 1. SymSystem init p r \\<circ> SymSystem init' p' r' =\n    {.x.\n     \\<forall>u v.\n        u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n        prec_st p r u x \\<and>\n        (\\<forall>y.\n            (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n            prec_st p' r' v y).} \\<circ>\n    [: x \\<leadsto> y . \\<exists>u v.\n                           u \\<in> init \\<and>\n                           v \\<in> init' \\<and>\n                           (\\<box> lft_rel_st\n                                    (\\<lambda>(u, v) (u', v').\n  r u u' OO r' v v'))\n                            (u || v) x y :]", "by simp"], ["proof (state)\nthis:\n  SymSystem init p r \\<circ> SymSystem init' p' r' =\n  {.x.\n   \\<forall>u v.\n      u \\<in> init \\<and> v \\<in> init' \\<longrightarrow>\n      prec_st p r u x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) u x y \\<longrightarrow>\n          prec_st p' r' v y).} \\<circ>\n  [: x \\<leadsto> y . \\<exists>u v.\n                         u \\<in> init \\<and>\n                         v \\<in> init' \\<and>\n                         (\\<box> lft_rel_st\n                                  (\\<lambda>(u, v) (u', v').\nr u u' OO r' v v'))\n                          (u || v) x y :]\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>We show next that the composition of two SymSystem $S$ and $S'$ is not equal to the SymSystem of the \n  compostion of local transitions of $S$ and $S'$\\<close>"], ["", "definition \"initS = {u . fst (u (0::nat)) = (0::nat)}\""], ["", "definition \"localPrecS = (\\<top>:: nat \\<times> nat  \\<Rightarrow> nat \\<times> nat \\<Rightarrow> nat \\<Rightarrow> bool)\""], ["", "definition \"localRelS = (\\<lambda> (u::nat, v) (u', v'::nat) (x::nat) (y::nat) . u = 0 \\<and> u' = 1 \\<and> v = v')\""], ["", "definition \"initS' = (\\<top>::(nat \\<Rightarrow> (nat \\<times> nat)) set)\""], ["", "definition \"localPrecS' = (\\<bottom>:: nat \\<times> nat  \\<Rightarrow> nat \\<times> nat \\<Rightarrow> nat \\<Rightarrow> bool)\""], ["", "definition \"localRelS' = (\\<lambda> (u::nat, v) (u', v'::nat) (x::nat) (y::nat) . u = u')\""], ["", "definition \"symbS = SymSystem initS localPrecS localRelS\""], ["", "definition \"symbS' = SymSystem initS' localPrecS' localRelS'\""], ["", "definition \"localPrecSS' = (\\<lambda>(u::nat, v::nat) (u', v') (x::nat) . 0 < u)\""], ["", "definition \"localRelSS' = (\\<lambda> (u, v::nat) (u'::nat, v'::nat) (x::nat) (z::nat) . (u::nat) = 0 \\<and> u' = 1)\""], ["", "lemma localSS'_aux: \"( \\<lambda>x. \\<forall> (a::nat) (aa::nat) (b::nat). \\<not> (case x of (x::nat, u::nat, v::nat) \\<Rightarrow> \\<lambda>ab. u = 0 \\<and> \n    (case ab of (y, u', v') \\<Rightarrow> u' = Suc 0 \\<and> v = v')) (a, aa, b)) \n    = (\\<lambda> (x, u, v) . u > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<forall>a aa b.\n           \\<not> (case x of\n                   (x, u, v) \\<Rightarrow>\n                     \\<lambda>ab.\n                        u = 0 \\<and>\n                        (case ab of\n                         (y, u', v') \\<Rightarrow>\n                           u' = Suc 0 \\<and> v = v'))\n                   (a, aa, b)) =\n    (\\<lambda>(x, u, v). 0 < u)", "by (auto simp add: fun_eq_iff)"], ["", "lemma localSS'_aux_b: \"((\\<lambda>(x, u, v) ab. u = 0 \\<and> (case ab of (y, u', v') \\<Rightarrow> u' = Suc 0 \\<and> v = v')) OO (\\<lambda>(x, u, v) (y, u', v'). u = u')) \n    = (\\<lambda> (x, u, v) (y, u', v') . u = 0 \\<and> u' = 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, u, v) ab.\n        u = (0::'b) \\<and>\n        (case ab of (y, u', v') \\<Rightarrow> u' = Suc 0 \\<and> v = v')) OO\n    (\\<lambda>(x, u, v) (y, u', v'). u = u') =\n    (\\<lambda>(x, u, v) (y, u', v'). u = (0::'b) \\<and> u' = 1)", "by (simp add: fun_eq_iff relcompp_exists)"], ["", "lemma \"{.x, (u, v) . localPrecS (u, v) (a,b) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelS (u,v) (u',v') x y:] o \n         {.x, (u, v) . localPrecS' (u, v) (c, d) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelS' (u,v) (u',v') x y:]\n       = {.x, (u, v) . localPrecSS' (u, v) (e, f) x.} o [:x, (u,v) \\<leadsto> y, (u',v') . localRelSS' (u,v) (u',v') x y:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {.x, u, v. localPrecS (u, v) (a, b) x.} \\<circ> [: x, u, v \\<leadsto> y,\n    u', v' . localRelS (u, v) (u', v') x y :] \\<circ>\n    {.x, u, v. localPrecS' (u, v) (c, d) x.} \\<circ>\n    [: x, u, v \\<leadsto> y, u', v' . localRelS' (u, v) (u', v') x y :] =\n    {.x, u, v. localPrecSS' (u, v) (e, f) x.} \\<circ> [: x, u,\n    v \\<leadsto> y, u', v' . localRelSS' (u, v) (u', v') x y :]", "by (simp add: assert_demonic_comp localPrecS'_def localPrecS_def localRelS_def localRelS'_def \n      relcompp_exists localPrecSS'_def localRelSS'_def localSS'_aux localSS'_aux_b)"], ["", "lemma [simp]: \"[: \\<bottom>::('a \\<Rightarrow> 'b => ('c::boolean_algebra)) :] = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [: \\<bottom> :] = \\<top>", "by (simp add: fun_eq_iff demonic_def)"], ["", "definition \"symbSS' = SymSystem initS localPrecSS' localRelSS'\""], ["", "lemma symbSS'_aux: \"( \\<lambda>x. \\<forall>u. fst (u 0) = 0 \\<longrightarrow>\n                (\\<forall>n. (\\<forall>i<n. Ex ((case u i of (u, v) \\<Rightarrow> \\<lambda>(u', v'::nat) x z. u = 0 \\<and> u' = Suc 0) (u (Suc i)) (x i))) \n                \\<longrightarrow> (case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v') x. 0 < u) (u (Suc n)) (x n)) ) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<forall>u.\n           fst (u 0) = 0 \\<longrightarrow>\n           (\\<forall>n.\n               (\\<forall>i<n.\n                   Ex ((case u i of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z. u = 0 \\<and> u' = Suc 0)\n                        (u (Suc i)) (x i))) \\<longrightarrow>\n               (case u n of (u, v) \\<Rightarrow> \\<lambda>(u', v') x. 0 < u)\n                (u (Suc n)) (x n))) =\n    \\<bottom>", "apply (auto simp add: fun_eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<exists>u.\n          fst (u 0) = 0 \\<and>\n          (\\<exists>n.\n              (\\<forall>i<n.\n                  Ex ((case u i of\n                       (u, v) \\<Rightarrow>\n                         \\<lambda>(u', v') x z. u = 0 \\<and> u' = Suc 0)\n                       (u (Suc i)) (x i))) \\<and>\n              \\<not> (case u n of\n                      (u, v) \\<Rightarrow> \\<lambda>(u', v') x. 0 < u)\n                      (u (Suc n)) (x n))", "by (rule_tac x = \"\\<lambda> i . (i::nat, i)\" in exI, simp)"], ["", "lemma symbSS': \"symbSS' = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symbSS' = \\<bottom>", "by (simp add: symbSS'_def SymSystem_rel initS_def localPrecSS'_def localRelSS'_def prec_st_simp inpt_st_def symbSS'_aux)"], ["", "lemma symbS: \"symbS = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symbS = \\<top>", "proof (simp add: symbS_def SymSystem_rel initS_def localPrecS_def localRelS_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. {. \\<lambda>x.\n          \\<forall>u.\n             fst (u 0) = 0 \\<longrightarrow>\n             prec_st \\<top>\n              (\\<lambda>(u, v) (u', v') x y.\n                  u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n              u x .} \\<circ>\n    [: \\<lambda>x y.\n          \\<exists>u.\n             fst (u 0) = 0 \\<and>\n             (\\<box> lft_rel_st\n                      (\\<lambda>(u, v) (u', v') x y.\n                          u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n              u x y :] =\n    \\<top>", "have [simp]: \"(\\<lambda>x. \\<forall>u. fst (u 0) = 0 \\<longrightarrow> prec_st \\<top> (\\<lambda> (u, v) (u', v') x y . u = 0 \\<and> u' = Suc 0 \\<and> v = v') u x) = \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        \\<forall>u.\n           fst (u 0) = 0 \\<longrightarrow>\n           prec_st \\<top>\n            (\\<lambda>(u, v) (u', v') x y.\n                u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n            u x) =\n    \\<top>", "by (simp_all add: fun_eq_iff prec_st_def always_def lft_rel_st_def at_fun_def lft_pred_st_def inpt_st_def until_def)"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      \\<forall>u.\n         fst (u 0) = 0 \\<longrightarrow>\n         prec_st \\<top>\n          (\\<lambda>(u, v) (u', v') x y.\n              u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n          u x) =\n  \\<top>\n\ngoal (1 subgoal):\n 1. {. \\<lambda>x.\n          \\<forall>u.\n             fst (u 0) = 0 \\<longrightarrow>\n             prec_st \\<top>\n              (\\<lambda>(u, v) (u', v') x y.\n                  u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n              u x .} \\<circ>\n    [: \\<lambda>x y.\n          \\<exists>u.\n             fst (u 0) = 0 \\<and>\n             (\\<box> lft_rel_st\n                      (\\<lambda>(u, v) (u', v') x y.\n                          u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n              u x y :] =\n    \\<top>", "have [simp]: \"(\\<lambda>x y. \\<exists>u. fst (u 0) = 0 \\<and> (\\<box> lft_rel_st (\\<lambda> (u, v) (u', v') (x) (y). u = 0 \\<and> u' = Suc 0 \\<and> v = v')) u x y) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        \\<exists>u.\n           fst (u 0) = 0 \\<and>\n           (\\<box> lft_rel_st\n                    (\\<lambda>(u, v) (u', v') x y.\n                        u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n            u x y) =\n    \\<bottom>", "proof (auto simp add: fun_eq_iff always_def lft_rel_st_def at_fun_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "fix x::\"nat \\<Rightarrow> 'a\" and xa :: \"nat \\<Rightarrow> 'b\" and u::\"nat \\<Rightarrow> nat \\<times> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "assume A: \"\\<forall>a . (case u a of (e, f) \\<Rightarrow> \\<lambda>(u', v') x y. e = 0 \\<and> u' = Suc 0 \\<and> f = v') (u (Suc a)) (x a) (xa a)\""], ["proof (state)\nthis:\n  \\<forall>a.\n     (case u a of\n      (e, f) \\<Rightarrow>\n        \\<lambda>(u', v') x y. e = 0 \\<and> u' = Suc 0 \\<and> f = v')\n      (u (Suc a)) (x a) (xa a)\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "{"], ["proof (state)\nthis:\n  \\<forall>a.\n     (case u a of\n      (e, f) \\<Rightarrow>\n        \\<lambda>(u', v') x y. e = 0 \\<and> u' = Suc 0 \\<and> f = v')\n      (u (Suc a)) (x a) (xa a)\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "fix n:: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "from A"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     (case u a of\n      (e, f) \\<Rightarrow>\n        \\<lambda>(u', v') x y. e = 0 \\<and> u' = Suc 0 \\<and> f = v')\n      (u (Suc a)) (x a) (xa a)", "have \"fst (u n) = 0 \\<and> fst (u (Suc n)) = Suc 0\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     (case u a of\n      (e, f) \\<Rightarrow>\n        \\<lambda>(u', v') x y. e = 0 \\<and> u' = Suc 0 \\<and> f = v')\n      (u (Suc a)) (x a) (xa a)\n\ngoal (1 subgoal):\n 1. fst (u n) = 0 \\<and> fst (u (Suc n)) = Suc 0", "by (drule_tac x = n in spec, case_tac \"u n\", case_tac \"u (Suc n)\", auto)"], ["proof (state)\nthis:\n  fst (u n) = 0 \\<and> fst (u (Suc n)) = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "}"], ["proof (state)\nthis:\n  fst (u ?n3) = 0 \\<and> fst (u (Suc ?n3)) = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "note B = this"], ["proof (state)\nthis:\n  fst (u ?n3) = 0 \\<and> fst (u (Suc ?n3)) = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "then"], ["proof (chain)\npicking this:\n  fst (u ?n3) = 0 \\<and> fst (u (Suc ?n3)) = Suc 0", "have \"fst (u (Suc 0)) =  0\""], ["proof (prove)\nusing this:\n  fst (u ?n3) = 0 \\<and> fst (u (Suc ?n3)) = Suc 0\n\ngoal (1 subgoal):\n 1. fst (u (Suc 0)) = 0", "by auto"], ["proof (state)\nthis:\n  fst (u (Suc 0)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "moreover"], ["proof (state)\nthis:\n  fst (u (Suc 0)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "have \"fst (u (Suc 0)) =  Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (u (Suc 0)) = Suc 0", "using B [of 0]"], ["proof (prove)\nusing this:\n  fst (u 0) = 0 \\<and> fst (u (Suc 0)) = Suc 0\n\ngoal (1 subgoal):\n 1. fst (u (Suc 0)) = Suc 0", "by auto"], ["proof (state)\nthis:\n  fst (u (Suc 0)) = Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>x xa u.\n       \\<forall>f.\n          (case u f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n           (u (Suc f)) (x f) (xa f) \\<Longrightarrow>\n       0 < fst (u 0)", "ultimately"], ["proof (chain)\npicking this:\n  fst (u (Suc 0)) = 0\n  fst (u (Suc 0)) = Suc 0", "show \"(0) < fst (u (0))\""], ["proof (prove)\nusing this:\n  fst (u (Suc 0)) = 0\n  fst (u (Suc 0)) = Suc 0\n\ngoal (1 subgoal):\n 1. 0 < fst (u 0)", "by auto"], ["proof (state)\nthis:\n  0 < fst (u 0)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x y.\n      \\<exists>u.\n         fst (u 0) = 0 \\<and>\n         (\\<box> lft_rel_st\n                  (\\<lambda>(u, v) (u', v') x y.\n                      u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n          u x y) =\n  \\<bottom>\n\ngoal (1 subgoal):\n 1. {. \\<lambda>x.\n          \\<forall>u.\n             fst (u 0) = 0 \\<longrightarrow>\n             prec_st \\<top>\n              (\\<lambda>(u, v) (u', v') x y.\n                  u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n              u x .} \\<circ>\n    [: \\<lambda>x y.\n          \\<exists>u.\n             fst (u 0) = 0 \\<and>\n             (\\<box> lft_rel_st\n                      (\\<lambda>(u, v) (u', v') x y.\n                          u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n              u x y :] =\n    \\<top>", "show \"{. \\<lambda>x. \\<forall>u. fst (u 0) = 0 \\<longrightarrow> prec_st \\<top> (\\<lambda>(u, v) (u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v') u x .} \\<circ>\n            [: \\<lambda> x y . \\<exists>u . fst (u 0) = 0 \\<and> (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v') x y. u = 0 \\<and> u' = Suc 0 \\<and> v = v')) u x y :] =\n            \\<top>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {. \\<lambda>x.\n          \\<forall>u.\n             fst (u 0) = 0 \\<longrightarrow>\n             prec_st \\<top>\n              (\\<lambda>(u, v) (u', v') x y.\n                  u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n              u x .} \\<circ>\n    [: \\<lambda>x y.\n          \\<exists>u.\n             fst (u 0) = 0 \\<and>\n             (\\<box> lft_rel_st\n                      (\\<lambda>(u, v) (u', v') x y.\n                          u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n              u x y :] =\n    \\<top>", "by simp"], ["proof (state)\nthis:\n  {. \\<lambda>x.\n        \\<forall>u.\n           fst (u 0) = 0 \\<longrightarrow>\n           prec_st \\<top>\n            (\\<lambda>(u, v) (u', v') x y.\n                u = 0 \\<and> u' = Suc 0 \\<and> v = v')\n            u x .} \\<circ>\n  [: \\<lambda>x y.\n        \\<exists>u.\n           fst (u 0) = 0 \\<and>\n           (\\<box> lft_rel_st\n                    (\\<lambda>(u, v) (u', v') x y.\n                        u = 0 \\<and> u' = Suc 0 \\<and> v = v'))\n            u x y :] =\n  \\<top>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"symbS o symbS' \\<noteq> symbSS'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. symbS \\<circ> symbS' \\<noteq> symbSS'", "by (simp add: symbSS' symbS fun_eq_iff)"], ["", "lemma prec_st_inpt: \"prec_st (inpt_st r) r = (\\<box> (lft_pred_st (inpt_st r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prec_st (inpt_st r) r = \\<box> lft_pred_st (inpt_st r)", "by (simp add: prec_st_def neg_until_always)"], ["", "lemma \"grd (SymSystem init p r) = Sup ((- prec_st p r \\<squnion> (\\<box> (lft_pred_st (inpt_st r)))) ` init)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grd (SymSystem init p r) =\n    Sup ((- prec_st p r \\<squnion> \\<box> lft_pred_st (inpt_st r)) ` init)", "proof (unfold fun_eq_iff, auto simp add: grd_def SymSystem_rel demonic_def assert_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa u.\n       \\<lbrakk>\\<forall>f\\<in>init.\n                   prec_st p r f x \\<and>\n                   \\<not> (\\<box> lft_pred_st (inpt_st r)) f x;\n        u \\<in> init; (\\<box> lft_rel_st r) u x xa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "fix x :: \"nat \\<Rightarrow> 'a\" and  xa :: \"nat \\<Rightarrow> 'b\" and  u :: \"nat \\<Rightarrow> 'c\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa u.\n       \\<lbrakk>\\<forall>f\\<in>init.\n                   prec_st p r f x \\<and>\n                   \\<not> (\\<box> lft_pred_st (inpt_st r)) f x;\n        u \\<in> init; (\\<box> lft_rel_st r) u x xa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"\\<forall>xa::nat \\<Rightarrow> 'c\\<in>init. prec_st p r xa x \\<and> \\<not> (\\<box> lft_pred_st (inpt_st r)) xa x\"\n      and \"u \\<in> init\"\n      and \"(\\<box> lft_rel_st r) u x xa\""], ["proof (state)\nthis:\n  \\<forall>xa\\<in>init.\n     prec_st p r xa x \\<and> \\<not> (\\<box> lft_pred_st (inpt_st r)) xa x\n  u \\<in> init\n  (\\<box> lft_rel_st r) u x xa\n\ngoal (2 subgoals):\n 1. \\<And>x xa u.\n       \\<lbrakk>\\<forall>f\\<in>init.\n                   prec_st p r f x \\<and>\n                   \\<not> (\\<box> lft_pred_st (inpt_st r)) f x;\n        u \\<in> init; (\\<box> lft_rel_st r) u x xa\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<forall>xa\\<in>init.\n     prec_st p r xa x \\<and> \\<not> (\\<box> lft_pred_st (inpt_st r)) xa x\n  u \\<in> init\n  (\\<box> lft_rel_st r) u x xa", "show \"False\""], ["proof (prove)\nusing this:\n  \\<forall>xa\\<in>init.\n     prec_st p r xa x \\<and> \\<not> (\\<box> lft_pred_st (inpt_st r)) xa x\n  u \\<in> init\n  (\\<box> lft_rel_st r) u x xa\n\ngoal (1 subgoal):\n 1. False", "by (auto simp add: always_def lft_pred_st_def inpt_st_def at_fun_def lft_rel_st_def)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "fix x :: \"nat \\<Rightarrow> 'a\" and  xa :: \"nat \\<Rightarrow> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "assume B: \"xa \\<in> init\""], ["proof (state)\nthis:\n  xa \\<in> init\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"(\\<lambda>y . \\<exists>u . u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y) \\<le> \\<bottom>\""], ["proof (state)\nthis:\n  (\\<lambda>y. \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n  \\<le> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>y. \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n  \\<le> \\<bottom>", "have A: \"\\<forall> y u . u \\<notin> init \\<or> \\<not> (\\<box> lft_rel_st r) u x y\""], ["proof (prove)\nusing this:\n  (\\<lambda>y. \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n  \\<le> \\<bottom>\n\ngoal (1 subgoal):\n 1. \\<forall>y u. u \\<notin> init \\<or> \\<not> (\\<box> lft_rel_st r) u x y", "by auto"], ["proof (state)\nthis:\n  \\<forall>y u. u \\<notin> init \\<or> \\<not> (\\<box> lft_rel_st r) u x y\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "let ?y = \"\\<lambda> n . (SOME z . r (xa n) (xa (Suc n)) (x n) z)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "from B and A"], ["proof (chain)\npicking this:\n  xa \\<in> init\n  \\<forall>y u. u \\<notin> init \\<or> \\<not> (\\<box> lft_rel_st r) u x y", "have \"\\<not> (\\<box> lft_rel_st r) xa x ?y\""], ["proof (prove)\nusing this:\n  xa \\<in> init\n  \\<forall>y u. u \\<notin> init \\<or> \\<not> (\\<box> lft_rel_st r) u x y\n\ngoal (1 subgoal):\n 1. \\<not> (\\<box> lft_rel_st r) xa x\n            (\\<lambda>n. SOME z. r (xa n) (xa (Suc n)) (x n) z)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<box> lft_rel_st r) xa x\n          (\\<lambda>n. SOME z. r (xa n) (xa (Suc n)) (x n) z)\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  \\<not> (\\<box> lft_rel_st r) xa x\n          (\\<lambda>n. SOME z. r (xa n) (xa (Suc n)) (x n) z)\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "assume \"(\\<box> lft_pred_st (inpt_st r)) xa x\""], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) xa x\n\ngoal (1 subgoal):\n 1. \\<And>x f.\n       \\<lbrakk>f \\<in> init;\n        \\<forall>u. u \\<in> init \\<longrightarrow> prec_st p r u x;\n        (\\<lambda>y.\n            \\<exists>u. u \\<in> init \\<and> (\\<box> lft_rel_st r) u x y)\n        \\<le> \\<bottom>;\n        (\\<box> lft_pred_st (inpt_st r)) f x\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> (\\<box> lft_rel_st r) xa x\n          (\\<lambda>n. SOME z. r (xa n) (xa (Suc n)) (x n) z)\n  (\\<box> lft_pred_st (inpt_st r)) xa x", "show \"False\""], ["proof (prove)\nusing this:\n  \\<not> (\\<box> lft_rel_st r) xa x\n          (\\<lambda>n. SOME z. r (xa n) (xa (Suc n)) (x n) z)\n  (\\<box> lft_pred_st (inpt_st r)) xa x\n\ngoal (1 subgoal):\n 1. False", "apply (simp add: always_def lft_pred_st_def inpt_st_def at_fun_def lft_rel_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>f.\n                \\<not> r (xa f) (xa (Suc f)) (x f)\n                        (Eps (r (xa f) (xa (Suc f)) (x f)));\n     \\<forall>f. Ex (r (xa f) (xa (Suc f)) (x f))\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis (full_types) tfl_some)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"guard S = {.((grd S)::'a\\<Rightarrow>bool).} o S\""], ["", "lemma \"((grd (local_init init S))::'a\\<Rightarrow>bool) = Sup ((grd o S) ` init)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grd (local_init init S) = Sup ((grd \\<circ> S) ` init)", "by (simp add: fun_eq_iff local_init_def assert_def grd_def)"], ["", "lemma \"u \\<in> init \\<Longrightarrow> guard ([:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . p u x.} o [:u, x \\<leadsto> y . r u x y :])\n      = [:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o {.u, x . u \\<in> init \\<and> (\\<exists>a. a \\<in> init \\<and> (p a x \\<longrightarrow> Ex (r a x))) \\<and> p u x.} o [:u, x \\<leadsto> y . ((r u x y)::bool) :]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> init \\<Longrightarrow>\n    guard\n     ([: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n      {.u, x. p u x.} \\<circ>\n      [: id (\\<lambda>(u, x). id (r u x)) :]) =\n    [: z \\<leadsto> (u, x) . u \\<in> init \\<and> z = x :] \\<circ>\n    {.u, x.\n     u \\<in> init \\<and>\n     (\\<exists>a.\n         a \\<in> init \\<and> (p a x \\<longrightarrow> Ex (r a x))) \\<and>\n     p u x.} \\<circ>\n    [: id (\\<lambda>(u, x). id (r u x)) :]", "by (auto simp add: fun_eq_iff local_init_def guard_def grd_def assert_def demonic_def le_fun_def)"], ["", "lemma inpt_str_comp_aux: \"(\\<forall>n. (\\<forall>i<n. inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n        (\\<forall> i < n . inpt_st r ((fst o u) i) ((fst o u) (Suc i)) (x i) \\<and> (\\<forall>y. r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\"\n        (is \"(\\<forall> n . ?p n) \\<longrightarrow> ?q n\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (\\<forall>i<n.\n            inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n             (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n        (\\<forall>y.\n            r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n            inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n    (\\<forall>i<n.\n        inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n        (\\<forall>y.\n            r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n            inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<forall>n.\n        (\\<forall>i<n.\n            inpt_st\n             (\\<lambda>a.\n                 case a of\n                 (u, v) \\<Rightarrow>\n                   \\<lambda>a.\n                      case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n             (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n        (\\<forall>y.\n            r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n            inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n    (\\<forall>i<0.\n        inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n        (\\<forall>y.\n            r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n            inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n 2. \\<And>n.\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i)))\n                y)) \\<Longrightarrow>\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<Suc n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (\\<forall>n.\n        (\\<forall>i<n.\n            inpt_st\n             (\\<lambda>a.\n                 case a of\n                 (u, v) \\<Rightarrow>\n                   \\<lambda>a.\n                      case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n             (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n        (\\<forall>y.\n            r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n            inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n    (\\<forall>i<0.\n        inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n        (\\<forall>y.\n            r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n            inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n 2. \\<And>n.\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i)))\n                y)) \\<Longrightarrow>\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<Suc n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (\\<forall>i<n.\n            inpt_st\n             (\\<lambda>a.\n                 case a of\n                 (u, v) \\<Rightarrow>\n                   \\<lambda>a.\n                      case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n             (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n        (\\<forall>y.\n            r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n            inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n    (\\<forall>i<0.\n        inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n        (\\<forall>y.\n            r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n            inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "by auto"], ["proof (state)\nthis:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<0.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i)))\n                y)) \\<Longrightarrow>\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<Suc n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i)))\n                y)) \\<Longrightarrow>\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<Suc n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i)))\n                y)) \\<Longrightarrow>\n       (\\<forall>n.\n           (\\<forall>i<n.\n               inpt_st\n                (\\<lambda>a.\n                    case a of\n                    (u, v) \\<Rightarrow>\n                      \\<lambda>a.\n                         case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n                (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n           inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n           (\\<forall>y.\n               r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n               inpt_st r' (snd (u n)) (snd (u (Suc n)))\n                y)) \\<longrightarrow>\n       (\\<forall>i<Suc n.\n           inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n            (x i) \\<and>\n           (\\<forall>y.\n               r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n               inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>n.\n        (\\<forall>i<n.\n            inpt_st\n             (\\<lambda>a.\n                 case a of\n                 (u, v) \\<Rightarrow>\n                   \\<lambda>a.\n                      case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n             (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n        (\\<forall>y.\n            r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n            inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n    (\\<forall>i<Suc n.\n        inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n        (\\<forall>y.\n            r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n            inpt_st r' (snd (u i)) (snd (u (Suc i))) y))", "proof auto"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "fix i::nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume B: \"\\<forall> n . ?p n\""], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have A: \"?p n\" (is \"?A \\<longrightarrow> ?B\")"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<n.\n        inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n         (u (Suc i)) (x i)) \\<longrightarrow>\n    inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n    (\\<forall>y.\n        r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n        inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "from Suc and B"], ["proof (chain)\npicking this:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have C: \"?q n\""], ["proof (prove)\nusing this:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n       (\\<forall>y.\n           r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n           inpt_st r' (snd (u i)) (snd (u (Suc i))) y)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<n.\n     inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume \"i < Suc n\""], ["proof (state)\nthis:\n  i < Suc n\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "then"], ["proof (chain)\npicking this:\n  i < Suc n", "show \"inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\""], ["proof (prove)\nusing this:\n  i < Suc n\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < Suc n; ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<lbrakk>i < Suc n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "assume \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < Suc n; ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<lbrakk>i < Suc n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "then"], ["proof (chain)\npicking this:\n  i < n", "show ?thesis"], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "by (metis Suc.IH B comp_apply)"], ["proof (state)\nthis:\n  inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "assume \"\\<not> i < n\""], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "from this and \\<open>i < Suc n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> i < n\n  i < Suc n", "have [simp]: \"i = n\""], ["proof (prove)\nusing this:\n  \\<not> i < n\n  i < Suc n\n\ngoal (1 subgoal):\n 1. i = n", "by simp"], ["proof (state)\nthis:\n  i = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<not> ?P \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "assume \"?A\""], ["proof (state)\nthis:\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<not> ?P \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "from this and A"], ["proof (chain)\npicking this:\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have D: \"?B\""], ["proof (prove)\nusing this:\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n    (\\<forall>y.\n        r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n        inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "by simp"], ["proof (state)\nthis:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n 2. \\<not> ?P \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "from D"], ["proof (chain)\npicking this:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "by (metis \\<open>i = n\\<close>)"], ["proof (state)\nthis:\n  inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "assume \"\\<not> ?A\""], ["proof (state)\nthis:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))", "obtain j where j: \"j < n \\<and> \\<not> inpt_st (\\<lambda> (u, v) . \\<lambda> (u', v') . r u u' OO r' v v') (u j) (u (Suc j)) (x j)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        j < n \\<and>\n        \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n                (u (Suc j)) (x j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "with C"], ["proof (chain)\npicking this:\n  \\<forall>i<n.\n     inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)", "have \"inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and> (\\<forall>y. r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow> inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\""], ["proof (prove)\nusing this:\n  \\<forall>i<n.\n     inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n    (\\<forall>y.\n        r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n        inpt_st r' (snd (u j)) (snd (u (Suc j))) y)", "by auto"], ["proof (state)\nthis:\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "with j"], ["proof (chain)\npicking this:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "apply (case_tac \"u j\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>j < n \\<and>\n                \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u j) (u (Suc j)) (x j);\n        inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n        (\\<forall>y.\n            r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n            inpt_st r' (snd (u j)) (snd (u (Suc j))) y);\n        u j = (a, b)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "apply (case_tac \"u (Suc j)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>j < n \\<and>\n                \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u j) (u (Suc j)) (x j);\n        inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n        (\\<forall>y.\n            r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n            inpt_st r' (snd (u j)) (snd (u (Suc j))) y);\n        u j = (a, b); u (Suc j) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)", "apply (simp add: inpt_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>j < n \\<and>\n                (\\<forall>xa. \\<not> (r a aa OO r' b ba) (x j) xa);\n        (\\<exists>y. r a aa (x j) y) \\<and>\n        (\\<forall>y.\n            r a aa (x j) y \\<longrightarrow> (\\<exists>ya. r' b ba y ya));\n        u j = (a, b); u (Suc j) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>y. r (fst (u n)) (fst (u (Suc n))) (x n) y", "by (metis relcompp.relcompI)"], ["proof (state)\nthis:\n  inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inpt_st r (fst (u i)) (fst (u (Suc i))) (x i)\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "fix i::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "fix y :: 'e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume B: \"\\<forall> n . ?p n\""], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have A: \"?p n\" (is \"?A \\<longrightarrow> ?B\")"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. (\\<forall>i<n.\n        inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n         (u (Suc i)) (x i)) \\<longrightarrow>\n    inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n    (\\<forall>y.\n        r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n        inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "by simp"], ["proof (state)\nthis:\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "from Suc and B"], ["proof (chain)\npicking this:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have C: \"\\<forall>i<n. inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and> (\\<forall>y. r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\""], ["proof (prove)\nusing this:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<forall>i<n.\n       inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n       (\\<forall>y.\n           r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n           inpt_st r' (snd (u i)) (snd (u (Suc i))) y)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<n.\n     inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume E: \"r (fst (u i)) (fst (u (Suc i))) (x i) y\""], ["proof (state)\nthis:\n  r (fst (u i)) (fst (u (Suc i))) (x i) y\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume \"i < Suc n\""], ["proof (state)\nthis:\n  i < Suc n\n\ngoal (1 subgoal):\n 1. \\<And>i y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st\n                        (\\<lambda>a.\n                            case a of\n                            (u, v) \\<Rightarrow>\n                              \\<lambda>a.\n                                 case a of\n                                 (u', v') \\<Rightarrow> r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        i < Suc n; r (fst (u i)) (fst (u (Suc i))) (x i) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "then"], ["proof (chain)\npicking this:\n  i < Suc n", "show \"inpt_st r' (snd (u i)) (snd (u (Suc i))) y\""], ["proof (prove)\nusing this:\n  i < Suc n\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < Suc n; ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n 2. \\<lbrakk>i < Suc n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume \"i < n\""], ["proof (state)\nthis:\n  i < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < Suc n; ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n 2. \\<lbrakk>i < Suc n; \\<not> ?P1\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "from this and E and C"], ["proof (chain)\npicking this:\n  i < n\n  r (fst (u i)) (fst (u (Suc i))) (x i) y\n  \\<forall>i<n.\n     inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  i < n\n  r (fst (u i)) (fst (u (Suc i))) (x i) y\n  \\<forall>i<n.\n     inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "by simp"], ["proof (state)\nthis:\n  inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "assume \"\\<not> i < n\""], ["proof (state)\nthis:\n  \\<not> i < n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "from this and \\<open>i < Suc n\\<close>"], ["proof (chain)\npicking this:\n  \\<not> i < n\n  i < Suc n", "have [simp]: \"i = n\""], ["proof (prove)\nusing this:\n  \\<not> i < n\n  i < Suc n\n\ngoal (1 subgoal):\n 1. i = n", "by simp"], ["proof (state)\nthis:\n  i = n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < Suc n; \\<not> i < n\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "proof (cases ?A)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<n.\n       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n        (u (Suc i)) (x i) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n 2. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "case True"], ["proof (state)\nthis:\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n\ngoal (2 subgoals):\n 1. \\<forall>i<n.\n       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n        (u (Suc i)) (x i) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n 2. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "with A"], ["proof (chain)\npicking this:\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)", "have D: \"?B\""], ["proof (prove)\nusing this:\n  (\\<forall>i<n.\n      inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n       (u (Suc i)) (x i)) \\<longrightarrow>\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n    (\\<forall>y.\n        r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n        inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "by simp"], ["proof (state)\nthis:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (2 subgoals):\n 1. \\<forall>i<n.\n       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n        (u (Suc i)) (x i) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n 2. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "from D and E"], ["proof (chain)\npicking this:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  r (fst (u i)) (fst (u (Suc i))) (x i) y", "show ?thesis"], ["proof (prove)\nusing this:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n  (\\<forall>y.\n      r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n      inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  r (fst (u i)) (fst (u (Suc i))) (x i) y\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "by (metis \\<open>i = n\\<close>)"], ["proof (state)\nthis:\n  inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))", "obtain j where j: \"j < n \\<and> \\<not> inpt_st (\\<lambda> (u, v) . \\<lambda> (u', v') . r u u' OO r' v v') (u j) (u (Suc j)) (x j)\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i<n.\n             inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n              (u (Suc i)) (x i))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        j < n \\<and>\n        \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n                (u (Suc j)) (x j) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "with C"], ["proof (chain)\npicking this:\n  \\<forall>i<n.\n     inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)", "have \"inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and> (\\<forall>y. r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow> inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\""], ["proof (prove)\nusing this:\n  \\<forall>i<n.\n     inpt_st r (fst (u i)) (fst (u (Suc i))) (x i) \\<and>\n     (\\<forall>y.\n         r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n         inpt_st r' (snd (u i)) (snd (u (Suc i))) y)\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n    (\\<forall>y.\n        r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n        inpt_st r' (snd (u j)) (snd (u (Suc j))) y)", "by auto"], ["proof (state)\nthis:\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i<n.\n               inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n                (u (Suc i)) (x i)) \\<Longrightarrow>\n    inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "with j"], ["proof (chain)\npicking this:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)", "show ?thesis"], ["proof (prove)\nusing this:\n  j < n \\<and>\n  \\<not> inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u j)\n          (u (Suc j)) (x j)\n  inpt_st r (fst (u j)) (fst (u (Suc j))) (x j) \\<and>\n  (\\<forall>y.\n      r (fst (u j)) (fst (u (Suc j))) (x j) y \\<longrightarrow>\n      inpt_st r' (snd (u j)) (snd (u (Suc j))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u i)) (snd (u (Suc i))) y", "by (case_tac \"u j\", case_tac \"u (Suc j)\", simp add: inpt_st_def, metis relcompp.relcompI)"], ["proof (state)\nthis:\n  inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inpt_st r' (snd (u i)) (snd (u (Suc i))) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<forall>n.\n      (\\<forall>i<n.\n          inpt_st\n           (\\<lambda>a.\n               case a of\n               (u, v) \\<Rightarrow>\n                 \\<lambda>a.\n                    case a of (u', v') \\<Rightarrow> r u u' OO r' v v')\n           (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n      (\\<forall>y.\n          r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n          inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<longrightarrow>\n  (\\<forall>i<Suc n.\n      inpt_st r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) \\<and>\n      (\\<forall>y.\n          r (fst (u i)) (fst (u (Suc i))) (x i) y \\<longrightarrow>\n          inpt_st r' (snd (u i)) (snd (u (Suc i))) y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inpt_str_comp_aux_a: \"(\\<forall>n. (\\<forall>i<n. inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n        inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)) \\<Longrightarrow>\n        inpt_st r ((fst o u) n) ((fst o u) (Suc n)) (x n) \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    inpt_st r ((fst \\<circ> u) n) ((fst \\<circ> u) (Suc n)) (x n) \\<and>\n    (\\<forall>y.\n        r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n        inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "by (cut_tac n = \"Suc n\" and r = r and r' = r' and u = u and x = x in inpt_str_comp_aux, simp)"], ["", "definition \"rel_st r r' = (\\<lambda> (u, v) (u', v') x z . inpt_st r u u' x \\<and> (\\<forall> y . r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and> (r u u' OO r' v v') x z)\""], ["", "lemma inpt_str_comp_a: \"(prec_st (inpt_st r) r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st (inpt_st r') r' (snd \\<circ> u) y)) = \n    prec_st (\\<lambda> u u' x . inpt_st r (fst u) (fst u') x \\<and> (\\<forall> y . r (fst u) (fst u') x y \\<longrightarrow> (inpt_st r' (snd u) (snd u') y))) (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st (inpt_st r') r' (snd \\<circ> u) y)) =\n    prec_st\n     (\\<lambda>u u' x.\n         inpt_st r (fst u) (fst u') x \\<and>\n         (\\<forall>y.\n             r (fst u) (fst u') x y \\<longrightarrow>\n             inpt_st r' (snd u) (snd u') y))\n     (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x", "proof (auto simp add: prec_st_inpt prec_st_simp)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 3. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 4. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "fix n:: nat"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 3. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 4. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume \"(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\""], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 3. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 4. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "then"], ["proof (chain)\npicking this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x", "show \"inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\""], ["proof (prove)\nusing this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)", "by (simp add: always_def lft_pred_st_def at_fun_def)"], ["proof (state)\nthis:\n  inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "fix n:: nat and y :: 'c"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume A: \"(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\""], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume B: \"r (fst (u n)) (fst (u (Suc n))) (x n) y\""], ["proof (state)\nthis:\n  r (fst (u n)) (fst (u (Suc n))) (x n) y\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume C: \"\\<forall>i<n. inpt_st (\\<lambda>(u::'a, v::'d) (u'::'a, v'::'d). r u u' OO r' v v') (u i) (u (Suc i)) (x i)\""], ["proof (state)\nthis:\n  \\<forall>i<n.\n     inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i))\n      (x i)\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "let ?y = \"\\<lambda> i . (if i = n then y else (SOME y . r ((fst o u) i) ((fst o u) (Suc i)) (x i) y))\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume \"\\<forall>y . (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y\""], ["proof (state)\nthis:\n  \\<forall>y.\n     (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n     (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>y.\n     (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n     (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "have D: \"(\\<box> lft_rel_st r) (fst \\<circ> u) x ?y \\<longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) ?y\""], ["proof (prove)\nusing this:\n  \\<forall>y.\n     (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n     (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y\n\ngoal (1 subgoal):\n 1. (\\<box> lft_rel_st r) (fst \\<circ> u) x\n     (\\<lambda>i.\n         if i = n then y\n         else SOME y.\n                 r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i)\n                  y) \\<longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n     (\\<lambda>i.\n         if i = n then y\n         else SOME y.\n                 r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)", "by simp"], ["proof (state)\nthis:\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y.\n               r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i)\n                y) \\<longrightarrow>\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "from A and B"], ["proof (chain)\npicking this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n  r (fst (u n)) (fst (u (Suc n))) (x n) y", "have E: \"(\\<box> lft_rel_st r) (fst \\<circ> u) x ?y\""], ["proof (prove)\nusing this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n  r (fst (u n)) (fst (u (Suc n))) (x n) y\n\ngoal (1 subgoal):\n 1. (\\<box> lft_rel_st r) (fst \\<circ> u) x\n     (\\<lambda>i.\n         if i = n then y\n         else SOME y.\n                 r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)", "apply (auto simp add: always_def at_fun_def lft_rel_st_def lft_pred_st_def inpt_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>f. Ex (r (fst (u f)) (fst (u (Suc f))) (x f));\n        r (fst (u n)) (fst (u (Suc n))) (x n) y; f \\<noteq> n\\<rbrakk>\n       \\<Longrightarrow> r (fst (u f)) (fst (u (Suc f))) (x f)\n                          (Eps (r (fst (u f)) (fst (u (Suc f))) (x f)))", "by (metis tfl_some)"], ["proof (state)\nthis:\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "from D and E"], ["proof (chain)\npicking this:\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y.\n               r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i)\n                y) \\<longrightarrow>\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)", "have \"(\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) ?y\""], ["proof (prove)\nusing this:\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y.\n               r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i)\n                y) \\<longrightarrow>\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n\ngoal (1 subgoal):\n 1. (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n     (\\<lambda>i.\n         if i = n then y\n         else SOME y.\n                 r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)", "by simp"], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n\ngoal (3 subgoals):\n 1. \\<And>n y.\n       \\<lbrakk>(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x;\n        \\<forall>y.\n           (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n           (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y;\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n 2. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 3. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "from A and E and this"], ["proof (chain)\npicking this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)", "show \"inpt_st r' (snd (u n)) (snd (u (Suc n))) y\""], ["proof (prove)\nusing this:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u)\n   (\\<lambda>i.\n       if i = n then y\n       else SOME y. r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i)) (x i) y)\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "apply (simp add: always_def lft_pred_st_def at_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>f. inpt_st r (fst (u f)) (fst (u (Suc f))) (x f);\n     \\<forall>f.\n        lft_rel_st r ((fst \\<circ> u)[f ..]) (x[f ..])\n         ((\\<lambda>i.\n              if i = n then y\n              else Eps (r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n                         (x i)))[f ..]);\n     \\<forall>f.\n        inpt_st r' (snd (u f)) (snd (u (Suc f)))\n         (if f = n then y\n          else Eps (r ((fst \\<circ> u) f) ((fst \\<circ> u) (Suc f))\n                     (x f)))\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "apply (drule_tac x = n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>f.\n                lft_rel_st r ((fst \\<circ> u)[f ..]) (x[f ..])\n                 ((\\<lambda>i.\n                      if i = n then y\n                      else Eps (r ((fst \\<circ> u) i)\n                                 ((fst \\<circ> u) (Suc i)) (x i)))[f ..]);\n     \\<forall>f.\n        inpt_st r' (snd (u f)) (snd (u (Suc f)))\n         (if f = n then y\n          else Eps (r ((fst \\<circ> u) f) ((fst \\<circ> u) (Suc f)) (x f)));\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "apply (drule_tac x = n in spec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>f.\n                inpt_st r' (snd (u f)) (snd (u (Suc f)))\n                 (if f = n then y\n                  else Eps (r ((fst \\<circ> u) f) ((fst \\<circ> u) (Suc f))\n                             (x f)));\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n);\n     lft_rel_st r ((fst \\<circ> u)[n ..]) (x[n ..])\n      ((\\<lambda>i.\n           if i = n then y\n           else Eps (r ((fst \\<circ> u) i) ((fst \\<circ> u) (Suc i))\n                      (x i)))[n ..])\\<rbrakk>\n    \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "by (drule_tac x = n in spec, simp)"], ["proof (state)\nthis:\n  inpt_st r' (snd (u n)) (snd (u (Suc n))) y\n\ngoal (2 subgoals):\n 1. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume \"\\<forall> n . (\\<forall>i<n. inpt_st (\\<lambda>(u::'a, v::'d) (u'::'a, v'::'d). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n            inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y::'c. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\""], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (2 subgoals):\n 1. \\<forall>n.\n       (\\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)) \\<longrightarrow>\n       inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n       (\\<forall>y.\n           r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n           inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n    (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n 2. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "show \"(\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x", "apply (auto simp add: always_def lft_pred_st_def at_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st r (fst (u f)) (fst (u (Suc f))) (x f)", "apply (drule inpt_str_comp_aux_a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       inpt_st r ((fst \\<circ> u) (?n13 f)) ((fst \\<circ> u) (Suc (?n13 f)))\n        (x (?n13 f)) \\<and>\n       (\\<forall>y.\n           r (fst (u (?n13 f))) (fst (u (Suc (?n13 f)))) (x (?n13 f))\n            y \\<longrightarrow>\n           inpt_st r' (snd (u (?n13 f))) (snd (u (Suc (?n13 f))))\n            y) \\<Longrightarrow>\n       inpt_st r (fst (u f)) (fst (u (Suc f))) (x f)", "by auto"], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) (fst \\<circ> u) x\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "fix y::\"nat \\<Rightarrow> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume \"\\<forall> n . (\\<forall>i<n. inpt_st (\\<lambda>(u::'a, v::'d) (u'::'a, v'::'d). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n            inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and> (\\<forall>y::'c. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\""], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "moreover"], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "assume \" (\\<box> lft_rel_st r) (fst \\<circ> u) x y\""], ["proof (state)\nthis:\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x y\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y\\<rbrakk>\n       \\<Longrightarrow> (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x y", "show \"(\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n  (\\<box> lft_rel_st r) (fst \\<circ> u) x y\n\ngoal (1 subgoal):\n 1. (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y", "apply (auto simp add: always_def lft_pred_st_def at_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>n.\n                   (\\<forall>i<n.\n                       inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')\n                        (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                   inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n                   (\\<forall>y.\n                       r (fst (u n)) (fst (u (Suc n))) (x n)\n                        y \\<longrightarrow>\n                       inpt_st r' (snd (u n)) (snd (u (Suc n))) y);\n        \\<forall>f.\n           lft_rel_st r ((fst \\<circ> u)[f ..]) (x[f ..]) (y[f ..])\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u f)) (snd (u (Suc f))) (y f)", "apply (drule inpt_str_comp_aux_a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<lbrakk>\\<forall>f.\n                   lft_rel_st r ((fst \\<circ> u)[f ..]) (x[f ..]) (y[f ..]);\n        inpt_st r ((fst \\<circ> u) (?n16 f))\n         ((fst \\<circ> u) (Suc (?n16 f))) (x (?n16 f)) \\<and>\n        (\\<forall>y.\n            r (fst (u (?n16 f))) (fst (u (Suc (?n16 f)))) (x (?n16 f))\n             y \\<longrightarrow>\n            inpt_st r' (snd (u (?n16 f))) (snd (u (Suc (?n16 f))))\n             y)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u f)) (snd (u (Suc f))) (y f)", "by (auto simp add:  lft_rel_st_def)"], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r')) (snd \\<circ> u) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inpt_str_comp_b: \"prec_st (\\<lambda> u u' x . inpt_st r (fst u) (fst u') x \\<and> \n    (\\<forall> y . r (fst u) (fst u') x y \\<longrightarrow> (inpt_st r' (snd u) (snd u') y))) (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x\n    =  (\\<box> (lft_pred_st (inpt_st (rel_st r r')))) u x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prec_st\n     (\\<lambda>u u' x.\n         inpt_st r (fst u) (fst u') x \\<and>\n         (\\<forall>y.\n             r (fst u) (fst u') x y \\<longrightarrow>\n             inpt_st r' (snd u) (snd u') y))\n     (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') u x =\n    (\\<box> lft_pred_st (inpt_st (rel_st r r'))) u x", "proof (auto simp add: prec_st_simp always_def lft_pred_st_def at_fun_def rel_st_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "fix m::nat"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "assume A: \"\\<forall>n . (\\<forall>i<n. inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i) (u (Suc i)) (x i)) \\<longrightarrow>\n                      inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \n                      \\<and> (\\<forall>y. r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\" (is \"\\<forall> n . ?p n \\<longrightarrow> ?q n \\<and> ?r n\")"], ["proof (state)\nthis:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have \"?q m\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)", "by (drule_tac n = m in inpt_str_comp_aux_a, simp)"], ["proof (state)\nthis:\n  inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "then"], ["proof (chain)\npicking this:\n  inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)", "obtain y where B: \"r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y\""], ["proof (prove)\nusing this:\n  inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m)\n         y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: inpt_st_def)"], ["proof (state)\nthis:\n  r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "from A"], ["proof (chain)\npicking this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)", "have \"?r m\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     (\\<forall>i<n.\n         inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n          (u (Suc i)) (x i)) \\<longrightarrow>\n     inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n     (\\<forall>y.\n         r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n         inpt_st r' (snd (u n)) (snd (u (Suc n))) y)\n\ngoal (1 subgoal):\n 1. \\<forall>y.\n       r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n       inpt_st r' (snd (u m)) (snd (u (Suc m))) y", "by (drule_tac n = m in inpt_str_comp_aux_a, simp)"], ["proof (state)\nthis:\n  \\<forall>y.\n     r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n     inpt_st r' (snd (u m)) (snd (u (Suc m))) y\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       \\<forall>n.\n          (\\<forall>i<n.\n              inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n               (u (Suc i)) (x i)) \\<longrightarrow>\n          inpt_st r (fst (u n)) (fst (u (Suc n))) (x n) \\<and>\n          (\\<forall>y.\n              r (fst (u n)) (fst (u (Suc n))) (x n) y \\<longrightarrow>\n              inpt_st r' (snd (u n)) (snd (u (Suc n))) y) \\<Longrightarrow>\n       inpt_st\n        (\\<lambda>(u, v) (u', v') x z.\n            inpt_st r u u' x \\<and>\n            (\\<forall>y.\n                r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n            (r u u' OO r' v v') x z)\n        (u f) (u (Suc f)) (x f)\n 2. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 3. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "from this B"], ["proof (chain)\npicking this:\n  \\<forall>y.\n     r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n     inpt_st r' (snd (u m)) (snd (u (Suc m))) y\n  r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y", "show \"inpt_st (\\<lambda>(u, v) (u', v') (x::'c) z. inpt_st r u u' x \\<and> (\\<forall>y. r u u' x y \n          \\<longrightarrow> inpt_st r' v v' y) \\<and> (r u u' OO r' v v') x z) (u m) (u (Suc m)) (x m)\""], ["proof (prove)\nusing this:\n  \\<forall>y.\n     r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n     inpt_st r' (snd (u m)) (snd (u (Suc m))) y\n  r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y\n\ngoal (1 subgoal):\n 1. inpt_st\n     (\\<lambda>(u, v) (u', v') x z.\n         inpt_st r u u' x \\<and>\n         (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n         (r u u' OO r' v v') x z)\n     (u m) (u (Suc m)) (x m)", "apply (case_tac \"u m\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<forall>y.\n                   r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n                   inpt_st r' (snd (u m)) (snd (u (Suc m))) y;\n        r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y;\n        u m = (a, b)\\<rbrakk>\n       \\<Longrightarrow> inpt_st\n                          (\\<lambda>(u, v) (u', v') x z.\n                              inpt_st r u u' x \\<and>\n                              (\\<forall>y.\n                                  r u u' x y \\<longrightarrow>\n                                  inpt_st r' v v' y) \\<and>\n                              (r u u' OO r' v v') x z)\n                          (u m) (u (Suc m)) (x m)", "apply (case_tac \"u (Suc m)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<forall>y.\n                   r (fst (u m)) (fst (u (Suc m))) (x m) y \\<longrightarrow>\n                   inpt_st r' (snd (u m)) (snd (u (Suc m))) y;\n        r ((fst \\<circ> u) m) ((fst \\<circ> u) (Suc m)) (x m) y;\n        u m = (a, b); u (Suc m) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> inpt_st\n                          (\\<lambda>(u, v) (u', v') x z.\n                              inpt_st r u u' x \\<and>\n                              (\\<forall>y.\n                                  r u u' x y \\<longrightarrow>\n                                  inpt_st r' v v' y) \\<and>\n                              (r u u' OO r' v v') x z)\n                          (u m) (u (Suc m)) (x m)", "apply (simp add: inpt_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b aa ba.\n       \\<lbrakk>\\<forall>y.\n                   r a aa (x m) y \\<longrightarrow>\n                   (\\<exists>ya. r' b ba y ya);\n        r a aa (x m) y; u m = (a, b); u (Suc m) = (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> Ex (r a aa (x m)) \\<and>\n                         (\\<exists>y. (r a aa OO r' b ba) (x m) y)", "by (metis relcompp.relcompI)"], ["proof (state)\nthis:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "fix m::nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "assume \" \\<forall> m. inpt_st (\\<lambda>(u, v) (u', v') (x) z. inpt_st r u u' x \\<and> (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \n          \\<and> (r u u' OO r' v v') x z) (u m) (u (Suc m)) (x m)\" (is \"\\<forall> m . ?p m\")"], ["proof (state)\nthis:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)", "have \"?p m\""], ["proof (prove)\nusing this:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. inpt_st\n     (\\<lambda>(u, v) (u', v') x z.\n         inpt_st r u u' x \\<and>\n         (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n         (r u u' OO r' v v') x z)\n     (u m) (u (Suc m)) (x m)", "by simp"], ["proof (state)\nthis:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i)\\<rbrakk>\n       \\<Longrightarrow> inpt_st r (fst (u n)) (fst (u (Suc n))) (x n)\n 2. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "then"], ["proof (chain)\npicking this:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)", "show \" inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)\""], ["proof (prove)\nusing this:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)", "apply (simp add: inpt_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       (case u m of\n        (u, v) \\<Rightarrow>\n          \\<lambda>(u', v') x z.\n             Ex (r u u' x) \\<and>\n             (\\<forall>y.\n                 r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n             (r u u' OO r' v v') x z)\n        (u (Suc m)) (x m) y \\<Longrightarrow>\n    \\<exists>y. r (fst (u m)) (fst (u (Suc m))) (x m) y", "by (case_tac \"u m\", case_tac \"u (Suc m)\", simp)"], ["proof (state)\nthis:\n  inpt_st r (fst (u m)) (fst (u (Suc m))) (x m)\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "fix m::nat and y :: 'e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "assume \" \\<forall> m. inpt_st (\\<lambda>(u, v) (u', v') (x) z. inpt_st r u u' x \\<and> (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \n          \\<and> (r u u' OO r' v v') x z) (u m) (u (Suc m)) (x m)\" (is \"\\<forall> m . ?p m\")"], ["proof (state)\nthis:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "then"], ["proof (chain)\npicking this:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)", "have \"?p m\""], ["proof (prove)\nusing this:\n  \\<forall>m.\n     inpt_st\n      (\\<lambda>(u, v) (u', v') x z.\n          inpt_st r u u' x \\<and>\n          (\\<forall>y.\n              r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n          (r u u' OO r' v v') x z)\n      (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. inpt_st\n     (\\<lambda>(u, v) (u', v') x z.\n         inpt_st r u u' x \\<and>\n         (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n         (r u u' OO r' v v') x z)\n     (u m) (u (Suc m)) (x m)", "by simp"], ["proof (state)\nthis:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "moreover"], ["proof (state)\nthis:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "assume \"r (fst (u m)) (fst (u (Suc m))) (x m) y\""], ["proof (state)\nthis:\n  r (fst (u m)) (fst (u (Suc m))) (x m) y\n\ngoal (1 subgoal):\n 1. \\<And>n y.\n       \\<lbrakk>\\<forall>f.\n                   inpt_st\n                    (\\<lambda>(u, v) (u', v') x z.\n                        inpt_st r u u' x \\<and>\n                        (\\<forall>y.\n                            r u u' x y \\<longrightarrow>\n                            inpt_st r' v v' y) \\<and>\n                        (r u u' OO r' v v') x z)\n                    (u f) (u (Suc f)) (x f);\n        \\<forall>i<n.\n           inpt_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v') (u i)\n            (u (Suc i)) (x i);\n        r (fst (u n)) (fst (u (Suc n))) (x n) y\\<rbrakk>\n       \\<Longrightarrow> inpt_st r' (snd (u n)) (snd (u (Suc n))) y", "ultimately"], ["proof (chain)\npicking this:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n  r (fst (u m)) (fst (u (Suc m))) (x m) y", "show \" inpt_st r' (snd (u m)) (snd (u (Suc m))) y\""], ["proof (prove)\nusing this:\n  inpt_st\n   (\\<lambda>(u, v) (u', v') x z.\n       inpt_st r u u' x \\<and>\n       (\\<forall>y. r u u' x y \\<longrightarrow> inpt_st r' v v' y) \\<and>\n       (r u u' OO r' v v') x z)\n   (u m) (u (Suc m)) (x m)\n  r (fst (u m)) (fst (u (Suc m))) (x m) y\n\ngoal (1 subgoal):\n 1. inpt_st r' (snd (u m)) (snd (u (Suc m))) y", "apply (simp add: inpt_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>y.\n                (case u m of\n                 (u, v) \\<Rightarrow>\n                   \\<lambda>(u', v') x z.\n                      Ex (r u u' x) \\<and>\n                      (\\<forall>y.\n                          r u u' x y \\<longrightarrow>\n                          Ex (r' v v' y)) \\<and>\n                      (r u u' OO r' v v') x z)\n                 (u (Suc m)) (x m) y;\n     r (fst (u m)) (fst (u (Suc m))) (x m) y\\<rbrakk>\n    \\<Longrightarrow> \\<exists>ya. r' (snd (u m)) (snd (u (Suc m))) y ya", "by (case_tac \"u m\", case_tac \"u (Suc m)\", simp)"], ["proof (state)\nthis:\n  inpt_st r' (snd (u m)) (snd (u (Suc m))) y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inpt_str_comp: \"(prec_st (inpt_st r) r (fst \\<circ> u) x \\<and> (\\<forall>y. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st (inpt_st r') r' (snd \\<circ> u) y)) \n               = (\\<box> (lft_pred_st (inpt_st (rel_st r r')))) u x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n     (\\<forall>y.\n         (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n         prec_st (inpt_st r') r' (snd \\<circ> u) y)) =\n    (\\<box> lft_pred_st (inpt_st (rel_st r r'))) u x", "by (simp add: inpt_str_comp_a inpt_str_comp_b)"], ["", "lemma RSysTmp_inpt_comp: \"u' \\<in> init' \\<Longrightarrow> SymSystem init (inpt_st r) r o SymSystem init'(inpt_st r') r' \n      =  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "assume A : \"u' \\<in> init'\""], ["proof (state)\nthis:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "have [simp]: \"( \\<lambda>x y. (case x of (x, xa) \\<Rightarrow> (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x xa) \\<and> \n        (case x of (x, xa) \\<Rightarrow> (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) x xa) y)\n        =  (\\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y)\" (is \"?a = ?b\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        (case x of\n         (x, xa) \\<Rightarrow>\n           (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x xa) \\<and>\n        (case x of\n         (x, xa) \\<Rightarrow>\n           (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n            x xa)\n         y) =\n    (\\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y)", "proof (auto simp add: fun_eq_iff always_def at_fun_def lft_pred_st_def lft_rel_st_def rel_st_def inpt_st_def)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "fix a :: \"nat \\<Rightarrow> 'e \\<times> 'a\" and  b :: \"nat \\<Rightarrow> 'c\" and  x :: \"nat \\<Rightarrow> 'b\" and  xa :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "assume \"\\<forall>xa::nat. (case a xa of (u::'e, v::'a) \\<Rightarrow> \\<lambda>(u'::'e, v'::'a). r u u' OO r' v v') (a (Suc xa)) (b xa) (x xa)\" (is \"\\<forall> xa . ?P xa\")"], ["proof (state)\nthis:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (a (Suc xa)) (b xa) (x xa)\n\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "then"], ["proof (chain)\npicking this:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (a (Suc xa)) (b xa) (x xa)", "have A: \"?P xa\""], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n      (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n     (a (Suc xa)) (b xa) (x xa)", "by simp"], ["proof (state)\nthis:\n  (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "assume \"\\<forall>x . Ex ((case a x of (u, v) \\<Rightarrow> \\<lambda>(u', v') (x) z. Ex (r u u' x) \\<and> (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and> (r u u' OO r' v v') x z) (a (Suc x)) (b x))\" (is \"\\<forall> xa . ?Q xa\")"], ["proof (state)\nthis:\n  \\<forall>x.\n     Ex ((case a x of\n          (u, v) \\<Rightarrow>\n            \\<lambda>(u', v') x z.\n               Ex (r u u' x) \\<and>\n               (\\<forall>y.\n                   r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n               (r u u' OO r' v v') x z)\n          (a (Suc x)) (b x))\n\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "then"], ["proof (chain)\npicking this:\n  \\<forall>x.\n     Ex ((case a x of\n          (u, v) \\<Rightarrow>\n            \\<lambda>(u', v') x z.\n               Ex (r u u' x) \\<and>\n               (\\<forall>y.\n                   r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n               (r u u' OO r' v v') x z)\n          (a (Suc x)) (b x))", "have \"?Q xa\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     Ex ((case a x of\n          (u, v) \\<Rightarrow>\n            \\<lambda>(u', v') x z.\n               Ex (r u u' x) \\<and>\n               (\\<forall>y.\n                   r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n               (r u u' OO r' v v') x z)\n          (a (Suc x)) (b x))\n\ngoal (1 subgoal):\n 1. Ex ((case a xa of\n         (u, v) \\<Rightarrow>\n           \\<lambda>(u', v') x z.\n              Ex (r u u' x) \\<and>\n              (\\<forall>y.\n                  r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n              (r u u' OO r' v v') x z)\n         (a (Suc xa)) (b xa))", "by simp"], ["proof (state)\nthis:\n  Ex ((case a xa of\n       (u, v) \\<Rightarrow>\n         \\<lambda>(u', v') x z.\n            Ex (r u u' x) \\<and>\n            (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n            (r u u' OO r' v v') x z)\n       (a (Suc xa)) (b xa))\n\ngoal (2 subgoals):\n 1. \\<And>a b x f.\n       \\<lbrakk>\\<forall>f.\n                   Ex ((case a f of\n                        (u, v) \\<Rightarrow>\n                          \\<lambda>(u', v') x z.\n                             Ex (r u u' x) \\<and>\n                             (\\<forall>y.\n                                 r u u' x y \\<longrightarrow>\n                                 Ex (r' v v' y)) \\<and>\n                             (r u u' OO r' v v') x z)\n                        (a (Suc f)) (b f));\n        \\<forall>f.\n           (case a f of\n            (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n            (a (Suc f)) (b f) (x f)\\<rbrakk>\n       \\<Longrightarrow> (case a f of\n                          (u, v) \\<Rightarrow>\n                            \\<lambda>(u', v') x z.\n                               Ex (r u u' x) \\<and>\n                               (\\<forall>y.\n                                   r u u' x y \\<longrightarrow>\n                                   Ex (r' v v' y)) \\<and>\n                               (r u u' OO r' v v') x z)\n                          (a (Suc f)) (b f) (x f)\n 2. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "from this and A"], ["proof (chain)\npicking this:\n  Ex ((case a xa of\n       (u, v) \\<Rightarrow>\n         \\<lambda>(u', v') x z.\n            Ex (r u u' x) \\<and>\n            (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n            (r u u' OO r' v v') x z)\n       (a (Suc xa)) (b xa))\n  (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n   (a (Suc xa)) (b xa) (x xa)", "show \"(case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v') (x) z. Ex (r u u' x) \\<and> (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and> (r u u' OO r' v v') x z) (a (Suc xa)) (b xa) (x xa)\""], ["proof (prove)\nusing this:\n  Ex ((case a xa of\n       (u, v) \\<Rightarrow>\n         \\<lambda>(u', v') x z.\n            Ex (r u u' x) \\<and>\n            (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n            (r u u' OO r' v v') x z)\n       (a (Suc xa)) (b xa))\n  (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. (case a xa of\n     (u, v) \\<Rightarrow>\n       \\<lambda>(u', v') x z.\n          Ex (r u u' x) \\<and>\n          (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n          (r u u' OO r' v v') x z)\n     (a (Suc xa)) (b xa) (x xa)", "by (case_tac \"a xa\", case_tac \"a (Suc xa)\", simp)"], ["proof (state)\nthis:\n  (case a xa of\n   (u, v) \\<Rightarrow>\n     \\<lambda>(u', v') x z.\n        Ex (r u u' x) \\<and>\n        (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n        (r u u' OO r' v v') x z)\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "fix a :: \"nat \\<Rightarrow> 'e \\<times> 'a\" and  b :: \"nat \\<Rightarrow> 'c\" and  x :: \"nat \\<Rightarrow> 'b\" and xa :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "assume \"\\<forall>xa . (case a xa of (u::'e, v::'a) \\<Rightarrow> \\<lambda>(u'::'e, v'::'a) (x::'c) z::'b. Ex (r u u' x) \\<and> (\\<forall>y::'d. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and> (r u u' OO r' v v') x z) (a (Suc xa)) (b xa) (x xa)\" (is \"\\<forall> xa . ?Q xa\")"], ["proof (state)\nthis:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow>\n        \\<lambda>(u', v') x z.\n           Ex (r u u' x) \\<and>\n           (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n           (r u u' OO r' v v') x z)\n      (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "then"], ["proof (chain)\npicking this:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow>\n        \\<lambda>(u', v') x z.\n           Ex (r u u' x) \\<and>\n           (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n           (r u u' OO r' v v') x z)\n      (a (Suc xa)) (b xa) (x xa)", "have \"?Q xa\""], ["proof (prove)\nusing this:\n  \\<forall>xa.\n     (case a xa of\n      (u, v) \\<Rightarrow>\n        \\<lambda>(u', v') x z.\n           Ex (r u u' x) \\<and>\n           (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n           (r u u' OO r' v v') x z)\n      (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. (case a xa of\n     (u, v) \\<Rightarrow>\n       \\<lambda>(u', v') x z.\n          Ex (r u u' x) \\<and>\n          (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n          (r u u' OO r' v v') x z)\n     (a (Suc xa)) (b xa) (x xa)", "by simp"], ["proof (state)\nthis:\n  (case a xa of\n   (u, v) \\<Rightarrow>\n     \\<lambda>(u', v') x z.\n        Ex (r u u' x) \\<and>\n        (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n        (r u u' OO r' v v') x z)\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. \\<And>a b x f.\n       \\<forall>f.\n          (case a f of\n           (u, v) \\<Rightarrow>\n             \\<lambda>(u', v') x z.\n                Ex (r u u' x) \\<and>\n                (\\<forall>y.\n                    r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n                (r u u' OO r' v v') x z)\n           (a (Suc f)) (b f) (x f) \\<Longrightarrow>\n       (case a f of\n        (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n        (a (Suc f)) (b f) (x f)", "then"], ["proof (chain)\npicking this:\n  (case a xa of\n   (u, v) \\<Rightarrow>\n     \\<lambda>(u', v') x z.\n        Ex (r u u' x) \\<and>\n        (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n        (r u u' OO r' v v') x z)\n   (a (Suc xa)) (b xa) (x xa)", "show \"(case a xa of (u::'e, v::'a) \\<Rightarrow> \\<lambda>(u'::'e, v'::'a). r u u' OO r' v v') (a (Suc xa)) (b xa) (x xa)\""], ["proof (prove)\nusing this:\n  (case a xa of\n   (u, v) \\<Rightarrow>\n     \\<lambda>(u', v') x z.\n        Ex (r u u' x) \\<and>\n        (\\<forall>y. r u u' x y \\<longrightarrow> Ex (r' v v' y)) \\<and>\n        (r u u' OO r' v v') x z)\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal (1 subgoal):\n 1. (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n     (a (Suc xa)) (b xa) (x xa)", "by (case_tac \"a xa\", case_tac \"a (Suc xa)\", simp)"], ["proof (state)\nthis:\n  (case a xa of (u, v) \\<Rightarrow> \\<lambda>(u', v'). r u u' OO r' v v')\n   (a (Suc xa)) (b xa) (x xa)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x y.\n      (case x of\n       (x, xa) \\<Rightarrow>\n         (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x xa) \\<and>\n      (case x of\n       (x, xa) \\<Rightarrow>\n         (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) x\n          xa)\n       y) =\n  (\\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y)\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "from A"], ["proof (chain)\npicking this:\n  u' \\<in> init'", "have \"SymSystem init (inpt_st r) r o SymSystem init'(inpt_st r') r' = [: z \\<leadsto> u, x . fst \\<circ> u \\<in> init \\<and> snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n      ({.u, x . prec_st (inpt_st r) r (fst \\<circ> u) x \\<and> (\\<forall>y::nat \\<Rightarrow> 'd. (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow> prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n      [:  (\\<lambda>(u, x).  ((\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u x)) :])\""], ["proof (prove)\nusing this:\n  u' \\<in> init'\n\ngoal (1 subgoal):\n 1. SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    ({.u, x.\n      prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n          prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n     [: \\<lambda>(u, x).\n           (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n            u x :])", "by (unfold SymSystem_comp, simp add: comp_assoc)"], ["proof (state)\nthis:\n  SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.u, x.\n    prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n    (\\<forall>y.\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n        prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n   [: \\<lambda>(u, x).\n         (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u\n          x :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "also"], ["proof (state)\nthis:\n  SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.u, x.\n    prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n    (\\<forall>y.\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n        prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n   [: \\<lambda>(u, x).\n         (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u\n          x :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "have \"... = [: z \\<leadsto> u, x . fst \\<circ> u \\<in> init \\<and> snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ> ({. x, y . (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y .} \\<circ> [: ?b :])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    ({.u, x.\n      prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n      (\\<forall>y.\n          (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n          prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n     [: \\<lambda>(u, x).\n           (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v'))\n            u x :]) =\n    [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    ({.x, y. (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y.} \\<circ>\n     [: \\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y :])", "by (subst assert_demonic, simp add: inpt_str_comp)"], ["proof (state)\nthis:\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.u, x.\n    prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n    (\\<forall>y.\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n        prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n   [: \\<lambda>(u, x).\n         (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u\n          x :]) =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.x, y. (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "also"], ["proof (state)\nthis:\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.u, x.\n    prec_st (inpt_st r) r (fst \\<circ> u) x \\<and>\n    (\\<forall>y.\n        (\\<box> lft_rel_st r) (fst \\<circ> u) x y \\<longrightarrow>\n        prec_st (inpt_st r') r' (snd \\<circ> u) y).} \\<circ>\n   [: \\<lambda>(u, x).\n         (\\<box> lft_rel_st (\\<lambda>(u, v) (u', v'). r u u' OO r' v v')) u\n          x :]) =\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.x, y. (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y :])\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "have \"... = SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [: z \\<leadsto> (u,\n    x) . fst \\<circ> u \\<in> init \\<and>\n         snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n    ({.x, y. (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y.} \\<circ>\n     [: \\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y :]) =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "by (simp add: SymSystem_def prec_st_inpt comp_assoc zip_set_def)"], ["proof (state)\nthis:\n  [: z \\<leadsto> (u,\n  x) . fst \\<circ> u \\<in> init \\<and>\n       snd \\<circ> u \\<in> init' \\<and> z = x :] \\<circ>\n  ({.x, y. (\\<box> lft_pred_st (inpt_st (rel_st r r'))) x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st (rel_st r r')) x y :]) =\n  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\n\ngoal (1 subgoal):\n 1. u' \\<in> init' \\<Longrightarrow>\n    SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "finally"], ["proof (chain)\npicking this:\n  SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "show ?thesis"], ["proof (prove)\nusing this:\n  SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\n\ngoal (1 subgoal):\n 1. SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n    SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')", "by simp"], ["proof (state)\nthis:\n  SymSystem init (inpt_st r) r \\<circ> SymSystem init' (inpt_st r') r' =\n  SymSystem (zip_set init init') (inpt_st (rel_st r r')) (rel_st r r')\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"GrdSymSystem init r = [:z \\<leadsto> u, x . u \\<in> init \\<and> z = x:] o trs (\\<lambda> (u, x) y . (\\<box>(lft_rel_st r)) u x y)\""], ["", "lemma inpt_always: \"inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) = (\\<lambda>(x, y). (\\<box> lft_pred_st (inpt_st r)) x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) =\n    (\\<lambda>(x, y). (\\<box> lft_pred_st (inpt_st r)) x y)", "proof (auto simp add: fun_eq_iff)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y)\n        (a, b) \\<Longrightarrow>\n       (\\<box> lft_pred_st (inpt_st r)) a b\n 2. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "fix a :: \"nat \\<Rightarrow> 'a\" and  b :: \"nat \\<Rightarrow> 'b\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y)\n        (a, b) \\<Longrightarrow>\n       (\\<box> lft_pred_st (inpt_st r)) a b\n 2. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "assume \"inpt (\\<lambda>(x, y).(\\<box> lft_rel_st r) x y) (a, b)\""], ["proof (state)\nthis:\n  inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y)\n        (a, b) \\<Longrightarrow>\n       (\\<box> lft_pred_st (inpt_st r)) a b\n 2. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "then"], ["proof (chain)\npicking this:\n  inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "show \"(\\<box> lft_pred_st (inpt_st r)) a b\""], ["proof (prove)\nusing this:\n  inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)\n\ngoal (1 subgoal):\n 1. (\\<box> lft_pred_st (inpt_st r)) a b", "by (auto simp add: inpt_def lft_pred_st_def inpt_st_def always_def at_fun_def lft_rel_st_def)"], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "fix a :: \"nat \\<Rightarrow> 'a\" and  b :: \"nat \\<Rightarrow> 'b\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "let ?y = \"\\<lambda> n . (SOME y . r (a n) (a (Suc n)) (b n) y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "assume \"(\\<box> lft_pred_st (inpt_st r)) a b\""], ["proof (state)\nthis:\n  (\\<box> lft_pred_st (inpt_st r)) a b\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "then"], ["proof (chain)\npicking this:\n  (\\<box> lft_pred_st (inpt_st r)) a b", "have \"(\\<box> lft_rel_st r) a b ?y\""], ["proof (prove)\nusing this:\n  (\\<box> lft_pred_st (inpt_st r)) a b\n\ngoal (1 subgoal):\n 1. (\\<box> lft_rel_st r) a b\n     (\\<lambda>n. SOME y. r (a n) (a (Suc n)) (b n) y)", "apply (auto simp add: always_def at_fun_def lft_rel_st_def inpt_st_def lft_pred_st_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>f. Ex (r (a f) (a (Suc f)) (b f)) \\<Longrightarrow>\n       r (a f) (a (Suc f)) (b f) (Eps (r (a f) (a (Suc f)) (b f)))", "by (metis tfl_some)"], ["proof (state)\nthis:\n  (\\<box> lft_rel_st r) a b\n   (\\<lambda>n. SOME y. r (a n) (a (Suc n)) (b n) y)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (\\<box> lft_pred_st (inpt_st r)) a b \\<Longrightarrow>\n       inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "then"], ["proof (chain)\npicking this:\n  (\\<box> lft_rel_st r) a b\n   (\\<lambda>n. SOME y. r (a n) (a (Suc n)) (b n) y)", "show \"inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)\""], ["proof (prove)\nusing this:\n  (\\<box> lft_rel_st r) a b\n   (\\<lambda>n. SOME y. r (a n) (a (Suc n)) (b n) y)\n\ngoal (1 subgoal):\n 1. inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)", "by (auto simp add: inpt_def)"], ["proof (state)\nthis:\n  inpt (\\<lambda>(x, y). (\\<box> lft_rel_st r) x y) (a, b)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \"GrdSymSystem init r = SymSystem init (inpt_st r) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. GrdSymSystem init r = SymSystem init (inpt_st r) r", "by (simp add: GrdSymSystem_def SymSystem_def trs_def  prec_st_inpt comp_assoc inpt_always)"], ["", "subsection\\<open>Example: COUNTER\\<close>"], ["", "text\\<open>\n    In this section we introduce an example counter that counts how many times\n    the input variable $x$ is true. The input is a sequence of boolen values\n    and the output is a sequence of natural numbers. The output at some moment in \n    time is the number of true values seen so far in the input.\n\n    We defined the system counter in two different ways and we show that the\n    two definitions are equivalent. The first definition takes the entire \n    input sequence and it computes the corresponding output sequence. We introduce\n    the second version of the counter as a reactive system based on a symbolic\n    transition system. We use a local variable to record the number of true\n    values seen so far, and initially the local variable is zero. At every step\n    we increase the local variable if the input is true. The output of the\n    system at every step is equal to the local variable.\n\\<close>"], ["", "primrec count :: \"bool trace \\<Rightarrow> nat trace\" where\n    \"count x 0 = (if x 0 then 1 else 0)\" |\n    \"count x (Suc n) = (if x (Suc n) then count x n + 1 else count x n)\""], ["", "definition \"Counter_global n = {.x . (\\<forall> k . count x k \\<le> n).} o [:x \\<leadsto> y . y = count x:]\""], ["", "definition \"prec_count M u u' x = (u \\<le> M)\""], ["", "definition \"rel_count u u' x y = ((x \\<longrightarrow> u' = Suc u) \\<and> (\\<not> x \\<longrightarrow> u' = u) \\<and> y = u')\""], ["", "lemma counter_a_aux: \"u 0 = 0 \\<Longrightarrow> \\<forall>i < n. (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and> (\\<not> x i \\<longrightarrow> u (Suc i) = u i) \\<Longrightarrow> (\\<forall> i < n . count x i = u (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u 0 = 0;\n     \\<forall>i<n.\n        (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n        (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>u 0 = 0;\n     \\<forall>i<0.\n        (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n        (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<0. count x i = u (Suc i)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "case 0"], ["proof (state)\nthis:\n  u 0 = 0\n  \\<forall>i<0.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>u 0 = 0;\n     \\<forall>i<0.\n        (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n        (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<0. count x i = u (Suc i)\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<0. count x i = u (Suc i)", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<0. count x i = u (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "fix j::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "assume \"\\<forall>i<Suc n. (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and> (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\"\n          and \"j < Suc n\"\n          and \"u (0::nat) = (0::nat)\""], ["proof (state)\nthis:\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n  j < Suc n\n  u 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "from this and Suc"], ["proof (chain)\npicking this:\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n  j < Suc n\n  u 0 = 0\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)", "have \"count x j = u (Suc j)\""], ["proof (prove)\nusing this:\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n  j < Suc n\n  u 0 = 0\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n\ngoal (1 subgoal):\n 1. count x j = u (Suc j)", "by (case_tac j, auto)"], ["proof (state)\nthis:\n  count x j = u (Suc j)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>i<Suc n.\n              (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n              (\\<not> x i \\<longrightarrow> u (Suc i) = u i);\n   ?j2 < Suc n; u 0 = 0\\<rbrakk>\n  \\<Longrightarrow> count x ?j2 = u (Suc ?j2)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>u 0 = 0;\n                 \\<forall>i<n.\n                    (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n                    (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n                \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i);\n        u 0 = 0;\n        \\<forall>i<Suc n.\n           (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n           (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<Suc n. count x i = u (Suc i)", "from Suc and this"], ["proof (chain)\npicking this:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n  \\<lbrakk>\\<forall>i<Suc n.\n              (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n              (\\<not> x i \\<longrightarrow> u (Suc i) = u i);\n   ?j2 < Suc n; u 0 = 0\\<rbrakk>\n  \\<Longrightarrow> count x ?j2 = u (Suc ?j2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<n.\n      (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<n. count x i = u (Suc i)\n  u 0 = 0\n  \\<forall>i<Suc n.\n     (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n     (\\<not> x i \\<longrightarrow> u (Suc i) = u i)\n  \\<lbrakk>\\<forall>i<Suc n.\n              (x i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n              (\\<not> x i \\<longrightarrow> u (Suc i) = u i);\n   ?j2 < Suc n; u 0 = 0\\<rbrakk>\n  \\<Longrightarrow> count x ?j2 = u (Suc ?j2)\n\ngoal (1 subgoal):\n 1. \\<forall>i<Suc n. count x i = u (Suc i)", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<Suc n. count x i = u (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma counter_b_aux: \"u 0 = 0 \\<Longrightarrow> \\<forall>n. (xa n \\<longrightarrow> u (Suc n) = Suc (u n)) \\<and> (\\<not> xa n \\<longrightarrow> u (Suc n) = u n) \\<and> xb n = u (Suc n) \n                \\<Longrightarrow> count xa n = u (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u 0 = 0;\n     \\<forall>n.\n        (xa n \\<longrightarrow> u (Suc n) = Suc (u n)) \\<and>\n        (\\<not> xa n \\<longrightarrow> u (Suc n) = u n) \\<and>\n        xb n = u (Suc n)\\<rbrakk>\n    \\<Longrightarrow> count xa n = u (Suc n)", "by (induction n, simp_all)"], ["", "definition \"COUNTER M = SymSystem {u . u 0 = 0} (prec_count M) rel_count\""], ["", "lemma \"COUNTER = Counter_global\""], ["proof (prove)\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "have A:\"(\\<lambda>x y . \\<exists>u::nat \\<Rightarrow> nat. u (0::nat) = (0::nat) \\<and> (\\<box> lft_rel_st rel_count) u x y)\n        = (\\<lambda> x y . y = count x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x y.\n        \\<exists>u. u 0 = 0 \\<and> (\\<box> lft_rel_st rel_count) u x y) =\n    (\\<lambda>x y. y = count x)", "proof (simp add: fun_eq_iff lft_rel_st_def rel_count_def always_def at_fun_def, safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa u xb.\n       \\<lbrakk>u 0 = 0;\n        \\<forall>f.\n           (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n           (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n           xa f = u (Suc f)\\<rbrakk>\n       \\<Longrightarrow> xa xb = count x xb\n 2. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "fix x :: \"nat \\<Rightarrow> bool\" and  xa :: \"nat \\<Rightarrow> nat\" and u:: \"nat \\<Rightarrow> nat\" and xb :: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x xa u xb.\n       \\<lbrakk>u 0 = 0;\n        \\<forall>f.\n           (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n           (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n           xa f = u (Suc f)\\<rbrakk>\n       \\<Longrightarrow> xa xb = count x xb\n 2. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "assume A: \"u 0 = 0\""], ["proof (state)\nthis:\n  u 0 = 0\n\ngoal (2 subgoals):\n 1. \\<And>x xa u xb.\n       \\<lbrakk>u 0 = 0;\n        \\<forall>f.\n           (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n           (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n           xa f = u (Suc f)\\<rbrakk>\n       \\<Longrightarrow> xa xb = count x xb\n 2. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "assume B: \"\\<forall>xb . (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and> (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and> xa xb = u (Suc xb)\""], ["proof (state)\nthis:\n  \\<forall>xb.\n     (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n     (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n     xa xb = u (Suc xb)\n\ngoal (2 subgoals):\n 1. \\<And>x xa u xb.\n       \\<lbrakk>u 0 = 0;\n        \\<forall>f.\n           (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n           (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n           xa f = u (Suc f)\\<rbrakk>\n       \\<Longrightarrow> xa xb = count x xb\n 2. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "from A and this"], ["proof (chain)\npicking this:\n  u 0 = 0\n  \\<forall>xb.\n     (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n     (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n     xa xb = u (Suc xb)", "have \"count x xb = xa xb\""], ["proof (prove)\nusing this:\n  u 0 = 0\n  \\<forall>xb.\n     (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n     (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n     xa xb = u (Suc xb)\n\ngoal (1 subgoal):\n 1. count x xb = xa xb", "by (drule_tac counter_b_aux, auto)"], ["proof (state)\nthis:\n  count x xb = xa xb\n\ngoal (2 subgoals):\n 1. \\<And>x xa u xb.\n       \\<lbrakk>u 0 = 0;\n        \\<forall>f.\n           (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n           (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n           xa f = u (Suc f)\\<rbrakk>\n       \\<Longrightarrow> xa xb = count x xb\n 2. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "then"], ["proof (chain)\npicking this:\n  count x xb = xa xb", "show \"xa xb = count x xb\""], ["proof (prove)\nusing this:\n  count x xb = xa xb\n\ngoal (1 subgoal):\n 1. xa xb = count x xb", "by simp"], ["proof (state)\nthis:\n  xa xb = count x xb\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "fix x::\"nat \\<Rightarrow> bool\" and xa::\"nat \\<Rightarrow> nat\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "define u where \"u i = (if i = 0 then 0 else count x (i - 1))\" for i"], ["proof (state)\nthis:\n  u ?i = (if ?i = 0 then 0 else count x (?i - 1))\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "assume B: \"\\<forall>xb::nat. xa xb = count x xb\""], ["proof (state)\nthis:\n  \\<forall>xb. xa xb = count x xb\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "{"], ["proof (state)\nthis:\n  \\<forall>xb. xa xb = count x xb\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "fix xb::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "from u_def and B"], ["proof (chain)\npicking this:\n  u ?i = (if ?i = 0 then 0 else count x (?i - 1))\n  \\<forall>xb. xa xb = count x xb", "have \"u 0 = 0 \\<and> ( (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and> (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and> xa xb = u (Suc xb))\""], ["proof (prove)\nusing this:\n  u ?i = (if ?i = 0 then 0 else count x (?i - 1))\n  \\<forall>xb. xa xb = count x xb\n\ngoal (1 subgoal):\n 1. u 0 = 0 \\<and>\n    (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n    (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n    xa xb = u (Suc xb)", "by (case_tac xb, auto)"], ["proof (state)\nthis:\n  u 0 = 0 \\<and>\n  (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n  (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n  xa xb = u (Suc xb)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "}"], ["proof (state)\nthis:\n  u 0 = 0 \\<and>\n  (x ?xb2 \\<longrightarrow> u (Suc ?xb2) = Suc (u ?xb2)) \\<and>\n  (\\<not> x ?xb2 \\<longrightarrow> u (Suc ?xb2) = u ?xb2) \\<and>\n  xa ?xb2 = u (Suc ?xb2)\n\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<forall>xb. xa xb = count x xb \\<Longrightarrow>\n       \\<exists>u.\n          u 0 = 0 \\<and>\n          (\\<forall>f.\n              (x f \\<longrightarrow> u (Suc f) = Suc (u f)) \\<and>\n              (\\<not> x f \\<longrightarrow> u (Suc f) = u f) \\<and>\n              xa f = u (Suc f))", "then"], ["proof (chain)\npicking this:\n  u 0 = 0 \\<and>\n  (x ?xb2 \\<longrightarrow> u (Suc ?xb2) = Suc (u ?xb2)) \\<and>\n  (\\<not> x ?xb2 \\<longrightarrow> u (Suc ?xb2) = u ?xb2) \\<and>\n  xa ?xb2 = u (Suc ?xb2)", "show \"\\<exists>u::nat \\<Rightarrow> nat. u 0 = 0 \\<and> (\\<forall>xb. (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and> (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and> \n              xa xb = u (Suc xb))\""], ["proof (prove)\nusing this:\n  u 0 = 0 \\<and>\n  (x ?xb2 \\<longrightarrow> u (Suc ?xb2) = Suc (u ?xb2)) \\<and>\n  (\\<not> x ?xb2 \\<longrightarrow> u (Suc ?xb2) = u ?xb2) \\<and>\n  xa ?xb2 = u (Suc ?xb2)\n\ngoal (1 subgoal):\n 1. \\<exists>u.\n       u 0 = 0 \\<and>\n       (\\<forall>xb.\n           (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n           (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n           xa xb = u (Suc xb))", "by auto"], ["proof (state)\nthis:\n  \\<exists>u.\n     u 0 = 0 \\<and>\n     (\\<forall>xb.\n         (x xb \\<longrightarrow> u (Suc xb) = Suc (u xb)) \\<and>\n         (\\<not> x xb \\<longrightarrow> u (Suc xb) = u xb) \\<and>\n         xa xb = u (Suc xb))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x y.\n      \\<exists>u. u 0 = 0 \\<and> (\\<box> lft_rel_st rel_count) u x y) =\n  (\\<lambda>x y. y = count x)\n\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "{"], ["proof (state)\nthis:\n  (\\<lambda>x y.\n      \\<exists>u. u 0 = 0 \\<and> (\\<box> lft_rel_st rel_count) u x y) =\n  (\\<lambda>x y. y = count x)\n\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "fix x :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "have \"(\\<lambda>xa . \\<forall>u . u (0::nat) = (0::nat) \\<longrightarrow> prec_st (prec_count x) rel_count u xa) = \n          (\\<lambda>xa::nat \\<Rightarrow> bool. \\<forall>k::nat. count xa k \\<le> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xa.\n        \\<forall>u.\n           u 0 = 0 \\<longrightarrow>\n           prec_st (prec_count x) rel_count u xa) =\n    (\\<lambda>xa. \\<forall>k. count xa k \\<le> x)", "proof (simp add: fun_eq_iff lft_rel_st_def  prec_st_def until_def \n            lft_pred_st_def prec_count_def at_fun_def inpt_st_def rel_count_def, safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "fix xa::\"nat \\<Rightarrow> bool\" and k:: nat"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "define uu where \"uu i = (if i = 0 then 0 else count xa (i - 1))\" for i"], ["proof (state)\nthis:\n  uu ?i = (if ?i = 0 then 0 else count xa (?i - 1))\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "assume \"(\\<forall>u . u 0 = 0 \\<longrightarrow> (\\<forall>xb . (\\<exists>x<xb. xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or> \\<not> xa x \\<and> u (Suc x) \\<noteq> u x) \\<or> u xb \\<le> x))\" (is \"\\<forall> u . ?s u\")"], ["proof (state)\nthis:\n  \\<forall>u.\n     u 0 = 0 \\<longrightarrow>\n     (\\<forall>xb.\n         (\\<exists>x<xb.\n             xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or>\n             \\<not> xa x \\<and> u (Suc x) \\<noteq> u x) \\<or>\n         u xb \\<le> x)\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "then"], ["proof (chain)\npicking this:\n  \\<forall>u.\n     u 0 = 0 \\<longrightarrow>\n     (\\<forall>xb.\n         (\\<exists>x<xb.\n             xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or>\n             \\<not> xa x \\<and> u (Suc x) \\<noteq> u x) \\<or>\n         u xb \\<le> x)", "have \"?s uu\" (is \"?p \\<longrightarrow> (\\<forall>xb . (\\<exists> x < xb . ?q xb x) \\<or> ?r xb)\")"], ["proof (prove)\nusing this:\n  \\<forall>u.\n     u 0 = 0 \\<longrightarrow>\n     (\\<forall>xb.\n         (\\<exists>x<xb.\n             xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or>\n             \\<not> xa x \\<and> u (Suc x) \\<noteq> u x) \\<or>\n         u xb \\<le> x)\n\ngoal (1 subgoal):\n 1. uu 0 = 0 \\<longrightarrow>\n    (\\<forall>xb.\n        (\\<exists>x<xb.\n            xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n            \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n        uu xb \\<le> x)", "by auto"], ["proof (state)\nthis:\n  uu 0 = 0 \\<longrightarrow>\n  (\\<forall>xb.\n      (\\<exists>x<xb.\n          xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n          \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n      uu xb \\<le> x)\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from this and uu_def"], ["proof (chain)\npicking this:\n  uu 0 = 0 \\<longrightarrow>\n  (\\<forall>xb.\n      (\\<exists>x<xb.\n          xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n          \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n      uu xb \\<le> x)\n  uu ?i = (if ?i = 0 then 0 else count xa (?i - 1))", "have \"(\\<forall>xb . (\\<exists> x < xb . ?q xb x) \\<or> ?r xb)\""], ["proof (prove)\nusing this:\n  uu 0 = 0 \\<longrightarrow>\n  (\\<forall>xb.\n      (\\<exists>x<xb.\n          xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n          \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n      uu xb \\<le> x)\n  uu ?i = (if ?i = 0 then 0 else count xa (?i - 1))\n\ngoal (1 subgoal):\n 1. \\<forall>xb.\n       (\\<exists>x<xb.\n           xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n           \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n       uu xb \\<le> x", "by simp"], ["proof (state)\nthis:\n  \\<forall>xb.\n     (\\<exists>x<xb.\n         xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n         \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n     uu xb \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "then"], ["proof (chain)\npicking this:\n  \\<forall>xb.\n     (\\<exists>x<xb.\n         xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n         \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n     uu xb \\<le> x", "have \"(\\<exists> x < (Suc k) . ?q (Suc k) x) \\<or> ?r (Suc k)\""], ["proof (prove)\nusing this:\n  \\<forall>xb.\n     (\\<exists>x<xb.\n         xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n         \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n     uu xb \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<exists>x<Suc k.\n        xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n        \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n    uu (Suc k) \\<le> x", "by simp"], ["proof (state)\nthis:\n  (\\<exists>x<Suc k.\n      xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n      \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n  uu (Suc k) \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "then"], ["proof (chain)\npicking this:\n  (\\<exists>x<Suc k.\n      xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n      \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n  uu (Suc k) \\<le> x", "obtain xb where \"xb < (Suc k) \\<and> (?q (Suc k) xb \\<or> ?r (Suc k))\""], ["proof (prove)\nusing this:\n  (\\<exists>x<Suc k.\n      xa x \\<and> uu (Suc x) \\<noteq> Suc (uu x) \\<or>\n      \\<not> xa x \\<and> uu (Suc x) \\<noteq> uu x) \\<or>\n  uu (Suc k) \\<le> x\n\ngoal (1 subgoal):\n 1. (\\<And>xb.\n        xb < Suc k \\<and>\n        ((xa xb \\<and> uu (Suc xb) \\<noteq> Suc (uu xb) \\<or>\n          \\<not> xa xb \\<and> uu (Suc xb) \\<noteq> uu xb) \\<or>\n         uu (Suc k) \\<le> x) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xb < Suc k \\<and>\n  ((xa xb \\<and> uu (Suc xb) \\<noteq> Suc (uu xb) \\<or>\n    \\<not> xa xb \\<and> uu (Suc xb) \\<noteq> uu xb) \\<or>\n   uu (Suc k) \\<le> x)\n\ngoal (2 subgoals):\n 1. \\<And>xa k.\n       \\<forall>u.\n          u 0 = 0 \\<longrightarrow>\n          (\\<forall>f.\n              (\\<exists>fa<f.\n                  xa fa \\<and> u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                  \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa) \\<or>\n              u f \\<le> x) \\<Longrightarrow>\n       count xa k \\<le> x\n 2. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from this and uu_def"], ["proof (chain)\npicking this:\n  xb < Suc k \\<and>\n  ((xa xb \\<and> uu (Suc xb) \\<noteq> Suc (uu xb) \\<or>\n    \\<not> xa xb \\<and> uu (Suc xb) \\<noteq> uu xb) \\<or>\n   uu (Suc k) \\<le> x)\n  uu ?i = (if ?i = 0 then 0 else count xa (?i - 1))", "show \"count xa k \\<le> x\""], ["proof (prove)\nusing this:\n  xb < Suc k \\<and>\n  ((xa xb \\<and> uu (Suc xb) \\<noteq> Suc (uu xb) \\<or>\n    \\<not> xa xb \\<and> uu (Suc xb) \\<noteq> uu xb) \\<or>\n   uu (Suc k) \\<le> x)\n  uu ?i = (if ?i = 0 then 0 else count xa (?i - 1))\n\ngoal (1 subgoal):\n 1. count xa k \\<le> x", "by (case_tac xb, auto)"], ["proof (state)\nthis:\n  count xa k \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "fix xa:: \"nat \\<Rightarrow> bool\" and  u::\"nat \\<Rightarrow> nat\" and xaa::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "assume C: \"\\<forall>k::nat. count xa k \\<le> x\""], ["proof (state)\nthis:\n  \\<forall>k. count xa k \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "assume A: \"u (0::nat) = (0::nat)\""], ["proof (state)\nthis:\n  u 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "assume B: \"\\<not> u xaa \\<le> x\""], ["proof (state)\nthis:\n  \\<not> u xaa \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from A and B"], ["proof (chain)\npicking this:\n  u 0 = 0\n  \\<not> u xaa \\<le> x", "have D: \"xaa > 0\""], ["proof (prove)\nusing this:\n  u 0 = 0\n  \\<not> u xaa \\<le> x\n\ngoal (1 subgoal):\n 1. 0 < xaa", "by (metis le0 neq0_conv)"], ["proof (state)\nthis:\n  0 < xaa\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from this and B and C"], ["proof (chain)\npicking this:\n  0 < xaa\n  \\<not> u xaa \\<le> x\n  \\<forall>k. count xa k \\<le> x", "have \"count xa (xaa - 1) \\<noteq> u xaa\""], ["proof (prove)\nusing this:\n  0 < xaa\n  \\<not> u xaa \\<le> x\n  \\<forall>k. count xa k \\<le> x\n\ngoal (1 subgoal):\n 1. count xa (xaa - 1) \\<noteq> u xaa", "by metis"], ["proof (state)\nthis:\n  count xa (xaa - 1) \\<noteq> u xaa\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from this and D"], ["proof (chain)\npicking this:\n  count xa (xaa - 1) \\<noteq> u xaa\n  0 < xaa", "have E: \"\\<exists>i < xaa. count xa i \\<noteq> u (Suc i)\""], ["proof (prove)\nusing this:\n  count xa (xaa - 1) \\<noteq> u xaa\n  0 < xaa\n\ngoal (1 subgoal):\n 1. \\<exists>i<xaa. count xa i \\<noteq> u (Suc i)", "by (metis One_nat_def Suc_diff_1 diff_Suc_less)"], ["proof (state)\nthis:\n  \\<exists>i<xaa. count xa i \\<noteq> u (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "have \"u 0 = 0 \\<Longrightarrow> \\<forall>i<xaa. (xa i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and> (\\<not> xa i \\<longrightarrow> u (Suc i) = u i) \\<Longrightarrow> \\<forall>i<xaa. count xa i = u (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u 0 = 0;\n     \\<forall>i<xaa.\n        (xa i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n        (\\<not> xa i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<xaa. count xa i = u (Suc i)", "by (rule counter_a_aux, simp)"], ["proof (state)\nthis:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<xaa.\n      (xa i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> xa i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<xaa. count xa i = u (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>xa u f.\n       \\<lbrakk>\\<forall>k. count xa k \\<le> x; u 0 = 0;\n        \\<not> u f \\<le> x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fa<f.\n                            xa fa \\<and>\n                            u (Suc fa) \\<noteq> Suc (u fa) \\<or>\n                            \\<not> xa fa \\<and> u (Suc fa) \\<noteq> u fa", "from this and A and E"], ["proof (chain)\npicking this:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<xaa.\n      (xa i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> xa i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<xaa. count xa i = u (Suc i)\n  u 0 = 0\n  \\<exists>i<xaa. count xa i \\<noteq> u (Suc i)", "show \"(\\<exists>x<xaa. xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or> \\<not> xa x \\<and> u (Suc x) \\<noteq> u x)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>u 0 = 0;\n   \\<forall>i<xaa.\n      (xa i \\<longrightarrow> u (Suc i) = Suc (u i)) \\<and>\n      (\\<not> xa i \\<longrightarrow> u (Suc i) = u i)\\<rbrakk>\n  \\<Longrightarrow> \\<forall>i<xaa. count xa i = u (Suc i)\n  u 0 = 0\n  \\<exists>i<xaa. count xa i \\<noteq> u (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>x<xaa.\n       xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or>\n       \\<not> xa x \\<and> u (Suc x) \\<noteq> u x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x<xaa.\n     xa x \\<and> u (Suc x) \\<noteq> Suc (u x) \\<or>\n     \\<not> xa x \\<and> u (Suc x) \\<noteq> u x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      \\<forall>u.\n         u 0 = 0 \\<longrightarrow> prec_st (prec_count x) rel_count u xa) =\n  (\\<lambda>xa. \\<forall>k. count xa k \\<le> x)\n\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "}"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      \\<forall>u.\n         u 0 = 0 \\<longrightarrow>\n         prec_st (prec_count ?x2) rel_count u xa) =\n  (\\<lambda>xa. \\<forall>k. count xa k \\<le> ?x2)\n\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "note B = this"], ["proof (state)\nthis:\n  (\\<lambda>xa.\n      \\<forall>u.\n         u 0 = 0 \\<longrightarrow>\n         prec_st (prec_count ?x2) rel_count u xa) =\n  (\\<lambda>xa. \\<forall>k. count xa k \\<le> ?x2)\n\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. COUNTER = Counter_global", "by (simp add: fun_eq_iff COUNTER_def SymSystem_rel Counter_global_def A B)"], ["proof (state)\nthis:\n  COUNTER = Counter_global\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Example: LIVE\\<close>"], ["", "text\\<open>\n    The last example of this formalization introduces a system which does some\n    local computation, and ensures some global liveness property.\n    We show that this example is the fusion of a symbolic transition system and a demonic\n    choice which ensures the liveness property of the output sequence.\n    We also show that asumming some liveness property for the input, we can refine\n    the example into an executable system that does not ensure the liveness\n    property of the output on its own, but relies on the liveness of the input.\n\\<close>"], ["", "definition \"rel_ex u u' x y = (((x \\<and> u' = u + (1::int)) \\<or> (\\<not> x \\<and> u' = u - 1) \\<or> u' = 0) \\<and> (y = (u' = 0)))\""], ["", "definition \"prec_ex u u' x = (-1 \\<le> u \\<and> u \\<le> 3)\""], ["", "definition \"LIVE = [:x \\<leadsto> u, x' . u (0::nat) = 0 \\<and> x = x':] o {.u, x . prec_st prec_ex rel_ex u x.} \n    o [:u, x \\<leadsto> y . (\\<box>(\\<lambda> u x y . rel_ex (u 0) (u 1) (x 0) (y 0))) u x y  \\<and> (\\<box> (\\<diamond> (\\<lambda> y . y 0))) y :]\""], ["", "lemma LIVE_fusion: \"LIVE = (SymSystem {u . u 0 = 0} prec_ex rel_ex) \\<parallel> [:x \\<leadsto> y . (\\<box> (\\<diamond> (\\<lambda> y . y 0))) y:]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "define init where \"init = {u . u (0::nat) = (0::int)}\""], ["proof (state)\nthis:\n  init = {u. u 0 = 0}\n\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "then"], ["proof (chain)\npicking this:\n  init = {u. u 0 = 0}", "have A: \"(\\<lambda> i::nat . 0::int) \\<in> init\""], ["proof (prove)\nusing this:\n  init = {u. u 0 = 0}\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. 0) \\<in> init", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>i. 0) \\<in> init\n\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>i. 0) \\<in> init", "have \"([: x \\<leadsto> (u, y). u \\<in> init \\<and> x = y :] \\<circ> {.(x, y). prec_st prec_ex rel_ex x y .} \\<circ> [: \\<lambda>(x, y). (\\<box> lft_rel_st rel_ex) x y :]) \\<parallel>\n          [: \\<lambda>x. \\<box> \\<diamond> (\\<lambda>y. y 0) :] =\n          [: x \\<leadsto> (u, y). u \\<in> init \\<and> x = y :] \\<circ> {. (x, y). prec_st prec_ex rel_ex x y .} \\<circ>\n          [: (u, x) \\<leadsto> y. (\\<box> lft_rel_st rel_ex) u x y \\<and> (\\<box> \\<diamond> (\\<lambda>y. y 0)) y :]\""], ["proof (prove)\nusing this:\n  (\\<lambda>i. 0) \\<in> init\n\ngoal (1 subgoal):\n 1. ([: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n     {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n     [: \\<lambda>(x, y). (\\<box> lft_rel_st rel_ex) x y :]) \\<parallel>\n    [: \\<lambda>x. \\<box> \\<diamond> (\\<lambda>y. y 0) :] =\n    [: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n    {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n    [: (u,\n    x) \\<leadsto> y . (\\<box> lft_rel_st rel_ex) u x y \\<and>\n                      (\\<box> \\<diamond> (\\<lambda>y. y 0)) y :]", "by (unfold fusion_spec_local_a, auto)"], ["proof (state)\nthis:\n  ([: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n   {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st rel_ex) x y :]) \\<parallel>\n  [: \\<lambda>x. \\<box> \\<diamond> (\\<lambda>y. y 0) :] =\n  [: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n  {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n  [: (u,\n  x) \\<leadsto> y . (\\<box> lft_rel_st rel_ex) u x y \\<and>\n                    (\\<box> \\<diamond> (\\<lambda>y. y 0)) y :]\n\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "then"], ["proof (chain)\npicking this:\n  ([: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n   {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st rel_ex) x y :]) \\<parallel>\n  [: \\<lambda>x. \\<box> \\<diamond> (\\<lambda>y. y 0) :] =\n  [: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n  {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n  [: (u,\n  x) \\<leadsto> y . (\\<box> lft_rel_st rel_ex) u x y \\<and>\n                    (\\<box> \\<diamond> (\\<lambda>y. y 0)) y :]", "show ?thesis"], ["proof (prove)\nusing this:\n  ([: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n   {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n   [: \\<lambda>(x, y). (\\<box> lft_rel_st rel_ex) x y :]) \\<parallel>\n  [: \\<lambda>x. \\<box> \\<diamond> (\\<lambda>y. y 0) :] =\n  [: x \\<leadsto> (u, y) . u \\<in> init \\<and> x = y :] \\<circ>\n  {.x, y. prec_st prec_ex rel_ex x y.} \\<circ>\n  [: (u,\n  x) \\<leadsto> y . (\\<box> lft_rel_st rel_ex) u x y \\<and>\n                    (\\<box> \\<diamond> (\\<lambda>y. y 0)) y :]\n\ngoal (1 subgoal):\n 1. LIVE =\n    SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n    [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]", "by (simp add: init_def SymSystem_def)\n          (auto simp add: LIVE_def lft_rel_st_def always_def at_fun_def)"], ["proof (state)\nthis:\n  LIVE =\n  SymSystem {u. u 0 = 0} prec_ex rel_ex \\<parallel>\n  [: id (\\<lambda>x. id (\\<box> \\<diamond> (\\<lambda>y. y 0))) :]\n\ngoal:\nNo subgoals!", "qed"], ["", "definition \"preca_ex x = (x 1 = (\\<not>x 0))\""], ["", "lemma monotonic_SymSystem[simp]: \"mono (SymSystem init p r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (SymSystem init p r)", "by (simp add: SymSystem_def)"], ["", "lemma event_ex_aux_a: \"a 0 = (0::int) \\<Longrightarrow> \\<forall>n. xa (Suc n) = (\\<not> xa n) \\<Longrightarrow> \n        \\<forall>n. (xa n \\<and> a (Suc n) = a n + 1 \\<or> \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0) \\<Longrightarrow> \n        (a n = -1 \\<longrightarrow> xa n) \\<and> (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and> -1 \\<le> a n \\<and> a n \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n     \\<forall>n.\n        xa n \\<and> a (Suc n) = a n + 1 \\<or>\n        \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n    \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                      (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                      - 1 \\<le> a n \\<and> a n \\<le> 1", "proof (induction n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n     \\<forall>n.\n        xa n \\<and> a (Suc n) = a n + 1 \\<or>\n        \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n    \\<Longrightarrow> (a 0 = - 1 \\<longrightarrow> xa 0) \\<and>\n                      (a 0 = 1 \\<longrightarrow> \\<not> xa 0) \\<and>\n                      - 1 \\<le> a 0 \\<and> a 0 \\<le> 1\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "case 0"], ["proof (state)\nthis:\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (2 subgoals):\n 1. \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n     \\<forall>n.\n        xa n \\<and> a (Suc n) = a n + 1 \\<or>\n        \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n    \\<Longrightarrow> (a 0 = - 1 \\<longrightarrow> xa 0) \\<and>\n                      (a 0 = 1 \\<longrightarrow> \\<not> xa 0) \\<and>\n                      - 1 \\<le> a 0 \\<and> a 0 \\<le> 1\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a 0 = - 1 \\<longrightarrow> xa 0) \\<and>\n    (a 0 = 1 \\<longrightarrow> \\<not> xa 0) \\<and>\n    - 1 \\<le> a 0 \\<and> a 0 \\<le> 1", "by (metis \"0.prems\"(1) le_minus_one_simps(1) minus_zero zero_le_one zero_neq_neg_one)"], ["proof (state)\nthis:\n  (a 0 = - 1 \\<longrightarrow> xa 0) \\<and>\n  (a 0 = 1 \\<longrightarrow> \\<not> xa 0) \\<and>\n  - 1 \\<le> a 0 \\<and> a 0 \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "assume \"a (Suc n) = - (1::int)\""], ["proof (state)\nthis:\n  a (Suc n) = - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from this and Suc"], ["proof (chain)\npicking this:\n  a (Suc n) = - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have \"xa (Suc n)\""], ["proof (prove)\nusing this:\n  a (Suc n) = - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. xa (Suc n)", "by (metis add.commute add_le_same_cancel2 not_one_le_zero zero_neq_neg_one)"], ["proof (state)\nthis:\n  xa (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "}"], ["proof (state)\nthis:\n  a (Suc n) = - 1 \\<Longrightarrow> xa (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "note A = this"], ["proof (state)\nthis:\n  a (Suc n) = - 1 \\<Longrightarrow> xa (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "{"], ["proof (state)\nthis:\n  a (Suc n) = - 1 \\<Longrightarrow> xa (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "assume \"a (Suc n) = (1::int)\" and \"xa (Suc n)\""], ["proof (state)\nthis:\n  a (Suc n) = 1\n  xa (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from this and Suc"], ["proof (chain)\npicking this:\n  a (Suc n) = 1\n  xa (Suc n)\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have \"False\""], ["proof (prove)\nusing this:\n  a (Suc n) = 1\n  xa (Suc n)\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. False", "by (metis eq_iff le_iff_diff_le_0 not_one_le_zero)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "}"], ["proof (state)\nthis:\n  \\<lbrakk>a (Suc n) = 1; xa (Suc n)\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "note B = this"], ["proof (state)\nthis:\n  \\<lbrakk>a (Suc n) = 1; xa (Suc n)\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "{"], ["proof (state)\nthis:\n  \\<lbrakk>a (Suc n) = 1; xa (Suc n)\\<rbrakk> \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "assume \"a n \\<noteq> - (1::int)\""], ["proof (state)\nthis:\n  a n \\<noteq> - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from this and Suc"], ["proof (chain)\npicking this:\n  a n \\<noteq> - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have \" - (1::int) \\<le> a (Suc n)\""], ["proof (prove)\nusing this:\n  a n \\<noteq> - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. - 1 \\<le> a (Suc n)", "by (metis add.commute monoid_add_class.add.left_neutral le_less not_le right_minus uminus_add_conv_diff zle_add1_eq_le)"], ["proof (state)\nthis:\n  - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "}"], ["proof (state)\nthis:\n  a n \\<noteq> - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "note C = this"], ["proof (state)\nthis:\n  a n \\<noteq> - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "{"], ["proof (state)\nthis:\n  a n \\<noteq> - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "assume \"a n = - (1::int)\""], ["proof (state)\nthis:\n  a n = - 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from this and Suc"], ["proof (chain)\npicking this:\n  a n = - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have \" - (1::int) \\<le> a (Suc n)\""], ["proof (prove)\nusing this:\n  a n = - 1\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. - 1 \\<le> a (Suc n)", "by (metis add.commute le_minus_one_simps(4) monoid_add_class.add.right_neutral not_le right_minus zle_add1_eq_le)"], ["proof (state)\nthis:\n  - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "}"], ["proof (state)\nthis:\n  a n = - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "note D = this"], ["proof (state)\nthis:\n  a n = - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from C and D and Suc"], ["proof (chain)\npicking this:\n  a n \\<noteq> - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n  a n = - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have  E: \" - (1::int) \\<le> a (Suc n)\""], ["proof (prove)\nusing this:\n  a n \\<noteq> - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n  a n = - 1 \\<Longrightarrow> - 1 \\<le> a (Suc n)\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. - 1 \\<le> a (Suc n)", "by auto"], ["proof (state)\nthis:\n  - 1 \\<le> a (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0", "have F: \"a (Suc n) \\<le> (1::int)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n   \\<forall>n.\n      xa n \\<and> a (Suc n) = a n + 1 \\<or>\n      \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n  \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                    (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                    - 1 \\<le> a n \\<and> a n \\<le> 1\n  a 0 = 0\n  \\<forall>n. xa (Suc n) = (\\<not> xa n)\n  \\<forall>n.\n     xa n \\<and> a (Suc n) = a n + 1 \\<or>\n     \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\n\ngoal (1 subgoal):\n 1. a (Suc n) \\<le> 1", "by (metis eq_iff int_one_le_iff_zero_less le_iff_diff_le_0 le_less not_le zle_add1_eq_le)"], ["proof (state)\nthis:\n  a (Suc n) \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n                 \\<forall>n.\n                    xa n \\<and> a (Suc n) = a n + 1 \\<or>\n                    \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n                    a (Suc n) = 0\\<rbrakk>\n                \\<Longrightarrow> (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                                  (a n = 1 \\<longrightarrow>\n                                   \\<not> xa n) \\<and>\n                                  - 1 \\<le> a n \\<and> a n \\<le> 1;\n        a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n        \\<forall>n.\n           xa n \\<and> a (Suc n) = a n + 1 \\<or>\n           \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or>\n           a (Suc n) = 0\\<rbrakk>\n       \\<Longrightarrow> (a (Suc n) = - 1 \\<longrightarrow>\n                          xa (Suc n)) \\<and>\n                         (a (Suc n) = 1 \\<longrightarrow>\n                          \\<not> xa (Suc n)) \\<and>\n                         - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "from A B E F"], ["proof (chain)\npicking this:\n  a (Suc n) = - 1 \\<Longrightarrow> xa (Suc n)\n  \\<lbrakk>a (Suc n) = 1; xa (Suc n)\\<rbrakk> \\<Longrightarrow> False\n  - 1 \\<le> a (Suc n)\n  a (Suc n) \\<le> 1", "show ?case"], ["proof (prove)\nusing this:\n  a (Suc n) = - 1 \\<Longrightarrow> xa (Suc n)\n  \\<lbrakk>a (Suc n) = 1; xa (Suc n)\\<rbrakk> \\<Longrightarrow> False\n  - 1 \\<le> a (Suc n)\n  a (Suc n) \\<le> 1\n\ngoal (1 subgoal):\n 1. (a (Suc n) = - 1 \\<longrightarrow> xa (Suc n)) \\<and>\n    (a (Suc n) = 1 \\<longrightarrow> \\<not> xa (Suc n)) \\<and>\n    - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1", "by auto"], ["proof (state)\nthis:\n  (a (Suc n) = - 1 \\<longrightarrow> xa (Suc n)) \\<and>\n  (a (Suc n) = 1 \\<longrightarrow> \\<not> xa (Suc n)) \\<and>\n  - 1 \\<le> a (Suc n) \\<and> a (Suc n) \\<le> 1\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma event_ex_aux: \"a 0 = (0::int) \\<Longrightarrow> \\<forall>n. xa (Suc n) = (\\<not> xa n) \\<Longrightarrow> \n         \\<forall>n. (xa n \\<and> a (Suc n) = a n + 1 \\<or> \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0) \\<Longrightarrow> \n        (\\<forall> n . (a n = -1 \\<longrightarrow> xa n) \\<and> (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and> -1 \\<le> a n \\<and> a n \\<le> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a 0 = 0; \\<forall>n. xa (Suc n) = (\\<not> xa n);\n     \\<forall>n.\n        xa n \\<and> a (Suc n) = a n + 1 \\<or>\n        \\<not> xa n \\<and> a (Suc n) = a n - 1 \\<or> a (Suc n) = 0\\<rbrakk>\n    \\<Longrightarrow> \\<forall>n.\n                         (a n = - 1 \\<longrightarrow> xa n) \\<and>\n                         (a n = 1 \\<longrightarrow> \\<not> xa n) \\<and>\n                         - 1 \\<le> a n \\<and> a n \\<le> 1", "by (clarify, drule event_ex_aux_a, auto)"], ["", "lemma \"{.\\<box> preca_ex.} o LIVE \\<le> SymSystem {u . u 0 = 0} prec_ex rel_ex\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {. \\<box> preca_ex .} \\<circ> LIVE\n    \\<le> SymSystem {u. u 0 = 0} prec_ex rel_ex", "proof (unfold LIVE_fusion SymSystem_def, rule fusion_local_refinement, simp_all)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "fix z::\"nat \\<Rightarrow> bool\" and u :: \"nat \\<Rightarrow> int\" and x::\"nat \\<Rightarrow> bool\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume A: \"u 0 = 0\""], ["proof (state)\nthis:\n  u 0 = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume \"(\\<box> preca_ex) z\""], ["proof (state)\nthis:\n  (\\<box> preca_ex) z\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "then"], ["proof (chain)\npicking this:\n  (\\<box> preca_ex) z", "have B: \"\\<forall>x::nat. z (Suc x) = (\\<not> z x)\""], ["proof (prove)\nusing this:\n  (\\<box> preca_ex) z\n\ngoal (1 subgoal):\n 1. \\<forall>x. z (Suc x) = (\\<not> z x)", "by (auto simp add: preca_ex_def lft_rel_st_def rel_ex_def always_def at_fun_def)"], ["proof (state)\nthis:\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume \"(\\<box> lft_rel_st rel_ex) u z x\""], ["proof (state)\nthis:\n  (\\<box> lft_rel_st rel_ex) u z x\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "then"], ["proof (chain)\npicking this:\n  (\\<box> lft_rel_st rel_ex) u z x", "have C: \"\\<forall>xa . (z xa \\<and> u (Suc xa) = u xa + 1 \\<or> \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and> x xa = (u (Suc xa) = 0)\""], ["proof (prove)\nusing this:\n  (\\<box> lft_rel_st rel_ex) u z x\n\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n        \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or>\n        u (Suc xa) = 0) \\<and>\n       x xa = (u (Suc xa) = 0)", "by (auto simp add: preca_ex_def lft_rel_st_def rel_ex_def always_def at_fun_def)"], ["proof (state)\nthis:\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "have D: \"(\\<forall> n . (u n = -1 \\<longrightarrow> z n) \\<and> (u n = 1 \\<longrightarrow> \\<not> z n) \\<and> -1 \\<le> u n \\<and> u n \\<le> 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       (u n = - 1 \\<longrightarrow> z n) \\<and>\n       (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n       - 1 \\<le> u n \\<and> u n \\<le> 1", "by (cut_tac A B C, rule event_ex_aux, auto)"], ["proof (state)\nthis:\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "{"], ["proof (state)\nthis:\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "fix a::nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume \"u (Suc a) = 0\""], ["proof (state)\nthis:\n  u (Suc a) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "from this A B C"], ["proof (chain)\npicking this:\n  u (Suc a) = 0\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)", "have \"\\<exists>b . u (Suc (a + b)) = 0\""], ["proof (prove)\nusing this:\n  u (Suc a) = 0\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n\ngoal (1 subgoal):\n 1. \\<exists>b. u (Suc (a + b)) = 0", "by (metis monoid_add_class.add.right_neutral)"], ["proof (state)\nthis:\n  \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "}"], ["proof (state)\nthis:\n  u (Suc a) = 0 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "note 1 = this"], ["proof (state)\nthis:\n  u (Suc a) = 0 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "{"], ["proof (state)\nthis:\n  u (Suc a) = 0 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume \"u (Suc a) = -1\""], ["proof (state)\nthis:\n  u (Suc a) = - 1\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "from this A B C D"], ["proof (chain)\npicking this:\n  u (Suc a) = - 1\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1", "have \"\\<exists>b . u (Suc (a + b)) = 0\""], ["proof (prove)\nusing this:\n  u (Suc a) = - 1\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>b. u (Suc (a + b)) = 0", "by (metis add_Suc_right diff_minus_eq_add diff_self monoid_add_class.add.right_neutral)"], ["proof (state)\nthis:\n  \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "}"], ["proof (state)\nthis:\n  u (Suc a) = - 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "note 2 = this"], ["proof (state)\nthis:\n  u (Suc a) = - 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "{"], ["proof (state)\nthis:\n  u (Suc a) = - 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "assume \"u (Suc a) = 1\""], ["proof (state)\nthis:\n  u (Suc a) = 1\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "from this A B C D"], ["proof (chain)\npicking this:\n  u (Suc a) = 1\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1", "have \"\\<exists>b . u (Suc (a + b)) = 0\""], ["proof (prove)\nusing this:\n  u (Suc a) = 1\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>b. u (Suc (a + b)) = 0", "by (metis add_Suc_right diff_self monoid_add_class.add.right_neutral)"], ["proof (state)\nthis:\n  \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "}"], ["proof (state)\nthis:\n  u (Suc a) = 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "note 3 = this"], ["proof (state)\nthis:\n  u (Suc a) = 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "from 1 2 3 A B C D"], ["proof (chain)\npicking this:\n  u (Suc a) = 0 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u (Suc a) = - 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u (Suc a) = 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1", "have \"\\<exists>b . x (a + b)\""], ["proof (prove)\nusing this:\n  u (Suc a) = 0 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u (Suc a) = - 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u (Suc a) = 1 \\<Longrightarrow> \\<exists>b. u (Suc (a + b)) = 0\n  u 0 = 0\n  \\<forall>x. z (Suc x) = (\\<not> z x)\n  \\<forall>xa.\n     (z xa \\<and> u (Suc xa) = u xa + 1 \\<or>\n      \\<not> z xa \\<and> u (Suc xa) = u xa - 1 \\<or> u (Suc xa) = 0) \\<and>\n     x xa = (u (Suc xa) = 0)\n  \\<forall>n.\n     (u n = - 1 \\<longrightarrow> z n) \\<and>\n     (u n = 1 \\<longrightarrow> \\<not> z n) \\<and>\n     - 1 \\<le> u n \\<and> u n \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<exists>b. x (a + b)", "by (simp, metis diff_0 int_one_le_iff_zero_less le_less not_le zle_diff1_eq)"], ["proof (state)\nthis:\n  \\<exists>b. x (a + b)\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "}"], ["proof (state)\nthis:\n  \\<exists>b. x (?a2 + b)\n\ngoal (1 subgoal):\n 1. \\<And>z u x.\n       \\<lbrakk>u 0 = 0; (\\<box> preca_ex) z;\n        (\\<box> lft_rel_st rel_ex) u z x\\<rbrakk>\n       \\<Longrightarrow> (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "then"], ["proof (chain)\npicking this:\n  \\<exists>b. x (?a2 + b)", "show \"(\\<box> \\<diamond> (\\<lambda>y . y 0)) x\""], ["proof (prove)\nusing this:\n  \\<exists>b. x (?a2 + b)\n\ngoal (1 subgoal):\n 1. (\\<box> \\<diamond> (\\<lambda>y. y 0)) x", "by (simp add: always_def eventually_def preca_ex_def at_fun_def rel_ex_def lft_rel_st_def)"], ["proof (state)\nthis:\n  (\\<box> \\<diamond> (\\<lambda>y. y 0)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}