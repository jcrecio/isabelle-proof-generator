{"file_name": "/home/qj213/afp-2021-10-22/thys/FocusStreamsCaseStudies/JoinSplitTime.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/FocusStreamsCaseStudies", "problem_names": ["lemma join_ti_hint1:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"join_ti s x i = []\"", "lemma join_ti_hint2:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"s (x + (Suc i)) = []\"", "lemma join_ti_hint3:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"s (x + i) = []\"", "lemma join_ti_empty_join:\n  assumes \"i \\<le> n\"\n         and \"join_ti s x n = []\"\n  shows      \"s (x+i) = []\"", "lemma join_ti_empty_ti:\n  assumes \"\\<forall> i \\<le> n. s (x+i) = []\"\n  shows    \"join_ti s x n = []\"", "lemma join_ti_1nempty:\n  assumes \"\\<forall> i. 0 < i \\<and> i < Suc n \\<longrightarrow> s (x+i) = []\" \n  shows    \"join_ti s x n = s x\"", "lemma join_time1t: \"\\<forall> t. join_time s (1::nat) t = s t\"", "lemma join_time1: \"join_time s 1 = s\"", "lemma join_time_empty1:\n  assumes h1:\"i < n\"\n         and h2:\"join_time s n t = []\"\n  shows      \"s (n*t + i) = []\"", "lemma fin_join_ti_hint1:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows   \"fin_join_ti s x i = []\"", "lemma fin_join_ti_hint2:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows    \"nth s (x + (Suc i)) = []\"", "lemma fin_join_ti_hint3:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows    \"nth s (x + i) = []\"", "lemma fin_join_ti_empty_join:\n  assumes \"i \\<le> n\"\n         and \"fin_join_ti s x n = []\"\n  shows      \"nth s (x+i) = []\"", "lemma fin_join_ti_empty_ti:\n  assumes \"\\<forall> i \\<le> n. nth s (x+i) = []\"\n  shows    \"fin_join_ti s x n = []\"", "lemma fin_join_ti_1nempty:\n  assumes \"\\<forall> i. 0 < i \\<and> i < Suc n \\<longrightarrow> nth s (x+i) = []\" \n  shows    \"fin_join_ti s x n = nth s x\"", "lemma split_time1t: \"\\<forall> t. split_time s 1 t = s t\"", "lemma split_time1: \"split_time s 1 = s\"", "lemma split_time_mod: \n  assumes \"t mod n \\<noteq> 0\"\n  shows    \"split_time s n t = []\"", "lemma split_time_nempty: \n  assumes \"0 < n\"\n  shows    \"split_time s n (n * t) = s t\"", "lemma split_time_nempty_Suc:\n  assumes \"0 < n\"\n  shows   \"split_time s (Suc n) ((Suc n) * t) = split_time s n (n * t)\"", "lemma split_time_empty:\n  assumes \"i < n\" and h2:\"0 < i\"\n  shows    \"split_time s n (n * t + i) = []\"", "lemma split_time_empty_Suc:\n  assumes h1:\"i < n\" \n         and h2:\"0 < i\"\n  shows \"split_time s (Suc n) ((Suc n)* t + i)  = split_time s n (n * t + i)\"", "lemma split_time_hint1:\n  assumes \"n = Suc m\"\n  shows   \"split_time s (Suc n) (i + n * i + n) = []\"", "lemma join_split_i:\n  assumes \"0 < n\"\n  shows   \"join_time (split_time s n) n i = s i\"", "lemma join_split:\n  assumes \"0 < n\"\n  shows \"join_time (split_time s n) n = s\""], "translations": [["", "lemma join_ti_hint1:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"join_ti s x i = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_ti s x i = []", "using assms"], ["proof (prove)\nusing this:\n  join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. join_ti s x i = []", "by auto"], ["", "lemma join_ti_hint2:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"s (x + (Suc i)) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (x + Suc i) = []", "using assms"], ["proof (prove)\nusing this:\n  join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. s (x + Suc i) = []", "by auto"], ["", "lemma join_ti_hint3:\n  assumes \"join_ti s x (Suc i) = []\"\n  shows   \"s (x + i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (x + i) = []", "using assms"], ["proof (prove)\nusing this:\n  join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. s (x + i) = []", "by (induct i, auto)"], ["", "lemma join_ti_empty_join:\n  assumes \"i \\<le> n\"\n         and \"join_ti s x n = []\"\n  shows      \"s (x+i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (x + i) = []", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> n\n  join_ti s x n = []\n\ngoal (1 subgoal):\n 1. s (x + i) = []", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; join_ti s x 0 = []\\<rbrakk>\n    \\<Longrightarrow> s (x + i) = []\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s (x + i) = [];\n        i \\<le> Suc n; join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s (x + i) = []", "case 0"], ["proof (state)\nthis:\n  i \\<le> 0\n  join_ti s x 0 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; join_ti s x 0 = []\\<rbrakk>\n    \\<Longrightarrow> s (x + i) = []\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s (x + i) = [];\n        i \\<le> Suc n; join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s (x + i) = []", "then"], ["proof (chain)\npicking this:\n  i \\<le> 0\n  join_ti s x 0 = []", "show ?case"], ["proof (prove)\nusing this:\n  i \\<le> 0\n  join_ti s x 0 = []\n\ngoal (1 subgoal):\n 1. s (x + i) = []", "by auto"], ["proof (state)\nthis:\n  s (x + i) = []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s (x + i) = [];\n        i \\<le> Suc n; join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s (x + i) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s (x + i) = [];\n        i \\<le> Suc n; join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s (x + i) = []", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s (x + i) = []\n  i \\<le> Suc n\n  join_ti s x (Suc n) = []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s (x + i) = [];\n        i \\<le> Suc n; join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s (x + i) = []", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s (x + i) = []\n  i \\<le> Suc n\n  join_ti s x (Suc n) = []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> n; join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s (x + i) = []\n  i \\<le> Suc n\n  join_ti s x (Suc n) = []\n\ngoal (1 subgoal):\n 1. s (x + i) = []", "by (metis join_ti_hint1 join_ti_hint2 le_SucE)"], ["proof (state)\nthis:\n  s (x + i) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma join_ti_empty_ti:\n  assumes \"\\<forall> i \\<le> n. s (x+i) = []\"\n  shows    \"join_ti s x n = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_ti s x n = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>n. s (x + i) = []\n\ngoal (1 subgoal):\n 1. join_ti s x n = []", "by (induct n, auto)"], ["", "lemma join_ti_1nempty:\n  assumes \"\\<forall> i. 0 < i \\<and> i < Suc n \\<longrightarrow> s (x+i) = []\" \n  shows    \"join_ti s x n = s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_ti s x n = s x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i. 0 < i \\<and> i < Suc n \\<longrightarrow> s (x + i) = []\n\ngoal (1 subgoal):\n 1. join_ti s x n = s x", "by (induct n, auto)"], ["", "lemma join_time1t: \"\\<forall> t. join_time s (1::nat) t = s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. join_time s 1 t = s t", "by (simp add: join_time_def)"], ["", "lemma join_time1: \"join_time s 1 = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_time s 1 = s", "by (simp add: fun_eq_iff join_time_def)"], ["", "lemma join_time_empty1:\n  assumes h1:\"i < n\"\n         and h2:\"join_time s n t = []\"\n  shows      \"s (n*t + i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (n * t + i) = []", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> s (n * t + i) = []\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> s (n * t + i) = []\n 2. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "from assms and this"], ["proof (chain)\npicking this:\n  i < n\n  join_time s n t = []\n  n = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i < n\n  join_time s n t = []\n  n = 0\n\ngoal (1 subgoal):\n 1. s (n * t + i) = []", "by (simp add: join_time_def)"], ["proof (state)\nthis:\n  s (n * t + i) = []\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "assume a2:\"n = Suc x\""], ["proof (state)\nthis:\n  n = Suc x\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "from assms and a2"], ["proof (chain)\npicking this:\n  i < n\n  join_time s n t = []\n  n = Suc x", "have sg1:\"join_ti s (t + x * t) x = []\""], ["proof (prove)\nusing this:\n  i < n\n  join_time s n t = []\n  n = Suc x\n\ngoal (1 subgoal):\n 1. join_ti s (t + x * t) x = []", "by (simp add: join_time_def)"], ["proof (state)\nthis:\n  join_ti s (t + x * t) x = []\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "from a2 and h1"], ["proof (chain)\npicking this:\n  n = Suc x\n  i < n", "have \"i \\<le> x\""], ["proof (prove)\nusing this:\n  n = Suc x\n  i < n\n\ngoal (1 subgoal):\n 1. i \\<le> x", "by simp"], ["proof (state)\nthis:\n  i \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>nat. n = Suc nat \\<Longrightarrow> s (n * t + i) = []", "from this and sg1 and a2"], ["proof (chain)\npicking this:\n  i \\<le> x\n  join_ti s (t + x * t) x = []\n  n = Suc x", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> x\n  join_ti s (t + x * t) x = []\n  n = Suc x\n\ngoal (1 subgoal):\n 1. s (n * t + i) = []", "by (simp add: join_ti_empty_join)"], ["proof (state)\nthis:\n  s (n * t + i) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fin_join_ti_hint1:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows   \"fin_join_ti s x i = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_join_ti s x i = []", "using assms"], ["proof (prove)\nusing this:\n  fin_join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. fin_join_ti s x i = []", "by auto"], ["", "lemma fin_join_ti_hint2:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows    \"nth s (x + (Suc i)) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ! (x + Suc i) = []", "using assms"], ["proof (prove)\nusing this:\n  fin_join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. s ! (x + Suc i) = []", "by auto"], ["", "lemma fin_join_ti_hint3:\n  assumes \"fin_join_ti s x (Suc i) = []\"\n  shows    \"nth s (x + i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "using assms"], ["proof (prove)\nusing this:\n  fin_join_ti s x (Suc i) = []\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "by (induct i, auto)"], ["", "lemma fin_join_ti_empty_join:\n  assumes \"i \\<le> n\"\n         and \"fin_join_ti s x n = []\"\n  shows      \"nth s (x+i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "using assms"], ["proof (prove)\nusing this:\n  i \\<le> n\n  fin_join_ti s x n = []\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; fin_join_ti s x 0 = []\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s ! (x + i) = [];\n        i \\<le> Suc n; fin_join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s ! (x + i) = []", "case 0"], ["proof (state)\nthis:\n  i \\<le> 0\n  fin_join_ti s x 0 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> 0; fin_join_ti s x 0 = []\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []\n 2. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s ! (x + i) = [];\n        i \\<le> Suc n; fin_join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s ! (x + i) = []", "then"], ["proof (chain)\npicking this:\n  i \\<le> 0\n  fin_join_ti s x 0 = []", "show ?case"], ["proof (prove)\nusing this:\n  i \\<le> 0\n  fin_join_ti s x 0 = []\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "by auto"], ["proof (state)\nthis:\n  s ! (x + i) = []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s ! (x + i) = [];\n        i \\<le> Suc n; fin_join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s ! (x + i) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s ! (x + i) = [];\n        i \\<le> Suc n; fin_join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s ! (x + i) = []", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n                \\<Longrightarrow> s ! (x + i) = [];\n        i \\<le> Suc n; fin_join_ti s x (Suc n) = []\\<rbrakk>\n       \\<Longrightarrow> s ! (x + i) = []", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "proof (cases \"i = Suc n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i = Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []\n 2. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []", "assume \"i = Suc n\""], ["proof (state)\nthis:\n  i = Suc n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i = Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []\n 2. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []", "from Suc and this"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n  i = Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n  i = Suc n\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "by simp"], ["proof (state)\nthis:\n  s ! (x + i) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []", "assume \"i \\<noteq> Suc n\""], ["proof (state)\nthis:\n  i \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n             \\<Longrightarrow> s ! (x + i) = [];\n     i \\<le> Suc n; fin_join_ti s x (Suc n) = []; i \\<noteq> Suc n\\<rbrakk>\n    \\<Longrightarrow> s ! (x + i) = []", "from Suc and this"], ["proof (chain)\npicking this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n  i \\<noteq> Suc n", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>i \\<le> n; fin_join_ti s x n = []\\<rbrakk>\n  \\<Longrightarrow> s ! (x + i) = []\n  i \\<le> Suc n\n  fin_join_ti s x (Suc n) = []\n  i \\<noteq> Suc n\n\ngoal (1 subgoal):\n 1. s ! (x + i) = []", "by simp"], ["proof (state)\nthis:\n  s ! (x + i) = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s ! (x + i) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fin_join_ti_empty_ti:\n  assumes \"\\<forall> i \\<le> n. nth s (x+i) = []\"\n  shows    \"fin_join_ti s x n = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_join_ti s x n = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i\\<le>n. s ! (x + i) = []\n\ngoal (1 subgoal):\n 1. fin_join_ti s x n = []", "by (induct n, auto)"], ["", "lemma fin_join_ti_1nempty:\n  assumes \"\\<forall> i. 0 < i \\<and> i < Suc n \\<longrightarrow> nth s (x+i) = []\" \n  shows    \"fin_join_ti s x n = nth s x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_join_ti s x n = s ! x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i. 0 < i \\<and> i < Suc n \\<longrightarrow> s ! (x + i) = []\n\ngoal (1 subgoal):\n 1. fin_join_ti s x n = s ! x", "by (induct n, auto)"], ["", "subsection \\<open>Split time units\\<close>"], ["", "definition \n  split_time ::\"'a istream \\<Rightarrow> nat \\<Rightarrow> 'a istream\"\nwhere\n \"split_time s n t \\<equiv> \n  ( if (t mod n = 0) \n    then s (t div n)\n    else [])\""], ["", "lemma split_time1t: \"\\<forall> t. split_time s 1 t = s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. split_time s 1 t = s t", "by (simp add: split_time_def)"], ["", "lemma split_time1: \"split_time s 1 = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s 1 = s", "by (simp add: fun_eq_iff split_time_def)"], ["", "lemma split_time_mod: \n  assumes \"t mod n \\<noteq> 0\"\n  shows    \"split_time s n t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s n t = []", "using assms"], ["proof (prove)\nusing this:\n  t mod n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. split_time s n t = []", "by (simp add: split_time_def)"], ["", "lemma split_time_nempty: \n  assumes \"0 < n\"\n  shows    \"split_time s n (n * t) = s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s n (n * t) = s t", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. split_time s n (n * t) = s t", "by (simp add: split_time_def)"], ["", "lemma split_time_nempty_Suc:\n  assumes \"0 < n\"\n  shows   \"split_time s (Suc n) ((Suc n) * t) = split_time s n (n * t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "have \"0 < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc n", "by simp"], ["proof (state)\nthis:\n  0 < Suc n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "then"], ["proof (chain)\npicking this:\n  0 < Suc n", "have sg1:\"split_time s (Suc n) ((Suc n) * t) =  s t\""], ["proof (prove)\nusing this:\n  0 < Suc n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = s t", "by (rule split_time_nempty)"], ["proof (state)\nthis:\n  split_time s (Suc n) (Suc n * t) = s t\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "from assms"], ["proof (chain)\npicking this:\n  0 < n", "have sg2:\"split_time s n (n * t) = s t\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. split_time s n (n * t) = s t", "by (rule split_time_nempty)"], ["proof (state)\nthis:\n  split_time s n (n * t) = s t\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "from sg1 and sg2"], ["proof (chain)\npicking this:\n  split_time s (Suc n) (Suc n * t) = s t\n  split_time s n (n * t) = s t", "show ?thesis"], ["proof (prove)\nusing this:\n  split_time s (Suc n) (Suc n * t) = s t\n  split_time s n (n * t) = s t\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t) = split_time s n (n * t)", "by simp"], ["proof (state)\nthis:\n  split_time s (Suc n) (Suc n * t) = split_time s n (n * t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_time_empty:\n  assumes \"i < n\" and h2:\"0 < i\"\n  shows    \"split_time s n (n * t + i) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s n (n * t + i) = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. split_time s n (n * t + i) = []", "from assms"], ["proof (chain)\npicking this:\n  i < n\n  0 < i", "have \"0 < (n * t + i) mod n\""], ["proof (prove)\nusing this:\n  i < n\n  0 < i\n\ngoal (1 subgoal):\n 1. 0 < (n * t + i) mod n", "by (simp add: arith_mod_nzero)"], ["proof (state)\nthis:\n  0 < (n * t + i) mod n\n\ngoal (1 subgoal):\n 1. split_time s n (n * t + i) = []", "from assms and this"], ["proof (chain)\npicking this:\n  i < n\n  0 < i\n  0 < (n * t + i) mod n", "show ?thesis"], ["proof (prove)\nusing this:\n  i < n\n  0 < i\n  0 < (n * t + i) mod n\n\ngoal (1 subgoal):\n 1. split_time s n (n * t + i) = []", "by (simp add: split_time_def)"], ["proof (state)\nthis:\n  split_time s n (n * t + i) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_time_empty_Suc:\n  assumes h1:\"i < n\" \n         and h2:\"0 < i\"\n  shows \"split_time s (Suc n) ((Suc n)* t + i)  = split_time s n (n * t + i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "from h1"], ["proof (chain)\npicking this:\n  i < n", "have \"i < Suc n\""], ["proof (prove)\nusing this:\n  i < n\n\ngoal (1 subgoal):\n 1. i < Suc n", "by simp"], ["proof (state)\nthis:\n  i < Suc n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "from this and h2"], ["proof (chain)\npicking this:\n  i < Suc n\n  0 < i", "have sg2:\"split_time s (Suc n) (Suc n * t + i) = []\""], ["proof (prove)\nusing this:\n  i < Suc n\n  0 < i\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = []", "by (rule split_time_empty)"], ["proof (state)\nthis:\n  split_time s (Suc n) (Suc n * t + i) = []\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "from assms"], ["proof (chain)\npicking this:\n  i < n\n  0 < i", "have sg3:\"split_time s n (n * t + i) = []\""], ["proof (prove)\nusing this:\n  i < n\n  0 < i\n\ngoal (1 subgoal):\n 1. split_time s n (n * t + i) = []", "by (rule split_time_empty)"], ["proof (state)\nthis:\n  split_time s n (n * t + i) = []\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "from sg3 and sg2"], ["proof (chain)\npicking this:\n  split_time s n (n * t + i) = []\n  split_time s (Suc n) (Suc n * t + i) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  split_time s n (n * t + i) = []\n  split_time s (Suc n) (Suc n * t + i) = []\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)", "by simp"], ["proof (state)\nthis:\n  split_time s (Suc n) (Suc n * t + i) = split_time s n (n * t + i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma split_time_hint1:\n  assumes \"n = Suc m\"\n  shows   \"split_time s (Suc n) (i + n * i + n) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "have sg1:\"i + n * i + n = (Suc n) * i + n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + n * i + n = Suc n * i + n", "by simp"], ["proof (state)\nthis:\n  i + n * i + n = Suc n * i + n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "have sg2:\"n < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < Suc n", "by simp"], ["proof (state)\nthis:\n  n < Suc n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "from assms"], ["proof (chain)\npicking this:\n  n = Suc m", "have sg3:\"0 < n\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. 0 < n", "by simp"], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "from sg2 and sg3"], ["proof (chain)\npicking this:\n  n < Suc n\n  0 < n", "have sg4:\"split_time s (Suc n) (Suc n * i + n) = []\""], ["proof (prove)\nusing this:\n  n < Suc n\n  0 < n\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (Suc n * i + n) = []", "by (rule split_time_empty)"], ["proof (state)\nthis:\n  split_time s (Suc n) (Suc n * i + n) = []\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "from sg1 and sg4"], ["proof (chain)\npicking this:\n  i + n * i + n = Suc n * i + n\n  split_time s (Suc n) (Suc n * i + n) = []", "show ?thesis"], ["proof (prove)\nusing this:\n  i + n * i + n = Suc n * i + n\n  split_time s (Suc n) (Suc n * i + n) = []\n\ngoal (1 subgoal):\n 1. split_time s (Suc n) (i + n * i + n) = []", "by auto"], ["proof (state)\nthis:\n  split_time s (Suc n) (i + n * i + n) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Duality of the split and the join operators\\<close>"], ["", "lemma join_split_i:\n  assumes \"0 < n\"\n  shows   \"join_time (split_time s n) n i = s i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_time (split_time s n) n i = s i", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> join_time (split_time s n) n i = s i\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "assume \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> join_time (split_time s n) n i = s i\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "from this and assms"], ["proof (chain)\npicking this:\n  n = 0\n  0 < n", "show ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n  0 < n\n\ngoal (1 subgoal):\n 1. join_time (split_time s n) n i = s i", "by simp"], ["proof (state)\nthis:\n  join_time (split_time s n) n i = s i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "fix k"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "assume a2:\"n = Suc k\""], ["proof (state)\nthis:\n  n = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "have sg0:\"0 < Suc k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < Suc k", "by simp"], ["proof (state)\nthis:\n  0 < Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "then"], ["proof (chain)\npicking this:\n  0 < Suc k", "have sg1:\"(split_time s (Suc k)) (Suc k * i) = s i\""], ["proof (prove)\nusing this:\n  0 < Suc k\n\ngoal (1 subgoal):\n 1. split_time s (Suc k) (Suc k * i) = s i", "by (rule split_time_nempty)"], ["proof (state)\nthis:\n  split_time s (Suc k) (Suc k * i) = s i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "have sg2:\"i + k * i = (Suc k) * i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i + k * i = Suc k * i", "by simp"], ["proof (state)\nthis:\n  i + k * i = Suc k * i\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "have sg3:\"\\<forall> j. 0 < j \\<and> j < Suc k \\<longrightarrow> split_time s (Suc k) (Suc k * i + j) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j.\n       0 < j \\<and> j < Suc k \\<longrightarrow>\n       split_time s (Suc k) (Suc k * i + j) = []", "by (clarify, rule split_time_empty, auto)"], ["proof (state)\nthis:\n  \\<forall>j.\n     0 < j \\<and> j < Suc k \\<longrightarrow>\n     split_time s (Suc k) (Suc k * i + j) = []\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "from sg3"], ["proof (chain)\npicking this:\n  \\<forall>j.\n     0 < j \\<and> j < Suc k \\<longrightarrow>\n     split_time s (Suc k) (Suc k * i + j) = []", "have sg4:\"join_ti (split_time s (Suc k)) ((Suc k) * i) k = \n                     (split_time s (Suc k)) (Suc k * i)\""], ["proof (prove)\nusing this:\n  \\<forall>j.\n     0 < j \\<and> j < Suc k \\<longrightarrow>\n     split_time s (Suc k) (Suc k * i + j) = []\n\ngoal (1 subgoal):\n 1. join_ti (split_time s (Suc k)) (Suc k * i) k =\n    split_time s (Suc k) (Suc k * i)", "by (rule join_ti_1nempty)"], ["proof (state)\nthis:\n  join_ti (split_time s (Suc k)) (Suc k * i) k =\n  split_time s (Suc k) (Suc k * i)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow> join_time (split_time s n) n i = s i", "from a2 and sg4 and sg1"], ["proof (chain)\npicking this:\n  n = Suc k\n  join_ti (split_time s (Suc k)) (Suc k * i) k =\n  split_time s (Suc k) (Suc k * i)\n  split_time s (Suc k) (Suc k * i) = s i", "show ?thesis"], ["proof (prove)\nusing this:\n  n = Suc k\n  join_ti (split_time s (Suc k)) (Suc k * i) k =\n  split_time s (Suc k) (Suc k * i)\n  split_time s (Suc k) (Suc k * i) = s i\n\ngoal (1 subgoal):\n 1. join_time (split_time s n) n i = s i", "by (simp add: join_time_def)"], ["proof (state)\nthis:\n  join_time (split_time s n) n i = s i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma join_split:\n  assumes \"0 < n\"\n  shows \"join_time (split_time s n) n = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. join_time (split_time s n) n = s", "using assms"], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. join_time (split_time s n) n = s", "by (simp add: fun_eq_iff join_split_i)"], ["", "end"]]}