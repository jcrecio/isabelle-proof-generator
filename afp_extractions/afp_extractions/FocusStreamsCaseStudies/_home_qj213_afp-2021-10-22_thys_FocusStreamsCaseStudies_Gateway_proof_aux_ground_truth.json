{"file_name": "/home/qj213/afp-2021-10-22/thys/FocusStreamsCaseStudies/Gateway_proof_aux.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/FocusStreamsCaseStudies", "problem_names": ["lemma aType_empty: \n  assumes h1:\"msg (Suc 0) a\"\n         and h2: \"a t \\<noteq> [sc_ack]\"\n  shows       \"a t = []\"", "lemma aType_nonempty: \n  assumes h1:\"msg (Suc 0) a\"\n      and h2: \"a t \\<noteq> []\"\n  shows       \"a t = [sc_ack]\"", "lemma aType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [sc_ack]\"", "lemma stopType_empty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> [stop_vc]\"\n  shows \"a t = []\"", "lemma stopType_nonempty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> []\"\n  shows \"a t = [stop_vc]\"", "lemma stopType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [stop_vc]\"", "lemma vcType_empty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> [vc_com]\"\n  shows\"a t = []\"", "lemma vcType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [vc_com]\"", "lemma Delay_L1:\n assumes h1:\"\\<forall>t1 < t. i1 t1 = []\"\n         and h2:\"Delay y i1 d x i2\"\n         and h3:\"t2 < t + d\"\n   shows \"i2 t2 = []\"", "lemma Delay_L2:\n assumes \"\\<forall>t1 < t. i1 t1 = []\"\n        and \"Delay y i1 d x i2\"\n   shows \"\\<forall>t2 < t + d. i2 t2 = []\"", "lemma Delay_L3:\n assumes h1:\"\\<forall>t1 \\<le> t. y t1 = []\"\n        and h2:\"Delay y i1 d x i2\"\n        and h3:\"t2 \\<le> t + d\"\n   shows \"x t2 = []\"", "lemma Delay_L4:\n assumes \"\\<forall>t1 \\<le> t. y t1 = []\"\n     and \"Delay y i1 d x i2\"\n   shows \"\\<forall>t2 \\<le> t + d. x t2 = []\"", "lemma Delay_lengthOut1:\n  assumes h1:\"\\<forall>t. length (x t) \\<le> Suc 0\"\n         and h2:\"Delay x i1 d y i2\"\n  shows \"length (y t) \\<le> Suc 0\"", "lemma Delay_msg1:\n  assumes \"msg (Suc 0) x\"\n         and \"Delay x i1 d y i2\" \n  shows      \"msg (Suc 0) y\"", "lemma Loss_L1:\n assumes \"\\<forall>t2<t. i2 t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 < t\"\n        and \"ts lose\"\n shows \"i t2 = []\"", "lemma Loss_L2:\n assumes \"\\<forall>t2<t. i2 t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2<t. i t2 = []\"", "lemma Loss_L3:\n assumes \"\\<forall>t2<t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 < t\"\n        and \"ts lose\"\n shows \"y t2 = []\"", "lemma Loss_L4:\n assumes \"\\<forall>t2<t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2<t. y t2 = []\"", "lemma Loss_L5:\n assumes \"\\<forall>t1 \\<le> t. a t1 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 \\<le> t\"\n        and \"ts lose\"\n shows \"y t2 = []\"", "lemma Loss_L5Suc:\n assumes \"\\<forall>j \\<le> d. a (t + Suc j) = []\"\n        and \"Loss lose a i2 y i\"\n        and \"Suc j \\<le> d\"\n        and tsLose:\"ts lose\"\n shows \"y (t + Suc j) = []\"", "lemma Loss_L6:\n assumes \"\\<forall>t2 \\<le> t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2 \\<le> t. y t2 = []\"", "lemma Loss_lengthOut1:\n  assumes h1:\"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and h2:\"Loss lose a i2 x i\"\n  shows \"length (x t) \\<le> Suc 0\"", "lemma Loss_lengthOut2:\n  assumes \"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and \"Loss lose a i2 x i\"\n  shows \"\\<forall>t. length (x t) \\<le> Suc 0\"", "lemma Loss_msg1:\n  assumes \"msg (Suc 0) a\" \n         and \"Loss lose a i2 x i\"\n  shows      \"msg (Suc 0) x\"", "lemma Loss_Delay_length_y:\n  assumes \"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and \"Delay x i1 d y i2\"\n         and \"Loss lose a i2 x i\"\n  shows \"length (y t) \\<le> Suc 0\"", "lemma Loss_Delay_msg_a:\n  assumes \"msg (Suc 0) a\"\n         and \"Delay x i1 d y i2\"\n         and \"Loss lose a i2 x i\"\n  shows  \"msg (Suc 0) y\"", "lemma inf_last_ti2:\n  assumes \"inf_last_ti dt (Suc (Suc t)) \\<noteq> []\"\n  shows    \"inf_last_ti dt (Suc (Suc (t + k))) \\<noteq> []\"", "lemma aux_ack_t2:\n  assumes h1:\"\\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n         and h2:\"Suc (Suc t) < t2\"\n         and h3:\"t2 < t + 3 + k\"\n  shows \"ack t2 = [connection_ok]\"", "lemma aux_lemma_lose_1:\n  assumes h1:\"\\<forall>j\\<le>((2::nat) * d + ((4::nat) + k)). (lose (t + j) = x)\"\n         and h2:\"ka\\<le>Suc d\"\n  shows \"lose (Suc (Suc (t + k + ka))) = x\"", "lemma aux_lemma_lose_2:\n  assumes \"\\<forall>j\\<le>(2::nat) * d + ((4::nat) + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>x\\<le>d + (1::nat). lose (t + x) = [False]\"", "lemma aux_lemma_lose_3a:\n  assumes h1:\"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\" \n         and h2:\"ka \\<le> Suc d\"\n  shows \"lose (d + (t + (3 + k)) + ka) = [False]\"", "lemma aux_lemma_lose_3:\n  assumes \"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>ka\\<le>Suc d. lose (d + (t + (3 + k)) + ka) = [False]\"", "lemma aux_arith1_Gateway7:\n  assumes \"t2 - t \\<le> (2::nat) * d + (t + ((4::nat) + k))\"\n         and \"t2 < t + (3::nat) + k + d\"\n         and \"\\<not> t2 - d < (0::nat)\"\n  shows \"t2 - d < t + (3::nat) + k\"", "lemma ts_lose_ack_st1ts:\n  assumes \"ts lose\" \n         and \"lose t = [True]  \\<longrightarrow>  ack t = [x]  \\<and> st_out t = x\"\n         and \"lose t = [False] \\<longrightarrow>  ack t = [y]  \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\"", "lemma ts_lose_ack_st1:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n  and h2:\"lose t = [True]  \\<longrightarrow>  ack t = [x]  \\<and> st_out t = x\"\n  and h3:\"lose t = [False] \\<longrightarrow>  ack t = [y]  \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\"", "lemma ts_lose_ack_st2ts:\n  assumes \"ts lose\" \n         and \"lose t = [True] \\<longrightarrow> \n                 ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n        and \"lose t = [False] \\<longrightarrow> \n               ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\"", "lemma ts_lose_ack_st2:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n         and h2:\"lose t = [True] \\<longrightarrow> \n                ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n         and h3:\"lose t = [False] \\<longrightarrow> \n                ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\"", "lemma ts_lose_ack_st2vc_com:\nassumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n       and h2:\"lose t = [True] \\<longrightarrow> \n             ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n       and h3:\"lose t = [False] \\<longrightarrow> \n             ack t = [y] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = y\"\nshows \"ack t = [st_out t]\"", "lemma ts_lose_ack_st2send:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n  and h2:\"lose t = [True] \\<longrightarrow> \n      ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n  and h3:\"lose t = [False] \\<longrightarrow> \n      ack t = [y] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\"", "lemma tiTable_ack_st_splitten:\n  assumes h1:\"ts lose\"\n      and h2:\"msg (Suc 0) a1\"\n      and h3:\"msg (Suc 0) stop\"\n      and h4:\"st_in t = init_state \\<and> req t = [init] \\<longrightarrow> \n          ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\"\n      and h5:\"st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n      and h6:\"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [connection_ok] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\"\n      and h7:\"(st_in t = call \\<or> st_in t = connection_ok \\<or> st_in t = sending_data) \\<and> lose t = [True] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n      and h8:\"st_in t = connection_ok \\<and> req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [sending_data] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\"\n      and h9:\"st_in t = sending_data \\<and> a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [sending_data] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\"\n      and h10:\"st_in t = sending_data \\<and> a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\"\n      and h11:\"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\"\n      and h12:\"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\"\n      and h13:\"st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n  shows \"ack t = [st_out t]\"", "lemma tiTable_ack_st:\nassumes \"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\"\n       and tsLose:\"ts lose\"\n       and a1Msg1:\"msg (Suc 0) a1\"      \n       and stopMsg1:\"msg (Suc 0) stop\"\n  shows      \"ack t = [st_out t] \"", "lemma tiTable_ack_st_hd:\nassumes \"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\"\n       and \"ts lose\"\n       and \"msg (Suc 0) a1\"\n       and \"msg (Suc 0) stop\"\nshows \"st_out t =  hd (ack t)\"", "lemma tiTable_ack_connection_ok:\n  assumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n  shows \"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> \n         lose t = [False]\"", "lemma tiTable_i1_1:\nassumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n       and \"ts lose\"\n       and \"msg (Suc 0) x\"\n       and \"msg (Suc 0) stop\"\n       and \"ack t = [connection_ok]\"\nshows \"i1 t = []\"", "lemma tiTable_ack_call:\nassumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n      and ackCall:\"ack t = [call]\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\nshows \"st_in t = init_state \\<and> req t = [init]\"", "lemma tiTable_i1_2:\nassumes tbl:\"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\" \n       and \"ts lose\"\n       and \"msg (Suc 0) a1\"\n       and \"msg (Suc 0) stop\" \n       and \"ack t = [call]\"\nshows \"i1 t = []\"", "lemma tiTable_ack_init0:\nassumes tbl:\"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\" \n      and req0:\"req 0 = []\"\nshows \"ack 0 = [init_state]\"", "lemma tiTable_ack_init:\nassumes \"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) a1\"\n      and \"msg (Suc 0) stop\"\n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\nshows \"ack t = [init_state]\"", "lemma tiTable_i1_3:\nassumes tbl:\"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st)  b ack i1 vc st\" \n      and tsLose:\"ts lose\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and h5:\"\\<forall> t1 \\<le> t. req t1 = []\" \nshows \"i1 t = []\"", "lemma tiTable_st_call_ok:\nassumes tbl:\"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\"\n      and tsLose:\"ts lose\"\n      and h3:\"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and h4:\"st (Suc t) = call\"\nshows \"st (Suc (Suc t)) = connection_ok\"", "lemma tiTable_i1_4b:\nassumes \"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st) b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) x\"\n      and \"msg (Suc 0) stop\" \n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\n      and \"req (Suc t) = [init]\"\n      and \"\\<forall>m < k + 3. req (t + m) \\<noteq> [send]\"\n      and h7:\"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and \"\\<forall>j \\<le> k + 3. lose (t + j) = [False]\"\n      and h9:\"t2 < (t + 3 + k)\"\nshows \"i1 t2 = []\"", "lemma tiTable_i1_4:\nassumes \"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) a1\"\n      and \"msg (Suc 0) stop\" \n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\n      and \"req (Suc t) = [init]\"\n      and \"\\<forall>m < k + 3. req (t + m) \\<noteq> [send]\"\n      and \"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and \"\\<forall>j \\<le> k + 3. lose (t + j) = [False]\"\nshows \"\\<forall> t2 < (t + 3 + k). i1 t2 = []\"", "lemma tiTable_ack_ok:\n  assumes h1:\"\\<forall>j\\<le> d + 2. lose (t + j) = [False]\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and reqNsend:\"req (Suc t) \\<noteq> [send]\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and tbl:\"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1 vc st\"\n  shows \"ack (Suc t) = [connection_ok]\"", "lemma Gateway_L7a:\n  assumes gw:\"Gateway req dt a stop lose d ack i vc\"\n      and aMsg1:\"msg (Suc 0) a\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and reqMsg1:\"msg (Suc 0) req\"\n      and tsLose:\"ts lose\"\n      and loseFalse:\"\\<forall>j\\<le> d + 2. lose (t + j) = [False]\"\n      and nsend:\"req (Suc t) \\<noteq> [send]\"\n      and ackNCon:\"ack (t) = [connection_ok]\"\n  shows \"ack (Suc t) = [connection_ok]\"", "lemma Sample_L_buffer:\n  assumes \n    \"Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n          (fin_inf_append [[]] buffer)\n           ack i1 vc st buffer\"\n  shows \"buffer t = inf_last_ti dt t\"", "lemma  tiTable_SampleT_i1_buffer:\n assumes \"ack t = [connection_ok]\"\n        and reqSend:\"req (Suc t) = [send]\" \n        and loseFalse:\"\\<forall>k\\<le>Suc d. lose (t + k) = [False]\" \n        and buf: \"buffer t = inf_last_ti dt t\"\n        and tbl:\"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n      (fin_inf_append [[]] buffer) ack\n      i1 vc st\"\n     and conOk:\"fin_inf_append [init_state] st (Suc t) = connection_ok\"\nshows \"i1 (Suc t) = inf_last_ti dt t\"", "lemma Sample_L_i1_buffer:\n  assumes \"msg (Suc 0) req\"\n      and \"msg (Suc 0) a\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and tsLose:\"ts lose\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and reqSend:\"req (Suc t) = [send]\"\n      and loseFalse:\"\\<forall>k\\<le>Suc d. lose (t + k) = [False]\"\n      and smpl:\"Sample_L req dt a1 stop lose \n                (fin_inf_append [init_state] st) \n                (fin_inf_append [[]] buffer) ack i1 vc st buffer\"\n  shows \"i1 (Suc t) =  buffer t\"", "lemma tiTable_SampleT_sending_data:\n  assumes tbl: \"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n         (fin_inf_append [[]] buffer)\n         ack i1 vc st\"\n      and loseFalse:\"\\<forall>j\\<le>2 * d. lose (t + j) = [False]\"\n      and a1e:\"\\<forall>t4\\<le>t + d + d. a1 t4 = []\"\n      and snd:\"fin_inf_append [init_state] st (Suc (t + x)) = sending_data\"\n      and h6:\"Suc (t + x) \\<le> 2 * d + t\"\n  shows \"ack (Suc (t + x)) = [sending_data]\"", "lemma Sample_sending_data:\n  assumes stopMsg1:\"msg (Suc 0) stop\"\n      and tsLose:\"ts lose\"\n      and reqMsg1:\"msg (Suc 0) req\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and loseFalse:\"\\<forall>j\\<le>2 * d. lose (t + j) = [False]\"\n      and ackSnd:\"ack t = [sending_data]\"\n      and smpl:\"Sample req dt a1 stop lose ack i1 vc\"\n      and xdd:\"x \\<le> d + d\"\n      and h9:\"\\<forall>t4 \\<le> t + d + d. a1 t4 = []\"\n shows \"ack (t + x) = [sending_data]\"", "lemma ServiceCenter_a_l:\n  assumes \"ServiceCenter i a\"\n  shows    \"length (a t) \\<le> (Suc 0)\"", "lemma ServiceCenter_a_msg:\n  assumes \"ServiceCenter i a\"\n  shows    \"msg (Suc 0) a\"", "lemma ServiceCenter_L1:\nassumes \"\\<forall> t2 < x. i t2 = []\"\n       and \"ServiceCenter i a\"\n       and \"t \\<le> x\"\nshows \"a t = []\"", "lemma ServiceCenter_L2:\nassumes \"\\<forall> t2 < x. i t2 = []\"\n       and \"ServiceCenter i a\"\nshows \"\\<forall> t3 \\<le> x. a t3 = []\"", "lemma streamValue1: \nassumes h1:\"\\<forall>j\\<le> D + (z::nat). str (t + j) = x\"\n       and h2: \"j\\<le> D\"\nshows      \"str (t + j + z) = x\"", "lemma streamValue2:\n  assumes \"\\<forall>j\\<le> D + (z::nat). str (t + j) = x\"\n  shows    \"\\<forall>j\\<le> D. str (t + j + z) = x\"", "lemma streamValue3:\nassumes \"\\<forall>j\\<le> D. str (t + j + (Suc y)) = x\"\n        and \"j \\<le> D\"\n        and h3:\"str (t + y) = x\"\n    shows    \"str (t + j + y) = x\"", "lemma streamValue4:\nassumes \"\\<forall>j\\<le> D. str (t + j + (Suc y)) = x\"\n       and \"str (t + y) = x\"\nshows     \"\\<forall>j\\<le> D. str (t + j + y) = x\"", "lemma streamValue5:\nassumes \"\\<forall>j\\<le> D. str (t + j + ((i::nat) + k)) = x\"\n       and \"j\\<le> D\"\nshows      \"str (t + i + k + j) = x\"", "lemma streamValue6:\n  assumes \"\\<forall>j\\<le> D. str (t + j + ((i::nat) + k)) = x\"\n  shows     \"\\<forall>j\\<le> D. str (t + (i::nat) + k + j) = x\"", "lemma streamValue7:\n  assumes h1:\"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\"\n      and h2:\"str (t + i + k + d) = x\"\n      and h3:\"j\\<le> Suc d\"\n  shows      \"str (t + i + k + d + j) = x\"", "lemma streamValue8:\nassumes \"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\"\n       and \"str (t + i + k + d) = x\" \nshows \"\\<forall> j\\<le> Suc d. str (t + i + k + d + j) = x\"", "lemma arith_streamValue9aux:\n\"Suc (t + (j + d) + (i + k)) =  Suc (t + i + k + d + j)\"", "lemma streamValue9:\nassumes h1:\"\\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\"\n       and h2:\"j\\<le>d\"\nshows      \"str (t + i + k + d + Suc j) = x\"", "lemma streamValue10:\n  assumes \"\\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\"\n  shows    \"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\"", "lemma arith_sum1:\"(t::nat) + (i + k + d) =  t + i + k + d\"", "lemma arith_sum2:\"Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))\"", "lemma arith_sum4:\"t + 3 + k + d = Suc (t + (2::nat) + k + d)\"", "lemma streamValue11:\nassumes h1:\"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\"\n       and h2:\"j\\<le>Suc d\"\nshows      \"lose (t + 2 + k + j) = x\"", "lemma streamValue12:\n assumes  \"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\"\n shows     \"\\<forall>j\\<le>Suc d. lose (t + 2 + k + j) = x\"", "lemma streamValue43:\n  assumes \"\\<forall>j\\<le>2 * d + ((4::nat) + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>j\\<le>2 * d. lose ((t + (3::nat) + k) + j) = [False]\""], "translations": [["", "lemma aType_empty: \n  assumes h1:\"msg (Suc 0) a\"\n         and h2: \"a t \\<noteq> [sc_ack]\"\n  shows       \"a t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = []", "proof (cases \"a t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a t = [] \\<Longrightarrow> a t = []\n 2. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "assume a1:\"a t = []\""], ["proof (state)\nthis:\n  a t = []\n\ngoal (2 subgoals):\n 1. a t = [] \\<Longrightarrow> a t = []\n 2. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "from this"], ["proof (chain)\npicking this:\n  a t = []", "show ?thesis"], ["proof (prove)\nusing this:\n  a t = []\n\ngoal (1 subgoal):\n 1. a t = []", "by simp"], ["proof (state)\nthis:\n  a t = []\n\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "fix aa l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "assume a2:\"a t = aa # l\""], ["proof (state)\nthis:\n  a t = aa # l\n\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = []", "proof (cases \"aa\")"], ["proof (state)\ngoal (1 subgoal):\n 1. aa = sc_ack \\<Longrightarrow> a t = []", "assume a3:\"aa = sc_ack\""], ["proof (state)\nthis:\n  aa = sc_ack\n\ngoal (1 subgoal):\n 1. aa = sc_ack \\<Longrightarrow> a t = []", "from h1"], ["proof (chain)\npicking this:\n  msg (Suc 0) a", "have sg1:\"length (a t) \\<le> Suc 0\""], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. length (a t) \\<le> Suc 0", "by (simp add: msg_def)"], ["proof (state)\nthis:\n  length (a t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. aa = sc_ack \\<Longrightarrow> a t = []", "from this and assms and a2 and a3"], ["proof (chain)\npicking this:\n  length (a t) \\<le> Suc 0\n  msg (Suc 0) a\n  a t \\<noteq> [sc_ack]\n  a t = aa # l\n  aa = sc_ack", "show ?thesis"], ["proof (prove)\nusing this:\n  length (a t) \\<le> Suc 0\n  msg (Suc 0) a\n  a t \\<noteq> [sc_ack]\n  a t = aa # l\n  aa = sc_ack\n\ngoal (1 subgoal):\n 1. a t = []", "by auto"], ["proof (state)\nthis:\n  a t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a t = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aType_nonempty: \n  assumes h1:\"msg (Suc 0) a\"\n      and h2: \"a t \\<noteq> []\"\n  shows       \"a t = [sc_ack]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = [sc_ack]", "proof (cases \"a t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a t = [] \\<Longrightarrow> a t = [sc_ack]\n 2. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "assume a1:\"a t = []\""], ["proof (state)\nthis:\n  a t = []\n\ngoal (2 subgoals):\n 1. a t = [] \\<Longrightarrow> a t = [sc_ack]\n 2. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "from this and h2"], ["proof (chain)\npicking this:\n  a t = []\n  a t \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  a t = []\n  a t \\<noteq> []\n\ngoal (1 subgoal):\n 1. a t = [sc_ack]", "by simp"], ["proof (state)\nthis:\n  a t = [sc_ack]\n\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "fix aa l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "assume a2:\"a t = aa # l\""], ["proof (state)\nthis:\n  a t = aa # l\n\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "from a2 and h1"], ["proof (chain)\npicking this:\n  a t = aa # l\n  msg (Suc 0) a", "have sg1: \"l = []\""], ["proof (prove)\nusing this:\n  a t = aa # l\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. l = []", "by (simp add: msg_nonempty1)"], ["proof (state)\nthis:\n  l = []\n\ngoal (1 subgoal):\n 1. \\<And>aa list. a t = aa # list \\<Longrightarrow> a t = [sc_ack]", "from a2 and h1 and sg1"], ["proof (chain)\npicking this:\n  a t = aa # l\n  msg (Suc 0) a\n  l = []", "show ?thesis"], ["proof (prove)\nusing this:\n  a t = aa # l\n  msg (Suc 0) a\n  l = []\n\ngoal (1 subgoal):\n 1. a t = [sc_ack]", "proof (cases \"aa\")"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>a t = aa # l; msg (Suc 0) a; l = []; aa = sc_ack\\<rbrakk>\n    \\<Longrightarrow> a t = [sc_ack]", "assume a3:\"aa = sc_ack\""], ["proof (state)\nthis:\n  aa = sc_ack\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a t = aa # l; msg (Suc 0) a; l = []; aa = sc_ack\\<rbrakk>\n    \\<Longrightarrow> a t = [sc_ack]", "from this and sg1 and h2 and a2"], ["proof (chain)\npicking this:\n  aa = sc_ack\n  l = []\n  a t \\<noteq> []\n  a t = aa # l", "show ?thesis"], ["proof (prove)\nusing this:\n  aa = sc_ack\n  l = []\n  a t \\<noteq> []\n  a t = aa # l\n\ngoal (1 subgoal):\n 1. a t = [sc_ack]", "by simp"], ["proof (state)\nthis:\n  a t = [sc_ack]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a t = [sc_ack]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [sc_ack]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [sc_ack]", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [sc_ack]", "by (metis aType_nonempty)"], ["", "lemma stopType_empty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> [stop_vc]\"\n  shows \"a t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = []", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n  a t \\<noteq> [stop_vc]\n\ngoal (1 subgoal):\n 1. a t = []", "by (metis (full_types) list_length_hint2 msg_nonempty2 stopType.exhaust)"], ["", "lemma stopType_nonempty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> []\"\n  shows \"a t = [stop_vc]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = [stop_vc]", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n  a t \\<noteq> []\n\ngoal (1 subgoal):\n 1. a t = [stop_vc]", "by (metis stopType_empty)"], ["", "lemma stopType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [stop_vc]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [stop_vc]", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [stop_vc]", "by (metis stopType_nonempty)"], ["", "lemma vcType_empty: \n  assumes \"msg (Suc 0) a\"\n         and \"a t \\<noteq> [vc_com]\"\n  shows\"a t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = []", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n  a t \\<noteq> [vc_com]\n\ngoal (1 subgoal):\n 1. a t = []", "by (metis (full_types) list_length_hint2 msg_nonempty2 vcType.exhaust)"], ["", "lemma vcType_lemma: \n  assumes \"msg (Suc 0) a\" \n  shows    \"a t = [] \\<or> a t = [vc_com]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [vc_com]", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. a t = [] \\<or> a t = [vc_com]", "by (metis vcType_empty)"], ["", "subsection \\<open>Properties of the Delay component\\<close>"], ["", "lemma Delay_L1:\n assumes h1:\"\\<forall>t1 < t. i1 t1 = []\"\n         and h2:\"Delay y i1 d x i2\"\n         and h3:\"t2 < t + d\"\n   shows \"i2 t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i2 t2 = []", "proof (cases \"t2 < d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> i2 t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "assume a1:\"t2 < d\""], ["proof (state)\nthis:\n  t2 < d\n\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> i2 t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "from h2"], ["proof (chain)\npicking this:\n  Delay y i1 d x i2", "have sg1:\"t2 < d \\<longrightarrow> i2 t2 = []\""], ["proof (prove)\nusing this:\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. t2 < d \\<longrightarrow> i2 t2 = []", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  t2 < d \\<longrightarrow> i2 t2 = []\n\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> i2 t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "from sg1 and a1"], ["proof (chain)\npicking this:\n  t2 < d \\<longrightarrow> i2 t2 = []\n  t2 < d", "show ?thesis"], ["proof (prove)\nusing this:\n  t2 < d \\<longrightarrow> i2 t2 = []\n  t2 < d\n\ngoal (1 subgoal):\n 1. i2 t2 = []", "by simp"], ["proof (state)\nthis:\n  i2 t2 = []\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "assume a2:\"\\<not> t2 < d\""], ["proof (state)\nthis:\n  \\<not> t2 < d\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "from h2"], ["proof (chain)\npicking this:\n  Delay y i1 d x i2", "have sg2:\"d \\<le> t2 \\<longrightarrow> i2 t2 = i1 (t2 - d)\""], ["proof (prove)\nusing this:\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. d \\<le> t2 \\<longrightarrow> i2 t2 = i1 (t2 - d)", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  d \\<le> t2 \\<longrightarrow> i2 t2 = i1 (t2 - d)\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "from a2 and sg2"], ["proof (chain)\npicking this:\n  \\<not> t2 < d\n  d \\<le> t2 \\<longrightarrow> i2 t2 = i1 (t2 - d)", "have \"i2 t2 = i1 (t2 - d)\""], ["proof (prove)\nusing this:\n  \\<not> t2 < d\n  d \\<le> t2 \\<longrightarrow> i2 t2 = i1 (t2 - d)\n\ngoal (1 subgoal):\n 1. i2 t2 = i1 (t2 - d)", "by simp"], ["proof (state)\nthis:\n  i2 t2 = i1 (t2 - d)\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> i2 t2 = []", "from h1 and a2 and h3 and this"], ["proof (chain)\npicking this:\n  \\<forall>t1<t. i1 t1 = []\n  \\<not> t2 < d\n  t2 < t + d\n  i2 t2 = i1 (t2 - d)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t1<t. i1 t1 = []\n  \\<not> t2 < d\n  t2 < t + d\n  i2 t2 = i1 (t2 - d)\n\ngoal (1 subgoal):\n 1. i2 t2 = []", "by auto"], ["proof (state)\nthis:\n  i2 t2 = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Delay_L2:\n assumes \"\\<forall>t1 < t. i1 t1 = []\"\n        and \"Delay y i1 d x i2\"\n   shows \"\\<forall>t2 < t + d. i2 t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2<t + d. i2 t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t1<t. i1 t1 = []\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. \\<forall>t2<t + d. i2 t2 = []", "by (clarify, rule Delay_L1, auto)"], ["", "lemma Delay_L3:\n assumes h1:\"\\<forall>t1 \\<le> t. y t1 = []\"\n        and h2:\"Delay y i1 d x i2\"\n        and h3:\"t2 \\<le> t + d\"\n   shows \"x t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x t2 = []", "proof (cases \"t2 < d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> x t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "assume a1:\"t2 < d\""], ["proof (state)\nthis:\n  t2 < d\n\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> x t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "from h2"], ["proof (chain)\npicking this:\n  Delay y i1 d x i2", "have sg1:\"t2 < d \\<longrightarrow> x t2 = []\""], ["proof (prove)\nusing this:\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. t2 < d \\<longrightarrow> x t2 = []", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  t2 < d \\<longrightarrow> x t2 = []\n\ngoal (2 subgoals):\n 1. t2 < d \\<Longrightarrow> x t2 = []\n 2. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "from sg1 and a1"], ["proof (chain)\npicking this:\n  t2 < d \\<longrightarrow> x t2 = []\n  t2 < d", "show ?thesis"], ["proof (prove)\nusing this:\n  t2 < d \\<longrightarrow> x t2 = []\n  t2 < d\n\ngoal (1 subgoal):\n 1. x t2 = []", "by simp"], ["proof (state)\nthis:\n  x t2 = []\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "assume a2:\"\\<not> t2 < d\""], ["proof (state)\nthis:\n  \\<not> t2 < d\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "from h2"], ["proof (chain)\npicking this:\n  Delay y i1 d x i2", "have sg2:\"d \\<le> t2 \\<longrightarrow> x t2 = y (t2 - d)\""], ["proof (prove)\nusing this:\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. d \\<le> t2 \\<longrightarrow> x t2 = y (t2 - d)", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  d \\<le> t2 \\<longrightarrow> x t2 = y (t2 - d)\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "from a2 and sg2"], ["proof (chain)\npicking this:\n  \\<not> t2 < d\n  d \\<le> t2 \\<longrightarrow> x t2 = y (t2 - d)", "have sg3:\"x t2 = y (t2 - d)\""], ["proof (prove)\nusing this:\n  \\<not> t2 < d\n  d \\<le> t2 \\<longrightarrow> x t2 = y (t2 - d)\n\ngoal (1 subgoal):\n 1. x t2 = y (t2 - d)", "by simp"], ["proof (state)\nthis:\n  x t2 = y (t2 - d)\n\ngoal (1 subgoal):\n 1. \\<not> t2 < d \\<Longrightarrow> x t2 = []", "from h1 and a2 and h3 and sg3"], ["proof (chain)\npicking this:\n  \\<forall>t1\\<le>t. y t1 = []\n  \\<not> t2 < d\n  t2 \\<le> t + d\n  x t2 = y (t2 - d)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t1\\<le>t. y t1 = []\n  \\<not> t2 < d\n  t2 \\<le> t + d\n  x t2 = y (t2 - d)\n\ngoal (1 subgoal):\n 1. x t2 = []", "by auto"], ["proof (state)\nthis:\n  x t2 = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Delay_L4:\n assumes \"\\<forall>t1 \\<le> t. y t1 = []\"\n     and \"Delay y i1 d x i2\"\n   shows \"\\<forall>t2 \\<le> t + d. x t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2\\<le>t + d. x t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t1\\<le>t. y t1 = []\n  Delay y i1 d x i2\n\ngoal (1 subgoal):\n 1. \\<forall>t2\\<le>t + d. x t2 = []", "by (clarify, rule Delay_L3, auto)"], ["", "lemma Delay_lengthOut1:\n  assumes h1:\"\\<forall>t. length (x t) \\<le> Suc 0\"\n         and h2:\"Delay x i1 d y i2\"\n  shows \"length (y t) \\<le> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (y t) \\<le> Suc 0", "proof (cases \"t < d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t < d \\<Longrightarrow> length (y t) \\<le> Suc 0\n 2. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "assume a1:\"t < d\""], ["proof (state)\nthis:\n  t < d\n\ngoal (2 subgoals):\n 1. t < d \\<Longrightarrow> length (y t) \\<le> Suc 0\n 2. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "from h2"], ["proof (chain)\npicking this:\n  Delay x i1 d y i2", "have sg1:\"t < d \\<longrightarrow> y t = []\""], ["proof (prove)\nusing this:\n  Delay x i1 d y i2\n\ngoal (1 subgoal):\n 1. t < d \\<longrightarrow> y t = []", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  t < d \\<longrightarrow> y t = []\n\ngoal (2 subgoals):\n 1. t < d \\<Longrightarrow> length (y t) \\<le> Suc 0\n 2. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "from a1 and sg1"], ["proof (chain)\npicking this:\n  t < d\n  t < d \\<longrightarrow> y t = []", "show ?thesis"], ["proof (prove)\nusing this:\n  t < d\n  t < d \\<longrightarrow> y t = []\n\ngoal (1 subgoal):\n 1. length (y t) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  length (y t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "assume a2:\"\\<not> t < d\""], ["proof (state)\nthis:\n  \\<not> t < d\n\ngoal (1 subgoal):\n 1. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "from h2"], ["proof (chain)\npicking this:\n  Delay x i1 d y i2", "have sg2:\"t \\<ge> d \\<longrightarrow> (y t = x (t-d))\""], ["proof (prove)\nusing this:\n  Delay x i1 d y i2\n\ngoal (1 subgoal):\n 1. d \\<le> t \\<longrightarrow> y t = x (t - d)", "by (simp add: Delay_def)"], ["proof (state)\nthis:\n  d \\<le> t \\<longrightarrow> y t = x (t - d)\n\ngoal (1 subgoal):\n 1. \\<not> t < d \\<Longrightarrow> length (y t) \\<le> Suc 0", "from a2 and sg2 and h1"], ["proof (chain)\npicking this:\n  \\<not> t < d\n  d \\<le> t \\<longrightarrow> y t = x (t - d)\n  \\<forall>t. length (x t) \\<le> Suc 0", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> t < d\n  d \\<le> t \\<longrightarrow> y t = x (t - d)\n  \\<forall>t. length (x t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. length (y t) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  length (y t) \\<le> Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Delay_msg1:\n  assumes \"msg (Suc 0) x\"\n         and \"Delay x i1 d y i2\" \n  shows      \"msg (Suc 0) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg (Suc 0) y", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) x\n  Delay x i1 d y i2\n\ngoal (1 subgoal):\n 1. msg (Suc 0) y", "by (simp add: msg_def Delay_lengthOut1)"], ["", "subsection \\<open>Properties of the Loss component\\<close>"], ["", "lemma Loss_L1:\n assumes \"\\<forall>t2<t. i2 t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 < t\"\n        and \"ts lose\"\n shows \"i t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<t. i2 t2 = []\n  Loss lose a i2 y i\n  t2 < t\n  ts lose\n\ngoal (1 subgoal):\n 1. i t2 = []", "by (metis Loss_def)"], ["", "lemma Loss_L2:\n assumes \"\\<forall>t2<t. i2 t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2<t. i t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2<t. i t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<t. i2 t2 = []\n  Loss lose a i2 y i\n  ts lose\n\ngoal (1 subgoal):\n 1. \\<forall>t2<t. i t2 = []", "by (metis Loss_def)"], ["", "lemma Loss_L3:\n assumes \"\\<forall>t2<t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 < t\"\n        and \"ts lose\"\n shows \"y t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<t. a t2 = []\n  Loss lose a i2 y i\n  t2 < t\n  ts lose\n\ngoal (1 subgoal):\n 1. y t2 = []", "by (metis Loss_def)"], ["", "lemma Loss_L4:\n assumes \"\\<forall>t2<t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2<t. y t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2<t. y t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<t. a t2 = []\n  Loss lose a i2 y i\n  ts lose\n\ngoal (1 subgoal):\n 1. \\<forall>t2<t. y t2 = []", "by (metis Loss_def)"], ["", "lemma Loss_L5:\n assumes \"\\<forall>t1 \\<le> t. a t1 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"t2 \\<le> t\"\n        and \"ts lose\"\n shows \"y t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t1\\<le>t. a t1 = []\n  Loss lose a i2 y i\n  t2 \\<le> t\n  ts lose\n\ngoal (1 subgoal):\n 1. y t2 = []", "by (metis Loss_def)"], ["", "lemma Loss_L5Suc:\n assumes \"\\<forall>j \\<le> d. a (t + Suc j) = []\"\n        and \"Loss lose a i2 y i\"\n        and \"Suc j \\<le> d\"\n        and tsLose:\"ts lose\"\n shows \"y (t + Suc j) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y (t + Suc j) = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. a (t + Suc j) = []\n  Loss lose a i2 y i\n  Suc j \\<le> d\n  ts lose\n\ngoal (1 subgoal):\n 1. y (t + Suc j) = []", "proof (cases \"lose (t + Suc j) = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) = [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []\n 2. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "assume \"lose (t + Suc j) = [False]\""], ["proof (state)\nthis:\n  lose (t + Suc j) = [False]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) = [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []\n 2. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "from assms and this"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d. a (t + Suc j) = []\n  Loss lose a i2 y i\n  Suc j \\<le> d\n  ts lose\n  lose (t + Suc j) = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. a (t + Suc j) = []\n  Loss lose a i2 y i\n  Suc j \\<le> d\n  ts lose\n  lose (t + Suc j) = [False]\n\ngoal (1 subgoal):\n 1. y (t + Suc j) = []", "by (simp add: Loss_def)"], ["proof (state)\nthis:\n  y (t + Suc j) = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "assume \"lose (t + Suc j) \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose (t + Suc j) \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose (t + Suc j) \\<noteq> [False]\n  ts lose", "have \"lose (t + Suc j) = [True]\""], ["proof (prove)\nusing this:\n  lose (t + Suc j) \\<noteq> [False]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose (t + Suc j) = [True]", "by (simp add: ts_bool_True)"], ["proof (state)\nthis:\n  lose (t + Suc j) = [True]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. a (t + Suc j) = []; Loss lose a i2 y i;\n     Suc j \\<le> d; ts lose; lose (t + Suc j) \\<noteq> [False]\\<rbrakk>\n    \\<Longrightarrow> y (t + Suc j) = []", "from assms and this"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d. a (t + Suc j) = []\n  Loss lose a i2 y i\n  Suc j \\<le> d\n  ts lose\n  lose (t + Suc j) = [True]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. a (t + Suc j) = []\n  Loss lose a i2 y i\n  Suc j \\<le> d\n  ts lose\n  lose (t + Suc j) = [True]\n\ngoal (1 subgoal):\n 1. y (t + Suc j) = []", "by (simp add: Loss_def)"], ["proof (state)\nthis:\n  y (t + Suc j) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Loss_L6:\n assumes \"\\<forall>t2 \\<le> t. a t2 = []\"\n        and \"Loss lose a i2 y i\"\n        and \"ts lose\"\n shows  \"\\<forall>t2 \\<le> t. y t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2\\<le>t. y t2 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2\\<le>t. a t2 = []\n  Loss lose a i2 y i\n  ts lose\n\ngoal (1 subgoal):\n 1. \\<forall>t2\\<le>t. y t2 = []", "by (metis Loss_L5)"], ["", "lemma Loss_lengthOut1:\n  assumes h1:\"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and h2:\"Loss lose a i2 x i\"\n  shows \"length (x t) \\<le> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (x t) \\<le> Suc 0", "proof (cases \"lose t =  [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> length (x t) \\<le> Suc 0\n 2. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "assume \"lose t =  [False]\""], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> length (x t) \\<le> Suc 0\n 2. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "from this and h2"], ["proof (chain)\npicking this:\n  lose t = [False]\n  Loss lose a i2 x i", "have sg1:\"x t = a t\""], ["proof (prove)\nusing this:\n  lose t = [False]\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. x t = a t", "by (simp add: Loss_def)"], ["proof (state)\nthis:\n  x t = a t\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> length (x t) \\<le> Suc 0\n 2. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "from h1"], ["proof (chain)\npicking this:\n  \\<forall>t. length (a t) \\<le> Suc 0", "have sg2:\"length (a t) \\<le> Suc 0\""], ["proof (prove)\nusing this:\n  \\<forall>t. length (a t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. length (a t) \\<le> Suc 0", "by auto"], ["proof (state)\nthis:\n  length (a t) \\<le> Suc 0\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> length (x t) \\<le> Suc 0\n 2. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "from sg1 and sg2"], ["proof (chain)\npicking this:\n  x t = a t\n  length (a t) \\<le> Suc 0", "show ?thesis"], ["proof (prove)\nusing this:\n  x t = a t\n  length (a t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. length (x t) \\<le> Suc 0", "by simp"], ["proof (state)\nthis:\n  length (x t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "assume \"lose t \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "from this and h2"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [False]\n  Loss lose a i2 x i", "have \"x t = []\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [False]\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. x t = []", "by (simp add: Loss_def)"], ["proof (state)\nthis:\n  x t = []\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> length (x t) \\<le> Suc 0", "from this"], ["proof (chain)\npicking this:\n  x t = []", "show ?thesis"], ["proof (prove)\nusing this:\n  x t = []\n\ngoal (1 subgoal):\n 1. length (x t) \\<le> Suc 0", "by simp"], ["proof (state)\nthis:\n  length (x t) \\<le> Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Loss_lengthOut2:\n  assumes \"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and \"Loss lose a i2 x i\"\n  shows \"\\<forall>t. length (x t) \\<le> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t. length (x t) \\<le> Suc 0", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t. length (a t) \\<le> Suc 0\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. \\<forall>t. length (x t) \\<le> Suc 0", "by (simp add: Loss_lengthOut1)"], ["", "lemma Loss_msg1:\n  assumes \"msg (Suc 0) a\" \n         and \"Loss lose a i2 x i\"\n  shows      \"msg (Suc 0) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg (Suc 0) x", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. msg (Suc 0) x", "by (simp add: msg_def Loss_def Loss_lengthOut1)"], ["", "subsection \\<open>Properties of the composition of Delay and Loss components\\<close>"], ["", "lemma Loss_Delay_length_y:\n  assumes \"\\<forall>t. length (a t) \\<le> Suc 0\"\n         and \"Delay x i1 d y i2\"\n         and \"Loss lose a i2 x i\"\n  shows \"length (y t) \\<le> Suc 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (y t) \\<le> Suc 0", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t. length (a t) \\<le> Suc 0\n  Delay x i1 d y i2\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. length (y t) \\<le> Suc 0", "by (metis Delay_msg1 Loss_msg1 msg_def)"], ["", "lemma Loss_Delay_msg_a:\n  assumes \"msg (Suc 0) a\"\n         and \"Delay x i1 d y i2\"\n         and \"Loss lose a i2 x i\"\n  shows  \"msg (Suc 0) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg (Suc 0) y", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) a\n  Delay x i1 d y i2\n  Loss lose a i2 x i\n\ngoal (1 subgoal):\n 1. msg (Suc 0) y", "by (simp add: msg_def Loss_Delay_length_y)"], ["", "subsection \\<open>Auxiliary Lemmas\\<close>"], ["", "lemma inf_last_ti2:\n  assumes \"inf_last_ti dt (Suc (Suc t)) \\<noteq> []\"\n  shows    \"inf_last_ti dt (Suc (Suc (t + k))) \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_last_ti dt (Suc (Suc (t + k))) \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  inf_last_ti dt (Suc (Suc t)) \\<noteq> []\n\ngoal (1 subgoal):\n 1. inf_last_ti dt (Suc (Suc (t + k))) \\<noteq> []", "by (metis add_Suc inf_last_ti_nonempty_k)"], ["", "lemma aux_ack_t2:\n  assumes h1:\"\\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n         and h2:\"Suc (Suc t) < t2\"\n         and h3:\"t2 < t + 3 + k\"\n  shows \"ack t2 = [connection_ok]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "from h3"], ["proof (chain)\npicking this:\n  t2 < t + 3 + k", "have sg1:\"t2 - Suc (Suc t) \\<le> k\""], ["proof (prove)\nusing this:\n  t2 < t + 3 + k\n\ngoal (1 subgoal):\n 1. t2 - Suc (Suc t) \\<le> k", "by arith"], ["proof (state)\nthis:\n  t2 - Suc (Suc t) \\<le> k\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "from h1 and sg1"], ["proof (chain)\npicking this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 - Suc (Suc t) \\<le> k", "obtain m where a1:\"m = t2 - Suc (Suc t)\" \n                  and a2:\"ack (Suc (Suc (t + m))) = [connection_ok]\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 - Suc (Suc t) \\<le> k\n\ngoal (1 subgoal):\n 1. (\\<And>m.\n        \\<lbrakk>m = t2 - Suc (Suc t);\n         ack (Suc (Suc (t + m))) = [connection_ok]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  m = t2 - Suc (Suc t)\n  ack (Suc (Suc (t + m))) = [connection_ok]\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "from h2"], ["proof (chain)\npicking this:\n  Suc (Suc t) < t2", "have sg2:\"(Suc (Suc (t2 - 2))) =  t2\""], ["proof (prove)\nusing this:\n  Suc (Suc t) < t2\n\ngoal (1 subgoal):\n 1. Suc (Suc (t2 - 2)) = t2", "by arith"], ["proof (state)\nthis:\n  Suc (Suc (t2 - 2)) = t2\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "from h2"], ["proof (chain)\npicking this:\n  Suc (Suc t) < t2", "have sg3:\"Suc (Suc (t + (t2 - Suc (Suc t)))) =  t2\""], ["proof (prove)\nusing this:\n  Suc (Suc t) < t2\n\ngoal (1 subgoal):\n 1. Suc (Suc (t + (t2 - Suc (Suc t)))) = t2", "by arith"], ["proof (state)\nthis:\n  Suc (Suc (t + (t2 - Suc (Suc t)))) = t2\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "from sg1 and a1 and a2 and sg2 and sg3"], ["proof (chain)\npicking this:\n  t2 - Suc (Suc t) \\<le> k\n  m = t2 - Suc (Suc t)\n  ack (Suc (Suc (t + m))) = [connection_ok]\n  Suc (Suc (t2 - 2)) = t2\n  Suc (Suc (t + (t2 - Suc (Suc t)))) = t2", "show ?thesis"], ["proof (prove)\nusing this:\n  t2 - Suc (Suc t) \\<le> k\n  m = t2 - Suc (Suc t)\n  ack (Suc (Suc (t + m))) = [connection_ok]\n  Suc (Suc (t2 - 2)) = t2\n  Suc (Suc (t + (t2 - Suc (Suc t)))) = t2\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "by simp"], ["proof (state)\nthis:\n  ack t2 = [connection_ok]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aux_lemma_lose_1:\n  assumes h1:\"\\<forall>j\\<le>((2::nat) * d + ((4::nat) + k)). (lose (t + j) = x)\"\n         and h2:\"ka\\<le>Suc d\"\n  shows \"lose (Suc (Suc (t + k + ka))) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "from h2"], ["proof (chain)\npicking this:\n  ka \\<le> Suc d", "have sg1:\"k + (2::nat) + ka \\<le> (2::nat) * d + ((4::nat) + k)\""], ["proof (prove)\nusing this:\n  ka \\<le> Suc d\n\ngoal (1 subgoal):\n 1. k + 2 + ka \\<le> 2 * d + (4 + k)", "by auto"], ["proof (state)\nthis:\n  k + 2 + ka \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "from h2 and sg1"], ["proof (chain)\npicking this:\n  ka \\<le> Suc d\n  k + 2 + ka \\<le> 2 * d + (4 + k)", "have sg2:\"Suc (Suc (k + ka)) \\<le>2 * d + (4 + k)\""], ["proof (prove)\nusing this:\n  ka \\<le> Suc d\n  k + 2 + ka \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. Suc (Suc (k + ka)) \\<le> 2 * d + (4 + k)", "by auto"], ["proof (state)\nthis:\n  Suc (Suc (k + ka)) \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "from sg1 and sg2 and h1 and h2"], ["proof (chain)\npicking this:\n  k + 2 + ka \\<le> 2 * d + (4 + k)\n  Suc (Suc (k + ka)) \\<le> 2 * d + (4 + k)\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\n  ka \\<le> Suc d", "obtain j where a1:\"j = k + (2::nat) + ka\"\n                                     and a2:\"lose (t + j) = x\""], ["proof (prove)\nusing this:\n  k + 2 + ka \\<le> 2 * d + (4 + k)\n  Suc (Suc (k + ka)) \\<le> 2 * d + (4 + k)\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\n  ka \\<le> Suc d\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j = k + 2 + ka; lose (t + j) = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j = k + 2 + ka\n  lose (t + j) = x\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "have sg3:\"Suc (Suc (t + (k + ka))) = Suc (Suc (t + k + ka))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (t + (k + ka))) = Suc (Suc (t + k + ka))", "by arith"], ["proof (state)\nthis:\n  Suc (Suc (t + (k + ka))) = Suc (Suc (t + k + ka))\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "from a1 and a2 and sg3"], ["proof (chain)\npicking this:\n  j = k + 2 + ka\n  lose (t + j) = x\n  Suc (Suc (t + (k + ka))) = Suc (Suc (t + k + ka))", "show ?thesis"], ["proof (prove)\nusing this:\n  j = k + 2 + ka\n  lose (t + j) = x\n  Suc (Suc (t + (k + ka))) = Suc (Suc (t + k + ka))\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc (t + k + ka))) = x", "by simp"], ["proof (state)\nthis:\n  lose (Suc (Suc (t + k + ka))) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aux_lemma_lose_2:\n  assumes \"\\<forall>j\\<le>(2::nat) * d + ((4::nat) + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>x\\<le>d + (1::nat). lose (t + x) = [False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<le>d + 1. lose (t + x) = [False]", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<le>d + 1. lose (t + x) = [False]", "by auto"], ["", "lemma aux_lemma_lose_3a:\n  assumes h1:\"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\" \n         and h2:\"ka \\<le> Suc d\"\n  shows \"lose (d + (t + (3 + k)) + ka) = [False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "from h2"], ["proof (chain)\npicking this:\n  ka \\<le> Suc d", "have sg1:\"(d + 3 + k + ka) \\<le>2 * d + (4 + k)\""], ["proof (prove)\nusing this:\n  ka \\<le> Suc d\n\ngoal (1 subgoal):\n 1. d + 3 + k + ka \\<le> 2 * d + (4 + k)", "by arith"], ["proof (state)\nthis:\n  d + 3 + k + ka \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "from h1 and h2 and sg1"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n  ka \\<le> Suc d\n  d + 3 + k + ka \\<le> 2 * d + (4 + k)", "obtain j where a1:\"j = (d + 3 + k + ka)\" and \n                                         a2:\"lose (t + j) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n  ka \\<le> Suc d\n  d + 3 + k + ka \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j = d + 3 + k + ka; lose (t + j) = [False]\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  j = d + 3 + k + ka\n  lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "from h2 and sg1"], ["proof (chain)\npicking this:\n  ka \\<le> Suc d\n  d + 3 + k + ka \\<le> 2 * d + (4 + k)", "have sg2:\"(t + (d + 3 + k + ka)) = (d + (t + (3 + k)) + ka)\""], ["proof (prove)\nusing this:\n  ka \\<le> Suc d\n  d + 3 + k + ka \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. t + (d + 3 + k + ka) = d + (t + (3 + k)) + ka", "by arith"], ["proof (state)\nthis:\n  t + (d + 3 + k + ka) = d + (t + (3 + k)) + ka\n\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "from h1 and h2 and a1 and a2 and sg2"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n  ka \\<le> Suc d\n  j = d + 3 + k + ka\n  lose (t + j) = [False]\n  t + (d + 3 + k + ka) = d + (t + (3 + k)) + ka", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n  ka \\<le> Suc d\n  j = d + 3 + k + ka\n  lose (t + j) = [False]\n  t + (d + 3 + k + ka) = d + (t + (3 + k)) + ka\n\ngoal (1 subgoal):\n 1. lose (d + (t + (3 + k)) + ka) = [False]", "by simp"], ["proof (state)\nthis:\n  lose (d + (t + (3 + k)) + ka) = [False]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aux_lemma_lose_3:\n  assumes \"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>ka\\<le>Suc d. lose (d + (t + (3 + k)) + ka) = [False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ka\\<le>Suc d. lose (d + (t + (3 + k)) + ka) = [False]", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>ka\\<le>Suc d. lose (d + (t + (3 + k)) + ka) = [False]", "by (auto, simp add: aux_lemma_lose_3a)"], ["", "lemma aux_arith1_Gateway7:\n  assumes \"t2 - t \\<le> (2::nat) * d + (t + ((4::nat) + k))\"\n         and \"t2 < t + (3::nat) + k + d\"\n         and \"\\<not> t2 - d < (0::nat)\"\n  shows \"t2 - d < t + (3::nat) + k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t2 - d < t + 3 + k", "using assms"], ["proof (prove)\nusing this:\n  t2 - t \\<le> 2 * d + (t + (4 + k))\n  t2 < t + 3 + k + d\n  \\<not> t2 - d < 0\n\ngoal (1 subgoal):\n 1. t2 - d < t + 3 + k", "by arith"], ["", "lemma ts_lose_ack_st1ts:\n  assumes \"ts lose\" \n         and \"lose t = [True]  \\<longrightarrow>  ack t = [x]  \\<and> st_out t = x\"\n         and \"lose t = [False] \\<longrightarrow>  ack t = [y]  \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "using assms"], ["proof (prove)\nusing this:\n  ts lose\n  lose t = [True] \\<longrightarrow> ack t = [x] \\<and> st_out t = x\n  lose t = [False] \\<longrightarrow> ack t = [y] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by (metis ts_bool_False)"], ["", "lemma ts_lose_ack_st1:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n  and h2:\"lose t = [True]  \\<longrightarrow>  ack t = [x]  \\<and> st_out t = x\"\n  and h3:\"lose t = [False] \\<longrightarrow>  ack t = [y]  \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"lose t = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume \"lose t = [False]\""], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h3"], ["proof (chain)\npicking this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow> ack t = [y] \\<and> st_out t = y", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow> ack t = [y] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume a2:\"lose t \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h1"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]", "have \"lose t = [True]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t = [True]", "by (simp add: ts_bool_True)"], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and a2 and h2"], ["proof (chain)\npicking this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow> ack t = [x] \\<and> st_out t = x", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow> ack t = [x] \\<and> st_out t = x\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ts_lose_ack_st2ts:\n  assumes \"ts lose\" \n         and \"lose t = [True] \\<longrightarrow> \n                 ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n        and \"lose t = [False] \\<longrightarrow> \n               ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "using assms"], ["proof (prove)\nusing this:\n  ts lose\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by (metis ts_bool_True_False)"], ["", "lemma ts_lose_ack_st2:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n         and h2:\"lose t = [True] \\<longrightarrow> \n                ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n         and h3:\"lose t = [False] \\<longrightarrow> \n                ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"lose t = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume \"lose t = [False]\""], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h3"], ["proof (chain)\npicking this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume a2:\"lose t \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h1"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]", "have \"lose t = [True]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t = [True]", "by (simp add: ts_bool_True)"], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and a2 and h2"], ["proof (chain)\npicking this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ts_lose_ack_st2vc_com:\nassumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n       and h2:\"lose t = [True] \\<longrightarrow> \n             ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n       and h3:\"lose t = [False] \\<longrightarrow> \n             ack t = [y] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = y\"\nshows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"lose t = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume \"lose t = [False]\""], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h3"], ["proof (chain)\npicking this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = y", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume a2:\"lose t \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h1"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]", "have ag1:\"lose t = [True]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t = [True]", "by (simp add: ts_bool_True)"], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and a2 and h2"], ["proof (chain)\npicking this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ts_lose_ack_st2send:\n  assumes h1:\"lose t = [True] \\<or> lose t = [False]\" \n  and h2:\"lose t = [True] \\<longrightarrow> \n      ack t = [x]  \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\"\n  and h3:\"lose t = [False] \\<longrightarrow> \n      ack t = [y] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = y\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"lose t = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume \"lose t = [False]\""], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. lose t = [False] \\<Longrightarrow> ack t = [st_out t]\n 2. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h3"], ["proof (chain)\npicking this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = y", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [False]\n  lose t = [False] \\<longrightarrow>\n  ack t = [y] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = y\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "assume a2:\"lose t \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and h1"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]", "have \"lose t = [True]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [False]\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t = [True]", "by (simp add: ts_bool_True)"], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [False] \\<Longrightarrow> ack t = [st_out t]", "from this and a2 and h2"], ["proof (chain)\npicking this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [True]\n  lose t \\<noteq> [False]\n  lose t = [True] \\<longrightarrow>\n  ack t = [x] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = x\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_st_splitten:\n  assumes h1:\"ts lose\"\n      and h2:\"msg (Suc 0) a1\"\n      and h3:\"msg (Suc 0) stop\"\n      and h4:\"st_in t = init_state \\<and> req t = [init] \\<longrightarrow> \n          ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\"\n      and h5:\"st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n      and h6:\"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [connection_ok] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\"\n      and h7:\"(st_in t = call \\<or> st_in t = connection_ok \\<or> st_in t = sending_data) \\<and> lose t = [True] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n      and h8:\"st_in t = connection_ok \\<and> req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [sending_data] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\"\n      and h9:\"st_in t = sending_data \\<and> a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [sending_data] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\"\n      and h10:\"st_in t = sending_data \\<and> a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\"\n      and h11:\"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\"\n      and h12:\"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n          ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\"\n      and h13:\"st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n          ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\"\n  shows \"ack t = [st_out t]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from h1 and h6 and h7"], ["proof (chain)\npicking this:\n  ts lose\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "have sg1:\"lose t = [True] \\<or> lose t = [False]\""], ["proof (prove)\nusing this:\n  ts lose\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. lose t = [True] \\<or> lose t = [False]", "by (simp add: ts_bool_True_False)"], ["proof (state)\nthis:\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"st_in t\")"], ["proof (state)\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = call \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 4. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 5. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "assume a1:\"st_in t = init_state\""], ["proof (state)\nthis:\n  st_in t = init_state\n\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = call \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 4. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 5. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "from a1 and h4 and h5"], ["proof (chain)\npicking this:\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof (cases \"req t = [init]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t \\<noteq> [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a11:\"req t = [init]\""], ["proof (state)\nthis:\n  req t = [init]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t \\<noteq> [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from a11 and a1 and h4 and h5"], ["proof (chain)\npicking this:\n  req t = [init]\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  req t = [init]\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t \\<noteq> [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t \\<noteq> [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a12:\"req t \\<noteq> [init]\""], ["proof (state)\nthis:\n  req t \\<noteq> [init]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = init_state;\n     st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n     ack t = [call] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = call;\n     st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t \\<noteq> [init]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from a12 and a1 and h4 and h5"], ["proof (chain)\npicking this:\n  req t \\<noteq> [init]\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  req t \\<noteq> [init]\n  st_in t = init_state\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 4. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 4. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "assume a2:\"st_in t = call\""], ["proof (state)\nthis:\n  st_in t = call\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 4. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "from a2 and sg1 and h6 and h7"], ["proof (chain)\npicking this:\n  st_in t = call\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  st_in t = call\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = call; lose t = [True] \\<or> lose t = [False];\n     lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "assume a3:\"st_in t = connection_ok\""], ["proof (state)\nthis:\n  st_in t = connection_ok\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 3. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "from a3 and h6 and h7 and h8"], ["proof (chain)\npicking this:\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data", "show ?thesis"], ["proof (prove)\nusing this:\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "proof (cases \"req t = [send]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t = [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t \\<noteq> [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a31:\"req t = [send]\""], ["proof (state)\nthis:\n  req t = [send]\n\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t = [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t \\<noteq> [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a3 and h6 and h7 and h8 and sg1"], ["proof (chain)\npicking this:\n  req t = [send]\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  lose t = [True] \\<or> lose t = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  req t = [send]\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>req t = [send]; st_in t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     lose t = [True] \\<or> lose t = [False]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2send, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t \\<noteq> [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t \\<noteq> [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a32:\"req t \\<noteq> [send]\""], ["proof (state)\nthis:\n  req t \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = connection_ok;\n     req t \\<noteq> [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data;\n     req t \\<noteq> [send]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a3 and h6 and h7 and h8 and sg1"], ["proof (chain)\npicking this:\n  req t \\<noteq> [send]\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  lose t = [True] \\<or> lose t = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  req t \\<noteq> [send]\n  st_in t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>req t \\<noteq> [send]; st_in t = connection_ok;\n     lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     lose t = [True] \\<or> lose t = [False]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "assume a4:\"st_in t = sending_data\""], ["proof (state)\nthis:\n  st_in t = sending_data\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow> ack t = [st_out t]\n 2. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "from sg1 and a4 and h7 and h9 and h10"], ["proof (chain)\npicking this:\n  lose t = [True] \\<or> lose t = [False]\n  st_in t = sending_data\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com", "show ?thesis"], ["proof (prove)\nusing this:\n  lose t = [True] \\<or> lose t = [False]\n  st_in t = sending_data\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "proof (cases \"a1 t = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t = []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a41:\"a1 t = []\""], ["proof (state)\nthis:\n  a1 t = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t = []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a4 and sg1 and h7 and h9 and h10"], ["proof (chain)\npicking this:\n  a1 t = []\n  st_in t = sending_data\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com", "show ?thesis"], ["proof (prove)\nusing this:\n  a1 t = []\n  st_in t = sending_data\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a1 t = []; st_in t = sending_data;\n     lose t = [True] \\<or> lose t = [False];\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a42:\"a1 t \\<noteq> []\""], ["proof (state)\nthis:\n  a1 t \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and h2"], ["proof (chain)\npicking this:\n  a1 t \\<noteq> []\n  msg (Suc 0) a1", "have \"a1 t = [sc_ack]\""], ["proof (prove)\nusing this:\n  a1 t \\<noteq> []\n  msg (Suc 0) a1\n\ngoal (1 subgoal):\n 1. a1 t = [sc_ack]", "by (simp add: aType_nonempty)"], ["proof (state)\nthis:\n  a1 t = [sc_ack]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>lose t = [True] \\<or> lose t = [False]; st_in t = sending_data;\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [sending_data] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data;\n     a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     a1 t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a4 and a42 and sg1 and h7 and h9 and h10"], ["proof (chain)\npicking this:\n  a1 t = [sc_ack]\n  st_in t = sending_data\n  a1 t \\<noteq> []\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com", "show ?thesis"], ["proof (prove)\nusing this:\n  a1 t = [sc_ack]\n  st_in t = sending_data\n  a1 t \\<noteq> []\n  lose t = [True] \\<or> lose t = [False]\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a1 t = [sc_ack]; st_in t = sending_data;\n     lose t = [True] \\<or> lose t = [False];\n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2vc_com, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "assume a5:\"st_in t = voice_com\""], ["proof (state)\nthis:\n  st_in t = voice_com\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow> ack t = [st_out t]", "from a5 and h11 and h12 and h13"], ["proof (chain)\npicking this:\n  st_in t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  st_in t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "proof (cases \"stop t = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t = []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a51:\"stop t = []\""], ["proof (state)\nthis:\n  stop t = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t = []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]\n 2. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a5 and h11 and h12 and h13 and sg1"], ["proof (chain)\npicking this:\n  stop t = []\n  st_in t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  lose t = [True] \\<or> lose t = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  stop t = []\n  st_in t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>stop t = []; st_in t = voice_com;\n     lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     lose t = [True] \\<or> lose t = [False]\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "by (rule ts_lose_ack_st2vc_com, assumption+)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "assume a52:\"stop t \\<noteq> []\""], ["proof (state)\nthis:\n  stop t \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and h3"], ["proof (chain)\npicking this:\n  stop t \\<noteq> []\n  msg (Suc 0) stop", "have sg7:\"stop t = [stop_vc]\""], ["proof (prove)\nusing this:\n  stop t \\<noteq> []\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = [stop_vc]", "by (simp add: stopType_nonempty)"], ["proof (state)\nthis:\n  stop t = [stop_vc]\n\ngoal (1 subgoal):\n 1. \\<lbrakk>st_in t = voice_com;\n     stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com;\n     stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n     ack t = [voice_com] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com;\n     stop t = [stop_vc] \\<longrightarrow>\n     ack t = [init_state] \\<and>\n     i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state;\n     stop t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> ack t = [st_out t]", "from this and a5 and a52 and h13"], ["proof (chain)\npicking this:\n  stop t = [stop_vc]\n  st_in t = voice_com\n  stop t \\<noteq> []\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  stop t = [stop_vc]\n  st_in t = voice_com\n  stop t \\<noteq> []\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by simp"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_st:\nassumes \"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\"\n       and tsLose:\"ts lose\"\n       and a1Msg1:\"msg (Suc 0) a1\"      \n       and stopMsg1:\"msg (Suc 0) stop\"\n  shows      \"ack t = [st_out t] \""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg1:\n   \"st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n    ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n    ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg2:\n   \"st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n    ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n    ack t = [init_state] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg3:\n   \"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> \n     lose t = [False] \\<longrightarrow>\n     ack t = [connection_ok] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False] \\<longrightarrow>\n    ack t = [connection_ok] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg4:\n   \"(st_in t = call \\<or> st_in t = connection_ok \\<or> st_in t = sending_data) \\<and> \n     lose t = [True] \\<longrightarrow>\n     ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n    lose t = [True] \\<longrightarrow>\n    ack t = [init_state] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg5:\n   \"st_in t = connection_ok \\<and> req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [sending_data] \\<and> i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = connection_ok \\<and>\n    req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [sending_data] \\<and>\n    i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg6:\n   \"st_in t = sending_data \\<and> a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [sending_data] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = sending_data \\<and>\n    a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [sending_data] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg7:\n   \"st_in t = sending_data \\<and> a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = sending_data \\<and>\n    a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [voice_com] \\<and>\n    i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg8:\n   \"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<and>\n    stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n    ack t = [voice_com] \\<and>\n    i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg9:\n   \"st_in t = voice_com \\<and> stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n    ack t = [voice_com] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<and>\n    stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n    ack t = [voice_com] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg10:\n   \"st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n    ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n    ack t = [init_state] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "from tsLose and a1Msg1 and stopMsg1 and sg1 and sg2 and sg3 and sg4 and sg5 and \n  sg6 and sg7 and sg8 and sg9 and sg10"], ["proof (chain)\npicking this:\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  st_in t = init_state \\<and> req t = [init] \\<longrightarrow>\n  ack t = [call] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = call\n  st_in t = init_state \\<and> req t \\<noteq> [init] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok \\<and>\n  req t = [send] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = b t \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [sending_data] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = sending_data\n  st_in t = sending_data \\<and>\n  a1 t = [sc_ack] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [False] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [vc_com] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and>\n  stop t = [] \\<and> lose t = [True] \\<longrightarrow>\n  ack t = [voice_com] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = voice_com\n  st_in t = voice_com \\<and> stop t = [stop_vc] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (1 subgoal):\n 1. ack t = [st_out t]", "by (rule tiTable_ack_st_splitten)"], ["proof (state)\nthis:\n  ack t = [st_out t]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_st_hd:\nassumes \"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\"\n       and \"ts lose\"\n       and \"msg (Suc 0) a1\"\n       and \"msg (Suc 0) stop\"\nshows \"st_out t =  hd (ack t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st_out t = hd (ack t)", "using assms"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st_out t = hd (ack t)", "by (simp add:  tiTable_ack_st)"], ["", "lemma tiTable_ack_connection_ok:\n  assumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n  shows \"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> \n         lose t = [False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose", "have sg1:\"lose t = [True] \\<or> lose t = [False]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [True] \\<or> lose t = [False]", "by (simp add: ts_bool_True_False)"], ["proof (state)\nthis:\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and xMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) x", "have sg2:\"x t = [] \\<or> x t = [sc_ack]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = [] \\<or> x t = [sc_ack]", "by (simp add: aType_lemma)"], ["proof (state)\nthis:\n  x t = [] \\<or> x t = [sc_ack]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and stopMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) stop", "have sg3:\"stop t = [] \\<or> stop t = [stop_vc]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = [] \\<or> stop t = [stop_vc]", "by (simp add: stopType_lemma)"], ["proof (state)\nthis:\n  stop t = [] \\<or> stop t = [stop_vc]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"st_in t\")"], ["proof (state)\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = call \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 4. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 5. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a1:\"st_in t = init_state\""], ["proof (state)\nthis:\n  st_in t = init_state\n\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = call \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 4. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 5. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"req t = [init]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. req t = [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. req t \\<noteq> [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a11:\"req t = [init]\""], ["proof (state)\nthis:\n  req t = [init]\n\ngoal (2 subgoals):\n 1. req t = [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. req t \\<noteq> [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a1 and a11 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t = [init]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t = [init]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a12:\"req t \\<noteq> [init]\""], ["proof (state)\nthis:\n  req t \\<noteq> [init]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a1 and a12 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t \\<noteq> [init]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t \\<noteq> [init]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 4. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 4. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a2:\"st_in t = call\""], ["proof (state)\nthis:\n  st_in t = call\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 4. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a21:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a2 and a21 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [True]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [True]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a22:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a22a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out", "have \n       \"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> \n         lose t = [False] \\<longrightarrow>\n         ack t = [connection_ok] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False] \\<longrightarrow>\n    ack t = [connection_ok] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and a2 and a22a and ackCon"], ["proof (chain)\npicking this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  st_in t = call\n  lose t = [False]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False] \\<longrightarrow>\n  ack t = [connection_ok] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = connection_ok\n  st_in t = call\n  lose t = [False]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by simp"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a3:\"st_in t = connection_ok\""], ["proof (state)\nthis:\n  st_in t = connection_ok\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 3. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a31:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out", "have \n       \"(st_in t = call \\<or> st_in t = connection_ok \\<or> st_in t = sending_data) \\<and> \n         lose t = [True] \\<longrightarrow>\n         ack t = [init_state] \\<and> i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n    lose t = [True] \\<longrightarrow>\n    ack t = [init_state] \\<and>\n    i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and a3 and a31 and ackCon"], ["proof (chain)\npicking this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok\n  lose t = [True]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<or> st_in t = sending_data) \\<and>\n  lose t = [True] \\<longrightarrow>\n  ack t = [init_state] \\<and>\n  i1 t = [] \\<and> vc t = [] \\<and> st_out t = init_state\n  st_in t = connection_ok\n  lose t = [True]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by simp"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a32:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a32a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"req t = [send]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. req t = [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. req t \\<noteq> [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a321:\"req t = [send]\""], ["proof (state)\nthis:\n  req t = [send]\n\ngoal (2 subgoals):\n 1. req t = [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. req t \\<noteq> [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a3 and a32a and a321 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t = [send]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t = [send]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a322:\"req t \\<noteq> [send]\""], ["proof (state)\nthis:\n  req t \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a3 and a32a and a322 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a4:\"st_in t = sending_data\""], ["proof (state)\nthis:\n  st_in t = sending_data\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a41:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a4 and a41 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [True]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [True]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a42:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a42a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"x t = [sc_ack]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a421:\"x t = [sc_ack]\""], ["proof (state)\nthis:\n  x t = [sc_ack]\n\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a4 and a42a and a421 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a422:\" x t \\<noteq> [sc_ack]\""], ["proof (state)\nthis:\n  x t \\<noteq> [sc_ack]\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and xMsg1"], ["proof (chain)\npicking this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x", "have a422a:\"x t = []\""], ["proof (prove)\nusing this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = []", "by (simp add: aType_empty)"], ["proof (state)\nthis:\n  x t = []\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a4 and a42a and a422a and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = []\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = []\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a5:\"st_in t = voice_com\""], ["proof (state)\nthis:\n  st_in t = voice_com\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"stop t = [stop_vc]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a51:\"stop t = [stop_vc]\""], ["proof (state)\nthis:\n  stop t = [stop_vc]\n\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a5 and a51 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = [stop_vc]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = [stop_vc]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a52:\"stop t \\<noteq> [stop_vc]\""], ["proof (state)\nthis:\n  stop t \\<noteq> [stop_vc]\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and stopMsg1"], ["proof (chain)\npicking this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop", "have a52a:\"stop t = []\""], ["proof (prove)\nusing this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = []", "by (simp add: stopType_empty)"], ["proof (state)\nthis:\n  stop t = []\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a521:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a5 and a52a and a521 and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [True]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [True]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "assume a522:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a522a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "from tbl and a5 and a52a and a522a and ackCon"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [False]\n  ack t = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [False]\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_i1_1:\nassumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n       and \"ts lose\"\n       and \"msg (Suc 0) x\"\n       and \"msg (Suc 0) stop\"\n       and \"ack t = [connection_ok]\"\nshows \"i1 t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 t = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  ack t = [connection_ok]", "have \n   \"(st_in t = call \\<or> st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and> \n    lose t = [False]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. (st_in t = call \\<or>\n     st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n    lose t = [False]", "by (simp add: tiTable_ack_connection_ok)"], ["proof (state)\nthis:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. i1 t = []", "from this and tbl"], ["proof (chain)\npicking this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out", "show ?thesis"], ["proof (prove)\nusing this:\n  (st_in t = call \\<or>\n   st_in t = connection_ok \\<and> req t \\<noteq> [send]) \\<and>\n  lose t = [False]\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_call:\nassumes tbl:\"tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\"\n      and ackCall:\"ack t = [call]\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\nshows \"st_in t = init_state \\<and> req t = [init]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "from tbl and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose", "have sg1:\"lose t = [True] \\<or> lose t = [False]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [True] \\<or> lose t = [False]", "by (simp add: ts_bool_True_False)"], ["proof (state)\nthis:\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "from tbl and xMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) x", "have sg2:\"x t = [] \\<or> x t = [sc_ack]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = [] \\<or> x t = [sc_ack]", "by (simp add: aType_lemma)"], ["proof (state)\nthis:\n  x t = [] \\<or> x t = [sc_ack]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "from tbl and stopMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) stop", "have sg3:\"stop t = [] \\<or> stop t = [stop_vc]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = [] \\<or> stop t = [stop_vc]", "by (simp add: stopType_lemma)"], ["proof (state)\nthis:\n  stop t = [] \\<or> stop t = [stop_vc]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"st_in t\")"], ["proof (state)\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = call \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 4. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 5. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a1:\"st_in t = init_state\""], ["proof (state)\nthis:\n  st_in t = init_state\n\ngoal (5 subgoals):\n 1. st_in t = init_state \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = call \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 4. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 5. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"req t = [init]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. req t = [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. req t \\<noteq> [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a11:\"req t = [init]\""], ["proof (state)\nthis:\n  req t = [init]\n\ngoal (2 subgoals):\n 1. req t = [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. req t \\<noteq> [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a1 and a11 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t = [init]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t = [init]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a12:\"req t \\<noteq> [init]\""], ["proof (state)\nthis:\n  req t \\<noteq> [init]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [init] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a1 and a12 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t \\<noteq> [init]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = init_state\n  req t \\<noteq> [init]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 4. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 4. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a2:\"st_in t = call\""], ["proof (state)\nthis:\n  st_in t = call\n\ngoal (4 subgoals):\n 1. st_in t = call \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 4. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a21:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a2 and a21 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [True]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [True]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a22:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a22a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a2 and a22a and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [False]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = call\n  lose t = [False]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a3:\"st_in t = connection_ok\""], ["proof (state)\nthis:\n  st_in t = connection_ok\n\ngoal (3 subgoals):\n 1. st_in t = connection_ok \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 3. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a31:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a3 and a31 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [True]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [True]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a32:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a32a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"req t = [send]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. req t = [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. req t \\<noteq> [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a321:\"req t = [send]\""], ["proof (state)\nthis:\n  req t = [send]\n\ngoal (2 subgoals):\n 1. req t = [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. req t \\<noteq> [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a3 and a32a and a321 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t = [send]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t = [send]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a322:\"req t \\<noteq> [send]\""], ["proof (state)\nthis:\n  req t \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [send] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a3 and a32a and a322 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a4:\"st_in t = sending_data\""], ["proof (state)\nthis:\n  st_in t = sending_data\n\ngoal (2 subgoals):\n 1. st_in t = sending_data \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a41:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a4 and a41 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [True]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [True]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a42:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a42a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"x t = [sc_ack]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a421:\"x t = [sc_ack]\""], ["proof (state)\nthis:\n  x t = [sc_ack]\n\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a4 and a42a and a421 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a422:\" x t \\<noteq> [sc_ack]\""], ["proof (state)\nthis:\n  x t \\<noteq> [sc_ack]\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and xMsg1"], ["proof (chain)\npicking this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x", "have a422a:\"x t = []\""], ["proof (prove)\nusing this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = []", "by (simp add: aType_empty)"], ["proof (state)\nthis:\n  x t = []\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a4 and a42a and a422a and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = []\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = sending_data\n  lose t = [False]\n  x t = []\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a5:\"st_in t = voice_com\""], ["proof (state)\nthis:\n  st_in t = voice_com\n\ngoal (1 subgoal):\n 1. st_in t = voice_com \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"stop t = [stop_vc]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a51:\"stop t = [stop_vc]\""], ["proof (state)\nthis:\n  stop t = [stop_vc]\n\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a5 and a51 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = [stop_vc]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = [stop_vc]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a52:\"stop t \\<noteq> [stop_vc]\""], ["proof (state)\nthis:\n  stop t \\<noteq> [stop_vc]\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and stopMsg1"], ["proof (chain)\npicking this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop", "have a52a:\"stop t = []\""], ["proof (prove)\nusing this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = []", "by (simp add: stopType_empty)"], ["proof (state)\nthis:\n  stop t = []\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a521:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]\n 2. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a5 and a52a and a521 and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [True]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [True]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "assume a522:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a522a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow>\n    st_in t = init_state \\<and> req t = [init]", "from tbl and a5 and a52a and a522a and ackCall"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [False]\n  ack t = [call]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose st_in b ack i1 vc st_out\n  st_in t = voice_com\n  stop t = []\n  lose t = [False]\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_i1_2:\nassumes tbl:\"tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\" \n       and \"ts lose\"\n       and \"msg (Suc 0) a1\"\n       and \"msg (Suc 0) stop\" \n       and \"ack t = [call]\"\nshows \"i1 t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 t = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  ack t = [call]", "have \"st_in t = init_state \\<and> req t = [init]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  ack t = [call]\n\ngoal (1 subgoal):\n 1. st_in t = init_state \\<and> req t = [init]", "by (simp add: tiTable_ack_call)"], ["proof (state)\nthis:\n  st_in t = init_state \\<and> req t = [init]\n\ngoal (1 subgoal):\n 1. i1 t = []", "from this and tbl"], ["proof (chain)\npicking this:\n  st_in t = init_state \\<and> req t = [init]\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out", "show ?thesis"], ["proof (prove)\nusing this:\n  st_in t = init_state \\<and> req t = [init]\n  tiTable_SampleT req a1 stop lose st_in b ack i1 vc st_out\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_init0:\nassumes tbl:\"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\" \n      and req0:\"req 0 = []\"\nshows \"ack 0 = [init_state]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack 0 = [init_state]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack 0 = [init_state]", "have \"(fin_inf_append [init_state] st) (0::nat) = init_state\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st 0 = init_state", "by (simp add: fin_inf_append_def)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st 0 = init_state\n\ngoal (1 subgoal):\n 1. ack 0 = [init_state]", "from tbl and this and req0"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st 0 = init_state\n  req 0 = []", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st 0 = init_state\n  req 0 = []\n\ngoal (1 subgoal):\n 1. ack 0 = [init_state]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  ack 0 = [init_state]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_ack_init:\nassumes \"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) a1\"\n      and \"msg (Suc 0) stop\"\n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\nshows \"ack t = [init_state]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack t = [init_state]", "using assms"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n\ngoal (1 subgoal):\n 1. ack t = [init_state]", "proof (induction t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>tiTable_SampleT req a1 stop lose\n              (fin_inf_append [init_state] st) b ack i1 vc st;\n     ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n     \\<forall>t1\\<le>0. req t1 = []\\<rbrakk>\n    \\<Longrightarrow> ack 0 = [init_state]\n 2. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "case 0"], ["proof (state)\nthis:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>0. req t1 = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>tiTable_SampleT req a1 stop lose\n              (fin_inf_append [init_state] st) b ack i1 vc st;\n     ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n     \\<forall>t1\\<le>0. req t1 = []\\<rbrakk>\n    \\<Longrightarrow> ack 0 = [init_state]\n 2. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "from this"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>0. req t1 = []", "show ?case"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>0. req t1 = []\n\ngoal (1 subgoal):\n 1. ack 0 = [init_state]", "by (simp add: tiTable_ack_init0)"], ["proof (state)\nthis:\n  ack 0 = [init_state]\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "case (Suc t)"], ["proof (state)\nthis:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []", "have sg1: \"st t =  hd (ack t)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n\ngoal (1 subgoal):\n 1. st t = hd (ack t)", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "from Suc and sg1"], ["proof (chain)\npicking this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n  st t = hd (ack t)", "have sg2: \n   \"(fin_inf_append [init_state] st) (Suc t) = init_state\""], ["proof (prove)\nusing this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = init_state", "by (simp add: correct_fin_inf_append2)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = init_state\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>tiTable_SampleT req a1 stop lose\n                          (fin_inf_append [init_state] st) b ack i1 vc st;\n                 ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n                 \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n                \\<Longrightarrow> ack t = [init_state];\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b\n         ack i1 vc st;\n        ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n        \\<forall>t1\\<le>Suc t. req t1 = []\\<rbrakk>\n       \\<Longrightarrow> ack (Suc t) = [init_state]", "from Suc and sg1 and sg2"], ["proof (chain)\npicking this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = init_state", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n            b ack i1 vc st;\n   ts lose; msg (Suc 0) a1; msg (Suc 0) stop;\n   \\<forall>t1\\<le>t. req t1 = []\\<rbrakk>\n  \\<Longrightarrow> ack t = [init_state]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>Suc t. req t1 = []\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = init_state\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [init_state]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  ack (Suc t) = [init_state]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_i1_3:\nassumes tbl:\"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st)  b ack i1 vc st\" \n      and tsLose:\"ts lose\"\n      and xMsg1:\"msg (Suc 0) x\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and h5:\"\\<forall> t1 \\<le> t. req t1 = []\" \nshows \"i1 t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 t = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []", "have sg1:\"ack t = [init_state]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n\ngoal (1 subgoal):\n 1. ack t = [init_state]", "by (simp add: tiTable_ack_init)"], ["proof (state)\nthis:\n  ack t = [init_state]\n\ngoal (1 subgoal):\n 1. i1 t = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []", "have sg2:\"st t =  hd (ack t)\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n\ngoal (1 subgoal):\n 1. st t = hd (ack t)", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. i1 t = []", "from sg1 and sg2"], ["proof (chain)\npicking this:\n  ack t = [init_state]\n  st t = hd (ack t)", "have sg3:\n   \"(fin_inf_append [init_state] st) (Suc t) = init_state\""], ["proof (prove)\nusing this:\n  ack t = [init_state]\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = init_state", "by (simp add: correct_fin_inf_append2)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = init_state\n\ngoal (1 subgoal):\n 1. i1 t = []", "from tbl and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose", "have sg4:\"lose t = [True] \\<or> lose t = [False]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [True] \\<or> lose t = [False]", "by (simp add: ts_bool_True_False)"], ["proof (state)\nthis:\n  lose t = [True] \\<or> lose t = [False]\n\ngoal (1 subgoal):\n 1. i1 t = []", "from tbl and xMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  msg (Suc 0) x", "have sg5:\"x t = [] \\<or> x t = [sc_ack]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = [] \\<or> x t = [sc_ack]", "by (simp add: aType_lemma)"], ["proof (state)\nthis:\n  x t = [] \\<or> x t = [sc_ack]\n\ngoal (1 subgoal):\n 1. i1 t = []", "from tbl and stopMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  msg (Suc 0) stop", "have sg6:\"stop t = [] \\<or> stop t = [stop_vc]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = [] \\<or> stop t = [stop_vc]", "by (simp add: stopType_lemma)"], ["proof (state)\nthis:\n  stop t = [] \\<or> stop t = [stop_vc]\n\ngoal (1 subgoal):\n 1. i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"fin_inf_append [init_state] st t\")"], ["proof (state)\ngoal (5 subgoals):\n 1. fin_inf_append [init_state] st t = init_state \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = call \\<Longrightarrow> i1 t = []\n 3. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 4. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 5. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "assume a1:\"fin_inf_append [init_state] st t = init_state\""], ["proof (state)\nthis:\n  fin_inf_append [init_state] st t = init_state\n\ngoal (5 subgoals):\n 1. fin_inf_append [init_state] st t = init_state \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = call \\<Longrightarrow> i1 t = []\n 3. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 4. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 5. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "from assms and sg1 and sg2 and sg3 and a1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  ack t = [init_state]\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = init_state\n  fin_inf_append [init_state] st t = init_state", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  ack t = [init_state]\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = init_state\n  fin_inf_append [init_state] st t = init_state\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add:  tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (4 subgoals):\n 1. fin_inf_append [init_state] st t = call \\<Longrightarrow> i1 t = []\n 2. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 4. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. fin_inf_append [init_state] st t = call \\<Longrightarrow> i1 t = []\n 2. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 4. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "assume a2:\"fin_inf_append [init_state] st t = call\""], ["proof (state)\nthis:\n  fin_inf_append [init_state] st t = call\n\ngoal (4 subgoals):\n 1. fin_inf_append [init_state] st t = call \\<Longrightarrow> i1 t = []\n 2. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 4. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a21:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a2 and a21"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = call\n  lose t = [True]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = call\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a22:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a22a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a2 and a22a"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = call\n  lose t = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = call\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (3 subgoals):\n 1. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "assume a3:\"fin_inf_append [init_state] st t = connection_ok\""], ["proof (state)\nthis:\n  fin_inf_append [init_state] st t = connection_ok\n\ngoal (3 subgoals):\n 1. fin_inf_append [init_state] st t = connection_ok \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 3. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a31:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a3 and a31"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = connection_ok\n  lose t = [True]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = connection_ok\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a32:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a32a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from h5"], ["proof (chain)\npicking this:\n  \\<forall>t1\\<le>t. req t1 = []", "have a322:\"req t \\<noteq> [send]\""], ["proof (prove)\nusing this:\n  \\<forall>t1\\<le>t. req t1 = []\n\ngoal (1 subgoal):\n 1. req t \\<noteq> [send]", "by auto"], ["proof (state)\nthis:\n  req t \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a3 and a32a and a322"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = connection_ok\n  lose t = [False]\n  req t \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (2 subgoals):\n 1. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "assume a4:\"fin_inf_append [init_state] st t = sending_data\""], ["proof (state)\nthis:\n  fin_inf_append [init_state] st t = sending_data\n\ngoal (2 subgoals):\n 1. fin_inf_append [init_state] st t = sending_data \\<Longrightarrow>\n    i1 t = []\n 2. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a41:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a4 and a41"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [True]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [True]\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a42:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a42a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"x t = [sc_ack]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow> i1 t = []\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "assume a421:\"x t = [sc_ack]\""], ["proof (state)\nthis:\n  x t = [sc_ack]\n\ngoal (2 subgoals):\n 1. x t = [sc_ack] \\<Longrightarrow> i1 t = []\n 2. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "from tbl and a4 and a42a and a421 and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ts lose", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [False]\n  x t = [sc_ack]\n  ts lose\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "assume a422:\" x t \\<noteq> [sc_ack]\""], ["proof (state)\nthis:\n  x t \\<noteq> [sc_ack]\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "from this and xMsg1"], ["proof (chain)\npicking this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x", "have a422a:\"x t = []\""], ["proof (prove)\nusing this:\n  x t \\<noteq> [sc_ack]\n  msg (Suc 0) x\n\ngoal (1 subgoal):\n 1. x t = []", "by (simp add: aType_empty)"], ["proof (state)\nthis:\n  x t = []\n\ngoal (1 subgoal):\n 1. x t \\<noteq> [sc_ack] \\<Longrightarrow> i1 t = []", "from tbl and a4 and a42a and a422a and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [False]\n  x t = []\n  ts lose", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = sending_data\n  lose t = [False]\n  x t = []\n  ts lose\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "assume a5:\"fin_inf_append [init_state] st t = voice_com\""], ["proof (state)\nthis:\n  fin_inf_append [init_state] st t = voice_com\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st t = voice_com \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"stop t = [stop_vc]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow> i1 t = []\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "assume a51:\"stop t = [stop_vc]\""], ["proof (state)\nthis:\n  stop t = [stop_vc]\n\ngoal (2 subgoals):\n 1. stop t = [stop_vc] \\<Longrightarrow> i1 t = []\n 2. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "from tbl and a5 and a51 and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = [stop_vc]\n  ts lose", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = [stop_vc]\n  ts lose\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "assume a52:\"stop t \\<noteq> [stop_vc]\""], ["proof (state)\nthis:\n  stop t \\<noteq> [stop_vc]\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "from this and stopMsg1"], ["proof (chain)\npicking this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop", "have a52a:\"stop t = []\""], ["proof (prove)\nusing this:\n  stop t \\<noteq> [stop_vc]\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. stop t = []", "by (simp add: stopType_empty)"], ["proof (state)\nthis:\n  stop t = []\n\ngoal (1 subgoal):\n 1. stop t \\<noteq> [stop_vc] \\<Longrightarrow> i1 t = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t = []", "proof (cases \"lose t = [True]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a521:\"lose t = [True]\""], ["proof (state)\nthis:\n  lose t = [True]\n\ngoal (2 subgoals):\n 1. lose t = [True] \\<Longrightarrow> i1 t = []\n 2. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a5 and a52a and a521 and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = []\n  lose t = [True]\n  ts lose", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = []\n  lose t = [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "assume a522:\"lose t \\<noteq> [True]\""], ["proof (state)\nthis:\n  lose t \\<noteq> [True]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from this and tsLose"], ["proof (chain)\npicking this:\n  lose t \\<noteq> [True]\n  ts lose", "have a522a:\"lose t = [False]\""], ["proof (prove)\nusing this:\n  lose t \\<noteq> [True]\n  ts lose\n\ngoal (1 subgoal):\n 1. lose t = [False]", "by (simp add: ts_bool_False)"], ["proof (state)\nthis:\n  lose t = [False]\n\ngoal (1 subgoal):\n 1. lose t \\<noteq> [True] \\<Longrightarrow> i1 t = []", "from tbl and a5 and a52a and a522a and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = []\n  lose t = [False]\n  ts lose", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  fin_inf_append [init_state] st t = voice_com\n  stop t = []\n  lose t = [False]\n  ts lose\n\ngoal (1 subgoal):\n 1. i1 t = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_st_call_ok:\nassumes tbl:\"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st) \n                   b ack i1 vc st\"\n      and tsLose:\"ts lose\"\n      and h3:\"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and h4:\"st (Suc t) = call\"\nshows \"st (Suc (Suc t)) = connection_ok\""], ["proof (prove)\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "from h4"], ["proof (chain)\npicking this:\n  st (Suc t) = call", "have sg1:\n     \"(fin_inf_append [init_state] st) (Suc (Suc t)) = call\""], ["proof (prove)\nusing this:\n  st (Suc t) = call\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc (Suc t)) = call", "by (simp add: correct_fin_inf_append2)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc (Suc t)) = call\n\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "from tbl and tsLose"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose", "have sg2:\"lose (Suc (Suc t)) = [True] \\<or> lose (Suc (Suc t)) = [False]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc t)) = [True] \\<or> lose (Suc (Suc t)) = [False]", "by (simp add: ts_bool_True_False)"], ["proof (state)\nthis:\n  lose (Suc (Suc t)) = [True] \\<or> lose (Suc (Suc t)) = [False]\n\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "proof (cases \"lose (Suc (Suc t)) = [False]\")"], ["proof (state)\ngoal (2 subgoals):\n 1. lose (Suc (Suc t)) = [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok\n 2. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "assume a1:\"lose (Suc (Suc t)) = [False]\""], ["proof (state)\nthis:\n  lose (Suc (Suc t)) = [False]\n\ngoal (2 subgoals):\n 1. lose (Suc (Suc t)) = [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok\n 2. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "from tbl and a1 and sg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  lose (Suc (Suc t)) = [False]\n  fin_inf_append [init_state] st (Suc (Suc t)) = call", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  lose (Suc (Suc t)) = [False]\n  fin_inf_append [init_state] st (Suc (Suc t)) = call\n\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st (Suc (Suc t)) = connection_ok\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "assume a2:\"lose (Suc (Suc t)) \\<noteq> [False]\""], ["proof (state)\nthis:\n  lose (Suc (Suc t)) \\<noteq> [False]\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "from h3"], ["proof (chain)\npicking this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]", "have sg3:\"ack (Suc (Suc t)) = [connection_ok]\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n\ngoal (1 subgoal):\n 1. ack (Suc (Suc t)) = [connection_ok]", "by auto"], ["proof (state)\nthis:\n  ack (Suc (Suc t)) = [connection_ok]\n\ngoal (1 subgoal):\n 1. lose (Suc (Suc t)) \\<noteq> [False] \\<Longrightarrow>\n    st (Suc (Suc t)) = connection_ok", "from tbl and a2 and sg1 and sg2 and sg3"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  lose (Suc (Suc t)) \\<noteq> [False]\n  fin_inf_append [init_state] st (Suc (Suc t)) = call\n  lose (Suc (Suc t)) = [True] \\<or> lose (Suc (Suc t)) = [False]\n  ack (Suc (Suc t)) = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  lose (Suc (Suc t)) \\<noteq> [False]\n  fin_inf_append [init_state] st (Suc (Suc t)) = call\n  lose (Suc (Suc t)) = [True] \\<or> lose (Suc (Suc t)) = [False]\n  ack (Suc (Suc t)) = [connection_ok]\n\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st (Suc (Suc t)) = connection_ok\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  st (Suc (Suc t)) = connection_ok\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_i1_4b:\nassumes \"tiTable_SampleT req x stop lose \n                  (fin_inf_append [init_state] st) b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) x\"\n      and \"msg (Suc 0) stop\" \n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\n      and \"req (Suc t) = [init]\"\n      and \"\\<forall>m < k + 3. req (t + m) \\<noteq> [send]\"\n      and h7:\"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and \"\\<forall>j \\<le> k + 3. lose (t + j) = [False]\"\n      and h9:\"t2 < (t + 3 + k)\"\nshows \"i1 t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t2 = []", "proof (cases \"t2 \\<le> t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t2 \\<le> t \\<Longrightarrow> i1 t2 = []\n 2. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "assume \"t2 \\<le> t\""], ["proof (state)\nthis:\n  t2 \\<le> t\n\ngoal (2 subgoals):\n 1. t2 \\<le> t \\<Longrightarrow> i1 t2 = []\n 2. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "from assms and this"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  t2 \\<le> t", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  t2 \\<le> t\n\ngoal (1 subgoal):\n 1. i1 t2 = []", "by (simp add: tiTable_i1_3)"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "assume a2:\"\\<not> t2 \\<le> t\""], ["proof (state)\nthis:\n  \\<not> t2 \\<le> t\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k", "have sg1:\"ack t = [init_state]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n\ngoal (1 subgoal):\n 1. ack t = [init_state]", "by (simp add: tiTable_ack_init)"], ["proof (state)\nthis:\n  ack t = [init_state]\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k", "have sg2:\"st t =  hd (ack t)\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n\ngoal (1 subgoal):\n 1. st t = hd (ack t)", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "from sg1 and sg2"], ["proof (chain)\npicking this:\n  ack t = [init_state]\n  st t = hd (ack t)", "have sg3:\n   \"(fin_inf_append [init_state] st) (Suc t) = init_state\""], ["proof (prove)\nusing this:\n  ack t = [init_state]\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = init_state", "by (simp add: correct_fin_inf_append2)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = init_state\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "from assms and sg3"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  fin_inf_append [init_state] st (Suc t) = init_state", "have sg4:\"st (Suc t) = call\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  fin_inf_append [init_state] st (Suc t) = init_state\n\ngoal (1 subgoal):\n 1. st (Suc t) = call", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  st (Suc t) = call\n\ngoal (1 subgoal):\n 1. \\<not> t2 \\<le> t \\<Longrightarrow> i1 t2 = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t2 = []", "proof (cases \"t2 = Suc t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t2 = Suc t \\<Longrightarrow> i1 t2 = []\n 2. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "assume a3:\"t2 = Suc t\""], ["proof (state)\nthis:\n  t2 = Suc t\n\ngoal (2 subgoals):\n 1. t2 = Suc t \\<Longrightarrow> i1 t2 = []\n 2. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "from assms and sg3 and a3"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  fin_inf_append [init_state] st (Suc t) = init_state\n  t2 = Suc t", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  fin_inf_append [init_state] st (Suc t) = init_state\n  t2 = Suc t\n\ngoal (1 subgoal):\n 1. i1 t2 = []", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "assume a4:\"t2 \\<noteq> Suc t\""], ["proof (state)\nthis:\n  t2 \\<noteq> Suc t\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "from assms and sg4 and a4 and a2"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  st (Suc t) = call\n  t2 \\<noteq> Suc t\n  \\<not> t2 \\<le> t", "have sg7:\"st (Suc (Suc t)) = connection_ok\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  st (Suc t) = call\n  t2 \\<noteq> Suc t\n  \\<not> t2 \\<le> t\n\ngoal (1 subgoal):\n 1. st (Suc (Suc t)) = connection_ok", "by (simp add: tiTable_st_call_ok)"], ["proof (state)\nthis:\n  st (Suc (Suc t)) = connection_ok\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "from assms"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k", "have sg8:\"ack (Suc (Suc t)) = [st (Suc (Suc t))]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n\ngoal (1 subgoal):\n 1. ack (Suc (Suc t)) = [st (Suc (Suc t))]", "by (simp add: tiTable_ack_st)"], ["proof (state)\nthis:\n  ack (Suc (Suc t)) = [st (Suc (Suc t))]\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc t \\<Longrightarrow> i1 t2 = []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 t2 = []", "proof (cases \"t2 =  Suc (Suc t)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t2 = Suc (Suc t) \\<Longrightarrow> i1 t2 = []\n 2. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "assume a5:\"t2 =  Suc (Suc t)\""], ["proof (state)\nthis:\n  t2 = Suc (Suc t)\n\ngoal (2 subgoals):\n 1. t2 = Suc (Suc t) \\<Longrightarrow> i1 t2 = []\n 2. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "from h7 and h9 and a5"], ["proof (chain)\npicking this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 < t + 3 + k\n  t2 = Suc (Suc t)", "have sg9:\"ack t2 = [connection_ok]\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 < t + 3 + k\n  t2 = Suc (Suc t)\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "by auto"], ["proof (state)\nthis:\n  ack t2 = [connection_ok]\n\ngoal (2 subgoals):\n 1. t2 = Suc (Suc t) \\<Longrightarrow> i1 t2 = []\n 2. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "from assms and sg9"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  ack t2 = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  ack t2 = [connection_ok]\n\ngoal (1 subgoal):\n 1. i1 t2 = []", "by (simp add:  tiTable_i1_1)"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "assume a6:\"t2 \\<noteq> Suc (Suc t)\""], ["proof (state)\nthis:\n  t2 \\<noteq> Suc (Suc t)\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "from a6 and a4 and a2"], ["proof (chain)\npicking this:\n  t2 \\<noteq> Suc (Suc t)\n  t2 \\<noteq> Suc t\n  \\<not> t2 \\<le> t", "have sg10:\"Suc (Suc t) < t2\""], ["proof (prove)\nusing this:\n  t2 \\<noteq> Suc (Suc t)\n  t2 \\<noteq> Suc t\n  \\<not> t2 \\<le> t\n\ngoal (1 subgoal):\n 1. Suc (Suc t) < t2", "by arith"], ["proof (state)\nthis:\n  Suc (Suc t) < t2\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "from h7 and h9 and sg10"], ["proof (chain)\npicking this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 < t + 3 + k\n  Suc (Suc t) < t2", "have sg11:\"ack t2 = [connection_ok]\""], ["proof (prove)\nusing this:\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  t2 < t + 3 + k\n  Suc (Suc t) < t2\n\ngoal (1 subgoal):\n 1. ack t2 = [connection_ok]", "by (simp add: aux_ack_t2)"], ["proof (state)\nthis:\n  ack t2 = [connection_ok]\n\ngoal (1 subgoal):\n 1. t2 \\<noteq> Suc (Suc t) \\<Longrightarrow> i1 t2 = []", "from assms and a6 and sg7 and sg8 and sg11"], ["proof (chain)\npicking this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  t2 \\<noteq> Suc (Suc t)\n  st (Suc (Suc t)) = connection_ok\n  ack (Suc (Suc t)) = [st (Suc (Suc t))]\n  ack t2 = [connection_ok]", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req x stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) x\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n  t2 < t + 3 + k\n  t2 \\<noteq> Suc (Suc t)\n  st (Suc (Suc t)) = connection_ok\n  ack (Suc (Suc t)) = [st (Suc (Suc t))]\n  ack t2 = [connection_ok]\n\ngoal (1 subgoal):\n 1. i1 t2 = []", "by (simp add:  tiTable_i1_1)"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i1 t2 = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_i1_4:\nassumes \"tiTable_SampleT req a1 stop lose \n                  (fin_inf_append [init_state] st) b ack i1 vc st\"\n      and \"ts lose\"\n      and \"msg (Suc 0) a1\"\n      and \"msg (Suc 0) stop\" \n      and \"\\<forall> t1 \\<le> t. req t1 = []\"\n      and \"req (Suc t) = [init]\"\n      and \"\\<forall>m < k + 3. req (t + m) \\<noteq> [send]\"\n      and \"\\<forall>m \\<le> k. ack (Suc (Suc (t + m))) = [connection_ok]\"\n      and \"\\<forall>j \\<le> k + 3. lose (t + j) = [False]\"\nshows \"\\<forall> t2 < (t + 3 + k). i1 t2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t2<t + 3 + k. i1 t2 = []", "using assms"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  \\<forall>t1\\<le>t. req t1 = []\n  req (Suc t) = [init]\n  \\<forall>m<k + 3. req (t + m) \\<noteq> [send]\n  \\<forall>m\\<le>k. ack (Suc (Suc (t + m))) = [connection_ok]\n  \\<forall>j\\<le>k + 3. lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>t2<t + 3 + k. i1 t2 = []", "by (simp add: tiTable_i1_4b)"], ["", "lemma tiTable_ack_ok:\n  assumes h1:\"\\<forall>j\\<le> d + 2. lose (t + j) = [False]\"\n      and tsLose:\"ts lose\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and reqNsend:\"req (Suc t) \\<noteq> [send]\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and tbl:\"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1 vc st\"\n  shows \"ack (Suc t) = [connection_ok]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from tbl and tsLose and a1Msg1 and stopMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have \"st t =  hd (ack t)\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st t = hd (ack t)", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from this and ackCon"], ["proof (chain)\npicking this:\n  st t = hd (ack t)\n  ack t = [connection_ok]", "have sg2:\n   \"(fin_inf_append [init_state] st) (Suc t) =  connection_ok\""], ["proof (prove)\nusing this:\n  st t = hd (ack t)\n  ack t = [connection_ok]\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = connection_ok", "by (simp add: correct_fin_inf_append2)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "have sg3a:\"Suc 0 \\<le> d + 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> d + 2", "by arith"], ["proof (state)\nthis:\n  Suc 0 \\<le> d + 2\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from h1 and sg3a"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d + 2. lose (t + j) = [False]\n  Suc 0 \\<le> d + 2", "have sg3:\"lose (t + Suc 0) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d + 2. lose (t + j) = [False]\n  Suc 0 \\<le> d + 2\n\ngoal (1 subgoal):\n 1. lose (t + Suc 0) = [False]", "by auto"], ["proof (state)\nthis:\n  lose (t + Suc 0) = [False]\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from sg2 and sg3 and reqNsend and tbl"], ["proof (chain)\npicking this:\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n  lose (t + Suc 0) = [False]\n  req (Suc t) \\<noteq> [send]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st", "show ?thesis"], ["proof (prove)\nusing this:\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n  lose (t + Suc 0) = [False]\n  req (Suc t) \\<noteq> [send]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) b ack i1\n   vc st\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  ack (Suc t) = [connection_ok]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Gateway_L7a:\n  assumes gw:\"Gateway req dt a stop lose d ack i vc\"\n      and aMsg1:\"msg (Suc 0) a\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and reqMsg1:\"msg (Suc 0) req\"\n      and tsLose:\"ts lose\"\n      and loseFalse:\"\\<forall>j\\<le> d + 2. lose (t + j) = [False]\"\n      and nsend:\"req (Suc t) \\<noteq> [send]\"\n      and ackNCon:\"ack (t) = [connection_ok]\"\n  shows \"ack (Suc t) = [connection_ok]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from gw and stopMsg1 and reqMsg1 and nsend"], ["proof (chain)\npicking this:\n  Gateway req dt a stop lose d ack i vc\n  msg (Suc 0) stop\n  msg (Suc 0) req\n  req (Suc t) \\<noteq> [send]", "obtain i1 i2 a1 a2 where \n    ah1:\"Sample req dt a1 stop lose ack i1 vc\" and\n    ah2:\"Delay a2 i1 d a1 i2\" and\n    ah3:\"Loss lose a i2 a2 i\""], ["proof (prove)\nusing this:\n  Gateway req dt a stop lose d ack i vc\n  msg (Suc 0) stop\n  msg (Suc 0) req\n  req (Suc t) \\<noteq> [send]\n\ngoal (1 subgoal):\n 1. (\\<And>a1 i1 a2 i2.\n        \\<lbrakk>Sample req dt a1 stop lose ack i1 vc; Delay a2 i1 d a1 i2;\n         Loss lose a i2 a2 i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp add: Gateway_def, auto)"], ["proof (state)\nthis:\n  Sample req dt a1 stop lose ack i1 vc\n  Delay a2 i1 d a1 i2\n  Loss lose a i2 a2 i\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from ah2 and ah3 and aMsg1"], ["proof (chain)\npicking this:\n  Delay a2 i1 d a1 i2\n  Loss lose a i2 a2 i\n  msg (Suc 0) a", "have sg1:\"msg (Suc 0) a1\""], ["proof (prove)\nusing this:\n  Delay a2 i1 d a1 i2\n  Loss lose a i2 a2 i\n  msg (Suc 0) a\n\ngoal (1 subgoal):\n 1. msg (Suc 0) a1", "by (simp add: Loss_Delay_msg_a)"], ["proof (state)\nthis:\n  msg (Suc 0) a1\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from ah1 and sg1 and stopMsg1 and reqMsg1"], ["proof (chain)\npicking this:\n  Sample req dt a1 stop lose ack i1 vc\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  msg (Suc 0) req", "obtain st buffer where\n    ah4:\"Sample_L req dt a1 stop lose (fin_inf_append [init_state] st) \n             (fin_inf_append [[]] buffer)\n             ack i1 vc st buffer\""], ["proof (prove)\nusing this:\n  Sample req dt a1 stop lose ack i1 vc\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n  msg (Suc 0) req\n\ngoal (1 subgoal):\n 1. (\\<And>st buffer.\n        Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st buffer \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: Sample_def, auto)"], ["proof (state)\nthis:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from ah4"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg2:\n    \"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n         (fin_inf_append [[]] buffer)\n         ack i1 vc st\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n     (fin_inf_append [[]] buffer) ack i1 vc st", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "from loseFalse and tsLose and stopMsg1 and sg1 and \n           nsend and ackNCon and sg2"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d + 2. lose (t + j) = [False]\n  ts lose\n  msg (Suc 0) stop\n  msg (Suc 0) a1\n  req (Suc t) \\<noteq> [send]\n  ack t = [connection_ok]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d + 2. lose (t + j) = [False]\n  ts lose\n  msg (Suc 0) stop\n  msg (Suc 0) a1\n  req (Suc t) \\<noteq> [send]\n  ack t = [connection_ok]\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n\ngoal (1 subgoal):\n 1. ack (Suc t) = [connection_ok]", "by (simp add: tiTable_ack_ok)"], ["proof (state)\nthis:\n  ack (Suc t) = [connection_ok]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sample_L_buffer:\n  assumes \n    \"Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n          (fin_inf_append [[]] buffer)\n           ack i1 vc st buffer\"\n  shows \"buffer t = inf_last_ti dt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. buffer t = inf_last_ti dt t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. buffer t = inf_last_ti dt t", "from assms"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have \n   \"\\<forall>t. buffer t = \n    (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer t = inf_last_ti dt t", "from this"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer t = inf_last_ti dt t", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>t.\n       buffer t =\n       (if dt t = [] then fin_inf_append [[]] buffer t\n        else dt t) \\<Longrightarrow>\n    buffer 0 = inf_last_ti dt 0\n 2. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "case 0"], ["proof (state)\nthis:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (2 subgoals):\n 1. \\<forall>t.\n       buffer t =\n       (if dt t = [] then fin_inf_append [[]] buffer t\n        else dt t) \\<Longrightarrow>\n    buffer 0 = inf_last_ti dt 0\n 2. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "from this"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer 0 = inf_last_ti dt 0", "by (simp add: fin_inf_append_def)"], ["proof (state)\nthis:\n  buffer 0 = inf_last_ti dt 0\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "fix t"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "case (Suc t)"], ["proof (state)\nthis:\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<forall>t.\n                   buffer t =\n                   (if dt t = [] then fin_inf_append [[]] buffer t\n                    else dt t) \\<Longrightarrow>\n                buffer t = inf_last_ti dt t;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "from this"], ["proof (chain)\npicking this:\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer (Suc t) = inf_last_ti dt (Suc t)", "proof (cases \"dt t = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t = []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)\n 2. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "assume \"dt t = []\""], ["proof (state)\nthis:\n  dt t = []\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t = []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)\n 2. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "from this and Suc"], ["proof (chain)\npicking this:\n  dt t = []\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  dt t = []\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer (Suc t) = inf_last_ti dt (Suc t)", "by (simp add: correct_fin_inf_append1)"], ["proof (state)\nthis:\n  buffer (Suc t) = inf_last_ti dt (Suc t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "assume \"dt t \\<noteq> []\""], ["proof (state)\nthis:\n  dt t \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>t.\n                buffer t =\n                (if dt t = [] then fin_inf_append [[]] buffer t\n                 else dt t) \\<Longrightarrow>\n             buffer t = inf_last_ti dt t;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t);\n     dt t \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> buffer (Suc t) = inf_last_ti dt (Suc t)", "from this and Suc"], ["proof (chain)\npicking this:\n  dt t \\<noteq> []\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  dt t \\<noteq> []\n  \\<forall>t.\n     buffer t =\n     (if dt t = [] then fin_inf_append [[]] buffer t\n      else dt t) \\<Longrightarrow>\n  buffer t = inf_last_ti dt t\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. buffer (Suc t) = inf_last_ti dt (Suc t)", "by (simp add: correct_fin_inf_append1)"], ["proof (state)\nthis:\n  buffer (Suc t) = inf_last_ti dt (Suc t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  buffer (Suc t) = inf_last_ti dt (Suc t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  buffer t = inf_last_ti dt t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma  tiTable_SampleT_i1_buffer:\n assumes \"ack t = [connection_ok]\"\n        and reqSend:\"req (Suc t) = [send]\" \n        and loseFalse:\"\\<forall>k\\<le>Suc d. lose (t + k) = [False]\" \n        and buf: \"buffer t = inf_last_ti dt t\"\n        and tbl:\"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n      (fin_inf_append [[]] buffer) ack\n      i1 vc st\"\n     and conOk:\"fin_inf_append [init_state] st (Suc t) = connection_ok\"\nshows \"i1 (Suc t) = inf_last_ti dt t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "have sg1:\"Suc 0 \\<le>Suc d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 \\<le> Suc d", "by arith"], ["proof (state)\nthis:\n  Suc 0 \\<le> Suc d\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "from loseFalse and sg1"], ["proof (chain)\npicking this:\n  \\<forall>k\\<le>Suc d. lose (t + k) = [False]\n  Suc 0 \\<le> Suc d", "have sg2:\"lose (Suc t) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>k\\<le>Suc d. lose (t + k) = [False]\n  Suc 0 \\<le> Suc d\n\ngoal (1 subgoal):\n 1. lose (Suc t) = [False]", "by auto"], ["proof (state)\nthis:\n  lose (Suc t) = [False]\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "from tbl"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st", "have\n   \"fin_inf_append [init_state] st (Suc t) = connection_ok \\<and> \n    req (Suc t) = [send] \\<and> \n    lose (Suc t) = [False] \\<longrightarrow>\n    ack (Suc t) = [sending_data] \\<and> \n    i1 (Suc t) = (fin_inf_append [[]] buffer) (Suc t) \\<and> \n    vc (Suc t) = [] \\<and> st (Suc t) = sending_data\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = connection_ok \\<and>\n    req (Suc t) = [send] \\<and> lose (Suc t) = [False] \\<longrightarrow>\n    ack (Suc t) = [sending_data] \\<and>\n    i1 (Suc t) = fin_inf_append [[]] buffer (Suc t) \\<and>\n    vc (Suc t) = [] \\<and> st (Suc t) = sending_data", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = connection_ok \\<and>\n  req (Suc t) = [send] \\<and> lose (Suc t) = [False] \\<longrightarrow>\n  ack (Suc t) = [sending_data] \\<and>\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t) \\<and>\n  vc (Suc t) = [] \\<and> st (Suc t) = sending_data\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "from this and conOk and reqSend and sg2"], ["proof (chain)\npicking this:\n  fin_inf_append [init_state] st (Suc t) = connection_ok \\<and>\n  req (Suc t) = [send] \\<and> lose (Suc t) = [False] \\<longrightarrow>\n  ack (Suc t) = [sending_data] \\<and>\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t) \\<and>\n  vc (Suc t) = [] \\<and> st (Suc t) = sending_data\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n  req (Suc t) = [send]\n  lose (Suc t) = [False]", "have \n   \"i1 (Suc t) = (fin_inf_append [[]] buffer) (Suc t)\""], ["proof (prove)\nusing this:\n  fin_inf_append [init_state] st (Suc t) = connection_ok \\<and>\n  req (Suc t) = [send] \\<and> lose (Suc t) = [False] \\<longrightarrow>\n  ack (Suc t) = [sending_data] \\<and>\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t) \\<and>\n  vc (Suc t) = [] \\<and> st (Suc t) = sending_data\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n  req (Suc t) = [send]\n  lose (Suc t) = [False]\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = fin_inf_append [[]] buffer (Suc t)", "by simp"], ["proof (state)\nthis:\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t)\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "from this and buf"], ["proof (chain)\npicking this:\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t)\n  buffer t = inf_last_ti dt t", "show ?thesis"], ["proof (prove)\nusing this:\n  i1 (Suc t) = fin_inf_append [[]] buffer (Suc t)\n  buffer t = inf_last_ti dt t\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "by (simp add: correct_fin_inf_append1)"], ["proof (state)\nthis:\n  i1 (Suc t) = inf_last_ti dt t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sample_L_i1_buffer:\n  assumes \"msg (Suc 0) req\"\n      and \"msg (Suc 0) a\"\n      and stopMsg1:\"msg (Suc 0) stop\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and tsLose:\"ts lose\"\n      and ackCon:\"ack t = [connection_ok]\"\n      and reqSend:\"req (Suc t) = [send]\"\n      and loseFalse:\"\\<forall>k\\<le>Suc d. lose (t + k) = [False]\"\n      and smpl:\"Sample_L req dt a1 stop lose \n                (fin_inf_append [init_state] st) \n                (fin_inf_append [[]] buffer) ack i1 vc st buffer\"\n  shows \"i1 (Suc t) =  buffer t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from smpl"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg1:\"buffer t = inf_last_ti dt t\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. buffer t = inf_last_ti dt t", "by (simp add: Sample_L_buffer)"], ["proof (state)\nthis:\n  buffer t = inf_last_ti dt t\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from smpl"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg2:\n    \"\\<forall>t. buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from smpl"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg3: \n    \"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n      (fin_inf_append [[]] buffer) ack\n      i1 vc st\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n     (fin_inf_append [[]] buffer) ack i1 vc st", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from sg3 and tsLose and a1Msg1 and stopMsg1"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop", "have sg4:\"st t =  hd (ack t)\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  ts lose\n  msg (Suc 0) a1\n  msg (Suc 0) stop\n\ngoal (1 subgoal):\n 1. st t = hd (ack t)", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from ackCon and sg4"], ["proof (chain)\npicking this:\n  ack t = [connection_ok]\n  st t = hd (ack t)", "have sg5:\n    \"(fin_inf_append [init_state] st) (Suc t) = connection_ok\""], ["proof (prove)\nusing this:\n  ack t = [connection_ok]\n  st t = hd (ack t)\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc t) = connection_ok", "by (simp add: correct_fin_inf_append1)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from ackCon and reqSend and loseFalse and sg1 and \n           sg3 and sg4 and sg5"], ["proof (chain)\npicking this:\n  ack t = [connection_ok]\n  req (Suc t) = [send]\n  \\<forall>k\\<le>Suc d. lose (t + k) = [False]\n  buffer t = inf_last_ti dt t\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = connection_ok", "have sg6:\n    \"i1 (Suc t) = inf_last_ti dt t\""], ["proof (prove)\nusing this:\n  ack t = [connection_ok]\n  req (Suc t) = [send]\n  \\<forall>k\\<le>Suc d. lose (t + k) = [False]\n  buffer t = inf_last_ti dt t\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  st t = hd (ack t)\n  fin_inf_append [init_state] st (Suc t) = connection_ok\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = inf_last_ti dt t", "by (simp add: tiTable_SampleT_i1_buffer)"], ["proof (state)\nthis:\n  i1 (Suc t) = inf_last_ti dt t\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "from this and sg1"], ["proof (chain)\npicking this:\n  i1 (Suc t) = inf_last_ti dt t\n  buffer t = inf_last_ti dt t", "show ?thesis"], ["proof (prove)\nusing this:\n  i1 (Suc t) = inf_last_ti dt t\n  buffer t = inf_last_ti dt t\n\ngoal (1 subgoal):\n 1. i1 (Suc t) = buffer t", "by simp"], ["proof (state)\nthis:\n  i1 (Suc t) = buffer t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tiTable_SampleT_sending_data:\n  assumes tbl: \"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n         (fin_inf_append [[]] buffer)\n         ack i1 vc st\"\n      and loseFalse:\"\\<forall>j\\<le>2 * d. lose (t + j) = [False]\"\n      and a1e:\"\\<forall>t4\\<le>t + d + d. a1 t4 = []\"\n      and snd:\"fin_inf_append [init_state] st (Suc (t + x)) = sending_data\"\n      and h6:\"Suc (t + x) \\<le> 2 * d + t\"\n  shows \"ack (Suc (t + x)) = [sending_data]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "from h6"], ["proof (chain)\npicking this:\n  Suc (t + x) \\<le> 2 * d + t", "have \"Suc x \\<le> 2 * d\""], ["proof (prove)\nusing this:\n  Suc (t + x) \\<le> 2 * d + t\n\ngoal (1 subgoal):\n 1. Suc x \\<le> 2 * d", "by arith"], ["proof (state)\nthis:\n  Suc x \\<le> 2 * d\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "from this and loseFalse"], ["proof (chain)\npicking this:\n  Suc x \\<le> 2 * d\n  \\<forall>j\\<le>2 * d. lose (t + j) = [False]", "have sg1:\"lose (t + Suc x) = [False]\""], ["proof (prove)\nusing this:\n  Suc x \\<le> 2 * d\n  \\<forall>j\\<le>2 * d. lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. lose (t + Suc x) = [False]", "by auto"], ["proof (state)\nthis:\n  lose (t + Suc x) = [False]\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "from h6"], ["proof (chain)\npicking this:\n  Suc (t + x) \\<le> 2 * d + t", "have \"Suc (t + x) \\<le>t + d + d\""], ["proof (prove)\nusing this:\n  Suc (t + x) \\<le> 2 * d + t\n\ngoal (1 subgoal):\n 1. Suc (t + x) \\<le> t + d + d", "by arith"], ["proof (state)\nthis:\n  Suc (t + x) \\<le> t + d + d\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "from this and a1e"], ["proof (chain)\npicking this:\n  Suc (t + x) \\<le> t + d + d\n  \\<forall>t4\\<le>t + d + d. a1 t4 = []", "have sg2:\"a1 (Suc (t + x)) = []\""], ["proof (prove)\nusing this:\n  Suc (t + x) \\<le> t + d + d\n  \\<forall>t4\\<le>t + d + d. a1 t4 = []\n\ngoal (1 subgoal):\n 1. a1 (Suc (t + x)) = []", "by auto"], ["proof (state)\nthis:\n  a1 (Suc (t + x)) = []\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "from tbl and sg1 and sg2 and snd"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  lose (t + Suc x) = [False]\n  a1 (Suc (t + x)) = []\n  fin_inf_append [init_state] st (Suc (t + x)) = sending_data", "show ?thesis"], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  lose (t + Suc x) = [False]\n  a1 (Suc (t + x)) = []\n  fin_inf_append [init_state] st (Suc (t + x)) = sending_data\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "by (simp add: tiTable_SampleT_def)"], ["proof (state)\nthis:\n  ack (Suc (t + x)) = [sending_data]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Sample_sending_data:\n  assumes stopMsg1:\"msg (Suc 0) stop\"\n      and tsLose:\"ts lose\"\n      and reqMsg1:\"msg (Suc 0) req\"\n      and a1Msg1:\"msg (Suc 0) a1\"\n      and loseFalse:\"\\<forall>j\\<le>2 * d. lose (t + j) = [False]\"\n      and ackSnd:\"ack t = [sending_data]\"\n      and smpl:\"Sample req dt a1 stop lose ack i1 vc\"\n      and xdd:\"x \\<le> d + d\"\n      and h9:\"\\<forall>t4 \\<le> t + d + d. a1 t4 = []\"\n shows \"ack (t + x) = [sending_data]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ack (t + x) = [sending_data]", "using assms"], ["proof (prove)\nusing this:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) req\n  msg (Suc 0) a1\n  \\<forall>j\\<le>2 * d. lose (t + j) = [False]\n  ack t = [sending_data]\n  Sample req dt a1 stop lose ack i1 vc\n  x \\<le> d + d\n  \\<forall>t4\\<le>t + d + d. a1 t4 = []\n\ngoal (1 subgoal):\n 1. ack (t + x) = [sending_data]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) req; msg (Suc 0) a1;\n     \\<forall>j\\<le>2 * d. lose (t + j) = [False]; ack t = [sending_data];\n     Sample req dt a1 stop lose ack i1 vc; x \\<le> d + d;\n     \\<forall>t4\\<le>t + d + d. a1 t4 = []\\<rbrakk>\n    \\<Longrightarrow> ack (t + x) = [sending_data]", "from stopMsg1 and reqMsg1 and a1Msg1 and smpl"], ["proof (chain)\npicking this:\n  msg (Suc 0) stop\n  msg (Suc 0) req\n  msg (Suc 0) a1\n  Sample req dt a1 stop lose ack i1 vc", "obtain st buffer where a1: \n   \"Sample_L req dt a1 stop lose (fin_inf_append [init_state] st) \n             (fin_inf_append [[]] buffer) ack\n             i1 vc st buffer\""], ["proof (prove)\nusing this:\n  msg (Suc 0) stop\n  msg (Suc 0) req\n  msg (Suc 0) a1\n  Sample req dt a1 stop lose ack i1 vc\n\ngoal (1 subgoal):\n 1. (\\<And>st buffer.\n        Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st buffer \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (simp add: Sample_def, auto)"], ["proof (state)\nthis:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) req; msg (Suc 0) a1;\n     \\<forall>j\\<le>2 * d. lose (t + j) = [False]; ack t = [sending_data];\n     Sample req dt a1 stop lose ack i1 vc; x \\<le> d + d;\n     \\<forall>t4\\<le>t + d + d. a1 t4 = []\\<rbrakk>\n    \\<Longrightarrow> ack (t + x) = [sending_data]", "from a1"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg1:\n    \"tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st) \n        (fin_inf_append [[]] buffer)\n         ack i1 vc st\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n     (fin_inf_append [[]] buffer) ack i1 vc st", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n\ngoal (1 subgoal):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) req; msg (Suc 0) a1;\n     \\<forall>j\\<le>2 * d. lose (t + j) = [False]; ack t = [sending_data];\n     Sample req dt a1 stop lose ack i1 vc; x \\<le> d + d;\n     \\<forall>t4\\<le>t + d + d. a1 t4 = []\\<rbrakk>\n    \\<Longrightarrow> ack (t + x) = [sending_data]", "from a1"], ["proof (chain)\npicking this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer", "have sg2:\n    \"\\<forall>t. buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\""], ["proof (prove)\nusing this:\n  Sample_L req dt a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st buffer\n\ngoal (1 subgoal):\n 1. \\<forall>t.\n       buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "by (simp add: Sample_L_def)"], ["proof (state)\nthis:\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) req; msg (Suc 0) a1;\n     \\<forall>j\\<le>2 * d. lose (t + j) = [False]; ack t = [sending_data];\n     Sample req dt a1 stop lose ack i1 vc; x \\<le> d + d;\n     \\<forall>t4\\<le>t + d + d. a1 t4 = []\\<rbrakk>\n    \\<Longrightarrow> ack (t + x) = [sending_data]", "from stopMsg1 and tsLose and a1Msg1 and ackSnd and xdd and sg1 and sg2"], ["proof (chain)\npicking this:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?thesis"], ["proof (prove)\nusing this:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. ack (t + x) = [sending_data]", "proof (induct \"x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n     ack t = [sending_data]; 0 \\<le> d + d;\n     tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n      (fin_inf_append [[]] buffer) ack i1 vc st;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n    \\<Longrightarrow> ack (t + 0) = [sending_data]\n 2. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "case 0"], ["proof (state)\nthis:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  0 \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n     ack t = [sending_data]; 0 \\<le> d + d;\n     tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n      (fin_inf_append [[]] buffer) ack i1 vc st;\n     \\<forall>t.\n        buffer t =\n        (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n    \\<Longrightarrow> ack (t + 0) = [sending_data]\n 2. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from this"], ["proof (chain)\npicking this:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  0 \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "show ?case"], ["proof (prove)\nusing this:\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  0 \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. ack (t + 0) = [sending_data]", "by simp"], ["proof (state)\nthis:\n  ack (t + 0) = [sending_data]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "case (Suc x)"], ["proof (state)\nthis:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "have sg3:\"st (t + x) = hd (ack (t + x))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. st (t + x) = hd (ack (t + x))", "by (simp add: tiTable_ack_st_hd)"], ["proof (state)\nthis:\n  st (t + x) = hd (ack (t + x))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "have sg4:\"x \\<le> d + d\""], ["proof (prove)\nusing this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. x \\<le> d + d", "by arith"], ["proof (state)\nthis:\n  x \\<le> d + d\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from Suc and sg3 and sg4"], ["proof (chain)\npicking this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n  st (t + x) = hd (ack (t + x))\n  x \\<le> d + d", "have sg5:  \n     \"(fin_inf_append [init_state] st) (Suc (t + x)) = sending_data\""], ["proof (prove)\nusing this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n  st (t + x) = hd (ack (t + x))\n  x \\<le> d + d\n\ngoal (1 subgoal):\n 1. fin_inf_append [init_state] st (Suc (t + x)) = sending_data", "by (simp add: fin_inf_append_def)"], ["proof (state)\nthis:\n  fin_inf_append [init_state] st (Suc (t + x)) = sending_data\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "have sg6:\"Suc (t + x) \\<le> 2 * d + t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. Suc (t + x) \\<le> 2 * d + t", "by simp"], ["proof (state)\nthis:\n  Suc (t + x) \\<le> 2 * d + t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)", "have sg7:\"ack (t + x) = [sending_data]\""], ["proof (prove)\nusing this:\n  \\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n   ack t = [sending_data]; x \\<le> d + d;\n   tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n    (fin_inf_append [[]] buffer) ack i1 vc st;\n   \\<forall>t.\n      buffer t =\n      (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\\<rbrakk>\n  \\<Longrightarrow> ack (t + x) = [sending_data]\n  msg (Suc 0) stop\n  ts lose\n  msg (Suc 0) a1\n  ack t = [sending_data]\n  Suc x \\<le> d + d\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>t.\n     buffer t = (if dt t = [] then fin_inf_append [[]] buffer t else dt t)\n\ngoal (1 subgoal):\n 1. ack (t + x) = [sending_data]", "by simp"], ["proof (state)\nthis:\n  ack (t + x) = [sending_data]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from sg1 and loseFalse and h9 and sg7 and sg5 and sg6"], ["proof (chain)\npicking this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>j\\<le>2 * d. lose (t + j) = [False]\n  \\<forall>t4\\<le>t + d + d. a1 t4 = []\n  ack (t + x) = [sending_data]\n  fin_inf_append [init_state] st (Suc (t + x)) = sending_data\n  Suc (t + x) \\<le> 2 * d + t", "have sg7:\n     \"ack (Suc (t + x)) = [sending_data]\""], ["proof (prove)\nusing this:\n  tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n   (fin_inf_append [[]] buffer) ack i1 vc st\n  \\<forall>j\\<le>2 * d. lose (t + j) = [False]\n  \\<forall>t4\\<le>t + d + d. a1 t4 = []\n  ack (t + x) = [sending_data]\n  fin_inf_append [init_state] st (Suc (t + x)) = sending_data\n  Suc (t + x) \\<le> 2 * d + t\n\ngoal (1 subgoal):\n 1. ack (Suc (t + x)) = [sending_data]", "by (simp add: tiTable_SampleT_sending_data)"], ["proof (state)\nthis:\n  ack (Suc (t + x)) = [sending_data]\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<lbrakk>msg (Suc 0) stop; ts lose; msg (Suc 0) a1;\n                 ack t = [sending_data]; x \\<le> d + d;\n                 tiTable_SampleT req a1 stop lose\n                  (fin_inf_append [init_state] st)\n                  (fin_inf_append [[]] buffer) ack i1 vc st;\n                 \\<forall>t.\n                    buffer t =\n                    (if dt t = [] then fin_inf_append [[]] buffer t\n                     else dt t)\\<rbrakk>\n                \\<Longrightarrow> ack (t + x) = [sending_data];\n        msg (Suc 0) stop; ts lose; msg (Suc 0) a1; ack t = [sending_data];\n        Suc x \\<le> d + d;\n        tiTable_SampleT req a1 stop lose (fin_inf_append [init_state] st)\n         (fin_inf_append [[]] buffer) ack i1 vc st;\n        \\<forall>t.\n           buffer t =\n           (if dt t = [] then fin_inf_append [[]] buffer t\n            else dt t)\\<rbrakk>\n       \\<Longrightarrow> ack (t + Suc x) = [sending_data]", "from this"], ["proof (chain)\npicking this:\n  ack (Suc (t + x)) = [sending_data]", "show ?case"], ["proof (prove)\nusing this:\n  ack (Suc (t + x)) = [sending_data]\n\ngoal (1 subgoal):\n 1. ack (t + Suc x) = [sending_data]", "by simp"], ["proof (state)\nthis:\n  ack (t + Suc x) = [sending_data]\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ack (t + x) = [sending_data]\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Properties of the ServiceCenter component\\<close>"], ["", "lemma ServiceCenter_a_l:\n  assumes \"ServiceCenter i a\"\n  shows    \"length (a t) \\<le> (Suc 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (a t) \\<le> Suc 0", "proof (cases \"t\")"], ["proof (state)\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow> length (a t) \\<le> Suc 0\n 2. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "case 0"], ["proof (state)\nthis:\n  t = 0\n\ngoal (2 subgoals):\n 1. t = 0 \\<Longrightarrow> length (a t) \\<le> Suc 0\n 2. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "from this and assms"], ["proof (chain)\npicking this:\n  t = 0\n  ServiceCenter i a", "show ?thesis"], ["proof (prove)\nusing this:\n  t = 0\n  ServiceCenter i a\n\ngoal (1 subgoal):\n 1. length (a t) \\<le> Suc 0", "by (simp add: ServiceCenter_def)"], ["proof (state)\nthis:\n  length (a t) \\<le> Suc 0\n\ngoal (1 subgoal):\n 1. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "assume \"t = Suc m\""], ["proof (state)\nthis:\n  t = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat. t = Suc nat \\<Longrightarrow> length (a t) \\<le> Suc 0", "from this and assms"], ["proof (chain)\npicking this:\n  t = Suc m\n  ServiceCenter i a", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Suc m\n  ServiceCenter i a\n\ngoal (1 subgoal):\n 1. length (a t) \\<le> Suc 0", "by (simp add: ServiceCenter_def)"], ["proof (state)\nthis:\n  length (a t) \\<le> Suc 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ServiceCenter_a_msg:\n  assumes \"ServiceCenter i a\"\n  shows    \"msg (Suc 0) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msg (Suc 0) a", "using assms"], ["proof (prove)\nusing this:\n  ServiceCenter i a\n\ngoal (1 subgoal):\n 1. msg (Suc 0) a", "by (simp add: msg_def ServiceCenter_a_l)"], ["", "lemma ServiceCenter_L1:\nassumes \"\\<forall> t2 < x. i t2 = []\"\n       and \"ServiceCenter i a\"\n       and \"t \\<le> x\"\nshows \"a t = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a t = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  t \\<le> x\n\ngoal (1 subgoal):\n 1. a t = []", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a; 0 \\<le> x\\<rbrakk>\n    \\<Longrightarrow> a 0 = []\n 2. \\<And>t.\n       \\<lbrakk>\\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a;\n                 t \\<le> x\\<rbrakk>\n                \\<Longrightarrow> a t = [];\n        \\<forall>t2<x. i t2 = []; ServiceCenter i a; Suc t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> a (Suc t) = []", "case 0"], ["proof (state)\nthis:\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  0 \\<le> x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a; 0 \\<le> x\\<rbrakk>\n    \\<Longrightarrow> a 0 = []\n 2. \\<And>t.\n       \\<lbrakk>\\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a;\n                 t \\<le> x\\<rbrakk>\n                \\<Longrightarrow> a t = [];\n        \\<forall>t2<x. i t2 = []; ServiceCenter i a; Suc t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> a (Suc t) = []", "from this"], ["proof (chain)\npicking this:\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  0 \\<le> x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  0 \\<le> x\n\ngoal (1 subgoal):\n 1. a 0 = []", "by (simp add: ServiceCenter_def)"], ["proof (state)\nthis:\n  a 0 = []\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a;\n                 t \\<le> x\\<rbrakk>\n                \\<Longrightarrow> a t = [];\n        \\<forall>t2<x. i t2 = []; ServiceCenter i a; Suc t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> a (Suc t) = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a;\n                 t \\<le> x\\<rbrakk>\n                \\<Longrightarrow> a t = [];\n        \\<forall>t2<x. i t2 = []; ServiceCenter i a; Suc t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> a (Suc t) = []", "case (Suc t)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a; t \\<le> x\\<rbrakk>\n  \\<Longrightarrow> a t = []\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  Suc t \\<le> x\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       \\<lbrakk>\\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a;\n                 t \\<le> x\\<rbrakk>\n                \\<Longrightarrow> a t = [];\n        \\<forall>t2<x. i t2 = []; ServiceCenter i a; Suc t \\<le> x\\<rbrakk>\n       \\<Longrightarrow> a (Suc t) = []", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a; t \\<le> x\\<rbrakk>\n  \\<Longrightarrow> a t = []\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  Suc t \\<le> x", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>t2<x. i t2 = []; ServiceCenter i a; t \\<le> x\\<rbrakk>\n  \\<Longrightarrow> a t = []\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n  Suc t \\<le> x\n\ngoal (1 subgoal):\n 1. a (Suc t) = []", "by (simp add: ServiceCenter_def)"], ["proof (state)\nthis:\n  a (Suc t) = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ServiceCenter_L2:\nassumes \"\\<forall> t2 < x. i t2 = []\"\n       and \"ServiceCenter i a\"\nshows \"\\<forall> t3 \\<le> x. a t3 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>t3\\<le>x. a t3 = []", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>t2<x. i t2 = []\n  ServiceCenter i a\n\ngoal (1 subgoal):\n 1. \\<forall>t3\\<le>x. a t3 = []", "by (clarify, simp add: ServiceCenter_L1)"], ["", "subsection \\<open>General properties of stream values\\<close>"], ["", "lemma streamValue1: \nassumes h1:\"\\<forall>j\\<le> D + (z::nat). str (t + j) = x\"\n       and h2: \"j\\<le> D\"\nshows      \"str (t + j + z) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. str (t + j + z) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. str (t + j + z) = x", "from h2"], ["proof (chain)\npicking this:\n  j \\<le> D", "have sg1:\" j + z \\<le> D + z\""], ["proof (prove)\nusing this:\n  j \\<le> D\n\ngoal (1 subgoal):\n 1. j + z \\<le> D + z", "by arith"], ["proof (state)\nthis:\n  j + z \\<le> D + z\n\ngoal (1 subgoal):\n 1. str (t + j + z) = x", "have sg2:\"t + j + z = t + (j + z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t + j + z = t + (j + z)", "by arith"], ["proof (state)\nthis:\n  t + j + z = t + (j + z)\n\ngoal (1 subgoal):\n 1. str (t + j + z) = x", "from h1 and sg1 and sg2"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>D + z. str (t + j) = x\n  j + z \\<le> D + z\n  t + j + z = t + (j + z)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D + z. str (t + j) = x\n  j + z \\<le> D + z\n  t + j + z = t + (j + z)\n\ngoal (1 subgoal):\n 1. str (t + j + z) = x", "by (simp (no_asm_simp))"], ["proof (state)\nthis:\n  str (t + j + z) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma streamValue2:\n  assumes \"\\<forall>j\\<le> D + (z::nat). str (t + j) = x\"\n  shows    \"\\<forall>j\\<le> D. str (t + j + z) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + j + z) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D + z. str (t + j) = x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + j + z) = x", "by (clarify, simp add: streamValue1)"], ["", "lemma streamValue3:\nassumes \"\\<forall>j\\<le> D. str (t + j + (Suc y)) = x\"\n        and \"j \\<le> D\"\n        and h3:\"str (t + y) = x\"\n    shows    \"str (t + j + y) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. str (t + j + y) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  j \\<le> D\n  str (t + y) = x\n\ngoal (1 subgoal):\n 1. str (t + j + y) = x", "proof (induct j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x; 0 \\<le> D;\n     str (t + y) = x\\<rbrakk>\n    \\<Longrightarrow> str (t + 0 + y) = x\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x;\n                 j \\<le> D; str (t + y) = x\\<rbrakk>\n                \\<Longrightarrow> str (t + j + y) = x;\n        \\<forall>j\\<le>D. str (t + j + Suc y) = x; Suc j \\<le> D;\n        str (t + y) = x\\<rbrakk>\n       \\<Longrightarrow> str (t + Suc j + y) = x", "case 0"], ["proof (state)\nthis:\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  0 \\<le> D\n  str (t + y) = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x; 0 \\<le> D;\n     str (t + y) = x\\<rbrakk>\n    \\<Longrightarrow> str (t + 0 + y) = x\n 2. \\<And>j.\n       \\<lbrakk>\\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x;\n                 j \\<le> D; str (t + y) = x\\<rbrakk>\n                \\<Longrightarrow> str (t + j + y) = x;\n        \\<forall>j\\<le>D. str (t + j + Suc y) = x; Suc j \\<le> D;\n        str (t + y) = x\\<rbrakk>\n       \\<Longrightarrow> str (t + Suc j + y) = x", "from h3"], ["proof (chain)\npicking this:\n  str (t + y) = x", "show ?case"], ["proof (prove)\nusing this:\n  str (t + y) = x\n\ngoal (1 subgoal):\n 1. str (t + 0 + y) = x", "by simp"], ["proof (state)\nthis:\n  str (t + 0 + y) = x\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x;\n                 j \\<le> D; str (t + y) = x\\<rbrakk>\n                \\<Longrightarrow> str (t + j + y) = x;\n        \\<forall>j\\<le>D. str (t + j + Suc y) = x; Suc j \\<le> D;\n        str (t + y) = x\\<rbrakk>\n       \\<Longrightarrow> str (t + Suc j + y) = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x;\n                 j \\<le> D; str (t + y) = x\\<rbrakk>\n                \\<Longrightarrow> str (t + j + y) = x;\n        \\<forall>j\\<le>D. str (t + j + Suc y) = x; Suc j \\<le> D;\n        str (t + y) = x\\<rbrakk>\n       \\<Longrightarrow> str (t + Suc j + y) = x", "case (Suc j)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x; j \\<le> D;\n   str (t + y) = x\\<rbrakk>\n  \\<Longrightarrow> str (t + j + y) = x\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  Suc j \\<le> D\n  str (t + y) = x\n\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x;\n                 j \\<le> D; str (t + y) = x\\<rbrakk>\n                \\<Longrightarrow> str (t + j + y) = x;\n        \\<forall>j\\<le>D. str (t + j + Suc y) = x; Suc j \\<le> D;\n        str (t + y) = x\\<rbrakk>\n       \\<Longrightarrow> str (t + Suc j + y) = x", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x; j \\<le> D;\n   str (t + y) = x\\<rbrakk>\n  \\<Longrightarrow> str (t + j + y) = x\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  Suc j \\<le> D\n  str (t + y) = x", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>j\\<le>D. str (t + j + Suc y) = x; j \\<le> D;\n   str (t + y) = x\\<rbrakk>\n  \\<Longrightarrow> str (t + j + y) = x\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  Suc j \\<le> D\n  str (t + y) = x\n\ngoal (1 subgoal):\n 1. str (t + Suc j + y) = x", "by auto"], ["proof (state)\nthis:\n  str (t + Suc j + y) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma streamValue4:\nassumes \"\\<forall>j\\<le> D. str (t + j + (Suc y)) = x\"\n       and \"str (t + y) = x\"\nshows     \"\\<forall>j\\<le> D. str (t + j + y) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + j + y) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D. str (t + j + Suc y) = x\n  str (t + y) = x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + j + y) = x", "by (clarify, hypsubst_thin, simp add: streamValue3)"], ["", "lemma streamValue5:\nassumes \"\\<forall>j\\<le> D. str (t + j + ((i::nat) + k)) = x\"\n       and \"j\\<le> D\"\nshows      \"str (t + i + k + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. str (t + i + k + j) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D. str (t + j + (i + k)) = x\n  j \\<le> D\n\ngoal (1 subgoal):\n 1. str (t + i + k + j) = x", "by (metis add.commute add.left_commute)"], ["", "lemma streamValue6:\n  assumes \"\\<forall>j\\<le> D. str (t + j + ((i::nat) + k)) = x\"\n  shows     \"\\<forall>j\\<le> D. str (t + (i::nat) + k + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + i + k + j) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>D. str (t + j + (i + k)) = x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>D. str (t + i + k + j) = x", "by (clarify, simp add: streamValue5)"], ["", "lemma streamValue7:\n  assumes h1:\"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\"\n      and h2:\"str (t + i + k + d) = x\"\n      and h3:\"j\\<le> Suc d\"\n  shows      \"str (t + i + k + d + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "from h1"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x", "have sg1:\"str (t + i + k + d + Suc d) = x\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc d) = x", "by (simp (no_asm_simp), simp)"], ["proof (state)\nthis:\n  str (t + i + k + d + Suc d) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "from assms"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  str (t + i + k + d) = x\n  j \\<le> Suc d", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  str (t + i + k + d) = x\n  j \\<le> Suc d\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "proof (cases \"j = Suc d\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j = Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "assume a1:\"j = Suc d\""], ["proof (state)\nthis:\n  j = Suc d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j = Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from a1 and sg1"], ["proof (chain)\npicking this:\n  j = Suc d\n  str (t + i + k + d + Suc d) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  j = Suc d\n  str (t + i + k + d + Suc d) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "by simp"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "assume a2:\"j \\<noteq> Suc d\""], ["proof (state)\nthis:\n  j \\<noteq> Suc d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from a2 and h3"], ["proof (chain)\npicking this:\n  j \\<noteq> Suc d\n  j \\<le> Suc d", "have sg2:\"j\\<le>d\""], ["proof (prove)\nusing this:\n  j \\<noteq> Suc d\n  j \\<le> Suc d\n\ngoal (1 subgoal):\n 1. j \\<le> d", "by auto"], ["proof (state)\nthis:\n  j \\<le> d\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<noteq> Suc d\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from assms and sg2"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  str (t + i + k + d) = x\n  j \\<le> Suc d\n  j \\<le> d", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  str (t + i + k + d) = x\n  j \\<le> Suc d\n  j \\<le> d\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "proof (cases \"j > 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d; 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "assume a3:\"0 < j\""], ["proof (state)\nthis:\n  0 < j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d; 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from a3 and h3"], ["proof (chain)\npicking this:\n  0 < j\n  j \\<le> Suc d", "have sg3:\"j - (1::nat) \\<le> d\""], ["proof (prove)\nusing this:\n  0 < j\n  j \\<le> Suc d\n\ngoal (1 subgoal):\n 1. j - 1 \\<le> d", "by simp"], ["proof (state)\nthis:\n  j - 1 \\<le> d\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d; 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from a3"], ["proof (chain)\npicking this:\n  0 < j", "have sg4:\"Suc (j - (1::nat)) = j\""], ["proof (prove)\nusing this:\n  0 < j\n\ngoal (1 subgoal):\n 1. Suc (j - 1) = j", "by arith"], ["proof (state)\nthis:\n  Suc (j - 1) = j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d; 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from sg3 and h1 and sg4"], ["proof (chain)\npicking this:\n  j - 1 \\<le> d\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  Suc (j - 1) = j", "have sg5:\"str (t + i + k + d + j) = x\""], ["proof (prove)\nusing this:\n  j - 1 \\<le> d\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  Suc (j - 1) = j\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "by auto"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d; 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x\n 2. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from sg5"], ["proof (chain)\npicking this:\n  str (t + i + k + d + j) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  str (t + i + k + d + j) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "by simp"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "assume a4:\"\\<not> 0 < j\""], ["proof (state)\nthis:\n  \\<not> 0 < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from a4"], ["proof (chain)\npicking this:\n  \\<not> 0 < j", "have sg6:\"j = 0\""], ["proof (prove)\nusing this:\n  \\<not> 0 < j\n\ngoal (1 subgoal):\n 1. j = 0", "by simp"], ["proof (state)\nthis:\n  j = 0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x;\n     str (t + i + k + d) = x; j \\<le> Suc d; j \\<le> d;\n     \\<not> 0 < j\\<rbrakk>\n    \\<Longrightarrow> str (t + i + k + d + j) = x", "from h2 and sg6"], ["proof (chain)\npicking this:\n  str (t + i + k + d) = x\n  j = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  str (t + i + k + d) = x\n  j = 0\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + j) = x", "by simp"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  str (t + i + k + d + j) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma streamValue8:\nassumes \"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\"\n       and \"str (t + i + k + d) = x\" \nshows \"\\<forall> j\\<le> Suc d. str (t + i + k + d + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>Suc d. str (t + i + k + d + j) = x", "using assms streamValue7"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\n  str (t + i + k + d) = x\n  \\<lbrakk>\\<forall>j\\<le>?d. ?str (?t + ?i + ?k + ?d + Suc j) = ?x;\n   ?str (?t + ?i + ?k + ?d) = ?x; ?j \\<le> Suc ?d\\<rbrakk>\n  \\<Longrightarrow> ?str (?t + ?i + ?k + ?d + ?j) = ?x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>Suc d. str (t + i + k + d + j) = x", "by metis"], ["", "lemma arith_streamValue9aux:\n\"Suc (t + (j + d) + (i + k)) =  Suc (t + i + k + d + j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (t + (j + d) + (i + k)) = Suc (t + i + k + d + j)", "by arith"], ["", "lemma streamValue9:\nassumes h1:\"\\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\"\n       and h2:\"j\\<le>d\"\nshows      \"str (t + i + k + d + Suc j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc j) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc j) = x", "from h2"], ["proof (chain)\npicking this:\n  j \\<le> d", "have \"(j+d) \\<le>2 * d\""], ["proof (prove)\nusing this:\n  j \\<le> d\n\ngoal (1 subgoal):\n 1. j + d \\<le> 2 * d", "by arith"], ["proof (state)\nthis:\n  j + d \\<le> 2 * d\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc j) = x", "from h1 and this"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\n  j + d \\<le> 2 * d", "have \"str (t + (j + d) + Suc (i + k)) = x\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\n  j + d \\<le> 2 * d\n\ngoal (1 subgoal):\n 1. str (t + (j + d) + Suc (i + k)) = x", "by auto"], ["proof (state)\nthis:\n  str (t + (j + d) + Suc (i + k)) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc j) = x", "from this"], ["proof (chain)\npicking this:\n  str (t + (j + d) + Suc (i + k)) = x", "show ?thesis"], ["proof (prove)\nusing this:\n  str (t + (j + d) + Suc (i + k)) = x\n\ngoal (1 subgoal):\n 1. str (t + i + k + d + Suc j) = x", "by (simp add: arith_streamValue9aux)"], ["proof (state)\nthis:\n  str (t + i + k + d + Suc j) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma streamValue10:\n  assumes \"\\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\"\n  shows    \"\\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>d. str (t + i + k + d + Suc j) = x", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<forall>j\\<le>2 * d. str (t + j + Suc (i + k)) = x;\n        j \\<le> d\\<rbrakk>\n       \\<Longrightarrow> str (t + i + k + d + Suc j) = x", "by (rule streamValue9, auto)"], ["", "lemma arith_sum1:\"(t::nat) + (i + k + d) =  t + i + k + d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t + (i + k + d) = t + i + k + d", "by arith"], ["", "lemma arith_sum2:\"Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))", "by arith"], ["", "lemma arith_sum4:\"t + 3 + k + d = Suc (t + (2::nat) + k + d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t + 3 + k + d = Suc (t + 2 + k + d)", "by arith"], ["", "lemma streamValue11:\nassumes h1:\"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\"\n       and h2:\"j\\<le>Suc d\"\nshows      \"lose (t + 2 + k + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "from h2"], ["proof (chain)\npicking this:\n  j \\<le> Suc d", "have sg1:\"2 + k + j \\<le>2 * d + (4 + k)\""], ["proof (prove)\nusing this:\n  j \\<le> Suc d\n\ngoal (1 subgoal):\n 1. 2 + k + j \\<le> 2 * d + (4 + k)", "by arith"], ["proof (state)\nthis:\n  2 + k + j \\<le> 2 * d + (4 + k)\n\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "have sg2:\"Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))", "by arith"], ["proof (state)\nthis:\n  Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))\n\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "from sg1 and h1"], ["proof (chain)\npicking this:\n  2 + k + j \\<le> 2 * d + (4 + k)\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x", "have \"lose (t + (2 + k + j)) = x\""], ["proof (prove)\nusing this:\n  2 + k + j \\<le> 2 * d + (4 + k)\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\n\ngoal (1 subgoal):\n 1. lose (t + (2 + k + j)) = x", "by blast"], ["proof (state)\nthis:\n  lose (t + (2 + k + j)) = x\n\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "from this and sg2"], ["proof (chain)\npicking this:\n  lose (t + (2 + k + j)) = x\n  Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))", "show ?thesis"], ["proof (prove)\nusing this:\n  lose (t + (2 + k + j)) = x\n  Suc (Suc (t + k + j)) = Suc (Suc (t + (k + j)))\n\ngoal (1 subgoal):\n 1. lose (t + 2 + k + j) = x", "by (simp add: arith_sum2)"], ["proof (state)\nthis:\n  lose (t + 2 + k + j) = x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma streamValue12:\n assumes  \"\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\"\n shows     \"\\<forall>j\\<le>Suc d. lose (t + 2 + k + j) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>Suc d. lose (t + 2 + k + j) = x", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>Suc d. lose (t + 2 + k + j) = x", "apply clarify"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>j.\n       \\<lbrakk>\\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = x;\n        j \\<le> Suc d\\<rbrakk>\n       \\<Longrightarrow> lose (t + 2 + k + j) = x", "by (rule streamValue11, auto)"], ["", "lemma streamValue43:\n  assumes \"\\<forall>j\\<le>2 * d + ((4::nat) + k). lose (t + j) = [False]\"\n  shows    \"\\<forall>j\\<le>2 * d. lose ((t + (3::nat) + k) + j) = [False]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "from assms"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]", "have sg1:\"\\<forall>j\\<le>2 * d. lose (t + j + (4 + k)) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + j + (4 + k)) = [False]", "by (simp add: streamValue2)"], ["proof (state)\nthis:\n  \\<forall>j\\<le>2 * d. lose (t + j + (4 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "have sg2:\"Suc (3 + k) = (4 + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (3 + k) = 4 + k", "by arith"], ["proof (state)\nthis:\n  Suc (3 + k) = 4 + k\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "from sg1 and sg2"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d. lose (t + j + (4 + k)) = [False]\n  Suc (3 + k) = 4 + k", "have sg3:\"\\<forall>j\\<le>2 * d. lose (t + j + Suc (3 + k)) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d. lose (t + j + (4 + k)) = [False]\n  Suc (3 + k) = 4 + k\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + j + Suc (3 + k)) = [False]", "by (simp (no_asm_simp))"], ["proof (state)\nthis:\n  \\<forall>j\\<le>2 * d. lose (t + j + Suc (3 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "from assms"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]", "have sg4:\"lose (t + (3 + k)) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d + (4 + k). lose (t + j) = [False]\n\ngoal (1 subgoal):\n 1. lose (t + (3 + k)) = [False]", "by auto"], ["proof (state)\nthis:\n  lose (t + (3 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "from sg3 and sg4"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d. lose (t + j + Suc (3 + k)) = [False]\n  lose (t + (3 + k)) = [False]", "have sg5:\"\\<forall>j\\<le>2 * d. lose (t + j + (3 + k)) = [False]\""], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d. lose (t + j + Suc (3 + k)) = [False]\n  lose (t + (3 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + j + (3 + k)) = [False]", "by (rule streamValue4)"], ["proof (state)\nthis:\n  \\<forall>j\\<le>2 * d. lose (t + j + (3 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "from sg5"], ["proof (chain)\npicking this:\n  \\<forall>j\\<le>2 * d. lose (t + j + (3 + k)) = [False]", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>j\\<le>2 * d. lose (t + j + (3 + k)) = [False]\n\ngoal (1 subgoal):\n 1. \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]", "by (rule streamValue6)"], ["proof (state)\nthis:\n  \\<forall>j\\<le>2 * d. lose (t + 3 + k + j) = [False]\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}