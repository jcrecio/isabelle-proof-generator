{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD10.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma \\<P>_wellformed: \"p \\<in> \\<P> k u \\<Longrightarrow> wellformed_tokens p\"", "lemma \\<X>_token_length: \"t \\<in> \\<X> k \\<Longrightarrow> k + length (chars_of_token t) \\<le> length Doc\"", "lemma mono_Scan: \"mono (Scan T k)\"", "lemma \\<pi>_apply_setmonotone: \"x \\<in> I \\<Longrightarrow> x \\<in> \\<pi> k T I\"", "lemma Scan_apply_setmonotone: \"x \\<in> I \\<Longrightarrow> x \\<in> Scan T k I\"", "lemma leftderives_padfront:\n  assumes \"leftderives \\<alpha> \\<beta>\"\n  assumes \"is_word u\"\n  shows \"leftderives (u@\\<alpha>) (u@\\<beta>)\"", "lemma leftderives_padback:\n  assumes \"leftderives \\<alpha> \\<beta>\"\n  assumes \"is_sentence u\"\n  shows \"leftderives (\\<alpha>@u) (\\<beta>@u)\"", "lemma leftderives_pad:\n  assumes \\<alpha>_\\<beta>: \"leftderives \\<alpha> \\<beta>\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives (u@\\<alpha>@v) (u@\\<beta>@v)\"", "lemma leftderives_rule:\n  assumes \"(N, w) \\<in> \\<RR>\"\n  shows \"leftderives [N] w\"", "lemma leftderives_rule_step:\n  assumes ld: \"leftderives a (u@[N]@v)\"\n  assumes rule: \"(N, w) \\<in> \\<RR>\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives a (u@w@v)\"", "lemma leftderives_trans_step:\n  assumes ld: \"leftderives a (u@b@v)\"\n  assumes rule: \"leftderives b c\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives a (u@c@v)\"", "lemma charslength_of_prefix:\n  assumes \"is_prefix a b\"\n  shows \"charslength a \\<le> charslength b\"", "lemma item_rhs_simp[simp]: \"item_rhs (Item (N, \\<alpha>) d i j) = \\<alpha>\"", "lemma \\<PP>_wellformed: \"p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens p\"", "lemma Prefixes_reflexive[simp]: \"p \\<in> Prefixes p\"", "lemma Prefixes_is_prefix: \"q \\<in> Prefixes p = is_prefix q p\"", "lemma prefixes_are_paths': \"p \\<in> \\<PP> \\<Longrightarrow> is_prefix q p \\<Longrightarrow> q \\<in> \\<PP>\"", "lemma thmD10_ladder:\n  \"p \\<in> \\<PP> \\<Longrightarrow> \n   charslength p = k \\<Longrightarrow> \n   X \\<in> T \\<Longrightarrow> \n   T \\<subseteq> \\<X> k \\<Longrightarrow> \n   (N, \\<alpha>@\\<beta>) \\<in> \\<RR> \\<Longrightarrow>\n   r \\<le> length p \\<Longrightarrow> \n   leftderives [\\<SS>] ((terminals (take r p))@[N]@\\<gamma>) \\<Longrightarrow>\n   LeftDerivationLadder \\<alpha> D L (terminals ((drop r p)@[X])) \\<Longrightarrow> \n   ladder_last_j L = length (drop r p) \\<Longrightarrow> \n   k' = k + length (chars_of_token X) \\<Longrightarrow>\n   x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r p)) k' \\<Longrightarrow>\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))) \n   \\<Longrightarrow> x \\<in> I\"", "theorem thmD10:\n  assumes p_dom: \"p \\<in> \\<PP>\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes X_dom: \"X \\<in> T\"\n  assumes T_dom: \"T \\<subseteq> \\<X> k\"\n  assumes rule_dom: \"(N, \\<alpha>@\\<beta>) \\<in> \\<RR>\"\n  assumes r: \"r \\<le> length p\"\n  assumes leftderives_start: \"leftderives [\\<SS>] ((terminals (take r p))@[N]@\\<gamma>)\"\n  assumes leftderives_\\<alpha>: \"leftderives \\<alpha> (terminals ((drop r p)@[X]))\"\n  assumes k': \"k' = k + length (chars_of_token X)\"\n  assumes item_def: \"x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r p)) k'\"\n  assumes I: \"I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\"\n  shows \"x \\<in> I\""], "translations": [["", "lemma \\<P>_wellformed: \"p \\<in> \\<P> k u \\<Longrightarrow> wellformed_tokens p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<Longrightarrow> wellformed_tokens p", "using \\<P>_are_admissible admissible_wellformed_tokens"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<P> ?k ?u \\<Longrightarrow> admissible ?p\n  admissible ?p \\<Longrightarrow> wellformed_tokens ?p\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<Longrightarrow> wellformed_tokens p", "by blast"], ["", "lemma \\<X>_token_length: \"t \\<in> \\<X> k \\<Longrightarrow> k + length (chars_of_token t) \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<X> k \\<Longrightarrow>\n    k + length (chars_of_token t) \\<le> length Doc", "by (metis le_diff_conv2 \\<X>_is_prefix add.commute chars_of_token_def empty_\\<X> \n  empty_iff is_prefix_length le_neq_implies_less length_drop linear)"], ["", "lemma mono_Scan: \"mono (Scan T k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Scan T k)", "by (simp add: Scan_regular regular_implies_mono)"], ["", "lemma \\<pi>_apply_setmonotone: \"x \\<in> I \\<Longrightarrow> x \\<in> \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> \\<pi> k T I", "using Complete_subset_\\<pi> LocalLexing.Complete_def LocalLexing_axioms"], ["proof (prove)\nusing this:\n  Complete ?k ?X \\<subseteq> \\<pi> ?k ?T ?X\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  Complete ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x y.\n      uu_ = inc_item x ?k \\<and>\n      x \\<in> bin ?I (item_origin y) \\<and>\n      y \\<in> bin ?I ?k \\<and>\n      is_complete y \\<and> next_symbol x = Some (item_nonterminal y)}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n\ngoal (1 subgoal):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> \\<pi> k T I", "by blast"], ["", "lemma Scan_apply_setmonotone: \"x \\<in> I \\<Longrightarrow> x \\<in> Scan T k I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Scan T k I", "by (simp add: Scan_def)"], ["", "lemma leftderives_padfront:\n  assumes \"leftderives \\<alpha> \\<beta>\"\n  assumes \"is_word u\"\n  shows \"leftderives (u@\\<alpha>) (u@\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives (u @ \\<alpha>) (u @ \\<beta>)", "using LeftDerivation_append_prefix LeftDerivation_implies_leftderives assms(1) assms(2) \n  leftderives_implies_LeftDerivation"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?v ?D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift ?D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  leftderives \\<alpha> \\<beta>\n  is_word u\n  leftderives ?a ?b \\<Longrightarrow> \\<exists>D. LeftDerivation ?a D ?b\n\ngoal (1 subgoal):\n 1. leftderives (u @ \\<alpha>) (u @ \\<beta>)", "by blast"], ["", "lemma leftderives_padback:\n  assumes \"leftderives \\<alpha> \\<beta>\"\n  assumes \"is_sentence u\"\n  shows \"leftderives (\\<alpha>@u) (\\<beta>@u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives (\\<alpha> @ u) (\\<beta> @ u)", "using LeftDerivation_append_suffix LeftDerivation_implies_leftderives assms(1) assms(2) \n  leftderives_implies_LeftDerivation"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?a ?D ?b; is_sentence ?c\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?a @ ?c) ?D (?b @ ?c)\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  leftderives \\<alpha> \\<beta>\n  is_sentence u\n  leftderives ?a ?b \\<Longrightarrow> \\<exists>D. LeftDerivation ?a D ?b\n\ngoal (1 subgoal):\n 1. leftderives (\\<alpha> @ u) (\\<beta> @ u)", "by blast"], ["", "lemma leftderives_pad:\n  assumes \\<alpha>_\\<beta>: \"leftderives \\<alpha> \\<beta>\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives (u@\\<alpha>@v) (u@\\<beta>@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "by (simp add: \\<alpha>_\\<beta> is_sentence is_word leftderives_padback leftderives_padfront)"], ["", "lemma leftderives_rule:\n  assumes \"(N, w) \\<in> \\<RR>\"\n  shows \"leftderives [N] w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [N] w", "by (metis append_Nil append_Nil2 assms is_sentence_def is_word_terminals leftderives1_def \n  leftderives1_implies_leftderives list.pred_inject(1) terminals_empty wellformed_tokens_empty_path)"], ["", "lemma leftderives_rule_step:\n  assumes ld: \"leftderives a (u@[N]@v)\"\n  assumes rule: \"(N, w) \\<in> \\<RR>\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives a (u@w@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "have N_w: \"leftderives [N] w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [N] w", "using rule leftderives_rule"], ["proof (prove)\nusing this:\n  (N, w) \\<in> \\<RR>\n  (?N, ?w) \\<in> \\<RR> \\<Longrightarrow> leftderives [?N] ?w\n\ngoal (1 subgoal):\n 1. leftderives [N] w", "by blast"], ["proof (state)\nthis:\n  leftderives [N] w\n\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "then"], ["proof (chain)\npicking this:\n  leftderives [N] w", "have \"leftderives (u@[N]@v) (u@w@v)\""], ["proof (prove)\nusing this:\n  leftderives [N] w\n\ngoal (1 subgoal):\n 1. leftderives (u @ [N] @ v) (u @ w @ v)", "using leftderives_pad is_word is_sentence"], ["proof (prove)\nusing this:\n  leftderives [N] w\n  \\<lbrakk>leftderives ?\\<alpha> ?\\<beta>; is_word ?u;\n   is_sentence ?v\\<rbrakk>\n  \\<Longrightarrow> leftderives (?u @ ?\\<alpha> @ ?v) (?u @ ?\\<beta> @ ?v)\n  is_word u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. leftderives (u @ [N] @ v) (u @ w @ v)", "by blast"], ["proof (state)\nthis:\n  leftderives (u @ [N] @ v) (u @ w @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "then"], ["proof (chain)\npicking this:\n  leftderives (u @ [N] @ v) (u @ w @ v)", "show \"leftderives a (u@w@v)\""], ["proof (prove)\nusing this:\n  leftderives (u @ [N] @ v) (u @ w @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "using leftderives_trans ld"], ["proof (prove)\nusing this:\n  leftderives (u @ [N] @ v) (u @ w @ v)\n  \\<lbrakk>leftderives ?a ?b; leftderives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> leftderives ?a ?c\n  leftderives a (u @ [N] @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ w @ v)", "by blast"], ["proof (state)\nthis:\n  leftderives a (u @ w @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftderives_trans_step:\n  assumes ld: \"leftderives a (u@b@v)\"\n  assumes rule: \"leftderives b c\"\n  assumes is_word: \"is_word u\"\n  assumes is_sentence: \"is_sentence v\"\n  shows \"leftderives a (u@c@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives a (u @ c @ v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. leftderives a (u @ c @ v)", "have \"leftderives (u@b@v) (u@c@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives (u @ b @ v) (u @ c @ v)", "using leftderives_pad ld rule is_word is_sentence"], ["proof (prove)\nusing this:\n  \\<lbrakk>leftderives ?\\<alpha> ?\\<beta>; is_word ?u;\n   is_sentence ?v\\<rbrakk>\n  \\<Longrightarrow> leftderives (?u @ ?\\<alpha> @ ?v) (?u @ ?\\<beta> @ ?v)\n  leftderives a (u @ b @ v)\n  leftderives b c\n  is_word u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. leftderives (u @ b @ v) (u @ c @ v)", "by blast"], ["proof (state)\nthis:\n  leftderives (u @ b @ v) (u @ c @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ c @ v)", "then"], ["proof (chain)\npicking this:\n  leftderives (u @ b @ v) (u @ c @ v)", "show ?thesis"], ["proof (prove)\nusing this:\n  leftderives (u @ b @ v) (u @ c @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ c @ v)", "using leftderives_trans ld"], ["proof (prove)\nusing this:\n  leftderives (u @ b @ v) (u @ c @ v)\n  \\<lbrakk>leftderives ?a ?b; leftderives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> leftderives ?a ?c\n  leftderives a (u @ b @ v)\n\ngoal (1 subgoal):\n 1. leftderives a (u @ c @ v)", "by blast"], ["proof (state)\nthis:\n  leftderives a (u @ c @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma charslength_of_prefix:\n  assumes \"is_prefix a b\"\n  shows \"charslength a \\<le> charslength b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength a \\<le> charslength b", "by (simp add: assms is_prefix_chars is_prefix_length)"], ["", "lemma item_rhs_simp[simp]: \"item_rhs (Item (N, \\<alpha>) d i j) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (Item (N, \\<alpha>) d i j) = \\<alpha>", "by (simp add: item_rhs_def)"], ["", "definition Prefixes :: \"'a list \\<Rightarrow> 'a list set\"\nwhere\n  \"Prefixes p = { q . is_prefix q p }\""], ["", "lemma \\<PP>_wellformed: \"p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens p", "by (simp add: \\<PP>_are_admissible admissible_wellformed_tokens)"], ["", "lemma Prefixes_reflexive[simp]: \"p \\<in> Prefixes p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Prefixes p", "by (simp add: Prefixes_def is_prefix_def)"], ["", "lemma Prefixes_is_prefix: \"q \\<in> Prefixes p = is_prefix q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (q \\<in> Prefixes p) = is_prefix q p", "by (simp add: Prefixes_def)"], ["", "lemma prefixes_are_paths': \"p \\<in> \\<PP> \\<Longrightarrow> is_prefix q p \\<Longrightarrow> q \\<in> \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<PP>; is_prefix q p\\<rbrakk>\n    \\<Longrightarrow> q \\<in> \\<PP>", "using \\<P>.simps(3) \\<PP>_def prefixes_are_paths"], ["proof (prove)\nusing this:\n  \\<P> (Suc ?k) 0 = \\<Q> ?k\n  \\<PP> = \\<Q> (length Doc)\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; is_prefix ?x ?p\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> \\<P> ?k ?u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<PP>; is_prefix q p\\<rbrakk>\n    \\<Longrightarrow> q \\<in> \\<PP>", "by blast"], ["", "lemma thmD10_ladder:\n  \"p \\<in> \\<PP> \\<Longrightarrow> \n   charslength p = k \\<Longrightarrow> \n   X \\<in> T \\<Longrightarrow> \n   T \\<subseteq> \\<X> k \\<Longrightarrow> \n   (N, \\<alpha>@\\<beta>) \\<in> \\<RR> \\<Longrightarrow>\n   r \\<le> length p \\<Longrightarrow> \n   leftderives [\\<SS>] ((terminals (take r p))@[N]@\\<gamma>) \\<Longrightarrow>\n   LeftDerivationLadder \\<alpha> D L (terminals ((drop r p)@[X])) \\<Longrightarrow> \n   ladder_last_j L = length (drop r p) \\<Longrightarrow> \n   k' = k + length (chars_of_token X) \\<Longrightarrow>\n   x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r p)) k' \\<Longrightarrow>\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))) \n   \\<Longrightarrow> x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<PP>; charslength p = k; X \\<in> T;\n     T \\<subseteq> \\<X> k; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>;\n     r \\<le> length p;\n     leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n     LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n     ladder_last_j L = length (drop r p);\n     k' = k + length (chars_of_token X);\n     x =\n     Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p))\n      k';\n     I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n    \\<Longrightarrow> x \\<in> I", "proof (induct \"length L\" arbitrary: N \\<alpha> \\<beta> r \\<gamma> D L x rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?L < length L; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>;\n   ?r \\<le> length p;\n   leftderives [\\<SS>] (terminals (take ?r p) @ [?N] @ ?\\<gamma>);\n   LeftDerivationLadder ?\\<alpha> ?D ?L (terminals (drop ?r p @ [X]));\n   ladder_last_j ?L = length (drop ?r p);\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r p)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have item_origin_x_def: \"item_origin x = (charslength (take r p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin x = charslength (take r p)", "by (simp add: less.prems(11))"], ["proof (state)\nthis:\n  item_origin x = charslength (take r p)\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  item_origin x = charslength (take r p)", "have x_k: \"item_origin x \\<le> k\""], ["proof (prove)\nusing this:\n  item_origin x = charslength (take r p)\n\ngoal (1 subgoal):\n 1. item_origin x \\<le> k", "using charslength.simps is_prefix_chars is_prefix_length is_prefix_take less.prems(2)"], ["proof (prove)\nusing this:\n  item_origin x = charslength (take r p)\n  charslength ?cs = length (chars ?cs)\n  is_prefix ?a ?b \\<Longrightarrow> is_prefix (chars ?a) (chars ?b)\n  is_prefix ?a ?b \\<Longrightarrow> length ?a \\<le> length ?b\n  is_prefix (take ?n ?a) ?a\n  charslength p = k\n\ngoal (1 subgoal):\n 1. item_origin x \\<le> k", "by force"], ["proof (state)\nthis:\n  item_origin x \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have item_end_x_def: \"item_end x = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = k'", "by (simp add: less.prems(11))"], ["proof (state)\nthis:\n  item_end x = k'\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have item_dot_x_def: \"item_dot x = length \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot x = length \\<alpha>", "by (simp add: less.prems(11))"], ["proof (state)\nthis:\n  item_dot x = length \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have k'_upperbound: \"k' \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "using \\<X>_token_length less.prems(10) less.prems(3) less.prems(4)"], ["proof (prove)\nusing this:\n  ?t \\<in> \\<X> ?k \\<Longrightarrow>\n  ?k + length (chars_of_token ?t) \\<le> length Doc\n  k' = k + length (chars_of_token X)\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "by blast"], ["proof (state)\nthis:\n  k' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note item_def = less.prems(11)"], ["proof (state)\nthis:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note k' = less.prems(10)"], ["proof (state)\nthis:\n  k' = k + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note rule_dom = less.prems(5)"], ["proof (state)\nthis:\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note p_charslength = less.prems(2)"], ["proof (state)\nthis:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note p_dom = less.prems(1)"], ["proof (state)\nthis:\n  p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note r = less.prems(6)"], ["proof (state)\nthis:\n  r \\<le> length p\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note leftderives_start = less.prems(7)"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "note X_dom = less.prems(3)"], ["proof (state)\nthis:\n  X \\<in> T\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "apply (auto simp add: wellformed_item_def item_def rule_dom p_charslength)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (chars (take r p)) \\<le> k'\n 2. k' \\<le> length Doc", "apply (subst k')"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (chars (take r p)) \\<le> k + length (chars_of_token X)\n 2. k' \\<le> length Doc", "apply (subst charslength.simps[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength (take r p) \\<le> k + length (chars_of_token X)\n 2. k' \\<le> length Doc", "apply (subst p_charslength[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength (take r p) \\<le> charslength p + length (chars_of_token X)\n 2. k' \\<le> length Doc", "using item_origin_x_def p_charslength x_k"], ["proof (prove)\nusing this:\n  item_origin x = charslength (take r p)\n  charslength p = k\n  item_origin x \\<le> k\n\ngoal (2 subgoals):\n 1. charslength (take r p) \\<le> charslength p + length (chars_of_token X)\n 2. k' \\<le> length Doc", "apply linarith"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "apply (rule k'_upperbound)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have  leftderives_\\<alpha>: \"leftderives \\<alpha> (terminals ((drop r p)@[X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "using LeftDerivationLadder_def LeftDerivation_implies_leftderives less.prems(8)"], ["proof (prove)\nusing this:\n  LeftDerivationLadder ?a ?D ?L ?b =\n  (LeftDerivation ?a ?D ?b \\<and>\n   is_ladder ?D ?L \\<and>\n   LeftDerivationFix ?a (ladder_i ?L 0) (take (ladder_n ?L 0) ?D)\n    (ladder_j ?L 0) (ladder_\\<gamma> ?a ?D ?L 0) \\<and>\n   LeftDerivationIntros ?a ?D ?L)\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "by blast"], ["proof (state)\nthis:\n  leftderives \\<alpha> (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have is_sentence_drop_pX: \"is_sentence (drop r (terminals p) @ [terminal_of_token X])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (drop r (terminals p) @ [terminal_of_token X])", "by (metis derives_is_sentence is_sentence_concat leftderives_\\<alpha> leftderives_implies_derives \n        rule_\\<alpha>_type rule_dom terminals_append terminals_drop terminals_singleton)"], ["proof (state)\nthis:\n  is_sentence (drop r (terminals p) @ [terminal_of_token X])\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have snd_item_rule_x: \"snd (item_rule x) = \\<alpha>@\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (item_rule x) = \\<alpha> @ \\<beta>", "by (simp add: item_def)"], ["proof (state)\nthis:\n  snd (item_rule x) = \\<alpha> @ \\<beta>\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "from less"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?L < length L; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>;\n   ?r \\<le> length p;\n   leftderives [\\<SS>] (terminals (take ?r p) @ [?N] @ ?\\<gamma>);\n   LeftDerivationLadder ?\\<alpha> ?D ?L (terminals (drop ?r p @ [X]));\n   ladder_last_j ?L = length (drop ?r p);\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r p)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))", "have \"is_ladder D L\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?L < length L; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>;\n   ?r \\<le> length p;\n   leftderives [\\<SS>] (terminals (take ?r p) @ [?N] @ ?\\<gamma>);\n   LeftDerivationLadder ?\\<alpha> ?D ?L (terminals (drop ?r p @ [X]));\n   ladder_last_j ?L = length (drop ?r p);\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r p)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. is_ladder D L", "using LeftDerivationLadder_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?L < length L; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>;\n   ?r \\<le> length p;\n   leftderives [\\<SS>] (terminals (take ?r p) @ [?N] @ ?\\<gamma>);\n   LeftDerivationLadder ?\\<alpha> ?D ?L (terminals (drop ?r p @ [X]));\n   ladder_last_j ?L = length (drop ?r p);\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r p)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  LeftDerivationLadder ?a ?D ?L ?b =\n  (LeftDerivation ?a ?D ?b \\<and>\n   is_ladder ?D ?L \\<and>\n   LeftDerivationFix ?a (ladder_i ?L 0) (take (ladder_n ?L 0) ?D)\n    (ladder_j ?L 0) (ladder_\\<gamma> ?a ?D ?L 0) \\<and>\n   LeftDerivationIntros ?a ?D ?L)\n\ngoal (1 subgoal):\n 1. is_ladder D L", "by blast"], ["proof (state)\nthis:\n  is_ladder D L\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_ladder D L", "have \"length L \\<noteq> 0\""], ["proof (prove)\nusing this:\n  is_ladder D L\n\ngoal (1 subgoal):\n 1. length L \\<noteq> 0", "by (simp add: is_ladder_not_empty)"], ["proof (state)\nthis:\n  length L \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length L \\<noteq> 0", "have \"length L = 1 \\<or> length L > 1\""], ["proof (prove)\nusing this:\n  length L \\<noteq> 0\n\ngoal (1 subgoal):\n 1. length L = 1 \\<or> 1 < length L", "by arith"], ["proof (state)\nthis:\n  length L = 1 \\<or> 1 < length L\n\ngoal (1 subgoal):\n 1. \\<And>L N \\<alpha> \\<beta> r \\<gamma> D x.\n       \\<lbrakk>\\<And>La N \\<alpha> \\<beta> r \\<gamma> D x.\n                   \\<lbrakk>length La < length L; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n                    leftderives [\\<SS>]\n                     (terminals (take r p) @ [N] @ \\<gamma>);\n                    LeftDerivationLadder \\<alpha> D La\n                     (terminals (drop r p @ [X]));\n                    ladder_last_j La = length (drop r p);\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r p)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length p;\n        leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>);\n        LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]));\n        ladder_last_j L = length (drop r p);\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r p)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length L = 1 \\<or> 1 < length L", "show ?case"], ["proof (prove)\nusing this:\n  length L = 1 \\<or> 1 < length L\n\ngoal (1 subgoal):\n 1. x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  length L = 1\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"\\<exists> i. LeftDerivationFix \\<alpha> i D (length (drop r p)) (terminals ((drop r p)@[X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i.\n       LeftDerivationFix \\<alpha> i D (length (drop r p))\n        (terminals (drop r p @ [X]))", "using \"1.hyps\" LeftDerivationLadder_L_0 less.prems(8) less.prems(9)"], ["proof (prove)\nusing this:\n  length L = 1\n  \\<lbrakk>LeftDerivationLadder ?\\<alpha> ?D ?L ?\\<beta>;\n   length ?L = 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i.\n                       LeftDerivationFix ?\\<alpha> i ?D (ladder_last_j ?L)\n                        ?\\<beta>\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n\ngoal (1 subgoal):\n 1. \\<exists>i.\n       LeftDerivationFix \\<alpha> i D (length (drop r p))\n        (terminals (drop r p @ [X]))", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>i.\n     LeftDerivationFix \\<alpha> i D (length (drop r p))\n      (terminals (drop r p @ [X]))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>i.\n     LeftDerivationFix \\<alpha> i D (length (drop r p))\n      (terminals (drop r p @ [X]))", "obtain i where LDF:\n          \"LeftDerivationFix \\<alpha> i D (length (drop r p)) (terminals ((drop r p)@[X]))\""], ["proof (prove)\nusing this:\n  \\<exists>i.\n     LeftDerivationFix \\<alpha> i D (length (drop r p))\n      (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. (\\<And>i.\n        LeftDerivationFix \\<alpha> i D (length (drop r p))\n         (terminals (drop r p @ [X])) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivationFix \\<alpha> i D (length (drop r p))\n   (terminals (drop r p @ [X]))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivationFix_splits_at_derives[OF this]"], ["proof (chain)\npicking this:\n  \\<exists>U a1 a2 b1 b2.\n     splits_at \\<alpha> i a1 U a2 \\<and>\n     splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U\n      b2 \\<and>\n     derives a1 b1 \\<and> derives a2 b2", "obtain U a1 a2 b1 b2 where decompose:\n          \"splits_at \\<alpha> i a1 U a2 \\<and> splits_at (terminals (drop r p @ [X])) \n            (length (drop r p)) b1 U b2 \\<and> derives a1 b1 \\<and> derives a2 b2\""], ["proof (prove)\nusing this:\n  \\<exists>U a1 a2 b1 b2.\n     splits_at \\<alpha> i a1 U a2 \\<and>\n     splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U\n      b2 \\<and>\n     derives a1 b1 \\<and> derives a2 b2\n\ngoal (1 subgoal):\n 1. (\\<And>a1 U a2 b1 b2.\n        splits_at \\<alpha> i a1 U a2 \\<and>\n        splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U\n         b2 \\<and>\n        derives a1 b1 \\<and> derives a2 b2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2", "have b1: \"b1 = terminals (drop r p)\""], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n\ngoal (1 subgoal):\n 1. b1 = terminals (drop r p)", "by (simp add: append_eq_conv_conj splits_at_def)"], ["proof (state)\nthis:\n  b1 = terminals (drop r p)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "with decompose"], ["proof (chain)\npicking this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  b1 = terminals (drop r p)", "have U: \"U = fst X\""], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  b1 = terminals (drop r p)\n\ngoal (1 subgoal):\n 1. U = fst X", "by (metis length_terminals nth_append_length splits_at_def terminal_of_token_def \n            terminals_append terminals_singleton)"], ["proof (state)\nthis:\n  U = fst X\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "from decompose b1 U"], ["proof (chain)\npicking this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  b1 = terminals (drop r p)\n  U = fst X", "have b2: \"b2 = []\""], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  b1 = terminals (drop r p)\n  U = fst X\n\ngoal (1 subgoal):\n 1. b2 = []", "by (simp add: splits_at_combine splits_at_def)"], ["proof (state)\nthis:\n  b2 = []\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have D: \"LeftDerivation \\<alpha> D (terminals ((drop r p)@[X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))", "using LDF LeftDerivationLadder_def less.prems(8)"], ["proof (prove)\nusing this:\n  LeftDerivationFix \\<alpha> i D (length (drop r p))\n   (terminals (drop r p @ [X]))\n  LeftDerivationLadder ?a ?D ?L ?b =\n  (LeftDerivation ?a ?D ?b \\<and>\n   is_ladder ?D ?L \\<and>\n   LeftDerivationFix ?a (ladder_i ?L 0) (take (ladder_n ?L 0) ?D)\n    (ladder_j ?L 0) (ladder_\\<gamma> ?a ?D ?L 0) \\<and>\n   LeftDerivationIntros ?a ?D ?L)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))", "by blast"], ["proof (state)\nthis:\n  LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "let ?y = \"Item (item_rule x) (length a1) (item_origin x) k\""], ["proof (state)\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have wellformed_y: \"wellformed_item ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)", "using wellformed_x"], ["proof (prove)\nusing this:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)", "apply (auto simp add: wellformed_item_def x_k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> k \\<le> length Doc\n 2. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> length a1\n                      \\<le> length\n                             (item_rhs\n                               (Item (item_rule x) (length a1)\n                                 (item_origin x) k))", "using k' k'_upperbound"], ["proof (prove)\nusing this:\n  k' = k + length (chars_of_token X)\n  k' \\<le> length Doc\n\ngoal (2 subgoals):\n 1. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> k \\<le> length Doc\n 2. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> length a1\n                      \\<le> length\n                             (item_rhs\n                               (Item (item_rule x) (length a1)\n                                 (item_origin x) k))", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> length a1\n                      \\<le> length\n                             (item_rhs\n                               (Item (item_rule x) (length a1)\n                                 (item_origin x) k))", "apply (simp add: item_rhs_def snd_item_rule_x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length \\<alpha> + length \\<beta>\\<rbrakk>\n    \\<Longrightarrow> length a1 \\<le> length \\<alpha> + length \\<beta>", "using decompose splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>item_rule x \\<in> \\<RR>; item_origin x \\<le> item_end x;\n     item_end x \\<le> length Doc;\n     item_dot x \\<le> length \\<alpha> + length \\<beta>\\<rbrakk>\n    \\<Longrightarrow> length a1 \\<le> length \\<alpha> + length \\<beta>", "by (simp add: is_prefix_length trans_le_add1)"], ["proof (state)\nthis:\n  wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have y_nonterminal: \"item_nonterminal ?y = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) = N", "by (simp add: item_def item_nonterminal_def)"], ["proof (state)\nthis:\n  item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) = N\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_\\<alpha>_y: \"item_\\<alpha> ?y = a1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k) = a1", "by (metis append_assoc append_eq_conv_conj append_take_drop_id decompose item.sel(1) \n            item.sel(2) item_\\<alpha>_def item_rhs_def snd_item_rule_x splits_at_def)"], ["proof (state)\nthis:\n  item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k) = a1\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have pvalid_y: \"pvalid p ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p (Item (item_rule x) (length a1) (item_origin x) k)", "apply (auto simp add: pvalid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wellformed_tokens p\n 2. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n 3. \\<exists>u\\<le>length p.\n       length (chars p) = k \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             item_nonterminal\n              (Item (item_rule x) (length a1) (item_origin x) k) #\n             \\<gamma>)) \\<and>\n       derives\n        (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n        (drop u (terminals p))", "using p_dom \\<PP>_wellformed"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  ?p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens ?p\n\ngoal (3 subgoals):\n 1. wellformed_tokens p\n 2. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n 3. \\<exists>u\\<le>length p.\n       length (chars p) = k \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             item_nonterminal\n              (Item (item_rule x) (length a1) (item_origin x) k) #\n             \\<gamma>)) \\<and>\n       derives\n        (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n        (drop u (terminals p))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n 2. \\<exists>u\\<le>length p.\n       length (chars p) = k \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             item_nonterminal\n              (Item (item_rule x) (length a1) (item_origin x) k) #\n             \\<gamma>)) \\<and>\n       derives\n        (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n        (drop u (terminals p))", "using wellformed_y"], ["proof (prove)\nusing this:\n  wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n\ngoal (2 subgoals):\n 1. wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n 2. \\<exists>u\\<le>length p.\n       length (chars p) = k \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             item_nonterminal\n              (Item (item_rule x) (length a1) (item_origin x) k) #\n             \\<gamma>)) \\<and>\n       derives\n        (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n        (drop u (terminals p))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<le>length p.\n       length (chars p) = k \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             item_nonterminal\n              (Item (item_rule x) (length a1) (item_origin x) k) #\n             \\<gamma>)) \\<and>\n       derives\n        (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n        (drop u (terminals p))", "apply (rule_tac x=r in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length p \\<and>\n    length (chars p) = k \\<and>\n    length (chars (take r p)) = item_origin x \\<and>\n    (\\<exists>\\<gamma>.\n        is_derivation\n         (take r (terminals p) @\n          item_nonterminal\n           (Item (item_rule x) (length a1) (item_origin x) k) #\n          \\<gamma>)) \\<and>\n    derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply (auto simp add: r)"], ["proof (prove)\ngoal (4 subgoals):\n 1. length (chars p) = k\n 2. length (chars (take r p)) = item_origin x\n 3. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         item_nonterminal\n          (Item (item_rule x) (length a1) (item_origin x) k) #\n         \\<gamma>)\n 4. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "using p_charslength"], ["proof (prove)\nusing this:\n  charslength p = k\n\ngoal (4 subgoals):\n 1. length (chars p) = k\n 2. length (chars (take r p)) = item_origin x\n 3. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         item_nonterminal\n          (Item (item_rule x) (length a1) (item_origin x) k) #\n         \\<gamma>)\n 4. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (chars (take r p)) = item_origin x\n 2. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         item_nonterminal\n          (Item (item_rule x) (length a1) (item_origin x) k) #\n         \\<gamma>)\n 3. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "using item_def"], ["proof (prove)\nusing this:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n\ngoal (3 subgoals):\n 1. length (chars (take r p)) = item_origin x\n 2. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         item_nonterminal\n          (Item (item_rule x) (length a1) (item_origin x) k) #\n         \\<gamma>)\n 3. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         item_nonterminal\n          (Item (item_rule x) (length a1) (item_origin x) k) #\n         \\<gamma>)\n 2. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply (rule_tac x=\\<gamma> in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (take r (terminals p) @\n      item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) #\n      \\<gamma>)\n 2. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "using y_nonterminal"], ["proof (prove)\nusing this:\n  item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) = N\n\ngoal (2 subgoals):\n 1. is_derivation\n     (take r (terminals p) @\n      item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) #\n      \\<gamma>)\n 2. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) =\n    N \\<Longrightarrow>\n    is_derivation (take r (terminals p) @ N # \\<gamma>)\n 2. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "using is_derivation_def leftderives_start"], ["proof (prove)\nusing this:\n  is_derivation ?u = derives [\\<SS>] ?u\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (2 subgoals):\n 1. item_nonterminal (Item (item_rule x) (length a1) (item_origin x) k) =\n    N \\<Longrightarrow>\n    is_derivation (take r (terminals p) @ N # \\<gamma>)\n 2. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives\n     (item_\\<alpha> (Item (item_rule x) (length a1) (item_origin x) k))\n     (drop r (terminals p))", "apply (simp add: item_\\<alpha>_y)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a1 (drop r (terminals p))", "using b1 decompose"], ["proof (prove)\nusing this:\n  b1 = terminals (drop r p)\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n\ngoal (1 subgoal):\n 1. derives a1 (drop r (terminals p))", "by auto"], ["proof (state)\nthis:\n  pvalid p (Item (item_rule x) (length a1) (item_origin x) k)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "let ?z = \"inc_item ?y k'\""], ["proof (state)\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_rhs_y: \"item_rhs ?y = \\<alpha>@\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (Item (item_rule x) (length a1) (item_origin x) k) =\n    \\<alpha> @ \\<beta>", "by (simp add: item_def item_rhs_def)"], ["proof (state)\nthis:\n  item_rhs (Item (item_rule x) (length a1) (item_origin x) k) =\n  \\<alpha> @ \\<beta>\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have split_\\<alpha>: \"\\<alpha> = a1@[U]@a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> = a1 @ [U] @ a2", "using decompose splits_at_combine"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> = a1 @ [U] @ a2", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = a1 @ [U] @ a2\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have next_symbol_y: \"next_symbol ?y = Some(fst X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "by (auto simp add: next_symbol_def is_complete_def item_rhs_y split_\\<alpha> U)"], ["proof (state)\nthis:\n  next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n  Some (fst X)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have z_in_Scan_y: \"?z \\<in> Scan T k {?y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n    \\<in> Scan T k {Item (item_rule x) (length a1) (item_origin x) k}", "apply (simp add: Scan_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n    Item (item_rule x) (length a1) (item_origin x) k \\<or>\n    (\\<exists>x t c.\n        inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n        inc_item x (k + length c) \\<and>\n        x \\<in> bin {Item (item_rule x) (length a1) (item_origin x) k}\n                 k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol x = Some t)", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x t c.\n       inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n       inc_item x (k + length c) \\<and>\n       x \\<in> bin {Item (item_rule x) (length a1) (item_origin x) k}\n                k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol x = Some t", "apply (rule_tac x=\"?y\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t c.\n       inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n       inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n        (k + length c) \\<and>\n       Item (item_rule x) (length a1) (item_origin x) k\n       \\<in> bin {Item (item_rule x) (length a1) (item_origin x) k} k \\<and>\n       (t, c) \\<in> T \\<and>\n       next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n       Some t", "apply (rule_tac x=\"fst X\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c.\n       inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n       inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n        (k + length c) \\<and>\n       Item (item_rule x) (length a1) (item_origin x) k\n       \\<in> bin {Item (item_rule x) (length a1) (item_origin x) k} k \\<and>\n       (fst X, c) \\<in> T \\<and>\n       next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n       Some (fst X)", "apply (rule_tac x=\"snd X\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n    inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n     (k + length (snd X)) \\<and>\n    Item (item_rule x) (length a1) (item_origin x) k\n    \\<in> bin {Item (item_rule x) (length a1) (item_origin x) k} k \\<and>\n    (fst X, snd X) \\<in> T \\<and>\n    next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "apply (auto simp add: bin_def X_dom)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n    inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n     (k + length (snd X))\n 2. next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "using k' chars_of_token_def"], ["proof (prove)\nusing this:\n  k' = k + length (chars_of_token X)\n  chars_of_token ?t = snd ?t\n\ngoal (2 subgoals):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k' =\n    inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n     (k + length (snd X))\n 2. next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "using next_symbol_y"], ["proof (prove)\nusing this:\n  next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n  Some (fst X)\n\ngoal (1 subgoal):\n 1. next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n    Some (fst X)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "from pvalid_y"], ["proof (chain)\npicking this:\n  pvalid p (Item (item_rule x) (length a1) (item_origin x) k)", "have \"?y \\<in> Gen(Prefixes p)\""], ["proof (prove)\nusing this:\n  pvalid p (Item (item_rule x) (length a1) (item_origin x) k)\n\ngoal (1 subgoal):\n 1. Item (item_rule x) (length a1) (item_origin x) k \\<in> Gen (Prefixes p)", "apply (simp add: Gen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p\n     (Item (item_rule x) (length a1) (item_origin x) k) \\<Longrightarrow>\n    \\<exists>pa.\n       pa \\<in> Prefixes p \\<and>\n       pvalid pa (Item (item_rule x) (length a1) (item_origin x) k)", "apply (rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p\n     (Item (item_rule x) (length a1) (item_origin x) k) \\<Longrightarrow>\n    p \\<in> Prefixes p \\<and>\n    pvalid p (Item (item_rule x) (length a1) (item_origin x) k)", "by (auto simp add: paths_le_def p_dom)"], ["proof (state)\nthis:\n  Item (item_rule x) (length a1) (item_origin x) k \\<in> Gen (Prefixes p)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  Item (item_rule x) (length a1) (item_origin x) k \\<in> Gen (Prefixes p)", "have \"Scan T k {?y} \\<subseteq> Scan T k (Gen(Prefixes p))\""], ["proof (prove)\nusing this:\n  Item (item_rule x) (length a1) (item_origin x) k \\<in> Gen (Prefixes p)\n\ngoal (1 subgoal):\n 1. Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n    \\<subseteq> Scan T k (Gen (Prefixes p))", "apply (rule_tac monoD[OF mono_Scan])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Item (item_rule x) (length a1) (item_origin x) k\n    \\<in> Gen (Prefixes p) \\<Longrightarrow>\n    {Item (item_rule x) (length a1) (item_origin x) k}\n    \\<subseteq> Gen (Prefixes p)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  \\<subseteq> Scan T k (Gen (Prefixes p))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "with z_in_Scan_y"], ["proof (chain)\npicking this:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  \\<subseteq> Scan T k (Gen (Prefixes p))", "have z_in_Scan_Gen: \"?z \\<in> Scan T k (Gen(Prefixes p))\""], ["proof (prove)\nusing this:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  \\<subseteq> Scan T k (Gen (Prefixes p))\n\ngoal (1 subgoal):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n    \\<in> Scan T k (Gen (Prefixes p))", "using rev_subsetD"], ["proof (prove)\nusing this:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  Scan T k {Item (item_rule x) (length a1) (item_origin x) k}\n  \\<subseteq> Scan T k (Gen (Prefixes p))\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n    \\<in> Scan T k (Gen (Prefixes p))", "by blast"], ["proof (state)\nthis:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k (Gen (Prefixes p))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have wellformed_z: \"wellformed_item ?z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')", "using k' k'_upperbound next_symbol_y wellformed_inc_item wellformed_y"], ["proof (prove)\nusing this:\n  k' = k + length (chars_of_token X)\n  k' \\<le> length Doc\n  next_symbol (Item (item_rule x) (length a1) (item_origin x) k) =\n  Some (fst X)\n  \\<lbrakk>wellformed_item ?x; next_symbol ?x = Some ?s;\n   ?k \\<le> length Doc; item_end ?x \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> wellformed_item (inc_item ?x ?k)\n  wellformed_item (Item (item_rule x) (length a1) (item_origin x) k)\n\ngoal (1 subgoal):\n 1. wellformed_item\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')", "by auto"], ["proof (state)\nthis:\n  wellformed_item\n   (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_\\<beta>_z: \"item_\\<beta> ?z = a2@\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta>\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k') =\n    a2 @ \\<beta>", "apply (simp add: item_\\<beta>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (Suc (length a1))\n     (item_rhs (Item (item_rule x) (length a1) (item_origin x) k)) =\n    a2 @ \\<beta>", "apply (simp add: item_rhs_y split_\\<alpha>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  item_\\<beta>\n   (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k') =\n  a2 @ \\<beta>\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_end_z: \"item_end ?z = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k') =\n    k'", "by simp"], ["proof (state)\nthis:\n  item_end\n   (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k') =\n  k'\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have x_via_z: \"x = inc_dot (length a2) ?z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    inc_dot (length a2)\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')", "by (simp add: inc_dot_def less.prems(11) split_\\<alpha>)"], ["proof (state)\nthis:\n  x =\n  inc_dot (length a2)\n   (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have x_in_z: \"x \\<in> \\<pi> k' {} {?z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {}\n             {inc_item (Item (item_rule x) (length a1) (item_origin x) k)\n               k'}", "apply (subst x_via_z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length a2)\n     (inc_item (Item (item_rule x) (length a1) (item_origin x) k) k')\n    \\<in> \\<pi> k' {}\n           {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}", "apply (rule_tac thmD6[OF wellformed_z item_\\<beta>_z item_end_z])"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a2 []", "using decompose b2"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 U a2 \\<and>\n  splits_at (terminals (drop r p @ [X])) (length (drop r p)) b1 U b2 \\<and>\n  derives a1 b1 \\<and> derives a2 b2\n  b2 = []\n\ngoal (1 subgoal):\n 1. derives a2 []", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {}\n           {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"\\<pi> k' {} {?z} \\<subseteq> \\<pi> k' {} (Scan T k (Gen(Prefixes p)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k' {}\n     {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n    \\<subseteq> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))", "apply (rule_tac monoD[OF mono_\\<pi>])"], ["proof (prove)\ngoal (1 subgoal):\n 1. {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n    \\<subseteq> Scan T k (Gen (Prefixes p))", "using z_in_Scan_Gen"], ["proof (prove)\nusing this:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k (Gen (Prefixes p))\n\ngoal (1 subgoal):\n 1. {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n    \\<subseteq> Scan T k (Gen (Prefixes p))", "using empty_subsetI insert_subset"], ["proof (prove)\nusing this:\n  inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'\n  \\<in> Scan T k (Gen (Prefixes p))\n  {} \\<subseteq> ?A\n  (insert ?x ?A \\<subseteq> ?B) = (?x \\<in> ?B \\<and> ?A \\<subseteq> ?B)\n\ngoal (1 subgoal):\n 1. {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n    \\<subseteq> Scan T k (Gen (Prefixes p))", "by blast"], ["proof (state)\nthis:\n  \\<pi> k' {}\n   {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n  \\<subseteq> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<pi> k' {}\n   {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n  \\<subseteq> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))", "have x_in_Scan_Gen: \"x \\<in> \\<pi> k' {} (Scan T k (Gen(Prefixes p)))\""], ["proof (prove)\nusing this:\n  \\<pi> k' {}\n   {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n  \\<subseteq> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))", "using x_in_z"], ["proof (prove)\nusing this:\n  \\<pi> k' {}\n   {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n  \\<subseteq> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n  x \\<in> \\<pi> k' {}\n           {inc_item (Item (item_rule x) (length a1) (item_origin x) k) k'}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"item_end x = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = k'", "by (simp add: item_end_x_def)"], ["proof (state)\nthis:\n  item_end x = k'\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "with x_in_Scan_Gen"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n  item_end x = k'", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n  item_end x = k'\n\ngoal (1 subgoal):\n 1. x \\<in> I", "using items_le_def less.prems(12) mem_Collect_eq nat_le_linear"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))\n  item_end x = k'\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  (?a \\<in> Collect ?P) = ?P ?a\n  ?m \\<le> ?n \\<or> ?n \\<le> ?m\n\ngoal (1 subgoal):\n 1. x \\<in> I", "by blast"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  1 < length L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain i where i: \"i = ladder_i L 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i. i = ladder_i L 0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i = ladder_i L 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain i' where i': \"i' = ladder_j L 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i'. i' = ladder_j L 0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i' = ladder_j L 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain \\<alpha>' where \\<alpha>': \"\\<alpha>' = ladder_\\<gamma> \\<alpha> D L 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>''.\n        \\<alpha>'' = ladder_\\<gamma> \\<alpha> D L 0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha>' = ladder_\\<gamma> \\<alpha> D L 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain n where n: \"n = ladder_n L 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n. n = ladder_n L 0 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = ladder_n L 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ldfix: \"LeftDerivationFix \\<alpha> i (take n D)  i' \\<alpha>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> i (take n D) i' \\<alpha>'", "using LeftDerivationLadder_def \\<alpha>' i i' n less.prems(8)"], ["proof (prove)\nusing this:\n  LeftDerivationLadder ?a ?D ?L ?b =\n  (LeftDerivation ?a ?D ?b \\<and>\n   is_ladder ?D ?L \\<and>\n   LeftDerivationFix ?a (ladder_i ?L 0) (take (ladder_n ?L 0) ?D)\n    (ladder_j ?L 0) (ladder_\\<gamma> ?a ?D ?L 0) \\<and>\n   LeftDerivationIntros ?a ?D ?L)\n  \\<alpha>' = ladder_\\<gamma> \\<alpha> D L 0\n  i = ladder_i L 0\n  i' = ladder_j L 0\n  n = ladder_n L 0\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> i (take n D) i' \\<alpha>'", "by blast"], ["proof (state)\nthis:\n  LeftDerivationFix \\<alpha> i (take n D) i' \\<alpha>'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<alpha>'_alt: \"\\<alpha>' = ladder_\\<alpha> \\<alpha> D L 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha>' = ladder_\\<alpha> \\<alpha> D L 1", "using 2"], ["proof (prove)\nusing this:\n  1 < length L\n\ngoal (1 subgoal):\n 1. \\<alpha>' = ladder_\\<alpha> \\<alpha> D L 1", "by (simp add: \\<alpha>' ladder_\\<alpha>_def)"], ["proof (state)\nthis:\n  \\<alpha>' = ladder_\\<alpha> \\<alpha> D L 1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have i'_alt: \"i' = ladder_i L 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i' = ladder_i L 1", "using 2"], ["proof (prove)\nusing this:\n  1 < length L\n\ngoal (1 subgoal):\n 1. i' = ladder_i L 1", "by (simp add: i' ladder_i_def)"], ["proof (state)\nthis:\n  i' = ladder_i L 1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain e where e: \"e = D ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e. e = D ! n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  e = D ! n\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain ix where ix: \"ix = ladder_ix L 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ix.\n        ix = ladder_ix L 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ix = ladder_ix L 1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain m where m: \"m = ladder_n L 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m. m = ladder_n L 1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m = ladder_n L 1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain E where E: \"E = drop (Suc n) (take m D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>E.\n        E = drop (Suc n) (take m D) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  E = drop (Suc n) (take m D)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ldintro: \"LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1) (ladder_\\<gamma> \\<alpha> D L 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1)\n     (ladder_\\<gamma> \\<alpha> D L 1)", "by (metis \"2.hyps\" LeftDerivationIntrosAt_def LeftDerivationIntros_def \n            LeftDerivationLadder_def One_nat_def \\<alpha>'_alt E diff_Suc_1 e i'_alt ix leI \n            less.prems(8) m n not_less_eq zero_less_one)"], ["proof (state)\nthis:\n  LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1)\n   (ladder_\\<gamma> \\<alpha> D L 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have is_nonterminal_\\<alpha>'_at_i': \"is_nonterminal (\\<alpha>' ! i')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal (\\<alpha>' ! i')", "using LeftDerivationIntro_implies_nonterminal ldintro"], ["proof (prove)\nusing this:\n  LeftDerivationIntro ?\\<alpha> ?i (snd ?e) ?ix ?E ?j\n   ?\\<gamma> \\<Longrightarrow>\n  is_nonterminal (?\\<alpha> ! ?i)\n  LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1)\n   (ladder_\\<gamma> \\<alpha> D L 1)\n\ngoal (1 subgoal):\n 1. is_nonterminal (\\<alpha>' ! i')", "by blast"], ["proof (state)\nthis:\n  is_nonterminal (\\<alpha>' ! i')\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_nonterminal (\\<alpha>' ! i')", "have is_nonterminal_\\<alpha>_at_i: \"is_nonterminal (\\<alpha> ! i)\""], ["proof (prove)\nusing this:\n  is_nonterminal (\\<alpha>' ! i')\n\ngoal (1 subgoal):\n 1. is_nonterminal (\\<alpha> ! i)", "using LeftDerivationFix_def ldfix"], ["proof (prove)\nusing this:\n  is_nonterminal (\\<alpha>' ! i')\n  LeftDerivationFix ?\\<alpha> ?i ?D ?j ?\\<beta> =\n  (is_sentence ?\\<alpha> \\<and>\n   is_sentence ?\\<beta> \\<and>\n   LeftDerivation ?\\<alpha> ?D ?\\<beta> \\<and>\n   ?i < length ?\\<alpha> \\<and>\n   ?j < length ?\\<beta> \\<and>\n   ?\\<alpha> ! ?i = ?\\<beta> ! ?j \\<and>\n   (\\<exists>E F.\n       ?D = E @ derivation_shift F 0 (Suc ?j) \\<and>\n       LeftDerivation (take ?i ?\\<alpha>) E (take ?j ?\\<beta>) \\<and>\n       LeftDerivation (drop (Suc ?i) ?\\<alpha>) F (drop (Suc ?j) ?\\<beta>)))\n  LeftDerivationFix \\<alpha> i (take n D) i' \\<alpha>'\n\ngoal (1 subgoal):\n 1. is_nonterminal (\\<alpha> ! i)", "by auto"], ["proof (state)\nthis:\n  is_nonterminal (\\<alpha> ! i)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_nonterminal (\\<alpha> ! i)", "have \"\\<exists> A a1 a2 a1'. splits_at \\<alpha> i a1 A a2 \\<and> splits_at \\<alpha>' i' a1' A a2 \\<and>\n          LeftDerivation a1 (take n D) a1'\""], ["proof (prove)\nusing this:\n  is_nonterminal (\\<alpha> ! i)\n\ngoal (1 subgoal):\n 1. \\<exists>A a1 a2 a1'.\n       splits_at \\<alpha> i a1 A a2 \\<and>\n       splits_at \\<alpha>' i' a1' A a2 \\<and>\n       LeftDerivation a1 (take n D) a1'", "using LeftDerivationFix_splits_at_nonterminal ldfix"], ["proof (prove)\nusing this:\n  is_nonterminal (\\<alpha> ! i)\n  \\<lbrakk>LeftDerivationFix ?a ?i ?D ?j ?b;\n   is_nonterminal (?a ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U a1 a2 b1.\n                       splits_at ?a ?i a1 U a2 \\<and>\n                       splits_at ?b ?j b1 U a2 \\<and>\n                       LeftDerivation a1 ?D b1\n  LeftDerivationFix \\<alpha> i (take n D) i' \\<alpha>'\n\ngoal (1 subgoal):\n 1. \\<exists>A a1 a2 a1'.\n       splits_at \\<alpha> i a1 A a2 \\<and>\n       splits_at \\<alpha>' i' a1' A a2 \\<and>\n       LeftDerivation a1 (take n D) a1'", "by auto"], ["proof (state)\nthis:\n  \\<exists>A a1 a2 a1'.\n     splits_at \\<alpha> i a1 A a2 \\<and>\n     splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>A a1 a2 a1'.\n     splits_at \\<alpha> i a1 A a2 \\<and>\n     splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'", "obtain A a1 a2 a1' where A: \"splits_at \\<alpha> i a1 A a2 \\<and> splits_at \\<alpha>' i' a1' A a2 \\<and>\n          LeftDerivation a1 (take n D) a1'\""], ["proof (prove)\nusing this:\n  \\<exists>A a1 a2 a1'.\n     splits_at \\<alpha> i a1 A a2 \\<and>\n     splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n\ngoal (1 subgoal):\n 1. (\\<And>a1 A a2 a1'.\n        splits_at \\<alpha> i a1 A a2 \\<and>\n        splits_at \\<alpha>' i' a1' A a2 \\<and>\n        LeftDerivation a1 (take n D) a1' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have A_def: \"A = \\<alpha>' ! i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = \\<alpha>' ! i'", "using A splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. A = \\<alpha>' ! i'", "by blast"], ["proof (state)\nthis:\n  A = \\<alpha>' ! i'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have is_nonterminal_A: \"is_nonterminal A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal A", "using A_def is_nonterminal_\\<alpha>'_at_i'"], ["proof (prove)\nusing this:\n  A = \\<alpha>' ! i'\n  is_nonterminal (\\<alpha>' ! i')\n\ngoal (1 subgoal):\n 1. is_nonterminal A", "by blast"], ["proof (state)\nthis:\n  is_nonterminal A\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"\\<exists> rule. e = (i', rule)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>rule. e = (i', rule)", "by (metis e \"2.hyps\" LeftDerivationIntrosAt_def LeftDerivationIntros_def \n            LeftDerivationLadder_def One_nat_def Suc_leI diff_Suc_1 i'_alt less.prems(8) \n            n prod.collapse zero_less_one)"], ["proof (state)\nthis:\n  \\<exists>rule. e = (i', rule)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>rule. e = (i', rule)", "obtain rule where rule: \"e = (i', rule)\""], ["proof (prove)\nusing this:\n  \\<exists>rule. e = (i', rule)\n\ngoal (1 subgoal):\n 1. (\\<And>rule. e = (i', rule) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  e = (i', rule)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain w where w: \"w = snd rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>w. w = snd rule \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  w = snd rule\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain \\<alpha>'' where \\<alpha>'': \"\\<alpha>'' = a1' @ w @ a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>''.\n        \\<alpha>'' = a1' @ w @ a2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha>'' = a1' @ w @ a2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<alpha>'_\\<alpha>'': \"LeftDerives1 \\<alpha>' i' rule \\<alpha>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 \\<alpha>' i' rule \\<alpha>''", "by (metis A w LeftDerivationFix_is_sentence LeftDerivationIntro_def \n            LeftDerivationIntro_examine_rule LeftDerives1_def \\<alpha>'' ldfix ldintro prod.collapse \n            rule snd_conv splits_at_implies_Derives1)"], ["proof (state)\nthis:\n  LeftDerives1 \\<alpha>' i' rule \\<alpha>''\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  LeftDerives1 \\<alpha>' i' rule \\<alpha>''", "have is_word_a1': \"is_word a1'\""], ["proof (prove)\nusing this:\n  LeftDerives1 \\<alpha>' i' rule \\<alpha>''\n\ngoal (1 subgoal):\n 1. is_word a1'", "using LeftDerives1_splits_at_is_word A"], ["proof (prove)\nusing this:\n  LeftDerives1 \\<alpha>' i' rule \\<alpha>''\n  \\<lbrakk>LeftDerives1 ?\\<delta> ?i ?r ?s;\n   splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> is_word ?\\<alpha>\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n\ngoal (1 subgoal):\n 1. is_word a1'", "by blast"], ["proof (state)\nthis:\n  is_word a1'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have A_eq_fst_rule: \"A = fst rule\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A = fst rule", "using A LeftDerivationIntro_examine_rule ldintro rule"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  \\<lbrakk>LeftDerivationIntro ?\\<alpha> ?i ?r ?ix ?D ?j ?\\<gamma>;\n   splits_at ?\\<alpha> ?i ?\\<alpha>1.0 ?M ?\\<alpha>2.0\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<eta>.\n                       ?M = fst ?r \\<and>\n                       \\<eta> = snd ?r \\<and> (?M, \\<eta>) \\<in> \\<RR>\n  LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1)\n   (ladder_\\<gamma> \\<alpha> D L 1)\n  e = (i', rule)\n\ngoal (1 subgoal):\n 1. A = fst rule", "by fastforce"], ["proof (state)\nthis:\n  A = fst rule\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ix_bound: \"ix < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ix < length w", "using ix w rule ldintro LeftDerivationIntro_def snd_conv"], ["proof (prove)\nusing this:\n  ix = ladder_ix L 1\n  w = snd rule\n  e = (i', rule)\n  LeftDerivationIntro \\<alpha>' i' (snd e) ix E (ladder_j L 1)\n   (ladder_\\<gamma> \\<alpha> D L 1)\n  LeftDerivationIntro ?\\<alpha> ?i ?r ?ix ?D ?j ?\\<gamma> =\n  (\\<exists>\\<beta>.\n      LeftDerives1 ?\\<alpha> ?i ?r \\<beta> \\<and>\n      ?ix < length (snd ?r) \\<and>\n      snd ?r ! ?ix = ?\\<gamma> ! ?j \\<and>\n      LeftDerivationFix \\<beta> (?i + ?ix) ?D ?j ?\\<gamma>)\n  snd (?x1.0, ?x2.0) = ?x2.0\n\ngoal (1 subgoal):\n 1. ix < length w", "by auto"], ["proof (state)\nthis:\n  ix < length w\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  ix < length w", "have \"\\<exists> w1 W w2. splits_at w ix w1 W w2\""], ["proof (prove)\nusing this:\n  ix < length w\n\ngoal (1 subgoal):\n 1. \\<exists>w1 W w2. splits_at w ix w1 W w2", "using splits_at_def"], ["proof (prove)\nusing this:\n  ix < length w\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>w1 W w2. splits_at w ix w1 W w2", "by blast"], ["proof (state)\nthis:\n  \\<exists>w1 W w2. splits_at w ix w1 W w2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>w1 W w2. splits_at w ix w1 W w2", "obtain w1 W w2 where W: \"splits_at w ix w1 W w2\""], ["proof (prove)\nusing this:\n  \\<exists>w1 W w2. splits_at w ix w1 W w2\n\ngoal (1 subgoal):\n 1. (\\<And>w1 W w2.\n        splits_at w ix w1 W w2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at w ix w1 W w2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have a1'_w_a2: \"a1'@w@a2 = ladder_stepdown_\\<alpha>_0 \\<alpha> D L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1' @ w @ a2 = ladder_stepdown_\\<alpha>_0 \\<alpha> D L", "using ladder_stepdown_\\<alpha>_0_altdef \"2.hyps\" A \\<alpha>'_alt e i'_alt less.prems(8) n rule \n          snd_conv w"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivationLadder ?\\<alpha> ?D ?L ?\\<gamma>; 1 < length ?L;\n   splits_at (ladder_\\<alpha> ?\\<alpha> ?D ?L 1) (ladder_i ?L 1) ?a1.0 ?A\n    ?a2.0\\<rbrakk>\n  \\<Longrightarrow> ladder_stepdown_\\<alpha>_0 ?\\<alpha> ?D ?L =\n                    ?a1.0 @ snd (snd (?D ! ladder_n ?L 0)) @ ?a2.0\n  1 < length L\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  \\<alpha>' = ladder_\\<alpha> \\<alpha> D L 1\n  e = D ! n\n  i' = ladder_i L 1\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  n = ladder_n L 0\n  e = (i', rule)\n  snd (?x1.0, ?x2.0) = ?x2.0\n  w = snd rule\n\ngoal (1 subgoal):\n 1. a1' @ w @ a2 = ladder_stepdown_\\<alpha>_0 \\<alpha> D L", "by force"], ["proof (state)\nthis:\n  a1' @ w @ a2 = ladder_stepdown_\\<alpha>_0 \\<alpha> D L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivationLadder_stepdown[OF less.prems(8) 2]"], ["proof (chain)\npicking this:\n  \\<exists>L'.\n     LeftDerivationLadder (ladder_stepdown_\\<alpha>_0 \\<alpha> D L)\n      (drop (ladder_stepdown_diff L) D) L'\n      (terminals (drop r p @ [X])) \\<and>\n     length L' = length L - 1 \\<and>\n     ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n     ladder_last_j L' = ladder_last_j L", "obtain L' where L':\n          \"LeftDerivationLadder (a1'@(w@a2)) (drop (ladder_stepdown_diff L) D) L'\n           (terminals (drop r p @ [X])) \\<and>\n           length L' = length L - 1 \\<and>\n           ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and> ladder_last_j L' = ladder_last_j L\""], ["proof (prove)\nusing this:\n  \\<exists>L'.\n     LeftDerivationLadder (ladder_stepdown_\\<alpha>_0 \\<alpha> D L)\n      (drop (ladder_stepdown_diff L) D) L'\n      (terminals (drop r p @ [X])) \\<and>\n     length L' = length L - 1 \\<and>\n     ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n     ladder_last_j L' = ladder_last_j L\n\ngoal (1 subgoal):\n 1. (\\<And>L'.\n        LeftDerivationLadder (a1' @ w @ a2)\n         (drop (ladder_stepdown_diff L) D) L'\n         (terminals (drop r p @ [X])) \\<and>\n        length L' = length L - 1 \\<and>\n        ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n        ladder_last_j L' = ladder_last_j L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using a1'_w_a2"], ["proof (prove)\nusing this:\n  \\<exists>L'.\n     LeftDerivationLadder (ladder_stepdown_\\<alpha>_0 \\<alpha> D L)\n      (drop (ladder_stepdown_diff L) D) L'\n      (terminals (drop r p @ [X])) \\<and>\n     length L' = length L - 1 \\<and>\n     ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n     ladder_last_j L' = ladder_last_j L\n  a1' @ w @ a2 = ladder_stepdown_\\<alpha>_0 \\<alpha> D L\n\ngoal (1 subgoal):\n 1. (\\<And>L'.\n        LeftDerivationLadder (a1' @ w @ a2)\n         (drop (ladder_stepdown_diff L) D) L'\n         (terminals (drop r p @ [X])) \\<and>\n        length L' = length L - 1 \\<and>\n        ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n        ladder_last_j L' = ladder_last_j L \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ladder_i_L'_0: \"ladder_i L' 0 = i' + ix\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_i L' 0 = i' + ix", "using L' i'_alt ix"], ["proof (prove)\nusing this:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L\n  i' = ladder_i L 1\n  ix = ladder_ix L 1\n\ngoal (1 subgoal):\n 1. ladder_i L' 0 = i' + ix", "by auto"], ["proof (state)\nthis:\n  ladder_i L' 0 = i' + ix\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ladder_last_j_L': \"ladder_last_j L' = length (drop r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_last_j L' = length (drop r p)", "using L' less.prems"], ["proof (prove)\nusing this:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. ladder_last_j L' = length (drop r p)", "by auto"], ["proof (state)\nthis:\n  ladder_last_j L' = length (drop r p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from L'"], ["proof (chain)\npicking this:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L", "have this1: \"LeftDerivationLadder (a1'@(w@a2)) (drop (ladder_stepdown_diff L) D) L'\n           (terminals (drop r p @ [X]))\""], ["proof (prove)\nusing this:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L\n\ngoal (1 subgoal):\n 1. LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n     (terminals (drop r p @ [X]))", "by blast"], ["proof (state)\nthis:\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have this2: \"length a1' \\<le> ladder_i L' 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a1' \\<le> ladder_i L' 0", "using A ladder_i_L'_0 splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  ladder_i L' 0 = i' + ix\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. length a1' \\<le> ladder_i L' 0", "by auto"], ["proof (state)\nthis:\n  length a1' \\<le> ladder_i L' 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivationLadder_cut_prefix[OF this1 is_word_a1' this2]"], ["proof (chain)\npicking this:\n  \\<exists>D' L'a \\<gamma>'.\n     terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n     LeftDerivationLadder (w @ a2) D' L'a \\<gamma>' \\<and>\n     D' =\n     derivation_shift (drop (ladder_stepdown_diff L) D) (length a1')\n      0 \\<and>\n     length L'a = length L' \\<and>\n     ladder_i L'a 0 + length a1' = ladder_i L' 0 \\<and>\n     ladder_last_j L'a + length a1' = ladder_last_j L'", "obtain D' L'' \\<gamma>' where L'':\n          \"terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n            LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n            D' = derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n            length L'' = length L' \\<and>\n            ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and> \n            ladder_last_j L'' + length a1' = ladder_last_j L'\""], ["proof (prove)\nusing this:\n  \\<exists>D' L'a \\<gamma>'.\n     terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n     LeftDerivationLadder (w @ a2) D' L'a \\<gamma>' \\<and>\n     D' =\n     derivation_shift (drop (ladder_stepdown_diff L) D) (length a1')\n      0 \\<and>\n     length L'a = length L' \\<and>\n     ladder_i L'a 0 + length a1' = ladder_i L' 0 \\<and>\n     ladder_last_j L'a + length a1' = ladder_last_j L'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>' D' L''.\n        terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n        LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n        D' =\n        derivation_shift (drop (ladder_stepdown_diff L) D) (length a1')\n         0 \\<and>\n        length L'' = length L' \\<and>\n        ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n        ladder_last_j L'' + length a1' = ladder_last_j L' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have length_a1'_bound: \"length a1' \\<le> length (drop r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p)", "using L'' ladder_last_j_L'"], ["proof (prove)\nusing this:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n  ladder_last_j L' = length (drop r p)\n\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p)", "by linarith"], ["proof (state)\nthis:\n  length a1' \\<le> length (drop r p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length a1' \\<le> length (drop r p)", "have is_prefix_a1'_drop_r_p: \"is_prefix a1' (terminals (drop r p))\""], ["proof (prove)\nusing this:\n  length a1' \\<le> length (drop r p)\n\ngoal (1 subgoal):\n 1. is_prefix a1' (terminals (drop r p))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p) \\<Longrightarrow>\n    is_prefix a1' (terminals (drop r p))", "have f1: \"\\<forall>ss ssa ssb. \\<not> is_prefix (ss::symbol list) (ssa @ ssb) \\<or> is_prefix ss ssa \\<or> (\\<exists>ssc. ssc \\<noteq> [] \\<and> is_prefix ssc ssb \\<and> ss = ssa @ ssc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ss ssa ssb.\n       \\<not> is_prefix ss (ssa @ ssb) \\<or>\n       is_prefix ss ssa \\<or>\n       (\\<exists>ssc.\n           ssc \\<noteq> [] \\<and> is_prefix ssc ssb \\<and> ss = ssa @ ssc)", "by (simp add: is_prefix_of_append)"], ["proof (state)\nthis:\n  \\<forall>ss ssa ssb.\n     \\<not> is_prefix ss (ssa @ ssb) \\<or>\n     is_prefix ss ssa \\<or>\n     (\\<exists>ssc.\n         ssc \\<noteq> [] \\<and> is_prefix ssc ssb \\<and> ss = ssa @ ssc)\n\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p) \\<Longrightarrow>\n    is_prefix a1' (terminals (drop r p))", "have f2: \"\\<And>ss ssa. is_prefix ((ss::symbol list) @ ssa) ss \\<or> \\<not> is_prefix ssa []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss ssa. is_prefix (ss @ ssa) ss \\<or> \\<not> is_prefix ssa []", "by (metis (no_types) append_Nil2 is_prefix_cancel)"], ["proof (state)\nthis:\n  is_prefix (?ss @ ?ssa) ?ss \\<or> \\<not> is_prefix ?ssa []\n\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p) \\<Longrightarrow>\n    is_prefix a1' (terminals (drop r p))", "have f3: \"\\<And>ss. is_prefix ss [] \\<or> \\<not> is_prefix (terminals (drop r p) @ ss) a1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss.\n       is_prefix ss [] \\<or>\n       \\<not> is_prefix (terminals (drop r p) @ ss) a1'", "by (metis (no_types) drop_eq_Nil is_prefix_append length_a1'_bound length_terminals)"], ["proof (state)\nthis:\n  is_prefix ?ss [] \\<or> \\<not> is_prefix (terminals (drop r p) @ ?ss) a1'\n\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p) \\<Longrightarrow>\n    is_prefix a1' (terminals (drop r p))", "have \"is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'", "by (metis (no_types) append_Nil2 is_prefix_cancel is_prefix_empty)"], ["proof (state)\nthis:\n  is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'\n\ngoal (1 subgoal):\n 1. length a1' \\<le> length (drop r p) \\<Longrightarrow>\n    is_prefix a1' (terminals (drop r p))", "then"], ["proof (chain)\npicking this:\n  is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'", "show ?thesis"], ["proof (prove)\nusing this:\n  is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'\n\ngoal (1 subgoal):\n 1. is_prefix a1' (terminals (drop r p))", "using f3 f2 f1"], ["proof (prove)\nusing this:\n  is_prefix a1' (a1' @ \\<gamma>') \\<and> is_prefix a1' a1'\n  is_prefix ?ss [] \\<or> \\<not> is_prefix (terminals (drop r p) @ ?ss) a1'\n  is_prefix (?ss @ ?ssa) ?ss \\<or> \\<not> is_prefix ?ssa []\n  \\<forall>ss ssa ssb.\n     \\<not> is_prefix ss (ssa @ ssb) \\<or>\n     is_prefix ss ssa \\<or>\n     (\\<exists>ssc.\n         ssc \\<noteq> [] \\<and> is_prefix ssc ssb \\<and> ss = ssa @ ssc)\n\ngoal (1 subgoal):\n 1. is_prefix a1' (terminals (drop r p))", "by (metis L'' terminals_append)"], ["proof (state)\nthis:\n  is_prefix a1' (terminals (drop r p))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_prefix a1' (terminals (drop r p))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain r' where r': \"r' = r + i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'. r' = r + i' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r' = r + i'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have length_a1'_eq_i': \"length a1' = i'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a1' = i'", "using A less_or_eq_imp_le min.absorb2 splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  ?m < ?n \\<or> ?m = ?n \\<Longrightarrow> ?m \\<le> ?n\n  ?b \\<le> ?a \\<Longrightarrow> min ?a ?b = ?b\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. length a1' = i'", "by auto"], ["proof (state)\nthis:\n  length a1' = i'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have a1'_r': \"r \\<le> r' \\<and> r' \\<le> length p \\<and> \n          terminals (drop r p) = a1' @ (terminals (drop r' p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> r' \\<and>\n    r' \\<le> length p \\<and>\n    terminals (drop r p) = a1' @ terminals (drop r' p)", "using is_prefix_a1'_drop_r_p r'"], ["proof (prove)\nusing this:\n  is_prefix a1' (terminals (drop r p))\n  r' = r + i'\n\ngoal (1 subgoal):\n 1. r \\<le> r' \\<and>\n    r' \\<le> length p \\<and>\n    terminals (drop r p) = a1' @ terminals (drop r' p)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "have \"\\<exists> q. terminals (drop r p) = a1' @ q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q. terminals (drop r p) = a1' @ q", "using is_prefix_a1'_drop_r_p"], ["proof (prove)\nusing this:\n  is_prefix a1' (terminals (drop r p))\n\ngoal (1 subgoal):\n 1. \\<exists>q. terminals (drop r p) = a1' @ q", "by (metis is_prefix_unsplit)"], ["proof (state)\nthis:\n  \\<exists>q. terminals (drop r p) = a1' @ q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "then"], ["proof (chain)\npicking this:\n  \\<exists>q. terminals (drop r p) = a1' @ q", "obtain q where q: \"terminals (drop r p) = a1' @ q\""], ["proof (prove)\nusing this:\n  \\<exists>q. terminals (drop r p) = a1' @ q\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        terminals (drop r p) = a1' @ q \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  terminals (drop r p) = a1' @ q\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "have \"q = drop i' (terminals (drop r p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = drop i' (terminals (drop r p))", "using length_a1'_eq_i' q"], ["proof (prove)\nusing this:\n  length a1' = i'\n  terminals (drop r p) = a1' @ q\n\ngoal (1 subgoal):\n 1. q = drop i' (terminals (drop r p))", "by (simp add: append_eq_conv_conj)"], ["proof (state)\nthis:\n  q = drop i' (terminals (drop r p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "then"], ["proof (chain)\npicking this:\n  q = drop i' (terminals (drop r p))", "have \"q = terminals (drop i' (drop r p))\""], ["proof (prove)\nusing this:\n  q = drop i' (terminals (drop r p))\n\ngoal (1 subgoal):\n 1. q = terminals (drop i' (drop r p))", "by simp"], ["proof (state)\nthis:\n  q = terminals (drop i' (drop r p))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "then"], ["proof (chain)\npicking this:\n  q = terminals (drop i' (drop r p))", "have \"q = terminals (drop r' p)\""], ["proof (prove)\nusing this:\n  q = terminals (drop i' (drop r p))\n\ngoal (1 subgoal):\n 1. q = terminals (drop r' p)", "by (simp add: r' add.commute)"], ["proof (state)\nthis:\n  q = terminals (drop r' p)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix a1' (terminals (drop r p)); r' = r + i'\\<rbrakk>\n    \\<Longrightarrow> r \\<le> r' \\<and>\n                      r' \\<le> length p \\<and>\n                      terminals (drop r p) = a1' @ terminals (drop r' p)", "with q"], ["proof (chain)\npicking this:\n  terminals (drop r p) = a1' @ q\n  q = terminals (drop r' p)", "show ?thesis"], ["proof (prove)\nusing this:\n  terminals (drop r p) = a1' @ q\n  q = terminals (drop r' p)\n\ngoal (1 subgoal):\n 1. r \\<le> r' \\<and>\n    r' \\<le> length p \\<and>\n    terminals (drop r p) = a1' @ terminals (drop r' p)", "using add.commute diff_add_inverse le_Suc_ex le_add1 le_diff_conv length_a1'_bound \n              length_a1'_eq_i' length_drop r r'"], ["proof (prove)\nusing this:\n  terminals (drop r p) = a1' @ q\n  q = terminals (drop r' p)\n  ?a + ?b = ?b + ?a\n  ?n + ?m - ?n = ?m\n  ?k \\<le> ?l \\<Longrightarrow> \\<exists>n. ?l = ?k + n\n  ?n \\<le> ?n + ?m\n  (?j - ?k \\<le> ?i) = (?j \\<le> ?i + ?k)\n  length a1' \\<le> length (drop r p)\n  length a1' = i'\n  length (drop ?n ?xs) = length ?xs - ?n\n  r \\<le> length p\n  r' = r + i'\n\ngoal (1 subgoal):\n 1. r \\<le> r' \\<and>\n    r' \\<le> length p \\<and>\n    terminals (drop r p) = a1' @ terminals (drop r' p)", "by auto"], ["proof (state)\nthis:\n  r \\<le> r' \\<and>\n  r' \\<le> length p \\<and>\n  terminals (drop r p) = a1' @ terminals (drop r' p)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<le> r' \\<and>\n  r' \\<le> length p \\<and>\n  terminals (drop r p) = a1' @ terminals (drop r' p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have ladder_i_L'': \"ladder_i L'' 0 = ix\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_i L'' 0 = ix", "using L'' ladder_i_L'_0 length_a1'_eq_i' \n          add.commute add_left_cancel"], ["proof (prove)\nusing this:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n  ladder_i L' 0 = i' + ix\n  length a1' = i'\n  ?a + ?b = ?b + ?a\n  (?a + ?b = ?a + ?c) = (?b = ?c)\n\ngoal (1 subgoal):\n 1. ladder_i L'' 0 = ix", "by linarith"], ["proof (state)\nthis:\n  ladder_i L'' 0 = ix\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have L''_ladder: \"LeftDerivationLadder (w @ a2) D' L'' \\<gamma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationLadder (w @ a2) D' L'' \\<gamma>'", "using L''"], ["proof (prove)\nusing this:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n\ngoal (1 subgoal):\n 1. LeftDerivationLadder (w @ a2) D' L'' \\<gamma>'", "by blast"], ["proof (state)\nthis:\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"ladder_i L'' 0 < length w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_i L'' 0 < length w", "using ladder_i_L'' ix_bound"], ["proof (prove)\nusing this:\n  ladder_i L'' 0 = ix\n  ix < length w\n\ngoal (1 subgoal):\n 1. ladder_i L'' 0 < length w", "by blast"], ["proof (state)\nthis:\n  ladder_i L'' 0 < length w\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivationLadder_cut_appendix[OF L''_ladder this]"], ["proof (chain)\npicking this:\n  \\<exists>E F \\<gamma>1 \\<gamma>2 L'.\n     D' = E @ F \\<and>\n     \\<gamma>' = \\<gamma>1 @ \\<gamma>2 \\<and>\n     LeftDerivationLadder w E L' \\<gamma>1 \\<and>\n     derivation_ge F (length \\<gamma>1) \\<and>\n     LeftDerivation a2 (derivation_shift F (length \\<gamma>1) 0)\n      \\<gamma>2 \\<and>\n     length L' = length L'' \\<and>\n     ladder_i L' 0 = ladder_i L'' 0 \\<and>\n     ladder_last_j L' = ladder_last_j L''", "obtain E' F' \\<gamma>1' \\<gamma>2' L''' where L''':\n          \"D' = E' @ F' \\<and>\n           \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n           LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n           derivation_ge F' (length \\<gamma>1') \\<and>\n           LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0) \\<gamma>2' \\<and>\n           length L''' = length L'' \\<and> ladder_i L''' 0 = ladder_i L'' 0 \\<and> \n           ladder_last_j L''' = ladder_last_j L''\""], ["proof (prove)\nusing this:\n  \\<exists>E F \\<gamma>1 \\<gamma>2 L'.\n     D' = E @ F \\<and>\n     \\<gamma>' = \\<gamma>1 @ \\<gamma>2 \\<and>\n     LeftDerivationLadder w E L' \\<gamma>1 \\<and>\n     derivation_ge F (length \\<gamma>1) \\<and>\n     LeftDerivation a2 (derivation_shift F (length \\<gamma>1) 0)\n      \\<gamma>2 \\<and>\n     length L' = length L'' \\<and>\n     ladder_i L' 0 = ladder_i L'' 0 \\<and>\n     ladder_last_j L' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. (\\<And>E' F' \\<gamma>1' \\<gamma>2' L'''.\n        D' = E' @ F' \\<and>\n        \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n        LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n        derivation_ge F' (length \\<gamma>1') \\<and>\n        LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n         \\<gamma>2' \\<and>\n        length L''' = length L'' \\<and>\n        ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n        ladder_last_j L''' = ladder_last_j L'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain z where z: \"z = Item (A, w) (length w) (charslength (take r' p)) k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z =\n        Item (A, w) (length w) (charslength (take r' p))\n         k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z = Item (A, w) (length w) (charslength (take r' p)) k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z1: \"length L''' < length L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length L''' < length L", "using \"2.hyps\" L' L'' L'''"], ["proof (prove)\nusing this:\n  1 < length L\n  LeftDerivationLadder (a1' @ w @ a2) (drop (ladder_stepdown_diff L) D) L'\n   (terminals (drop r p @ [X])) \\<and>\n  length L' = length L - 1 \\<and>\n  ladder_i L' 0 = ladder_i L 1 + ladder_ix L 1 \\<and>\n  ladder_last_j L' = ladder_last_j L\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. length L''' < length L", "by linarith"], ["proof (state)\nthis:\n  length L''' < length L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z2: \"p \\<in> \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP>", "by (simp add: p_dom)"], ["proof (state)\nthis:\n  p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z3: \"charslength p = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p = k", "using p_charslength"], ["proof (prove)\nusing this:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. charslength p = k", "by auto"], ["proof (state)\nthis:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z4: \"X \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> T", "by (simp add: X_dom)"], ["proof (state)\nthis:\n  X \\<in> T\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z5: \"T \\<subseteq> \\<X> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<X> k", "by (simp add: less.prems(4))"], ["proof (state)\nthis:\n  T \\<subseteq> \\<X> k\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"rule \\<in> \\<RR>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rule \\<in> \\<RR>", "using Derives1_rule LeftDerives1_implies_Derives1 \\<alpha>'_\\<alpha>''"], ["proof (prove)\nusing this:\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?r \\<in> \\<RR>\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n  LeftDerives1 \\<alpha>' i' rule \\<alpha>''\n\ngoal (1 subgoal):\n 1. rule \\<in> \\<RR>", "by blast"], ["proof (state)\nthis:\n  rule \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  rule \\<in> \\<RR>", "have z6: \"(A, w @ []) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  rule \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (A, w @ []) \\<in> \\<RR>", "using w A_eq_fst_rule"], ["proof (prove)\nusing this:\n  rule \\<in> \\<RR>\n  w = snd rule\n  A = fst rule\n\ngoal (1 subgoal):\n 1. (A, w @ []) \\<in> \\<RR>", "by auto"], ["proof (state)\nthis:\n  (A, w @ []) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z7: \"r' \\<le> length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<le> length p", "using a1'_r'"], ["proof (prove)\nusing this:\n  r \\<le> r' \\<and>\n  r' \\<le> length p \\<and>\n  terminals (drop r p) = a1' @ terminals (drop r' p)\n\ngoal (1 subgoal):\n 1. r' \\<le> length p", "by linarith"], ["proof (state)\nthis:\n  r' \\<le> length p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"leftderives [\\<SS>] ((terminals (take r p))@[N]@\\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)", "using leftderives_start"], ["proof (prove)\nusing this:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)", "have \"leftderives [\\<SS>] ((terminals (take r p))@(\\<alpha>@\\<beta>)@\\<gamma>)\""], ["proof (prove)\nusing this:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>]\n     (terminals (take r p) @ (\\<alpha> @ \\<beta>) @ \\<gamma>)", "by (metis \\<PP>_wellformed is_derivation_def is_derivation_is_sentence is_sentence_concat \n            is_word_terminals_take leftderives_implies_derives leftderives_rule_step p_dom rule_dom)"], ["proof (state)\nthis:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ (\\<alpha> @ \\<beta>) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ (\\<alpha> @ \\<beta>) @ \\<gamma>)", "have \"leftderives [\\<SS>] ((terminals (take r p))@a1@([A]@a2@\\<beta>)@\\<gamma>)\""], ["proof (prove)\nusing this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ (\\<alpha> @ \\<beta>) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>]\n     (terminals (take r p) @ a1 @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)", "using A splits_at_combine append_assoc"], ["proof (prove)\nusing this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ (\\<alpha> @ \\<beta>) @ \\<gamma>)\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n  (?xs @ ?ys) @ ?zs = ?xs @ ?ys @ ?zs\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>]\n     (terminals (take r p) @ a1 @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)", "by fastforce"], ["proof (state)\nthis:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1 @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1 @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)", "have z8_helper: \"leftderives [\\<SS>] ((terminals (take r p))@a1'@([A]@a2@\\<beta>)@\\<gamma>)\""], ["proof (prove)\nusing this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1 @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>]\n     (terminals (take r p) @ a1' @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)", "by (meson A LeftDerivation_implies_leftderives \\<PP>_wellformed is_derivation_def \n            is_derivation_is_sentence is_sentence_concat is_word_terminals_take \n            leftderives_implies_derives leftderives_trans_step p_dom)"], ["proof (state)\nthis:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1' @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have join_terminals: \"(terminals (take r p))@a1' = terminals (take r' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals (take r p) @ a1' = terminals (take r' p)", "by (metis is_prefix_a1'_drop_r_p length_a1'_eq_i' r' take_add take_prefix \n            terminals_drop terminals_take)"], ["proof (state)\nthis:\n  terminals (take r p) @ a1' = terminals (take r' p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from z8_helper join_terminals"], ["proof (chain)\npicking this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1' @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)\n  terminals (take r p) @ a1' = terminals (take r' p)", "have z8: \n          \"leftderives [\\<SS>] (terminals (take r' p) @ [A] @ a2 @ \\<beta> @ \\<gamma>)\""], ["proof (prove)\nusing this:\n  leftderives [\\<SS>]\n   (terminals (take r p) @ a1' @ ([A] @ a2 @ \\<beta>) @ \\<gamma>)\n  terminals (take r p) @ a1' = terminals (take r' p)\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>]\n     (terminals (take r' p) @ [A] @ a2 @ \\<beta> @ \\<gamma>)", "by (metis append_assoc)"], ["proof (state)\nthis:\n  leftderives [\\<SS>]\n   (terminals (take r' p) @ [A] @ a2 @ \\<beta> @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<gamma>'_altdef: \"\\<gamma>' = terminals (drop r' p @ [X])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma>' = terminals (drop r' p @ [X])", "using L'' a1'_r'"], ["proof (prove)\nusing this:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n  r \\<le> r' \\<and>\n  r' \\<le> length p \\<and>\n  terminals (drop r p) = a1' @ terminals (drop r' p)\n\ngoal (1 subgoal):\n 1. \\<gamma>' = terminals (drop r' p @ [X])", "by auto"], ["proof (state)\nthis:\n  \\<gamma>' = terminals (drop r' p @ [X])\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"ladder_last_j L''' + length a1' = length (drop r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_last_j L''' + length a1' = length (drop r p)", "using L'' L''' ladder_last_j_L'"], ["proof (prove)\nusing this:\n  terminals (drop r p @ [X]) = a1' @ \\<gamma>' \\<and>\n  LeftDerivationLadder (w @ a2) D' L'' \\<gamma>' \\<and>\n  D' =\n  derivation_shift (drop (ladder_stepdown_diff L) D) (length a1') 0 \\<and>\n  length L'' = length L' \\<and>\n  ladder_i L'' 0 + length a1' = ladder_i L' 0 \\<and>\n  ladder_last_j L'' + length a1' = ladder_last_j L'\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n  ladder_last_j L' = length (drop r p)\n\ngoal (1 subgoal):\n 1. ladder_last_j L''' + length a1' = length (drop r p)", "by linarith"], ["proof (state)\nthis:\n  ladder_last_j L''' + length a1' = length (drop r p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  ladder_last_j L''' + length a1' = length (drop r p)", "have ladder_last_j_L'''_\\<gamma>': \"ladder_last_j L''' = length \\<gamma>' - 1\""], ["proof (prove)\nusing this:\n  ladder_last_j L''' + length a1' = length (drop r p)\n\ngoal (1 subgoal):\n 1. ladder_last_j L''' = length \\<gamma>' - 1", "by (simp add: \\<gamma>'_altdef length_a1'_eq_i' r')"], ["proof (state)\nthis:\n  ladder_last_j L''' = length \\<gamma>' - 1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  ladder_last_j L''' = length \\<gamma>' - 1", "have \"length \\<gamma>' - 1 < length \\<gamma>1'\""], ["proof (prove)\nusing this:\n  ladder_last_j L''' = length \\<gamma>' - 1\n\ngoal (1 subgoal):\n 1. length \\<gamma>' - 1 < length \\<gamma>1'", "using L''' ladder_last_j_bound"], ["proof (prove)\nusing this:\n  ladder_last_j L''' = length \\<gamma>' - 1\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n  LeftDerivationLadder ?\\<alpha> ?D ?L ?\\<gamma> \\<Longrightarrow>\n  ladder_last_j ?L < length ?\\<gamma>\n\ngoal (1 subgoal):\n 1. length \\<gamma>' - 1 < length \\<gamma>1'", "by fastforce"], ["proof (state)\nthis:\n  length \\<gamma>' - 1 < length \\<gamma>1'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length \\<gamma>' - 1 < length \\<gamma>1'", "have \"length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'\""], ["proof (prove)\nusing this:\n  length \\<gamma>' - 1 < length \\<gamma>1'\n\ngoal (1 subgoal):\n 1. length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'", "using L'''"], ["proof (prove)\nusing this:\n  length \\<gamma>' - 1 < length \\<gamma>1'\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'", "by simp"], ["proof (state)\nthis:\n  length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'", "have \"length \\<gamma>2' = 0\""], ["proof (prove)\nusing this:\n  length \\<gamma>1' + length \\<gamma>2' - 1 < length \\<gamma>1'\n\ngoal (1 subgoal):\n 1. length \\<gamma>2' = 0", "by arith"], ["proof (state)\nthis:\n  length \\<gamma>2' = 0\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length \\<gamma>2' = 0", "have \\<gamma>2': \"\\<gamma>2' = []\""], ["proof (prove)\nusing this:\n  length \\<gamma>2' = 0\n\ngoal (1 subgoal):\n 1. \\<gamma>2' = []", "by simp"], ["proof (state)\nthis:\n  \\<gamma>2' = []\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<gamma>2' = []", "have \\<gamma>1': \"\\<gamma>1' = terminals (drop r' p @ [X])\""], ["proof (prove)\nusing this:\n  \\<gamma>2' = []\n\ngoal (1 subgoal):\n 1. \\<gamma>1' = terminals (drop r' p @ [X])", "using \\<gamma>'_altdef L'''"], ["proof (prove)\nusing this:\n  \\<gamma>2' = []\n  \\<gamma>' = terminals (drop r' p @ [X])\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. \\<gamma>1' = terminals (drop r' p @ [X])", "by auto"], ["proof (state)\nthis:\n  \\<gamma>1' = terminals (drop r' p @ [X])\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<gamma>1' = terminals (drop r' p @ [X])", "have z9: \"LeftDerivationLadder w E' L''' (terminals (drop r' p @ [X]))\""], ["proof (prove)\nusing this:\n  \\<gamma>1' = terminals (drop r' p @ [X])\n\ngoal (1 subgoal):\n 1. LeftDerivationLadder w E' L''' (terminals (drop r' p @ [X]))", "using L'''"], ["proof (prove)\nusing this:\n  \\<gamma>1' = terminals (drop r' p @ [X])\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n\ngoal (1 subgoal):\n 1. LeftDerivationLadder w E' L''' (terminals (drop r' p @ [X]))", "by blast"], ["proof (state)\nthis:\n  LeftDerivationLadder w E' L''' (terminals (drop r' p @ [X]))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z10: \"ladder_last_j L''' = length (drop r' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_last_j L''' = length (drop r' p)", "using \\<gamma>'_altdef ladder_last_j_L'''_\\<gamma>'"], ["proof (prove)\nusing this:\n  \\<gamma>' = terminals (drop r' p @ [X])\n  ladder_last_j L''' = length \\<gamma>' - 1\n\ngoal (1 subgoal):\n 1. ladder_last_j L''' = length (drop r' p)", "by auto"], ["proof (state)\nthis:\n  ladder_last_j L''' = length (drop r' p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "note z11 = k'"], ["proof (state)\nthis:\n  k' = k + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have z12: \"z = Item (A, w @ []) (length w) (charslength (take r' p)) k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z = Item (A, w @ []) (length w) (charslength (take r' p)) k'", "using z"], ["proof (prove)\nusing this:\n  z = Item (A, w) (length w) (charslength (take r' p)) k'\n\ngoal (1 subgoal):\n 1. z = Item (A, w @ []) (length w) (charslength (take r' p)) k'", "by simp"], ["proof (state)\nthis:\n  z = Item (A, w @ []) (length w) (charslength (take r' p)) k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "note z13 = less.prems(12)"], ["proof (state)\nthis:\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "note induct = less.hyps(1)[of L''' A w \"[]\" r' \"a2@\\<beta>@\\<gamma>\" E' z]"], ["proof (state)\nthis:\n  \\<lbrakk>length L''' < length L; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; (A, w @ []) \\<in> \\<RR>;\n   r' \\<le> length p;\n   leftderives [\\<SS>]\n    (terminals (take r' p) @ [A] @ a2 @ \\<beta> @ \\<gamma>);\n   LeftDerivationLadder w E' L''' (terminals (drop r' p @ [X]));\n   ladder_last_j L''' = length (drop r' p);\n   k' = k + length (chars_of_token X);\n   z = Item (A, w @ []) (length w) (charslength (take r' p)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> z \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "note z_in_I = induct[OF z1 z2 z3 z4 z5 z6 z7 z8 z9 z10 z11 z12 z13]"], ["proof (state)\nthis:\n  z \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have a2_derives_empty: \"derives a2 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a2 []", "using L''' \\<gamma>2'"], ["proof (prove)\nusing this:\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n  \\<gamma>2' = []\n\ngoal (1 subgoal):\n 1. derives a2 []", "using LeftDerivation_implies_leftderives leftderives_implies_derives"], ["proof (prove)\nusing this:\n  D' = E' @ F' \\<and>\n  \\<gamma>' = \\<gamma>1' @ \\<gamma>2' \\<and>\n  LeftDerivationLadder w E' L''' \\<gamma>1' \\<and>\n  derivation_ge F' (length \\<gamma>1') \\<and>\n  LeftDerivation a2 (derivation_shift F' (length \\<gamma>1') 0)\n   \\<gamma>2' \\<and>\n  length L''' = length L'' \\<and>\n  ladder_i L''' 0 = ladder_i L'' 0 \\<and>\n  ladder_last_j L''' = ladder_last_j L''\n  \\<gamma>2' = []\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n\ngoal (1 subgoal):\n 1. derives a2 []", "by blast"], ["proof (state)\nthis:\n  derives a2 []\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain x1 where x1: \"x1 = Item (N, \\<alpha>@\\<beta>) (length a1) \n          (charslength (take r p)) (charslength (take r' p))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x1.\n        x1 =\n        Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n         (charslength (take r' p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain q where q: \"q = take r' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q. q = take r' p \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = take r' p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  q = take r' p", "have is_prefix_q_p: \"is_prefix q p\""], ["proof (prove)\nusing this:\n  q = take r' p\n\ngoal (1 subgoal):\n 1. is_prefix q p", "by simp"], ["proof (state)\nthis:\n  is_prefix q p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_prefix q p", "have q_in_Prefixes: \"q \\<in> Prefixes p\""], ["proof (prove)\nusing this:\n  is_prefix q p\n\ngoal (1 subgoal):\n 1. q \\<in> Prefixes p", "using Prefixes_is_prefix"], ["proof (prove)\nusing this:\n  is_prefix q p\n  (?q \\<in> Prefixes ?p) = is_prefix ?q ?p\n\ngoal (1 subgoal):\n 1. q \\<in> Prefixes p", "by blast"], ["proof (state)\nthis:\n  q \\<in> Prefixes p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  q \\<in> Prefixes p", "have wellformed_q: \"wellformed_tokens q\""], ["proof (prove)\nusing this:\n  q \\<in> Prefixes p\n\ngoal (1 subgoal):\n 1. wellformed_tokens q", "using p_dom is_prefix_q_p prefixes_are_paths' \\<PP>_wellformed"], ["proof (prove)\nusing this:\n  q \\<in> Prefixes p\n  p \\<in> \\<PP>\n  is_prefix q p\n  \\<lbrakk>?p \\<in> \\<PP>; is_prefix ?q ?p\\<rbrakk>\n  \\<Longrightarrow> ?q \\<in> \\<PP>\n  ?p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens ?p\n\ngoal (1 subgoal):\n 1. wellformed_tokens q", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens q\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_rule_x1: \"item_rule x1 = (N, \\<alpha>@\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule x1 = (N, \\<alpha> @ \\<beta>)", "using x1"], ["proof (prove)\nusing this:\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n\ngoal (1 subgoal):\n 1. item_rule x1 = (N, \\<alpha> @ \\<beta>)", "by simp"], ["proof (state)\nthis:\n  item_rule x1 = (N, \\<alpha> @ \\<beta>)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have is_prefix_r_r': \"is_prefix (take r p) (take r' p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix (take r p) (take r' p)", "by (metis append_eq_conv_conj is_prefix_take r' take_add)"], ["proof (state)\nthis:\n  is_prefix (take r p) (take r' p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_prefix (take r p) (take r' p)", "have charslength_le_r_r': \"charslength (take r p) \\<le> charslength (take r' p)\""], ["proof (prove)\nusing this:\n  is_prefix (take r p) (take r' p)\n\ngoal (1 subgoal):\n 1. charslength (take r p) \\<le> charslength (take r' p)", "using charslength_of_prefix"], ["proof (prove)\nusing this:\n  is_prefix (take r p) (take r' p)\n  is_prefix ?a ?b \\<Longrightarrow> charslength ?a \\<le> charslength ?b\n\ngoal (1 subgoal):\n 1. charslength (take r p) \\<le> charslength (take r' p)", "by blast"], ["proof (state)\nthis:\n  charslength (take r p) \\<le> charslength (take r' p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"is_prefix (take r' p) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix (take r' p) p", "by auto"], ["proof (state)\nthis:\n  is_prefix (take r' p) p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_prefix (take r' p) p", "have charslength_r'_p: \"charslength (take r' p) \\<le> charslength p\""], ["proof (prove)\nusing this:\n  is_prefix (take r' p) p\n\ngoal (1 subgoal):\n 1. charslength (take r' p) \\<le> charslength p", "using charslength_of_prefix"], ["proof (prove)\nusing this:\n  is_prefix (take r' p) p\n  is_prefix ?a ?b \\<Longrightarrow> charslength ?a \\<le> charslength ?b\n\ngoal (1 subgoal):\n 1. charslength (take r' p) \\<le> charslength p", "by blast"], ["proof (state)\nthis:\n  charslength (take r' p) \\<le> charslength p\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"charslength p \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p \\<le> length Doc", "using less.prems(1) add_leE k' k'_upperbound z3"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  \\<lbrakk>?m + ?k \\<le> ?n;\n   \\<lbrakk>?m \\<le> ?n; ?k \\<le> ?n\\<rbrakk> \\<Longrightarrow> ?R\\<rbrakk>\n  \\<Longrightarrow> ?R\n  k' = k + length (chars_of_token X)\n  k' \\<le> length Doc\n  charslength p = k\n\ngoal (1 subgoal):\n 1. charslength p \\<le> length Doc", "by blast"], ["proof (state)\nthis:\n  charslength p \\<le> length Doc\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with charslength_r'_p"], ["proof (chain)\npicking this:\n  charslength (take r' p) \\<le> charslength p\n  charslength p \\<le> length Doc", "have charslength_r'_Doc: \n          \"charslength (take r' p) \\<le> length Doc\""], ["proof (prove)\nusing this:\n  charslength (take r' p) \\<le> charslength p\n  charslength p \\<le> length Doc\n\ngoal (1 subgoal):\n 1. charslength (take r' p) \\<le> length Doc", "by arith"], ["proof (state)\nthis:\n  charslength (take r' p) \\<le> length Doc\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<alpha>_decompose: \"\\<alpha> = a1 @ [A] @ a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> = a1 @ [A] @ a2", "using A splits_at_combine"], ["proof (prove)\nusing this:\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> = a1 @ [A] @ a2", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = a1 @ [A] @ a2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have wellformed_x1: \"wellformed_item x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x1", "apply (auto simp add: wellformed_item_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. item_rule x1 \\<in> \\<RR>\n 2. item_origin x1 \\<le> item_end x1\n 3. item_end x1 \\<le> length Doc\n 4. item_dot x1 \\<le> length (item_rhs x1)", "using item_rule_x1 less.prems"], ["proof (prove)\nusing this:\n  item_rule x1 = (N, \\<alpha> @ \\<beta>)\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (4 subgoals):\n 1. item_rule x1 \\<in> \\<RR>\n 2. item_origin x1 \\<le> item_end x1\n 3. item_end x1 \\<le> length Doc\n 4. item_dot x1 \\<le> length (item_rhs x1)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. item_origin x1 \\<le> item_end x1\n 2. item_end x1 \\<le> length Doc\n 3. item_dot x1 \\<le> length (item_rhs x1)", "using charslength_le_r_r' x1"], ["proof (prove)\nusing this:\n  charslength (take r p) \\<le> charslength (take r' p)\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n\ngoal (3 subgoals):\n 1. item_origin x1 \\<le> item_end x1\n 2. item_end x1 \\<le> length Doc\n 3. item_dot x1 \\<le> length (item_rhs x1)", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_end x1 \\<le> length Doc\n 2. item_dot x1 \\<le> length (item_rhs x1)", "using charslength_r'_Doc x1"], ["proof (prove)\nusing this:\n  charslength (take r' p) \\<le> length Doc\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n\ngoal (2 subgoals):\n 1. item_end x1 \\<le> length Doc\n 2. item_dot x1 \\<le> length (item_rhs x1)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot x1 \\<le> length (item_rhs x1)", "using x1 \\<alpha>_decompose"], ["proof (prove)\nusing this:\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n  \\<alpha> = a1 @ [A] @ a2\n\ngoal (1 subgoal):\n 1. item_dot x1 \\<le> length (item_rhs x1)", "by simp"], ["proof (state)\nthis:\n  wellformed_item x1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_nonterminal_x1: \"item_nonterminal x1 = N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal x1 = N", "by (simp add: x1 item_nonterminal_def)"], ["proof (state)\nthis:\n  item_nonterminal x1 = N\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have r_q_p: \"take r (terminals q) = terminals (take r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take r (terminals q) = terminals (take r p)", "by (metis q is_prefix_r_r' length_take min.absorb2 r take_prefix terminals_take)"], ["proof (state)\nthis:\n  take r (terminals q) = terminals (take r p)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_\\<alpha>_x1: \"item_\\<alpha> x1 = a1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> x1 = a1", "by (simp add: \\<alpha>_decompose item_\\<alpha>_def x1)"], ["proof (state)\nthis:\n  item_\\<alpha> x1 = a1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have a1': \"a1' = drop r (terminals q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1' = drop r (terminals q)", "by (metis append_eq_conv_conj join_terminals length_take length_terminals min.absorb2 q r)"], ["proof (state)\nthis:\n  a1' = drop r (terminals q)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have pvalid_q_x1: \"pvalid q x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid q x1", "apply (simp add: pvalid_def wellformed_q wellformed_x1 item_nonterminal_x1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<le>length q.\n       length (chars q) = item_end x1 \\<and>\n       length (chars (take u q)) = item_origin x1 \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation (take u (terminals q) @ N # \\<gamma>)) \\<and>\n       derives (item_\\<alpha> x1) (drop u (terminals q))", "apply (rule_tac x=r in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length q \\<and>\n    length (chars q) = item_end x1 \\<and>\n    length (chars (take r q)) = item_origin x1 \\<and>\n    (\\<exists>\\<gamma>.\n        is_derivation (take r (terminals q) @ N # \\<gamma>)) \\<and>\n    derives (item_\\<alpha> x1) (drop r (terminals q))", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. r \\<le> length q\n 2. length (chars q) = item_end x1\n 3. length (chars (take r q)) = item_origin x1\n 4. \\<exists>\\<gamma>. is_derivation (take r (terminals q) @ N # \\<gamma>)\n 5. derives (item_\\<alpha> x1) (drop r (terminals q))", "apply (simp add: a1'_r' min.absorb2 q)"], ["proof (prove)\ngoal (4 subgoals):\n 1. length (chars q) = item_end x1\n 2. length (chars (take r q)) = item_origin x1\n 3. \\<exists>\\<gamma>. is_derivation (take r (terminals q) @ N # \\<gamma>)\n 4. derives (item_\\<alpha> x1) (drop r (terminals q))", "apply (simp add: q x1)"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (chars (take r q)) = item_origin x1\n 2. \\<exists>\\<gamma>. is_derivation (take r (terminals q) @ N # \\<gamma>)\n 3. derives (item_\\<alpha> x1) (drop r (terminals q))", "apply (simp add: q x1 r')"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>\\<gamma>. is_derivation (take r (terminals q) @ N # \\<gamma>)\n 2. derives (item_\\<alpha> x1) (drop r (terminals q))", "using r_q_p less.prems(7) append_Cons is_leftderivation_def \n            leftderivation_implies_derivation"], ["proof (prove)\nusing this:\n  take r (terminals q) = terminals (take r p)\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys\n  is_leftderivation ?u = leftderives [\\<SS>] ?u\n  is_leftderivation ?u \\<Longrightarrow> is_derivation ?u\n\ngoal (2 subgoals):\n 1. \\<exists>\\<gamma>. is_derivation (take r (terminals q) @ N # \\<gamma>)\n 2. derives (item_\\<alpha> x1) (drop r (terminals q))", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x1) (drop r (terminals q))", "apply (simp add: item_\\<alpha>_x1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a1 (drop r (terminals q))", "using a1' A LeftDerivation_implies_leftderives leftderives_implies_derives"], ["proof (prove)\nusing this:\n  a1' = drop r (terminals q)\n  splits_at \\<alpha> i a1 A a2 \\<and>\n  splits_at \\<alpha>' i' a1' A a2 \\<and> LeftDerivation a1 (take n D) a1'\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n\ngoal (1 subgoal):\n 1. derives a1 (drop r (terminals q))", "by blast"], ["proof (state)\nthis:\n  pvalid q x1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_end_x1_le_k': \"item_end x1 \\<le> k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x1 \\<le> k'", "using charslength_r'_p"], ["proof (prove)\nusing this:\n  charslength (take r' p) \\<le> charslength p\n\ngoal (1 subgoal):\n 1. item_end x1 \\<le> k'", "apply (simp add: x1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars (take r' p)) \\<le> length (chars p) \\<Longrightarrow>\n    length (chars (take r' p)) \\<le> k'", "using less.prems"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length p\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. length (chars (take r' p)) \\<le> length (chars p) \\<Longrightarrow>\n    length (chars (take r' p)) \\<le> k'", "by auto"], ["proof (state)\nthis:\n  item_end x1 \\<le> k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have x1_in_I: \"x1 \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> I", "apply (subst less.prems(12))"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))", "apply (auto simp add: items_le_def item_end_x1_le_k')"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> \\<pi> k' {} (Scan T k (Gen (Prefixes p)))", "apply (rule \\<pi>_apply_setmonotone)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> Scan T k (Gen (Prefixes p))", "apply (rule Scan_apply_setmonotone)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> Gen (Prefixes p)", "apply (simp add: Gen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>pa. pa \\<in> Prefixes p \\<and> pvalid pa x1", "apply (rule_tac x=q in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> Prefixes p \\<and> pvalid q x1", "by (simp add: pvalid_q_x1 paths_le_def q_in_Prefixes)"], ["proof (state)\nthis:\n  x1 \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain x2 where x2: \"x2 = inc_item x1 k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x2.\n        x2 = inc_item x1 k' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x2 = inc_item x1 k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have x1_in_bin: \"x1 \\<in> bin I (item_origin z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> bin I (item_origin z)", "using bin_def x1 x1_in_I z12"], ["proof (prove)\nusing this:\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  x1 =\n  Item (N, \\<alpha> @ \\<beta>) (length a1) (charslength (take r p))\n   (charslength (take r' p))\n  x1 \\<in> I\n  z = Item (A, w @ []) (length w) (charslength (take r' p)) k'\n\ngoal (1 subgoal):\n 1. x1 \\<in> bin I (item_origin z)", "by auto"], ["proof (state)\nthis:\n  x1 \\<in> bin I (item_origin z)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have x2_in_Complete: \"x2 \\<in> Complete k' I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 \\<in> Complete k' I", "apply (simp add: Complete_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 \\<in> I \\<or>\n    (\\<exists>x.\n        x2 = inc_item x k' \\<and>\n        (\\<exists>y.\n            x \\<in> bin I (item_origin y) \\<and>\n            y \\<in> bin I k' \\<and>\n            is_complete y \\<and> next_symbol x = Some (item_nonterminal y)))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x2 = inc_item x k' \\<and>\n       (\\<exists>y.\n           x \\<in> bin I (item_origin y) \\<and>\n           y \\<in> bin I k' \\<and>\n           is_complete y \\<and> next_symbol x = Some (item_nonterminal y))", "apply (rule_tac x=x1 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x2 = inc_item x1 k' \\<and>\n    (\\<exists>y.\n        x1 \\<in> bin I (item_origin y) \\<and>\n        y \\<in> bin I k' \\<and>\n        is_complete y \\<and> next_symbol x1 = Some (item_nonterminal y))", "apply (simp add: x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       x1 \\<in> bin I (item_origin y) \\<and>\n       y \\<in> bin I k' \\<and>\n       is_complete y \\<and> next_symbol x1 = Some (item_nonterminal y)", "apply (rule_tac x=z in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 \\<in> bin I (item_origin z) \\<and>\n    z \\<in> bin I k' \\<and>\n    is_complete z \\<and> next_symbol x1 = Some (item_nonterminal z)", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. x1 \\<in> bin I (item_origin z)\n 2. z \\<in> bin I k'\n 3. is_complete z\n 4. next_symbol x1 = Some (item_nonterminal z)", "using x1_in_bin"], ["proof (prove)\nusing this:\n  x1 \\<in> bin I (item_origin z)\n\ngoal (4 subgoals):\n 1. x1 \\<in> bin I (item_origin z)\n 2. z \\<in> bin I k'\n 3. is_complete z\n 4. next_symbol x1 = Some (item_nonterminal z)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. z \\<in> bin I k'\n 2. is_complete z\n 3. next_symbol x1 = Some (item_nonterminal z)", "using bin_def z12 z_in_I"], ["proof (prove)\nusing this:\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  z = Item (A, w @ []) (length w) (charslength (take r' p)) k'\n  z \\<in> I\n\ngoal (3 subgoals):\n 1. z \\<in> bin I k'\n 2. is_complete z\n 3. next_symbol x1 = Some (item_nonterminal z)", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_complete z\n 2. next_symbol x1 = Some (item_nonterminal z)", "apply (simp add: is_complete_def z12)"], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol x1 = Some (item_nonterminal z)", "by (simp add: \\<alpha>_decompose is_complete_def item_nonterminal_def next_symbol_def x1 z12)"], ["proof (state)\nthis:\n  x2 \\<in> Complete k' I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have wf_I': \"wellformed_items (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))", "by (simp add: wellformed_items_Gen wellformed_items_Scan wellformed_items_\\<pi> z5)"], ["proof (state)\nthis:\n  wellformed_items (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from items_le_Complete[OF this] x2_in_Complete"], ["proof (chain)\npicking this:\n  items_le ?k (Complete ?k (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))) =\n  Complete ?k (items_le ?k (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))))\n  x2 \\<in> Complete k' I", "have x2_in_I: \"x2 \\<in> I\""], ["proof (prove)\nusing this:\n  items_le ?k (Complete ?k (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))) =\n  Complete ?k (items_le ?k (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))))\n  x2 \\<in> Complete k' I\n\ngoal (1 subgoal):\n 1. x2 \\<in> I", "by (metis Complete_\\<pi>_fix z13)"], ["proof (state)\nthis:\n  x2 \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"wellformed_items I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items I", "using wf_I' items_le_is_filter wellformed_items_def z13"], ["proof (prove)\nusing this:\n  wellformed_items (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  items_le ?k ?I \\<subseteq> ?I\n  wellformed_items ?X = Ball ?X wellformed_item\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. wellformed_items I", "by auto"], ["proof (state)\nthis:\n  wellformed_items I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with x2_in_I"], ["proof (chain)\npicking this:\n  x2 \\<in> I\n  wellformed_items I", "have wellformed_x2: \"wellformed_item x2\""], ["proof (prove)\nusing this:\n  x2 \\<in> I\n  wellformed_items I\n\ngoal (1 subgoal):\n 1. wellformed_item x2", "by (simp add: wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_item x2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_dot_x2: \"item_dot x2 = Suc (length a1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot x2 = Suc (length a1)", "by (simp add: x2 x1)"], ["proof (state)\nthis:\n  item_dot x2 = Suc (length a1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_\\<beta>_x2: \"item_\\<beta> x2 = a2 @ \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> x2 = a2 @ \\<beta>", "apply (simp add: item_\\<beta>_def item_dot_x2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (Suc (length a1)) (item_rhs x2) = a2 @ \\<beta>", "apply (simp add: item_rhs_def x2 x1 \\<alpha>_decompose)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  item_\\<beta> x2 = a2 @ \\<beta>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_end_x2: \"item_end x2 = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x2 = k'", "by (simp add: x2)"], ["proof (state)\nthis:\n  item_end x2 = k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "note inc_dot_x2_by_a2 = thmD6[OF wellformed_x2 item_\\<beta>_x2 item_end_x2 a2_derives_empty]"], ["proof (state)\nthis:\n  inc_dot (length a2) x2 \\<in> \\<pi> k' {} {x2}\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"x = inc_dot (length a2) x2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = inc_dot (length a2) x2", "by (simp add: \\<alpha>_decompose inc_dot_def less.prems(11) x1 x2)"], ["proof (state)\nthis:\n  x = inc_dot (length a2) x2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with inc_dot_x2_by_a2"], ["proof (chain)\npicking this:\n  inc_dot (length a2) x2 \\<in> \\<pi> k' {} {x2}\n  x = inc_dot (length a2) x2", "have \"x \\<in> \\<pi> k' {} {x2}\""], ["proof (prove)\nusing this:\n  inc_dot (length a2) x2 \\<in> \\<pi> k' {} {x2}\n  x = inc_dot (length a2) x2\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} {x2}", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {} {x2}\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k' {} {x2}", "have \"x \\<in> \\<pi> k' {} I\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} {x2}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} I", "using x2_in_I"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} {x2}\n  x2 \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} I", "by (meson contra_subsetD empty_subsetI insert_subset monoD mono_\\<pi>)"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {} I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k' {} I", "show \"x \\<in> I\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "by (metis (no_types, lifting) \\<pi>_subset_elem_trans dual_order.refl item_end_x_def \n            items_le_def items_le_is_filter mem_Collect_eq z13)"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem thmD10:\n  assumes p_dom: \"p \\<in> \\<PP>\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes X_dom: \"X \\<in> T\"\n  assumes T_dom: \"T \\<subseteq> \\<X> k\"\n  assumes rule_dom: \"(N, \\<alpha>@\\<beta>) \\<in> \\<RR>\"\n  assumes r: \"r \\<le> length p\"\n  assumes leftderives_start: \"leftderives [\\<SS>] ((terminals (take r p))@[N]@\\<gamma>)\"\n  assumes leftderives_\\<alpha>: \"leftderives \\<alpha> (terminals ((drop r p)@[X]))\"\n  assumes k': \"k' = k + length (chars_of_token X)\"\n  assumes item_def: \"x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r p)) k'\"\n  assumes I: \"I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\"\n  shows \"x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> I", "have \"\\<exists> D. LeftDerivation \\<alpha> D (terminals ((drop r p)@[X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))", "using leftderives_\\<alpha> leftderives_implies_LeftDerivation"], ["proof (prove)\nusing this:\n  leftderives \\<alpha> (terminals (drop r p @ [X]))\n  leftderives ?a ?b \\<Longrightarrow> \\<exists>D. LeftDerivation ?a D ?b\n\ngoal (1 subgoal):\n 1. \\<exists>D. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))", "by blast"], ["proof (state)\nthis:\n  \\<exists>D. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>D. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))", "obtain D where D: \"LeftDerivation \\<alpha> D (terminals ((drop r p)@[X]))\""], ["proof (prove)\nusing this:\n  \\<exists>D. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        LeftDerivation \\<alpha> D\n         (terminals (drop r p @ [X])) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. x \\<in> I", "have is_sentence: \"is_sentence (terminals (drop r p @ [X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (terminals (drop r p @ [X]))", "using derives_is_sentence is_sentence_concat leftderives_\\<alpha> leftderives_implies_derives \n      rule_\\<alpha>_type rule_dom"], ["proof (prove)\nusing this:\n  derives ?\\<alpha> ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> = ?\\<beta> \\<or>\n  is_sentence ?\\<alpha> \\<and> is_sentence ?\\<beta>\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  leftderives \\<alpha> (terminals (drop r p @ [X]))\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n  (?N, ?\\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_sentence ?\\<alpha>\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. is_sentence (terminals (drop r p @ [X]))", "by blast"], ["proof (state)\nthis:\n  is_sentence (terminals (drop r p @ [X]))\n\ngoal (1 subgoal):\n 1. x \\<in> I", "have \"\\<exists> L. LeftDerivationLadder \\<alpha> D L  (terminals ((drop r p)@[X])) \\<and>\n         ladder_last_j L = length (drop r p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>L.\n       LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X])) \\<and>\n       ladder_last_j L = length (drop r p)", "apply (rule LeftDerivationLadder_exists)"], ["proof (prove)\ngoal (3 subgoals):\n 1. LeftDerivation \\<alpha> D (terminals (drop r p @ [X]))\n 2. is_sentence (terminals (drop r p @ [X]))\n 3. length (drop r p) < length (terminals (drop r p @ [X]))", "apply (rule D)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_sentence (terminals (drop r p @ [X]))\n 2. length (drop r p) < length (terminals (drop r p @ [X]))", "apply (rule is_sentence)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (drop r p) < length (terminals (drop r p @ [X]))", "by auto"], ["proof (state)\nthis:\n  \\<exists>L.\n     LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X])) \\<and>\n     ladder_last_j L = length (drop r p)\n\ngoal (1 subgoal):\n 1. x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>L.\n     LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X])) \\<and>\n     ladder_last_j L = length (drop r p)", "obtain L where L: \"LeftDerivationLadder \\<alpha> D L  (terminals ((drop r p)@[X]))\" and\n    L_ladder_last_j: \"ladder_last_j L = length (drop r p)\""], ["proof (prove)\nusing this:\n  \\<exists>L.\n     LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X])) \\<and>\n     ladder_last_j L = length (drop r p)\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        \\<lbrakk>LeftDerivationLadder \\<alpha> D L\n                  (terminals (drop r p @ [X]));\n         ladder_last_j L = length (drop r p)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivationLadder \\<alpha> D L (terminals (drop r p @ [X]))\n  ladder_last_j L = length (drop r p)\n\ngoal (1 subgoal):\n 1. x \\<in> I", "from thmD10_ladder[OF assms(1) assms(2) assms(3) assms(4) assms(5) assms(6) assms(7)\n    L L_ladder_last_j k' item_def I]"], ["proof (chain)\npicking this:\n  x \\<in> I", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "."], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}