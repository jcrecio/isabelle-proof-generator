{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD5.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma Scan_empty: \"Scan {} k I = I\"", "lemma \\<pi>_no_tokens: \"\\<pi> k {} I =  limit (\\<lambda> I. Complete k (Predict k I)) I\"", "lemma bin_elem: \"x \\<in> bin I k \\<Longrightarrow> x \\<in> I\"", "lemma Gen_implies_pvalid: \"x \\<in> Gen P \\<Longrightarrow> \\<exists> p \\<in> P. pvalid p x\"", "lemma wellformed_init_item[simp]: \"r \\<in> \\<RR> \\<Longrightarrow> k \\<le> length Doc \\<Longrightarrow> wellformed_item (init_item r k)\"", "lemma init_item_origin[simp]: \"item_origin (init_item r k) = k\"", "lemma init_item_end[simp]: \"item_end (init_item r k) = k\"", "lemma init_item_nonterminal[simp]: \"item_nonterminal (init_item r k) = fst r\"", "lemma init_item_\\<alpha>[simp]: \"item_\\<alpha> (init_item r k) = []\"", "lemma Predict_elem_in_Gen:\n  assumes I_in_Gen_P: \"I \\<subseteq> Gen P\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes x_in_Predict: \"x \\<in> Predict k I\"\n  shows \"x \\<in> Gen P\"", "lemma Predict_subset_Gen:\n  assumes \"I \\<subseteq> Gen P\"\n  assumes \"k \\<le> length Doc\"\n  shows \"Predict k I \\<subseteq> Gen P\"", "lemma nth_superfluous_append[simp]: \"i < length a \\<Longrightarrow> (a@b)!i = a!i\"", "lemma tokens_nth_in_\\<Z>: \n  \"p \\<in> \\<PP> \\<Longrightarrow> \\<forall> i. i < length p \\<longrightarrow> (\\<exists> u. p ! i \\<in> \\<Z> (charslength (take i p)) u)\"", "lemma path_append_token:\n  assumes p: \"p \\<in> \\<P> k u\"\n  assumes t: \"t \\<in> \\<Z> k (Suc u)\"\n  assumes pt: \"admissible (p@[t])\"\n  assumes k: \"charslength p = k\"\n  shows \"p@[t] \\<in> \\<P> k (Suc u)\"", "lemma indexlt_simp: \"indexlt k' u' k u = (k' < k \\<or> (k' = k \\<and> u' < u))\"", "lemma wf_indexlt_rel: \"wf indexlt_rel\"", "lemma \\<P>_induct[consumes 1, case_names Induct]:\n  assumes \"p \\<in> \\<P> k u\"\n  assumes induct: \"\\<And> p k u . (\\<And> p' k' u'. p' \\<in> \\<P> k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> P p' k' u') \n                     \\<Longrightarrow> p \\<in> \\<P> k u \\<Longrightarrow> P p k u\"\n  shows \"P p k u\"", "lemma nonempty_path_indices: \n  assumes p: \"p \\<in> \\<P> k u\"\n  assumes nonempty: \"p \\<noteq> []\"\n  shows \"k > 0 \\<or> u > 0\"", "lemma base_paths:\n  assumes p: \"p \\<in> \\<P> k 0\"\n  assumes k: \"k > 0\"\n  shows \"\\<exists> u. p \\<in> \\<P> (k - 1) u\"", "lemma indexlt_trans: \"indexlt k'' u'' k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> indexlt k'' u'' k u\"", "lemma limit_Append_path_nonelem_split: \"p \\<in> limit (Append T k) (\\<P> k u) \\<Longrightarrow> p \\<notin> \\<P> k u \\<Longrightarrow>\n  \\<exists> q ts. p = q@ts \\<and> q \\<in> \\<P> k u \\<and> charslength q = k \\<and> admissible (q@ts) \\<and> (\\<forall> t \\<in> set ts. t \\<in> T) \\<and> \n    (\\<forall> t \\<in> set (butlast ts). chars_of_token t = [])\"", "lemma limit_Append_path_nonelem_split': \n  \"p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u) \\<Longrightarrow> p \\<notin> \\<P> k u \\<Longrightarrow>\n   \\<exists> q ts. p = q@ts \\<and> is_continuation k u q ts\"", "lemma final_step_of_path: \"p \\<in> \\<P> k u \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> (\\<exists> q ts k' u'. p = q@ts \\<and> indexlt k' u' k u \n  \\<and> is_continuation k' u' q ts)\"", "lemma terminals_empty[simp]: \"terminals [] = []\"", "lemma empty_in_\\<L>\\<^sub>P[simp]: \"[] \\<in> \\<L>\\<^sub>P\"", "lemma admissible_empty[simp]: \"admissible []\"", "lemma \\<PP>_are_admissible: \"p \\<in> \\<PP> \\<Longrightarrow> admissible p\"", "lemma prefix_of_empty_is_empty: \"is_prefix q [] \\<Longrightarrow> q = []\"", "lemma subset_\\<P> :\n  assumes leq: \"k' < k \\<or> (k' = k \\<and> u' \\<le> u)\"\n  shows \"\\<P> k' u' \\<subseteq> \\<P> k u\"", "lemma empty_path_is_elem[simp]: \"[] \\<in> \\<P> k u\"", "lemma is_prefix_of_append:\n  assumes \"is_prefix p (a@b)\"\n  shows \"is_prefix p a \\<or> (\\<exists> b'. b' \\<noteq> [] \\<and> is_prefix b' b \\<and> p = a@b')\"", "lemma prefix_is_continuation: \"is_continuation k u p ts \\<Longrightarrow> is_prefix ts' ts \\<Longrightarrow> \n  is_continuation k u p ts'\"", "lemma charslength_0: \"(\\<forall> t \\<in> set ts. chars_of_token t = []) = (charslength ts = 0)\"", "lemma is_continuation_in_\\<P>: \"is_continuation k u p ts \\<Longrightarrow> p@ts \\<in> \\<P> k (Suc u)\"", "lemma indexlt_subset_\\<P>: \"indexlt k' u' k u \\<Longrightarrow> \\<P> k' (Suc u') \\<subseteq> \\<P> k u\"", "lemma prefixes_are_paths: \"p \\<in> \\<P> k u \\<Longrightarrow> is_prefix x p \\<Longrightarrow> x \\<in> \\<P> k u\"", "lemma empty_or_last_of_suffix:\n  assumes \"q = q' @ [t]\"\n  assumes \"q = p @ ts\"\n  shows \"ts = [] \\<or> (\\<exists> ts'. q' = p @ ts' \\<and> ts'@[t] = ts)\"", "lemma is_prefix_butlast: \"is_prefix q (butlast p) \\<Longrightarrow> is_prefix q p\"", "lemma last_step_of_path:\n  \"q \\<in> \\<P> k u \\<Longrightarrow> q = q'@[t] \\<Longrightarrow>\n   \\<exists> k' u'. indexlt k' u' k u \\<and> q \\<in> \\<P> k' (Suc u') \\<and> charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\"", "lemma charslength_of_butlast_0: \"p \\<in> \\<P> k 0 \\<Longrightarrow> p = q@[t] \\<Longrightarrow> charslength q < k\"", "lemma charslength_of_butlast: \"p \\<in> \\<P> k u \\<Longrightarrow> p = q@[t] \\<Longrightarrow> charslength q \\<le> k\"", "lemma last_token_of_path:\n  assumes \"q \\<in> \\<P> k u\"\n  assumes \"q = q'@[t]\"\n  assumes \"charslength q' = k\"\n  shows \"t \\<in> \\<Z> k u\"", "lemma final_step_of_path': \"p \\<in> \\<P> k u \\<Longrightarrow> p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> \n  \\<exists> q ts. u > 0 \\<and> p = q@ts \\<and> is_continuation k (u - 1) q ts\"", "lemma is_continuation_continue:\n  assumes \"is_continuation k u q ts\"\n  assumes \"charslength ts = 0\"\n  assumes \"t \\<in> \\<Z> k (Suc u)\"\n  assumes \"admissible (q @ ts @ [t])\"\n  shows \"is_continuation k u q (ts@[t])\"", "theorem compatibility_def:\n  assumes p_in_dom: \"p \\<in> \\<P> k u\"\n  assumes q_in_dom: \"q \\<in> \\<P> k u\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes q_split: \"q = q'@[t]\"\n  assumes q'len: \"charslength q' = k\"\n  assumes admissible: \"admissible (p @ [t])\" \n  shows \"p @ [t] \\<in> \\<P> k u\"", "lemma is_prefix_admissible:\n  assumes \"is_prefix a b\"\n  assumes \"admissible b\"\n  shows \"admissible a\"", "lemma butlast_split: \"n < length q \\<Longrightarrow> butlast q = (take n q)@(drop n (butlast q))\"", "lemma in_\\<P>_charslength:\n  assumes p_dom: \"p \\<in> \\<P> k u\"\n  shows \"\\<exists> v. p \\<in> \\<P> (charslength p) v\"", "theorem general_compatibility:\n  \"p \\<in> \\<P> k u \\<Longrightarrow> q \\<in> \\<P> k u \\<Longrightarrow> charslength p = charslength (take n q) \n    \\<Longrightarrow> charslength p \\<le> k \\<Longrightarrow> admissible (p @ (drop n q)) \\<Longrightarrow> p @ (drop n q) \\<in> \\<P> k u\"", "lemma wellformed_item_derives:\n  assumes wellformed: \"wellformed_item x\"\n  shows \"derives [item_nonterminal x] (item_rhs x)\"", "lemma wellformed_complete_item_\\<beta>:\n  assumes wellformed: \"wellformed_item x\"\n  assumes complete: \"is_complete x\" \n  shows \"item_\\<beta> x = []\"", "lemma wellformed_complete_item_derives:\n  assumes wellformed: \"wellformed_item x\"\n  assumes complete: \"is_complete x\" \n  shows \"derives [item_nonterminal x] (item_\\<alpha> x)\"", "lemma is_derivation_implies_admissible:\n  \"is_derivation (terminals p @ \\<delta>) \\<Longrightarrow> is_word (terminals p) \\<Longrightarrow> admissible p\"", "lemma item_rhs_of_inc_item[simp]: \"item_rhs (inc_item x k) = item_rhs x\"", "lemma item_rule_of_inc_item[simp]: \"item_rule (inc_item x k) = item_rule x\"", "lemma item_origin_of_inc_item[simp]: \"item_origin (inc_item x k) = item_origin x\"", "lemma item_end_of_inc_item[simp]: \"item_end (inc_item x k) = k\"", "lemma item_dot_of_inc_item[simp]: \"item_dot (inc_item x k) = (item_dot x) + 1\"", "lemma item_nonterminal_of_inc_item[simp]: \"item_nonterminal (inc_item x k) = item_nonterminal x\"", "lemma wellformed_inc_item:\n  assumes wellformed: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some s\"\n  assumes k_upper_bound: \"k \\<le> length Doc\"\n  assumes k_lower_bound: \"k \\<ge> item_end x\"\n  shows \"wellformed_item (inc_item x k)\"", "lemma item_\\<alpha>_of_inc_item:\n  assumes wellformed: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some s\"\n  shows \"item_\\<alpha> (inc_item x k) = item_\\<alpha> x @ [s]\"", "lemma derives1_pad: \n  assumes derives1: \"derives1 \\<alpha> \\<beta>\"\n  assumes u: \"is_sentence u\"\n  assumes v: \"is_sentence v\"\n  shows \"derives1 (u@\\<alpha>@v) (u@\\<beta>@v)\"", "lemma derives_pad:\n  \"derives \\<alpha> \\<beta> \\<Longrightarrow> is_sentence u \\<Longrightarrow> is_sentence v \\<Longrightarrow> derives (u@\\<alpha>@v) (u@\\<beta>@v)\"", "lemma derives1_is_sentence: \"derives1 \\<alpha> \\<beta> \\<Longrightarrow> is_sentence \\<alpha> \\<and> is_sentence \\<beta>\"", "lemma derives_is_sentence: \"derives \\<alpha> \\<beta> \\<Longrightarrow> (\\<alpha> = \\<beta>) \\<or> (is_sentence \\<alpha> \\<and> is_sentence \\<beta>)\"", "lemma derives_append: \n  assumes au: \"derives a u\"\n  assumes bv: \"derives b v\"\n  assumes is_sentence_a: \"is_sentence a\"\n  assumes is_sentence_b: \"is_sentence b\"\n  shows \"derives (a@b) (u@v)\"", "lemma is_sentence_item_\\<alpha>: \"wellformed_item x \\<Longrightarrow> is_sentence (item_\\<alpha> x)\"", "lemma is_nonterminal_item_nonterminal:  \"wellformed_item x \\<Longrightarrow> is_nonterminal (item_nonterminal x)\"", "lemma Complete_elem_in_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes x_in_Complete: \"x \\<in> Complete k I\"\n  shows \"x \\<in> Gen (\\<P> k u)\"", "lemma Complete_subset_Gen:\n  assumes I_in_Gen_P: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  shows \"Complete k I \\<subseteq> Gen (\\<P> k u)\"", "lemma \\<P>_are_admissible: \"p \\<in> \\<P> k u \\<Longrightarrow> admissible p\"", "lemma is_continuation_base:\n  assumes p_dom: \"p \\<in> \\<P> k u\"\n  assumes charslength_p: \"charslength p = k\"\n  shows \"is_continuation k u p []\"", "lemma is_continuation_empty_chars: \n  \"is_continuation k u q ts \\<Longrightarrow> charslength (q@ts) = k \\<Longrightarrow> chars ts = []\"", "lemma \\<Z>_subset: \"u \\<le> v \\<Longrightarrow> \\<Z> k u \\<subseteq> \\<Z> k v\"", "lemma is_continuation_increase_u:\n  assumes cont: \"is_continuation k u q ts\"\n  assumes uv: \"u \\<le> v\"\n  shows \"is_continuation k v q ts\"", "lemma pvalid_next_symbol_derivable:\n  assumes pvalid: \"pvalid p x\" \n  assumes next_symbol: \"next_symbol x = Some s\"\n  shows \"\\<exists> \\<delta>. is_derivation((terminals p)@[s]@\\<delta>)\"", "lemma pvalid_admissible: \n  assumes pvalid: \"pvalid p x\" \n  shows \"admissible p\"", "lemma pvalid_next_terminal_admissible:\n  assumes pvalid: \"pvalid p x\" \n  assumes next_symbol: \"next_symbol x = Some t\"\n  assumes terminal: \"is_terminal t\"\n  shows \"admissible (p@[(t, c)])\"", "lemma \\<X>_wellformed: \"t \\<in> \\<X> k \\<Longrightarrow> wellformed_token t\"", "lemma \\<Z>_wellformed: \"t \\<in> \\<Z> k u \\<Longrightarrow> wellformed_token t\"", "lemma Scan_elem_in_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  assumes x_in_Scan: \"x \\<in> Scan T k I\"\n  shows \"x \\<in> Gen (\\<P> k u)\"", "lemma Scan_subset_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  shows \"Scan T k I \\<subseteq> Gen (\\<P> k u)\"", "theorem thmD5:\n  assumes I: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  shows \"\\<pi> k T I \\<subseteq> Gen (\\<P> k u)\""], "translations": [["", "lemma Scan_empty: \"Scan {} k I = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan {} k I = I", "by (simp add: Scan_def)"], ["", "lemma \\<pi>_no_tokens: \"\\<pi> k {} I =  limit (\\<lambda> I. Complete k (Predict k I)) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k {} I = limit (\\<lambda>I. Complete k (Predict k I)) I", "by (simp add: \\<pi>_def Scan_empty)"], ["", "lemma bin_elem: \"x \\<in> bin I k \\<Longrightarrow> x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> bin I k \\<Longrightarrow> x \\<in> I", "by (auto simp add: bin_def)"], ["", "lemma Gen_implies_pvalid: \"x \\<in> Gen P \\<Longrightarrow> \\<exists> p \\<in> P. pvalid p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen P \\<Longrightarrow> \\<exists>p\\<in>P. pvalid p x", "by (auto simp add: Gen_def)"], ["", "lemma wellformed_init_item[simp]: \"r \\<in> \\<RR> \\<Longrightarrow> k \\<le> length Doc \\<Longrightarrow> wellformed_item (init_item r k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> \\<RR>; k \\<le> length Doc\\<rbrakk>\n    \\<Longrightarrow> wellformed_item (init_item r k)", "by (simp add: init_item_def wellformed_item_def)"], ["", "lemma init_item_origin[simp]: \"item_origin (init_item r k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin (init_item r k) = k", "by (auto simp add: item_origin_def init_item_def)"], ["", "lemma init_item_end[simp]: \"item_end (init_item r k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end (init_item r k) = k", "by (auto simp add: item_end_def init_item_def)"], ["", "lemma init_item_nonterminal[simp]: \"item_nonterminal (init_item r k) = fst r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal (init_item r k) = fst r", "by (auto simp add: init_item_def item_nonterminal_def)"], ["", "lemma init_item_\\<alpha>[simp]: \"item_\\<alpha> (init_item r k) = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> (init_item r k) = []", "by (auto simp add: init_item_def item_\\<alpha>_def)"], ["", "lemma Predict_elem_in_Gen:\n  assumes I_in_Gen_P: \"I \\<subseteq> Gen P\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes x_in_Predict: \"x \\<in> Predict k I\"\n  shows \"x \\<in> Gen P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "have \"x \\<in> I \\<or> (\\<exists> r y. r \\<in> \\<RR> \\<and> x = init_item r k \\<and> y \\<in> bin I k \\<and> next_symbol y = Some(fst r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I \\<or>\n    (\\<exists>r y.\n        r \\<in> \\<RR> \\<and>\n        x = init_item r k \\<and>\n        y \\<in> bin I k \\<and> next_symbol y = Some (fst r))", "using x_in_Predict"], ["proof (prove)\nusing this:\n  x \\<in> Predict k I\n\ngoal (1 subgoal):\n 1. x \\<in> I \\<or>\n    (\\<exists>r y.\n        r \\<in> \\<RR> \\<and>\n        x = init_item r k \\<and>\n        y \\<in> bin I k \\<and> next_symbol y = Some (fst r))", "by (auto simp add: Predict_def)"], ["proof (state)\nthis:\n  x \\<in> I \\<or>\n  (\\<exists>r y.\n      r \\<in> \\<RR> \\<and>\n      x = init_item r k \\<and>\n      y \\<in> bin I k \\<and> next_symbol y = Some (fst r))\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "then"], ["proof (chain)\npicking this:\n  x \\<in> I \\<or>\n  (\\<exists>r y.\n      r \\<in> \\<RR> \\<and>\n      x = init_item r k \\<and>\n      y \\<in> bin I k \\<and> next_symbol y = Some (fst r))", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> I \\<or>\n  (\\<exists>r y.\n      r \\<in> \\<RR> \\<and>\n      x = init_item r k \\<and>\n      y \\<in> bin I k \\<and> next_symbol y = Some (fst r))\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen P\n 2. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "case 1"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen P\n 2. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "using I_in_Gen_P"], ["proof (prove)\nusing this:\n  x \\<in> I\n  I \\<subseteq> Gen P\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen P\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "case 2"], ["proof (state)\nthis:\n  \\<exists>r y.\n     r \\<in> \\<RR> \\<and>\n     x = init_item r k \\<and>\n     y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "then"], ["proof (chain)\npicking this:\n  \\<exists>r y.\n     r \\<in> \\<RR> \\<and>\n     x = init_item r k \\<and>\n     y \\<in> bin I k \\<and> next_symbol y = Some (fst r)", "obtain r y where ry: \"r \\<in> \\<RR> \\<and> x = init_item r k \\<and> y \\<in> bin I k \\<and> \n      next_symbol y = Some (fst r)\""], ["proof (prove)\nusing this:\n  \\<exists>r y.\n     r \\<in> \\<RR> \\<and>\n     x = init_item r k \\<and>\n     y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n\ngoal (1 subgoal):\n 1. (\\<And>r y.\n        r \\<in> \\<RR> \\<and>\n        x = init_item r k \\<and>\n        y \\<in> bin I k \\<and>\n        next_symbol y = Some (fst r) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "then"], ["proof (chain)\npicking this:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)", "have \"\\<exists> p \\<in> P. pvalid p y\""], ["proof (prove)\nusing this:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>P. pvalid p y", "using Gen_implies_pvalid I_in_Gen_P bin_elem subsetCE"], ["proof (prove)\nusing this:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n  ?x \\<in> Gen ?P \\<Longrightarrow> \\<exists>p\\<in>?P. pvalid p ?x\n  I \\<subseteq> Gen P\n  ?x \\<in> bin ?I ?k \\<Longrightarrow> ?x \\<in> ?I\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>P. pvalid p y", "by blast"], ["proof (state)\nthis:\n  \\<exists>p\\<in>P. pvalid p y\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>P. pvalid p y", "obtain p where p: \"p \\<in> P \\<and> pvalid p y\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>P. pvalid p y\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> P \\<and> pvalid p y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> P \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "have wellformed_p: \"wellformed_tokens p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens p", "using p"], ["proof (prove)\nusing this:\n  p \\<in> P \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. wellformed_tokens p", "by (auto simp add: pvalid_def)"], ["proof (state)\nthis:\n  wellformed_tokens p\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "by (simp add: ry k)"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "from ry"], ["proof (chain)\npicking this:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)", "have \"item_end y = k\""], ["proof (prove)\nusing this:\n  r \\<in> \\<RR> \\<and>\n  x = init_item r k \\<and>\n  y \\<in> bin I k \\<and> next_symbol y = Some (fst r)\n\ngoal (1 subgoal):\n 1. item_end y = k", "by (auto simp add: bin_def)"], ["proof (state)\nthis:\n  item_end y = k\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "with p"], ["proof (chain)\npicking this:\n  p \\<in> P \\<and> pvalid p y\n  item_end y = k", "have charslength_p[simplified]: \"charslength p = k\""], ["proof (prove)\nusing this:\n  p \\<in> P \\<and> pvalid p y\n  item_end y = k\n\ngoal (1 subgoal):\n 1. charslength p = k", "by (auto simp add: pvalid_def)"], ["proof (state)\nthis:\n  length (chars p) = k\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "have item_end_x: \"item_end x = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = k", "by (simp add: ry)"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "have pvalid_x: \"pvalid p x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p x", "apply (auto simp add: pvalid_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wellformed_tokens p\n 2. wellformed_item x\n 3. \\<exists>u\\<le>length p.\n       length (chars p) = item_end x \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @ item_nonterminal x # \\<gamma>)) \\<and>\n       derives (item_\\<alpha> x) (drop u (terminals p))", "apply (simp add: wellformed_p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_item x\n 2. \\<exists>u\\<le>length p.\n       length (chars p) = item_end x \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @ item_nonterminal x # \\<gamma>)) \\<and>\n       derives (item_\\<alpha> x) (drop u (terminals p))", "apply (simp add: wellformed_x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<le>length p.\n       length (chars p) = item_end x \\<and>\n       length (chars (take u p)) = item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @ item_nonterminal x # \\<gamma>)) \\<and>\n       derives (item_\\<alpha> x) (drop u (terminals p))", "apply (rule_tac x=\"length p\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length p \\<le> length p \\<and>\n    length (chars p) = item_end x \\<and>\n    length (chars (take (length p) p)) = item_origin x \\<and>\n    (\\<exists>\\<gamma>.\n        is_derivation\n         (take (length p) (terminals p) @\n          item_nonterminal x # \\<gamma>)) \\<and>\n    derives (item_\\<alpha> x) (drop (length p) (terminals p))", "apply (auto simp add: charslength_p ry)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>. is_derivation (terminals p @ fst r # \\<gamma>)", "by (metis append_Cons next_symbol_starts_item_\\<beta> p pvalid_def \n        pvalid_is_derivation_terminals_item_\\<beta> ry)"], ["proof (state)\nthis:\n  pvalid p x\n\ngoal (1 subgoal):\n 1. \\<exists>r y.\n       r \\<in> \\<RR> \\<and>\n       x = init_item r k \\<and>\n       y \\<in> bin I k \\<and> next_symbol y = Some (fst r) \\<Longrightarrow>\n    x \\<in> Gen P", "then"], ["proof (chain)\npicking this:\n  pvalid p x", "show ?case"], ["proof (prove)\nusing this:\n  pvalid p x\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "using Gen_def mem_Collect_eq p"], ["proof (prove)\nusing this:\n  pvalid p x\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n  p \\<in> P \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen P\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Gen P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Predict_subset_Gen:\n  assumes \"I \\<subseteq> Gen P\"\n  assumes \"k \\<le> length Doc\"\n  shows \"Predict k I \\<subseteq> Gen P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predict k I \\<subseteq> Gen P", "using Predict_elem_in_Gen assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?I \\<subseteq> Gen ?P; ?k \\<le> length Doc;\n   ?x \\<in> Predict ?k ?I\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> Gen ?P\n  I \\<subseteq> Gen P\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. Predict k I \\<subseteq> Gen P", "by blast"], ["", "lemma nth_superfluous_append[simp]: \"i < length a \\<Longrightarrow> (a@b)!i = a!i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length a \\<Longrightarrow> (a @ b) ! i = a ! i", "by (simp add: nth_append)"], ["", "lemma tokens_nth_in_\\<Z>: \n  \"p \\<in> \\<PP> \\<Longrightarrow> \\<forall> i. i < length p \\<longrightarrow> (\\<exists> u. p ! i \\<in> \\<Z> (charslength (take i p)) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP> \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "proof (induct rule: \\<PP>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<length [].\n       \\<exists>u. [] ! i \\<in> \\<Z> (charslength (take i [])) u\n 2. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "case Base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<forall>i<length [].\n       \\<exists>u. [] ! i \\<in> \\<Z> (charslength (take i [])) u\n 2. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length [].\n       \\<exists>u. [] ! i \\<in> \\<Z> (charslength (take i [])) u", "by simp"], ["proof (state)\nthis:\n  \\<forall>i<length [].\n     \\<exists>u. [] ! i \\<in> \\<Z> (charslength (take i [])) u\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "case (Induct p k u)"], ["proof (state)\nthis:\n  ?q \\<in> \\<P> k u \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n  p \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "then"], ["proof (chain)\npicking this:\n  ?q \\<in> \\<P> k u \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n  p \\<in> \\<P> k (Suc u)", "have \"p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\""], ["proof (prove)\nusing this:\n  ?q \\<in> \\<P> k u \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n  p \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)", "by simp"], ["proof (state)\nthis:\n  p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> \\<P> k u \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "then"], ["proof (chain)\npicking this:\n  p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "proof (induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> \\<P> k u \\<Longrightarrow>\n       \\<forall>i<length p.\n          \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "case (Init p)"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       p \\<in> \\<P> k u \\<Longrightarrow>\n       \\<forall>i<length p.\n          \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "using Induct"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  ?q \\<in> \\<P> k u \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n  pa__ \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length p.\n     \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "case (Iterate p Y)"], ["proof (state)\nthis:\n  ?q \\<in> Y \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n  p \\<in> Append (\\<Z> k (Suc u)) k Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "from Iterate(2)"], ["proof (chain)\npicking this:\n  p \\<in> Append (\\<Z> k (Suc u)) k Y", "have \"p \\<in> Y \\<or> (\\<exists> q t. p = q@[t] \\<and> q \\<in> by_length k Y \\<and> t \\<in> \\<Z> k (Suc u) \\<and> \n      admissible (q @ [t]))\""], ["proof (prove)\nusing this:\n  p \\<in> Append (\\<Z> k (Suc u)) k Y\n\ngoal (1 subgoal):\n 1. p \\<in> Y \\<or>\n    (\\<exists>q t.\n        p = q @ [t] \\<and>\n        q \\<in> by_length k Y \\<and>\n        t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]))", "by (auto simp add: Append_def)"], ["proof (state)\nthis:\n  p \\<in> Y \\<or>\n  (\\<exists>q t.\n      p = q @ [t] \\<and>\n      q \\<in> by_length k Y \\<and>\n      t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   \\<forall>i<length q.\n                      \\<exists>u.\n                         q ! i \\<in> \\<Z> (charslength (take i q)) u;\n        p \\<in> Append (\\<Z> k (Suc u)) k Y\\<rbrakk>\n       \\<Longrightarrow> \\<forall>i<length p.\n                            \\<exists>u.\n                               p ! i \\<in> \\<Z> (charslength (take i p)) u", "then"], ["proof (chain)\npicking this:\n  p \\<in> Y \\<or>\n  (\\<exists>q t.\n      p = q @ [t] \\<and>\n      q \\<in> by_length k Y \\<and>\n      t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]))", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> Y \\<or>\n  (\\<exists>q t.\n      p = q @ [t] \\<and>\n      q \\<in> by_length k Y \\<and>\n      t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]))\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> Y \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n 2. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "case 1"], ["proof (state)\nthis:\n  p \\<in> Y\n\ngoal (2 subgoals):\n 1. p \\<in> Y \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n 2. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "using Iterate(1)"], ["proof (prove)\nusing this:\n  p \\<in> Y\n  ?q \\<in> Y \\<Longrightarrow>\n  \\<forall>i<length ?q.\n     \\<exists>u. ?q ! i \\<in> \\<Z> (charslength (take i ?q)) u\n\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length p.\n     \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "case 2"], ["proof (state)\nthis:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and>\n     t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "then"], ["proof (chain)\npicking this:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and>\n     t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])", "obtain q t where \n        qt: \"p = q @ [t] \\<and> q \\<in> by_length k Y \\<and> t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\""], ["proof (prove)\nusing this:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and>\n     t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. (\\<And>q t.\n        p = q @ [t] \\<and>\n        q \\<in> by_length k Y \\<and>\n        t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "then"], ["proof (chain)\npicking this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])", "have q_in_Y: \"q \\<in> Y\""], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. q \\<in> Y", "by auto"], ["proof (state)\nthis:\n  q \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "with qt"], ["proof (chain)\npicking this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n  q \\<in> Y", "have k: \"k = charslength q\""], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n  q \\<in> Y\n\ngoal (1 subgoal):\n 1. k = charslength q", "by auto"], ["proof (state)\nthis:\n  k = charslength q\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "with qt"], ["proof (chain)\npicking this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n  k = charslength q", "have t: \"t \\<in> \\<Z> k (Suc u)\""], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and>\n  t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t])\n  k = charslength q\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k (Suc u)", "by auto"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and>\n       t \\<in> \\<Z> k (Suc u) \\<and> admissible (q @ [t]) \\<Longrightarrow>\n    \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length p.\n       \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u", "proof(auto simp add: qt)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (length q) \\<Longrightarrow>\n       \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (length q) \\<Longrightarrow>\n       \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "assume i: \"i < Suc (length q)\""], ["proof (state)\nthis:\n  i < Suc (length q)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (length q) \\<Longrightarrow>\n       \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "then"], ["proof (chain)\npicking this:\n  i < Suc (length q)", "have \"i < length q \\<or> i = length q\""], ["proof (prove)\nusing this:\n  i < Suc (length q)\n\ngoal (1 subgoal):\n 1. i < length q \\<or> i = length q", "by arith"], ["proof (state)\nthis:\n  i < length q \\<or> i = length q\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       i < Suc (length q) \\<Longrightarrow>\n       \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "then"], ["proof (chain)\npicking this:\n  i < length q \\<or> i = length q", "show \"\\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\""], ["proof (prove)\nusing this:\n  i < length q \\<or> i = length q\n\ngoal (1 subgoal):\n 1. \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. i < length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\n 2. i = length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "case 1"], ["proof (state)\nthis:\n  i < length q\n\ngoal (2 subgoals):\n 1. i < length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\n 2. i = length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "from Iterate(1)[OF q_in_Y]"], ["proof (chain)\npicking this:\n  \\<forall>i<length q.\n     \\<exists>u. q ! i \\<in> \\<Z> (charslength (take i q)) u", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>i<length q.\n     \\<exists>u. q ! i \\<in> \\<Z> (charslength (take i q)) u\n\ngoal (1 subgoal):\n 1. \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "by (simp add: 1)"], ["proof (state)\nthis:\n  \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\n\ngoal (1 subgoal):\n 1. i = length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i = length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "case 2"], ["proof (state)\nthis:\n  i = length q\n\ngoal (1 subgoal):\n 1. i = length q \\<Longrightarrow>\n    \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u", "apply (auto simp add: 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. t \\<in> \\<Z> (length (chars q)) u", "apply (rule_tac x=\"Suc u\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> (length (chars q)) (Suc u)", "using k t"], ["proof (prove)\nusing this:\n  k = charslength q\n  t \\<in> \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> (length (chars q)) (Suc u)", "by auto"], ["proof (state)\nthis:\n  \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>u. (q @ [t]) ! i \\<in> \\<Z> (length (chars (take i q))) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length p.\n     \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length p.\n     \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>i<length p.\n     \\<exists>u. p ! i \\<in> \\<Z> (charslength (take i p)) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_append_token:\n  assumes p: \"p \\<in> \\<P> k u\"\n  assumes t: \"t \\<in> \\<Z> k (Suc u)\"\n  assumes pt: \"admissible (p@[t])\"\n  assumes k: \"charslength p = k\"\n  shows \"p@[t] \\<in> \\<P> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k (Suc u)", "apply (simp only: \\<P>.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [t] \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)", "apply (rule_tac n=\"Suc 0\" in limit_elem)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [t] \\<in> funpower (Append (\\<Z> k (Suc u)) k) (Suc 0) (\\<P> k u)", "using p t pt k"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  t \\<in> \\<Z> k (Suc u)\n  admissible (p @ [t])\n  charslength p = k\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> funpower (Append (\\<Z> k (Suc u)) k) (Suc 0) (\\<P> k u)", "apply (auto simp only: Append_def funpower.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> (charslength p) u;\n     t \\<in> \\<Z> (charslength p) (Suc u); admissible (p @ [t]);\n     k = charslength p; p @ [t] \\<notin> \\<P> (charslength p) u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>pa ta.\n                         p @ [t] = pa @ [ta] \\<and>\n                         pa \\<in> by_length (charslength p)\n                                   (\\<P> (charslength p) u) \\<and>\n                         ta \\<in> \\<Z> (charslength p) (Suc u) \\<and>\n                         admissible (pa @ [ta])", "by fastforce"], ["", "definition indexlt_rel :: \"((nat \\<times> nat) \\<times> (nat \\<times> nat)) set\" where\n  \"indexlt_rel = less_than <*lex*> less_than\""], ["", "definition indexlt :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"indexlt k' u' k u = (((k', u'), (k, u)) \\<in> indexlt_rel)\""], ["", "lemma indexlt_simp: \"indexlt k' u' k u = (k' < k \\<or> (k' = k \\<and> u' < u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k' u' k u = (k' < k \\<or> k' = k \\<and> u' < u)", "by (auto simp add: indexlt_def indexlt_rel_def)"], ["", "lemma wf_indexlt_rel: \"wf indexlt_rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf indexlt_rel", "using indexlt_rel_def pair_less_def"], ["proof (prove)\nusing this:\n  indexlt_rel = less_than <*lex*> less_than\n  pair_less = less_than <*lex*> less_than\n\ngoal (1 subgoal):\n 1. wf indexlt_rel", "by auto"], ["", "lemma \\<P>_induct[consumes 1, case_names Induct]:\n  assumes \"p \\<in> \\<P> k u\"\n  assumes induct: \"\\<And> p k u . (\\<And> p' k' u'. p' \\<in> \\<P> k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> P p' k' u') \n                     \\<Longrightarrow> p \\<in> \\<P> k u \\<Longrightarrow> P p k u\"\n  shows \"P p k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P p k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P p k u", "let ?R = \"indexlt_rel <*lex*> {}\""], ["proof (state)\ngoal (1 subgoal):\n 1. P p k u", "have wf_R: \"wf ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (indexlt_rel <*lex*> {})", "by (auto simp add: wf_indexlt_rel)"], ["proof (state)\nthis:\n  wf (indexlt_rel <*lex*> {})\n\ngoal (1 subgoal):\n 1. P p k u", "let ?P = \"\\<lambda> a. snd a \\<in> \\<P> (fst (fst a)) (snd (fst a)) \\<longrightarrow> P (snd a) (fst (fst a)) (snd (fst a))\""], ["proof (state)\ngoal (1 subgoal):\n 1. P p k u", "have \"p \\<in> \\<P> k u \\<longrightarrow> P p k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<longrightarrow> P p k u", "apply (rule wf_induct[OF wf_R, where P = ?P and a = \"((k, u), p)\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>a b ba.\n          (((a, b), ba), x) \\<in> indexlt_rel <*lex*> {} \\<longrightarrow>\n          ba \\<in> \\<P> a b \\<longrightarrow> P ba a b \\<Longrightarrow>\n       snd x \\<in> \\<P> (fst (fst x)) (snd (fst x)) \\<longrightarrow>\n       P (snd x) (fst (fst x)) (snd (fst x))", "apply (auto simp add: indexlt_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<P> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<P> a b\\<rbrakk>\n       \\<Longrightarrow> P ba a b", "apply (rule_tac p=ba and k=a and u=b in induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba p' k' u'.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<P> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<P> a b; p' \\<in> \\<P> k' u'; indexlt k' u' a b\\<rbrakk>\n       \\<Longrightarrow> P p' k' u'\n 2. \\<And>a b ba.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<P> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<P> a b\\<rbrakk>\n       \\<Longrightarrow> ba \\<in> \\<P> a b", "by auto"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u \\<longrightarrow> P p k u\n\ngoal (1 subgoal):\n 1. P p k u", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<longrightarrow> P p k u\n\ngoal (1 subgoal):\n 1. P p k u", "using assms"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<longrightarrow> P p k u\n  p \\<in> \\<P> k u\n  \\<lbrakk>\\<And>p' k' u'.\n              \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' ?k ?u\\<rbrakk>\n              \\<Longrightarrow> P p' k' u';\n   ?p \\<in> \\<P> ?k ?u\\<rbrakk>\n  \\<Longrightarrow> P ?p ?k ?u\n\ngoal (1 subgoal):\n 1. P p k u", "by auto"], ["proof (state)\nthis:\n  P p k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonempty_path_indices: \n  assumes p: \"p \\<in> \\<P> k u\"\n  assumes nonempty: \"p \\<noteq> []\"\n  shows \"k > 0 \\<or> u > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k \\<or> 0 < u", "proof (cases \"u = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < k \\<or> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "case True"], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < k \\<or> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "note u = True"], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < k \\<or> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "have \"k > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < k", "proof (cases \"k = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> 0 < k\n 2. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "case True"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> 0 < k\n 2. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "with p u"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u\n  u = 0\n  k = 0", "have \"p = []\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  u = 0\n  k = 0\n\ngoal (1 subgoal):\n 1. p = []", "by simp"], ["proof (state)\nthis:\n  p = []\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> 0 < k\n 2. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "with nonempty"], ["proof (chain)\npicking this:\n  p \\<noteq> []\n  p = []", "have \"False\""], ["proof (prove)\nusing this:\n  p \\<noteq> []\n  p = []\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow> 0 < k\n 2. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. 0 < k", "by auto"], ["proof (state)\nthis:\n  0 < k\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "case False"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow> 0 < k", "then"], ["proof (chain)\npicking this:\n  k \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < k", "by arith"], ["proof (state)\nthis:\n  0 < k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < k \\<or> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "then"], ["proof (chain)\npicking this:\n  0 < k", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. 0 < k \\<or> 0 < u", "by blast"], ["proof (state)\nthis:\n  0 < k \\<or> 0 < u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "case False"], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < k \\<or> 0 < u", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < k \\<or> 0 < u", "by arith"], ["proof (state)\nthis:\n  0 < k \\<or> 0 < u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma base_paths:\n  assumes p: \"p \\<in> \\<P> k 0\"\n  assumes k: \"k > 0\"\n  shows \"\\<exists> u. p \\<in> \\<P> (k - 1) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u. p \\<in> \\<P> (k - 1) u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>u. p \\<in> \\<P> (k - 1) u", "from k"], ["proof (chain)\npicking this:\n  0 < k", "have \"\\<exists> i. k = Suc i\""], ["proof (prove)\nusing this:\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<exists>i. k = Suc i", "by arith"], ["proof (state)\nthis:\n  \\<exists>i. k = Suc i\n\ngoal (1 subgoal):\n 1. \\<exists>u. p \\<in> \\<P> (k - 1) u", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. k = Suc i", "obtain i where i: \"k = Suc i\""], ["proof (prove)\nusing this:\n  \\<exists>i. k = Suc i\n\ngoal (1 subgoal):\n 1. (\\<And>i. k = Suc i \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  k = Suc i\n\ngoal (1 subgoal):\n 1. \\<exists>u. p \\<in> \\<P> (k - 1) u", "from p"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k 0", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k 0\n\ngoal (1 subgoal):\n 1. \\<exists>u. p \\<in> \\<P> (k - 1) u", "by (auto simp add: i natUnion_def)"], ["proof (state)\nthis:\n  \\<exists>u. p \\<in> \\<P> (k - 1) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma indexlt_trans: \"indexlt k'' u'' k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> indexlt k'' u'' k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n    \\<Longrightarrow> indexlt k'' u'' k u", "using dual_order.strict_trans indexlt_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n    \\<Longrightarrow> indexlt k'' u'' k u", "by auto"], ["", "definition is_continuation :: \"nat \\<Rightarrow> nat \\<Rightarrow> tokens \\<Rightarrow> tokens \\<Rightarrow> bool\" where\n  \"is_continuation k u q ts = (q \\<in> \\<P> k u \\<and> charslength q = k \\<and> admissible (q@ts) \\<and> \n     (\\<forall> t \\<in> set ts. t \\<in> \\<Z> k (Suc u)) \\<and> (\\<forall> t \\<in> set (butlast ts). chars_of_token t = []))\""], ["", "lemma limit_Append_path_nonelem_split: \"p \\<in> limit (Append T k) (\\<P> k u) \\<Longrightarrow> p \\<notin> \\<P> k u \\<Longrightarrow>\n  \\<exists> q ts. p = q@ts \\<and> q \\<in> \\<P> k u \\<and> charslength q = k \\<and> admissible (q@ts) \\<and> (\\<forall> t \\<in> set ts. t \\<in> T) \\<and> \n    (\\<forall> t \\<in> set (butlast ts). chars_of_token t = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> limit (Append T k) (\\<P> k u);\n     p \\<notin> \\<P> k u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q ts.\n                         p = q @ ts \\<and>\n                         q \\<in> \\<P> k u \\<and>\n                         charslength q = k \\<and>\n                         admissible (q @ ts) \\<and>\n                         (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                         (\\<forall>t\\<in>set (butlast ts).\n                             chars_of_token t = [])", "proof (induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> \\<P> k u; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>q \\<in> Y; q \\<notin> \\<P> k u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qa ts.\n  q = qa @ ts \\<and>\n  qa \\<in> \\<P> k u \\<and>\n  charslength qa = k \\<and>\n  admissible (qa @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = []);\n        p \\<in> Append T k Y; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])", "case (Init p)"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u\n  p \\<notin> \\<P> k u\n\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> \\<P> k u; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>q \\<in> Y; q \\<notin> \\<P> k u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qa ts.\n  q = qa @ ts \\<and>\n  qa \\<in> \\<P> k u \\<and>\n  charslength qa = k \\<and>\n  admissible (qa @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = []);\n        p \\<in> Append T k Y; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])", "thus ?case"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  p \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "by auto"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>q \\<in> Y; q \\<notin> \\<P> k u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qa ts.\n  q = qa @ ts \\<and>\n  qa \\<in> \\<P> k u \\<and>\n  charslength qa = k \\<and>\n  admissible (qa @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = []);\n        p \\<in> Append T k Y; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>q \\<in> Y; q \\<notin> \\<P> k u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qa ts.\n  q = qa @ ts \\<and>\n  qa \\<in> \\<P> k u \\<and>\n  charslength qa = k \\<and>\n  admissible (qa @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = []);\n        p \\<in> Append T k Y; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])", "case (Iterate p Y)"], ["proof (state)\nthis:\n  \\<lbrakk>?q \\<in> Y; ?q \\<notin> \\<P> k u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q ts.\n                       ?q = q @ ts \\<and>\n                       q \\<in> \\<P> k u \\<and>\n                       charslength q = k \\<and>\n                       admissible (q @ ts) \\<and>\n                       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                       (\\<forall>t\\<in>set (butlast ts).\n                           chars_of_token t = [])\n  p \\<in> Append T k Y\n  p \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   \\<lbrakk>q \\<in> Y; q \\<notin> \\<P> k u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>qa ts.\n  q = qa @ ts \\<and>\n  qa \\<in> \\<P> k u \\<and>\n  charslength qa = k \\<and>\n  admissible (qa @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = []);\n        p \\<in> Append T k Y; p \\<notin> \\<P> k u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts.\n                            p = q @ ts \\<and>\n                            q \\<in> \\<P> k u \\<and>\n                            charslength q = k \\<and>\n                            admissible (q @ ts) \\<and>\n                            (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n                            (\\<forall>t\\<in>set (butlast ts).\n                                chars_of_token t = [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "proof (cases \"p \\<in> Y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n 2. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "case True"], ["proof (state)\nthis:\n  p \\<in> Y\n\ngoal (2 subgoals):\n 1. p \\<in> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n 2. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "from Iterate(1)[OF True Iterate(3)]"], ["proof (chain)\npicking this:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "by blast"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "case False"], ["proof (state)\nthis:\n  p \\<notin> Y\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "with Append_def Iterate(2)"], ["proof (chain)\npicking this:\n  Append ?Z ?k ?P =\n  ?P \\<union>\n  {p @ [t] |p t.\n   p \\<in> by_length ?k ?P \\<and> t \\<in> ?Z \\<and> admissible (p @ [t])}\n  p \\<in> Append T k Y\n  p \\<notin> Y", "have \"\\<exists> q t. p = q@[t] \\<and> q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\""], ["proof (prove)\nusing this:\n  Append ?Z ?k ?P =\n  ?P \\<union>\n  {p @ [t] |p t.\n   p \\<in> by_length ?k ?P \\<and> t \\<in> ?Z \\<and> admissible (p @ [t])}\n  p \\<in> Append T k Y\n  p \\<notin> Y\n\ngoal (1 subgoal):\n 1. \\<exists>q t.\n       p = q @ [t] \\<and>\n       q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])", "by auto"], ["proof (state)\nthis:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "then"], ["proof (chain)\npicking this:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])", "obtain q t where qt: \"p = q@[t] \\<and> q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\""], ["proof (prove)\nusing this:\n  \\<exists>q t.\n     p = q @ [t] \\<and>\n     q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. (\\<And>q t.\n        p = q @ [t] \\<and>\n        q \\<in> by_length k Y \\<and>\n        t \\<in> T \\<and> admissible (q @ [t]) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "from qt"], ["proof (chain)\npicking this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])", "have qlen: \"charslength q = k\""], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. charslength q = k", "by auto"], ["proof (state)\nthis:\n  charslength q = k\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "have \"q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. p \\<notin> Y \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "then"], ["proof (chain)\npicking this:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u", "show ?thesis"], ["proof (prove)\nusing this:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "proof(induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "case 1"], ["proof (state)\nthis:\n  q \\<in> \\<P> k u\n\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "apply (rule_tac x=q in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "apply (rule_tac x=\"[t]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q @ [t] \\<and>\n    q \\<in> \\<P> k u \\<and>\n    charslength q = k \\<and>\n    admissible (q @ [t]) \\<and>\n    (\\<forall>t\\<in>set [t]. t \\<in> T) \\<and>\n    (\\<forall>t\\<in>set (butlast [t]). chars_of_token t = [])", "using qlen"], ["proof (prove)\nusing this:\n  charslength q = k\n\ngoal (1 subgoal):\n 1. p = q @ [t] \\<and>\n    q \\<in> \\<P> k u \\<and>\n    charslength q = k \\<and>\n    admissible (q @ [t]) \\<and>\n    (\\<forall>t\\<in>set [t]. t \\<in> T) \\<and>\n    (\\<forall>t\\<in>set (butlast [t]). chars_of_token t = [])", "by (simp add: qt 1)"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "case 2"], ["proof (state)\nthis:\n  q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "have q_in_Y: \"q \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> Y", "using qt"], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n\ngoal (1 subgoal):\n 1. q \\<in> Y", "by auto"], ["proof (state)\nthis:\n  q \\<in> Y\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "from Iterate(1)[OF q_in_Y 2]"], ["proof (chain)\npicking this:\n  \\<exists>qa ts.\n     q = qa @ ts \\<and>\n     qa \\<in> \\<P> k u \\<and>\n     charslength qa = k \\<and>\n     admissible (qa @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "obtain q' ts where \n        q'ts: \"q = q' @ ts \\<and> q' \\<in> \\<P> k u \\<and> charslength q' = k \\<and> (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n               (\\<forall>t\\<in>set(butlast ts). chars_of_token t = [])\""], ["proof (prove)\nusing this:\n  \\<exists>qa ts.\n     q = qa @ ts \\<and>\n     qa \\<in> \\<P> k u \\<and>\n     charslength qa = k \\<and>\n     admissible (qa @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. (\\<And>q' ts.\n        q = q' @ ts \\<and>\n        q' \\<in> \\<P> k u \\<and>\n        charslength q' = k \\<and>\n        (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n        (\\<forall>t\\<in>set (butlast ts).\n            chars_of_token t = []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = q' @ ts \\<and>\n  q' \\<in> \\<P> k u \\<and>\n  charslength q' = k \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "with qlen"], ["proof (chain)\npicking this:\n  charslength q = k\n  q = q' @ ts \\<and>\n  q' \\<in> \\<P> k u \\<and>\n  charslength q' = k \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "have \"charslength ts = 0\""], ["proof (prove)\nusing this:\n  charslength q = k\n  q = q' @ ts \\<and>\n  q' \\<in> \\<P> k u \\<and>\n  charslength q' = k \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. charslength ts = 0", "by auto"], ["proof (state)\nthis:\n  charslength ts = 0\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "hence empty: \"\\<forall> t \\<in> set(ts). chars_of_token t = []\""], ["proof (prove)\nusing this:\n  charslength ts = 0\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts. chars_of_token t = []", "apply (induct ts)"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength [] = 0 \\<Longrightarrow>\n    \\<forall>t\\<in>set []. chars_of_token t = []\n 2. \\<And>a ts.\n       \\<lbrakk>charslength ts = 0 \\<Longrightarrow>\n                \\<forall>t\\<in>set ts. chars_of_token t = [];\n        charslength (a # ts) = 0\\<rbrakk>\n       \\<Longrightarrow> \\<forall>t\\<in>set (a # ts). chars_of_token t = []", "by auto"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts. chars_of_token t = []\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q ts.\n       p = q @ ts \\<and>\n       q \\<in> \\<P> k u \\<and>\n       charslength q = k \\<and>\n       admissible (q @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "apply (rule_tac x=q' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ts.\n       p = q' @ ts \\<and>\n       q' \\<in> \\<P> k u \\<and>\n       charslength q' = k \\<and>\n       admissible (q' @ ts) \\<and>\n       (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n       (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "apply (rule_tac x=\"ts@[t]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = q' @ ts @ [t] \\<and>\n    q' \\<in> \\<P> k u \\<and>\n    charslength q' = k \\<and>\n    admissible (q' @ ts @ [t]) \\<and>\n    (\\<forall>t\\<in>set (ts @ [t]). t \\<in> T) \\<and>\n    (\\<forall>t\\<in>set (butlast (ts @ [t])). chars_of_token t = [])", "using qt q'ts empty"], ["proof (prove)\nusing this:\n  p = q @ [t] \\<and>\n  q \\<in> by_length k Y \\<and> t \\<in> T \\<and> admissible (q @ [t])\n  q = q' @ ts \\<and>\n  q' \\<in> \\<P> k u \\<and>\n  charslength q' = k \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  \\<forall>t\\<in>set ts. chars_of_token t = []\n\ngoal (1 subgoal):\n 1. p = q' @ ts @ [t] \\<and>\n    q' \\<in> \\<P> k u \\<and>\n    charslength q' = k \\<and>\n    admissible (q' @ ts @ [t]) \\<and>\n    (\\<forall>t\\<in>set (ts @ [t]). t \\<in> T) \\<and>\n    (\\<forall>t\\<in>set (butlast (ts @ [t])). chars_of_token t = [])", "by auto"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts.\n     p = q @ ts \\<and>\n     q \\<in> \\<P> k u \\<and>\n     charslength q = k \\<and>\n     admissible (q @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> T) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma limit_Append_path_nonelem_split': \n  \"p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u) \\<Longrightarrow> p \\<notin> \\<P> k u \\<Longrightarrow>\n   \\<exists> q ts. p = q@ts \\<and> is_continuation k u q ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u);\n     p \\<notin> \\<P> k u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q ts.\n                         p = q @ ts \\<and> is_continuation k u q ts", "apply (simp only: is_continuation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u);\n     p \\<notin> \\<P> k u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q ts.\n                         p = q @ ts \\<and>\n                         q \\<in> \\<P> k u \\<and>\n                         charslength q = k \\<and>\n                         admissible (q @ ts) \\<and>\n                         (\\<forall>t\\<in>set ts.\n                             t \\<in> \\<Z> k (Suc u)) \\<and>\n                         (\\<forall>t\\<in>set (butlast ts).\n                             chars_of_token t = [])", "apply (rule_tac limit_Append_path_nonelem_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u);\n     p \\<notin> \\<P> k u\\<rbrakk>\n    \\<Longrightarrow> p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\n 2. \\<lbrakk>p \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u);\n     p \\<notin> \\<P> k u\\<rbrakk>\n    \\<Longrightarrow> p \\<notin> \\<P> k u", "by auto"], ["", "lemma final_step_of_path: \"p \\<in> \\<P> k u \\<Longrightarrow> p \\<noteq> [] \\<Longrightarrow> (\\<exists> q ts k' u'. p = q@ts \\<and> indexlt k' u' k u \n  \\<and> is_continuation k' u' q ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k u; p \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q ts k' u'.\n                         p = q @ ts \\<and>\n                         indexlt k' u' k u \\<and> is_continuation k' u' q ts", "proof (induct rule: \\<P>_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>p' k' u'.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>q ts k'a u'a.\n  p' = q @ ts \\<and>\n  indexlt k'a u'a k' u' \\<and> is_continuation k'a u'a q ts;\n        p \\<in> \\<P> k u; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts k' u'.\n                            p = q @ ts \\<and>\n                            indexlt k' u' k u \\<and>\n                            is_continuation k' u' q ts", "case (Induct p k u)"], ["proof (state)\nthis:\n  \\<lbrakk>?p' \\<in> \\<P> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?p' \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> \\<exists>q ts k' u'.\n                       ?p' = q @ ts \\<and>\n                       indexlt k' u' ?k' ?u' \\<and>\n                       is_continuation k' u' q ts\n  p \\<in> \\<P> k u\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>p' k' u'.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>q ts k'a u'a.\n  p' = q @ ts \\<and>\n  indexlt k'a u'a k' u' \\<and> is_continuation k'a u'a q ts;\n        p \\<in> \\<P> k u; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts k' u'.\n                            p = q @ ts \\<and>\n                            indexlt k' u' k u \\<and>\n                            is_continuation k' u' q ts", "from Induct(2) Induct(3)"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u\n  p \\<noteq> []", "have ku_0: \"k > 0 \\<or> u > 0\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < k \\<or> 0 < u", "using nonempty_path_indices"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  p \\<noteq> []\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; ?p \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> 0 < ?k \\<or> 0 < ?u\n\ngoal (1 subgoal):\n 1. 0 < k \\<or> 0 < u", "by blast"], ["proof (state)\nthis:\n  0 < k \\<or> 0 < u\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>p' k' u'.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' \\<noteq> []\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>q ts k'a u'a.\n  p' = q @ ts \\<and>\n  indexlt k'a u'a k' u' \\<and> is_continuation k'a u'a q ts;\n        p \\<in> \\<P> k u; p \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q ts k' u'.\n                            p = q @ ts \\<and>\n                            indexlt k' u' k u \\<and>\n                            is_continuation k' u' q ts", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "proof (cases \"u = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "case True"], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "with ku_0"], ["proof (chain)\npicking this:\n  0 < k \\<or> 0 < u\n  u = 0", "have k_0: \"k > 0\""], ["proof (prove)\nusing this:\n  0 < k \\<or> 0 < u\n  u = 0\n\ngoal (1 subgoal):\n 1. 0 < k", "by arith"], ["proof (state)\nthis:\n  0 < k\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "with True Induct(2) base_paths"], ["proof (chain)\npicking this:\n  u = 0\n  p \\<in> \\<P> k u\n  \\<lbrakk>?p \\<in> \\<P> ?k 0; 0 < ?k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. ?p \\<in> \\<P> (?k - 1) u\n  0 < k", "have \"\\<exists> u'. p \\<in> \\<P> (k - 1) u'\""], ["proof (prove)\nusing this:\n  u = 0\n  p \\<in> \\<P> k u\n  \\<lbrakk>?p \\<in> \\<P> ?k 0; 0 < ?k\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. ?p \\<in> \\<P> (?k - 1) u\n  0 < k\n\ngoal (1 subgoal):\n 1. \\<exists>u'. p \\<in> \\<P> (k - 1) u'", "by auto"], ["proof (state)\nthis:\n  \\<exists>u'. p \\<in> \\<P> (k - 1) u'\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "then"], ["proof (chain)\npicking this:\n  \\<exists>u'. p \\<in> \\<P> (k - 1) u'", "obtain u' where u': \"p \\<in> \\<P> (k - 1) u'\""], ["proof (prove)\nusing this:\n  \\<exists>u'. p \\<in> \\<P> (k - 1) u'\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        p \\<in> \\<P> (k - 1) u' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> (k - 1) u'\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have indexlt: \"indexlt (k - 1) u' k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt (k - 1) u' k u", "by (simp add: indexlt_simp k_0)"], ["proof (state)\nthis:\n  indexlt (k - 1) u' k u\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "from Induct(1)[OF u' indexlt Induct(3)]"], ["proof (chain)\npicking this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a (k - 1) u' \\<and> is_continuation k' u'a q ts", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a (k - 1) u' \\<and> is_continuation k' u'a q ts\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "using indexlt indexlt_trans"], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a (k - 1) u' \\<and> is_continuation k' u'a q ts\n  indexlt (k - 1) u' k u\n  \\<lbrakk>indexlt ?k'' ?u'' ?k' ?u'; indexlt ?k' ?u' ?k ?u\\<rbrakk>\n  \\<Longrightarrow> indexlt ?k'' ?u'' ?k ?u\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "by blast"], ["proof (state)\nthis:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "case False"], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "have \"\\<exists> u'. u = Suc u'\""], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>u'. u = Suc u'", "by arith"], ["proof (state)\nthis:\n  \\<exists>u'. u = Suc u'\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "then"], ["proof (chain)\npicking this:\n  \\<exists>u'. u = Suc u'", "obtain u' where u': \"u = Suc u'\""], ["proof (prove)\nusing this:\n  \\<exists>u'. u = Suc u'\n\ngoal (1 subgoal):\n 1. (\\<And>u'. u = Suc u' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "with Induct(2)"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u\n  u = Suc u'", "have p_limit: \"p \\<in> limit (Append (\\<Z> k (Suc u')) k) (\\<P> k u')\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. p \\<in> limit (Append (\\<Z> k (Suc u')) k) (\\<P> k u')", "using \\<P>.simps(2)"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u\n  u = Suc u'\n  \\<P> ?k (Suc ?u) = limit (Append (\\<Z> ?k (Suc ?u)) ?k) (\\<P> ?k ?u)\n\ngoal (1 subgoal):\n 1. p \\<in> limit (Append (\\<Z> k (Suc u')) k) (\\<P> k u')", "by blast"], ["proof (state)\nthis:\n  p \\<in> limit (Append (\\<Z> k (Suc u')) k) (\\<P> k u')\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "from u'"], ["proof (chain)\npicking this:\n  u = Suc u'", "have indexlt: \"indexlt k u' k u\""], ["proof (prove)\nusing this:\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. indexlt k u' k u", "by (simp add: indexlt_simp)"], ["proof (state)\nthis:\n  indexlt k u' k u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have \"p \\<in> \\<P> k u' \\<or> p \\<notin> \\<P> k u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u' \\<or> p \\<notin> \\<P> k u'", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u' \\<or> p \\<notin> \\<P> k u'\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u' \\<or> p \\<notin> \\<P> k u'", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u' \\<or> p \\<notin> \\<P> k u'\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. p \\<notin> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "case 1"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u'\n\ngoal (2 subgoals):\n 1. p \\<in> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n 2. p \\<notin> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "from Induct(1)[OF 1 indexlt Induct(3)]"], ["proof (chain)\npicking this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a k u' \\<and> is_continuation k' u'a q ts", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a k u' \\<and> is_continuation k' u'a q ts\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "using indexlt indexlt_trans"], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'a.\n     p = q @ ts \\<and>\n     indexlt k' u'a k u' \\<and> is_continuation k' u'a q ts\n  indexlt k u' k u\n  \\<lbrakk>indexlt ?k'' ?u'' ?k' ?u'; indexlt ?k' ?u' ?k ?u\\<rbrakk>\n  \\<Longrightarrow> indexlt ?k'' ?u'' ?k ?u\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "by blast"], ["proof (state)\nthis:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "case 2"], ["proof (state)\nthis:\n  p \\<notin> \\<P> k u'\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k u' \\<Longrightarrow>\n    \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "from limit_Append_path_nonelem_split'[OF p_limit 2]"], ["proof (chain)\npicking this:\n  \\<exists>q ts. p = q @ ts \\<and> is_continuation k u' q ts", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>q ts. p = q @ ts \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "using indexlt u'"], ["proof (prove)\nusing this:\n  \\<exists>q ts. p = q @ ts \\<and> is_continuation k u' q ts\n  indexlt k u' k u\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. \\<exists>q ts k' u'.\n       p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "by auto"], ["proof (state)\nthis:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma terminals_empty[simp]: \"terminals [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals [] = []", "by (auto simp add: terminals_def)"], ["", "lemma empty_in_\\<L>\\<^sub>P[simp]: \"[] \\<in> \\<L>\\<^sub>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> \\<L>\\<^sub>P", "apply (simp add: \\<L>\\<^sub>P_def is_derivation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Ex (derives [\\<SS>])", "apply (rule_tac x=\"[\\<SS>]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives [\\<SS>] [\\<SS>]", "by simp"], ["", "lemma admissible_empty[simp]: \"admissible []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible []", "by (auto simp add: admissible_def)"], ["", "lemma \\<PP>_are_admissible: \"p \\<in> \\<PP> \\<Longrightarrow> admissible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP> \\<Longrightarrow> admissible p", "proof (induct rule: \\<PP>_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. admissible []\n 2. \\<And>p k u.\n       \\<lbrakk>\\<And>q. q \\<in> \\<P> k u \\<Longrightarrow> admissible q;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> admissible p", "case Base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. admissible []\n 2. \\<And>p k u.\n       \\<lbrakk>\\<And>q. q \\<in> \\<P> k u \\<Longrightarrow> admissible q;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> admissible p", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible []", "by simp"], ["proof (state)\nthis:\n  admissible []\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q. q \\<in> \\<P> k u \\<Longrightarrow> admissible q;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> admissible p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q. q \\<in> \\<P> k u \\<Longrightarrow> admissible q;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> admissible p", "case (Induct p k u)"], ["proof (state)\nthis:\n  ?q \\<in> \\<P> k u \\<Longrightarrow> admissible ?q\n  p \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<And>p k u.\n       \\<lbrakk>\\<And>q. q \\<in> \\<P> k u \\<Longrightarrow> admissible q;\n        p \\<in> \\<P> k (Suc u)\\<rbrakk>\n       \\<Longrightarrow> admissible p", "from Induct(2)[simplified]"], ["proof (chain)\npicking this:\n  p \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)\n\ngoal (1 subgoal):\n 1. admissible p", "proof (induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> \\<P> k u \\<Longrightarrow> admissible p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "case (Init p)"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u\n\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> \\<P> k u \\<Longrightarrow> admissible p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "from Induct(1)[OF Init]"], ["proof (chain)\npicking this:\n  admissible p", "show ?case"], ["proof (prove)\nusing this:\n  admissible p\n\ngoal (1 subgoal):\n 1. admissible p", "."], ["proof (state)\nthis:\n  admissible p\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "case (Iterate p Y)"], ["proof (state)\nthis:\n  ?q \\<in> Y \\<Longrightarrow> admissible ?q\n  p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "have \"\\<Y> (\\<Z> k u) (\\<P> k u) k \\<subseteq> \\<X> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Y> (\\<Z> k u) (\\<P> k u) k \\<subseteq> \\<X> k", "by (metis \\<Z>.simps(2) \\<Z>_subset_\\<X>)"], ["proof (state)\nthis:\n  \\<Y> (\\<Z> k u) (\\<P> k u) k \\<subseteq> \\<X> k\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "then"], ["proof (chain)\npicking this:\n  \\<Y> (\\<Z> k u) (\\<P> k u) k \\<subseteq> \\<X> k", "have 1: \"Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y \\<subseteq> Append (\\<X> k) k Y\""], ["proof (prove)\nusing this:\n  \\<Y> (\\<Z> k u) (\\<P> k u) k \\<subseteq> \\<X> k\n\ngoal (1 subgoal):\n 1. Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\n    \\<subseteq> Append (\\<X> k) k Y", "by (rule Append_mono, simp)"], ["proof (state)\nthis:\n  Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y \\<subseteq> Append (\\<X> k) k Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "have 2: \"p \\<in> Append (\\<X> k) k Y \\<Longrightarrow> admissible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Append (\\<X> k) k Y \\<Longrightarrow> admissible p", "apply (auto simp add: Append_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Y \\<Longrightarrow> admissible p", "by (simp add: Iterate)"], ["proof (state)\nthis:\n  p \\<in> Append (\\<X> k) k Y \\<Longrightarrow> admissible p\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> admissible q;\n        p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\\<rbrakk>\n       \\<Longrightarrow> admissible p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible p", "apply (rule 2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Append (\\<X> k) k Y", "using \"1\" Iterate(2)"], ["proof (prove)\nusing this:\n  Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y \\<subseteq> Append (\\<X> k) k Y\n  p \\<in> Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k Y\n\ngoal (1 subgoal):\n 1. p \\<in> Append (\\<X> k) k Y", "by blast"], ["proof (state)\nthis:\n  admissible p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  admissible p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma prefix_of_empty_is_empty: \"is_prefix q [] \\<Longrightarrow> q = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix q [] \\<Longrightarrow> q = []", "by (metis  is_prefix_cons neq_Nil_conv)"], ["", "lemma subset_\\<P> :\n  assumes leq: \"k' < k \\<or> (k' = k \\<and> u' \\<le> u)\"\n  shows \"\\<P> k' u' \\<subseteq> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "from leq"], ["proof (chain)\npicking this:\n  k' < k \\<or> k' = k \\<and> u' \\<le> u", "show ?thesis"], ["proof (prove)\nusing this:\n  k' < k \\<or> k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "case 1"], ["proof (state)\nthis:\n  k' < k\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "have s1: \"\\<P> k' u' \\<subseteq> \\<Q> k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<Q> k'", "by (rule_tac subset_\\<P>\\<Q>k)"], ["proof (state)\nthis:\n  \\<P> k' u' \\<subseteq> \\<Q> k'\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "have s2: \"\\<Q> k' \\<subseteq> \\<Q> (k - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Q> k' \\<subseteq> \\<Q> (k - 1)", "apply (rule_tac subset_\\<Q>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> k - 1", "using 1"], ["proof (prove)\nusing this:\n  k' < k\n\ngoal (1 subgoal):\n 1. k' \\<le> k - 1", "by arith"], ["proof (state)\nthis:\n  \\<Q> k' \\<subseteq> \\<Q> (k - 1)\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "from subset_\\<Q>\\<P>Suc[where k=\"k - 1\"] 1"], ["proof (chain)\npicking this:\n  \\<Q> (k - 1) \\<subseteq> \\<P> (Suc (k - 1)) ?u\n  k' < k", "have s3: \"\\<Q> (k - 1) \\<subseteq> \\<P> k 0\""], ["proof (prove)\nusing this:\n  \\<Q> (k - 1) \\<subseteq> \\<P> (Suc (k - 1)) ?u\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<Q> (k - 1) \\<subseteq> \\<P> k 0", "by simp"], ["proof (state)\nthis:\n  \\<Q> (k - 1) \\<subseteq> \\<P> k 0\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "have s4: \"\\<P> k 0 \\<subseteq> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P> k 0 \\<subseteq> \\<P> k u", "by (rule_tac subset_\\<P>k, simp)"], ["proof (state)\nthis:\n  \\<P> k 0 \\<subseteq> \\<P> k u\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<P> k' u' \\<subseteq> \\<P> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "from s1 s2 s3 s4 subset_trans"], ["proof (chain)\npicking this:\n  \\<P> k' u' \\<subseteq> \\<Q> k'\n  \\<Q> k' \\<subseteq> \\<Q> (k - 1)\n  \\<Q> (k - 1) \\<subseteq> \\<P> k 0\n  \\<P> k 0 \\<subseteq> \\<P> k u\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C", "show ?case"], ["proof (prove)\nusing this:\n  \\<P> k' u' \\<subseteq> \\<Q> k'\n  \\<Q> k' \\<subseteq> \\<Q> (k - 1)\n  \\<Q> (k - 1) \\<subseteq> \\<P> k 0\n  \\<P> k 0 \\<subseteq> \\<P> k u\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C\n\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "case 2"], ["proof (state)\nthis:\n  k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<P> k' u' \\<subseteq> \\<P> k u", "thus ?case"], ["proof (prove)\nusing this:\n  k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "by (simp add : subset_\\<P>k)"], ["proof (state)\nthis:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_path_is_elem[simp]: \"[] \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> \\<P> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. [] \\<in> \\<P> k u", "have \"[] \\<in> \\<P> 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> \\<P> 0 0", "by simp"], ["proof (state)\nthis:\n  [] \\<in> \\<P> 0 0\n\ngoal (1 subgoal):\n 1. [] \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  [] \\<in> \\<P> 0 0", "show \"[] \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  [] \\<in> \\<P> 0 0\n\ngoal (1 subgoal):\n 1. [] \\<in> \\<P> k u", "by (metis le0 not_gr0 subsetCE subset_\\<P>)"], ["proof (state)\nthis:\n  [] \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_prefix_of_append:\n  assumes \"is_prefix p (a@b)\"\n  shows \"is_prefix p a \\<or> (\\<exists> b'. b' \\<noteq> [] \\<and> is_prefix b' b \\<and> p = a@b')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix p a \\<or>\n    (\\<exists>b'. b' \\<noteq> [] \\<and> is_prefix b' b \\<and> p = a @ b')", "apply (auto simp add: is_prefix_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>b'.\n       b' = [] \\<or>\n       (\\<forall>w. b' @ w \\<noteq> b) \\<or>\n       p \\<noteq> a @ b' \\<Longrightarrow>\n    \\<exists>w. p @ w = a", "by (metis append_Nil2 append_eq_append_conv2 assms is_prefix_cancel is_prefix_def)"], ["", "lemma prefix_is_continuation: \"is_continuation k u p ts \\<Longrightarrow> is_prefix ts' ts \\<Longrightarrow> \n  is_continuation k u p ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_continuation k u p ts; is_prefix ts' ts\\<rbrakk>\n    \\<Longrightarrow> is_continuation k u p ts'", "apply (auto simp add: is_continuation_def is_prefix_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>w.\n       \\<lbrakk>ts = ts' @ w; p \\<in> \\<P> (length (chars p)) u;\n        k = length (chars p); admissible (p @ ts' @ w);\n        \\<forall>t\\<in>set ts' \\<union> set w.\n           t \\<in> \\<Y> (\\<Z> (length (chars p)) u)\n                    (\\<P> (length (chars p)) u) (length (chars p));\n        \\<forall>t\\<in>set (butlast (ts' @ w)).\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> admissible (p @ ts')\n 2. \\<And>w a b.\n       \\<lbrakk>ts = ts' @ w; p \\<in> \\<P> (length (chars p)) u;\n        k = length (chars p); admissible (p @ ts' @ w);\n        \\<forall>t\\<in>set ts' \\<union> set w.\n           t \\<in> \\<Y> (\\<Z> (length (chars p)) u)\n                    (\\<P> (length (chars p)) u) (length (chars p));\n        \\<forall>t\\<in>set (butlast (ts' @ w)). chars_of_token t = [];\n        (a, b) \\<in> set (butlast ts')\\<rbrakk>\n       \\<Longrightarrow> b = []", "apply (metis \\<L>\\<^sub>P_split admissible_def append_assoc terminals_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>w a b.\n       \\<lbrakk>ts = ts' @ w; p \\<in> \\<P> (length (chars p)) u;\n        k = length (chars p); admissible (p @ ts' @ w);\n        \\<forall>t\\<in>set ts' \\<union> set w.\n           t \\<in> \\<Y> (\\<Z> (length (chars p)) u)\n                    (\\<P> (length (chars p)) u) (length (chars p));\n        \\<forall>t\\<in>set (butlast (ts' @ w)). chars_of_token t = [];\n        (a, b) \\<in> set (butlast ts')\\<rbrakk>\n       \\<Longrightarrow> b = []", "using in_set_butlast_appendI"], ["proof (prove)\nusing this:\n  ?x \\<in> set (butlast ?xs) \\<or>\n  ?x \\<in> set (butlast ?ys) \\<Longrightarrow>\n  ?x \\<in> set (butlast (?xs @ ?ys))\n\ngoal (1 subgoal):\n 1. \\<And>w a b.\n       \\<lbrakk>ts = ts' @ w; p \\<in> \\<P> (length (chars p)) u;\n        k = length (chars p); admissible (p @ ts' @ w);\n        \\<forall>t\\<in>set ts' \\<union> set w.\n           t \\<in> \\<Y> (\\<Z> (length (chars p)) u)\n                    (\\<P> (length (chars p)) u) (length (chars p));\n        \\<forall>t\\<in>set (butlast (ts' @ w)). chars_of_token t = [];\n        (a, b) \\<in> set (butlast ts')\\<rbrakk>\n       \\<Longrightarrow> b = []", "by fastforce"], ["", "lemma charslength_0: \"(\\<forall> t \\<in> set ts. chars_of_token t = []) = (charslength ts = 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>t\\<in>set ts. chars_of_token t = []) = (charslength ts = 0)", "by (induct ts, auto)"], ["", "lemma is_continuation_in_\\<P>: \"is_continuation k u p ts \\<Longrightarrow> p@ts \\<in> \\<P> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k u p ts \\<Longrightarrow> p @ ts \\<in> \\<P> k (Suc u)", "proof(induct ts rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_continuation k u p [] \\<Longrightarrow> p @ [] \\<in> \\<P> k (Suc u)\n 2. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "case Nil"], ["proof (state)\nthis:\n  is_continuation k u p []\n\ngoal (2 subgoals):\n 1. is_continuation k u p [] \\<Longrightarrow> p @ [] \\<in> \\<P> k (Suc u)\n 2. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "thus ?case"], ["proof (prove)\nusing this:\n  is_continuation k u p []\n\ngoal (1 subgoal):\n 1. p @ [] \\<in> \\<P> k (Suc u)", "apply (auto simp add: is_continuation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> (length (chars p)) u; admissible p;\n     k = length (chars p)\\<rbrakk>\n    \\<Longrightarrow> p \\<in> limit\n                               (Append\n                                 (\\<Y> (\\<Z> (length (chars p)) u)\n                                   (\\<P> (length (chars p)) u)\n                                   (length (chars p)))\n                                 (length (chars p)))\n                               (\\<P> (length (chars p)) u)", "using subset_\\<P>Suc"], ["proof (prove)\nusing this:\n  \\<P> ?k ?u \\<subseteq> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> (length (chars p)) u; admissible p;\n     k = length (chars p)\\<rbrakk>\n    \\<Longrightarrow> p \\<in> limit\n                               (Append\n                                 (\\<Y> (\\<Z> (length (chars p)) u)\n                                   (\\<P> (length (chars p)) u)\n                                   (length (chars p)))\n                                 (length (chars p)))\n                               (\\<P> (length (chars p)) u)", "by fastforce"], ["proof (state)\nthis:\n  p @ [] \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "case (snoc t ts)"], ["proof (state)\nthis:\n  is_continuation k u p ts \\<Longrightarrow> p @ ts \\<in> \\<P> k (Suc u)\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "from snoc(2)"], ["proof (chain)\npicking this:\n  is_continuation k u p (ts @ [t])", "have \"is_continuation k u p ts\""], ["proof (prove)\nusing this:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. is_continuation k u p ts", "by (metis append_Nil2 is_prefix_cancel is_prefix_empty prefix_is_continuation)"], ["proof (state)\nthis:\n  is_continuation k u p ts\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "note induct = snoc(1)[OF this]"], ["proof (state)\nthis:\n  p @ ts \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "then"], ["proof (chain)\npicking this:\n  p @ ts \\<in> \\<P> k (Suc u)", "have pts: \"p@ts \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\""], ["proof (prove)\nusing this:\n  p @ ts \\<in> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. p @ ts \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)", "by simp"], ["proof (state)\nthis:\n  p @ ts \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "note is_cont = snoc(2)"], ["proof (state)\nthis:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "then"], ["proof (chain)\npicking this:\n  is_continuation k u p (ts @ [t])", "have admissible: \"admissible (p@ts@[t])\""], ["proof (prove)\nusing this:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. admissible (p @ ts @ [t])", "by (simp add: is_continuation_def)"], ["proof (state)\nthis:\n  admissible (p @ ts @ [t])\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "from is_cont"], ["proof (chain)\npicking this:\n  is_continuation k u p (ts @ [t])", "have t: \"t \\<in> \\<Z> k (Suc u)\""], ["proof (prove)\nusing this:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k (Suc u)", "by (simp add: is_continuation_def)"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "from is_cont"], ["proof (chain)\npicking this:\n  is_continuation k u p (ts @ [t])", "have \"\\<forall> t \\<in> set ts. chars_of_token t = []\""], ["proof (prove)\nusing this:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. \\<forall>t\\<in>set ts. chars_of_token t = []", "by (simp add: is_continuation_def)"], ["proof (state)\nthis:\n  \\<forall>t\\<in>set ts. chars_of_token t = []\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "then"], ["proof (chain)\npicking this:\n  \\<forall>t\\<in>set ts. chars_of_token t = []", "have charslength_ts: \"charslength ts = 0\""], ["proof (prove)\nusing this:\n  \\<forall>t\\<in>set ts. chars_of_token t = []\n\ngoal (1 subgoal):\n 1. charslength ts = 0", "by (simp only: charslength_0)"], ["proof (state)\nthis:\n  charslength ts = 0\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "from is_cont"], ["proof (chain)\npicking this:\n  is_continuation k u p (ts @ [t])", "have plen: \"charslength p = k\""], ["proof (prove)\nusing this:\n  is_continuation k u p (ts @ [t])\n\ngoal (1 subgoal):\n 1. charslength p = k", "by (simp add: is_continuation_def)"], ["proof (state)\nthis:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>is_continuation k u p xs \\<Longrightarrow>\n                p @ xs \\<in> \\<P> k (Suc u);\n        is_continuation k u p (xs @ [x])\\<rbrakk>\n       \\<Longrightarrow> p @ xs @ [x] \\<in> \\<P> k (Suc u)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ ts @ [t] \\<in> \\<P> k (Suc u)", "apply (simp only: \\<P>.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ ts @ [t] \\<in> limit (Append (\\<Z> k (Suc u)) k) (\\<P> k u)", "apply (rule_tac limit_step_pointwise[OF pts])"], ["proof (prove)\ngoal (2 subgoals):\n 1. pointwise (Append (\\<Z> k (Suc u)) k)\n 2. p @ ts @ [t] \\<in> Append (\\<Z> k (Suc u)) k {p @ ts}", "apply (simp add: pointwise_Append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ ts @ [t] \\<in> Append (\\<Z> k (Suc u)) k {p @ ts}", "apply (auto simp add: Append_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       t = (a, b) \\<and>\n       length (chars p) + length (chars ts) = k \\<and>\n       (a, b) \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k \\<and>\n       admissible (p @ ts @ [(a, b)])", "apply (rule_tac x=\"fst t\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       t = (fst t, b) \\<and>\n       length (chars p) + length (chars ts) = k \\<and>\n       (fst t, b) \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k \\<and>\n       admissible (p @ ts @ [(fst t, b)])", "apply (rule_tac x=\"snd t\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. t = (fst t, snd t) \\<and>\n    length (chars p) + length (chars ts) = k \\<and>\n    (fst t, snd t) \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k \\<and>\n    admissible (p @ ts @ [(fst t, snd t)])", "apply (auto simp add: admissible)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (chars p) + length (chars ts) = k\n 2. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "using charslength_ts"], ["proof (prove)\nusing this:\n  charslength ts = 0\n\ngoal (2 subgoals):\n 1. length (chars p) + length (chars ts) = k\n 2. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. chars ts = [] \\<Longrightarrow> length (chars p) = k\n 2. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "using plen"], ["proof (prove)\nusing this:\n  charslength p = k\n\ngoal (2 subgoals):\n 1. chars ts = [] \\<Longrightarrow> length (chars p) = k\n 2. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "using t"], ["proof (prove)\nusing this:\n  t \\<in> \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k", "by simp"], ["proof (state)\nthis:\n  p @ ts @ [t] \\<in> \\<P> k (Suc u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma indexlt_subset_\\<P>: \"indexlt k' u' k u \\<Longrightarrow> \\<P> k' (Suc u') \\<subseteq> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k' u' k u \\<Longrightarrow>\n    \\<P> k' (Suc u') \\<subseteq> \\<P> k u", "apply (rule_tac subset_\\<P>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k' u' k u \\<Longrightarrow>\n    k' < k \\<or> k' = k \\<and> Suc u' \\<le> u", "apply (simp add: indexlt_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < k \\<or> k' = k \\<and> u' < u \\<Longrightarrow>\n    k' < k \\<or> k' = k \\<and> Suc u' \\<le> u", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma prefixes_are_paths: \"p \\<in> \\<P> k u \\<Longrightarrow> is_prefix x p \\<Longrightarrow> x \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k u; is_prefix x p\\<rbrakk>\n    \\<Longrightarrow> x \\<in> \\<P> k u", "proof (induct arbitrary: x rule: \\<P>_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k u x.\n       \\<lbrakk>\\<And>p' k' u' x.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    is_prefix x p'\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> \\<P> k' u';\n        p \\<in> \\<P> k u; is_prefix x p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> \\<P> k u", "case (Induct p k u)"], ["proof (state)\nthis:\n  \\<lbrakk>?p' \\<in> \\<P> ?k' ?u'; indexlt ?k' ?u' k u;\n   is_prefix ?x ?p'\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> \\<P> ?k' ?u'\n  p \\<in> \\<P> k u\n  is_prefix x p\n\ngoal (1 subgoal):\n 1. \\<And>p k u x.\n       \\<lbrakk>\\<And>p' k' u' x.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    is_prefix x p'\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> \\<P> k' u';\n        p \\<in> \\<P> k u; is_prefix x p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> \\<P> k u", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "proof (cases \"p = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> x \\<in> \\<P> k u\n 2. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "case True"], ["proof (state)\nthis:\n  p = []\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> x \\<in> \\<P> k u\n 2. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  p = []", "have \"x = []\""], ["proof (prove)\nusing this:\n  p = []\n\ngoal (1 subgoal):\n 1. x = []", "using Induct.prems prefix_of_empty_is_empty"], ["proof (prove)\nusing this:\n  p = []\n  is_prefix x p\n  is_prefix ?q [] \\<Longrightarrow> ?q = []\n\ngoal (1 subgoal):\n 1. x = []", "by blast"], ["proof (state)\nthis:\n  x = []\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> x \\<in> \\<P> k u\n 2. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  x = []", "show \"x \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  x = []\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "by simp"], ["proof (state)\nthis:\n  x \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "case False"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "from final_step_of_path[OF Induct(2) False]"], ["proof (chain)\npicking this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "obtain q ts k' u' where step: \"p = q@ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\""], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. (\\<And>q ts k' u'.\n        p = q @ ts \\<and>\n        indexlt k' u' k u \\<and>\n        is_continuation k' u' q ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "have subset: \"\\<P> k' u' \\<subseteq> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P> k' u' \\<subseteq> \\<P> k u", "by (metis indexlt_simp less_or_eq_imp_le step subset_\\<P>)"], ["proof (state)\nthis:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "have \"is_prefix x q \\<or> (\\<exists> ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q@ts')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix x q \\<or>\n    (\\<exists>ts'.\n        ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts')", "apply (rule_tac is_prefix_of_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix x (q @ ts)", "using Induct(3) step"], ["proof (prove)\nusing this:\n  is_prefix x p\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. is_prefix x (q @ ts)", "by auto"], ["proof (state)\nthis:\n  is_prefix x q \\<or>\n  (\\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts')\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow> x \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  is_prefix x q \\<or>\n  (\\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts')", "show ?thesis"], ["proof (prove)\nusing this:\n  is_prefix x q \\<or>\n  (\\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts')\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_prefix x q \\<Longrightarrow> x \\<in> \\<P> k u\n 2. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "case 1"], ["proof (state)\nthis:\n  is_prefix x q\n\ngoal (2 subgoals):\n 1. is_prefix x q \\<Longrightarrow> x \\<in> \\<P> k u\n 2. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "have x: \"x \\<in> \\<P> k' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k' u'", "using 1 Induct step"], ["proof (prove)\nusing this:\n  is_prefix x q\n  \\<lbrakk>?p' \\<in> \\<P> ?k' ?u'; indexlt ?k' ?u' k u;\n   is_prefix ?x ?p'\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> \\<P> ?k' ?u'\n  p \\<in> \\<P> k u\n  is_prefix x p\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k' u'", "by (auto simp add: is_continuation_def)"], ["proof (state)\nthis:\n  x \\<in> \\<P> k' u'\n\ngoal (2 subgoals):\n 1. is_prefix x q \\<Longrightarrow> x \\<in> \\<P> k u\n 2. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<P> k' u'", "show \"x \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  x \\<in> \\<P> k' u'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "using subset subsetCE"], ["proof (prove)\nusing this:\n  x \\<in> \\<P> k' u'\n  \\<P> k' u' \\<subseteq> \\<P> k u\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "case 2"], ["proof (state)\nthis:\n  \\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  \\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts'", "obtain ts' where ts': \"is_prefix ts' ts \\<and> x = q@ts'\""], ["proof (prove)\nusing this:\n  \\<exists>ts'. ts' \\<noteq> [] \\<and> is_prefix ts' ts \\<and> x = q @ ts'\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_prefix ts' ts \\<and> x = q @ ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "have \"is_continuation k' u' q ts'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k' u' q ts'", "using step prefix_is_continuation ts'"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  \\<lbrakk>is_continuation ?k ?u ?p ?ts; is_prefix ?ts' ?ts\\<rbrakk>\n  \\<Longrightarrow> is_continuation ?k ?u ?p ?ts'\n  is_prefix ts' ts \\<and> x = q @ ts'\n\ngoal (1 subgoal):\n 1. is_continuation k' u' q ts'", "by blast"], ["proof (state)\nthis:\n  is_continuation k' u' q ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "with ts'"], ["proof (chain)\npicking this:\n  is_prefix ts' ts \\<and> x = q @ ts'\n  is_continuation k' u' q ts'", "have \"x \\<in> \\<P> k' (Suc u')\""], ["proof (prove)\nusing this:\n  is_prefix ts' ts \\<and> x = q @ ts'\n  is_continuation k' u' q ts'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k' (Suc u')", "apply (simp only: ts')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>True \\<and> q @ ts' = q @ ts';\n     is_continuation k' u' q ts'\\<rbrakk>\n    \\<Longrightarrow> q @ ts' \\<in> \\<P> k' (Suc u')", "apply (rule_tac is_continuation_in_\\<P>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>True \\<and> q @ ts' = q @ ts';\n     is_continuation k' u' q ts'\\<rbrakk>\n    \\<Longrightarrow> is_continuation k' u' q ts'", "by simp"], ["proof (state)\nthis:\n  x \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>ts'.\n       ts' \\<noteq> [] \\<and>\n       is_prefix ts' ts \\<and> x = q @ ts' \\<Longrightarrow>\n    x \\<in> \\<P> k u", "with subset"], ["proof (chain)\npicking this:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n  x \\<in> \\<P> k' (Suc u')", "show \"x \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n  x \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "using indexlt_subset_\\<P> step"], ["proof (prove)\nusing this:\n  \\<P> k' u' \\<subseteq> \\<P> k u\n  x \\<in> \\<P> k' (Suc u')\n  indexlt ?k' ?u' ?k ?u \\<Longrightarrow>\n  \\<P> ?k' (Suc ?u') \\<subseteq> \\<P> ?k ?u\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. x \\<in> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_or_last_of_suffix:\n  assumes \"q = q' @ [t]\"\n  assumes \"q = p @ ts\"\n  shows \"ts = [] \\<or> (\\<exists> ts'. q' = p @ ts' \\<and> ts'@[t] = ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ts = [] \\<or> (\\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts)", "by (metis assms(1) assms(2) butlast_append last_appendR snoc_eq_iff_butlast)"], ["", "lemma is_prefix_butlast: \"is_prefix q (butlast p) \\<Longrightarrow> is_prefix q p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix q (butlast p) \\<Longrightarrow> is_prefix q p", "by (metis butlast_conv_take is_prefix_append is_prefix_def is_prefix_take)"], ["", "lemma last_step_of_path:\n  \"q \\<in> \\<P> k u \\<Longrightarrow> q = q'@[t] \\<Longrightarrow>\n   \\<exists> k' u'. indexlt k' u' k u \\<and> q \\<in> \\<P> k' (Suc u') \\<and> charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> \\<P> k u; q = q' @ [t]\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k' u'.\n                         indexlt k' u' k u \\<and>\n                         q \\<in> \\<P> k' (Suc u') \\<and>\n                         charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "proof (induct arbitrary: q' t rule: \\<P>_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "case (Induct q k u)"], ["proof (state)\nthis:\n  \\<lbrakk>?p' \\<in> \\<P> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?p' = ?q' @ [?t]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k' u'.\n                       indexlt k' u' ?k' ?u' \\<and>\n                       ?p' \\<in> \\<P> k' (Suc u') \\<and>\n                       charslength ?q' = k' \\<and> ?t \\<in> \\<Z> k' (Suc u')\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "have \"\\<exists> p ts k' u'. q = p@ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p ts k' u'.\n       q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts", "apply (rule_tac final_step_of_path)"], ["proof (prove)\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u\n 2. q \\<noteq> []", "apply (simp add: Induct(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<noteq> []", "apply (simp add: Induct(3))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>p ts k' u'.\n     q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  \\<exists>p ts k' u'.\n     q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts", "obtain p ts k' u' where pts: \"q = p@ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\""], ["proof (prove)\nusing this:\n  \\<exists>p ts k' u'.\n     q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n\ngoal (1 subgoal):\n 1. (\\<And>p ts k' u'.\n        q = p @ ts \\<and>\n        indexlt k' u' k u \\<and>\n        is_continuation k' u' p ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts", "have indexlt: \"indexlt k' u' k u\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n\ngoal (1 subgoal):\n 1. indexlt k' u' k u", "by auto"], ["proof (state)\nthis:\n  indexlt k' u' k u\n\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "from pts"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts", "have \"ts = [] \\<or> (\\<exists> ts'. q' = p @ ts' \\<and> ts'@[t] = ts)\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n\ngoal (1 subgoal):\n 1. ts = [] \\<or> (\\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts)", "by (metis empty_or_last_of_suffix Induct(3))"], ["proof (state)\nthis:\n  ts = [] \\<or> (\\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts)\n\ngoal (1 subgoal):\n 1. \\<And>p k u q' t.\n       \\<lbrakk>\\<And>p' k' u' q' t.\n                   \\<lbrakk>p' \\<in> \\<P> k' u'; indexlt k' u' k u;\n                    p' = q' @ [t]\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>k'a u'a.\n  indexlt k'a u'a k' u' \\<and>\n  p' \\<in> \\<P> k'a (Suc u'a) \\<and>\n  charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a);\n        p \\<in> \\<P> k u; p = q' @ [t]\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k' u'.\n                            indexlt k' u' k u \\<and>\n                            p \\<in> \\<P> k' (Suc u') \\<and>\n                            charslength q' = k' \\<and>\n                            t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  ts = [] \\<or> (\\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts)", "show ?case"], ["proof (prove)\nusing this:\n  ts = [] \\<or> (\\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts)\n\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n 2. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "case 1"], ["proof (state)\nthis:\n  ts = []\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n 2. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "with pts"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  ts = []", "have q: \"q \\<in> \\<P> k' u'\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  ts = []\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k' u'", "by (auto simp add: is_continuation_def)"], ["proof (state)\nthis:\n  q \\<in> \\<P> k' u'\n\ngoal (2 subgoals):\n 1. ts = [] \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n 2. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "from Induct(1)[OF this indexlt Induct(3)]"], ["proof (chain)\npicking this:\n  \\<exists>k'a u'a.\n     indexlt k'a u'a k' u' \\<and>\n     q \\<in> \\<P> k'a (Suc u'a) \\<and>\n     charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a)", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>k'a u'a.\n     indexlt k'a u'a k' u' \\<and>\n     q \\<in> \\<P> k'a (Suc u'a) \\<and>\n     charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a)\n\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "using indexlt indexlt_trans"], ["proof (prove)\nusing this:\n  \\<exists>k'a u'a.\n     indexlt k'a u'a k' u' \\<and>\n     q \\<in> \\<P> k'a (Suc u'a) \\<and>\n     charslength q' = k'a \\<and> t \\<in> \\<Z> k'a (Suc u'a)\n  indexlt k' u' k u\n  \\<lbrakk>indexlt ?k'' ?u'' ?k' ?u'; indexlt ?k' ?u' ?k ?u\\<rbrakk>\n  \\<Longrightarrow> indexlt ?k'' ?u'' ?k ?u\n\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "case 2"], ["proof (state)\nthis:\n  \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts", "obtain ts' where ts': \"q' = p @ ts' \\<and> ts'@[t] = ts\""], ["proof (prove)\nusing this:\n  \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. (\\<And>ts'.\n        q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  q' = p @ ts' \\<and> ts' @ [t] = ts", "have \"is_prefix ts' ts\""], ["proof (prove)\nusing this:\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. is_prefix ts' ts", "using is_prefix_def"], ["proof (prove)\nusing this:\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n  is_prefix ?u ?v = (\\<exists>w. ?u @ w = ?v)\n\ngoal (1 subgoal):\n 1. is_prefix ts' ts", "by blast"], ["proof (state)\nthis:\n  is_prefix ts' ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  is_prefix ts' ts", "have \"is_continuation k' u' p ts'\""], ["proof (prove)\nusing this:\n  is_prefix ts' ts\n\ngoal (1 subgoal):\n 1. is_continuation k' u' p ts'", "by (metis prefix_is_continuation pts)"], ["proof (state)\nthis:\n  is_continuation k' u' p ts'\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "have \"charslength ts' = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength ts' = 0", "using charslength_0 is_continuation_def pts ts'"], ["proof (prove)\nusing this:\n  (\\<forall>t\\<in>set ?ts. chars_of_token t = []) = (charslength ?ts = 0)\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. charslength ts' = 0", "by auto"], ["proof (state)\nthis:\n  charslength ts' = 0\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "then"], ["proof (chain)\npicking this:\n  charslength ts' = 0", "have q'len: \"charslength q' = k'\""], ["proof (prove)\nusing this:\n  charslength ts' = 0\n\ngoal (1 subgoal):\n 1. charslength q' = k'", "using is_continuation_def pts ts'"], ["proof (prove)\nusing this:\n  charslength ts' = 0\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. charslength q' = k'", "by auto"], ["proof (state)\nthis:\n  charslength q' = k'\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "have \"t \\<in> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set ts", "using ts'"], ["proof (prove)\nusing this:\n  q' = p @ ts' \\<and> ts' @ [t] = ts\n\ngoal (1 subgoal):\n 1. t \\<in> set ts", "by auto"], ["proof (state)\nthis:\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "with pts"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  t \\<in> set ts", "have t_in_\\<Z>: \"t \\<in> \\<Z> k' (Suc u')\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  t \\<in> set ts\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k' (Suc u')", "using is_continuation_def"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  t \\<in> set ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "have q_dom: \"q \\<in> \\<P> k' (Suc u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k' (Suc u')", "using pts is_continuation_in_\\<P>"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' p ts\n  is_continuation ?k ?u ?p ?ts \\<Longrightarrow>\n  ?p @ ?ts \\<in> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  q \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>ts'. q' = p @ ts' \\<and> ts' @ [t] = ts \\<Longrightarrow>\n    \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "apply (rule_tac x=k' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "apply (rule_tac x=u' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k' u' k u \\<and>\n    q \\<in> \\<P> k' (Suc u') \\<and>\n    charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "by (simp only: indexlt q'len t_in_\\<Z> q_dom)"], ["proof (state)\nthis:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma charslength_of_butlast_0: \"p \\<in> \\<P> k 0 \\<Longrightarrow> p = q@[t] \\<Longrightarrow> charslength q < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k 0; p = q @ [t]\\<rbrakk>\n    \\<Longrightarrow> charslength q < k", "using last_step_of_path LocalLexing_axioms indexlt_simp"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> \\<P> ?k ?u; ?q = ?q' @ [?t]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k' u'.\n                       indexlt k' u' ?k ?u \\<and>\n                       ?q \\<in> \\<P> k' (Suc u') \\<and>\n                       charslength ?q' = k' \\<and> ?t \\<in> \\<Z> k' (Suc u')\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k 0; p = q @ [t]\\<rbrakk>\n    \\<Longrightarrow> charslength q < k", "by blast"], ["", "lemma charslength_of_butlast: \"p \\<in> \\<P> k u \\<Longrightarrow> p = q@[t] \\<Longrightarrow> charslength q \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k u; p = q @ [t]\\<rbrakk>\n    \\<Longrightarrow> charslength q \\<le> k", "by (metis indexlt_simp last_step_of_path eq_imp_le less_imp_le_nat)"], ["", "lemma last_token_of_path:\n  assumes \"q \\<in> \\<P> k u\"\n  assumes \"q = q'@[t]\"\n  assumes \"charslength q' = k\"\n  shows \"t \\<in> \\<Z> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "from assms"], ["proof (chain)\npicking this:\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n  charslength q' = k", "have \"\\<exists> k' u'. indexlt k' u' k u \\<and> q \\<in> \\<P> k' (Suc u') \\<and> charslength q' = k' \\<and> \n    t \\<in> \\<Z> k' (Suc u')\""], ["proof (prove)\nusing this:\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n  charslength q' = k\n\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "using last_step_of_path"], ["proof (prove)\nusing this:\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n  charslength q' = k\n  \\<lbrakk>?q \\<in> \\<P> ?k ?u; ?q = ?q' @ [?t]\\<rbrakk>\n  \\<Longrightarrow> \\<exists>k' u'.\n                       indexlt k' u' ?k ?u \\<and>\n                       ?q \\<in> \\<P> k' (Suc u') \\<and>\n                       charslength ?q' = k' \\<and> ?t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexlt k' u' k u \\<and>\n       q \\<in> \\<P> k' (Suc u') \\<and>\n       charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "then"], ["proof (chain)\npicking this:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "obtain k' u' where th: \"indexlt k' u' k u \\<and> q \\<in> \\<P> k' (Suc u') \\<and> charslength q' = k' \\<and> \n    t \\<in> \\<Z> k' (Suc u')\""], ["proof (prove)\nusing this:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. (\\<And>k' u'.\n        indexlt k' u' k u \\<and>\n        q \\<in> \\<P> k' (Suc u') \\<and>\n        charslength q' = k' \\<and>\n        t \\<in> \\<Z> k' (Suc u') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "with assms(3)"], ["proof (chain)\npicking this:\n  charslength q' = k\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')", "have k': \"k' = k\""], ["proof (prove)\nusing this:\n  charslength q' = k\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. k' = k", "by blast"], ["proof (state)\nthis:\n  k' = k\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "with th"], ["proof (chain)\npicking this:\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n  k' = k", "have \"t \\<in> \\<Z> k' (Suc u') \\<and> u' < u\""], ["proof (prove)\nusing this:\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n  k' = k\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k' (Suc u') \\<and> u' < u", "using indexlt_simp"], ["proof (prove)\nusing this:\n  indexlt k' u' k u \\<and>\n  q \\<in> \\<P> k' (Suc u') \\<and>\n  charslength q' = k' \\<and> t \\<in> \\<Z> k' (Suc u')\n  k' = k\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k' (Suc u') \\<and> u' < u", "by auto"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k' (Suc u') \\<and> u' < u\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "then"], ["proof (chain)\npicking this:\n  t \\<in> \\<Z> k' (Suc u') \\<and> u' < u", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<in> \\<Z> k' (Suc u') \\<and> u' < u\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "by (metis (no_types, hide_lams) \\<Z>_subset_Suc k' linorder_neqE_nat not_less_eq \n      subsetCE subset_fSuc_strict)"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma final_step_of_path': \"p \\<in> \\<P> k u \\<Longrightarrow> p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> \n  \\<exists> q ts. u > 0 \\<and> p = q@ts \\<and> is_continuation k (u - 1) q ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k u; p \\<notin> \\<P> k (u - 1)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>q ts.\n                         0 < u \\<and>\n                         p = q @ ts \\<and> is_continuation k (u - 1) q ts", "by (metis Suc_diff_1 \\<P>.simps(2) diff_0_eq_0 limit_Append_path_nonelem_split' not_gr0)"], ["", "lemma is_continuation_continue:\n  assumes \"is_continuation k u q ts\"\n  assumes \"charslength ts = 0\"\n  assumes \"t \\<in> \\<Z> k (Suc u)\"\n  assumes \"admissible (q @ ts @ [t])\"\n  shows \"is_continuation k u q (ts@[t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k u q (ts @ [t])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_continuation k u q (ts @ [t])", "from assms"], ["proof (chain)\npicking this:\n  is_continuation k u q ts\n  charslength ts = 0\n  t \\<in> \\<Z> k (Suc u)\n  admissible (q @ ts @ [t])", "show ?thesis"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  charslength ts = 0\n  t \\<in> \\<Z> k (Suc u)\n  admissible (q @ ts @ [t])\n\ngoal (1 subgoal):\n 1. is_continuation k u q (ts @ [t])", "by (simp add: is_continuation_def charslength_0)"], ["proof (state)\nthis:\n  is_continuation k u q (ts @ [t])\n\ngoal:\nNo subgoals!", "qed"], ["", "(* In an older version of local lexing, compatibility was an assumption we had to make, \n   but now it is a theorem *)"], ["", "theorem compatibility_def:\n  assumes p_in_dom: \"p \\<in> \\<P> k u\"\n  assumes q_in_dom: \"q \\<in> \\<P> k u\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes q_split: \"q = q'@[t]\"\n  assumes q'len: \"charslength q' = k\"\n  assumes admissible: \"admissible (p @ [t])\" \n  shows \"p @ [t] \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "have u: \"u > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u", "proof (cases \"u = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "case True"], ["proof (state)\nthis:\n  u = 0\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "then"], ["proof (chain)\npicking this:\n  u = 0", "have \"charslength q' < k\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. charslength q' < k", "using charslength_of_butlast_0 q_in_dom q_split"], ["proof (prove)\nusing this:\n  u = 0\n  \\<lbrakk>?p \\<in> \\<P> ?k 0; ?p = ?q @ [?t]\\<rbrakk>\n  \\<Longrightarrow> charslength ?q < ?k\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n\ngoal (1 subgoal):\n 1. charslength q' < k", "by blast"], ["proof (state)\nthis:\n  charslength q' < k\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "with q'len"], ["proof (chain)\npicking this:\n  charslength q' = k\n  charslength q' < k", "have \"False\""], ["proof (prove)\nusing this:\n  charslength q' = k\n  charslength q' < k\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> 0 < u\n 2. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. 0 < u", "by blast"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "case False"], ["proof (state)\nthis:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 < u", "then"], ["proof (chain)\npicking this:\n  u \\<noteq> 0", "show ?thesis"], ["proof (prove)\nusing this:\n  u \\<noteq> 0\n\ngoal (1 subgoal):\n 1. 0 < u", "by arith"], ["proof (state)\nthis:\n  0 < u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "have t_dom: \"t \\<in> \\<Z> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "using last_token_of_path q'len q_in_dom q_split"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q \\<in> \\<P> ?k ?u; ?q = ?q' @ [?t];\n   charslength ?q' = ?k\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> \\<Z> ?k ?u\n  charslength q' = k\n  q \\<in> \\<P> k u\n  q = q' @ [t]\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u", "by blast"], ["proof (state)\nthis:\n  t \\<in> \\<Z> k u\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "have \"p \\<in> \\<P> k (u - 1) \\<or> p \\<notin> \\<P> k (u - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k (u - 1) \\<or> p \\<notin> \\<P> k (u - 1)", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k (u - 1) \\<or> p \\<notin> \\<P> k (u - 1)\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k (u - 1) \\<or> p \\<notin> \\<P> k (u - 1)", "show ?thesis"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k (u - 1) \\<or> p \\<notin> \\<P> k (u - 1)\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p \\<in> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u\n 2. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "case 1"], ["proof (state)\nthis:\n  p \\<in> \\<P> k (u - 1)\n\ngoal (2 subgoals):\n 1. p \\<in> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u\n 2. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "with t_dom p_charslength admissible u"], ["proof (chain)\npicking this:\n  t \\<in> \\<Z> k u\n  charslength p = k\n  admissible (p @ [t])\n  0 < u\n  p \\<in> \\<P> k (u - 1)", "have \"is_continuation k (u - 1) p [t]\""], ["proof (prove)\nusing this:\n  t \\<in> \\<Z> k u\n  charslength p = k\n  admissible (p @ [t])\n  0 < u\n  p \\<in> \\<P> k (u - 1)\n\ngoal (1 subgoal):\n 1. is_continuation k (u - 1) p [t]", "by (auto simp add: is_continuation_def)"], ["proof (state)\nthis:\n  is_continuation k (u - 1) p [t]\n\ngoal (2 subgoals):\n 1. p \\<in> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u\n 2. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "with u"], ["proof (chain)\npicking this:\n  0 < u\n  is_continuation k (u - 1) p [t]", "show \"p@[t] \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  0 < u\n  is_continuation k (u - 1) p [t]\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "by (metis One_nat_def Suc_pred is_continuation_in_\\<P>)"], ["proof (state)\nthis:\n  p @ [t] \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "case 2"], ["proof (state)\nthis:\n  p \\<notin> \\<P> k (u - 1)\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "from final_step_of_path'[OF p_in_dom 2]"], ["proof (chain)\npicking this:\n  \\<exists>q ts.\n     0 < u \\<and> p = q @ ts \\<and> is_continuation k (u - 1) q ts", "obtain p' ts where p': \"p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\""], ["proof (prove)\nusing this:\n  \\<exists>q ts.\n     0 < u \\<and> p = q @ ts \\<and> is_continuation k (u - 1) q ts\n\ngoal (1 subgoal):\n 1. (\\<And>p' ts.\n        p = p' @ ts \\<and> is_continuation k (u - 1) p' ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "from p' p_charslength is_continuation_def"], ["proof (chain)\npicking this:\n  p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\n  charslength p = k\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))", "have charslength_ts: \"charslength ts = 0\""], ["proof (prove)\nusing this:\n  p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\n  charslength p = k\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (1 subgoal):\n 1. charslength ts = 0", "by auto"], ["proof (state)\nthis:\n  charslength ts = 0\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "from u"], ["proof (chain)\npicking this:\n  0 < u", "have u': \"Suc (u - 1) = u\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. Suc (u - 1) = u", "by arith"], ["proof (state)\nthis:\n  Suc (u - 1) = u\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "have \"is_continuation k (u - 1) p' (ts@[t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k (u - 1) p' (ts @ [t])", "apply (rule_tac is_continuation_continue)"], ["proof (prove)\ngoal (4 subgoals):\n 1. is_continuation k (u - 1) p' ts\n 2. charslength ts = 0\n 3. t \\<in> \\<Z> k (Suc (u - 1))\n 4. admissible (p' @ ts @ [t])", "using p'"], ["proof (prove)\nusing this:\n  p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\n\ngoal (4 subgoals):\n 1. is_continuation k (u - 1) p' ts\n 2. charslength ts = 0\n 3. t \\<in> \\<Z> k (Suc (u - 1))\n 4. admissible (p' @ ts @ [t])", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. charslength ts = 0\n 2. t \\<in> \\<Z> k (Suc (u - 1))\n 3. admissible (p' @ ts @ [t])", "using charslength_ts"], ["proof (prove)\nusing this:\n  charslength ts = 0\n\ngoal (3 subgoals):\n 1. charslength ts = 0\n 2. t \\<in> \\<Z> k (Suc (u - 1))\n 3. admissible (p' @ ts @ [t])", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. t \\<in> \\<Z> k (Suc (u - 1))\n 2. admissible (p' @ ts @ [t])", "apply (simp only: u' t_dom)"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p' @ ts @ [t])", "using admissible p'"], ["proof (prove)\nusing this:\n  admissible (p @ [t])\n  p = p' @ ts \\<and> is_continuation k (u - 1) p' ts\n\ngoal (1 subgoal):\n 1. admissible (p' @ ts @ [t])", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_continuation k (u - 1) p' (ts @ [t])\n\ngoal (1 subgoal):\n 1. p \\<notin> \\<P> k (u - 1) \\<Longrightarrow> p @ [t] \\<in> \\<P> k u", "from is_continuation_in_\\<P>[OF this]"], ["proof (chain)\npicking this:\n  p' @ ts @ [t] \\<in> \\<P> k (Suc (u - 1))", "show ?case"], ["proof (prove)\nusing this:\n  p' @ ts @ [t] \\<in> \\<P> k (Suc (u - 1))\n\ngoal (1 subgoal):\n 1. p @ [t] \\<in> \\<P> k u", "by (simp only: p' u', simp)"], ["proof (state)\nthis:\n  p @ [t] \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p @ [t] \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_prefix_admissible:\n  assumes \"is_prefix a b\"\n  assumes \"admissible b\"\n  shows \"admissible a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible a", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. admissible a", "from assms"], ["proof (chain)\npicking this:\n  is_prefix a b\n  admissible b", "show ?thesis"], ["proof (prove)\nusing this:\n  is_prefix a b\n  admissible b\n\ngoal (1 subgoal):\n 1. admissible a", "by (auto simp add: is_prefix_def admissible_def \\<L>\\<^sub>P_def)"], ["proof (state)\nthis:\n  admissible a\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma butlast_split: \"n < length q \\<Longrightarrow> butlast q = (take n q)@(drop n (butlast q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> butlast q = take n q @ drop n (butlast q)", "by (metis append_take_drop_id take_butlast)"], ["", "lemma in_\\<P>_charslength:\n  assumes p_dom: \"p \\<in> \\<P> k u\"\n  shows \"\\<exists> v. p \\<in> \\<P> (charslength p) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. p \\<in> \\<P> (charslength p) v", "proof (cases \"charslength p \\<ge> k\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v\n 2. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "case True"], ["proof (state)\nthis:\n  k \\<le> charslength p\n\ngoal (2 subgoals):\n 1. k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v\n 2. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. p \\<in> \\<P> (charslength p) v", "apply (rule_tac x=u in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> (charslength p) u", "by (metis True le_neq_implies_less p_dom subsetCE subset_\\<P>)"], ["proof (state)\nthis:\n  \\<exists>v. p \\<in> \\<P> (charslength p) v\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "case False"], ["proof (state)\nthis:\n  \\<not> k \\<le> charslength p\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "then"], ["proof (chain)\npicking this:\n  \\<not> k \\<le> charslength p", "have charslength: \"charslength p < k\""], ["proof (prove)\nusing this:\n  \\<not> k \\<le> charslength p\n\ngoal (1 subgoal):\n 1. charslength p < k", "by arith"], ["proof (state)\nthis:\n  charslength p < k\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "have \"p = [] \\<or> p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<or> p \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  p = [] \\<or> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<not> k \\<le> charslength p \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "thus ?thesis"], ["proof (prove)\nusing this:\n  p = [] \\<or> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>v. p \\<in> \\<P> (charslength p) v", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> \\<exists>v. p \\<in> \\<P> (charslength p) v\n 2. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "case 1"], ["proof (state)\nthis:\n  p = []\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow> \\<exists>v. p \\<in> \\<P> (charslength p) v\n 2. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "thus ?case"], ["proof (prove)\nusing this:\n  p = []\n\ngoal (1 subgoal):\n 1. \\<exists>v. p \\<in> \\<P> (charslength p) v", "by simp"], ["proof (state)\nthis:\n  \\<exists>v. p \\<in> \\<P> (charslength p) v\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "case 2"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "from final_step_of_path[OF p_dom 2]"], ["proof (chain)\npicking this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "obtain q ts k' u' where\n          step: \"p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\""], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. (\\<And>q ts k' u'.\n        p = q @ ts \\<and>\n        indexlt k' u' k u \\<and>\n        is_continuation k' u' q ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "from step"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have k': \"charslength q = k'\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. charslength q = k'", "using is_continuation_def"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (1 subgoal):\n 1. charslength q = k'", "by blast"], ["proof (state)\nthis:\n  charslength q = k'\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "from step"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have \"charslength q \\<le> charslength p\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. charslength q \\<le> charslength p", "by simp"], ["proof (state)\nthis:\n  charslength q \\<le> charslength p\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "with k'"], ["proof (chain)\npicking this:\n  charslength q = k'\n  charslength q \\<le> charslength p", "have k': \"k' \\<le> charslength p\""], ["proof (prove)\nusing this:\n  charslength q = k'\n  charslength q \\<le> charslength p\n\ngoal (1 subgoal):\n 1. k' \\<le> charslength p", "by simp"], ["proof (state)\nthis:\n  k' \\<le> charslength p\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "from step"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have \"p \\<in> \\<P> k' (Suc u')\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k' (Suc u')", "using is_continuation_in_\\<P>"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  is_continuation ?k ?u ?p ?ts \\<Longrightarrow>\n  ?p @ ?ts \\<in> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "with k'"], ["proof (chain)\npicking this:\n  k' \\<le> charslength p\n  p \\<in> \\<P> k' (Suc u')", "have \"p \\<in> \\<P> (charslength p) (Suc u')\""], ["proof (prove)\nusing this:\n  k' \\<le> charslength p\n  p \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> (charslength p) (Suc u')", "by (metis le_neq_implies_less subsetCE subset_\\<P>)"], ["proof (state)\nthis:\n  p \\<in> \\<P> (charslength p) (Suc u')\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>v. p \\<in> \\<P> (charslength p) v", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> (charslength p) (Suc u')", "show ?case"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> (charslength p) (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>v. p \\<in> \\<P> (charslength p) v", "by blast"], ["proof (state)\nthis:\n  \\<exists>v. p \\<in> \\<P> (charslength p) v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>v. p \\<in> \\<P> (charslength p) v\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem general_compatibility:\n  \"p \\<in> \\<P> k u \\<Longrightarrow> q \\<in> \\<P> k u \\<Longrightarrow> charslength p = charslength (take n q) \n    \\<Longrightarrow> charslength p \\<le> k \\<Longrightarrow> admissible (p @ (drop n q)) \\<Longrightarrow> p @ (drop n q) \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n     charslength p = charslength (take n q); charslength p \\<le> k;\n     admissible (p @ drop n q)\\<rbrakk>\n    \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "proof (induct \"length q - n\" arbitrary: p q n k u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>q n p k u.\n       \\<lbrakk>0 = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "case 0"], ["proof (state)\nthis:\n  0 = length q - n\n  p \\<in> \\<P> k u\n  q \\<in> \\<P> k u\n  charslength p = charslength (take n q)\n  charslength p \\<le> k\n  admissible (p @ drop n q)\n\ngoal (2 subgoals):\n 1. \\<And>q n p k u.\n       \\<lbrakk>0 = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "from 0"], ["proof (chain)\npicking this:\n  0 = length q - n\n  p \\<in> \\<P> k u\n  q \\<in> \\<P> k u\n  charslength p = charslength (take n q)\n  charslength p \\<le> k\n  admissible (p @ drop n q)", "have \"0 = length q - n\""], ["proof (prove)\nusing this:\n  0 = length q - n\n  p \\<in> \\<P> k u\n  q \\<in> \\<P> k u\n  charslength p = charslength (take n q)\n  charslength p \\<le> k\n  admissible (p @ drop n q)\n\ngoal (1 subgoal):\n 1. 0 = length q - n", "by auto"], ["proof (state)\nthis:\n  0 = length q - n\n\ngoal (2 subgoals):\n 1. \\<And>q n p k u.\n       \\<lbrakk>0 = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  0 = length q - n", "have n: \"n \\<ge> length q\""], ["proof (prove)\nusing this:\n  0 = length q - n\n\ngoal (1 subgoal):\n 1. length q \\<le> n", "by arith"], ["proof (state)\nthis:\n  length q \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>q n p k u.\n       \\<lbrakk>0 = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  length q \\<le> n", "have \"drop n q = []\""], ["proof (prove)\nusing this:\n  length q \\<le> n\n\ngoal (1 subgoal):\n 1. drop n q = []", "by auto"], ["proof (state)\nthis:\n  drop n q = []\n\ngoal (2 subgoals):\n 1. \\<And>q n p k u.\n       \\<lbrakk>0 = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  drop n q = []", "show ?case"], ["proof (prove)\nusing this:\n  drop n q = []\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "by (simp add: \"0.prems\"(1))"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>l = length ?q - ?n; ?p \\<in> \\<P> ?k ?u; ?q \\<in> \\<P> ?k ?u;\n   charslength ?p = charslength (take ?n ?q); charslength ?p \\<le> ?k;\n   admissible (?p @ drop ?n ?q)\\<rbrakk>\n  \\<Longrightarrow> ?p @ drop ?n ?q \\<in> \\<P> ?k ?u\n  Suc l = length q - n\n  p \\<in> \\<P> k u\n  q \\<in> \\<P> k u\n  charslength p = charslength (take n q)\n  charslength p \\<le> k\n  admissible (p @ drop n q)\n\ngoal (1 subgoal):\n 1. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have \"n \\<ge> length q \\<or> n < length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length q \\<le> n \\<or> n < length q", "by arith"], ["proof (state)\nthis:\n  length q \\<le> n \\<or> n < length q\n\ngoal (1 subgoal):\n 1. \\<And>x q n p k u.\n       \\<lbrakk>\\<And>q n p k u.\n                   \\<lbrakk>x = length q - n; p \\<in> \\<P> k u;\n                    q \\<in> \\<P> k u;\n                    charslength p = charslength (take n q);\n                    charslength p \\<le> k;\n                    admissible (p @ drop n q)\\<rbrakk>\n                   \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u;\n        Suc x = length q - n; p \\<in> \\<P> k u; q \\<in> \\<P> k u;\n        charslength p = charslength (take n q); charslength p \\<le> k;\n        admissible (p @ drop n q)\\<rbrakk>\n       \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  length q \\<le> n \\<or> n < length q", "show ?case"], ["proof (prove)\nusing this:\n  length q \\<le> n \\<or> n < length q\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. length q \\<le> n \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "case 1"], ["proof (state)\nthis:\n  length q \\<le> n\n\ngoal (2 subgoals):\n 1. length q \\<le> n \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  length q \\<le> n", "have \"drop n q = []\""], ["proof (prove)\nusing this:\n  length q \\<le> n\n\ngoal (1 subgoal):\n 1. drop n q = []", "by auto"], ["proof (state)\nthis:\n  drop n q = []\n\ngoal (2 subgoals):\n 1. length q \\<le> n \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u\n 2. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  drop n q = []", "show ?case"], ["proof (prove)\nusing this:\n  drop n q = []\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "by (simp add: Suc.prems(1))"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "case 2"], ["proof (state)\nthis:\n  n < length q\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  n < length q", "have \"length q > 0\""], ["proof (prove)\nusing this:\n  n < length q\n\ngoal (1 subgoal):\n 1. 0 < length q", "by auto"], ["proof (state)\nthis:\n  0 < length q\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  0 < length q", "have q_nonempty: \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  0 < length q\n\ngoal (1 subgoal):\n 1. q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "let ?q' = \"butlast q\""], ["proof (state)\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "from q_nonempty Suc(2)"], ["proof (chain)\npicking this:\n  q \\<noteq> []\n  Suc l = length q - n", "have h1: \"l = length ?q' - n\""], ["proof (prove)\nusing this:\n  q \\<noteq> []\n  Suc l = length q - n\n\ngoal (1 subgoal):\n 1. l = length (butlast q) - n", "by auto"], ["proof (state)\nthis:\n  l = length (butlast q) - n\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have h2: \"?q' \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast q \\<in> \\<P> k u", "by (metis Suc.prems(2) butlast_conv_take is_prefix_take prefixes_are_paths)"], ["proof (state)\nthis:\n  butlast q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have h3: \"charslength p = charslength (take n ?q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p = charslength (take n (butlast q))", "using \"2.hyps\" Suc.prems(3) take_butlast"], ["proof (prove)\nusing this:\n  n < length q\n  charslength p = charslength (take n q)\n  ?n < length ?xs \\<Longrightarrow> take ?n (butlast ?xs) = take ?n ?xs\n\ngoal (1 subgoal):\n 1. charslength p = charslength (take n (butlast q))", "by force"], ["proof (state)\nthis:\n  charslength p = charslength (take n (butlast q))\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have \"is_prefix (p @ drop n ?q') (p @ drop n q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix (p @ drop n (butlast q)) (p @ drop n q)", "by (simp add: butlast_conv_take drop_take)"], ["proof (state)\nthis:\n  is_prefix (p @ drop n (butlast q)) (p @ drop n q)\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "note h4 = is_prefix_admissible[OF this Suc.prems(5)]"], ["proof (state)\nthis:\n  admissible (p @ drop n (butlast q))\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "note induct = Suc(1)[OF h1 Suc(3) h2 h3 Suc.prems(4) h4]"], ["proof (state)\nthis:\n  p @ drop n (butlast q) \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "let ?p' = \"p @ (drop n (butlast q))\""], ["proof (state)\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "from induct"], ["proof (chain)\npicking this:\n  p @ drop n (butlast q) \\<in> \\<P> k u", "have \"?p' \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  p @ drop n (butlast q) \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. p @ drop n (butlast q) \\<in> \\<P> k u", "."], ["proof (state)\nthis:\n  p @ drop n (butlast q) \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "let ?i = \"charslength ?p'\""], ["proof (state)\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have charslength_i[symmetric]: \"charslength ?q' = ?i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (butlast q) = charslength (p @ drop n (butlast q))", "using Suc.prems(3)"], ["proof (prove)\nusing this:\n  charslength p = charslength (take n q)\n\ngoal (1 subgoal):\n 1. charslength (butlast q) = charslength (p @ drop n (butlast q))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p) = length (chars (take n q)) \\<Longrightarrow>\n    length (chars (butlast q)) =\n    length (chars (take n q)) + length (chars (drop n (butlast q)))", "apply (subst butlast_split[OF 2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p) = length (chars (take n q)) \\<Longrightarrow>\n    length (chars (take n q @ drop n (butlast q))) =\n    length (chars (take n q)) + length (chars (drop n (butlast q)))", "by simp"], ["proof (state)\nthis:\n  charslength (p @ drop n (butlast q)) = charslength (butlast q)\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have q_split: \"q = ?q'@[last q]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = butlast q @ [last q]", "by (simp add: q_nonempty)"], ["proof (state)\nthis:\n  q = butlast q @ [last q]\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "with Suc.prems(2) charslength_of_butlast"], ["proof (chain)\npicking this:\n  q \\<in> \\<P> k u\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; ?p = ?q @ [?t]\\<rbrakk>\n  \\<Longrightarrow> charslength ?q \\<le> ?k\n  q = butlast q @ [last q]", "have charslength_q': \"charslength ?q' \\<le> k\""], ["proof (prove)\nusing this:\n  q \\<in> \\<P> k u\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; ?p = ?q @ [?t]\\<rbrakk>\n  \\<Longrightarrow> charslength ?q \\<le> ?k\n  q = butlast q @ [last q]\n\ngoal (1 subgoal):\n 1. charslength (butlast q) \\<le> k", "by blast"], ["proof (state)\nthis:\n  charslength (butlast q) \\<le> k\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "from q_nonempty"], ["proof (chain)\npicking this:\n  q \\<noteq> []", "have p'last: \"?p'@[last q] = p@(drop n q)\""], ["proof (prove)\nusing this:\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. (p @ drop n (butlast q)) @ [last q] = p @ drop n q", "by (metis \"2.hyps\" append_assoc drop_eq_Nil drop_keep_last not_le q_split)"], ["proof (state)\nthis:\n  (p @ drop n (butlast q)) @ [last q] = p @ drop n q\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "have \"?i \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) \\<le> k", "by (simp only: charslength_i charslength_q')"], ["proof (state)\nthis:\n  charslength (p @ drop n (butlast q)) \\<le> k\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  charslength (p @ drop n (butlast q)) \\<le> k", "have \"?i = k \\<or> ?i < k\""], ["proof (prove)\nusing this:\n  charslength (p @ drop n (butlast q)) \\<le> k\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) = k \\<or>\n    charslength (p @ drop n (butlast q)) < k", "by auto"], ["proof (state)\nthis:\n  charslength (p @ drop n (butlast q)) = k \\<or>\n  charslength (p @ drop n (butlast q)) < k\n\ngoal (1 subgoal):\n 1. n < length q \\<Longrightarrow> p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  charslength (p @ drop n (butlast q)) = k \\<or>\n  charslength (p @ drop n (butlast q)) < k", "show ?case"], ["proof (prove)\nusing this:\n  charslength (p @ drop n (butlast q)) = k \\<or>\n  charslength (p @ drop n (butlast q)) < k\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. charslength (p @ drop n (butlast q)) = k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u\n 2. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "case 1"], ["proof (state)\nthis:\n  charslength (p @ drop n (butlast q)) = k\n\ngoal (2 subgoals):\n 1. charslength (p @ drop n (butlast q)) = k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u\n 2. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "have charslength_q': \"charslength ?q' = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (butlast q) = k", "using charslength_i[symmetric] 1"], ["proof (prove)\nusing this:\n  charslength (butlast q) = charslength (p @ drop n (butlast q))\n  charslength (p @ drop n (butlast q)) = k\n\ngoal (1 subgoal):\n 1. charslength (butlast q) = k", "by blast"], ["proof (state)\nthis:\n  charslength (butlast q) = k\n\ngoal (2 subgoals):\n 1. charslength (p @ drop n (butlast q)) = k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u\n 2. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "from compatibility_def[OF induct Suc.prems(2) 1 q_split charslength_q']"], ["proof (chain)\npicking this:\n  admissible ((p @ drop n (butlast q)) @ [last q]) \\<Longrightarrow>\n  (p @ drop n (butlast q)) @ [last q] \\<in> \\<P> k u", "show ?case"], ["proof (prove)\nusing this:\n  admissible ((p @ drop n (butlast q)) @ [last q]) \\<Longrightarrow>\n  (p @ drop n (butlast q)) @ [last q] \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "by (simp only: p'last Suc.prems(5))"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "case 2"], ["proof (state)\nthis:\n  charslength (p @ drop n (butlast q)) < k\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "from in_\\<P>_charslength[OF induct]"], ["proof (chain)\npicking this:\n  \\<exists>v.\n     p @ drop n (butlast q)\n     \\<in> \\<P> (charslength (p @ drop n (butlast q))) v", "obtain v1 where v1: \"?p' \\<in> \\<P> ?i v1\""], ["proof (prove)\nusing this:\n  \\<exists>v.\n     p @ drop n (butlast q)\n     \\<in> \\<P> (charslength (p @ drop n (butlast q))) v\n\ngoal (1 subgoal):\n 1. (\\<And>v1.\n        p @ drop n (butlast q)\n        \\<in> \\<P> (charslength (p @ drop n (butlast q)))\n               v1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p @ drop n (butlast q)\n  \\<in> \\<P> (charslength (p @ drop n (butlast q))) v1\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "from last_step_of_path[OF Suc.prems(2) q_split]"], ["proof (chain)\npicking this:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength (butlast q) = k' \\<and> last q \\<in> \\<Z> k' (Suc u')", "have \"\\<exists> u. q \\<in> \\<P> ?i u\""], ["proof (prove)\nusing this:\n  \\<exists>k' u'.\n     indexlt k' u' k u \\<and>\n     q \\<in> \\<P> k' (Suc u') \\<and>\n     charslength (butlast q) = k' \\<and> last q \\<in> \\<Z> k' (Suc u')\n\ngoal (1 subgoal):\n 1. \\<exists>u. q \\<in> \\<P> (charslength (p @ drop n (butlast q))) u", "by (metis charslength_i)"], ["proof (state)\nthis:\n  \\<exists>u. q \\<in> \\<P> (charslength (p @ drop n (butlast q))) u\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  \\<exists>u. q \\<in> \\<P> (charslength (p @ drop n (butlast q))) u", "obtain v2 where v2: \"q \\<in> \\<P> ?i v2\""], ["proof (prove)\nusing this:\n  \\<exists>u. q \\<in> \\<P> (charslength (p @ drop n (butlast q))) u\n\ngoal (1 subgoal):\n 1. (\\<And>v2.\n        q \\<in> \\<P> (charslength (p @ drop n (butlast q)))\n                 v2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q \\<in> \\<P> (charslength (p @ drop n (butlast q))) v2\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "let ?v = \"max v1 v2\""], ["proof (state)\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "have \"v1 \\<le> ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v1 \\<le> max v1 v2", "by auto"], ["proof (state)\nthis:\n  v1 \\<le> max v1 v2\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "with v1"], ["proof (chain)\npicking this:\n  p @ drop n (butlast q)\n  \\<in> \\<P> (charslength (p @ drop n (butlast q))) v1\n  v1 \\<le> max v1 v2", "have dom1: \"?p' \\<in> \\<P> ?i ?v\""], ["proof (prove)\nusing this:\n  p @ drop n (butlast q)\n  \\<in> \\<P> (charslength (p @ drop n (butlast q))) v1\n  v1 \\<le> max v1 v2\n\ngoal (1 subgoal):\n 1. p @ drop n (butlast q)\n    \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)", "by (metis (no_types, hide_lams) subsetCE subset_\\<P>k)"], ["proof (state)\nthis:\n  p @ drop n (butlast q)\n  \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "have \"v2 \\<le> ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v2 \\<le> max v1 v2", "by auto"], ["proof (state)\nthis:\n  v2 \\<le> max v1 v2\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "with v2"], ["proof (chain)\npicking this:\n  q \\<in> \\<P> (charslength (p @ drop n (butlast q))) v2\n  v2 \\<le> max v1 v2", "have dom2: \"q \\<in> \\<P> ?i ?v\""], ["proof (prove)\nusing this:\n  q \\<in> \\<P> (charslength (p @ drop n (butlast q))) v2\n  v2 \\<le> max v1 v2\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)", "by (metis (no_types, hide_lams) subsetCE subset_\\<P>k)"], ["proof (state)\nthis:\n  q \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "from compatibility_def[OF dom1 dom2 _ q_split]"], ["proof (chain)\npicking this:\n  \\<lbrakk>charslength (p @ drop n (butlast q)) =\n           charslength (p @ drop n (butlast q));\n   charslength (butlast q) = charslength (p @ drop n (butlast q));\n   admissible ((p @ drop n (butlast q)) @ [last q])\\<rbrakk>\n  \\<Longrightarrow> (p @ drop n (butlast q)) @ [last q]\n                    \\<in> \\<P> (charslength (p @ drop n (butlast q)))\n                           (max v1 v2)", "have \"p @ drop n q \\<in> \\<P> ?i ?v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>charslength (p @ drop n (butlast q)) =\n           charslength (p @ drop n (butlast q));\n   charslength (butlast q) = charslength (p @ drop n (butlast q));\n   admissible ((p @ drop n (butlast q)) @ [last q])\\<rbrakk>\n  \\<Longrightarrow> (p @ drop n (butlast q)) @ [last q]\n                    \\<in> \\<P> (charslength (p @ drop n (butlast q)))\n                           (max v1 v2)\n\ngoal (1 subgoal):\n 1. p @ drop n q\n    \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)", "by (simp only: p'last charslength_i[symmetric] Suc.prems(5))"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)\n\ngoal (1 subgoal):\n 1. charslength (p @ drop n (butlast q)) < k \\<Longrightarrow>\n    p @ drop n q \\<in> \\<P> k u", "then"], ["proof (chain)\npicking this:\n  p @ drop n q \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)", "show \"p @ drop n q \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  p @ drop n q \\<in> \\<P> (charslength (p @ drop n (butlast q))) (max v1 v2)\n\ngoal (1 subgoal):\n 1. p @ drop n q \\<in> \\<P> k u", "by (meson \"2.hyps\" subsetCE subset_\\<P>)"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p @ drop n q \\<in> \\<P> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_item_derives:\n  assumes wellformed: \"wellformed_item x\"\n  shows \"derives [item_nonterminal x] (item_rhs x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_rhs x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_rhs x)", "from wellformed"], ["proof (chain)\npicking this:\n  wellformed_item x", "have \"(item_nonterminal x, item_rhs x) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. (item_nonterminal x, item_rhs x) \\<in> \\<RR>", "by (simp add: item_nonterminal_def item_rhs_def wellformed_item_def)"], ["proof (state)\nthis:\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_rhs x)", "then"], ["proof (chain)\npicking this:\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>", "show ?thesis"], ["proof (prove)\nusing this:\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_rhs x)", "by (metis append_Nil2 derives1_def derives1_implies_derives is_sentence_concat \n        rule_\\<alpha>_type self_append_conv2)"], ["proof (state)\nthis:\n  derives [item_nonterminal x] (item_rhs x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_complete_item_\\<beta>:\n  assumes wellformed: \"wellformed_item x\"\n  assumes complete: \"is_complete x\" \n  shows \"item_\\<beta> x = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> x = []", "using complete is_complete_def item_\\<beta>_def"], ["proof (prove)\nusing this:\n  is_complete x\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  item_\\<beta> ?x = drop (item_dot ?x) (item_rhs ?x)\n\ngoal (1 subgoal):\n 1. item_\\<beta> x = []", "by auto"], ["", "lemma wellformed_complete_item_derives:\n  assumes wellformed: \"wellformed_item x\"\n  assumes complete: \"is_complete x\" \n  shows \"derives [item_nonterminal x] (item_\\<alpha> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_\\<alpha> x)", "using complete is_complete_def item_\\<alpha>_def wellformed wellformed_item_derives"], ["proof (prove)\nusing this:\n  is_complete x\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  item_\\<alpha> ?x = take (item_dot ?x) (item_rhs ?x)\n  wellformed_item x\n  wellformed_item ?x \\<Longrightarrow>\n  derives [item_nonterminal ?x] (item_rhs ?x)\n\ngoal (1 subgoal):\n 1. derives [item_nonterminal x] (item_\\<alpha> x)", "by auto"], ["", "lemma is_derivation_implies_admissible:\n  \"is_derivation (terminals p @ \\<delta>) \\<Longrightarrow> is_word (terminals p) \\<Longrightarrow> admissible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_derivation (terminals p @ \\<delta>);\n     is_word (terminals p)\\<rbrakk>\n    \\<Longrightarrow> admissible p", "using \\<L>\\<^sub>P_def admissible_def"], ["proof (prove)\nusing this:\n  \\<L>\\<^sub>P =\n  {uu_. \\<exists>u v. uu_ = u \\<and> is_word u \\<and> is_derivation (u @ v)}\n  admissible ?ts = (terminals ?ts \\<in> \\<L>\\<^sub>P)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_derivation (terminals p @ \\<delta>);\n     is_word (terminals p)\\<rbrakk>\n    \\<Longrightarrow> admissible p", "by blast"], ["", "lemma item_rhs_of_inc_item[simp]: \"item_rhs (inc_item x k) = item_rhs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (inc_item x k) = item_rhs x", "by (auto simp add: inc_item_def item_rhs_def)"], ["", "lemma item_rule_of_inc_item[simp]: \"item_rule (inc_item x k) = item_rule x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule (inc_item x k) = item_rule x", "by (simp add: inc_item_def)"], ["", "lemma item_origin_of_inc_item[simp]: \"item_origin (inc_item x k) = item_origin x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin (inc_item x k) = item_origin x", "by (simp add: inc_item_def)"], ["", "lemma item_end_of_inc_item[simp]: \"item_end (inc_item x k) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end (inc_item x k) = k", "by (simp add: inc_item_def)"], ["", "lemma item_dot_of_inc_item[simp]: \"item_dot (inc_item x k) = (item_dot x) + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot (inc_item x k) = item_dot x + 1", "by (simp add: inc_item_def)"], ["", "lemma item_nonterminal_of_inc_item[simp]: \"item_nonterminal (inc_item x k) = item_nonterminal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal (inc_item x k) = item_nonterminal x", "by (simp add: inc_item_def item_nonterminal_def)"], ["", "lemma wellformed_inc_item:\n  assumes wellformed: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some s\"\n  assumes k_upper_bound: \"k \\<le> length Doc\"\n  assumes k_lower_bound: \"k \\<ge> item_end x\"\n  shows \"wellformed_item (inc_item x k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (inc_item x k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_item (inc_item x k)", "have k_lower_bound': \"k \\<ge> item_origin x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin x \\<le> k", "using k_lower_bound wellformed wellformed_item_def"], ["proof (prove)\nusing this:\n  item_end x \\<le> k\n  wellformed_item x\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (1 subgoal):\n 1. item_origin x \\<le> k", "by auto"], ["proof (state)\nthis:\n  item_origin x \\<le> k\n\ngoal (1 subgoal):\n 1. wellformed_item (inc_item x k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (inc_item x k)", "apply (auto simp add: wellformed_item_def k_upper_bound k_lower_bound')"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_rule x \\<in> \\<RR>\n 2. Suc (item_dot x) \\<le> length (item_rhs x)", "using wellformed wellformed_item_def"], ["proof (prove)\nusing this:\n  wellformed_item x\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (2 subgoals):\n 1. item_rule x \\<in> \\<RR>\n 2. Suc (item_dot x) \\<le> length (item_rhs x)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc (item_dot x) \\<le> length (item_rhs x)", "using is_complete_def next_symbol next_symbol_not_complete not_less_eq_eq"], ["proof (prove)\nusing this:\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  next_symbol x = Some s\n  next_symbol ?x = Some ?t \\<Longrightarrow> \\<not> is_complete ?x\n  (\\<not> ?m \\<le> ?n) = (Suc ?n \\<le> ?m)\n\ngoal (1 subgoal):\n 1. Suc (item_dot x) \\<le> length (item_rhs x)", "by blast"], ["proof (state)\nthis:\n  wellformed_item (inc_item x k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma item_\\<alpha>_of_inc_item:\n  assumes wellformed: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some s\"\n  shows \"item_\\<alpha> (inc_item x k) = item_\\<alpha> x @ [s]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> (inc_item x k) = item_\\<alpha> x @ [s]", "by (metis (mono_tags, lifting) item_dot_of_inc_item item_rhs_of_inc_item \n  One_nat_def add.right_neutral add_Suc_right is_complete_def item_\\<alpha>_def item_\\<beta>_def \n  le_neq_implies_less list.sel(1) next_symbol next_symbol_not_complete next_symbol_starts_item_\\<beta> \n  take_hd_drop wellformed wellformed_item_def)"], ["", "lemma derives1_pad: \n  assumes derives1: \"derives1 \\<alpha> \\<beta>\"\n  assumes u: \"is_sentence u\"\n  assumes v: \"is_sentence v\"\n  shows \"derives1 (u@\\<alpha>@v) (u@\\<beta>@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "from derives1"], ["proof (chain)\npicking this:\n  derives1 \\<alpha> \\<beta>", "have \n   \"\\<exists>x y N \\<delta>. \\<alpha> = x @ [N] @ y \\<and> \\<beta> = x @ \\<delta> @ y \\<and> is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  derives1 \\<alpha> \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>x y N \\<delta>.\n       \\<alpha> = x @ [N] @ y \\<and>\n       \\<beta> = x @ \\<delta> @ y \\<and>\n       is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>", "by (auto simp add: derives1_def)"], ["proof (state)\nthis:\n  \\<exists>x y N \\<delta>.\n     \\<alpha> = x @ [N] @ y \\<and>\n     \\<beta> = x @ \\<delta> @ y \\<and>\n     is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x y N \\<delta>.\n     \\<alpha> = x @ [N] @ y \\<and>\n     \\<beta> = x @ \\<delta> @ y \\<and>\n     is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>", "obtain x y N \\<delta> where \n   1: \"\\<alpha> = x @ [N] @ y \\<and> \\<beta> = x @ \\<delta> @ y \\<and> is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  \\<exists>x y N \\<delta>.\n     \\<alpha> = x @ [N] @ y \\<and>\n     \\<beta> = x @ \\<delta> @ y \\<and>\n     is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (\\<And>x N y \\<delta>.\n        \\<alpha> = x @ [N] @ y \\<and>\n        \\<beta> = x @ \\<delta> @ y \\<and>\n        is_sentence x \\<and>\n        is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = x @ [N] @ y \\<and>\n  \\<beta> = x @ \\<delta> @ y \\<and>\n  is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "apply (simp only: derives1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y N \\<alpha>'.\n       u @ \\<alpha> @ v = x @ [N] @ y \\<and>\n       u @ \\<beta> @ v = x @ \\<alpha>' @ y \\<and>\n       is_sentence x \\<and> is_sentence y \\<and> (N, \\<alpha>') \\<in> \\<RR>", "apply (rule_tac x=\"u@x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y N \\<alpha>'.\n       u @ \\<alpha> @ v = (u @ x) @ [N] @ y \\<and>\n       u @ \\<beta> @ v = (u @ x) @ \\<alpha>' @ y \\<and>\n       is_sentence (u @ x) \\<and>\n       is_sentence y \\<and> (N, \\<alpha>') \\<in> \\<RR>", "apply (rule_tac x=\"y@v\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N \\<alpha>'.\n       u @ \\<alpha> @ v = (u @ x) @ [N] @ y @ v \\<and>\n       u @ \\<beta> @ v = (u @ x) @ \\<alpha>' @ y @ v \\<and>\n       is_sentence (u @ x) \\<and>\n       is_sentence (y @ v) \\<and> (N, \\<alpha>') \\<in> \\<RR>", "apply (rule_tac x=N in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>'.\n       u @ \\<alpha> @ v = (u @ x) @ [N] @ y @ v \\<and>\n       u @ \\<beta> @ v = (u @ x) @ \\<alpha>' @ y @ v \\<and>\n       is_sentence (u @ x) \\<and>\n       is_sentence (y @ v) \\<and> (N, \\<alpha>') \\<in> \\<RR>", "apply (rule_tac x=\\<delta> in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u @ \\<alpha> @ v = (u @ x) @ [N] @ y @ v \\<and>\n    u @ \\<beta> @ v = (u @ x) @ \\<delta> @ y @ v \\<and>\n    is_sentence (u @ x) \\<and>\n    is_sentence (y @ v) \\<and> (N, \\<delta>) \\<in> \\<RR>", "using 1 u v is_sentence_concat"], ["proof (prove)\nusing this:\n  \\<alpha> = x @ [N] @ y \\<and>\n  \\<beta> = x @ \\<delta> @ y \\<and>\n  is_sentence x \\<and> is_sentence y \\<and> (N, \\<delta>) \\<in> \\<RR>\n  is_sentence u\n  is_sentence v\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. u @ \\<alpha> @ v = (u @ x) @ [N] @ y @ v \\<and>\n    u @ \\<beta> @ v = (u @ x) @ \\<delta> @ y @ v \\<and>\n    is_sentence (u @ x) \\<and>\n    is_sentence (y @ v) \\<and> (N, \\<delta>) \\<in> \\<RR>", "by auto"], ["proof (state)\nthis:\n  derives1 (u @ \\<alpha> @ v) (u @ \\<beta> @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives_pad:\n  \"derives \\<alpha> \\<beta> \\<Longrightarrow> is_sentence u \\<Longrightarrow> is_sentence v \\<Longrightarrow> derives (u@\\<alpha>@v) (u@\\<beta>@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derives \\<alpha> \\<beta>; is_sentence u; is_sentence v\\<rbrakk>\n    \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ \\<beta> @ v)", "proof (induct rule: derives_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n    \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ \\<alpha> @ v)\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "case Base"], ["proof (state)\nthis:\n  is_sentence u\n  is_sentence v\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n    \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ \\<alpha> @ v)\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "thus ?case"], ["proof (prove)\nusing this:\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. derives (u @ \\<alpha> @ v) (u @ \\<alpha> @ v)", "by simp"], ["proof (state)\nthis:\n  derives (u @ \\<alpha> @ v) (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "case (Step y z)"], ["proof (state)\nthis:\n  derives \\<alpha> y\n  derives1 y z\n  \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n  \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v)\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "from Step"], ["proof (chain)\npicking this:\n  derives \\<alpha> y\n  derives1 y z\n  \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n  \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v)\n  is_sentence u\n  is_sentence v", "have 1: \"derives (u@\\<alpha>@v) (u@y@v)\""], ["proof (prove)\nusing this:\n  derives \\<alpha> y\n  derives1 y z\n  \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n  \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v)\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. derives (u @ \\<alpha> @ v) (u @ y @ v)", "by auto"], ["proof (state)\nthis:\n  derives (u @ \\<alpha> @ v) (u @ y @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "from Step"], ["proof (chain)\npicking this:\n  derives \\<alpha> y\n  derives1 y z\n  \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n  \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v)\n  is_sentence u\n  is_sentence v", "have 2: \"derives1 y z\""], ["proof (prove)\nusing this:\n  derives \\<alpha> y\n  derives1 y z\n  \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n  \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v)\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. derives1 y z", "by auto"], ["proof (state)\nthis:\n  derives1 y z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "then"], ["proof (chain)\npicking this:\n  derives1 y z", "have \"derives1 (u@y@v) (u@z@v)\""], ["proof (prove)\nusing this:\n  derives1 y z\n\ngoal (1 subgoal):\n 1. derives1 (u @ y @ v) (u @ z @ v)", "by (simp add: Step.prems derives1_pad)"], ["proof (state)\nthis:\n  derives1 (u @ y @ v) (u @ z @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<lbrakk>is_sentence u; is_sentence v\\<rbrakk>\n        \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ y @ v);\n        is_sentence u; is_sentence v\\<rbrakk>\n       \\<Longrightarrow> derives (u @ \\<alpha> @ v) (u @ z @ v)", "then"], ["proof (chain)\npicking this:\n  derives1 (u @ y @ v) (u @ z @ v)", "show ?case"], ["proof (prove)\nusing this:\n  derives1 (u @ y @ v) (u @ z @ v)\n\ngoal (1 subgoal):\n 1. derives (u @ \\<alpha> @ v) (u @ z @ v)", "using \"1\" derives1_implies_derives derives_trans"], ["proof (prove)\nusing this:\n  derives1 (u @ y @ v) (u @ z @ v)\n  derives (u @ \\<alpha> @ v) (u @ y @ v)\n  derives1 ?a ?b \\<Longrightarrow> derives ?a ?b\n  \\<lbrakk>derives ?a ?b; derives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> derives ?a ?c\n\ngoal (1 subgoal):\n 1. derives (u @ \\<alpha> @ v) (u @ z @ v)", "by blast"], ["proof (state)\nthis:\n  derives (u @ \\<alpha> @ v) (u @ z @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives1_is_sentence: \"derives1 \\<alpha> \\<beta> \\<Longrightarrow> is_sentence \\<alpha> \\<and> is_sentence \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 \\<alpha> \\<beta> \\<Longrightarrow>\n    is_sentence \\<alpha> \\<and> is_sentence \\<beta>", "using Derives1_sentence1 Derives1_sentence2 derives1_implies_Derives1"], ["proof (prove)\nusing this:\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?a\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?b\n  derives1 ?u ?v \\<Longrightarrow> \\<exists>i r. Derives1 ?u i r ?v\n\ngoal (1 subgoal):\n 1. derives1 \\<alpha> \\<beta> \\<Longrightarrow>\n    is_sentence \\<alpha> \\<and> is_sentence \\<beta>", "by blast"], ["", "lemma derives_is_sentence: \"derives \\<alpha> \\<beta> \\<Longrightarrow> (\\<alpha> = \\<beta>) \\<or> (is_sentence \\<alpha> \\<and> is_sentence \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives \\<alpha> \\<beta> \\<Longrightarrow>\n    \\<alpha> = \\<beta> \\<or> is_sentence \\<alpha> \\<and> is_sentence \\<beta>", "proof (induct rule: derives_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = \\<alpha> \\<or>\n    is_sentence \\<alpha> \\<and> is_sentence \\<alpha>\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<alpha> = y \\<or>\n        is_sentence \\<alpha> \\<and> is_sentence y\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> = z \\<or>\n                         is_sentence \\<alpha> \\<and> is_sentence z", "case Base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<alpha> = \\<alpha> \\<or>\n    is_sentence \\<alpha> \\<and> is_sentence \\<alpha>\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<alpha> = y \\<or>\n        is_sentence \\<alpha> \\<and> is_sentence y\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> = z \\<or>\n                         is_sentence \\<alpha> \\<and> is_sentence z", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> = \\<alpha> \\<or>\n    is_sentence \\<alpha> \\<and> is_sentence \\<alpha>", "by simp"], ["proof (state)\nthis:\n  \\<alpha> = \\<alpha> \\<or> is_sentence \\<alpha> \\<and> is_sentence \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<alpha> = y \\<or>\n        is_sentence \\<alpha> \\<and> is_sentence y\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> = z \\<or>\n                         is_sentence \\<alpha> \\<and> is_sentence z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<alpha> = y \\<or>\n        is_sentence \\<alpha> \\<and> is_sentence y\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> = z \\<or>\n                         is_sentence \\<alpha> \\<and> is_sentence z", "case (Step y z)"], ["proof (state)\nthis:\n  derives \\<alpha> y\n  derives1 y z\n  \\<alpha> = y \\<or> is_sentence \\<alpha> \\<and> is_sentence y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        \\<alpha> = y \\<or>\n        is_sentence \\<alpha> \\<and> is_sentence y\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> = z \\<or>\n                         is_sentence \\<alpha> \\<and> is_sentence z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> = z \\<or> is_sentence \\<alpha> \\<and> is_sentence z", "using Step.hyps(2) Step.hyps(3) derives1_is_sentence"], ["proof (prove)\nusing this:\n  derives1 y z\n  \\<alpha> = y \\<or> is_sentence \\<alpha> \\<and> is_sentence y\n  derives1 ?\\<alpha> ?\\<beta> \\<Longrightarrow>\n  is_sentence ?\\<alpha> \\<and> is_sentence ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<alpha> = z \\<or> is_sentence \\<alpha> \\<and> is_sentence z", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = z \\<or> is_sentence \\<alpha> \\<and> is_sentence z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives_append: \n  assumes au: \"derives a u\"\n  assumes bv: \"derives b v\"\n  assumes is_sentence_a: \"is_sentence a\"\n  assumes is_sentence_b: \"is_sentence b\"\n  shows \"derives (a@b) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "from au"], ["proof (chain)\npicking this:\n  derives a u", "have \"a = u \\<or> (is_sentence a \\<and> is_sentence u)\""], ["proof (prove)\nusing this:\n  derives a u\n\ngoal (1 subgoal):\n 1. a = u \\<or> is_sentence a \\<and> is_sentence u", "using derives_is_sentence"], ["proof (prove)\nusing this:\n  derives a u\n  derives ?\\<alpha> ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> = ?\\<beta> \\<or>\n  is_sentence ?\\<alpha> \\<and> is_sentence ?\\<beta>\n\ngoal (1 subgoal):\n 1. a = u \\<or> is_sentence a \\<and> is_sentence u", "by blast"], ["proof (state)\nthis:\n  a = u \\<or> is_sentence a \\<and> is_sentence u\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "then"], ["proof (chain)\npicking this:\n  a = u \\<or> is_sentence a \\<and> is_sentence u", "have au_sentences: \"is_sentence a \\<and> is_sentence u\""], ["proof (prove)\nusing this:\n  a = u \\<or> is_sentence a \\<and> is_sentence u\n\ngoal (1 subgoal):\n 1. is_sentence a \\<and> is_sentence u", "using is_sentence_a"], ["proof (prove)\nusing this:\n  a = u \\<or> is_sentence a \\<and> is_sentence u\n  is_sentence a\n\ngoal (1 subgoal):\n 1. is_sentence a \\<and> is_sentence u", "by blast"], ["proof (state)\nthis:\n  is_sentence a \\<and> is_sentence u\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "from bv"], ["proof (chain)\npicking this:\n  derives b v", "have \"b = v \\<or> (is_sentence b \\<and> is_sentence v)\""], ["proof (prove)\nusing this:\n  derives b v\n\ngoal (1 subgoal):\n 1. b = v \\<or> is_sentence b \\<and> is_sentence v", "using derives_is_sentence"], ["proof (prove)\nusing this:\n  derives b v\n  derives ?\\<alpha> ?\\<beta> \\<Longrightarrow>\n  ?\\<alpha> = ?\\<beta> \\<or>\n  is_sentence ?\\<alpha> \\<and> is_sentence ?\\<beta>\n\ngoal (1 subgoal):\n 1. b = v \\<or> is_sentence b \\<and> is_sentence v", "by blast"], ["proof (state)\nthis:\n  b = v \\<or> is_sentence b \\<and> is_sentence v\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "then"], ["proof (chain)\npicking this:\n  b = v \\<or> is_sentence b \\<and> is_sentence v", "have bv_sentences: \"is_sentence b \\<and> is_sentence v\""], ["proof (prove)\nusing this:\n  b = v \\<or> is_sentence b \\<and> is_sentence v\n\ngoal (1 subgoal):\n 1. is_sentence b \\<and> is_sentence v", "using is_sentence_b"], ["proof (prove)\nusing this:\n  b = v \\<or> is_sentence b \\<and> is_sentence v\n  is_sentence b\n\ngoal (1 subgoal):\n 1. is_sentence b \\<and> is_sentence v", "by blast"], ["proof (state)\nthis:\n  is_sentence b \\<and> is_sentence v\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "have 1: \"derives (a@b) (u@b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ b)", "apply (rule_tac derives_pad[OF au, where u=\"[]\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence b", "using is_sentence_b"], ["proof (prove)\nusing this:\n  is_sentence b\n\ngoal (1 subgoal):\n 1. is_sentence b", "by auto"], ["proof (state)\nthis:\n  derives (a @ b) (u @ b)\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "have 2: \"derives (u@b) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (u @ b) (u @ v)", "apply (rule_tac derives_pad[OF bv, where v=\"[]\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence u", "apply (simp add: au_sentences)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  derives (u @ b) (u @ v)\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "from 1 2 derives_trans"], ["proof (chain)\npicking this:\n  derives (a @ b) (u @ b)\n  derives (u @ b) (u @ v)\n  \\<lbrakk>derives ?a ?b; derives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> derives ?a ?c", "show ?thesis"], ["proof (prove)\nusing this:\n  derives (a @ b) (u @ b)\n  derives (u @ b) (u @ v)\n  \\<lbrakk>derives ?a ?b; derives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> derives ?a ?c\n\ngoal (1 subgoal):\n 1. derives (a @ b) (u @ v)", "by blast"], ["proof (state)\nthis:\n  derives (a @ b) (u @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_sentence_item_\\<alpha>: \"wellformed_item x \\<Longrightarrow> is_sentence (item_\\<alpha> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x \\<Longrightarrow> is_sentence (item_\\<alpha> x)", "by (metis is_sentence_take item_\\<alpha>_def item_rhs_def prod.collapse rule_\\<alpha>_type wellformed_item_def)"], ["", "lemma is_nonterminal_item_nonterminal:  \"wellformed_item x \\<Longrightarrow> is_nonterminal (item_nonterminal x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x \\<Longrightarrow> is_nonterminal (item_nonterminal x)", "by (metis item_nonterminal_def prod.collapse rule_nonterminal_type wellformed_item_def)"], ["", "lemma Complete_elem_in_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes x_in_Complete: \"x \\<in> Complete k I\"\n  shows \"x \\<in> Gen (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "let ?P = \"\\<P> k u\""], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "from x_in_Complete"], ["proof (chain)\npicking this:\n  x \\<in> Complete k I", "have \"x \\<in> I \\<or> (\\<exists> x1 x2. x = inc_item x1 k \\<and> \n     x1 \\<in> bin I (item_origin x2) \\<and> x2 \\<in> bin I k \\<and> is_complete x2 \\<and> \n     next_symbol x1 = Some (item_nonterminal x2))\""], ["proof (prove)\nusing this:\n  x \\<in> Complete k I\n\ngoal (1 subgoal):\n 1. x \\<in> I \\<or>\n    (\\<exists>x1 x2.\n        x = inc_item x1 k \\<and>\n        x1 \\<in> bin I (item_origin x2) \\<and>\n        x2 \\<in> bin I k \\<and>\n        is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2))", "by (auto simp add: Complete_def)"], ["proof (state)\nthis:\n  x \\<in> I \\<or>\n  (\\<exists>x1 x2.\n      x = inc_item x1 k \\<and>\n      x1 \\<in> bin I (item_origin x2) \\<and>\n      x2 \\<in> bin I k \\<and>\n      is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2))\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  x \\<in> I \\<or>\n  (\\<exists>x1 x2.\n      x = inc_item x1 k \\<and>\n      x1 \\<in> bin I (item_origin x2) \\<and>\n      x2 \\<in> bin I k \\<and>\n      is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2))", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> I \\<or>\n  (\\<exists>x1 x2.\n      x = inc_item x1 k \\<and>\n      x1 \\<in> bin I (item_origin x2) \\<and>\n      x2 \\<in> bin I k \\<and>\n      is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2))\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen (\\<P> k u)\n 2. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "case 1"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen (\\<P> k u)\n 2. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "using I_in_Gen subsetCE"], ["proof (prove)\nusing this:\n  x \\<in> I\n  I \\<subseteq> Gen (\\<P> k u)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "case 2"], ["proof (state)\nthis:\n  \\<exists>x1 x2.\n     x = inc_item x1 k \\<and>\n     x1 \\<in> bin I (item_origin x2) \\<and>\n     x2 \\<in> bin I k \\<and>\n     is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x1 x2.\n     x = inc_item x1 k \\<and>\n     x1 \\<in> bin I (item_origin x2) \\<and>\n     x2 \\<in> bin I k \\<and>\n     is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)", "obtain x1 x2 where x12: \"x = inc_item x1 k \\<and> \n      x1 \\<in> bin I (item_origin x2) \\<and> x2 \\<in> bin I k \\<and> is_complete x2 \\<and> \n      next_symbol x1 = Some (item_nonterminal x2)\""], ["proof (prove)\nusing this:\n  \\<exists>x1 x2.\n     x = inc_item x1 k \\<and>\n     x1 \\<in> bin I (item_origin x2) \\<and>\n     x2 \\<in> bin I k \\<and>\n     is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. (\\<And>x1 x2.\n        x = inc_item x1 k \\<and>\n        x1 \\<in> bin I (item_origin x2) \\<and>\n        x2 \\<in> bin I k \\<and>\n        is_complete x2 \\<and>\n        next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from x12"], ["proof (chain)\npicking this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)", "have \"\\<exists> p1 p2. p1 \\<in> ?P \\<and> pvalid p1 x1 \\<and> p2 \\<in> ?P \\<and> pvalid p2 x2\""], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. \\<exists>p1 p2.\n       p1 \\<in> \\<P> k u \\<and>\n       pvalid p1 x1 \\<and> p2 \\<in> \\<P> k u \\<and> pvalid p2 x2", "by (meson Gen_implies_pvalid I_in_Gen bin_elem subsetCE)"], ["proof (state)\nthis:\n  \\<exists>p1 p2.\n     p1 \\<in> \\<P> k u \\<and>\n     pvalid p1 x1 \\<and> p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>p1 p2.\n     p1 \\<in> \\<P> k u \\<and>\n     pvalid p1 x1 \\<and> p2 \\<in> \\<P> k u \\<and> pvalid p2 x2", "obtain p1 p2 where p1: \"p1 \\<in> ?P \\<and> pvalid p1 x1\" and p2: \"p2 \\<in> ?P \\<and> pvalid p2 x2\""], ["proof (prove)\nusing this:\n  \\<exists>p1 p2.\n     p1 \\<in> \\<P> k u \\<and>\n     pvalid p1 x1 \\<and> p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>p1 p2.\n        \\<lbrakk>p1 \\<in> \\<P> k u \\<and> pvalid p1 x1;\n         p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p1 \\<in> \\<P> k u \\<and> pvalid p1 x1\n  p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from p1"], ["proof (chain)\npicking this:\n  p1 \\<in> \\<P> k u \\<and> pvalid p1 x1", "obtain w \\<delta> where p1valid:\n      \"wellformed_tokens p1 \\<and>\n       wellformed_item x1 \\<and>\n       w \\<le> length p1 \\<and>\n       charslength p1 = item_end x1 \\<and>\n       charslength (take w p1) = item_origin x1 \\<and>\n       is_derivation (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n       derives (item_\\<alpha> x1) (terminals (drop w p1))\""], ["proof (prove)\nusing this:\n  p1 \\<in> \\<P> k u \\<and> pvalid p1 x1\n\ngoal (1 subgoal):\n 1. (\\<And>w \\<delta>.\n        wellformed_tokens p1 \\<and>\n        wellformed_item x1 \\<and>\n        w \\<le> length p1 \\<and>\n        charslength p1 = item_end x1 \\<and>\n        charslength (take w p1) = item_origin x1 \\<and>\n        is_derivation\n         (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n        derives (item_\\<alpha> x1) (terminals (drop w p1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using pvalid_def"], ["proof (prove)\nusing this:\n  p1 \\<in> \\<P> k u \\<and> pvalid p1 x1\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n\ngoal (1 subgoal):\n 1. (\\<And>w \\<delta>.\n        wellformed_tokens p1 \\<and>\n        wellformed_item x1 \\<and>\n        w \\<le> length p1 \\<and>\n        charslength p1 = item_end x1 \\<and>\n        charslength (take w p1) = item_origin x1 \\<and>\n        is_derivation\n         (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n        derives (item_\\<alpha> x1) (terminals (drop w p1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from p2"], ["proof (chain)\npicking this:\n  p2 \\<in> \\<P> k u \\<and> pvalid p2 x2", "obtain y \\<gamma> where p2valid:\n      \"wellformed_tokens p2 \\<and>\n       wellformed_item x2 \\<and>\n       y \\<le> length p2 \\<and>\n       charslength p2 = item_end x2 \\<and>\n       charslength (take y p2) = item_origin x2 \\<and>\n       is_derivation (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x2) (terminals (drop y p2))\""], ["proof (prove)\nusing this:\n  p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\n\ngoal (1 subgoal):\n 1. (\\<And>y \\<gamma>.\n        wellformed_tokens p2 \\<and>\n        wellformed_item x2 \\<and>\n        y \\<le> length p2 \\<and>\n        charslength p2 = item_end x2 \\<and>\n        charslength (take y p2) = item_origin x2 \\<and>\n        is_derivation\n         (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> x2) (terminals (drop y p2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using pvalid_def"], ["proof (prove)\nusing this:\n  p2 \\<in> \\<P> k u \\<and> pvalid p2 x2\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n\ngoal (1 subgoal):\n 1. (\\<And>y \\<gamma>.\n        wellformed_tokens p2 \\<and>\n        wellformed_item x2 \\<and>\n        y \\<le> length p2 \\<and>\n        charslength p2 = item_end x2 \\<and>\n        charslength (take y p2) = item_origin x2 \\<and>\n        is_derivation\n         (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> x2) (terminals (drop y p2)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "let ?r = \"p1 @ (drop y p2)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have charslength_p1_eq: \"charslength p1 = item_end x1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p1 = item_end x1", "by (simp only: p1valid)"], ["proof (state)\nthis:\n  charslength p1 = item_end x1\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from x12"], ["proof (chain)\npicking this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)", "have item_end_x1: \"item_end x1 = item_origin x2\""], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. item_end x1 = item_origin x2", "using bin_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. item_end x1 = item_origin x2", "by blast"], ["proof (state)\nthis:\n  item_end x1 = item_origin x2\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have item_end_x2: \"item_end x2 = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x2 = k", "using bin_def x12"], ["proof (prove)\nusing this:\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. item_end x2 = k", "by blast"], ["proof (state)\nthis:\n  item_end x2 = k\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  item_end x2 = k", "have charslength_p1_leq: \"charslength p1 \\<le> k\""], ["proof (prove)\nusing this:\n  item_end x2 = k\n\ngoal (1 subgoal):\n 1. charslength p1 \\<le> k", "using charslength_p1_eq item_end_x1 p2valid wellformed_item_def"], ["proof (prove)\nusing this:\n  item_end x2 = k\n  charslength p1 = item_end x1\n  item_end x1 = item_origin x2\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (1 subgoal):\n 1. charslength p1 \\<le> k", "by auto"], ["proof (state)\nthis:\n  charslength p1 \\<le> k\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"\\<exists>\\<delta>'. item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>'. item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'", "by (simp add: next_symbol_starts_item_\\<beta> p1valid x12)"], ["proof (state)\nthis:\n  \\<exists>\\<delta>'. item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<delta>'. item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'", "obtain \\<delta>' where \\<delta>': \"item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\""], ["proof (prove)\nusing this:\n  \\<exists>\\<delta>'. item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>'.\n        item_\\<beta> x1 =\n        [item_nonterminal x2] @ \\<delta>' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"is_derivation ((terminals (take w p1))@(item_rhs x1)@\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_derivation (terminals (take w p1) @ item_rhs x1 @ \\<delta>)", "using is_derivation_derives p1valid wellformed_item_derives"], ["proof (prove)\nusing this:\n  \\<lbrakk>derives ?\\<alpha> ?\\<beta>;\n   is_derivation (?u @ ?\\<alpha> @ ?v)\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<beta> @ ?v)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n  wellformed_item ?x \\<Longrightarrow>\n  derives [item_nonterminal ?x] (item_rhs ?x)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals (take w p1) @ item_rhs x1 @ \\<delta>)", "by blast"], ["proof (state)\nthis:\n  is_derivation (terminals (take w p1) @ item_rhs x1 @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals (take w p1) @ item_rhs x1 @ \\<delta>)", "have \"is_derivation ((terminals (take w p1))@(item_\\<alpha> x1 @ item_\\<beta> x1)@\\<delta>)\""], ["proof (prove)\nusing this:\n  is_derivation (terminals (take w p1) @ item_rhs x1 @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals (take w p1) @\n      (item_\\<alpha> x1 @ item_\\<beta> x1) @ \\<delta>)", "by (simp add: item_rhs_split)"], ["proof (state)\nthis:\n  is_derivation\n   (terminals (take w p1) @ (item_\\<alpha> x1 @ item_\\<beta> x1) @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (terminals (take w p1) @ (item_\\<alpha> x1 @ item_\\<beta> x1) @ \\<delta>)", "have \"is_derivation ((terminals (take w p1))@((terminals (drop w p1)) @ item_\\<beta> x1)@\\<delta>)\""], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals (take w p1) @ (item_\\<alpha> x1 @ item_\\<beta> x1) @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals (take w p1) @\n      (terminals (drop w p1) @ item_\\<beta> x1) @ \\<delta>)", "using is_derivation_derives p1valid"], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals (take w p1) @ (item_\\<alpha> x1 @ item_\\<beta> x1) @ \\<delta>)\n  \\<lbrakk>derives ?\\<alpha> ?\\<beta>;\n   is_derivation (?u @ ?\\<alpha> @ ?v)\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<beta> @ ?v)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals (take w p1) @\n      (terminals (drop w p1) @ item_\\<beta> x1) @ \\<delta>)", "by auto"], ["proof (state)\nthis:\n  is_derivation\n   (terminals (take w p1) @\n    (terminals (drop w p1) @ item_\\<beta> x1) @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (terminals (take w p1) @\n    (terminals (drop w p1) @ item_\\<beta> x1) @ \\<delta>)", "have \"is_derivation ((terminals p1)@(item_\\<beta> x1)@\\<delta>)\""], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals (take w p1) @\n    (terminals (drop w p1) @ item_\\<beta> x1) @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals p1 @ item_\\<beta> x1 @ \\<delta>)", "by (metis append_assoc append_take_drop_id terminals_append)"], ["proof (state)\nthis:\n  is_derivation (terminals p1 @ item_\\<beta> x1 @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals p1 @ item_\\<beta> x1 @ \\<delta>)", "have \"is_derivation ((terminals p1)@([item_nonterminal x2] @ \\<delta>')@\\<delta>)\""], ["proof (prove)\nusing this:\n  is_derivation (terminals p1 @ item_\\<beta> x1 @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)", "using is_derivation_derives \\<delta>'"], ["proof (prove)\nusing this:\n  is_derivation (terminals p1 @ item_\\<beta> x1 @ \\<delta>)\n  \\<lbrakk>derives ?\\<alpha> ?\\<beta>;\n   is_derivation (?u @ ?\\<alpha> @ ?v)\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<beta> @ ?v)\n  item_\\<beta> x1 = [item_nonterminal x2] @ \\<delta>'\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)", "by auto"], ["proof (state)\nthis:\n  is_derivation\n   (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)", "have \"is_derivation ((terminals p1)@(terminals (drop y p2)) @ \\<delta>' @\\<delta>)\""], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @ terminals (drop y p2) @ \\<delta>' @ \\<delta>)", "using is_complete_def is_derivation_derives is_derivation_step item_\\<alpha>_def \n        item_nonterminal_def item_rhs_def p2valid wellformed_item_def x12"], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals p1 @ ([item_nonterminal x2] @ \\<delta>') @ \\<delta>)\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  \\<lbrakk>derives ?\\<alpha> ?\\<beta>;\n   is_derivation (?u @ ?\\<alpha> @ ?v)\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<beta> @ ?v)\n  \\<lbrakk>is_derivation (?u @ [?N] @ ?v);\n   (?N, ?\\<alpha>) \\<in> \\<RR>\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<alpha> @ ?v)\n  item_\\<alpha> ?x = take (item_dot ?x) (item_rhs ?x)\n  item_nonterminal ?x = fst (item_rule ?x)\n  item_rhs ?x = snd (item_rule ?x)\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @ terminals (drop y p2) @ \\<delta>' @ \\<delta>)", "by auto"], ["proof (state)\nthis:\n  is_derivation\n   (terminals p1 @ terminals (drop y p2) @ \\<delta>' @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (terminals p1 @ terminals (drop y p2) @ \\<delta>' @ \\<delta>)", "have \"is_derivation (terminals (p1 @ (drop y p2)) @ (\\<delta>' @ \\<delta>))\""], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals p1 @ terminals (drop y p2) @ \\<delta>' @ \\<delta>)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>)", "by simp"], ["proof (state)\nthis:\n  is_derivation (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>)", "have admissible_r: \"admissible (p1 @ (drop y p2))\""], ["proof (prove)\nusing this:\n  is_derivation (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>)\n\ngoal (1 subgoal):\n 1. admissible (p1 @ drop y p2)", "apply (rule_tac is_derivation_implies_admissible)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_derivation (terminals (p1 @ drop y p2) @ ?\\<delta>1)\n 2. is_derivation\n     (terminals (p1 @ drop y p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (terminals (p1 @ drop y p2))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (terminals p1)\n 2. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (drop y (terminals p2))", "apply (rule is_word_terminals)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    wellformed_tokens p1\n 2. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (drop y (terminals p2))", "apply (simp add: p1valid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (drop y (terminals p2))", "using p2valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (drop y (terminals p2))", "using is_word_terminals_drop terminals_drop"], ["proof (prove)\nusing this:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n  wellformed_tokens ?p \\<Longrightarrow> is_word (terminals (drop ?n ?p))\n  terminals (drop ?n ?p) = drop ?n (terminals ?p)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (terminals p1 @\n      drop y (terminals p2) @ \\<delta>' @ \\<delta>) \\<Longrightarrow>\n    is_word (drop y (terminals p2))", "by auto"], ["proof (state)\nthis:\n  admissible (p1 @ drop y p2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have r_in_dom: \"?r \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p1 @ drop y p2 \\<in> \\<P> k u", "apply (rule_tac general_compatibility)"], ["proof (prove)\ngoal (5 subgoals):\n 1. p1 \\<in> \\<P> k u\n 2. p2 \\<in> \\<P> k u\n 3. charslength p1 = charslength (take y p2)\n 4. charslength p1 \\<le> k\n 5. admissible (p1 @ drop y p2)", "apply (simp add: p1)"], ["proof (prove)\ngoal (4 subgoals):\n 1. p2 \\<in> \\<P> k u\n 2. charslength p1 = charslength (take y p2)\n 3. charslength p1 \\<le> k\n 4. admissible (p1 @ drop y p2)", "apply (simp add: p2)"], ["proof (prove)\ngoal (3 subgoals):\n 1. charslength p1 = charslength (take y p2)\n 2. charslength p1 \\<le> k\n 3. admissible (p1 @ drop y p2)", "apply (simp only: p2valid charslength_p1_eq item_end_x1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength p1 \\<le> k\n 2. admissible (p1 @ drop y p2)", "apply (simp only: charslength_p1_leq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p1 @ drop y p2)", "by (simp add: admissible_r)"], ["proof (state)\nthis:\n  p1 @ drop y p2 \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have wellformed_r: \"wellformed_tokens ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens (p1 @ drop y p2)", "using admissible_r admissible_wellformed_tokens"], ["proof (prove)\nusing this:\n  admissible (p1 @ drop y p2)\n  admissible ?p \\<Longrightarrow> wellformed_tokens ?p\n\ngoal (1 subgoal):\n 1. wellformed_tokens (p1 @ drop y p2)", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens (p1 @ drop y p2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "apply (simp add: x12)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (inc_item x1 k)", "apply (rule_tac wellformed_inc_item)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item x1\n 2. next_symbol x1 = Some ?s2\n 3. k \\<le> length Doc\n 4. item_end x1 \\<le> k", "apply (simp add: p1valid)"], ["proof (prove)\ngoal (3 subgoals):\n 1. next_symbol x1 = Some ?s2\n 2. k \\<le> length Doc\n 3. item_end x1 \\<le> k", "apply (simp add: x12)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k \\<le> length Doc\n 2. item_end x1 \\<le> k", "apply (simp add: k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x1 \\<le> k", "using charslength_p1_eq charslength_p1_leq"], ["proof (prove)\nusing this:\n  charslength p1 = item_end x1\n  charslength p1 \\<le> k\n\ngoal (1 subgoal):\n 1. item_end x1 \\<le> k", "by auto"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have charslength_p1_as_p2: \"charslength p1 = charslength (take y p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p1 = charslength (take y p2)", "using charslength_p1_eq item_end_x1 p2valid"], ["proof (prove)\nusing this:\n  charslength p1 = item_end x1\n  item_end x1 = item_origin x2\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. charslength p1 = charslength (take y p2)", "by linarith"], ["proof (state)\nthis:\n  charslength p1 = charslength (take y p2)\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  charslength p1 = charslength (take y p2)", "have charslength_r: \"charslength ?r = item_end x\""], ["proof (prove)\nusing this:\n  charslength p1 = charslength (take y p2)\n\ngoal (1 subgoal):\n 1. charslength (p1 @ drop y p2) = item_end x", "apply (simp add: x12)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p1) = length (chars (take y p2)) \\<Longrightarrow>\n    length (chars (take y p2)) + length (chars (drop y p2)) = k", "apply (subst length_append[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p1) = length (chars (take y p2)) \\<Longrightarrow>\n    length (chars (take y p2) @ chars (drop y p2)) = k", "apply (subst chars_append[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p1) = length (chars (take y p2)) \\<Longrightarrow>\n    length (chars (take y p2 @ drop y p2)) = k", "apply (subst append_take_drop_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p1) = length (chars (take y p2)) \\<Longrightarrow>\n    length (chars p2) = k", "using item_end_x2 p2valid"], ["proof (prove)\nusing this:\n  item_end x2 = k\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. length (chars p1) = length (chars (take y p2)) \\<Longrightarrow>\n    length (chars p2) = k", "by auto"], ["proof (state)\nthis:\n  charslength (p1 @ drop y p2) = item_end x\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have item_\\<alpha>_x: \"item_\\<alpha> x = item_\\<alpha> x1 @ [item_nonterminal x2]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> x = item_\\<alpha> x1 @ [item_nonterminal x2]", "using x12 p1valid"], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (1 subgoal):\n 1. item_\\<alpha> x = item_\\<alpha> x1 @ [item_nonterminal x2]", "by (simp add: item_\\<alpha>_of_inc_item)"], ["proof (state)\nthis:\n  item_\\<alpha> x = item_\\<alpha> x1 @ [item_nonterminal x2]\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from p2valid"], ["proof (chain)\npicking this:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))", "have derives_item_nonterminal_x2:\n      \"derives [item_nonterminal x2] (terminals (drop y p2))\""], ["proof (prove)\nusing this:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. derives [item_nonterminal x2] (terminals (drop y p2))", "using derives_trans wellformed_complete_item_derives x12"], ["proof (prove)\nusing this:\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n  \\<lbrakk>derives ?a ?b; derives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> derives ?a ?c\n  \\<lbrakk>wellformed_item ?x; is_complete ?x\\<rbrakk>\n  \\<Longrightarrow> derives [item_nonterminal ?x] (item_\\<alpha> ?x)\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n\ngoal (1 subgoal):\n 1. derives [item_nonterminal x2] (terminals (drop y p2))", "by blast"], ["proof (state)\nthis:\n  derives [item_nonterminal x2] (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"pvalid ?r x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid (p1 @ drop y p2) x", "apply (auto simp only: pvalid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u \\<gamma>.\n       wellformed_tokens (p1 @ drop y p2) \\<and>\n       wellformed_item x \\<and>\n       u \\<le> length (p1 @ drop y p2) \\<and>\n       charslength (p1 @ drop y p2) = item_end x \\<and>\n       charslength (take u (p1 @ drop y p2)) = item_origin x \\<and>\n       is_derivation\n        (terminals (take u (p1 @ drop y p2)) @\n         [item_nonterminal x] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x) (terminals (drop u (p1 @ drop y p2)))", "apply (rule_tac x=w in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       wellformed_tokens (p1 @ drop y p2) \\<and>\n       wellformed_item x \\<and>\n       w \\<le> length (p1 @ drop y p2) \\<and>\n       charslength (p1 @ drop y p2) = item_end x \\<and>\n       charslength (take w (p1 @ drop y p2)) = item_origin x \\<and>\n       is_derivation\n        (terminals (take w (p1 @ drop y p2)) @\n         [item_nonterminal x] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (rule_tac x=\\<delta> in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens (p1 @ drop y p2) \\<and>\n    wellformed_item x \\<and>\n    w \\<le> length (p1 @ drop y p2) \\<and>\n    charslength (p1 @ drop y p2) = item_end x \\<and>\n    charslength (take w (p1 @ drop y p2)) = item_origin x \\<and>\n    is_derivation\n     (terminals (take w (p1 @ drop y p2)) @\n      [item_nonterminal x] @ \\<delta>) \\<and>\n    derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (auto simp only:)"], ["proof (prove)\ngoal (7 subgoals):\n 1. wellformed_tokens (p1 @ drop y p2)\n 2. wellformed_item x\n 3. w \\<le> length (p1 @ drop y p2)\n 4. charslength (p1 @ drop y p2) = item_end x\n 5. charslength (take w (p1 @ drop y p2)) = item_origin x\n 6. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 7. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (simp add: wellformed_r)"], ["proof (prove)\ngoal (6 subgoals):\n 1. wellformed_item x\n 2. w \\<le> length (p1 @ drop y p2)\n 3. charslength (p1 @ drop y p2) = item_end x\n 4. charslength (take w (p1 @ drop y p2)) = item_origin x\n 5. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 6. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (simp add: wellformed_x)"], ["proof (prove)\ngoal (5 subgoals):\n 1. w \\<le> length (p1 @ drop y p2)\n 2. charslength (p1 @ drop y p2) = item_end x\n 3. charslength (take w (p1 @ drop y p2)) = item_origin x\n 4. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 5. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "using p1valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (5 subgoals):\n 1. w \\<le> length (p1 @ drop y p2)\n 2. charslength (p1 @ drop y p2) = item_end x\n 3. charslength (take w (p1 @ drop y p2)) = item_origin x\n 4. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 5. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. charslength (p1 @ drop y p2) = item_end x\n 2. charslength (take w (p1 @ drop y p2)) = item_origin x\n 3. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 4. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (simp only: charslength_r)"], ["proof (prove)\ngoal (3 subgoals):\n 1. charslength (take w (p1 @ drop y p2)) = item_origin x\n 2. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 3. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "using x12 p1valid"], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (3 subgoals):\n 1. charslength (take w (p1 @ drop y p2)) = item_origin x\n 2. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 3. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 2. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "using x12 p1valid"], ["proof (prove)\nusing this:\n  x = inc_item x1 k \\<and>\n  x1 \\<in> bin I (item_origin x2) \\<and>\n  x2 \\<in> bin I k \\<and>\n  is_complete x2 \\<and> next_symbol x1 = Some (item_nonterminal x2)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals (take w (p1 @ drop y p2)) @ [item_nonterminal x] @ \\<delta>)\n 2. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x) (terminals (drop w (p1 @ drop y p2)))", "apply (simp add:  item_\\<alpha>_x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x1 @ [item_nonterminal x2])\n     (drop w (terminals p1) @ drop (w - length p1 + y) (terminals p2))", "apply (rule_tac derives_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. derives (item_\\<alpha> x1) (drop w (terminals p1))\n 2. derives [item_nonterminal x2] (drop (w - length p1 + y) (terminals p2))\n 3. is_sentence (item_\\<alpha> x1)\n 4. is_sentence [item_nonterminal x2]", "using p1valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (4 subgoals):\n 1. derives (item_\\<alpha> x1) (drop w (terminals p1))\n 2. derives [item_nonterminal x2] (drop (w - length p1 + y) (terminals p2))\n 3. is_sentence (item_\\<alpha> x1)\n 4. is_sentence [item_nonterminal x2]", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. derives [item_nonterminal x2] (drop (w - length p1 + y) (terminals p2))\n 2. is_sentence (item_\\<alpha> x1)\n 3. is_sentence [item_nonterminal x2]", "using derives_item_nonterminal_x2 p1valid"], ["proof (prove)\nusing this:\n  derives [item_nonterminal x2] (terminals (drop y p2))\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (3 subgoals):\n 1. derives [item_nonterminal x2] (drop (w - length p1 + y) (terminals p2))\n 2. is_sentence (item_\\<alpha> x1)\n 3. is_sentence [item_nonterminal x2]", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_sentence (item_\\<alpha> x1)\n 2. is_sentence [item_nonterminal x2]", "using is_sentence_item_\\<alpha> p1valid"], ["proof (prove)\nusing this:\n  wellformed_item ?x \\<Longrightarrow> is_sentence (item_\\<alpha> ?x)\n  wellformed_tokens p1 \\<and>\n  wellformed_item x1 \\<and>\n  w \\<le> length p1 \\<and>\n  charslength p1 = item_end x1 \\<and>\n  charslength (take w p1) = item_origin x1 \\<and>\n  is_derivation\n   (terminals (take w p1) @ [item_nonterminal x1] @ \\<delta>) \\<and>\n  derives (item_\\<alpha> x1) (terminals (drop w p1))\n\ngoal (2 subgoals):\n 1. is_sentence (item_\\<alpha> x1)\n 2. is_sentence [item_nonterminal x2]", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence [item_nonterminal x2]", "using is_derivation_is_sentence is_sentence_concat p2valid"], ["proof (prove)\nusing this:\n  is_derivation ?s \\<Longrightarrow> is_sentence ?s\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  wellformed_tokens p2 \\<and>\n  wellformed_item x2 \\<and>\n  y \\<le> length p2 \\<and>\n  charslength p2 = item_end x2 \\<and>\n  charslength (take y p2) = item_origin x2 \\<and>\n  is_derivation\n   (terminals (take y p2) @ [item_nonterminal x2] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x2) (terminals (drop y p2))\n\ngoal (1 subgoal):\n 1. is_sentence [item_nonterminal x2]", "by blast"], ["proof (state)\nthis:\n  pvalid (p1 @ drop y p2) x\n\ngoal (1 subgoal):\n 1. \\<exists>x1 x2.\n       x = inc_item x1 k \\<and>\n       x1 \\<in> bin I (item_origin x2) \\<and>\n       x2 \\<in> bin I k \\<and>\n       is_complete x2 \\<and>\n       next_symbol x1 = Some (item_nonterminal x2) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "with r_in_dom"], ["proof (chain)\npicking this:\n  p1 @ drop y p2 \\<in> \\<P> k u\n  pvalid (p1 @ drop y p2) x", "show ?case"], ["proof (prove)\nusing this:\n  p1 @ drop y p2 \\<in> \\<P> k u\n  pvalid (p1 @ drop y p2) x\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "using Gen_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  p1 @ drop y p2 \\<in> \\<P> k u\n  pvalid (p1 @ drop y p2) x\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Complete_subset_Gen:\n  assumes I_in_Gen_P: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  shows \"Complete k I \\<subseteq> Gen (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete k I \\<subseteq> Gen (\\<P> k u)", "using Complete_elem_in_Gen I_in_Gen_P k"], ["proof (prove)\nusing this:\n  \\<lbrakk>?I \\<subseteq> Gen (\\<P> ?k ?u); ?k \\<le> length Doc;\n   ?x \\<in> Complete ?k ?I\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> Gen (\\<P> ?k ?u)\n  I \\<subseteq> Gen (\\<P> k u)\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. Complete k I \\<subseteq> Gen (\\<P> k u)", "by blast"], ["", "lemma \\<P>_are_admissible: \"p \\<in> \\<P> k u \\<Longrightarrow> admissible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<Longrightarrow> admissible p", "apply (rule_tac \\<PP>_are_admissible)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<Longrightarrow> p \\<in> \\<PP>", "using \\<PP>_covers_\\<P> subsetCE"], ["proof (prove)\nusing this:\n  \\<P> ?k ?u \\<subseteq> \\<PP>\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u \\<Longrightarrow> p \\<in> \\<PP>", "by blast"], ["", "lemma is_continuation_base:\n  assumes p_dom: \"p \\<in> \\<P> k u\"\n  assumes charslength_p: \"charslength p = k\"\n  shows \"is_continuation k u p []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k u p []", "apply (auto simp add: is_continuation_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. p \\<in> \\<P> k u\n 2. length (chars p) = k\n 3. admissible p", "apply (simp add: p_dom)"], ["proof (prove)\ngoal (2 subgoals):\n 1. length (chars p) = k\n 2. admissible p", "using charslength_p"], ["proof (prove)\nusing this:\n  charslength p = k\n\ngoal (2 subgoals):\n 1. length (chars p) = k\n 2. admissible p", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible p", "using \\<P>_are_admissible p_dom"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<P> ?k ?u \\<Longrightarrow> admissible ?p\n  p \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. admissible p", "by blast"], ["", "lemma is_continuation_empty_chars: \n  \"is_continuation k u q ts \\<Longrightarrow> charslength (q@ts) = k \\<Longrightarrow> chars ts = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_continuation k u q ts; charslength (q @ ts) = k\\<rbrakk>\n    \\<Longrightarrow> chars ts = []", "by (simp add: is_continuation_def)"], ["", "lemma \\<Z>_subset: \"u \\<le> v \\<Longrightarrow> \\<Z> k u \\<subseteq> \\<Z> k v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<le> v \\<Longrightarrow> \\<Z> k u \\<subseteq> \\<Z> k v", "using \\<Z>_subset_Suc subset_fSuc"], ["proof (prove)\nusing this:\n  \\<Z> ?k ?n \\<subseteq> \\<Z> ?k (Suc ?n)\n  \\<lbrakk>\\<And>u. ?f u \\<subseteq> ?f (Suc u); ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> ?f ?u \\<subseteq> ?f ?v\n\ngoal (1 subgoal):\n 1. u \\<le> v \\<Longrightarrow> \\<Z> k u \\<subseteq> \\<Z> k v", "by blast"], ["", "lemma is_continuation_increase_u:\n  assumes cont: \"is_continuation k u q ts\"\n  assumes uv: \"u \\<le> v\"\n  shows \"is_continuation k v q ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "have \"q \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k u", "using cont is_continuation_def"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "with uv"], ["proof (chain)\npicking this:\n  u \\<le> v\n  q \\<in> \\<P> k u", "have q_dom: \"q \\<in> \\<P> k v\""], ["proof (prove)\nusing this:\n  u \\<le> v\n  q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k v", "by (meson subsetCE subset_\\<P>k)"], ["proof (state)\nthis:\n  q \\<in> \\<P> k v\n\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "from uv"], ["proof (chain)\npicking this:\n  u \\<le> v", "have \\<Z>: \"\\<And> t. t \\<in> \\<Z> k (Suc u) \\<Longrightarrow> t \\<in> \\<Z> k (Suc v)\""], ["proof (prove)\nusing this:\n  u \\<le> v\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<in> \\<Z> k (Suc u) \\<Longrightarrow> t \\<in> \\<Z> k (Suc v)", "using \\<Z>_subset le_neq_implies_less less_imp_le_nat not_less_eq subsetCE"], ["proof (prove)\nusing this:\n  u \\<le> v\n  ?u \\<le> ?v \\<Longrightarrow> \\<Z> ?k ?u \\<subseteq> \\<Z> ?k ?v\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  ?m < ?n \\<Longrightarrow> ?m \\<le> ?n\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<in> \\<Z> k (Suc u) \\<Longrightarrow> t \\<in> \\<Z> k (Suc v)", "by blast"], ["proof (state)\nthis:\n  ?t \\<in> \\<Z> k (Suc u) \\<Longrightarrow> ?t \\<in> \\<Z> k (Suc v)\n\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k v q ts", "apply (auto simp only: is_continuation_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. q \\<in> \\<P> k v\n 2. charslength q = k\n 3. admissible (q @ ts)\n 4. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 5. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "apply (simp add: q_dom)"], ["proof (prove)\ngoal (4 subgoals):\n 1. charslength q = k\n 2. admissible (q @ ts)\n 3. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 4. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "using cont is_continuation_def"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (4 subgoals):\n 1. charslength q = k\n 2. admissible (q @ ts)\n 3. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 4. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. admissible (q @ ts)\n 2. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 3. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "using cont is_continuation_def"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (3 subgoals):\n 1. admissible (q @ ts)\n 2. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 3. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 2. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "using cont is_continuation_def \\<Z>"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n  ?t \\<in> \\<Z> k (Suc u) \\<Longrightarrow> ?t \\<in> \\<Z> k (Suc v)\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       (a, b) \\<in> set ts \\<Longrightarrow> (a, b) \\<in> \\<Z> k (Suc v)\n 2. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "using cont is_continuation_def"], ["proof (prove)\nusing this:\n  is_continuation k u q ts\n  is_continuation ?k ?u ?q ?ts =\n  (?q \\<in> \\<P> ?k ?u \\<and>\n   charslength ?q = ?k \\<and>\n   admissible (?q @ ?ts) \\<and>\n   (\\<forall>t\\<in>set ?ts. t \\<in> \\<Z> ?k (Suc ?u)) \\<and>\n   (\\<forall>t\\<in>set (butlast ?ts). chars_of_token t = []))\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       (a, b) \\<in> set (butlast ts) \\<Longrightarrow>\n       chars_of_token (a, b) = []", "apply (simp only:)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_continuation k v q ts\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pvalid_next_symbol_derivable:\n  assumes pvalid: \"pvalid p x\" \n  assumes next_symbol: \"next_symbol x = Some s\"\n  shows \"\\<exists> \\<delta>. is_derivation((terminals p)@[s]@\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "from pvalid pvalid_def"], ["proof (chain)\npicking this:\n  pvalid p x\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\nusing this:\n  pvalid p x\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by auto"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "from next_symbol_starts_item_\\<beta>[OF wellformed_x next_symbol]"], ["proof (chain)\npicking this:\n  \\<exists>\\<delta>. item_\\<beta> x = s # \\<delta>", "obtain \\<omega> where \\<omega>: \"item_\\<beta> x = [s] @ \\<omega>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<delta>. item_\\<beta> x = s # \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<omega>.\n        item_\\<beta> x = [s] @ \\<omega> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  item_\\<beta> x = [s] @ \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "from pvalid"], ["proof (chain)\npicking this:\n  pvalid p x", "have \"\\<exists> \\<gamma>. is_derivation((terminals p)@(item_\\<beta> x)@\\<gamma>)\""], ["proof (prove)\nusing this:\n  pvalid p x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "using pvalid_is_derivation_terminals_item_\\<beta>"], ["proof (prove)\nusing this:\n  pvalid p x\n  pvalid ?p ?x \\<Longrightarrow>\n  \\<exists>\\<delta>.\n     is_derivation (terminals ?p @ item_\\<beta> ?x @ \\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<gamma>. is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<gamma>. is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "obtain \\<gamma> where \"is_derivation((terminals p)@(item_\\<beta> x)@\\<gamma>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<gamma>. is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        is_derivation\n         (terminals p @ item_\\<beta> x @ \\<gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "with \\<omega>"], ["proof (chain)\npicking this:\n  item_\\<beta> x = [s] @ \\<omega>\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "have \"is_derivation((terminals p)@[s]@\\<omega>@\\<gamma>)\""], ["proof (prove)\nusing this:\n  item_\\<beta> x = [s] @ \\<omega>\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals p @ [s] @ \\<omega> @ \\<gamma>)", "by auto"], ["proof (state)\nthis:\n  is_derivation (terminals p @ [s] @ \\<omega> @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals p @ [s] @ \\<omega> @ \\<gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_derivation (terminals p @ [s] @ \\<omega> @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<delta>. is_derivation (terminals p @ [s] @ \\<delta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pvalid_admissible: \n  assumes pvalid: \"pvalid p x\" \n  shows \"admissible p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. admissible p", "have \"\\<exists> \\<delta>. is_derivation((terminals p)@(item_\\<beta> x)@\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "by (simp add: pvalid pvalid_is_derivation_terminals_item_\\<beta>)"], ["proof (state)\nthis:\n  \\<exists>\\<delta>. is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)\n\ngoal (1 subgoal):\n 1. admissible p", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<delta>. is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "obtain \\<delta> where \\<delta>: \"is_derivation((terminals p)@(item_\\<beta> x)@\\<delta>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<delta>. is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        is_derivation\n         (terminals p @ item_\\<beta> x @ \\<delta>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)\n\ngoal (1 subgoal):\n 1. admissible p", "have is_word: \"is_word (terminals p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word (terminals p)", "using pvalid_def is_word_terminals pvalid"], ["proof (prove)\nusing this:\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  wellformed_tokens ?p \\<Longrightarrow> is_word (terminals ?p)\n  pvalid p x\n\ngoal (1 subgoal):\n 1. is_word (terminals p)", "by blast"], ["proof (state)\nthis:\n  is_word (terminals p)\n\ngoal (1 subgoal):\n 1. admissible p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible p", "using \\<delta> is_derivation_implies_admissible is_word"], ["proof (prove)\nusing this:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)\n  \\<lbrakk>is_derivation (terminals ?p @ ?\\<delta>);\n   is_word (terminals ?p)\\<rbrakk>\n  \\<Longrightarrow> admissible ?p\n  is_word (terminals p)\n\ngoal (1 subgoal):\n 1. admissible p", "by blast"], ["proof (state)\nthis:\n  admissible p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pvalid_next_terminal_admissible:\n  assumes pvalid: \"pvalid p x\" \n  assumes next_symbol: \"next_symbol x = Some t\"\n  assumes terminal: \"is_terminal t\"\n  shows \"admissible (p@[(t, c)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "have \"is_word (terminals p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word (terminals p)", "using is_word_terminals pvalid pvalid_def"], ["proof (prove)\nusing this:\n  wellformed_tokens ?p \\<Longrightarrow> is_word (terminals ?p)\n  pvalid p x\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n\ngoal (1 subgoal):\n 1. is_word (terminals p)", "by blast"], ["proof (state)\nthis:\n  is_word (terminals p)\n\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "then"], ["proof (chain)\npicking this:\n  is_word (terminals p)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_word (terminals p)\n\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "using is_derivation_implies_admissible next_symbol pvalid pvalid_next_symbol_derivable \n      terminal"], ["proof (prove)\nusing this:\n  is_word (terminals p)\n  \\<lbrakk>is_derivation (terminals ?p @ ?\\<delta>);\n   is_word (terminals ?p)\\<rbrakk>\n  \\<Longrightarrow> admissible ?p\n  next_symbol x = Some t\n  pvalid p x\n  \\<lbrakk>pvalid ?p ?x; next_symbol ?x = Some ?s\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<delta>.\n                       is_derivation (terminals ?p @ [?s] @ \\<delta>)\n  is_terminal t\n\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "by fastforce"], ["proof (state)\nthis:\n  admissible (p @ [(t, c)])\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<X>_wellformed: \"t \\<in> \\<X> k \\<Longrightarrow> wellformed_token t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<X> k \\<Longrightarrow> wellformed_token t", "by (simp add: \\<X>_are_terminals wellformed_token_def)"], ["", "lemma \\<Z>_wellformed: \"t \\<in> \\<Z> k u \\<Longrightarrow> wellformed_token t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u \\<Longrightarrow> wellformed_token t", "using \\<X>_wellformed \\<Z>_subset_\\<X>"], ["proof (prove)\nusing this:\n  ?t \\<in> \\<X> ?k \\<Longrightarrow> wellformed_token ?t\n  \\<Z> ?k ?n \\<subseteq> \\<X> ?k\n\ngoal (1 subgoal):\n 1. t \\<in> \\<Z> k u \\<Longrightarrow> wellformed_token t", "by blast"], ["", "lemma Scan_elem_in_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  assumes x_in_Scan: \"x \\<in> Scan T k I\"\n  shows \"x \\<in> Gen (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "have \"u = 0 \\<Longrightarrow> x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "assume \"u = 0\""], ["proof (state)\nthis:\n  u = 0\n\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  u = 0", "have \"\\<Z> k u = {}\""], ["proof (prove)\nusing this:\n  u = 0\n\ngoal (1 subgoal):\n 1. \\<Z> k u = {}", "by simp"], ["proof (state)\nthis:\n  \\<Z> k u = {}\n\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<Z> k u = {}", "have \"T = {}\""], ["proof (prove)\nusing this:\n  \\<Z> k u = {}\n\ngoal (1 subgoal):\n 1. T = {}", "using T"], ["proof (prove)\nusing this:\n  \\<Z> k u = {}\n  T \\<subseteq> \\<Z> k u\n\ngoal (1 subgoal):\n 1. T = {}", "by blast"], ["proof (state)\nthis:\n  T = {}\n\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  T = {}", "have \"Scan T k I = I\""], ["proof (prove)\nusing this:\n  T = {}\n\ngoal (1 subgoal):\n 1. Scan T k I = I", "by (simp add: Scan_empty)"], ["proof (state)\nthis:\n  Scan T k I = I\n\ngoal (1 subgoal):\n 1. u = 0 \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  Scan T k I = I", "show \"x \\<in> I\""], ["proof (prove)\nusing this:\n  Scan T k I = I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "using x_in_Scan"], ["proof (prove)\nusing this:\n  Scan T k I = I\n  x \\<in> Scan T k I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "by simp"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u = 0 \\<Longrightarrow> x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  u = 0 \\<Longrightarrow> x \\<in> I", "have \"x \\<in> I \\<or> (u > 0 \\<and> (\\<exists> y t c. x = inc_item y (k + length c) \\<and> y \\<in> bin I k \\<and> \n    (t, c) \\<in> T \\<and> next_symbol y = Some t))\""], ["proof (prove)\nusing this:\n  u = 0 \\<Longrightarrow> x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> I \\<or>\n    0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)", "using x_in_Scan Scan_def"], ["proof (prove)\nusing this:\n  u = 0 \\<Longrightarrow> x \\<in> I\n  x \\<in> Scan T k I\n  Scan ?T ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x t c.\n      uu_ = inc_item x (?k + length c) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      (t, c) \\<in> ?T \\<and> next_symbol x = Some t}\n\ngoal (1 subgoal):\n 1. x \\<in> I \\<or>\n    0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)", "by auto"], ["proof (state)\nthis:\n  x \\<in> I \\<or>\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  x \\<in> I \\<or>\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> I \\<or>\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen (\\<P> k u)\n 2. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "case 1"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (2 subgoals):\n 1. x \\<in> I \\<Longrightarrow> x \\<in> Gen (\\<P> k u)\n 2. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "using I_in_Gen"], ["proof (prove)\nusing this:\n  x \\<in> I\n  I \\<subseteq> Gen (\\<P> k u)\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "case 2"], ["proof (state)\nthis:\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)", "obtain y t c where x_is_scan: \"x = inc_item y (k + length c) \\<and> y \\<in> bin I k \\<and> \n       (t, c) \\<in> T \\<and> next_symbol y = Some t\""], ["proof (prove)\nusing this:\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. (\\<And>y c t.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have u_gt_0: \"0 < u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < u", "using 2"], ["proof (prove)\nusing this:\n  0 < u \\<and>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. 0 < u", "by blast"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"\\<exists> p \\<in> \\<P> k u. pvalid p y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>\\<P> k u. pvalid p y", "using Gen_implies_pvalid I_in_Gen bin_elem x_is_scan"], ["proof (prove)\nusing this:\n  ?x \\<in> Gen ?P \\<Longrightarrow> \\<exists>p\\<in>?P. pvalid p ?x\n  I \\<subseteq> Gen (\\<P> k u)\n  ?x \\<in> bin ?I ?k \\<Longrightarrow> ?x \\<in> ?I\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>\\<P> k u. pvalid p y", "by blast"], ["proof (state)\nthis:\n  \\<exists>p\\<in>\\<P> k u. pvalid p y\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>\\<P> k u. pvalid p y", "obtain p where p: \"p \\<in> \\<P> k u \\<and> pvalid p y\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>\\<P> k u. pvalid p y\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> \\<P> k u \\<and> pvalid p y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have p_dom: \"p \\<in> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u", "using p"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from p pvalid_def x_is_scan"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t", "have charslength_p: \"charslength p = k\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. charslength p = k", "using bin_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. charslength p = k", "by auto"], ["proof (state)\nthis:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "obtain tok where tok: \"tok = (t, c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>tok. tok = (t, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using x_is_scan"], ["proof (prove)\nusing this:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. (\\<And>tok. tok = (t, c) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  tok = (t, c)\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have tok_dom: \"tok \\<in> \\<Z> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tok \\<in> \\<Z> k u", "using tok x_is_scan T"], ["proof (prove)\nusing this:\n  tok = (t, c)\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n  T \\<subseteq> \\<Z> k u\n\ngoal (1 subgoal):\n 1. tok \\<in> \\<Z> k u", "by blast"], ["proof (state)\nthis:\n  tok \\<in> \\<Z> k u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"p = [] \\<or> p \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<or> p \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  p = [] \\<or> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  p = [] \\<or> p \\<noteq> []", "have \"\\<exists> q ts u'. p = q@ts \\<and> u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\""], ["proof (prove)\nusing this:\n  p = [] \\<or> p \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "case 1"], ["proof (state)\nthis:\n  p = []\n\ngoal (2 subgoals):\n 1. p = [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "thus ?case"], ["proof (prove)\nusing this:\n  p = []\n\ngoal (1 subgoal):\n 1. \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply (rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow>\n    \\<exists>ts u'.\n       p = p @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' p ts", "apply (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow>\n    \\<exists>u'.\n       p = p @ [] \\<and>\n       u' < u \\<and> charslength [] = 0 \\<and> is_continuation k u' p []", "apply (rule_tac x=\"0\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow>\n    p = p @ [] \\<and>\n    0 < u \\<and> charslength [] = 0 \\<and> is_continuation k 0 p []", "apply (simp add: 2 is_continuation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow> k = 0", "using charslength_p"], ["proof (prove)\nusing this:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. p = [] \\<Longrightarrow> k = 0", "by simp"], ["proof (state)\nthis:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "case 2"], ["proof (state)\nthis:\n  p \\<noteq> []\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "from final_step_of_path[OF p_dom 2]"], ["proof (chain)\npicking this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "obtain q ts k' u'\n        where final_step: \"p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\""], ["proof (prove)\nusing this:\n  \\<exists>q ts k' u'.\n     p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. (\\<And>q ts k' u'.\n        p = q @ ts \\<and>\n        indexlt k' u' k u \\<and>\n        is_continuation k' u' q ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts", "have \"k' \\<le> k\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n\ngoal (1 subgoal):\n 1. k' \\<le> k", "using indexlt_simp"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. k' \\<le> k", "by auto"], ["proof (state)\nthis:\n  k' \\<le> k\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  k' \\<le> k", "have \"k' < k \\<or> k' = k\""], ["proof (prove)\nusing this:\n  k' \\<le> k\n\ngoal (1 subgoal):\n 1. k' < k \\<or> k' = k", "by arith"], ["proof (state)\nthis:\n  k' < k \\<or> k' = k\n\ngoal (1 subgoal):\n 1. p \\<noteq> [] \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  k' < k \\<or> k' = k", "show ?case"], ["proof (prove)\nusing this:\n  k' < k \\<or> k' = k\n\ngoal (1 subgoal):\n 1. \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "case 1"], ["proof (state)\nthis:\n  k' < k\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "have \"p \\<in> \\<P> k' (Suc u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k' (Suc u')", "using final_step is_continuation_in_\\<P>"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  is_continuation ?k ?u ?p ?ts \\<Longrightarrow>\n  ?p @ ?ts \\<in> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k' (Suc u')", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k' (Suc u')\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k' (Suc u')", "have p_dom: \"p \\<in> \\<P> k 0\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k' (Suc u')\n\ngoal (1 subgoal):\n 1. p \\<in> \\<P> k 0", "by (meson 1 subsetCE subset_\\<P>)"], ["proof (state)\nthis:\n  p \\<in> \\<P> k 0\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "with charslength_p"], ["proof (chain)\npicking this:\n  charslength p = k\n  p \\<in> \\<P> k 0", "have \"is_continuation k 0 p []\""], ["proof (prove)\nusing this:\n  charslength p = k\n  p \\<in> \\<P> k 0\n\ngoal (1 subgoal):\n 1. is_continuation k 0 p []", "using is_continuation_base"], ["proof (prove)\nusing this:\n  charslength p = k\n  p \\<in> \\<P> k 0\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; charslength ?p = ?k\\<rbrakk>\n  \\<Longrightarrow> is_continuation ?k ?u ?p []\n\ngoal (1 subgoal):\n 1. is_continuation k 0 p []", "by blast"], ["proof (state)\nthis:\n  is_continuation k 0 p []\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n 2. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  is_continuation k 0 p []", "show ?case"], ["proof (prove)\nusing this:\n  is_continuation k 0 p []\n\ngoal (1 subgoal):\n 1. \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply (rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k 0 p [] \\<Longrightarrow>\n    \\<exists>ts u'.\n       p = p @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' p ts", "apply (rule_tac x=\"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k 0 p [] \\<Longrightarrow>\n    \\<exists>u'.\n       p = p @ [] \\<and>\n       u' < u \\<and> charslength [] = 0 \\<and> is_continuation k u' p []", "apply (rule_tac x=\"0\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k 0 p [] \\<Longrightarrow>\n    p = p @ [] \\<and>\n    0 < u \\<and> charslength [] = 0 \\<and> is_continuation k 0 p []", "apply (simp add: u_gt_0)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "case 2"], ["proof (state)\nthis:\n  k' = k\n\ngoal (1 subgoal):\n 1. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "with final_step indexlt_simp"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n  k' = k", "have \"u' < u\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n  k' = k\n\ngoal (1 subgoal):\n 1. u' < u", "by auto"], ["proof (state)\nthis:\n  u' < u\n\ngoal (1 subgoal):\n 1. k' = k \\<Longrightarrow>\n    \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "then"], ["proof (chain)\npicking this:\n  u' < u", "show ?case"], ["proof (prove)\nusing this:\n  u' < u\n\ngoal (1 subgoal):\n 1. \\<exists>q ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply (rule_tac x=q in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u' < u \\<Longrightarrow>\n    \\<exists>ts u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply (rule_tac x=ts in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u' < u \\<Longrightarrow>\n    \\<exists>u'.\n       p = q @ ts \\<and>\n       u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply (rule_tac x=u' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u' < u \\<Longrightarrow>\n    p = q @ ts \\<and>\n    u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "using final_step 2"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and> indexlt k' u' k u \\<and> is_continuation k' u' q ts\n  k' = k\n\ngoal (1 subgoal):\n 1. u' < u \\<Longrightarrow>\n    p = q @ ts \\<and>\n    u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u' < u; k' = k; p = q @ ts; indexlt k u' k u;\n     is_continuation k u' q ts\\<rbrakk>\n    \\<Longrightarrow> chars ts = []", "using charslength_p is_continuation_empty_chars"], ["proof (prove)\nusing this:\n  charslength p = k\n  \\<lbrakk>is_continuation ?k ?u ?q ?ts;\n   charslength (?q @ ?ts) = ?k\\<rbrakk>\n  \\<Longrightarrow> chars ?ts = []\n\ngoal (1 subgoal):\n 1. \\<lbrakk>u' < u; k' = k; p = q @ ts; indexlt k u' k u;\n     is_continuation k u' q ts\\<rbrakk>\n    \\<Longrightarrow> chars ts = []", "by blast"], ["proof (state)\nthis:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "obtain q ts u' where \n      p_split: \"p = q@ts \\<and> u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\""], ["proof (prove)\nusing this:\n  \\<exists>q ts u'.\n     p = q @ ts \\<and>\n     u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. (\\<And>q ts u'.\n        p = q @ ts \\<and>\n        u' < u \\<and>\n        charslength ts = 0 \\<and>\n        is_continuation k u' q ts \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts", "have \"\\<exists> u''. u' \\<le> u'' \\<and> Suc u'' = u\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. \\<exists>u''\\<ge>u'. Suc u'' = u", "by (auto, arith)"], ["proof (state)\nthis:\n  \\<exists>u''\\<ge>u'. Suc u'' = u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "then"], ["proof (chain)\npicking this:\n  \\<exists>u''\\<ge>u'. Suc u'' = u", "obtain u'' where u'': \" u' \\<le> u'' \\<and> Suc u'' = u\""], ["proof (prove)\nusing this:\n  \\<exists>u''\\<ge>u'. Suc u'' = u\n\ngoal (1 subgoal):\n 1. (\\<And>u''.\n        u' \\<le> u'' \\<and> Suc u'' = u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u' \\<le> u'' \\<and> Suc u'' = u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "with p_split"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u", "have cont_u'': \"is_continuation k u'' q ts\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u\n\ngoal (1 subgoal):\n 1. is_continuation k u'' q ts", "using is_continuation_increase_u"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u\n  \\<lbrakk>is_continuation ?k ?u ?q ?ts; ?u \\<le> ?v\\<rbrakk>\n  \\<Longrightarrow> is_continuation ?k ?v ?q ?ts\n\ngoal (1 subgoal):\n 1. is_continuation k u'' q ts", "by blast"], ["proof (state)\nthis:\n  is_continuation k u'' q ts\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have admissible: \"admissible (p@[tok])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p @ [tok])", "apply (simp add: tok)"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p @ [(t, c)])", "apply (rule_tac pvalid_next_terminal_admissible[where x=y])"], ["proof (prove)\ngoal (3 subgoals):\n 1. pvalid p y\n 2. next_symbol y = Some t\n 3. is_terminal t", "apply (simp add: p)"], ["proof (prove)\ngoal (2 subgoals):\n 1. next_symbol y = Some t\n 2. is_terminal t", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal t", "using \\<Z>_wellformed tok tok_dom wellformed_token_def"], ["proof (prove)\nusing this:\n  ?t \\<in> \\<Z> ?k ?u \\<Longrightarrow> wellformed_token ?t\n  tok = (t, c)\n  tok \\<in> \\<Z> k u\n  wellformed_token ?t = is_terminal (terminal_of_token ?t)\n\ngoal (1 subgoal):\n 1. is_terminal t", "by auto"], ["proof (state)\nthis:\n  admissible (p @ [tok])\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"is_continuation k u'' q (ts@[tok])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_continuation k u'' q (ts @ [tok])", "apply (rule is_continuation_continue)"], ["proof (prove)\ngoal (4 subgoals):\n 1. is_continuation k u'' q ts\n 2. charslength ts = 0\n 3. tok \\<in> \\<Z> k (Suc u'')\n 4. admissible (q @ ts @ [tok])", "apply (simp add: cont_u'')"], ["proof (prove)\ngoal (3 subgoals):\n 1. charslength ts = 0\n 2. tok \\<in> \\<Z> k (Suc u'')\n 3. admissible (q @ ts @ [tok])", "using p_split"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (3 subgoals):\n 1. charslength ts = 0\n 2. tok \\<in> \\<Z> k (Suc u'')\n 3. admissible (q @ ts @ [tok])", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. tok \\<in> \\<Z> k (Suc u'')\n 2. admissible (q @ ts @ [tok])", "using u'' tok_dom"], ["proof (prove)\nusing this:\n  u' \\<le> u'' \\<and> Suc u'' = u\n  tok \\<in> \\<Z> k u\n\ngoal (2 subgoals):\n 1. tok \\<in> \\<Z> k (Suc u'')\n 2. admissible (q @ ts @ [tok])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (q @ ts @ [tok])", "using admissible p_split"], ["proof (prove)\nusing this:\n  admissible (p @ [tok])\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n\ngoal (1 subgoal):\n 1. admissible (q @ ts @ [tok])", "by auto"], ["proof (state)\nthis:\n  is_continuation k u'' q (ts @ [tok])\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "with p_split u''"], ["proof (chain)\npicking this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u\n  is_continuation k u'' q (ts @ [tok])", "have ptok_dom: \"p@[tok] \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u\n  is_continuation k u'' q (ts @ [tok])\n\ngoal (1 subgoal):\n 1. p @ [tok] \\<in> \\<P> k u", "using append_assoc is_continuation_in_\\<P>"], ["proof (prove)\nusing this:\n  p = q @ ts \\<and>\n  u' < u \\<and> charslength ts = 0 \\<and> is_continuation k u' q ts\n  u' \\<le> u'' \\<and> Suc u'' = u\n  is_continuation k u'' q (ts @ [tok])\n  (?xs @ ?ys) @ ?zs = ?xs @ ?ys @ ?zs\n  is_continuation ?k ?u ?p ?ts \\<Longrightarrow>\n  ?p @ ?ts \\<in> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. p @ [tok] \\<in> \\<P> k u", "by auto"], ["proof (state)\nthis:\n  p @ [tok] \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from p"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k u \\<and> pvalid p y", "obtain i \\<gamma> where valid:\n      \"wellformed_tokens p \\<and>\n       wellformed_item y \\<and>\n       i \\<le> length p \\<and>\n       charslength p = item_end y \\<and>\n       charslength (take i p) = item_origin y \\<and>\n       is_derivation (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> y) (terminals (drop i p))\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. (\\<And>i \\<gamma>.\n        wellformed_tokens p \\<and>\n        wellformed_item y \\<and>\n        i \\<le> length p \\<and>\n        charslength p = item_end y \\<and>\n        charslength (take i p) = item_origin y \\<and>\n        is_derivation\n         (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> y) (terminals (drop i p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using pvalid_def"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k u \\<and> pvalid p y\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n\ngoal (1 subgoal):\n 1. (\\<And>i \\<gamma>.\n        wellformed_tokens p \\<and>\n        wellformed_item y \\<and>\n        i \\<le> length p \\<and>\n        charslength p = item_end y \\<and>\n        charslength (take i p) = item_origin y \\<and>\n        is_derivation\n         (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> y) (terminals (drop i p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have clen_ptok: \"k + length c = charslength (p@[tok])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k + length c = charslength (p @ [tok])", "using charslength_p tok"], ["proof (prove)\nusing this:\n  charslength p = k\n  tok = (t, c)\n\ngoal (1 subgoal):\n 1. k + length c = charslength (p @ [tok])", "by simp"], ["proof (state)\nthis:\n  k + length c = charslength (p @ [tok])\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "from ptok_dom"], ["proof (chain)\npicking this:\n  p @ [tok] \\<in> \\<P> k u", "have ptok_doc_tokens: \"doc_tokens (p@[tok])\""], ["proof (prove)\nusing this:\n  p @ [tok] \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. doc_tokens (p @ [tok])", "using \\<PP>_are_doc_tokens \\<PP>_covers_\\<P> rev_subsetD"], ["proof (prove)\nusing this:\n  p @ [tok] \\<in> \\<P> k u\n  ?p \\<in> \\<PP> \\<Longrightarrow> doc_tokens ?p\n  \\<P> ?k ?u \\<subseteq> \\<PP>\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. doc_tokens (p @ [tok])", "by blast"], ["proof (state)\nthis:\n  doc_tokens (p @ [tok])\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (inc_item y (k + length c))", "apply (rule_tac wellformed_inc_item)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item y\n 2. next_symbol y = Some ?s2\n 3. k + length c \\<le> length Doc\n 4. item_end y \\<le> k + length c", "apply (simp add: valid)"], ["proof (prove)\ngoal (3 subgoals):\n 1. next_symbol y = Some ?s2\n 2. k + length c \\<le> length Doc\n 3. item_end y \\<le> k + length c", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (2 subgoals):\n 1. k + length c \\<le> length Doc\n 2. item_end y \\<le> k + length c", "apply (simp only: clen_ptok)"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength (p @ [tok]) \\<le> length Doc\n 2. item_end y \\<le> k + length c", "using ptok_doc_tokens charslength.simps doc_tokens_length"], ["proof (prove)\nusing this:\n  doc_tokens (p @ [tok])\n  charslength ?cs = length (chars ?cs)\n  doc_tokens ?p \\<Longrightarrow> length (chars ?p) \\<le> length Doc\n\ngoal (2 subgoals):\n 1. charslength (p @ [tok]) \\<le> length Doc\n 2. item_end y \\<le> k + length c", "apply presburger"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end y \\<le> k + length c", "apply (simp only: clen_ptok)"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end y \\<le> charslength (p @ [tok])", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (1 subgoal):\n 1. item_end y \\<le> charslength (p @ [tok])", "by auto"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "have \"pvalid (p@[tok]) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid (p @ [tok]) x", "apply (auto simp only: pvalid_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u \\<gamma>.\n       wellformed_tokens (p @ [tok]) \\<and>\n       wellformed_item x \\<and>\n       u \\<le> length (p @ [tok]) \\<and>\n       charslength (p @ [tok]) = item_end x \\<and>\n       charslength (take u (p @ [tok])) = item_origin x \\<and>\n       is_derivation\n        (terminals (take u (p @ [tok])) @\n         [item_nonterminal x] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x) (terminals (drop u (p @ [tok])))", "apply (rule_tac x=i in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       wellformed_tokens (p @ [tok]) \\<and>\n       wellformed_item x \\<and>\n       i \\<le> length (p @ [tok]) \\<and>\n       charslength (p @ [tok]) = item_end x \\<and>\n       charslength (take i (p @ [tok])) = item_origin x \\<and>\n       is_derivation\n        (terminals (take i (p @ [tok])) @\n         [item_nonterminal x] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (rule_tac x=\\<gamma> in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens (p @ [tok]) \\<and>\n    wellformed_item x \\<and>\n    i \\<le> length (p @ [tok]) \\<and>\n    charslength (p @ [tok]) = item_end x \\<and>\n    charslength (take i (p @ [tok])) = item_origin x \\<and>\n    is_derivation\n     (terminals (take i (p @ [tok])) @\n      [item_nonterminal x] @ \\<gamma>) \\<and>\n    derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (auto simp only:)"], ["proof (prove)\ngoal (7 subgoals):\n 1. wellformed_tokens (p @ [tok])\n 2. wellformed_item x\n 3. i \\<le> length (p @ [tok])\n 4. charslength (p @ [tok]) = item_end x\n 5. charslength (take i (p @ [tok])) = item_origin x\n 6. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 7. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "using ptok_dom admissible admissible_wellformed_tokens"], ["proof (prove)\nusing this:\n  p @ [tok] \\<in> \\<P> k u\n  admissible (p @ [tok])\n  admissible ?p \\<Longrightarrow> wellformed_tokens ?p\n\ngoal (7 subgoals):\n 1. wellformed_tokens (p @ [tok])\n 2. wellformed_item x\n 3. i \\<le> length (p @ [tok])\n 4. charslength (p @ [tok]) = item_end x\n 5. charslength (take i (p @ [tok])) = item_origin x\n 6. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 7. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply blast"], ["proof (prove)\ngoal (6 subgoals):\n 1. wellformed_item x\n 2. i \\<le> length (p @ [tok])\n 3. charslength (p @ [tok]) = item_end x\n 4. charslength (take i (p @ [tok])) = item_origin x\n 5. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 6. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (simp add: wellformed_x)"], ["proof (prove)\ngoal (5 subgoals):\n 1. i \\<le> length (p @ [tok])\n 2. charslength (p @ [tok]) = item_end x\n 3. charslength (take i (p @ [tok])) = item_origin x\n 4. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 5. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (5 subgoals):\n 1. i \\<le> length (p @ [tok])\n 2. charslength (p @ [tok]) = item_end x\n 3. charslength (take i (p @ [tok])) = item_origin x\n 4. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 5. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. charslength (p @ [tok]) = item_end x\n 2. charslength (take i (p @ [tok])) = item_origin x\n 3. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 4. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (simp add: x_is_scan clen_ptok)"], ["proof (prove)\ngoal (3 subgoals):\n 1. charslength (take i (p @ [tok])) = item_origin x\n 2. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 3. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (3 subgoals):\n 1. charslength (take i (p @ [tok])) = item_origin x\n 2. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 3. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 2. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (2 subgoals):\n 1. is_derivation\n     (terminals (take i (p @ [tok])) @ [item_nonterminal x] @ \\<gamma>)\n 2. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x) (terminals (drop i (p @ [tok])))", "apply (simp add: x_is_scan)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> (inc_item y (k + length c)))\n     (drop i (terminals p) @ [terminal_of_token tok])", "apply (subst item_\\<alpha>_of_inc_item)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    wellformed_item y\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    next_symbol y = Some ?s22\n 3. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y @ [?s22])\n     (drop i (terminals p) @ [terminal_of_token tok])", "using valid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  i \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take i p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take i p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop i p))\n\ngoal (3 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    wellformed_item y\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    next_symbol y = Some ?s22\n 3. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y @ [?s22])\n     (drop i (terminals p) @ [terminal_of_token tok])", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    next_symbol y = Some ?s22\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y @ [?s22])\n     (drop i (terminals p) @ [terminal_of_token tok])", "using x_is_scan"], ["proof (prove)\nusing this:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin I k \\<and> (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (2 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    next_symbol y = Some ?s22\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y @ [?s22])\n     (drop i (terminals p) @ [terminal_of_token tok])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y @ [t])\n     (drop i (terminals p) @ [terminal_of_token tok])", "apply (rule_tac derives_append)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives (item_\\<alpha> y) (drop i (terminals p))\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives [t] [terminal_of_token tok]\n 3. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence (item_\\<alpha> y)\n 4. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence [t]", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    derives [t] [terminal_of_token tok]\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence (item_\\<alpha> y)\n 3. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence [t]", "apply (simp add: tok)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence (item_\\<alpha> y)\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence [t]", "using is_sentence_item_\\<alpha>"], ["proof (prove)\nusing this:\n  wellformed_item ?x \\<Longrightarrow> is_sentence (item_\\<alpha> ?x)\n\ngoal (2 subgoals):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence (item_\\<alpha> y)\n 2. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence [t]", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens p \\<and>\n    wellformed_item y \\<and>\n    i \\<le> length p \\<and>\n    length (chars p) = item_end y \\<and>\n    length (chars (take i p)) = item_origin y \\<and>\n    is_derivation\n     (take i (terminals p) @ item_nonterminal y # \\<gamma>) \\<and>\n    derives (item_\\<alpha> y) (drop i (terminals p)) \\<Longrightarrow>\n    is_sentence [t]", "by (meson pvalid_next_symbol_derivable LocalLexing_axioms is_derivation_is_sentence \n          is_sentence_concat p x_is_scan)"], ["proof (state)\nthis:\n  pvalid (p @ [tok]) x\n\ngoal (1 subgoal):\n 1. 0 < u \\<and>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin I k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t) \\<Longrightarrow>\n    x \\<in> Gen (\\<P> k u)", "with ptok_dom"], ["proof (chain)\npicking this:\n  p @ [tok] \\<in> \\<P> k u\n  pvalid (p @ [tok]) x", "show ?thesis"], ["proof (prove)\nusing this:\n  p @ [tok] \\<in> \\<P> k u\n  pvalid (p @ [tok]) x\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "using Gen_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  p @ [tok] \\<in> \\<P> k u\n  pvalid (p @ [tok]) x\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (\\<P> k u)", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> Gen (\\<P> k u)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Scan_subset_Gen:\n  assumes I_in_Gen: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  shows \"Scan T k I \\<subseteq> Gen (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k I \\<subseteq> Gen (\\<P> k u)", "using I_in_Gen Scan_elem_in_Gen T k"], ["proof (prove)\nusing this:\n  I \\<subseteq> Gen (\\<P> k u)\n  \\<lbrakk>?I \\<subseteq> Gen (\\<P> ?k ?u); ?k \\<le> length Doc;\n   ?T \\<subseteq> \\<Z> ?k ?u; ?x \\<in> Scan ?T ?k ?I\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> Gen (\\<P> ?k ?u)\n  T \\<subseteq> \\<Z> k u\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. Scan T k I \\<subseteq> Gen (\\<P> k u)", "by blast"], ["", "theorem thmD5:\n  assumes I: \"I \\<subseteq> Gen (\\<P> k u)\"\n  assumes k: \"k \\<le> length Doc\"\n  assumes T: \"T \\<subseteq> \\<Z> k u\"\n  shows \"\\<pi> k T I \\<subseteq> Gen (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k T I \\<subseteq> Gen (\\<P> k u)", "apply (simp add: \\<pi>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit (\\<lambda>I. Scan T k (Complete k (Predict k I))) I\n    \\<subseteq> Gen (\\<P> k u)", "apply (rule_tac limit_upperbound)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>I.\n       I \\<subseteq> Gen (\\<P> k u) \\<Longrightarrow>\n       Scan T k (Complete k (Predict k I)) \\<subseteq> Gen (\\<P> k u)\n 2. I \\<subseteq> Gen (\\<P> k u)", "using I k T Predict_subset_Gen Complete_subset_Gen Scan_subset_Gen"], ["proof (prove)\nusing this:\n  I \\<subseteq> Gen (\\<P> k u)\n  k \\<le> length Doc\n  T \\<subseteq> \\<Z> k u\n  \\<lbrakk>?I \\<subseteq> Gen ?P; ?k \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> Predict ?k ?I \\<subseteq> Gen ?P\n  \\<lbrakk>?I \\<subseteq> Gen (\\<P> ?k ?u); ?k \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> Complete ?k ?I \\<subseteq> Gen (\\<P> ?k ?u)\n  \\<lbrakk>?I \\<subseteq> Gen (\\<P> ?k ?u); ?k \\<le> length Doc;\n   ?T \\<subseteq> \\<Z> ?k ?u\\<rbrakk>\n  \\<Longrightarrow> Scan ?T ?k ?I \\<subseteq> Gen (\\<P> ?k ?u)\n\ngoal (2 subgoals):\n 1. \\<And>I.\n       I \\<subseteq> Gen (\\<P> k u) \\<Longrightarrow>\n       Scan T k (Complete k (Predict k I)) \\<subseteq> Gen (\\<P> k u)\n 2. I \\<subseteq> Gen (\\<P> k u)", "apply metis"], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (\\<P> k u)", "by (simp add: I)"], ["", "end"], ["", "end"]]}