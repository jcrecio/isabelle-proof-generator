{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/Derivations.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma [simp]: \"is_terminal t \\<Longrightarrow> is_symbol t\"", "lemma [simp]: \"is_sentence []\"", "lemma [simp]: \"is_word []\"", "lemma [simp]: \"is_word u \\<Longrightarrow> is_sentence u\"", "lemma leftderives1_implies_derives1[simp]: \"leftderives1 u v \\<Longrightarrow> derives1 u v\"", "lemma [simp]: \"leftderivations1 \\<subseteq> derivations1\"", "lemma rtrancl_subset_implies: \"a \\<subseteq> b \\<Longrightarrow> a \\<subseteq> b^*\"", "lemma leftderivations_subset_derivations[simp]: \"leftderivations \\<subseteq> derivations\"", "lemma leftderives_implies_derives[simp]: \"leftderives u v \\<Longrightarrow> derives u v\"", "lemma leftderivation_implies_derivation[simp]: \n  \"is_leftderivation u \\<Longrightarrow> is_derivation u\"", "lemma leftderives_refl[simp]: \"leftderives u u\"", "lemma leftderives1_implies_leftderives[simp]:\"leftderives1 a b \\<Longrightarrow> leftderives a b\"", "lemma leftderives_trans: \"leftderives a b \\<Longrightarrow> leftderives b c \\<Longrightarrow> leftderives a c\"", "lemma leftderives1_eq_leftderivations1: \"leftderives1 x y = ((x, y) \\<in> leftderivations1)\"", "lemma leftderives_induct[consumes 1, case_names Base Step]:\n  assumes derives: \"leftderives a b\"\n  assumes Pa: \"P a\"\n  assumes induct: \"\\<And>y z. leftderives a y \\<Longrightarrow> leftderives1 y z \\<Longrightarrow> P y \\<Longrightarrow> P z\"\n  shows \"P b\"", "lemma derives1_implies_derives[simp]:\"derives1 a b \\<Longrightarrow> derives a b\"", "lemma derives_trans: \"derives a b \\<Longrightarrow> derives b c \\<Longrightarrow> derives a c\"", "lemma derives1_eq_derivations1: \"derives1 x y = ((x, y) \\<in> derivations1)\"", "lemma derives_induct[consumes 1, case_names Base Step]:\n  assumes derives: \"derives a b\"\n  assumes Pa: \"P a\"\n  assumes induct: \"\\<And>y z. derives a y \\<Longrightarrow> derives1 y z \\<Longrightarrow> P y \\<Longrightarrow> P z\"\n  shows \"P b\"", "lemma Derives1_split:\n  \"Derives1 u i r v \\<Longrightarrow> \\<exists> x y. u = x @ [fst r] @ y \\<and> v = x @ (snd r) @ y \\<and> length x = i\"", "lemma Derives1_implies_derives1: \"Derives1 u i r v \\<Longrightarrow> derives1 u v\"", "lemma derives1_implies_Derives1: \"derives1 u v \\<Longrightarrow> \\<exists> i r. Derives1 u i r v\"", "lemma Derives1_unique_dest: \"Derives1 u i r v \\<Longrightarrow> Derives1 u i r w \\<Longrightarrow> v = w\"", "lemma Derives1_unique_src: \"Derives1 u i r w \\<Longrightarrow> Derives1 v i r w \\<Longrightarrow> u = v\"", "lemma Derivation_implies_derives: \"Derivation a D b \\<Longrightarrow> derives a b\"", "lemma Derivation_Derives1: \"Derivation a S y \\<Longrightarrow> Derives1 y i r z \\<Longrightarrow> Derivation a (S@[(i,r)]) z\"", "lemma derives_implies_Derivation: \"derives a b \\<Longrightarrow> \\<exists> D. Derivation a D b\"", "lemma Derives1_take: \"Derives1 a i r b \\<Longrightarrow> take i a = take i b\"", "lemma Derives1_drop: \"Derives1 a i r b \\<Longrightarrow> drop (Suc i) a = drop (i + length (snd r)) b\"", "lemma Derives1_bound: \"Derives1 a i r b \\<Longrightarrow> i < length a\"", "lemma Derives1_length: \"Derives1 a i r b \\<Longrightarrow> length b = length a + length (snd r) - 1\"", "lemma set_take: \"set (take n s) = { s ! i | i. i < n \\<and> i < length s}\"", "lemma list_all_take: \"list_all P (take n s) = (\\<forall> i. i < n \\<and> i < length s \\<longrightarrow> P (s ! i))\"", "lemma is_sentence_concat: \"is_sentence (x@y) = (is_sentence x \\<and> is_sentence y)\"", "lemma is_sentence_cons: \"is_sentence (x#xs) = (is_symbol x \\<and> is_sentence xs)\"", "lemma rule_nonterminal_type[simp]: \"(N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_nonterminal N\"", "lemma rule_\\<alpha>_type[simp]: \"(N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_sentence \\<alpha>\"", "lemma [simp]: \"is_nonterminal N \\<Longrightarrow> is_symbol N\"", "lemma Derives1_sentence1[elim]: \"Derives1 a i r b \\<Longrightarrow> is_sentence a\"", "lemma Derives1_sentence2[elim]: \"Derives1 a i r b \\<Longrightarrow> is_sentence b\"", "lemma [elim]: \"Derives1 a i r b \\<Longrightarrow> r \\<in> \\<RR>\"", "lemma is_sentence_symbol: \"is_sentence a \\<Longrightarrow> i < length a \\<Longrightarrow> is_symbol (a ! i)\"", "lemma is_symbol_distinct: \"is_symbol x \\<Longrightarrow> is_terminal x \\<noteq> is_nonterminal x\"", "lemma is_terminal_nonterminal: \"is_terminal x \\<Longrightarrow> is_nonterminal x \\<Longrightarrow> False\"", "lemma Derives1_leftmost:\n  assumes \"Derives1 a i r b\"\n  shows \"\\<exists> j. leftmost j a \\<and> j \\<le> i\"", "lemma Derivation_leftmost: \"D \\<noteq> [] \\<Longrightarrow> Derivation a D b \\<Longrightarrow> \\<exists> i. leftmost i a\"", "lemma nonword_has_nonterminal:\n  \"is_sentence a \\<Longrightarrow>  \\<not> (is_word a) \\<Longrightarrow> \\<exists> k. k < length a \\<and> is_nonterminal (a ! k)\"", "lemma leftmost_cons_nonterminal: \n  \"is_nonterminal x \\<Longrightarrow> leftmost 0 (x#xs)\"", "lemma leftmost_cons_terminal: \n  \"is_terminal x \\<Longrightarrow> leftmost i (x#xs) = (i > 0 \\<and> leftmost (i - 1) xs)\"", "lemma is_nonterminal_cons_terminal: \n  \"is_terminal x \\<Longrightarrow> k < length (x # a) \\<Longrightarrow> is_nonterminal ((x # a) ! k) \\<Longrightarrow>\n   k > 0 \\<and> k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))\"", "lemma leftmost_exists:\n  \"is_sentence a \\<Longrightarrow> k < length a \\<Longrightarrow> is_nonterminal (a ! k) \\<Longrightarrow> \n   \\<exists> i. leftmost i a \\<and> i \\<le> k\"", "lemma nonword_leftmost_exists: \n  \"is_sentence a \\<Longrightarrow> \\<not> (is_word a) \\<Longrightarrow> \\<exists> i. leftmost i a\"", "lemma leftmost_unaffected_Derives1: \"leftmost j a \\<Longrightarrow> j < i \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> leftmost j b\"", "lemma derivation_ge_cons: \"derivation_ge (d#D) i = (fst d \\<ge> i \\<and> derivation_ge D i)\"", "lemma derivation_ge_append: \n  \"derivation_ge (D@E) i = (derivation_ge D i \\<and> derivation_ge E i)\"", "lemma leftmost_unaffected_Derivation: \n  \"derivation_ge D (Suc i) \\<Longrightarrow> leftmost i a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> leftmost i b\"", "lemma le_Derives1_take: \n  assumes le: \"i \\<le> j\" \n  and D: \"Derives1 a j r b\"\n  shows \"take i a = take i b\"", "lemma Derivation_take: \"derivation_ge D i \\<Longrightarrow> Derivation a D b \\<Longrightarrow> take i a = take i b\"", "lemma leftmost_cons_less: \"i < length u \\<Longrightarrow> leftmost i (u@v) = leftmost i u\"", "lemma leftmost_is_nonterminal: \"leftmost i u \\<Longrightarrow> is_nonterminal (u ! i)\"", "lemma is_word_is_terminal: \"i < length u \\<Longrightarrow> is_word u \\<Longrightarrow> is_terminal (u ! i)\"", "lemma leftmost_append: \n  assumes leftmost: \"leftmost i (u@v)\"\n  and is_word: \"is_word u\"\n  shows \"length u \\<le> i\"", "lemma derivation_ge_empty[simp]: \"derivation_ge [] i\"", "lemma leftmost_notword: \"leftmost i a \\<Longrightarrow> j > i \\<Longrightarrow> \\<not> (is_word (take j a))\"", "lemma leftmost_unique: \"leftmost i a \\<Longrightarrow> leftmost j a \\<Longrightarrow> i = j\"", "lemma leftmost_Derives1: \"leftmost i a \\<Longrightarrow> Derives1 a j r b \\<Longrightarrow> i \\<le> j\"", "lemma leftmost_Derives1_propagate: \n  assumes leftmost: \"leftmost i a\"\n      and Derives1: \"Derives1 a j r b\"\n    shows \"(is_word b \\<and> i = j) \\<or> (\\<exists> k. leftmost k b \\<and> i \\<le> k)\"", "lemma is_word_Derives1[elim]: \"is_word a \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> False\"", "lemma is_word_Derivation[elim]: \"is_word a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> D = []\"", "lemma leftmost_Derivation: \n  \"leftmost i a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> j \\<le> i \\<Longrightarrow> derivation_ge D j\"", "lemma derivation_ge_list_all: \"derivation_ge D i = list_all (\\<lambda> d. fst d \\<ge> i) D\"", "lemma split_derivation_leftmost:\n  assumes \"derivation_ge D i\"\n  and \"\\<not> (derivation_ge D (Suc i))\"\n  shows \"\\<exists> E F r. D = E@[(i, r)]@F \\<and> derivation_ge E (Suc i)\"", "lemma Derives1_Derives1_swap:\n  assumes \"i < j\"\n  and \"Derives1 a j p b\"\n  and \"Derives1 b i q c\"\n  shows \"\\<exists> b'. Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c\"", "lemma derivation_shift_empty[simp]: \"derivation_shift [] left right = []\"", "lemma derivation_shift_cons[simp]:\n  \"derivation_shift (d#D) left right = ((fst d - left + right, snd d)#(derivation_shift D left right))\"", "lemma Derivation_append: \"Derivation a (D@E) c = (\\<exists> b. Derivation a D b \\<and> Derivation b E c)\"", "lemma Derivation_implies_append: \n  \"Derivation a D b \\<Longrightarrow> Derivation b E c \\<Longrightarrow> Derivation a (D@E) c\"", "lemma Derivation_swap_single_end_to_front: \n  \"i < j \\<Longrightarrow> derivation_ge D j \\<Longrightarrow> Derivation a (D@[(i,r)]) b \\<Longrightarrow>\n   Derivation a ((i,r)#(derivation_shift D 1 (length (snd r)))) b\"", "lemma Derivation_swap_single_mid_to_front: \n  assumes \"i < j\"\n  and \"derivation_ge D j\" \n  and \"Derivation a (D@[(i,r)]@E) b\"\n  shows \"Derivation a ((i,r)#((derivation_shift D 1 (length (snd r)))@E)) b\"", "lemma length_derivation_shift[simp]: \n  \"length(derivation_shift D left right) = length D\"", "lemma LeftDerives1_implies_leftderives1: \"LeftDerives1 u i r v \\<Longrightarrow> leftderives1 u v\"", "lemma leftmost_Derives1_leftderives: \n  \"leftmost i a \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> leftderives b c \\<Longrightarrow> leftderives a c\"", "theorem Derivation_implies_leftderives_gen:\n  \"Derivation a D (u@v) \\<Longrightarrow> is_word u \\<Longrightarrow> (\\<exists> w. \n          leftderives a (u@w) \\<and> \n          (v = [] \\<longrightarrow> w = []) \\<and> \n          (\\<forall> X. is_first X v \\<longrightarrow> is_first X w))\"", "lemma derives_implies_leftderives_gen: \"derives a (u@v) \\<Longrightarrow> is_word u \\<Longrightarrow> (\\<exists> w. \n          leftderives a (u@w) \\<and> \n          (v = [] \\<longrightarrow> w = []) \\<and> \n          (\\<forall> X. is_first X v \\<longrightarrow> is_first X w))\"", "lemma derives_implies_leftderives: \"derives a b \\<Longrightarrow> is_word b \\<Longrightarrow> leftderives a b\"", "lemma LeftDerives1_implies_Derives1: \"LeftDerives1 a i r b \\<Longrightarrow> Derives1 a i r b\"", "lemma LeftDerivation_implies_Derivation:\n  \"LeftDerivation a D b \\<Longrightarrow> Derivation a D b\"", "lemma LeftDerivation_implies_leftderives: \"LeftDerivation a D b \\<Longrightarrow> leftderives a b\"", "lemma leftmost_witness[simp]: \"leftmost (length x) (x@(N#y)) = (is_word x \\<and> is_nonterminal N)\"", "lemma leftderives1_implies_LeftDerives1: \n  assumes leftderives1: \"leftderives1 u v\"\n  shows \"\\<exists> i r. LeftDerives1 u i r v\"", "lemma LeftDerivation_LeftDerives1: \n  \"LeftDerivation a S y \\<Longrightarrow> LeftDerives1 y i r z \\<Longrightarrow> LeftDerivation a (S@[(i,r)]) z\"", "lemma leftderives_implies_LeftDerivation: \"leftderives a b \\<Longrightarrow> \\<exists> D. LeftDerivation a D b\"", "lemma LeftDerivation_append: \n  \"LeftDerivation a (D@E) c = (\\<exists> b. LeftDerivation a D b \\<and> LeftDerivation b E c)\"", "lemma LeftDerivation_implies_append: \n  \"LeftDerivation a D b \\<Longrightarrow> LeftDerivation b E c \\<Longrightarrow> LeftDerivation a (D@E) c\"", "lemma Derivation_unique_dest: \"Derivation a D b \\<Longrightarrow> Derivation a D c \\<Longrightarrow> b = c\"", "lemma Derivation_unique_src: \"Derivation a D c \\<Longrightarrow> Derivation b D c \\<Longrightarrow> a = b\"", "lemma LeftDerives1_unique: \"LeftDerives1 a i r b \\<Longrightarrow> LeftDerives1 a j s b \\<Longrightarrow> i = j \\<and> r = s\"", "lemma leftlang: \"\\<L> = { v | v. is_word v \\<and> is_leftderivation v }\"", "lemma leftprefixlang:  \"\\<L>\\<^sub>P = { u | u v. is_word u \\<and> is_leftderivation (u@v) }\"", "lemma derives_implies_leftderives_cons:\n  \"is_word a \\<Longrightarrow> derives u (a@X#b) \\<Longrightarrow> \\<exists> c. leftderives u  (a@X#c)\"", "lemma is_word_append[simp]: \"is_word (a@b) = (is_word a \\<and> is_word b)\"", "lemma \\<L>\\<^sub>P_split: \"a@b \\<in> \\<L>\\<^sub>P \\<Longrightarrow> a \\<in> \\<L>\\<^sub>P\"", "lemma \\<L>\\<^sub>P_is_word: \"a \\<in> \\<L>\\<^sub>P \\<Longrightarrow> is_word a\"", "lemma Derivation_dest_ex_unique: \"Derivation a D b \\<Longrightarrow> \\<exists>! x. Derivation a D x\"", "lemma Derive:\n  assumes ab: \"Derivation a D b\"\n  shows \"Derive a D = b\""], "translations": [["", "lemma [simp]: \"is_terminal t \\<Longrightarrow> is_symbol t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal t \\<Longrightarrow> is_symbol t", "by (auto simp add: is_terminal_def is_symbol_def)"], ["", "lemma [simp]: \"is_sentence []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence []", "by (auto simp add: is_sentence_def)"], ["", "lemma [simp]: \"is_word []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word []", "by (auto simp add: is_word_def)"], ["", "lemma [simp]: \"is_word u \\<Longrightarrow> is_sentence u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word u \\<Longrightarrow> is_sentence u", "by (induct u, auto simp add: is_word_def is_sentence_def)"], ["", "definition leftderives1 :: \"sentence \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"leftderives1 u v = \n     (\\<exists> x y N \\<alpha>. \n          u = x @ [N] @ y\n        \\<and> v = x @ \\<alpha> @ y\n        \\<and> is_word x\n        \\<and> is_sentence y\n        \\<and> (N, \\<alpha>) \\<in> \\<RR>)\""], ["", "lemma leftderives1_implies_derives1[simp]: \"leftderives1 u v \\<Longrightarrow> derives1 u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives1 u v \\<Longrightarrow> derives1 u v", "apply (auto simp add: leftderives1_def derives1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y N \\<alpha>.\n       \\<lbrakk>u = x @ N # y; v = x @ \\<alpha> @ y; is_word x;\n        is_sentence y; (N, \\<alpha>) \\<in> \\<RR>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa ya Na.\n                            x @ N # y = xa @ Na # ya \\<and>\n                            (\\<exists>\\<alpha>'.\n                                x @ \\<alpha> @ y =\n                                xa @ \\<alpha>' @ ya \\<and>\n                                is_sentence xa \\<and>\n                                is_sentence ya \\<and>\n                                (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=\"x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y N \\<alpha>.\n       \\<lbrakk>u = x @ N # y; v = x @ \\<alpha> @ y; is_word x;\n        is_sentence y; (N, \\<alpha>) \\<in> \\<RR>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ya Na.\n                            x @ N # y = x @ Na # ya \\<and>\n                            (\\<exists>\\<alpha>'.\n                                x @ \\<alpha> @ y = x @ \\<alpha>' @ ya \\<and>\n                                is_sentence x \\<and>\n                                is_sentence ya \\<and>\n                                (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=\"y\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y N \\<alpha>.\n       \\<lbrakk>u = x @ N # y; v = x @ \\<alpha> @ y; is_word x;\n        is_sentence y; (N, \\<alpha>) \\<in> \\<RR>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Na.\n                            x @ N # y = x @ Na # y \\<and>\n                            (\\<exists>\\<alpha>'.\n                                x @ \\<alpha> @ y = x @ \\<alpha>' @ y \\<and>\n                                is_sentence x \\<and>\n                                is_sentence y \\<and>\n                                (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=\"N\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y N \\<alpha>.\n       \\<lbrakk>u = x @ N # y; v = x @ \\<alpha> @ y; is_word x;\n        is_sentence y; (N, \\<alpha>) \\<in> \\<RR>\\<rbrakk>\n       \\<Longrightarrow> x @ N # y = x @ N # y \\<and>\n                         (\\<exists>\\<alpha>'.\n                             x @ \\<alpha> @ y = x @ \\<alpha>' @ y \\<and>\n                             is_sentence x \\<and>\n                             is_sentence y \\<and>\n                             (N, \\<alpha>') \\<in> \\<RR>)", "by auto"], ["", "definition leftderivations1 :: \"(sentence \\<times> sentence) set\"\nwhere\n  \"leftderivations1 = { (u,v) | u v. leftderives1 u v }\""], ["", "lemma [simp]: \"leftderivations1 \\<subseteq> derivations1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderivations1 \\<subseteq> derivations1", "by (auto simp add: leftderivations1_def derivations1_def)"], ["", "definition leftderivations :: \"(sentence \\<times> sentence) set\"\nwhere \n  \"leftderivations = leftderivations1^*\""], ["", "lemma rtrancl_subset_implies: \"a \\<subseteq> b \\<Longrightarrow> a \\<subseteq> b^*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<subseteq> b \\<Longrightarrow> a \\<subseteq> b\\<^sup>*", "by blast"], ["", "lemma leftderivations_subset_derivations[simp]: \"leftderivations \\<subseteq> derivations\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderivations \\<subseteq> derivations", "apply (simp add: leftderivations_def derivations_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderivations1\\<^sup>* \\<subseteq> derivations1\\<^sup>*", "apply (rule rtrancl_subset_rtrancl)"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderivations1 \\<subseteq> derivations1\\<^sup>*", "apply (rule rtrancl_subset_implies)"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderivations1 \\<subseteq> derivations1", "by simp"], ["", "definition leftderives :: \"sentence \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"leftderives u v = ((u, v) \\<in> leftderivations)\""], ["", "lemma leftderives_implies_derives[simp]: \"leftderives u v \\<Longrightarrow> derives u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives u v \\<Longrightarrow> derives u v", "apply (auto simp add: leftderives_def derives_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (u, v) \\<in> leftderivations \\<Longrightarrow> (u, v) \\<in> derivations", "by (rule subsetD[OF leftderivations_subset_derivations])"], ["", "definition is_leftderivation :: \"sentence \\<Rightarrow> bool\"\nwhere\n  \"is_leftderivation u = leftderives [\\<SS>] u\""], ["", "lemma leftderivation_implies_derivation[simp]: \n  \"is_leftderivation u \\<Longrightarrow> is_derivation u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_leftderivation u \\<Longrightarrow> is_derivation u", "by (simp add: is_leftderivation_def is_derivation_def)"], ["", "lemma leftderives_refl[simp]: \"leftderives u u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives u u", "by (auto simp add: leftderives_def leftderivations_def)"], ["", "lemma leftderives1_implies_leftderives[simp]:\"leftderives1 a b \\<Longrightarrow> leftderives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives1 a b \\<Longrightarrow> leftderives a b", "by (auto simp add: leftderives_def leftderivations_def leftderivations1_def)"], ["", "lemma leftderives_trans: \"leftderives a b \\<Longrightarrow> leftderives b c \\<Longrightarrow> leftderives a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftderives a b; leftderives b c\\<rbrakk>\n    \\<Longrightarrow> leftderives a c", "by (auto simp add: leftderives_def leftderivations_def)"], ["", "lemma leftderives1_eq_leftderivations1: \"leftderives1 x y = ((x, y) \\<in> leftderivations1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives1 x y = ((x, y) \\<in> leftderivations1)", "by (simp add: leftderivations1_def)"], ["", "lemma leftderives_induct[consumes 1, case_names Base Step]:\n  assumes derives: \"leftderives a b\"\n  assumes Pa: \"P a\"\n  assumes induct: \"\\<And>y z. leftderives a y \\<Longrightarrow> leftderives1 y z \\<Longrightarrow> P y \\<Longrightarrow> P z\"\n  shows \"P b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P b", "note rtrancl_lemma = rtrancl_induct[where a = a and b = b and r = leftderivations1 and P=P]"], ["proof (state)\nthis:\n  \\<lbrakk>(a, b) \\<in> leftderivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> leftderivations1\\<^sup>*;\n       (y, z) \\<in> leftderivations1; P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b\n\ngoal (1 subgoal):\n 1. P b", "from derives Pa induct rtrancl_lemma"], ["proof (chain)\npicking this:\n  leftderives a b\n  P a\n  \\<lbrakk>leftderives a ?y; leftderives1 ?y ?z; P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  \\<lbrakk>(a, b) \\<in> leftderivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> leftderivations1\\<^sup>*;\n       (y, z) \\<in> leftderivations1; P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b", "show \"P b\""], ["proof (prove)\nusing this:\n  leftderives a b\n  P a\n  \\<lbrakk>leftderives a ?y; leftderives1 ?y ?z; P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  \\<lbrakk>(a, b) \\<in> leftderivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> leftderivations1\\<^sup>*;\n       (y, z) \\<in> leftderivations1; P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b\n\ngoal (1 subgoal):\n 1. P b", "by (metis leftderives_def leftderivations_def leftderives1_eq_leftderivations1)"], ["proof (state)\nthis:\n  P b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* Basic lemmas about derives1 and derives *)"], ["", "context CFG begin"], ["", "lemma derives1_implies_derives[simp]:\"derives1 a b \\<Longrightarrow> derives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 a b \\<Longrightarrow> derives a b", "by (auto simp add: derives_def derivations_def derivations1_def)"], ["", "lemma derives_trans: \"derives a b \\<Longrightarrow> derives b c \\<Longrightarrow> derives a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derives a b; derives b c\\<rbrakk> \\<Longrightarrow> derives a c", "by (auto simp add: derives_def derivations_def)"], ["", "lemma derives1_eq_derivations1: \"derives1 x y = ((x, y) \\<in> derivations1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 x y = ((x, y) \\<in> derivations1)", "by (simp add: derivations1_def)"], ["", "lemma derives_induct[consumes 1, case_names Base Step]:\n  assumes derives: \"derives a b\"\n  assumes Pa: \"P a\"\n  assumes induct: \"\\<And>y z. derives a y \\<Longrightarrow> derives1 y z \\<Longrightarrow> P y \\<Longrightarrow> P z\"\n  shows \"P b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P b", "note rtrancl_lemma = rtrancl_induct[where a = a and b = b and r = derivations1 and P=P]"], ["proof (state)\nthis:\n  \\<lbrakk>(a, b) \\<in> derivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> derivations1\\<^sup>*; (y, z) \\<in> derivations1;\n       P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b\n\ngoal (1 subgoal):\n 1. P b", "from derives Pa induct rtrancl_lemma"], ["proof (chain)\npicking this:\n  derives a b\n  P a\n  \\<lbrakk>derives a ?y; derives1 ?y ?z; P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  \\<lbrakk>(a, b) \\<in> derivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> derivations1\\<^sup>*; (y, z) \\<in> derivations1;\n       P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b", "show \"P b\""], ["proof (prove)\nusing this:\n  derives a b\n  P a\n  \\<lbrakk>derives a ?y; derives1 ?y ?z; P ?y\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  \\<lbrakk>(a, b) \\<in> derivations1\\<^sup>*; P a;\n   \\<And>y z.\n      \\<lbrakk>(a, y) \\<in> derivations1\\<^sup>*; (y, z) \\<in> derivations1;\n       P y\\<rbrakk>\n      \\<Longrightarrow> P z\\<rbrakk>\n  \\<Longrightarrow> P b\n\ngoal (1 subgoal):\n 1. P b", "by (metis derives_def derivations_def derives1_eq_derivations1)"], ["proof (state)\nthis:\n  P b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* Derives1 and Derivation, LDerives1 and LDerivation *)"], ["", "context CFG begin"], ["", "definition Derives1 :: \"sentence \\<Rightarrow> nat \\<Rightarrow> rule \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"Derives1 u i r v = \n     (\\<exists> x y N \\<alpha>. \n          u = x @ [N] @ y\n        \\<and> v = x @ \\<alpha> @ y\n        \\<and> is_sentence x\n        \\<and> is_sentence y\n        \\<and> (N, \\<alpha>) \\<in> \\<RR>\n        \\<and> r = (N, \\<alpha>) \\<and> i = length x)\""], ["", "lemma Derives1_split:\n  \"Derives1 u i r v \\<Longrightarrow> \\<exists> x y. u = x @ [fst r] @ y \\<and> v = x @ (snd r) @ y \\<and> length x = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 u i r v \\<Longrightarrow>\n    \\<exists>x y.\n       u = x @ [fst r] @ y \\<and> v = x @ snd r @ y \\<and> length x = i", "by (metis Derives1_def fst_conv snd_conv)"], ["", "lemma Derives1_implies_derives1: \"Derives1 u i r v \\<Longrightarrow> derives1 u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 u i r v \\<Longrightarrow> derives1 u v", "by (auto simp add: Derives1_def derives1_def)"], ["", "lemma derives1_implies_Derives1: \"derives1 u v \\<Longrightarrow> \\<exists> i r. Derives1 u i r v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives1 u v \\<Longrightarrow> \\<exists>i r. Derives1 u i r v", "by (auto simp add: Derives1_def derives1_def)"], ["", "lemma Derives1_unique_dest: \"Derives1 u i r v \\<Longrightarrow> Derives1 u i r w \\<Longrightarrow> v = w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derives1 u i r v; Derives1 u i r w\\<rbrakk>\n    \\<Longrightarrow> v = w", "by (auto simp add: Derives1_def derives1_def)"], ["", "lemma Derives1_unique_src: \"Derives1 u i r w \\<Longrightarrow> Derives1 v i r w \\<Longrightarrow> u = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derives1 u i r w; Derives1 v i r w\\<rbrakk>\n    \\<Longrightarrow> u = v", "by (auto simp add: Derives1_def derives1_def)"], ["", "type_synonym derivation = \"(nat \\<times> rule) list\""], ["", "fun Derivation :: \"sentence \\<Rightarrow> derivation \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"Derivation a [] b = (a = b)\"\n| \"Derivation a (d#D) b = (\\<exists> x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b)\""], ["", "lemma Derivation_implies_derives: \"Derivation a D b \\<Longrightarrow> derives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a D b \\<Longrightarrow> derives a b", "proof (induct D arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. Derivation a [] b \\<Longrightarrow> derives a b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "case Nil"], ["proof (state)\nthis:\n  Derivation a [] b\n\ngoal (2 subgoals):\n 1. \\<And>a b. Derivation a [] b \\<Longrightarrow> derives a b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation a [] b\n\ngoal (1 subgoal):\n 1. derives a b", "by (simp add: derives_def derivations_def)"], ["proof (state)\nthis:\n  derives a b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "case (Cons d D)"], ["proof (state)\nthis:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "note ihyps = this"], ["proof (state)\nthis:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "from ihyps"], ["proof (chain)\npicking this:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b", "have \"\\<exists> x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\""], ["proof (prove)\nusing this:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "obtain x where \"Derives1 a (fst d) (snd d) x\" and xb: \"Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "with Derives1_implies_derives1"], ["proof (chain)\npicking this:\n  Derives1 ?u ?i ?r ?v \\<Longrightarrow> derives1 ?u ?v\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b", "have d1: \"derives a x\""], ["proof (prove)\nusing this:\n  Derives1 ?u ?i ?r ?v \\<Longrightarrow> derives1 ?u ?v\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. derives a x", "by auto"], ["proof (state)\nthis:\n  derives a x\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "from ihyps xb"], ["proof (chain)\npicking this:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b\n  Derivation x D b", "have d2:\"derives x b\""], ["proof (prove)\nusing this:\n  Derivation ?a D ?b \\<Longrightarrow> derives ?a ?b\n  Derivation a (d # D) b\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. derives x b", "by simp"], ["proof (state)\nthis:\n  derives x b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b. Derivation a D b \\<Longrightarrow> derives a b;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> derives aa b", "show \"derives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a b", "by (rule derives_trans[OF d1 d2])"], ["proof (state)\nthis:\n  derives a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_Derives1: \"Derivation a S y \\<Longrightarrow> Derives1 y i r z \\<Longrightarrow> Derivation a (S@[(i,r)]) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n    \\<Longrightarrow> Derivation a (S @ [(i, r)]) z", "proof (induct S arbitrary: a y z i r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a y z i r.\n       \\<lbrakk>Derivation a [] y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation a ([] @ [(i, r)]) z\n 2. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> Derivation a (S @ [(i, r)]) z;\n        Derivation aa (a # S) y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation aa ((a # S) @ [(i, r)]) z", "case Nil"], ["proof (state)\nthis:\n  Derivation a [] y\n  Derives1 y i r z\n\ngoal (2 subgoals):\n 1. \\<And>a y z i r.\n       \\<lbrakk>Derivation a [] y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation a ([] @ [(i, r)]) z\n 2. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> Derivation a (S @ [(i, r)]) z;\n        Derivation aa (a # S) y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation aa ((a # S) @ [(i, r)]) z", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation a [] y\n  Derives1 y i r z\n\ngoal (1 subgoal):\n 1. Derivation a ([] @ [(i, r)]) z", "by simp"], ["proof (state)\nthis:\n  Derivation a ([] @ [(i, r)]) z\n\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> Derivation a (S @ [(i, r)]) z;\n        Derivation aa (a # S) y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation aa ((a # S) @ [(i, r)]) z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> Derivation a (S @ [(i, r)]) z;\n        Derivation aa (a # S) y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation aa ((a # S) @ [(i, r)]) z", "case (Cons s S)"], ["proof (state)\nthis:\n  \\<lbrakk>Derivation ?a S ?y; Derives1 ?y ?i ?r ?z\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a (S @ [(?i, ?r)]) ?z\n  Derivation a (s # S) y\n  Derives1 y i r z\n\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>Derivation a S y; Derives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> Derivation a (S @ [(i, r)]) z;\n        Derivation aa (a # S) y; Derives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> Derivation aa ((a # S) @ [(i, r)]) z", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?a S ?y; Derives1 ?y ?i ?r ?z\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a (S @ [(?i, ?r)]) ?z\n  Derivation a (s # S) y\n  Derives1 y i r z\n\ngoal (1 subgoal):\n 1. Derivation a ((s # S) @ [(i, r)]) z", "by (metis Derivation.simps(2) append_Cons)"], ["proof (state)\nthis:\n  Derivation a ((s # S) @ [(i, r)]) z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives_implies_Derivation: \"derives a b \\<Longrightarrow> \\<exists> D. Derivation a D b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives a b \\<Longrightarrow> \\<exists>D. Derivation a D b", "proof (induct rule: derives_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>D. Derivation a D a\n 2. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "case Base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>D. Derivation a D a\n 2. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D. Derivation a D a", "by (rule exI[where x=\"[]\"], simp)"], ["proof (state)\nthis:\n  \\<exists>D. Derivation a D a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "case (Step y z)"], ["proof (state)\nthis:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "note ihyps = this"], ["proof (state)\nthis:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "from ihyps"], ["proof (chain)\npicking this:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y", "obtain D where ay: \"Derivation a D y\""], ["proof (prove)\nusing this:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y\n\ngoal (1 subgoal):\n 1. (\\<And>D. Derivation a D y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "from ihyps derives1_implies_Derives1"], ["proof (chain)\npicking this:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y\n  derives1 ?u ?v \\<Longrightarrow> \\<exists>i r. Derives1 ?u i r ?v", "obtain i r where yz: \"Derives1 y i r z\""], ["proof (prove)\nusing this:\n  derives a y\n  derives1 y z\n  \\<exists>D. Derivation a D y\n  derives1 ?u ?v \\<Longrightarrow> \\<exists>i r. Derives1 ?u i r ?v\n\ngoal (1 subgoal):\n 1. (\\<And>i r. Derives1 y i r z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 y i r z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives a y; derives1 y z;\n        \\<exists>D. Derivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. Derivation a D z", "from Derivation_Derives1[OF ay yz]"], ["proof (chain)\npicking this:\n  Derivation a (D @ [(i, r)]) z", "show ?case"], ["proof (prove)\nusing this:\n  Derivation a (D @ [(i, r)]) z\n\ngoal (1 subgoal):\n 1. \\<exists>D. Derivation a D z", "by auto"], ["proof (state)\nthis:\n  \\<exists>D. Derivation a D z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derives1_take: \"Derives1 a i r b \\<Longrightarrow> take i a = take i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> take i a = take i b", "by (auto simp add: Derives1_def)"], ["", "lemma Derives1_drop: \"Derives1 a i r b \\<Longrightarrow> drop (Suc i) a = drop (i + length (snd r)) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow>\n    drop (Suc i) a = drop (i + length (snd r)) b", "by (auto simp add: Derives1_def)"], ["", "lemma Derives1_bound: \"Derives1 a i r b \\<Longrightarrow> i < length a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> i < length a", "by (auto simp add: Derives1_def)"], ["", "lemma Derives1_length: \"Derives1 a i r b \\<Longrightarrow> length b = length a + length (snd r) - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow>\n    length b = length a + length (snd r) - 1", "by (auto simp add: Derives1_def)"], ["", "definition leftmost :: \"nat \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"leftmost i s = (i < length s \\<and> is_word (take i s) \\<and> is_nonterminal (s ! i))\""], ["", "lemma set_take: \"set (take n s) = { s ! i | i. i < n \\<and> i < length s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "proof (cases \"n \\<le> length s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}\n 2. \\<not> n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "case True"], ["proof (state)\nthis:\n  n \\<le> length s\n\ngoal (2 subgoals):\n 1. n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}\n 2. \\<not> n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "thus ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> length s\n\ngoal (1 subgoal):\n 1. set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "by (subst List.nth_image[symmetric], auto)"], ["proof (state)\nthis:\n  set (take n s) = {s ! i |i. i < n \\<and> i < length s}\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> length s\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length s \\<Longrightarrow>\n    set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> n \\<le> length s\n\ngoal (1 subgoal):\n 1. set (take n s) = {s ! i |i. i < n \\<and> i < length s}", "apply (subst set_conv_nth)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length s \\<Longrightarrow>\n    {take n s ! i |i. i < length (take n s)} =\n    {s ! i |i. i < n \\<and> i < length s}", "by (metis less_trans linear not_le take_all)"], ["proof (state)\nthis:\n  set (take n s) = {s ! i |i. i < n \\<and> i < length s}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma list_all_take: \"list_all P (take n s) = (\\<forall> i. i < n \\<and> i < length s \\<longrightarrow> P (s ! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P (take n s) =\n    (\\<forall>i. i < n \\<and> i < length s \\<longrightarrow> P (s ! i))", "by (auto simp add: set_take list_all_iff)"], ["", "lemma is_sentence_concat: \"is_sentence (x@y) = (is_sentence x \\<and> is_sentence y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (x @ y) = (is_sentence x \\<and> is_sentence y)", "by (auto simp add: is_sentence_def)"], ["", "lemma is_sentence_cons: \"is_sentence (x#xs) = (is_symbol x \\<and> is_sentence xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (x # xs) = (is_symbol x \\<and> is_sentence xs)", "by (auto simp add: is_sentence_def)"], ["", "lemma rule_nonterminal_type[simp]: \"(N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_nonterminal N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_nonterminal N", "apply (insert validRules)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(N, \\<alpha>) \\<in> \\<RR>;\n     \\<forall>(N, \\<alpha>)\\<in>\\<RR>.\n        N \\<in> \\<NN> \\<and>\n        (\\<forall>s\\<in>set \\<alpha>. s \\<in> \\<NN> \\<union> \\<TT>)\\<rbrakk>\n    \\<Longrightarrow> is_nonterminal N", "by (auto simp add: is_nonterminal_def)"], ["", "lemma rule_\\<alpha>_type[simp]: \"(N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_sentence \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_sentence \\<alpha>", "apply (insert validRules)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(N, \\<alpha>) \\<in> \\<RR>;\n     \\<forall>(N, \\<alpha>)\\<in>\\<RR>.\n        N \\<in> \\<NN> \\<and>\n        (\\<forall>s\\<in>set \\<alpha>. s \\<in> \\<NN> \\<union> \\<TT>)\\<rbrakk>\n    \\<Longrightarrow> is_sentence \\<alpha>", "by (auto simp add: is_sentence_def is_symbol_def list_all_iff is_terminal_def is_nonterminal_def)"], ["", "lemma [simp]: \"is_nonterminal N \\<Longrightarrow> is_symbol N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal N \\<Longrightarrow> is_symbol N", "by (simp add: is_symbol_def)"], ["", "lemma Derives1_sentence1[elim]: \"Derives1 a i r b \\<Longrightarrow> is_sentence a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> is_sentence a", "by (auto simp add: Derives1_def is_sentence_cons is_sentence_concat)"], ["", "lemma Derives1_sentence2[elim]: \"Derives1 a i r b \\<Longrightarrow> is_sentence b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> is_sentence b", "by (auto simp add: Derives1_def is_sentence_cons is_sentence_concat)"], ["", "lemma [elim]: \"Derives1 a i r b \\<Longrightarrow> r \\<in> \\<RR>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> r \\<in> \\<RR>", "using Derives1_def"], ["proof (prove)\nusing this:\n  Derives1 ?u ?i ?r ?v =\n  (\\<exists>x y N \\<alpha>.\n      ?u = x @ [N] @ y \\<and>\n      ?v = x @ \\<alpha> @ y \\<and>\n      is_sentence x \\<and>\n      is_sentence y \\<and>\n      (N, \\<alpha>) \\<in> \\<RR> \\<and>\n      ?r = (N, \\<alpha>) \\<and> ?i = length x)\n\ngoal (1 subgoal):\n 1. Derives1 a i r b \\<Longrightarrow> r \\<in> \\<RR>", "by auto"], ["", "lemma is_sentence_symbol: \"is_sentence a \\<Longrightarrow> i < length a \\<Longrightarrow> is_symbol (a ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sentence a; i < length a\\<rbrakk>\n    \\<Longrightarrow> is_symbol (a ! i)", "by (simp add: is_sentence_def list_all_iff)"], ["", "lemma is_symbol_distinct: \"is_symbol x \\<Longrightarrow> is_terminal x \\<noteq> is_nonterminal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_symbol x \\<Longrightarrow> is_terminal x \\<noteq> is_nonterminal x", "apply (insert disjunct_symbols)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_symbol x; \\<NN> \\<inter> \\<TT> = {}\\<rbrakk>\n    \\<Longrightarrow> is_terminal x \\<noteq> is_nonterminal x", "apply (auto simp add: is_symbol_def is_terminal_def is_nonterminal_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma is_terminal_nonterminal: \"is_terminal x \\<Longrightarrow> is_nonterminal x \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_terminal x; is_nonterminal x\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis is_symbol_def is_symbol_distinct)"], ["", "lemma Derives1_leftmost:\n  assumes \"Derives1 a i r b\"\n  shows \"\\<exists> j. leftmost j a \\<and> j \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "let ?J = \"{j . j < length a \\<and> is_nonterminal (a ! j)}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "let ?M = \"Min ?J\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "from assms"], ["proof (chain)\npicking this:\n  Derives1 a i r b", "have J1:\"i \\<in> ?J\""], ["proof (prove)\nusing this:\n  Derives1 a i r b\n\ngoal (1 subgoal):\n 1. i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}", "apply (auto simp add: Derives1_def is_nonterminal_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y N \\<alpha>.\n       \\<lbrakk>a = x @ N # y; b = x @ \\<alpha> @ y; is_sentence x;\n        is_sentence y; (N, \\<alpha>) \\<in> \\<RR>; r = (N, \\<alpha>);\n        i = length x\\<rbrakk>\n       \\<Longrightarrow> N \\<in> \\<NN>", "by (metis (mono_tags, lifting) prod.simps(2) validRules)"], ["proof (state)\nthis:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "have J2:\"finite ?J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {j. j < length a \\<and> is_nonterminal (a ! j)}", "by auto"], ["proof (state)\nthis:\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "note J = J1 J2"], ["proof (state)\nthis:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "from J"], ["proof (chain)\npicking this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}", "have M1: \"?M \\<in> ?J\""], ["proof (prove)\nusing this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. Min {j. j < length a \\<and> is_nonterminal (a ! j)}\n    \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}", "by (rule_tac Min_in, auto)"], ["proof (state)\nthis:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)}\n  \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "{"], ["proof (state)\nthis:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)}\n  \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "fix j"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "assume \"j \\<in> ?J\""], ["proof (state)\nthis:\n  j \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "with J"], ["proof (chain)\npicking this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}\n  j \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}", "have \"?M \\<le> j\""], ["proof (prove)\nusing this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n  finite {j. j < length a \\<and> is_nonterminal (a ! j)}\n  j \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> j", "by auto"], ["proof (state)\nthis:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> j\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "}"], ["proof (state)\nthis:\n  ?j2\n  \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)} \\<Longrightarrow>\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> ?j2\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "note M3 = this[OF J1]"], ["proof (state)\nthis:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> i\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "from assms"], ["proof (chain)\npicking this:\n  Derives1 a i r b", "have a_sentence: \"is_sentence a\""], ["proof (prove)\nusing this:\n  Derives1 a i r b\n\ngoal (1 subgoal):\n 1. is_sentence a", "by (simp add: Derives1_sentence1)"], ["proof (state)\nthis:\n  is_sentence a\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "have is_word: \"is_word (take ?M a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word (take (Min {j. j < length a \\<and> is_nonterminal (a ! j)}) a)", "apply (auto simp add: is_word_def list_all_take)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < Min {j. j < length a \\<and> is_nonterminal (a ! j)};\n        i < length a\\<rbrakk>\n       \\<Longrightarrow> is_terminal (a ! i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < Min {j. j < length a \\<and> is_nonterminal (a ! j)};\n        i < length a\\<rbrakk>\n       \\<Longrightarrow> is_terminal (a ! i)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < Min {j. j < length a \\<and> is_nonterminal (a ! j)};\n        i < length a\\<rbrakk>\n       \\<Longrightarrow> is_terminal (a ! i)", "assume i_less_M: \"i < ?M\""], ["proof (state)\nthis:\n  i < Min {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < Min {j. j < length a \\<and> is_nonterminal (a ! j)};\n        i < length a\\<rbrakk>\n       \\<Longrightarrow> is_terminal (a ! i)", "assume i_inbounds: \"i < length a\""], ["proof (state)\nthis:\n  i < length a\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>i < Min {j. j < length a \\<and> is_nonterminal (a ! j)};\n        i < length a\\<rbrakk>\n       \\<Longrightarrow> is_terminal (a ! i)", "show \"is_terminal (a ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal (a ! i)", "proof(cases \"is_terminal (a ! i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)\n 2. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "case True"], ["proof (state)\nthis:\n  is_terminal (a ! i)\n\ngoal (2 subgoals):\n 1. is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)\n 2. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_terminal (a ! i)\n\ngoal (1 subgoal):\n 1. is_terminal (a ! i)", "by auto"], ["proof (state)\nthis:\n  is_terminal (a ! i)\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "case False"], ["proof (state)\nthis:\n  \\<not> is_terminal (a ! i)\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "then"], ["proof (chain)\npicking this:\n  \\<not> is_terminal (a ! i)", "have \"is_nonterminal (a ! i)\""], ["proof (prove)\nusing this:\n  \\<not> is_terminal (a ! i)\n\ngoal (1 subgoal):\n 1. is_nonterminal (a ! i)", "using i_inbounds a_sentence is_sentence_symbol is_symbol_distinct"], ["proof (prove)\nusing this:\n  \\<not> is_terminal (a ! i)\n  i < length a\n  is_sentence a\n  \\<lbrakk>is_sentence ?a; ?i < length ?a\\<rbrakk>\n  \\<Longrightarrow> is_symbol (?a ! ?i)\n  is_symbol ?x \\<Longrightarrow> is_terminal ?x \\<noteq> is_nonterminal ?x\n\ngoal (1 subgoal):\n 1. is_nonterminal (a ! i)", "by blast"], ["proof (state)\nthis:\n  is_nonterminal (a ! i)\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "then"], ["proof (chain)\npicking this:\n  is_nonterminal (a ! i)", "have \"i \\<in> ?J\""], ["proof (prove)\nusing this:\n  is_nonterminal (a ! i)\n\ngoal (1 subgoal):\n 1. i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}", "by (metis i_inbounds mem_Collect_eq)"], ["proof (state)\nthis:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "then"], ["proof (chain)\npicking this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}", "have \"?M < i\""], ["proof (prove)\nusing this:\n  i \\<in> {j. j < length a \\<and> is_nonterminal (a ! j)}\n\ngoal (1 subgoal):\n 1. Min {j. j < length a \\<and> is_nonterminal (a ! j)} < i", "by (metis J2 Min_le i_less_M leD)"], ["proof (state)\nthis:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} < i\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "then"], ["proof (chain)\npicking this:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} < i", "have \"False\""], ["proof (prove)\nusing this:\n  Min {j. j < length a \\<and> is_nonterminal (a ! j)} < i\n\ngoal (1 subgoal):\n 1. False", "by (metis i_less_M less_asym')"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> is_terminal (a ! i) \\<Longrightarrow> is_terminal (a ! i)", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. is_terminal (a ! i)", "by auto"], ["proof (state)\nthis:\n  is_terminal (a ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_terminal (a ! i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_word (take (Min {j. j < length a \\<and> is_nonterminal (a ! j)}) a)\n\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. leftmost j a \\<and> j \\<le> i", "apply (rule_tac exI[where x=\"?M\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost (Min {j. j < length a \\<and> is_nonterminal (a ! j)}) a \\<and>\n    Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> i", "apply (simp add: leftmost_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Min {j. j < length a \\<and> is_nonterminal (a ! j)} < length a \\<and>\n    is_word\n     (take (Min {j. j < length a \\<and> is_nonterminal (a ! j)}) a) \\<and>\n    is_nonterminal\n     (a ! Min {j. j < length a \\<and> is_nonterminal (a ! j)}) \\<and>\n    Min {j. j < length a \\<and> is_nonterminal (a ! j)} \\<le> i", "by (metis (mono_tags, lifting) M1 M3 is_word mem_Collect_eq)"], ["proof (state)\nthis:\n  \\<exists>j. leftmost j a \\<and> j \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_leftmost: \"D \\<noteq> [] \\<Longrightarrow> Derivation a D b \\<Longrightarrow> \\<exists> i. leftmost i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D \\<noteq> []; Derivation a D b\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. leftmost i a", "apply (case_tac \"D\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>D \\<noteq> []; Derivation a D b; D = []\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. leftmost i a\n 2. \\<And>aa list.\n       \\<lbrakk>D \\<noteq> []; Derivation a D b; D = aa # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i a", "apply (auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa aaa ba list x.\n       \\<lbrakk>D = (aa, aaa, ba) # list; Derives1 a aa (aaa, ba) x;\n        Derivation x list b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i a", "apply (metis Derives1_leftmost)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma nonword_has_nonterminal:\n  \"is_sentence a \\<Longrightarrow>  \\<not> (is_word a) \\<Longrightarrow> \\<exists> k. k < length a \\<and> is_nonterminal (a ! k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sentence a; \\<not> is_word a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k<length a. is_nonterminal (a ! k)", "apply (auto simp add: is_sentence_def list_all_iff is_word_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>Ball (set a) is_symbol; x \\<in> set a;\n        \\<not> is_terminal x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>k<length a. is_nonterminal (a ! k)", "by (metis in_set_conv_nth is_symbol_distinct)"], ["", "lemma leftmost_cons_nonterminal: \n  \"is_nonterminal x \\<Longrightarrow> leftmost 0 (x#xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal x \\<Longrightarrow> leftmost 0 (x # xs)", "by (metis CFG.is_word_def CFG_axioms leftmost_def length_greater_0_conv list.distinct(1) \n    list_all_simps(2) nth_Cons_0 take_Cons')"], ["", "lemma leftmost_cons_terminal: \n  \"is_terminal x \\<Longrightarrow> leftmost i (x#xs) = (i > 0 \\<and> leftmost (i - 1) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal x \\<Longrightarrow>\n    leftmost i (x # xs) = (0 < i \\<and> leftmost (i - 1) xs)", "by (metis Suc_diff_1 Suc_less_eq is_terminal_nonterminal is_word_def leftmost_def length_Cons \n    list_all_simps(1) not_gr0 nth_Cons' take_Cons')"], ["", "lemma is_nonterminal_cons_terminal: \n  \"is_terminal x \\<Longrightarrow> k < length (x # a) \\<Longrightarrow> is_nonterminal ((x # a) ! k) \\<Longrightarrow>\n   k > 0 \\<and> k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_terminal x; k < length (x # a);\n     is_nonterminal ((x # a) ! k)\\<rbrakk>\n    \\<Longrightarrow> 0 < k \\<and>\n                      k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))", "by (metis One_nat_def Suc_leI is_terminal_nonterminal less_diff_conv2 \n    list.size(4) nth_non_equal_first_eq)"], ["", "lemma leftmost_exists:\n  \"is_sentence a \\<Longrightarrow> k < length a \\<Longrightarrow> is_nonterminal (a ! k) \\<Longrightarrow> \n   \\<exists> i. leftmost i a \\<and> i \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sentence a; k < length a; is_nonterminal (a ! k)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. leftmost i a \\<and> i \\<le> k", "proof (induct a arbitrary: k)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>is_sentence []; k < length [];\n        is_nonterminal ([] ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i [] \\<and> i \\<le> k\n 2. \\<And>a1 a2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>is_sentence a2; k < length a2;\n                    is_nonterminal (a2 ! k)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i.\n  leftmost i a2 \\<and> i \\<le> k;\n        is_sentence (a1 # a2); k < length (a1 # a2);\n        is_nonterminal ((a1 # a2) ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i (a1 # a2) \\<and> i \\<le> k", "case Nil"], ["proof (state)\nthis:\n  is_sentence []\n  k < length []\n  is_nonterminal ([] ! k)\n\ngoal (2 subgoals):\n 1. \\<And>k.\n       \\<lbrakk>is_sentence []; k < length [];\n        is_nonterminal ([] ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i [] \\<and> i \\<le> k\n 2. \\<And>a1 a2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>is_sentence a2; k < length a2;\n                    is_nonterminal (a2 ! k)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i.\n  leftmost i a2 \\<and> i \\<le> k;\n        is_sentence (a1 # a2); k < length (a1 # a2);\n        is_nonterminal ((a1 # a2) ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i (a1 # a2) \\<and> i \\<le> k", "thus ?case"], ["proof (prove)\nusing this:\n  is_sentence []\n  k < length []\n  is_nonterminal ([] ! k)\n\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i [] \\<and> i \\<le> k", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i [] \\<and> i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>is_sentence a2; k < length a2;\n                    is_nonterminal (a2 ! k)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i.\n  leftmost i a2 \\<and> i \\<le> k;\n        is_sentence (a1 # a2); k < length (a1 # a2);\n        is_nonterminal ((a1 # a2) ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i (a1 # a2) \\<and> i \\<le> k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a1 a2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>is_sentence a2; k < length a2;\n                    is_nonterminal (a2 ! k)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i.\n  leftmost i a2 \\<and> i \\<le> k;\n        is_sentence (a1 # a2); k < length (a1 # a2);\n        is_nonterminal ((a1 # a2) ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i (a1 # a2) \\<and> i \\<le> k", "case (Cons x a)"], ["proof (state)\nthis:\n  \\<lbrakk>is_sentence a; ?k < length a; is_nonterminal (a ! ?k)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i a \\<and> i \\<le> ?k\n  is_sentence (x # a)\n  k < length (x # a)\n  is_nonterminal ((x # a) ! k)\n\ngoal (1 subgoal):\n 1. \\<And>a1 a2 k.\n       \\<lbrakk>\\<And>k.\n                   \\<lbrakk>is_sentence a2; k < length a2;\n                    is_nonterminal (a2 ! k)\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>i.\n  leftmost i a2 \\<and> i \\<le> k;\n        is_sentence (a1 # a2); k < length (a1 # a2);\n        is_nonterminal ((a1 # a2) ! k)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i. leftmost i (a1 # a2) \\<and> i \\<le> k", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "proof(cases \"is_nonterminal x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k\n 2. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "case True"], ["proof (state)\nthis:\n  is_nonterminal x\n\ngoal (2 subgoals):\n 1. is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k\n 2. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_nonterminal x\n\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "apply(rule_tac exI[where x=\"0\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal x \\<Longrightarrow> leftmost 0 (x # a) \\<and> 0 \\<le> k", "apply (simp add: leftmost_cons_nonterminal)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "case False"], ["proof (state)\nthis:\n  \\<not> is_nonterminal x\n\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "then"], ["proof (chain)\npicking this:\n  \\<not> is_nonterminal x", "have x: \"is_terminal x\""], ["proof (prove)\nusing this:\n  \\<not> is_nonterminal x\n\ngoal (1 subgoal):\n 1. is_terminal x", "by (metis Cons.prems(1) is_sentence_cons is_symbol_distinct)"], ["proof (state)\nthis:\n  is_terminal x\n\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "note k = is_nonterminal_cons_terminal[OF x Cons(3) Cons(4)]"], ["proof (state)\nthis:\n  0 < k \\<and> k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))\n\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>is_sentence a; ?k < length a; is_nonterminal (a ! ?k)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i a \\<and> i \\<le> ?k\n  is_sentence (x # a)\n  k < length (x # a)\n  is_nonterminal ((x # a) ! k)\n  0 < k \\<and> k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))", "have \"\\<exists>i. leftmost i a \\<and> i \\<le> k - 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>is_sentence a; ?k < length a; is_nonterminal (a ! ?k)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i a \\<and> i \\<le> ?k\n  is_sentence (x # a)\n  k < length (x # a)\n  is_nonterminal ((x # a) ! k)\n  0 < k \\<and> k - 1 < length a \\<and> is_nonterminal (a ! (k - 1))\n\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i a \\<and> i \\<le> k - 1", "by (metis is_sentence_cons)"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i a \\<and> i \\<le> k - 1\n\ngoal (1 subgoal):\n 1. \\<not> is_nonterminal x \\<Longrightarrow>\n    \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. leftmost i a \\<and> i \\<le> k - 1", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>i. leftmost i a \\<and> i \\<le> k - 1\n\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k", "apply (auto simp add: leftmost_cons_terminal[OF x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       \\<lbrakk>leftmost i a; i \\<le> k - Suc 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>i>0.\n                            leftmost (i - Suc 0) a \\<and> i \\<le> k", "by (metis le_diff_conv2 Suc_leI add_Suc_right add_diff_cancel_right' k \n          le_0_eq le_imp_less_Suc nat_le_linear)"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i (x # a) \\<and> i \\<le> k\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nonword_leftmost_exists: \n  \"is_sentence a \\<Longrightarrow> \\<not> (is_word a) \\<Longrightarrow> \\<exists> i. leftmost i a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_sentence a; \\<not> is_word a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i. leftmost i a", "by (metis leftmost_exists nonword_has_nonterminal)"], ["", "lemma leftmost_unaffected_Derives1: \"leftmost j a \\<Longrightarrow> j < i \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> leftmost j b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost j a; j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> leftmost j b", "apply (simp add: leftmost_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume a1: \"j < length a \\<and> is_word (take j a) \\<and> is_nonterminal (a ! j)\""], ["proof (state)\nthis:\n  j < length a \\<and> is_word (take j a) \\<and> is_nonterminal (a ! j)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume a2: \"j < i\""], ["proof (state)\nthis:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume \"Derives1 a i r b\""], ["proof (state)\nthis:\n  Derives1 a i r b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  Derives1 a i r b", "have f3: \"take i a = take i b\""], ["proof (prove)\nusing this:\n  Derives1 a i r b\n\ngoal (1 subgoal):\n 1. take i a = take i b", "by (metis Derives1_take)"], ["proof (state)\nthis:\n  take i a = take i b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f4: \"\\<And>n ss ssa. take (length (take n (ss::symbol list))) (ssa::symbol list) = take (length ss) (take n ssa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ss ssa.\n       take (length (take n ss)) ssa = take (length ss) (take n ssa)", "by (metis length_take take_take)"], ["proof (state)\nthis:\n  take (length (take ?n ?ss)) ?ssa = take (length ?ss) (take ?n ?ssa)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f5: \"\\<And>ss. take j (ss::symbol list) = take i (take j ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss. take j ss = take i (take j ss)", "using a2"], ["proof (prove)\nusing this:\n  j < i\n\ngoal (1 subgoal):\n 1. \\<And>ss. take j ss = take i (take j ss)", "by (metis dual_order.strict_implies_order min.absorb2 take_take)"], ["proof (state)\nthis:\n  take j ?ss = take i (take j ?ss)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f6: \"length (take j a) = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take j a) = j", "using a1"], ["proof (prove)\nusing this:\n  j < length a \\<and> is_word (take j a) \\<and> is_nonterminal (a ! j)\n\ngoal (1 subgoal):\n 1. length (take j a) = j", "by (metis dual_order.strict_implies_order length_take min.absorb2)"], ["proof (state)\nthis:\n  length (take j a) = j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  length (take j a) = j", "have f7: \"\\<And>n. min j n = length (take n (take j a))\""], ["proof (prove)\nusing this:\n  length (take j a) = j\n\ngoal (1 subgoal):\n 1. \\<And>n. min j n = length (take n (take j a))", "by (metis length_take)"], ["proof (state)\nthis:\n  min j ?n = length (take ?n (take j a))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f8: \"\\<And>n ss. n = length (take n (ss::symbol list)) \\<or> length ss < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n ss. n = length (take n ss) \\<or> length ss < n", "by (metis leI length_take min.absorb2)"], ["proof (state)\nthis:\n  ?n = length (take ?n ?ss) \\<or> length ?ss < ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f9: \"\\<And>ss. take j (ss::symbol list) = take j (take i ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss. take j ss = take j (take i ss)", "using f7 f6 f5"], ["proof (prove)\nusing this:\n  min j ?n = length (take ?n (take j a))\n  length (take j a) = j\n  take j ?ss = take i (take j ?ss)\n\ngoal (1 subgoal):\n 1. \\<And>ss. take j ss = take j (take i ss)", "by (metis take_take)"], ["proof (state)\nthis:\n  take j ?ss = take j (take i ?ss)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f10: \"\\<And>ss n. length (ss::symbol list) \\<le> n \\<or> length (take n ss) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss n. length ss \\<le> n \\<or> length (take n ss) = n", "using f8"], ["proof (prove)\nusing this:\n  ?n = length (take ?n ?ss) \\<or> length ?ss < ?n\n\ngoal (1 subgoal):\n 1. \\<And>ss n. length ss \\<le> n \\<or> length (take n ss) = n", "by (metis dual_order.strict_implies_order)"], ["proof (state)\nthis:\n  length ?ss \\<le> ?n \\<or> length (take ?n ?ss) = ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  length ?ss \\<le> ?n \\<or> length (take ?n ?ss) = ?n", "have f11: \"\\<And>ss ssa. length (ss::symbol list) = length (take (length ss) (ssa::symbol list)) \\<or> length (take (length ssa) ss) = length ssa\""], ["proof (prove)\nusing this:\n  length ?ss \\<le> ?n \\<or> length (take ?n ?ss) = ?n\n\ngoal (1 subgoal):\n 1. \\<And>ss ssa.\n       length ss = length (take (length ss) ssa) \\<or>\n       length (take (length ssa) ss) = length ssa", "by (metis length_take min.absorb2)"], ["proof (state)\nthis:\n  length ?ss = length (take (length ?ss) ?ssa) \\<or>\n  length (take (length ?ssa) ?ss) = length ?ssa\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "have f12: \"\\<And>ss ssa n. take (length (ss::symbol list)) (ssa::symbol list) = take n (take (length ss) ssa) \\<or> length (take n ss) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ss ssa n.\n       take (length ss) ssa = take n (take (length ss) ssa) \\<or>\n       length (take n ss) = n", "using f10"], ["proof (prove)\nusing this:\n  length ?ss \\<le> ?n \\<or> length (take ?n ?ss) = ?n\n\ngoal (1 subgoal):\n 1. \\<And>ss ssa n.\n       take (length ss) ssa = take n (take (length ss) ssa) \\<or>\n       length (take n ss) = n", "by (metis min.absorb2 take_take)"], ["proof (state)\nthis:\n  take (length ?ss) ?ssa = take ?n (take (length ?ss) ?ssa) \\<or>\n  length (take ?n ?ss) = ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "{"], ["proof (state)\nthis:\n  take (length ?ss) ?ssa = take ?n (take (length ?ss) ?ssa) \\<or>\n  length (take ?n ?ss) = ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume \"\\<not> j < j\""], ["proof (state)\nthis:\n  \\<not> j < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "{"], ["proof (state)\nthis:\n  \\<not> j < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume \"\\<not> j < j \\<and> i \\<noteq> j\""], ["proof (state)\nthis:\n  \\<not> j < j \\<and> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "moreover"], ["proof (state)\nthis:\n  \\<not> j < j \\<and> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "{"], ["proof (state)\nthis:\n  \\<not> j < j \\<and> i \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "assume \"length a \\<noteq> j \\<and> length (take i a) \\<noteq> i\""], ["proof (state)\nthis:\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i", "have \"\\<exists>ss. length (take (length (take i (take (length a) (ss::symbol list)))) (take j ss)) \\<noteq> length (take i (take (length a) ss))\""], ["proof (prove)\nusing this:\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i\n\ngoal (1 subgoal):\n 1. \\<exists>ss.\n       length\n        (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n       length (take i (take (length a) ss))", "using f12 f11 f6 f5 f4"], ["proof (prove)\nusing this:\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i\n  take (length ?ss) ?ssa = take ?n (take (length ?ss) ?ssa) \\<or>\n  length (take ?n ?ss) = ?n\n  length ?ss = length (take (length ?ss) ?ssa) \\<or>\n  length (take (length ?ssa) ?ss) = length ?ssa\n  length (take j a) = j\n  take j ?ss = take i (take j ?ss)\n  take (length (take ?n ?ss)) ?ssa = take (length ?ss) (take ?n ?ssa)\n\ngoal (1 subgoal):\n 1. \\<exists>ss.\n       length\n        (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n       length (take i (take (length a) ss))", "by metis"], ["proof (state)\nthis:\n  \\<exists>ss.\n     length\n      (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n     length (take i (take (length a) ss))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ss.\n     length\n      (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n     length (take i (take (length a) ss))", "have \"\\<exists>ss ssa. take (length (ss::symbol list)) (take j (ssa::symbol list)) \\<noteq> take (length ss) (take i (take (length a) ssa))\""], ["proof (prove)\nusing this:\n  \\<exists>ss.\n     length\n      (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n     length (take i (take (length a) ss))\n\ngoal (1 subgoal):\n 1. \\<exists>ss ssa.\n       take (length ss) (take j ssa) \\<noteq>\n       take (length ss) (take i (take (length a) ssa))", "using f11"], ["proof (prove)\nusing this:\n  \\<exists>ss.\n     length\n      (take (length (take i (take (length a) ss))) (take j ss)) \\<noteq>\n     length (take i (take (length a) ss))\n  length ?ss = length (take (length ?ss) ?ssa) \\<or>\n  length (take (length ?ssa) ?ss) = length ?ssa\n\ngoal (1 subgoal):\n 1. \\<exists>ss ssa.\n       take (length ss) (take j ssa) \\<noteq>\n       take (length ss) (take i (take (length a) ssa))", "by metis"], ["proof (state)\nthis:\n  \\<exists>ss ssa.\n     take (length ss) (take j ssa) \\<noteq>\n     take (length ss) (take i (take (length a) ssa))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ss ssa.\n     take (length ss) (take j ssa) \\<noteq>\n     take (length ss) (take i (take (length a) ssa))", "have \"length b \\<noteq> j\""], ["proof (prove)\nusing this:\n  \\<exists>ss ssa.\n     take (length ss) (take j ssa) \\<noteq>\n     take (length ss) (take i (take (length a) ssa))\n\ngoal (1 subgoal):\n 1. length b \\<noteq> j", "using f9 f4 f3"], ["proof (prove)\nusing this:\n  \\<exists>ss ssa.\n     take (length ss) (take j ssa) \\<noteq>\n     take (length ss) (take i (take (length a) ssa))\n  take j ?ss = take j (take i ?ss)\n  take (length (take ?n ?ss)) ?ssa = take (length ?ss) (take ?n ?ssa)\n  take i a = take i b\n\ngoal (1 subgoal):\n 1. length b \\<noteq> j", "by metis"], ["proof (state)\nthis:\n  length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "}"], ["proof (state)\nthis:\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i \\<Longrightarrow>\n  length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> j < j \\<and> i \\<noteq> j\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i \\<Longrightarrow>\n  length b \\<noteq> j", "have \"length b \\<noteq> j\""], ["proof (prove)\nusing this:\n  \\<not> j < j \\<and> i \\<noteq> j\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i \\<Longrightarrow>\n  length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. length b \\<noteq> j", "using f7 f6 f5 f3 a1"], ["proof (prove)\nusing this:\n  \\<not> j < j \\<and> i \\<noteq> j\n  length a \\<noteq> j \\<and> length (take i a) \\<noteq> i \\<Longrightarrow>\n  length b \\<noteq> j\n  min j ?n = length (take ?n (take j a))\n  length (take j a) = j\n  take j ?ss = take i (take j ?ss)\n  take i a = take i b\n  j < length a \\<and> is_word (take j a) \\<and> is_nonterminal (a ! j)\n\ngoal (1 subgoal):\n 1. length b \\<noteq> j", "by (metis length_take)"], ["proof (state)\nthis:\n  length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "}"], ["proof (state)\nthis:\n  \\<not> j < j \\<and> i \\<noteq> j \\<Longrightarrow> length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  \\<not> j < j \\<and> i \\<noteq> j \\<Longrightarrow> length b \\<noteq> j", "have \"length b = j \\<longrightarrow> j < j\""], ["proof (prove)\nusing this:\n  \\<not> j < j \\<and> i \\<noteq> j \\<Longrightarrow> length b \\<noteq> j\n\ngoal (1 subgoal):\n 1. length b = j \\<longrightarrow> j < j", "using a2"], ["proof (prove)\nusing this:\n  \\<not> j < j \\<and> i \\<noteq> j \\<Longrightarrow> length b \\<noteq> j\n  j < i\n\ngoal (1 subgoal):\n 1. length b = j \\<longrightarrow> j < j", "by metis"], ["proof (state)\nthis:\n  length b = j \\<longrightarrow> j < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "}"], ["proof (state)\nthis:\n  \\<not> j < j \\<Longrightarrow> length b = j \\<longrightarrow> j < j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  \\<not> j < j \\<Longrightarrow> length b = j \\<longrightarrow> j < j", "have \"j < length b\""], ["proof (prove)\nusing this:\n  \\<not> j < j \\<Longrightarrow> length b = j \\<longrightarrow> j < j\n\ngoal (1 subgoal):\n 1. j < length b", "using f9 f8 f7 f6 f4 f3"], ["proof (prove)\nusing this:\n  \\<not> j < j \\<Longrightarrow> length b = j \\<longrightarrow> j < j\n  take j ?ss = take j (take i ?ss)\n  ?n = length (take ?n ?ss) \\<or> length ?ss < ?n\n  min j ?n = length (take ?n (take j a))\n  length (take j a) = j\n  take (length (take ?n ?ss)) ?ssa = take (length ?ss) (take ?n ?ssa)\n  take i a = take i b\n\ngoal (1 subgoal):\n 1. j < length b", "by metis"], ["proof (state)\nthis:\n  j < length b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < length a \\<and>\n             is_word (take j a) \\<and> is_nonterminal (a ! j);\n     j < i; Derives1 a i r b\\<rbrakk>\n    \\<Longrightarrow> j < length b \\<and>\n                      is_word (take j b) \\<and> is_nonterminal (b ! j)", "then"], ["proof (chain)\npicking this:\n  j < length b", "show \"j < length b \\<and> is_word (take j b) \\<and> is_nonterminal (b ! j)\""], ["proof (prove)\nusing this:\n  j < length b\n\ngoal (1 subgoal):\n 1. j < length b \\<and> is_word (take j b) \\<and> is_nonterminal (b ! j)", "using f9 f3 a2 a1"], ["proof (prove)\nusing this:\n  j < length b\n  take j ?ss = take j (take i ?ss)\n  take i a = take i b\n  j < i\n  j < length a \\<and> is_word (take j a) \\<and> is_nonterminal (a ! j)\n\ngoal (1 subgoal):\n 1. j < length b \\<and> is_word (take j b) \\<and> is_nonterminal (b ! j)", "by (metis nth_take)"], ["proof (state)\nthis:\n  j < length b \\<and> is_word (take j b) \\<and> is_nonterminal (b ! j)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition derivation_ge :: \"derivation \\<Rightarrow> nat \\<Rightarrow> bool\"\nwhere\n  \"derivation_ge D i = (\\<forall> d \\<in> set D. fst d \\<ge> i)\""], ["", "lemma derivation_ge_cons: \"derivation_ge (d#D) i = (fst d \\<ge> i \\<and> derivation_ge D i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (d # D) i = (i \\<le> fst d \\<and> derivation_ge D i)", "by (auto simp add: derivation_ge_def)"], ["", "lemma derivation_ge_append: \n  \"derivation_ge (D@E) i = (derivation_ge D i \\<and> derivation_ge E i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (D @ E) i = (derivation_ge D i \\<and> derivation_ge E i)", "by (auto simp add: derivation_ge_def)"], ["", "lemma leftmost_unaffected_Derivation: \n  \"derivation_ge D (Suc i) \\<Longrightarrow> leftmost i a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> leftmost i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n     Derivation a D b\\<rbrakk>\n    \\<Longrightarrow> leftmost i b", "proof (induct D arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>derivation_ge [] (Suc i); leftmost i a;\n        Derivation a [] b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "case Nil"], ["proof (state)\nthis:\n  derivation_ge [] (Suc i)\n  leftmost i a\n  Derivation a [] b\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>derivation_ge [] (Suc i); leftmost i a;\n        Derivation a [] b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "thus ?case"], ["proof (prove)\nusing this:\n  derivation_ge [] (Suc i)\n  leftmost i a\n  Derivation a [] b\n\ngoal (1 subgoal):\n 1. leftmost i b", "by auto"], ["proof (state)\nthis:\n  leftmost i b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b", "have \"\\<exists> x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "obtain x where x1: \"Derives1 a (fst d) (snd d) x\" and x2: \"Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b", "have leftmost_x: \"leftmost i x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. leftmost i x", "apply (rule_tac leftmost_unaffected_Derives1[\n           where a=a and j=i and b=\"x\" and i=\"fst d\" and r=\"snd d\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<And>a.\n                \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                 Derivation a D b\\<rbrakk>\n                \\<Longrightarrow> leftmost i b;\n     derivation_ge (d # D) (Suc i); leftmost i a; Derivation a (d # D) b;\n     Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n    \\<Longrightarrow> leftmost i a\n 2. \\<lbrakk>\\<And>a.\n                \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                 Derivation a D b\\<rbrakk>\n                \\<Longrightarrow> leftmost i b;\n     derivation_ge (d # D) (Suc i); leftmost i a; Derivation a (d # D) b;\n     Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n    \\<Longrightarrow> i < fst d\n 3. \\<lbrakk>\\<And>a.\n                \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                 Derivation a D b\\<rbrakk>\n                \\<Longrightarrow> leftmost i b;\n     derivation_ge (d # D) (Suc i); leftmost i a; Derivation a (d # D) b;\n     Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n    \\<Longrightarrow> Derives1 a (fst d) (snd d) x", "by (auto simp add: derivation_ge_def)"], ["proof (state)\nthis:\n  leftmost i x\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>derivation_ge D (Suc i); leftmost i a;\n                    Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> leftmost i b;\n        derivation_ge (a # D) (Suc i); leftmost i aa;\n        Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftmost i b", "with Cons x2"], ["proof (chain)\npicking this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n  Derivation x D b\n  leftmost i x", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D (Suc i); leftmost i ?a;\n   Derivation ?a D b\\<rbrakk>\n  \\<Longrightarrow> leftmost i b\n  derivation_ge (d # D) (Suc i)\n  leftmost i a\n  Derivation a (d # D) b\n  Derivation x D b\n  leftmost i x\n\ngoal (1 subgoal):\n 1. leftmost i b", "by (auto simp add: derivation_ge_def)"], ["proof (state)\nthis:\n  leftmost i b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma le_Derives1_take: \n  assumes le: \"i \\<le> j\" \n  and D: \"Derives1 a j r b\"\n  shows \"take i a = take i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take i a = take i b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. take i a = take i b", "note Derives1_take[where a=a and i=j and r=r and b=b]"], ["proof (state)\nthis:\n  Derives1 a j r b \\<Longrightarrow> take j a = take j b\n\ngoal (1 subgoal):\n 1. take i a = take i b", "with le D"], ["proof (chain)\npicking this:\n  i \\<le> j\n  Derives1 a j r b\n  Derives1 a j r b \\<Longrightarrow> take j a = take j b", "show ?thesis"], ["proof (prove)\nusing this:\n  i \\<le> j\n  Derives1 a j r b\n  Derives1 a j r b \\<Longrightarrow> take j a = take j b\n\ngoal (1 subgoal):\n 1. take i a = take i b", "by (rule_tac le_take_same[where i=i and j=j], auto)"], ["proof (state)\nthis:\n  take i a = take i b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_take: \"derivation_ge D i \\<Longrightarrow> Derivation a D b \\<Longrightarrow> take i a = take i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n    \\<Longrightarrow> take i a = take i b", "proof(induct D arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>derivation_ge [] i; Derivation a [] b\\<rbrakk>\n       \\<Longrightarrow> take i a = take i b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "case Nil"], ["proof (state)\nthis:\n  derivation_ge [] i\n  Derivation a [] b\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>derivation_ge [] i; Derivation a [] b\\<rbrakk>\n       \\<Longrightarrow> take i a = take i b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "thus ?case"], ["proof (prove)\nusing this:\n  derivation_ge [] i\n  Derivation a [] b\n\ngoal (1 subgoal):\n 1. take i a = take i b", "by auto"], ["proof (state)\nthis:\n  take i a = take i b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>derivation_ge D i; Derivation ?a D ?b\\<rbrakk>\n  \\<Longrightarrow> take i ?a = take i ?b\n  derivation_ge (d # D) i\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>derivation_ge D i; Derivation ?a D ?b\\<rbrakk>\n  \\<Longrightarrow> take i ?a = take i ?b\n  derivation_ge (d # D) i\n  Derivation a (d # D) b", "have \"\\<exists> x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D i; Derivation ?a D ?b\\<rbrakk>\n  \\<Longrightarrow> take i ?a = take i ?b\n  derivation_ge (d # D) i\n  Derivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "by simp"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "obtain x where ax: \"Derives1 a (fst d) (snd d) x\" and xb: \"Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "from derivation_ge_cons Cons(2)"], ["proof (chain)\npicking this:\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n  derivation_ge (d # D) i", "have d: \"i \\<le> fst d\" and D: \"derivation_ge D i\""], ["proof (prove)\nusing this:\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n  derivation_ge (d # D) i\n\ngoal (1 subgoal):\n 1. i \\<le> fst d &&& derivation_ge D i", "by auto"], ["proof (state)\nthis:\n  i \\<le> fst d\n  derivation_ge D i\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "note take_i_xb = Cons(1)[OF D xb]"], ["proof (state)\nthis:\n  take i x = take i b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "note take_i_ax = le_Derives1_take[OF d ax]"], ["proof (state)\nthis:\n  take i a = take i x\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   \\<lbrakk>derivation_ge D i; Derivation a D b\\<rbrakk>\n                   \\<Longrightarrow> take i a = take i b;\n        derivation_ge (a # D) i; Derivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> take i aa = take i b", "from take_i_xb take_i_ax"], ["proof (chain)\npicking this:\n  take i x = take i b\n  take i a = take i x", "show ?case"], ["proof (prove)\nusing this:\n  take i x = take i b\n  take i a = take i x\n\ngoal (1 subgoal):\n 1. take i a = take i b", "by auto"], ["proof (state)\nthis:\n  take i a = take i b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftmost_cons_less: \"i < length u \\<Longrightarrow> leftmost i (u@v) = leftmost i u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> leftmost i (u @ v) = leftmost i u", "by (auto simp add: leftmost_def nth_append)"], ["", "lemma leftmost_is_nonterminal: \"leftmost i u \\<Longrightarrow> is_nonterminal (u ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost i u \\<Longrightarrow> is_nonterminal (u ! i)", "by (metis leftmost_def)"], ["", "lemma is_word_is_terminal: \"i < length u \\<Longrightarrow> is_word u \\<Longrightarrow> is_terminal (u ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length u; is_word u\\<rbrakk>\n    \\<Longrightarrow> is_terminal (u ! i)", "by (metis is_word_def list_all_length)"], ["", "lemma leftmost_append: \n  assumes leftmost: \"leftmost i (u@v)\"\n  and is_word: \"is_word u\"\n  shows \"length u \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length u \\<le> i", "proof (cases \"i < length u\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < length u \\<Longrightarrow> length u \\<le> i\n 2. \\<not> i < length u \\<Longrightarrow> length u \\<le> i", "case False"], ["proof (state)\nthis:\n  \\<not> i < length u\n\ngoal (2 subgoals):\n 1. i < length u \\<Longrightarrow> length u \\<le> i\n 2. \\<not> i < length u \\<Longrightarrow> length u \\<le> i", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> i < length u\n\ngoal (1 subgoal):\n 1. length u \\<le> i", "by auto"], ["proof (state)\nthis:\n  length u \\<le> i\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "case True"], ["proof (state)\nthis:\n  i < length u\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "with leftmost"], ["proof (chain)\npicking this:\n  leftmost i (u @ v)\n  i < length u", "have \"leftmost i u\""], ["proof (prove)\nusing this:\n  leftmost i (u @ v)\n  i < length u\n\ngoal (1 subgoal):\n 1. leftmost i u", "using leftmost_cons_less[OF True]"], ["proof (prove)\nusing this:\n  leftmost i (u @ v)\n  i < length u\n  leftmost i (u @ ?v) = leftmost i u\n\ngoal (1 subgoal):\n 1. leftmost i u", "by simp"], ["proof (state)\nthis:\n  leftmost i u\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "then"], ["proof (chain)\npicking this:\n  leftmost i u", "have is_nonterminal: \"is_nonterminal (u ! i)\""], ["proof (prove)\nusing this:\n  leftmost i u\n\ngoal (1 subgoal):\n 1. is_nonterminal (u ! i)", "by (rule leftmost_is_nonterminal)"], ["proof (state)\nthis:\n  is_nonterminal (u ! i)\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "note is_terminal = is_word_is_terminal[OF True is_word]"], ["proof (state)\nthis:\n  is_terminal (u ! i)\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "note is_terminal_nonterminal[OF is_terminal is_nonterminal]"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. i < length u \\<Longrightarrow> length u \\<le> i", "then"], ["proof (chain)\npicking this:\n  False", "show ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. length u \\<le> i", "by auto"], ["proof (state)\nthis:\n  length u \\<le> i\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derivation_ge_empty[simp]: \"derivation_ge [] i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge [] i", "by (simp add: derivation_ge_def)"], ["", "lemma leftmost_notword: \"leftmost i a \\<Longrightarrow> j > i \\<Longrightarrow> \\<not> (is_word (take j a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; i < j\\<rbrakk>\n    \\<Longrightarrow> \\<not> is_word (take j a)", "by (metis is_terminal_nonterminal is_word_def leftmost_def list_all_take)"], ["", "lemma leftmost_unique: \"leftmost i a \\<Longrightarrow> leftmost j a \\<Longrightarrow> i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; leftmost j a\\<rbrakk> \\<Longrightarrow> i = j", "by (metis leftmost_def leftmost_notword linorder_neqE_nat)"], ["", "lemma leftmost_Derives1: \"leftmost i a \\<Longrightarrow> Derives1 a j r b \\<Longrightarrow> i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; Derives1 a j r b\\<rbrakk>\n    \\<Longrightarrow> i \\<le> j", "by (metis Derives1_leftmost leftmost_unique)"], ["", "lemma leftmost_Derives1_propagate: \n  assumes leftmost: \"leftmost i a\"\n      and Derives1: \"Derives1 a j r b\"\n    shows \"(is_word b \\<and> i = j) \\<or> (\\<exists> k. leftmost k b \\<and> i \\<le> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "from leftmost_Derives1[OF leftmost Derives1]"], ["proof (chain)\npicking this:\n  i \\<le> j", "have ij: \"i \\<le> j\""], ["proof (prove)\nusing this:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "proof (cases \"is_word b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)\n 2. \\<not> is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "case True"], ["proof (state)\nthis:\n  is_word b\n\ngoal (2 subgoals):\n 1. is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)\n 2. \\<not> is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "by (metis Derives1 True ij le_neq_implies_less leftmost \n          leftmost_unaffected_Derives1 order_refl)"], ["proof (state)\nthis:\n  is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)\n\ngoal (1 subgoal):\n 1. \\<not> is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "case False"], ["proof (state)\nthis:\n  \\<not> is_word b\n\ngoal (1 subgoal):\n 1. \\<not> is_word b \\<Longrightarrow>\n    is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)", "by (metis (no_types, hide_lams) Derives1 Derives1_bound Derives1_sentence2 \n          Derives1_take append_take_drop_id ij le_neq_implies_less leftmost \n          leftmost_append leftmost_cons_less leftmost_def length_take \n          min.absorb2 nat_le_linear nonword_leftmost_exists not_le)"], ["proof (state)\nthis:\n  is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  is_word b \\<and> i = j \\<or> (\\<exists>k. leftmost k b \\<and> i \\<le> k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_word_Derives1[elim]: \"is_word a \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_word a; Derives1 a i r b\\<rbrakk> \\<Longrightarrow> False", "by (metis Derives1_leftmost is_terminal_nonterminal is_word_is_terminal leftmost_def)"], ["", "lemma is_word_Derivation[elim]: \"is_word a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> D = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_word a; Derivation a D b\\<rbrakk> \\<Longrightarrow> D = []", "by (metis Derivation_leftmost is_terminal_nonterminal is_word_def \n    leftmost_def list_all_length)"], ["", "lemma leftmost_Derivation: \n  \"leftmost i a \\<Longrightarrow> Derivation a D b \\<Longrightarrow> j \\<le> i \\<Longrightarrow> derivation_ge D j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; Derivation a D b; j \\<le> i\\<rbrakk>\n    \\<Longrightarrow> derivation_ge D j", "proof (induct D arbitrary: a b i j)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b i j.\n       \\<lbrakk>leftmost i a; Derivation a [] b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge [] j\n 2. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "case Nil"], ["proof (state)\nthis:\n  leftmost i a\n  Derivation a [] b\n  j \\<le> i\n\ngoal (2 subgoals):\n 1. \\<And>a b i j.\n       \\<lbrakk>leftmost i a; Derivation a [] b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge [] j\n 2. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "thus ?case"], ["proof (prove)\nusing this:\n  leftmost i a\n  Derivation a [] b\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. derivation_ge [] j", "by auto"], ["proof (state)\nthis:\n  derivation_ge [] j\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>leftmost ?i ?a; Derivation ?a D ?b; ?j \\<le> ?i\\<rbrakk>\n  \\<Longrightarrow> derivation_ge D ?j\n  leftmost i a\n  Derivation a (d # D) b\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>leftmost ?i ?a; Derivation ?a D ?b; ?j \\<le> ?i\\<rbrakk>\n  \\<Longrightarrow> derivation_ge D ?j\n  leftmost i a\n  Derivation a (d # D) b\n  j \\<le> i", "have \"\\<exists> x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>leftmost ?i ?a; Derivation ?a D ?b; ?j \\<le> ?i\\<rbrakk>\n  \\<Longrightarrow> derivation_ge D ?j\n  leftmost i a\n  Derivation a (d # D) b\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b", "obtain x where ax:\"Derives1 a (fst d) (snd d) x\" and xb:\"Derivation x D b\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derives1 a (fst d) (snd d) x; Derivation x D b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a (fst d) (snd d) x\n  Derivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "note ji = Cons(4)"], ["proof (state)\nthis:\n  j \\<le> i\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "note i_fstd = leftmost_Derives1[OF Cons(2) ax]"], ["proof (state)\nthis:\n  i \\<le> fst d\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "note disj = leftmost_Derives1_propagate[OF Cons(2) ax]"], ["proof (state)\nthis:\n  is_word x \\<and> i = fst d \\<or>\n  (\\<exists>k. leftmost k x \\<and> i \\<le> k)\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b i j.\n       \\<lbrakk>\\<And>a b i j.\n                   \\<lbrakk>leftmost i a; Derivation a D b;\n                    j \\<le> i\\<rbrakk>\n                   \\<Longrightarrow> derivation_ge D j;\n        leftmost i aa; Derivation aa (a # D) b; j \\<le> i\\<rbrakk>\n       \\<Longrightarrow> derivation_ge (a # D) j", "thus ?case"], ["proof (prove)\nusing this:\n  is_word x \\<and> i = fst d \\<or>\n  (\\<exists>k. leftmost k x \\<and> i \\<le> k)\n\ngoal (1 subgoal):\n 1. derivation_ge (d # D) j", "proof(induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_word x \\<and> i = fst d \\<Longrightarrow> derivation_ge (d # D) j\n 2. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "case 1"], ["proof (state)\nthis:\n  is_word x \\<and> i = fst d\n\ngoal (2 subgoals):\n 1. is_word x \\<and> i = fst d \\<Longrightarrow> derivation_ge (d # D) j\n 2. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "with xb"], ["proof (chain)\npicking this:\n  Derivation x D b\n  is_word x \\<and> i = fst d", "have \"D = []\""], ["proof (prove)\nusing this:\n  Derivation x D b\n  is_word x \\<and> i = fst d\n\ngoal (1 subgoal):\n 1. D = []", "by auto"], ["proof (state)\nthis:\n  D = []\n\ngoal (2 subgoals):\n 1. is_word x \\<and> i = fst d \\<Longrightarrow> derivation_ge (d # D) j\n 2. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "with 1 ji"], ["proof (chain)\npicking this:\n  is_word x \\<and> i = fst d\n  j \\<le> i\n  D = []", "show ?case"], ["proof (prove)\nusing this:\n  is_word x \\<and> i = fst d\n  j \\<le> i\n  D = []\n\ngoal (1 subgoal):\n 1. derivation_ge (d # D) j", "by (simp add: derivation_ge_def)"], ["proof (state)\nthis:\n  derivation_ge (d # D) j\n\ngoal (1 subgoal):\n 1. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "case 2"], ["proof (state)\nthis:\n  \\<exists>k. leftmost k x \\<and> i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "then"], ["proof (chain)\npicking this:\n  \\<exists>k. leftmost k x \\<and> i \\<le> k", "obtain k where k: \"leftmost k x\" and ik: \"i \\<le> k\""], ["proof (prove)\nusing this:\n  \\<exists>k. leftmost k x \\<and> i \\<le> k\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<lbrakk>leftmost k x; i \\<le> k\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  leftmost k x\n  i \\<le> k\n\ngoal (1 subgoal):\n 1. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "note ge = Cons(1)[OF k xb, where j=j]"], ["proof (state)\nthis:\n  j \\<le> k \\<Longrightarrow> derivation_ge D j\n\ngoal (1 subgoal):\n 1. \\<exists>k. leftmost k x \\<and> i \\<le> k \\<Longrightarrow>\n    derivation_ge (d # D) j", "from ji ik i_fstd ge"], ["proof (chain)\npicking this:\n  j \\<le> i\n  i \\<le> k\n  i \\<le> fst d\n  j \\<le> k \\<Longrightarrow> derivation_ge D j", "show ?case"], ["proof (prove)\nusing this:\n  j \\<le> i\n  i \\<le> k\n  i \\<le> fst d\n  j \\<le> k \\<Longrightarrow> derivation_ge D j\n\ngoal (1 subgoal):\n 1. derivation_ge (d # D) j", "by (simp add: derivation_ge_cons)"], ["proof (state)\nthis:\n  derivation_ge (d # D) j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  derivation_ge (d # D) j\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derivation_ge_list_all: \"derivation_ge D i = list_all (\\<lambda> d. fst d \\<ge> i) D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D i = list_all (\\<lambda>d. i \\<le> fst d) D", "by (simp add: Ball_set derivation_ge_def)"], ["", "lemma split_derivation_leftmost:\n  assumes \"derivation_ge D i\"\n  and \"\\<not> (derivation_ge D (Suc i))\"\n  shows \"\\<exists> E F r. D = E@[(i, r)]@F \\<and> derivation_ge E (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "from assms"], ["proof (chain)\npicking this:\n  derivation_ge D i\n  \\<not> derivation_ge D (Suc i)", "have \"\\<exists> k. k < length D \\<and> fst(D ! k) \\<ge> i \\<and> \\<not>(fst(D ! k) \\<ge> Suc i)\""], ["proof (prove)\nusing this:\n  derivation_ge D i\n  \\<not> derivation_ge D (Suc i)\n\ngoal (1 subgoal):\n 1. \\<exists>k<length D.\n       i \\<le> fst (D ! k) \\<and> \\<not> Suc i \\<le> fst (D ! k)", "by (metis derivation_ge_def in_set_conv_nth)"], ["proof (state)\nthis:\n  \\<exists>k<length D.\n     i \\<le> fst (D ! k) \\<and> \\<not> Suc i \\<le> fst (D ! k)\n\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<length D.\n     i \\<le> fst (D ! k) \\<and> \\<not> Suc i \\<le> fst (D ! k)", "have \"\\<exists> k. k < length D \\<and> fst(D ! k) = i\""], ["proof (prove)\nusing this:\n  \\<exists>k<length D.\n     i \\<le> fst (D ! k) \\<and> \\<not> Suc i \\<le> fst (D ! k)\n\ngoal (1 subgoal):\n 1. \\<exists>k<length D. fst (D ! k) = i", "by auto"], ["proof (state)\nthis:\n  \\<exists>k<length D. fst (D ! k) = i\n\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "then"], ["proof (chain)\npicking this:\n  \\<exists>k<length D. fst (D ! k) = i", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>k<length D. fst (D ! k) = i\n\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "proof(induct rule: ex_minimal_witness)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "case (Minimal k)"], ["proof (state)\nthis:\n  k < length D \\<and> fst (D ! k) = i\n  ?k < k \\<Longrightarrow> \\<not> (?k < length D \\<and> fst (D ! ?k) = i)\n\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "then"], ["proof (chain)\npicking this:\n  k < length D \\<and> fst (D ! k) = i\n  ?k < k \\<Longrightarrow> \\<not> (?k < length D \\<and> fst (D ! ?k) = i)", "have k_len: \"k < length D\" and k_i: \"fst (D ! k) = i\""], ["proof (prove)\nusing this:\n  k < length D \\<and> fst (D ! k) = i\n  ?k < k \\<Longrightarrow> \\<not> (?k < length D \\<and> fst (D ! ?k) = i)\n\ngoal (1 subgoal):\n 1. k < length D &&& fst (D ! k) = i", "by auto"], ["proof (state)\nthis:\n  k < length D\n  fst (D ! k) = i\n\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "let ?E = \"take k D\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "let ?r = \"snd (D ! k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "let ?F = \"drop (Suc k) D\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "note split = split_list_at[OF k_len]"], ["proof (state)\nthis:\n  D = take k D @ [D ! k] @ drop (Suc k) D\n\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "from k_i"], ["proof (chain)\npicking this:\n  fst (D ! k) = i", "have D_k: \"D ! k = (i, ?r)\""], ["proof (prove)\nusing this:\n  fst (D ! k) = i\n\ngoal (1 subgoal):\n 1. D ! k = (i, snd (D ! k))", "by auto"], ["proof (state)\nthis:\n  D ! k = (i, snd (D ! k))\n\ngoal (1 subgoal):\n 1. \\<And>K.\n       \\<lbrakk>K < length D \\<and> fst (D ! K) = i;\n        \\<And>k.\n           k < K \\<Longrightarrow>\n           \\<not> (k < length D \\<and> fst (D ! k) = i)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>E F r.\n                            D = E @ [(i, r)] @ F \\<and>\n                            derivation_ge E (Suc i)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "apply (rule exI[where x=\"?E\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F r.\n       D = take k D @ [(i, r)] @ F \\<and> derivation_ge (take k D) (Suc i)", "apply (rule exI[where x=\"?F\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       D = take k D @ [(i, r)] @ drop (Suc k) D \\<and>\n       derivation_ge (take k D) (Suc i)", "apply (rule exI[where x=\"?r\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. D = take k D @ [(i, snd (D ! k))] @ drop (Suc k) D \\<and>\n    derivation_ge (take k D) (Suc i)", "apply (subst D_k[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. D = take k D @ [D ! k] @ drop (Suc k) D \\<and>\n    derivation_ge (take k D) (Suc i)", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. D = take k D @ [D ! k] @ drop (Suc k) D\n 2. derivation_ge (take k D) (Suc i)", "apply (rule split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (take k D) (Suc i)", "by (metis (mono_tags, lifting) Minimal.hyps(2) Suc_leI assms(1) \n            derivation_ge_list_all le_neq_implies_less list_all_length list_all_take)"], ["proof (state)\nthis:\n  \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derives1_Derives1_swap:\n  assumes \"i < j\"\n  and \"Derives1 a j p b\"\n  and \"Derives1 b i q c\"\n  shows \"\\<exists> b'. Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from Derives1_split[OF assms(2)]"], ["proof (chain)\npicking this:\n  \\<exists>x y.\n     a = x @ [fst p] @ y \\<and> b = x @ snd p @ y \\<and> length x = j", "obtain a1 a2 where\n    a_src: \"a = a1 @ [fst p] @ a2\" and a_dest: \"b = a1 @ snd p @ a2\" \n    and a1_len: \"length a1 = j\""], ["proof (prove)\nusing this:\n  \\<exists>x y.\n     a = x @ [fst p] @ y \\<and> b = x @ snd p @ y \\<and> length x = j\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2.\n        \\<lbrakk>a = a1 @ [fst p] @ a2; b = a1 @ snd p @ a2;\n         length a1 = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "note a = this"], ["proof (state)\nthis:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from a"], ["proof (chain)\npicking this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j", "have is_sentence_a1: \"is_sentence a1\""], ["proof (prove)\nusing this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n\ngoal (1 subgoal):\n 1. is_sentence a1", "using Derives1_sentence2 assms(2) is_sentence_concat"], ["proof (prove)\nusing this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?b\n  Derives1 a j p b\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. is_sentence a1", "by blast"], ["proof (state)\nthis:\n  is_sentence a1\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from a"], ["proof (chain)\npicking this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j", "have is_sentence_a2: \"is_sentence a2\""], ["proof (prove)\nusing this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n\ngoal (1 subgoal):\n 1. is_sentence a2", "using Derives1_sentence2 assms(2) is_sentence_concat"], ["proof (prove)\nusing this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?b\n  Derives1 a j p b\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. is_sentence a2", "by blast"], ["proof (state)\nthis:\n  is_sentence a2\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from a"], ["proof (chain)\npicking this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j", "have is_symbol_fst_p:  \"is_symbol (fst p)\""], ["proof (prove)\nusing this:\n  a = a1 @ [fst p] @ a2\n  b = a1 @ snd p @ a2\n  length a1 = j\n\ngoal (1 subgoal):\n 1. is_symbol (fst p)", "by (metis Derives1_sentence1 assms(2) is_sentence_concat is_sentence_cons)"], ["proof (state)\nthis:\n  is_symbol (fst p)\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from Derives1_split[OF assms(3)]"], ["proof (chain)\npicking this:\n  \\<exists>x y.\n     b = x @ [fst q] @ y \\<and> c = x @ snd q @ y \\<and> length x = i", "obtain b1 b2 where\n    b_src: \"b = b1 @ [fst q] @ b2\" and b_dest: \"c = b1 @ snd q @ b2\" \n    and b1_len: \"length b1 = i\""], ["proof (prove)\nusing this:\n  \\<exists>x y.\n     b = x @ [fst q] @ y \\<and> c = x @ snd q @ y \\<and> length x = i\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2.\n        \\<lbrakk>b = b1 @ [fst q] @ b2; c = b1 @ snd q @ b2;\n         length b1 = i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  b = b1 @ [fst q] @ b2\n  c = b1 @ snd q @ b2\n  length b1 = i\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have a_take_j: \"a1 = take j a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1 = take j a", "by (metis a1_len a_src append_eq_conv_conj)"], ["proof (state)\nthis:\n  a1 = take j a\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have b_take_i: \"b1 @ [fst q] = take (Suc i) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 @ [fst q] = take (Suc i) b", "by (metis append_assoc append_eq_conv_conj b1_len b_src length_append_singleton)"], ["proof (state)\nthis:\n  b1 @ [fst q] = take (Suc i) b\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from a_take_j b_take_i  take_eq_take_append[where j=j and i=\"Suc i\" and a=a]"], ["proof (chain)\npicking this:\n  a1 = take j a\n  b1 @ [fst q] = take (Suc i) b\n  \\<lbrakk>Suc i \\<le> j; j \\<le> length a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. take j a = take (Suc i) a @ u", "have \"\\<exists> u. a1 = (b1 @ [fst q]) @ u\""], ["proof (prove)\nusing this:\n  a1 = take j a\n  b1 @ [fst q] = take (Suc i) b\n  \\<lbrakk>Suc i \\<le> j; j \\<le> length a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>u. take j a = take (Suc i) a @ u\n\ngoal (1 subgoal):\n 1. \\<exists>u. a1 = (b1 @ [fst q]) @ u", "by (metis le_iff_add Suc_leI a1_len a_dest append_eq_conv_conj assms(1) take_add)"], ["proof (state)\nthis:\n  \\<exists>u. a1 = (b1 @ [fst q]) @ u\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "then"], ["proof (chain)\npicking this:\n  \\<exists>u. a1 = (b1 @ [fst q]) @ u", "obtain u where u1: \"a1 = (b1 @ [fst q]) @ u\""], ["proof (prove)\nusing this:\n  \\<exists>u. a1 = (b1 @ [fst q]) @ u\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        a1 = (b1 @ [fst q]) @ u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a1 = (b1 @ [fst q]) @ u\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "then"], ["proof (chain)\npicking this:\n  a1 = (b1 @ [fst q]) @ u", "have j_i_u: \"j = i + 1 + length u\""], ["proof (prove)\nusing this:\n  a1 = (b1 @ [fst q]) @ u\n\ngoal (1 subgoal):\n 1. j = i + 1 + length u", "using Suc_eq_plus1 a1_len b1_len length_append length_append_singleton"], ["proof (prove)\nusing this:\n  a1 = (b1 @ [fst q]) @ u\n  Suc ?n = ?n + 1\n  length a1 = j\n  length b1 = i\n  length (?xs @ ?ys) = length ?xs + length ?ys\n  length (?xs @ [?x]) = Suc (length ?xs)\n\ngoal (1 subgoal):\n 1. j = i + 1 + length u", "by auto"], ["proof (state)\nthis:\n  j = i + 1 + length u\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from u1 is_sentence_a1"], ["proof (chain)\npicking this:\n  a1 = (b1 @ [fst q]) @ u\n  is_sentence a1", "have is_sentence_b1_u: \"is_sentence b1 \\<and> is_sentence u\""], ["proof (prove)\nusing this:\n  a1 = (b1 @ [fst q]) @ u\n  is_sentence a1\n\ngoal (1 subgoal):\n 1. is_sentence b1 \\<and> is_sentence u", "using is_sentence_concat"], ["proof (prove)\nusing this:\n  a1 = (b1 @ [fst q]) @ u\n  is_sentence a1\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. is_sentence b1 \\<and> is_sentence u", "by blast"], ["proof (state)\nthis:\n  is_sentence b1 \\<and> is_sentence u\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have u2: \"b2 = u @ snd p @ a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b2 = u @ snd p @ a2", "by (metis a_dest append_assoc b_src same_append_eq u1)"], ["proof (state)\nthis:\n  b2 = u @ snd p @ a2\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "let ?b = \"b1 @ (snd q) @ u @ [fst p] @ a2\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from assms"], ["proof (chain)\npicking this:\n  i < j\n  Derives1 a j p b\n  Derives1 b i q c", "have q_dom: \"q \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  i < j\n  Derives1 a j p b\n  Derives1 b i q c\n\ngoal (1 subgoal):\n 1. q \\<in> \\<RR>", "by auto"], ["proof (state)\nthis:\n  q \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have a_b': \"Derives1 a i q ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i q (b1 @ snd q @ u @ [fst p] @ a2)", "apply (subst Derives1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y N \\<alpha>.\n       a = x @ [N] @ y \\<and>\n       b1 @ snd q @ u @ [fst p] @ a2 = x @ \\<alpha> @ y \\<and>\n       is_sentence x \\<and>\n       is_sentence y \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       q = (N, \\<alpha>) \\<and> i = length x", "apply (rule exI[where x=\"b1\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y N \\<alpha>.\n       a = b1 @ [N] @ y \\<and>\n       b1 @ snd q @ u @ [fst p] @ a2 = b1 @ \\<alpha> @ y \\<and>\n       is_sentence b1 \\<and>\n       is_sentence y \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       q = (N, \\<alpha>) \\<and> i = length b1", "apply (rule exI[where x=\"u@[fst p]@a2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N \\<alpha>.\n       a = b1 @ [N] @ u @ [fst p] @ a2 \\<and>\n       b1 @ snd q @ u @ [fst p] @ a2 =\n       b1 @ \\<alpha> @ u @ [fst p] @ a2 \\<and>\n       is_sentence b1 \\<and>\n       is_sentence (u @ [fst p] @ a2) \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       q = (N, \\<alpha>) \\<and> i = length b1", "apply (rule exI[where x=\"fst q\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       a = b1 @ [fst q] @ u @ [fst p] @ a2 \\<and>\n       b1 @ snd q @ u @ [fst p] @ a2 =\n       b1 @ \\<alpha> @ u @ [fst p] @ a2 \\<and>\n       is_sentence b1 \\<and>\n       is_sentence (u @ [fst p] @ a2) \\<and>\n       (fst q, \\<alpha>) \\<in> \\<RR> \\<and>\n       q = (fst q, \\<alpha>) \\<and> i = length b1", "apply (rule exI[where x=\"snd q\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b1 @ [fst q] @ u @ [fst p] @ a2 \\<and>\n    b1 @ snd q @ u @ [fst p] @ a2 = b1 @ snd q @ u @ [fst p] @ a2 \\<and>\n    is_sentence b1 \\<and>\n    is_sentence (u @ [fst p] @ a2) \\<and>\n    (fst q, snd q) \\<in> \\<RR> \\<and>\n    q = (fst q, snd q) \\<and> i = length b1", "apply (auto simp add: b1_len is_sentence_cons is_sentence_concat\n           is_sentence_a2 is_symbol_fst_p is_sentence_b1_u a_src u1 q_dom)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Derives1 a i q (b1 @ snd q @ u @ [fst p] @ a2)\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "from assms"], ["proof (chain)\npicking this:\n  i < j\n  Derives1 a j p b\n  Derives1 b i q c", "have p_dom: \"p \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  i < j\n  Derives1 a j p b\n  Derives1 b i q c\n\ngoal (1 subgoal):\n 1. p \\<in> \\<RR>", "by auto"], ["proof (state)\nthis:\n  p \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have is_sentence_snd_q: \"is_sentence (snd q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (snd q)", "using Derives1_sentence2 a_b' is_sentence_concat"], ["proof (prove)\nusing this:\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?b\n  Derives1 a i q (b1 @ snd q @ u @ [fst p] @ a2)\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. is_sentence (snd q)", "by blast"], ["proof (state)\nthis:\n  is_sentence (snd q)\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "have b'_c: \"Derives1 ?b (j - 1 + length (snd q)) p c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (b1 @ snd q @ u @ [fst p] @ a2) (j - 1 + length (snd q)) p c", "apply (subst Derives1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y N \\<alpha>.\n       b1 @ snd q @ u @ [fst p] @ a2 = x @ [N] @ y \\<and>\n       c = x @ \\<alpha> @ y \\<and>\n       is_sentence x \\<and>\n       is_sentence y \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       p = (N, \\<alpha>) \\<and> j - 1 + length (snd q) = length x", "apply (rule exI[where x=\"b1 @ (snd q) @ u\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y N \\<alpha>.\n       b1 @ snd q @ u @ [fst p] @ a2 = (b1 @ snd q @ u) @ [N] @ y \\<and>\n       c = (b1 @ snd q @ u) @ \\<alpha> @ y \\<and>\n       is_sentence (b1 @ snd q @ u) \\<and>\n       is_sentence y \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       p = (N, \\<alpha>) \\<and>\n       j - 1 + length (snd q) = length (b1 @ snd q @ u)", "apply (rule exI[where x=\"a2\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N \\<alpha>.\n       b1 @ snd q @ u @ [fst p] @ a2 = (b1 @ snd q @ u) @ [N] @ a2 \\<and>\n       c = (b1 @ snd q @ u) @ \\<alpha> @ a2 \\<and>\n       is_sentence (b1 @ snd q @ u) \\<and>\n       is_sentence a2 \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and>\n       p = (N, \\<alpha>) \\<and>\n       j - 1 + length (snd q) = length (b1 @ snd q @ u)", "apply (rule exI[where x=\"fst p\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       b1 @ snd q @ u @ [fst p] @ a2 =\n       (b1 @ snd q @ u) @ [fst p] @ a2 \\<and>\n       c = (b1 @ snd q @ u) @ \\<alpha> @ a2 \\<and>\n       is_sentence (b1 @ snd q @ u) \\<and>\n       is_sentence a2 \\<and>\n       (fst p, \\<alpha>) \\<in> \\<RR> \\<and>\n       p = (fst p, \\<alpha>) \\<and>\n       j - 1 + length (snd q) = length (b1 @ snd q @ u)", "apply (rule exI[where x=\"snd p\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 @ snd q @ u @ [fst p] @ a2 = (b1 @ snd q @ u) @ [fst p] @ a2 \\<and>\n    c = (b1 @ snd q @ u) @ snd p @ a2 \\<and>\n    is_sentence (b1 @ snd q @ u) \\<and>\n    is_sentence a2 \\<and>\n    (fst p, snd p) \\<in> \\<RR> \\<and>\n    p = (fst p, snd p) \\<and>\n    j - 1 + length (snd q) = length (b1 @ snd q @ u)", "apply (auto simp add: is_sentence_concat is_sentence_b1_u is_sentence_a2 p_dom\n           is_sentence_snd_q b_dest u2 b1_len j_i_u)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Derives1 (b1 @ snd q @ u @ [fst p] @ a2) (j - 1 + length (snd q)) p c\n\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b'.\n       Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c", "apply (rule exI[where x=\"?b\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 a i q (b1 @ snd q @ u @ [fst p] @ a2) \\<and>\n    Derives1 (b1 @ snd q @ u @ [fst p] @ a2) (j - 1 + length (snd q)) p c", "apply (rule conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Derives1 a i q (b1 @ snd q @ u @ [fst p] @ a2)\n 2. Derives1 (b1 @ snd q @ u @ [fst p] @ a2) (j - 1 + length (snd q)) p c", "apply (rule a_b')"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (b1 @ snd q @ u @ [fst p] @ a2) (j - 1 + length (snd q)) p c", "apply (rule b'_c)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>b'.\n     Derives1 a i q b' \\<and> Derives1 b' (j - 1 + length (snd q)) p c\n\ngoal:\nNo subgoals!", "qed"], ["", "definition derivation_shift :: \"derivation \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> derivation\"\nwhere\n  \"derivation_shift D left right = map (\\<lambda> d. (fst d - left + right, snd d)) D\""], ["", "lemma derivation_shift_empty[simp]: \"derivation_shift [] left right = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift [] left right = []", "by (auto simp add: derivation_shift_def)"], ["", "lemma derivation_shift_cons[simp]:\n  \"derivation_shift (d#D) left right = ((fst d - left + right, snd d)#(derivation_shift D left right))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift (d # D) left right =\n    (fst d - left + right, snd d) # derivation_shift D left right", "by (simp add: derivation_shift_def)"], ["", "lemma Derivation_append: \"Derivation a (D@E) c = (\\<exists> b. Derivation a D b \\<and> Derivation b E c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a (D @ E) c =\n    (\\<exists>b. Derivation a D b \\<and> Derivation b E c)", "proof(induct D arbitrary: a c E)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a c E.\n       Derivation a ([] @ E) c =\n       (\\<exists>b. Derivation a [] b \\<and> Derivation b E c)\n 2. \\<And>a D aa c E.\n       (\\<And>a c E.\n           Derivation a (D @ E) c =\n           (\\<exists>b.\n               Derivation a D b \\<and> Derivation b E c)) \\<Longrightarrow>\n       Derivation aa ((a # D) @ E) c =\n       (\\<exists>b. Derivation aa (a # D) b \\<and> Derivation b E c)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a c E.\n       Derivation a ([] @ E) c =\n       (\\<exists>b. Derivation a [] b \\<and> Derivation b E c)\n 2. \\<And>a D aa c E.\n       (\\<And>a c E.\n           Derivation a (D @ E) c =\n           (\\<exists>b.\n               Derivation a D b \\<and> Derivation b E c)) \\<Longrightarrow>\n       Derivation aa ((a # D) @ E) c =\n       (\\<exists>b. Derivation aa (a # D) b \\<and> Derivation b E c)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a ([] @ E) c =\n    (\\<exists>b. Derivation a [] b \\<and> Derivation b E c)", "by auto"], ["proof (state)\nthis:\n  Derivation a ([] @ E) c =\n  (\\<exists>b. Derivation a [] b \\<and> Derivation b E c)\n\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           Derivation a (D @ E) c =\n           (\\<exists>b.\n               Derivation a D b \\<and> Derivation b E c)) \\<Longrightarrow>\n       Derivation aa ((a # D) @ E) c =\n       (\\<exists>b. Derivation aa (a # D) b \\<and> Derivation b E c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           Derivation a (D @ E) c =\n           (\\<exists>b.\n               Derivation a D b \\<and> Derivation b E c)) \\<Longrightarrow>\n       Derivation aa ((a # D) @ E) c =\n       (\\<exists>b. Derivation aa (a # D) b \\<and> Derivation b E c)", "case (Cons d D)"], ["proof (state)\nthis:\n  Derivation ?a (D @ ?E) ?c =\n  (\\<exists>b. Derivation ?a D b \\<and> Derivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           Derivation a (D @ E) c =\n           (\\<exists>b.\n               Derivation a D b \\<and> Derivation b E c)) \\<Longrightarrow>\n       Derivation aa ((a # D) @ E) c =\n       (\\<exists>b. Derivation aa (a # D) b \\<and> Derivation b E c)", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation ?a (D @ ?E) ?c =\n  (\\<exists>b. Derivation ?a D b \\<and> Derivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. Derivation a ((d # D) @ E) c =\n    (\\<exists>b. Derivation a (d # D) b \\<and> Derivation b E c)", "by auto"], ["proof (state)\nthis:\n  Derivation a ((d # D) @ E) c =\n  (\\<exists>b. Derivation a (d # D) b \\<and> Derivation b E c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_implies_append: \n  \"Derivation a D b \\<Longrightarrow> Derivation b E c \\<Longrightarrow> Derivation a (D@E) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a D b; Derivation b E c\\<rbrakk>\n    \\<Longrightarrow> Derivation a (D @ E) c", "using Derivation_append"], ["proof (prove)\nusing this:\n  Derivation ?a (?D @ ?E) ?c =\n  (\\<exists>b. Derivation ?a ?D b \\<and> Derivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a D b; Derivation b E c\\<rbrakk>\n    \\<Longrightarrow> Derivation a (D @ E) c", "by blast"], ["", "lemma Derivation_swap_single_end_to_front: \n  \"i < j \\<Longrightarrow> derivation_ge D j \\<Longrightarrow> Derivation a (D@[(i,r)]) b \\<Longrightarrow>\n   Derivation a ((i,r)#(derivation_shift D 1 (length (snd r)))) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < j; derivation_ge D j;\n     Derivation a (D @ [(i, r)]) b\\<rbrakk>\n    \\<Longrightarrow> Derivation a\n                       ((i, r) # derivation_shift D 1 (length (snd r))) b", "proof(induct D arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>i < j; derivation_ge [] j;\n        Derivation a ([] @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation a\n                          ((i, r) # derivation_shift [] 1 (length (snd r)))\n                          b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "case Nil"], ["proof (state)\nthis:\n  i < j\n  derivation_ge [] j\n  Derivation a ([] @ [(i, r)]) b\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>i < j; derivation_ge [] j;\n        Derivation a ([] @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation a\n                          ((i, r) # derivation_shift [] 1 (length (snd r)))\n                          b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "thus ?case"], ["proof (prove)\nusing this:\n  i < j\n  derivation_ge [] j\n  Derivation a ([] @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift [] 1 (length (snd r))) b", "by auto"], ["proof (state)\nthis:\n  Derivation a ((i, r) # derivation_shift [] 1 (length (snd r))) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>i < j; derivation_ge D j; Derivation ?a (D @ [(i, r)]) b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((i, r) # derivation_shift D 1 (length (snd r))) b\n  i < j\n  derivation_ge (d # D) j\n  Derivation a ((d # D) @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>i < j; derivation_ge D j; Derivation ?a (D @ [(i, r)]) b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((i, r) # derivation_shift D 1 (length (snd r))) b\n  i < j\n  derivation_ge (d # D) j\n  Derivation a ((d # D) @ [(i, r)]) b", "have \"\\<exists> c. Derives1 a (fst d) (snd d) c \\<and> Derivation c (D @ [(i, r)]) b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>i < j; derivation_ge D j; Derivation ?a (D @ [(i, r)]) b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((i, r) # derivation_shift D 1 (length (snd r))) b\n  i < j\n  derivation_ge (d # D) j\n  Derivation a ((d # D) @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. \\<exists>c.\n       Derives1 a (fst d) (snd d) c \\<and> Derivation c (D @ [(i, r)]) b", "by simp"], ["proof (state)\nthis:\n  \\<exists>c.\n     Derives1 a (fst d) (snd d) c \\<and> Derivation c (D @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "then"], ["proof (chain)\npicking this:\n  \\<exists>c.\n     Derives1 a (fst d) (snd d) c \\<and> Derivation c (D @ [(i, r)]) b", "obtain c where ac: \"Derives1 a (fst d) (snd d) c\"\n    and cb: \"Derivation c (D @ [(i, r)]) b\""], ["proof (prove)\nusing this:\n  \\<exists>c.\n     Derives1 a (fst d) (snd d) c \\<and> Derivation c (D @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>Derives1 a (fst d) (snd d) c;\n         Derivation c (D @ [(i, r)]) b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a (fst d) (snd d) c\n  Derivation c (D @ [(i, r)]) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "from Cons(3)"], ["proof (chain)\npicking this:\n  derivation_ge (d # D) j", "have D_j: \"derivation_ge D j\""], ["proof (prove)\nusing this:\n  derivation_ge (d # D) j\n\ngoal (1 subgoal):\n 1. derivation_ge D j", "by (simp add: derivation_ge_cons)"], ["proof (state)\nthis:\n  derivation_ge D j\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "from Cons(1)[OF Cons(2) D_j cb, simplified]"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     Derives1 c i r x \\<and>\n     Derivation x (derivation_shift D (Suc 0) (length (snd r))) b", "obtain x where cx: \"Derives1 c i r x\" and  \n    xb: \"Derivation x (derivation_shift D 1 (length (snd r))) b\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     Derives1 c i r x \\<and>\n     Derivation x (derivation_shift D (Suc 0) (length (snd r))) b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derives1 c i r x;\n         Derivation x (derivation_shift D 1 (length (snd r))) b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Derives1 c i r x\n  Derivation x (derivation_shift D 1 (length (snd r))) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "have i_fst_d: \"i < fst d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < fst d", "using Cons derivation_ge_cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>i < j; derivation_ge D j; Derivation ?a (D @ [(i, r)]) b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((i, r) # derivation_shift D 1 (length (snd r))) b\n  i < j\n  derivation_ge (d # D) j\n  Derivation a ((d # D) @ [(i, r)]) b\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. i < fst d", "by auto"], ["proof (state)\nthis:\n  i < fst d\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "from Derives1_Derives1_swap[OF i_fst_d ac cx]"], ["proof (chain)\npicking this:\n  \\<exists>b'.\n     Derives1 a i r b' \\<and>\n     Derives1 b' (fst d - 1 + length (snd r)) (snd d) x", "obtain b' where ab': \"Derives1 a i r b'\" and \n    b'x: \"Derives1 b' (fst d - 1 + length (snd r)) (snd d) x\""], ["proof (prove)\nusing this:\n  \\<exists>b'.\n     Derives1 a i r b' \\<and>\n     Derives1 b' (fst d - 1 + length (snd r)) (snd d) x\n\ngoal (1 subgoal):\n 1. (\\<And>b'.\n        \\<lbrakk>Derives1 a i r b';\n         Derives1 b' (fst d - 1 + length (snd r)) (snd d) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a i r b'\n  Derives1 b' (fst d - 1 + length (snd r)) (snd d) x\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   \\<lbrakk>i < j; derivation_ge D j;\n                    Derivation a (D @ [(i, r)]) b\\<rbrakk>\n                   \\<Longrightarrow> Derivation a\n((i, r) # derivation_shift D 1 (length (snd r))) b;\n        i < j; derivation_ge (a # D) j;\n        Derivation aa ((a # D) @ [(i, r)]) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa\n                          ((i, r) #\n                           derivation_shift (a # D) 1 (length (snd r)))\n                          b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift (d # D) 1 (length (snd r))) b", "using ab' b'x xb"], ["proof (prove)\nusing this:\n  Derives1 a i r b'\n  Derives1 b' (fst d - 1 + length (snd r)) (snd d) x\n  Derivation x (derivation_shift D 1 (length (snd r))) b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift (d # D) 1 (length (snd r))) b", "by auto"], ["proof (state)\nthis:\n  Derivation a ((i, r) # derivation_shift (d # D) 1 (length (snd r))) b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_swap_single_mid_to_front: \n  assumes \"i < j\"\n  and \"derivation_ge D j\" \n  and \"Derivation a (D@[(i,r)]@E) b\"\n  shows \"Derivation a ((i,r)#((derivation_shift D 1 (length (snd r)))@E)) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "from assms"], ["proof (chain)\npicking this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b", "have \"\\<exists> x. Derivation a (D@[(i, r)]) x \\<and> Derivation x E b\""], ["proof (prove)\nusing this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derivation a (D @ [(i, r)]) x \\<and> Derivation x E b", "using Derivation_append"], ["proof (prove)\nusing this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b\n  Derivation ?a (?D @ ?E) ?c =\n  (\\<exists>b. Derivation ?a ?D b \\<and> Derivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derivation a (D @ [(i, r)]) x \\<and> Derivation x E b", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derivation a (D @ [(i, r)]) x \\<and> Derivation x E b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derivation a (D @ [(i, r)]) x \\<and> Derivation x E b", "obtain x where ax: \"Derivation a (D@[(i, r)]) x\" and xb: \"Derivation x E b\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derivation a (D @ [(i, r)]) x \\<and> Derivation x E b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>Derivation a (D @ [(i, r)]) x; Derivation x E b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derivation a (D @ [(i, r)]) x\n  Derivation x E b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "with assms"], ["proof (chain)\npicking this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b\n  Derivation a (D @ [(i, r)]) x\n  Derivation x E b", "have \"Derivation a ((i, r)#(derivation_shift D 1 (length (snd r)))) x\""], ["proof (prove)\nusing this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b\n  Derivation a (D @ [(i, r)]) x\n  Derivation x E b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x", "using Derivation_swap_single_end_to_front"], ["proof (prove)\nusing this:\n  i < j\n  derivation_ge D j\n  Derivation a (D @ [(i, r)] @ E) b\n  Derivation a (D @ [(i, r)]) x\n  Derivation x E b\n  \\<lbrakk>?i < ?j; derivation_ge ?D ?j;\n   Derivation ?a (?D @ [(?i, ?r)]) ?b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((?i, ?r) # derivation_shift ?D 1 (length (snd ?r))) ?b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x", "by blast"], ["proof (state)\nthis:\n  Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "then"], ["proof (chain)\npicking this:\n  Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x", "show ?thesis"], ["proof (prove)\nusing this:\n  Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "using Derivation_append xb"], ["proof (prove)\nusing this:\n  Derivation a ((i, r) # derivation_shift D 1 (length (snd r))) x\n  Derivation ?a (?D @ ?E) ?c =\n  (\\<exists>b. Derivation ?a ?D b \\<and> Derivation b ?E ?c)\n  Derivation x E b\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b", "by auto"], ["proof (state)\nthis:\n  Derivation a ((i, r) # derivation_shift D 1 (length (snd r)) @ E) b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma length_derivation_shift[simp]: \n  \"length(derivation_shift D left right) = length D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (derivation_shift D left right) = length D", "by (simp add: derivation_shift_def)"], ["", "definition LeftDerives1 :: \"sentence \\<Rightarrow> nat \\<Rightarrow> rule \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere \n  \"LeftDerives1 u i r v = (leftmost i u \\<and> Derives1 u i r v)\""], ["", "lemma LeftDerives1_implies_leftderives1: \"LeftDerives1 u i r v \\<Longrightarrow> leftderives1 u v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 u i r v \\<Longrightarrow> leftderives1 u v", "by (metis Derives1_def LeftDerives1_def append_eq_conv_conj leftderives1_def \n    leftmost_def)"], ["", "lemma leftmost_Derives1_leftderives: \n  \"leftmost i a \\<Longrightarrow> Derives1 a i r b \\<Longrightarrow> leftderives b c \\<Longrightarrow> leftderives a c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; Derives1 a i r b; leftderives b c\\<rbrakk>\n    \\<Longrightarrow> leftderives a c", "using LeftDerives1_def LeftDerives1_implies_leftderives1 \n  leftderives1_implies_leftderives leftderives_trans"], ["proof (prove)\nusing this:\n  LeftDerives1 ?u ?i ?r ?v = (leftmost ?i ?u \\<and> Derives1 ?u ?i ?r ?v)\n  LeftDerives1 ?u ?i ?r ?v \\<Longrightarrow> leftderives1 ?u ?v\n  leftderives1 ?a ?b \\<Longrightarrow> leftderives ?a ?b\n  \\<lbrakk>leftderives ?a ?b; leftderives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> leftderives ?a ?c\n\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i a; Derives1 a i r b; leftderives b c\\<rbrakk>\n    \\<Longrightarrow> leftderives a c", "by blast"], ["", "theorem Derivation_implies_leftderives_gen:\n  \"Derivation a D (u@v) \\<Longrightarrow> is_word u \\<Longrightarrow> (\\<exists> w. \n          leftderives a (u@w) \\<and> \n          (v = [] \\<longrightarrow> w = []) \\<and> \n          (\\<forall> X. is_first X v \\<longrightarrow> is_first X w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a D (u @ v); is_word u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w.\n                         leftderives a (u @ w) \\<and>\n                         (v = [] \\<longrightarrow> w = []) \\<and>\n                         (\\<forall>X.\n                             is_first X v \\<longrightarrow> is_first X w)", "proof (induct \"length D\" arbitrary: D a u v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D a u v.\n       \\<lbrakk>0 = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)\n 2. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "case 0"], ["proof (state)\nthis:\n  0 = length D\n  Derivation a D (u @ v)\n  is_word u\n\ngoal (2 subgoals):\n 1. \\<And>D a u v.\n       \\<lbrakk>0 = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)\n 2. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  0 = length D\n  Derivation a D (u @ v)\n  is_word u", "have \"a = u@v\""], ["proof (prove)\nusing this:\n  0 = length D\n  Derivation a D (u @ v)\n  is_word u\n\ngoal (1 subgoal):\n 1. a = u @ v", "by auto"], ["proof (state)\nthis:\n  a = u @ v\n\ngoal (2 subgoals):\n 1. \\<And>D a u v.\n       \\<lbrakk>0 = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)\n 2. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "thus ?case"], ["proof (prove)\nusing this:\n  a = u @ v\n\ngoal (1 subgoal):\n 1. \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "by (rule_tac x = v in exI, auto)"], ["proof (state)\nthis:\n  \\<exists>w.\n     leftderives a (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u", "have \"D \\<noteq> []\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n\ngoal (1 subgoal):\n 1. D \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "with Suc Derivation_leftmost"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n  \\<lbrakk>?D \\<noteq> []; Derivation ?a ?D ?b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i ?a\n  D \\<noteq> []", "have \"\\<exists> i. leftmost i a\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n  \\<lbrakk>?D \\<noteq> []; Derivation ?a ?D ?b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i ?a\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>i. leftmost i a", "by auto"], ["proof (state)\nthis:\n  \\<exists>i. leftmost i a\n\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>i. leftmost i a", "obtain i where i: \"leftmost i a\""], ["proof (prove)\nusing this:\n  \\<exists>i. leftmost i a\n\ngoal (1 subgoal):\n 1. (\\<And>i. leftmost i a \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  leftmost i a\n\ngoal (1 subgoal):\n 1. \\<And>x D a u v.\n       \\<lbrakk>\\<And>D a u v.\n                   \\<lbrakk>x = length D; Derivation a D (u @ v);\n                    is_word u\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>w.\n  leftderives a (u @ w) \\<and>\n  (v = [] \\<longrightarrow> w = []) \\<and>\n  (\\<forall>X. is_first X v \\<longrightarrow> is_first X w);\n        Suc x = length D; Derivation a D (u @ v); is_word u\\<rbrakk>\n       \\<Longrightarrow> \\<exists>w.\n                            leftderives a (u @ w) \\<and>\n                            (v = [] \\<longrightarrow> w = []) \\<and>\n                            (\\<forall>X.\n                                is_first X v \\<longrightarrow> is_first X w)", "show \"?case\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "proof (cases \"derivation_ge D (Suc i)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "case True"], ["proof (state)\nthis:\n  derivation_ge D (Suc i)\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "with Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n  derivation_ge D (Suc i)", "have leftmost: \"leftmost i (u@v)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>n = length ?D; Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  Suc n = length D\n  Derivation a D (u @ v)\n  is_word u\n  derivation_ge D (Suc i)\n\ngoal (1 subgoal):\n 1. leftmost i (u @ v)", "by (rule_tac leftmost_unaffected_Derivation[OF True i], auto)"], ["proof (state)\nthis:\n  leftmost i (u @ v)\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have length_u: \"length u \\<le> i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length u \\<le> i", "using leftmost_append[OF leftmost Suc(4)]"], ["proof (prove)\nusing this:\n  length u \\<le> i\n\ngoal (1 subgoal):\n 1. length u \\<le> i", "."], ["proof (state)\nthis:\n  length u \\<le> i\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have take_Suc: \"take (Suc i) a = take (Suc i) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc i) a = take (Suc i) (u @ v)", "using  Derivation_take[OF True Suc(3)]"], ["proof (prove)\nusing this:\n  take (Suc i) a = take (Suc i) (u @ v)\n\ngoal (1 subgoal):\n 1. take (Suc i) a = take (Suc i) (u @ v)", "."], ["proof (state)\nthis:\n  take (Suc i) a = take (Suc i) (u @ v)\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "with length_u"], ["proof (chain)\npicking this:\n  length u \\<le> i\n  take (Suc i) a = take (Suc i) (u @ v)", "have is_prefix_u: \"is_prefix u a\""], ["proof (prove)\nusing this:\n  length u \\<le> i\n  take (Suc i) a = take (Suc i) (u @ v)\n\ngoal (1 subgoal):\n 1. is_prefix u a", "by (metis append_assoc append_take_drop_id dual_order.strict_implies_order \n              is_prefix_def le_imp_less_Suc take_all take_append)"], ["proof (state)\nthis:\n  is_prefix u a\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have a: \"u @ drop (length u) a = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u @ drop (length u) a = a", "using is_prefix_unsplit[OF is_prefix_u]"], ["proof (prove)\nusing this:\n  u @ drop (length u) a = a\n\ngoal (1 subgoal):\n 1. u @ drop (length u) a = a", "."], ["proof (state)\nthis:\n  u @ drop (length u) a = a\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "from take_Suc"], ["proof (chain)\npicking this:\n  take (Suc i) a = take (Suc i) (u @ v)", "have length_take_Suc: \"length (take (Suc i) a) = Suc i\""], ["proof (prove)\nusing this:\n  take (Suc i) a = take (Suc i) (u @ v)\n\ngoal (1 subgoal):\n 1. length (take (Suc i) a) = Suc i", "by (metis Suc_leI i leftmost_def length_take min.absorb2)"], ["proof (state)\nthis:\n  length (take (Suc i) a) = Suc i\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have v: \"v \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<noteq> []", "proof(cases \"v = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []\n 2. v \\<noteq> [] \\<Longrightarrow> v \\<noteq> []", "case False"], ["proof (state)\nthis:\n  v \\<noteq> []\n\ngoal (2 subgoals):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []\n 2. v \\<noteq> [] \\<Longrightarrow> v \\<noteq> []", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. v \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "case True"], ["proof (state)\nthis:\n  v = []\n\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "with length_u"], ["proof (chain)\npicking this:\n  length u \\<le> i\n  v = []", "have right: \"length(take (Suc i) (u@v)) = length u\""], ["proof (prove)\nusing this:\n  length u \\<le> i\n  v = []\n\ngoal (1 subgoal):\n 1. length (take (Suc i) (u @ v)) = length u", "by simp"], ["proof (state)\nthis:\n  length (take (Suc i) (u @ v)) = length u\n\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "note left = length_take_Suc"], ["proof (state)\nthis:\n  length (take (Suc i) a) = Suc i\n\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "from left right take_Suc"], ["proof (chain)\npicking this:\n  length (take (Suc i) a) = Suc i\n  length (take (Suc i) (u @ v)) = length u\n  take (Suc i) a = take (Suc i) (u @ v)", "have \"Suc i = length u\""], ["proof (prove)\nusing this:\n  length (take (Suc i) a) = Suc i\n  length (take (Suc i) (u @ v)) = length u\n  take (Suc i) a = take (Suc i) (u @ v)\n\ngoal (1 subgoal):\n 1. Suc i = length u", "by auto"], ["proof (state)\nthis:\n  Suc i = length u\n\ngoal (1 subgoal):\n 1. v = [] \\<Longrightarrow> v \\<noteq> []", "with length_u"], ["proof (chain)\npicking this:\n  length u \\<le> i\n  Suc i = length u", "show ?thesis"], ["proof (prove)\nusing this:\n  length u \\<le> i\n  Suc i = length u\n\ngoal (1 subgoal):\n 1. v \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  v \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  v \\<noteq> []\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  v \\<noteq> []", "have \"\\<exists> X w. v = X#w\""], ["proof (prove)\nusing this:\n  v \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>X w. v = X # w", "by (cases v, auto)"], ["proof (state)\nthis:\n  \\<exists>X w. v = X # w\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>X w. v = X # w", "obtain X w where v: \"v = X#w\""], ["proof (prove)\nusing this:\n  \\<exists>X w. v = X # w\n\ngoal (1 subgoal):\n 1. (\\<And>X w. v = X # w \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  v = X # w\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have is_first_X: \"is_first X (drop (length u) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "apply (rule_tac is_first_drop_length[where v=v and w=w and k=\"Suc i\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. Suc i \\<le> length a\n 2. length u < Suc i\n 3. v = X # w\n 4. take (Suc i) a = take (Suc i) (u @ v)", "apply (simp_all add: take_Suc v)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Suc i \\<le> length a\n 2. length u < Suc i", "apply (metis Suc_leI i leftmost_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length u < Suc i", "apply (insert length_u)"], ["proof (prove)\ngoal (1 subgoal):\n 1. length u \\<le> i \\<Longrightarrow> length u < Suc i", "apply arith"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  is_first X (drop (length u) a)\n\ngoal (2 subgoals):\n 1. derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n 2. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "apply (rule exI[where x=\"drop (length u) a\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives a (u @ drop (length u) a) \\<and>\n    (v = [] \\<longrightarrow> drop (length u) a = []) \\<and>\n    (\\<forall>X.\n        is_first X v \\<longrightarrow> is_first X (drop (length u) a))", "by (simp add: a v is_first_cons is_first_X)"], ["proof (state)\nthis:\n  \\<exists>w.\n     leftderives a (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "case False"], ["proof (state)\nthis:\n  \\<not> derivation_ge D (Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have Di: \"derivation_ge D i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D i", "using leftmost_Derivation[OF i Suc(3), where j=i, simplified]"], ["proof (prove)\nusing this:\n  derivation_ge D i\n\ngoal (1 subgoal):\n 1. derivation_ge D i", "."], ["proof (state)\nthis:\n  derivation_ge D i\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "from split_derivation_leftmost[OF Di False]"], ["proof (chain)\npicking this:\n  \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)", "obtain E F r where D_split: \"D = E @ [(i, r)] @ F\" \n        and E_Suc: \"derivation_ge E (Suc i)\""], ["proof (prove)\nusing this:\n  \\<exists>E F r. D = E @ [(i, r)] @ F \\<and> derivation_ge E (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>E r F.\n        \\<lbrakk>D = E @ [(i, r)] @ F; derivation_ge E (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  D = E @ [(i, r)] @ F\n  derivation_ge E (Suc i)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "let ?D = \"(derivation_shift E 1 (length (snd r)))@F\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "from D_split"], ["proof (chain)\npicking this:\n  D = E @ [(i, r)] @ F", "have \"Derivation a ((i,r) # ?D) (u @ v)\""], ["proof (prove)\nusing this:\n  D = E @ [(i, r)] @ F\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift E 1 (length (snd r)) @ F)\n     (u @ v)", "using Derivation_swap_single_mid_to_front E_Suc Suc.prems(1) lessI"], ["proof (prove)\nusing this:\n  D = E @ [(i, r)] @ F\n  \\<lbrakk>?i < ?j; derivation_ge ?D ?j;\n   Derivation ?a (?D @ [(?i, ?r)] @ ?E) ?b\\<rbrakk>\n  \\<Longrightarrow> Derivation ?a\n                     ((?i, ?r) #\n                      derivation_shift ?D 1 (length (snd ?r)) @ ?E)\n                     ?b\n  derivation_ge E (Suc i)\n  Derivation a D (u @ v)\n  ?n < Suc ?n\n\ngoal (1 subgoal):\n 1. Derivation a ((i, r) # derivation_shift E 1 (length (snd r)) @ F)\n     (u @ v)", "by blast"], ["proof (state)\nthis:\n  Derivation a ((i, r) # derivation_shift E 1 (length (snd r)) @ F) (u @ v)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  Derivation a ((i, r) # derivation_shift E 1 (length (snd r)) @ F) (u @ v)", "have \"\\<exists> y. Derives1 a i r y \\<and> Derivation y ?D (u @ v)\""], ["proof (prove)\nusing this:\n  Derivation a ((i, r) # derivation_shift E 1 (length (snd r)) @ F) (u @ v)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       Derives1 a i r y \\<and>\n       Derivation y (derivation_shift E 1 (length (snd r)) @ F) (u @ v)", "by simp"], ["proof (state)\nthis:\n  \\<exists>y.\n     Derives1 a i r y \\<and>\n     Derivation y (derivation_shift E 1 (length (snd r)) @ F) (u @ v)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>y.\n     Derives1 a i r y \\<and>\n     Derivation y (derivation_shift E 1 (length (snd r)) @ F) (u @ v)", "obtain y where ay:\"Derives1 a i r y\" \n        and yuv: \"Derivation y ?D (u @ v)\""], ["proof (prove)\nusing this:\n  \\<exists>y.\n     Derives1 a i r y \\<and>\n     Derivation y (derivation_shift E 1 (length (snd r)) @ F) (u @ v)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>Derives1 a i r y;\n         Derivation y (derivation_shift E 1 (length (snd r)) @ F)\n          (u @ v)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 a i r y\n  Derivation y (derivation_shift E 1 (length (snd r)) @ F) (u @ v)\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "have length_D': \"length ?D = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (derivation_shift E 1 (length (snd r)) @ F) = n", "using D_split Suc.hyps(2)"], ["proof (prove)\nusing this:\n  D = E @ [(i, r)] @ F\n  Suc n = length D\n\ngoal (1 subgoal):\n 1. length (derivation_shift E 1 (length (snd r)) @ F) = n", "by auto"], ["proof (state)\nthis:\n  length (derivation_shift E 1 (length (snd r)) @ F) = n\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "from Suc(1)[OF length_D'[symmetric] yuv Suc(4)]"], ["proof (chain)\npicking this:\n  \\<exists>w.\n     leftderives y (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "obtain w where \"leftderives y (u @ w)\" and \"(v = [] \\<longrightarrow> w = [])\" \n        and \"\\<forall>X. is_first X v \\<longrightarrow> is_first X w\""], ["proof (prove)\nusing this:\n  \\<exists>w.\n     leftderives y (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        \\<lbrakk>leftderives y (u @ w); v = [] \\<longrightarrow> w = [];\n         \\<forall>X. is_first X v \\<longrightarrow> is_first X w\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  leftderives y (u @ w)\n  v = [] \\<longrightarrow> w = []\n  \\<forall>X. is_first X v \\<longrightarrow> is_first X w\n\ngoal (1 subgoal):\n 1. \\<not> derivation_ge D (Suc i) \\<Longrightarrow>\n    \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "then"], ["proof (chain)\npicking this:\n  leftderives y (u @ w)\n  v = [] \\<longrightarrow> w = []\n  \\<forall>X. is_first X v \\<longrightarrow> is_first X w", "show ?thesis"], ["proof (prove)\nusing this:\n  leftderives y (u @ w)\n  v = [] \\<longrightarrow> w = []\n  \\<forall>X. is_first X v \\<longrightarrow> is_first X w\n\ngoal (1 subgoal):\n 1. \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "using ay i leftmost_Derives1_leftderives"], ["proof (prove)\nusing this:\n  leftderives y (u @ w)\n  v = [] \\<longrightarrow> w = []\n  \\<forall>X. is_first X v \\<longrightarrow> is_first X w\n  Derives1 a i r y\n  leftmost i a\n  \\<lbrakk>leftmost ?i ?a; Derives1 ?a ?i ?r ?b; leftderives ?b ?c\\<rbrakk>\n  \\<Longrightarrow> leftderives ?a ?c\n\ngoal (1 subgoal):\n 1. \\<exists>w.\n       leftderives a (u @ w) \\<and>\n       (v = [] \\<longrightarrow> w = []) \\<and>\n       (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)", "by blast"], ["proof (state)\nthis:\n  \\<exists>w.\n     leftderives a (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>w.\n     leftderives a (u @ w) \\<and>\n     (v = [] \\<longrightarrow> w = []) \\<and>\n     (\\<forall>X. is_first X v \\<longrightarrow> is_first X w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives_implies_leftderives_gen: \"derives a (u@v) \\<Longrightarrow> is_word u \\<Longrightarrow> (\\<exists> w. \n          leftderives a (u@w) \\<and> \n          (v = [] \\<longrightarrow> w = []) \\<and> \n          (\\<forall> X. is_first X v \\<longrightarrow> is_first X w))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derives a (u @ v); is_word u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w.\n                         leftderives a (u @ w) \\<and>\n                         (v = [] \\<longrightarrow> w = []) \\<and>\n                         (\\<forall>X.\n                             is_first X v \\<longrightarrow> is_first X w)", "using Derivation_implies_leftderives_gen derives_implies_Derivation"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?a ?D (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  derives ?a ?b \\<Longrightarrow> \\<exists>D. Derivation ?a D ?b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>derives a (u @ v); is_word u\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w.\n                         leftderives a (u @ w) \\<and>\n                         (v = [] \\<longrightarrow> w = []) \\<and>\n                         (\\<forall>X.\n                             is_first X v \\<longrightarrow> is_first X w)", "by blast"], ["", "lemma derives_implies_leftderives: \"derives a b \\<Longrightarrow> is_word b \\<Longrightarrow> leftderives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derives a b; is_word b\\<rbrakk>\n    \\<Longrightarrow> leftderives a b", "using derives_implies_leftderives_gen"], ["proof (prove)\nusing this:\n  \\<lbrakk>derives ?a (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>derives a b; is_word b\\<rbrakk>\n    \\<Longrightarrow> leftderives a b", "by force"], ["", "fun LeftDerivation :: \"sentence \\<Rightarrow> derivation \\<Rightarrow> sentence \\<Rightarrow> bool\"\nwhere\n  \"LeftDerivation a [] b = (a = b)\"\n| \"LeftDerivation a (d#D) b = (\\<exists> x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b)\""], ["", "lemma LeftDerives1_implies_Derives1: \"LeftDerives1 a i r b \\<Longrightarrow> Derives1 a i r b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 a i r b \\<Longrightarrow> Derives1 a i r b", "by (metis LeftDerives1_def)"], ["", "lemma LeftDerivation_implies_Derivation:\n  \"LeftDerivation a D b \\<Longrightarrow> Derivation a D b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation a D b \\<Longrightarrow> Derivation a D b", "proof (induct D arbitrary: a)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a. LeftDerivation a [] b \\<Longrightarrow> Derivation a [] b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   LeftDerivation a D b \\<Longrightarrow> Derivation a D b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa (a # D) b", "case (Nil)"], ["proof (state)\nthis:\n  LeftDerivation a [] b\n\ngoal (2 subgoals):\n 1. \\<And>a. LeftDerivation a [] b \\<Longrightarrow> Derivation a [] b\n 2. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   LeftDerivation a D b \\<Longrightarrow> Derivation a D b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa (a # D) b", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation a [] b\n\ngoal (1 subgoal):\n 1. Derivation a [] b", "by simp"], ["proof (state)\nthis:\n  Derivation a [] b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   LeftDerivation a D b \\<Longrightarrow> Derivation a D b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa (a # D) b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   LeftDerivation a D b \\<Longrightarrow> Derivation a D b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa (a # D) b", "case (Cons d D)"], ["proof (state)\nthis:\n  LeftDerivation ?a D b \\<Longrightarrow> Derivation ?a D b\n  LeftDerivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa.\n       \\<lbrakk>\\<And>a.\n                   LeftDerivation a D b \\<Longrightarrow> Derivation a D b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> Derivation aa (a # D) b", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation ?a D b \\<Longrightarrow> Derivation ?a D b\n  LeftDerivation a (d # D) b\n\ngoal (1 subgoal):\n 1. Derivation a (d # D) b", "using CFG.LeftDerivation.simps(2) CFG_axioms Derivation.simps(2) \n    LeftDerives1_implies_Derives1"], ["proof (prove)\nusing this:\n  LeftDerivation ?a D b \\<Longrightarrow> Derivation ?a D b\n  LeftDerivation a (d # D) b\n  CFG ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> \\<Longrightarrow>\n  CFG.LeftDerivation ?\\<NN> ?\\<TT> ?\\<RR> ?a (?d # ?D) ?b =\n  (\\<exists>x.\n      CFG.LeftDerives1 ?\\<NN> ?\\<TT> ?\\<RR> ?a (fst ?d) (snd ?d) x \\<and>\n      CFG.LeftDerivation ?\\<NN> ?\\<TT> ?\\<RR> x ?D ?b)\n  CFG \\<NN> \\<TT> \\<RR> \\<SS>\n  Derivation ?a (?d # ?D) ?b =\n  (\\<exists>x. Derives1 ?a (fst ?d) (snd ?d) x \\<and> Derivation x ?D ?b)\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n\ngoal (1 subgoal):\n 1. Derivation a (d # D) b", "by blast"], ["proof (state)\nthis:\n  Derivation a (d # D) b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_implies_leftderives: \"LeftDerivation a D b \\<Longrightarrow> leftderives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation a D b \\<Longrightarrow> leftderives a b", "proof (induct D arbitrary: a b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b. LeftDerivation a [] b \\<Longrightarrow> leftderives a b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "case Nil"], ["proof (state)\nthis:\n  LeftDerivation a [] b\n\ngoal (2 subgoals):\n 1. \\<And>a b. LeftDerivation a [] b \\<Longrightarrow> leftderives a b\n 2. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation a [] b\n\ngoal (1 subgoal):\n 1. leftderives a b", "by simp"], ["proof (state)\nthis:\n  leftderives a b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "case (Cons d D)"], ["proof (state)\nthis:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "note ihyps = this"], ["proof (state)\nthis:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "from ihyps"], ["proof (chain)\npicking this:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b", "have \"\\<exists> x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b\""], ["proof (prove)\nusing this:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b", "obtain x where \"LeftDerives1 a (fst d) (snd d) x\" and xb: \"LeftDerivation x D b\""], ["proof (prove)\nusing this:\n  \\<exists>x. LeftDerives1 a (fst d) (snd d) x \\<and> LeftDerivation x D b\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>LeftDerives1 a (fst d) (snd d) x;\n         LeftDerivation x D b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 a (fst d) (snd d) x\n  LeftDerivation x D b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "with LeftDerives1_implies_leftderives1"], ["proof (chain)\npicking this:\n  LeftDerives1 ?u ?i ?r ?v \\<Longrightarrow> leftderives1 ?u ?v\n  LeftDerives1 a (fst d) (snd d) x\n  LeftDerivation x D b", "have d1: \"leftderives a x\""], ["proof (prove)\nusing this:\n  LeftDerives1 ?u ?i ?r ?v \\<Longrightarrow> leftderives1 ?u ?v\n  LeftDerives1 a (fst d) (snd d) x\n  LeftDerivation x D b\n\ngoal (1 subgoal):\n 1. leftderives a x", "by auto"], ["proof (state)\nthis:\n  leftderives a x\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "from ihyps xb"], ["proof (chain)\npicking this:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b\n  LeftDerivation x D b", "have d2:\"leftderives x b\""], ["proof (prove)\nusing this:\n  LeftDerivation ?a D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation a (d # D) b\n  LeftDerivation x D b\n\ngoal (1 subgoal):\n 1. leftderives x b", "by simp"], ["proof (state)\nthis:\n  leftderives x b\n\ngoal (1 subgoal):\n 1. \\<And>a D aa b.\n       \\<lbrakk>\\<And>a b.\n                   LeftDerivation a D b \\<Longrightarrow> leftderives a b;\n        LeftDerivation aa (a # D) b\\<rbrakk>\n       \\<Longrightarrow> leftderives aa b", "show \"leftderives a b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives a b", "by (rule leftderives_trans[OF d1 d2])"], ["proof (state)\nthis:\n  leftderives a b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftmost_witness[simp]: \"leftmost (length x) (x@(N#y)) = (is_word x \\<and> is_nonterminal N)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost (length x) (x @ N # y) = (is_word x \\<and> is_nonterminal N)", "by (auto simp add: leftmost_def)"], ["", "lemma leftderives1_implies_LeftDerives1: \n  assumes leftderives1: \"leftderives1 u v\"\n  shows \"\\<exists> i r. LeftDerives1 u i r v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i r. LeftDerives1 u i r v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>i r. LeftDerives1 u i r v", "from leftderives1"], ["proof (chain)\npicking this:\n  leftderives1 u v", "have \n    \"\\<exists>x y N \\<alpha>. u = x @ [N] @ y \\<and> v = x @ \\<alpha> @ y \\<and> is_word x \\<and> is_sentence y \\<and> (N, \\<alpha>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  leftderives1 u v\n\ngoal (1 subgoal):\n 1. \\<exists>x y N \\<alpha>.\n       u = x @ [N] @ y \\<and>\n       v = x @ \\<alpha> @ y \\<and>\n       is_word x \\<and> is_sentence y \\<and> (N, \\<alpha>) \\<in> \\<RR>", "by (simp add: leftderives1_def)"], ["proof (state)\nthis:\n  \\<exists>x y N \\<alpha>.\n     u = x @ [N] @ y \\<and>\n     v = x @ \\<alpha> @ y \\<and>\n     is_word x \\<and> is_sentence y \\<and> (N, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>i r. LeftDerives1 u i r v", "then"], ["proof (chain)\npicking this:\n  \\<exists>x y N \\<alpha>.\n     u = x @ [N] @ y \\<and>\n     v = x @ \\<alpha> @ y \\<and>\n     is_word x \\<and> is_sentence y \\<and> (N, \\<alpha>) \\<in> \\<RR>", "obtain x y N \\<alpha> where \n    u:\"u = x @ [N] @ y\" and\n    v:\"v = x @ \\<alpha> @ y\" and\n    x:\"is_word x\" and  \n    y:\"is_sentence y\" and \n    r:\"(N, \\<alpha>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  \\<exists>x y N \\<alpha>.\n     u = x @ [N] @ y \\<and>\n     v = x @ \\<alpha> @ y \\<and>\n     is_word x \\<and> is_sentence y \\<and> (N, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (\\<And>x N y \\<alpha>.\n        \\<lbrakk>u = x @ [N] @ y; v = x @ \\<alpha> @ y; is_word x;\n         is_sentence y; (N, \\<alpha>) \\<in> \\<RR>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u = x @ [N] @ y\n  v = x @ \\<alpha> @ y\n  is_word x\n  is_sentence y\n  (N, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>i r. LeftDerives1 u i r v", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i r. LeftDerives1 u i r v", "apply (rule_tac x=\"length x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. LeftDerives1 u (length x) r v", "apply (rule_tac x=\"(N, \\<alpha>)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 u (length x) (N, \\<alpha>) v", "apply (auto simp add: LeftDerives1_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. leftmost (length x) u\n 2. Derives1 u (length x) (N, \\<alpha>) v", "apply (simp add: leftmost_def x u rule_nonterminal_type[OF r])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 u (length x) (N, \\<alpha>) v", "apply (simp add: Derives1_def u v)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xa ya.\n       x @ N # y = xa @ N # ya \\<and>\n       x @ \\<alpha> @ y = xa @ \\<alpha> @ ya \\<and>\n       is_sentence xa \\<and>\n       is_sentence ya \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and> length x = length xa", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ya.\n       x @ N # y = x @ N # ya \\<and>\n       x @ \\<alpha> @ y = x @ \\<alpha> @ ya \\<and>\n       is_sentence x \\<and>\n       is_sentence ya \\<and>\n       (N, \\<alpha>) \\<in> \\<RR> \\<and> length x = length x", "apply (rule_tac x=y in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x @ N # y = x @ N # y \\<and>\n    x @ \\<alpha> @ y = x @ \\<alpha> @ y \\<and>\n    is_sentence x \\<and>\n    is_sentence y \\<and>\n    (N, \\<alpha>) \\<in> \\<RR> \\<and> length x = length x", "apply (auto simp add: x y r)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>i r. LeftDerives1 u i r v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_LeftDerives1: \n  \"LeftDerivation a S y \\<Longrightarrow> LeftDerives1 y i r z \\<Longrightarrow> LeftDerivation a (S@[(i,r)]) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerivation a S y; LeftDerives1 y i r z\\<rbrakk>\n    \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z", "proof (induct S arbitrary: a y z i r)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a y z i r.\n       \\<lbrakk>LeftDerivation a [] y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation a ([] @ [(i, r)]) z\n 2. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>LeftDerivation a S y;\n                    LeftDerives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z;\n        LeftDerivation aa (a # S) y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation aa ((a # S) @ [(i, r)]) z", "case Nil"], ["proof (state)\nthis:\n  LeftDerivation a [] y\n  LeftDerives1 y i r z\n\ngoal (2 subgoals):\n 1. \\<And>a y z i r.\n       \\<lbrakk>LeftDerivation a [] y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation a ([] @ [(i, r)]) z\n 2. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>LeftDerivation a S y;\n                    LeftDerives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z;\n        LeftDerivation aa (a # S) y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation aa ((a # S) @ [(i, r)]) z", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation a [] y\n  LeftDerives1 y i r z\n\ngoal (1 subgoal):\n 1. LeftDerivation a ([] @ [(i, r)]) z", "by simp"], ["proof (state)\nthis:\n  LeftDerivation a ([] @ [(i, r)]) z\n\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>LeftDerivation a S y;\n                    LeftDerives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z;\n        LeftDerivation aa (a # S) y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation aa ((a # S) @ [(i, r)]) z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>LeftDerivation a S y;\n                    LeftDerives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z;\n        LeftDerivation aa (a # S) y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation aa ((a # S) @ [(i, r)]) z", "case (Cons s S)"], ["proof (state)\nthis:\n  \\<lbrakk>LeftDerivation ?a S ?y; LeftDerives1 ?y ?i ?r ?z\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?a (S @ [(?i, ?r)]) ?z\n  LeftDerivation a (s # S) y\n  LeftDerives1 y i r z\n\ngoal (1 subgoal):\n 1. \\<And>a S aa y z i r.\n       \\<lbrakk>\\<And>a y z i r.\n                   \\<lbrakk>LeftDerivation a S y;\n                    LeftDerives1 y i r z\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation a (S @ [(i, r)]) z;\n        LeftDerivation aa (a # S) y; LeftDerives1 y i r z\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation aa ((a # S) @ [(i, r)]) z", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?a S ?y; LeftDerives1 ?y ?i ?r ?z\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?a (S @ [(?i, ?r)]) ?z\n  LeftDerivation a (s # S) y\n  LeftDerives1 y i r z\n\ngoal (1 subgoal):\n 1. LeftDerivation a ((s # S) @ [(i, r)]) z", "by (metis LeftDerivation.simps(2) append_Cons)"], ["proof (state)\nthis:\n  LeftDerivation a ((s # S) @ [(i, r)]) z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftderives_implies_LeftDerivation: \"leftderives a b \\<Longrightarrow> \\<exists> D. LeftDerivation a D b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives a b \\<Longrightarrow> \\<exists>D. LeftDerivation a D b", "proof (induct rule: leftderives_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>D. LeftDerivation a D a\n 2. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "case Base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<exists>D. LeftDerivation a D a\n 2. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D. LeftDerivation a D a", "by (rule exI[where x=\"[]\"], simp)"], ["proof (state)\nthis:\n  \\<exists>D. LeftDerivation a D a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "case (Step y z)"], ["proof (state)\nthis:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "note ihyps = this"], ["proof (state)\nthis:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "from ihyps"], ["proof (chain)\npicking this:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y", "obtain D where ay: \"LeftDerivation a D y\""], ["proof (prove)\nusing this:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        LeftDerivation a D y \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivation a D y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "from ihyps leftderives1_implies_LeftDerives1"], ["proof (chain)\npicking this:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y\n  leftderives1 ?u ?v \\<Longrightarrow> \\<exists>i r. LeftDerives1 ?u i r ?v", "obtain i r where yz: \"LeftDerives1 y i r z\""], ["proof (prove)\nusing this:\n  leftderives a y\n  leftderives1 y z\n  \\<exists>D. LeftDerivation a D y\n  leftderives1 ?u ?v \\<Longrightarrow> \\<exists>i r. LeftDerives1 ?u i r ?v\n\ngoal (1 subgoal):\n 1. (\\<And>i r.\n        LeftDerives1 y i r z \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 y i r z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>leftderives a y; leftderives1 y z;\n        \\<exists>D. LeftDerivation a D y\\<rbrakk>\n       \\<Longrightarrow> \\<exists>D. LeftDerivation a D z", "from LeftDerivation_LeftDerives1[OF ay yz]"], ["proof (chain)\npicking this:\n  LeftDerivation a (D @ [(i, r)]) z", "show ?case"], ["proof (prove)\nusing this:\n  LeftDerivation a (D @ [(i, r)]) z\n\ngoal (1 subgoal):\n 1. \\<exists>D. LeftDerivation a D z", "by auto"], ["proof (state)\nthis:\n  \\<exists>D. LeftDerivation a D z\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_append: \n  \"LeftDerivation a (D@E) c = (\\<exists> b. LeftDerivation a D b \\<and> LeftDerivation b E c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation a (D @ E) c =\n    (\\<exists>b. LeftDerivation a D b \\<and> LeftDerivation b E c)", "proof(induct D arbitrary: a c E)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a c E.\n       LeftDerivation a ([] @ E) c =\n       (\\<exists>b. LeftDerivation a [] b \\<and> LeftDerivation b E c)\n 2. \\<And>a D aa c E.\n       (\\<And>a c E.\n           LeftDerivation a (D @ E) c =\n           (\\<exists>b.\n               LeftDerivation a D b \\<and>\n               LeftDerivation b E c)) \\<Longrightarrow>\n       LeftDerivation aa ((a # D) @ E) c =\n       (\\<exists>b. LeftDerivation aa (a # D) b \\<and> LeftDerivation b E c)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>a c E.\n       LeftDerivation a ([] @ E) c =\n       (\\<exists>b. LeftDerivation a [] b \\<and> LeftDerivation b E c)\n 2. \\<And>a D aa c E.\n       (\\<And>a c E.\n           LeftDerivation a (D @ E) c =\n           (\\<exists>b.\n               LeftDerivation a D b \\<and>\n               LeftDerivation b E c)) \\<Longrightarrow>\n       LeftDerivation aa ((a # D) @ E) c =\n       (\\<exists>b. LeftDerivation aa (a # D) b \\<and> LeftDerivation b E c)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation a ([] @ E) c =\n    (\\<exists>b. LeftDerivation a [] b \\<and> LeftDerivation b E c)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation a ([] @ E) c =\n  (\\<exists>b. LeftDerivation a [] b \\<and> LeftDerivation b E c)\n\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           LeftDerivation a (D @ E) c =\n           (\\<exists>b.\n               LeftDerivation a D b \\<and>\n               LeftDerivation b E c)) \\<Longrightarrow>\n       LeftDerivation aa ((a # D) @ E) c =\n       (\\<exists>b. LeftDerivation aa (a # D) b \\<and> LeftDerivation b E c)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           LeftDerivation a (D @ E) c =\n           (\\<exists>b.\n               LeftDerivation a D b \\<and>\n               LeftDerivation b E c)) \\<Longrightarrow>\n       LeftDerivation aa ((a # D) @ E) c =\n       (\\<exists>b. LeftDerivation aa (a # D) b \\<and> LeftDerivation b E c)", "case (Cons d D)"], ["proof (state)\nthis:\n  LeftDerivation ?a (D @ ?E) ?c =\n  (\\<exists>b. LeftDerivation ?a D b \\<and> LeftDerivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. \\<And>a D aa c E.\n       (\\<And>a c E.\n           LeftDerivation a (D @ E) c =\n           (\\<exists>b.\n               LeftDerivation a D b \\<and>\n               LeftDerivation b E c)) \\<Longrightarrow>\n       LeftDerivation aa ((a # D) @ E) c =\n       (\\<exists>b. LeftDerivation aa (a # D) b \\<and> LeftDerivation b E c)", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation ?a (D @ ?E) ?c =\n  (\\<exists>b. LeftDerivation ?a D b \\<and> LeftDerivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. LeftDerivation a ((d # D) @ E) c =\n    (\\<exists>b. LeftDerivation a (d # D) b \\<and> LeftDerivation b E c)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation a ((d # D) @ E) c =\n  (\\<exists>b. LeftDerivation a (d # D) b \\<and> LeftDerivation b E c)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_implies_append: \n  \"LeftDerivation a D b \\<Longrightarrow> LeftDerivation b E c \\<Longrightarrow> LeftDerivation a (D@E) c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerivation a D b; LeftDerivation b E c\\<rbrakk>\n    \\<Longrightarrow> LeftDerivation a (D @ E) c", "using LeftDerivation_append"], ["proof (prove)\nusing this:\n  LeftDerivation ?a (?D @ ?E) ?c =\n  (\\<exists>b. LeftDerivation ?a ?D b \\<and> LeftDerivation b ?E ?c)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerivation a D b; LeftDerivation b E c\\<rbrakk>\n    \\<Longrightarrow> LeftDerivation a (D @ E) c", "by blast"], ["", "lemma Derivation_unique_dest: \"Derivation a D b \\<Longrightarrow> Derivation a D c \\<Longrightarrow> b = c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a D b; Derivation a D c\\<rbrakk>\n    \\<Longrightarrow> b = c", "apply (induct D arbitrary: a b c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>Derivation a [] b; Derivation a [] c\\<rbrakk>\n       \\<Longrightarrow> b = c\n 2. \\<And>a D aa b c.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D b; Derivation a D c\\<rbrakk>\n                   \\<Longrightarrow> b = c;\n        Derivation aa (a # D) b; Derivation aa (a # D) c\\<rbrakk>\n       \\<Longrightarrow> b = c", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b D aaa ba c x xa.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D b; Derivation a D c\\<rbrakk>\n                   \\<Longrightarrow> b = c;\n        Derives1 aaa a (aa, b) x; Derivation x D ba;\n        Derives1 aaa a (aa, b) xa; Derivation xa D c\\<rbrakk>\n       \\<Longrightarrow> ba = c", "using Derives1_unique_dest"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derives1 ?u ?i ?r ?v; Derives1 ?u ?i ?r ?w\\<rbrakk>\n  \\<Longrightarrow> ?v = ?w\n\ngoal (1 subgoal):\n 1. \\<And>a aa b D aaa ba c x xa.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D b; Derivation a D c\\<rbrakk>\n                   \\<Longrightarrow> b = c;\n        Derives1 aaa a (aa, b) x; Derivation x D ba;\n        Derives1 aaa a (aa, b) xa; Derivation xa D c\\<rbrakk>\n       \\<Longrightarrow> ba = c", "by blast"], ["", "lemma Derivation_unique_src: \"Derivation a D c \\<Longrightarrow> Derivation b D c \\<Longrightarrow> a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation a D c; Derivation b D c\\<rbrakk>\n    \\<Longrightarrow> a = b", "apply (induct D arbitrary: a b c)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b c.\n       \\<lbrakk>Derivation a [] c; Derivation b [] c\\<rbrakk>\n       \\<Longrightarrow> a = b\n 2. \\<And>a D aa b c.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D c; Derivation b D c\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        Derivation aa (a # D) c; Derivation b (a # D) c\\<rbrakk>\n       \\<Longrightarrow> aa = b", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b D aaa ba c x xa.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D c; Derivation b D c\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        Derives1 aaa a (aa, b) x; Derivation x D c;\n        Derives1 ba a (aa, b) xa; Derivation xa D c\\<rbrakk>\n       \\<Longrightarrow> aaa = ba", "using Derives1_unique_src"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derives1 ?u ?i ?r ?w; Derives1 ?v ?i ?r ?w\\<rbrakk>\n  \\<Longrightarrow> ?u = ?v\n\ngoal (1 subgoal):\n 1. \\<And>a aa b D aaa ba c x xa.\n       \\<lbrakk>\\<And>a b c.\n                   \\<lbrakk>Derivation a D c; Derivation b D c\\<rbrakk>\n                   \\<Longrightarrow> a = b;\n        Derives1 aaa a (aa, b) x; Derivation x D c;\n        Derives1 ba a (aa, b) xa; Derivation xa D c\\<rbrakk>\n       \\<Longrightarrow> aaa = ba", "by blast"], ["", "lemma LeftDerives1_unique: \"LeftDerives1 a i r b \\<Longrightarrow> LeftDerives1 a j s b \\<Longrightarrow> i = j \\<and> r = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerives1 a i r b; LeftDerives1 a j s b\\<rbrakk>\n    \\<Longrightarrow> i = j \\<and> r = s", "using Derives1_def LeftDerives1_def leftmost_unique"], ["proof (prove)\nusing this:\n  Derives1 ?u ?i ?r ?v =\n  (\\<exists>x y N \\<alpha>.\n      ?u = x @ [N] @ y \\<and>\n      ?v = x @ \\<alpha> @ y \\<and>\n      is_sentence x \\<and>\n      is_sentence y \\<and>\n      (N, \\<alpha>) \\<in> \\<RR> \\<and>\n      ?r = (N, \\<alpha>) \\<and> ?i = length x)\n  LeftDerives1 ?u ?i ?r ?v = (leftmost ?i ?u \\<and> Derives1 ?u ?i ?r ?v)\n  \\<lbrakk>leftmost ?i ?a; leftmost ?j ?a\\<rbrakk> \\<Longrightarrow> ?i = ?j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerives1 a i r b; LeftDerives1 a j s b\\<rbrakk>\n    \\<Longrightarrow> i = j \\<and> r = s", "by auto"], ["", "lemma leftlang: \"\\<L> = { v | v. is_word v \\<and> is_leftderivation v }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<L> = {v |v. is_word v \\<and> is_leftderivation v}", "by (metis (no_types, lifting) CFG.is_derivation_def CFG.is_leftderivation_def \n    CFG.leftderivation_implies_derivation CFG_axioms Collect_cong \n    \\<L>_def derives_implies_leftderives)"], ["", "lemma leftprefixlang:  \"\\<L>\\<^sub>P = { u | u v. is_word u \\<and> is_leftderivation (u@v) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<L>\\<^sub>P =\n    {uu_.\n     \\<exists>u v.\n        uu_ = u \\<and> is_word u \\<and> is_leftderivation (u @ v)}", "apply (auto simp add: \\<L>\\<^sub>P_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x v.\n       \\<lbrakk>is_word x; is_derivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_leftderivation (x @ v)\n 2. \\<And>x v.\n       \\<lbrakk>is_word x; is_leftderivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_derivation (x @ v)", "using derives_implies_leftderives_gen is_derivation_def is_leftderivation_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>derives ?a (?u @ ?v); is_word ?u\\<rbrakk>\n  \\<Longrightarrow> \\<exists>w.\n                       leftderives ?a (?u @ w) \\<and>\n                       (?v = [] \\<longrightarrow> w = []) \\<and>\n                       (\\<forall>X.\n                           is_first X ?v \\<longrightarrow> is_first X w)\n  is_derivation ?u = derives [\\<SS>] ?u\n  is_leftderivation ?u = leftderives [\\<SS>] ?u\n\ngoal (2 subgoals):\n 1. \\<And>x v.\n       \\<lbrakk>is_word x; is_derivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_leftderivation (x @ v)\n 2. \\<And>x v.\n       \\<lbrakk>is_word x; is_leftderivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_derivation (x @ v)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x v.\n       \\<lbrakk>is_word x; is_leftderivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_derivation (x @ v)", "using leftderivation_implies_derivation"], ["proof (prove)\nusing this:\n  is_leftderivation ?u \\<Longrightarrow> is_derivation ?u\n\ngoal (1 subgoal):\n 1. \\<And>x v.\n       \\<lbrakk>is_word x; is_leftderivation (x @ v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>v. is_derivation (x @ v)", "by blast"], ["", "lemma derives_implies_leftderives_cons:\n  \"is_word a \\<Longrightarrow> derives u (a@X#b) \\<Longrightarrow> \\<exists> c. leftderives u  (a@X#c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_word a; derives u (a @ X # b)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>c. leftderives u (a @ X # c)", "by (metis append_Cons append_Nil derives_implies_leftderives_gen is_first_def)"], ["", "lemma is_word_append[simp]: \"is_word (a@b) = (is_word a \\<and> is_word b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word (a @ b) = (is_word a \\<and> is_word b)", "by (auto simp add: is_word_def)"], ["", "lemma \\<L>\\<^sub>P_split: \"a@b \\<in> \\<L>\\<^sub>P \\<Longrightarrow> a \\<in> \\<L>\\<^sub>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a @ b \\<in> \\<L>\\<^sub>P \\<Longrightarrow> a \\<in> \\<L>\\<^sub>P", "by (auto simp add: \\<L>\\<^sub>P_def)"], ["", "lemma \\<L>\\<^sub>P_is_word: \"a \\<in> \\<L>\\<^sub>P \\<Longrightarrow> is_word a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> \\<L>\\<^sub>P \\<Longrightarrow> is_word a", "by (metis (no_types, lifting) leftprefixlang mem_Collect_eq)"], ["", "definition Derive :: \"sentence \\<Rightarrow> derivation \\<Rightarrow> sentence\"\nwhere \n  \"Derive a D = (THE b. Derivation a D b)\""], ["", "lemma Derivation_dest_ex_unique: \"Derivation a D b \\<Longrightarrow> \\<exists>! x. Derivation a D x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation a D b \\<Longrightarrow> \\<exists>!x. Derivation a D x", "using CFG.Derivation_unique_dest CFG_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>CFG ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS>;\n   CFG.Derivation ?\\<NN> ?\\<TT> ?\\<RR> ?a ?D ?b;\n   CFG.Derivation ?\\<NN> ?\\<TT> ?\\<RR> ?a ?D ?c\\<rbrakk>\n  \\<Longrightarrow> ?b = ?c\n  CFG \\<NN> \\<TT> \\<RR> \\<SS>\n\ngoal (1 subgoal):\n 1. Derivation a D b \\<Longrightarrow> \\<exists>!x. Derivation a D x", "by blast"], ["", "lemma Derive:\n  assumes ab: \"Derivation a D b\"\n  shows \"Derive a D = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derive a D = b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Derive a D = b", "note the1_equality[OF Derivation_dest_ex_unique[OF ab] ab]"], ["proof (state)\nthis:\n  (THE x. Derivation a D x) = b\n\ngoal (1 subgoal):\n 1. Derive a D = b", "thus ?thesis"], ["proof (prove)\nusing this:\n  (THE x. Derivation a D x) = b\n\ngoal (1 subgoal):\n 1. Derive a D = b", "by (simp add: Derive_def)"], ["proof (state)\nthis:\n  Derive a D = b\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}