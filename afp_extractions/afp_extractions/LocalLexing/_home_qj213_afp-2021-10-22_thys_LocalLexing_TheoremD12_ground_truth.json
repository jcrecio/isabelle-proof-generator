{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD12.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma charslength_appendix_is_empty:\n  \"charslength (p@ts) = charslength p \\<Longrightarrow> (\\<And> t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = [])\"", "lemma empty_tokens_have_charslength_0:\n  \"(\\<And> t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = []) \\<Longrightarrow> charslength ts = 0\"", "lemma \\<pi>_idempotent': \"\\<pi> k {} (\\<pi> k T I) = \\<pi> k T I\"", "theorem thmD12:\n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  shows \"items_le k (\\<J> k (Suc u)) \\<supseteq> Gen (paths_le k (\\<P> k (Suc u)))\""], "translations": [["", "lemma charslength_appendix_is_empty:\n  \"charslength (p@ts) = charslength p \\<Longrightarrow> (\\<And> t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (p @ ts) = charslength p \\<Longrightarrow>\n    (\\<And>t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = [])", "proof (induct ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>charslength (p @ []) = charslength p;\n        t \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []\n 2. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "case Nil"], ["proof (state)\nthis:\n  charslength (p @ []) = charslength p\n  t \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       \\<lbrakk>charslength (p @ []) = charslength p;\n        t \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []\n 2. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "then"], ["proof (chain)\npicking this:\n  charslength (p @ []) = charslength p\n  t \\<in> set []", "show ?case"], ["proof (prove)\nusing this:\n  charslength (p @ []) = charslength p\n  t \\<in> set []\n\ngoal (1 subgoal):\n 1. chars_of_token t = []", "by auto"], ["proof (state)\nthis:\n  chars_of_token t = []\n\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "case (Cons s ts)"], ["proof (state)\nthis:\n  \\<lbrakk>charslength (p @ ts) = charslength p; ?t \\<in> set ts\\<rbrakk>\n  \\<Longrightarrow> chars_of_token ?t = []\n  charslength (p @ s # ts) = charslength p\n  t \\<in> set (s # ts)\n\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "have \"charslength (p @ s # ts) = charslength (p @ ts) + length (chars_of_token s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (p @ s # ts) =\n    charslength (p @ ts) + length (chars_of_token s)", "by simp"], ["proof (state)\nthis:\n  charslength (p @ s # ts) =\n  charslength (p @ ts) + length (chars_of_token s)\n\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "then"], ["proof (chain)\npicking this:\n  charslength (p @ s # ts) =\n  charslength (p @ ts) + length (chars_of_token s)", "have \"charslength (p @ s # ts) = charslength p + charslength ts + length (chars_of_token s)\""], ["proof (prove)\nusing this:\n  charslength (p @ s # ts) =\n  charslength (p @ ts) + length (chars_of_token s)\n\ngoal (1 subgoal):\n 1. charslength (p @ s # ts) =\n    charslength p + charslength ts + length (chars_of_token s)", "by simp"], ["proof (state)\nthis:\n  charslength (p @ s # ts) =\n  charslength p + charslength ts + length (chars_of_token s)\n\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "with Cons.prems(1)"], ["proof (chain)\npicking this:\n  charslength (p @ s # ts) = charslength p\n  charslength (p @ s # ts) =\n  charslength p + charslength ts + length (chars_of_token s)", "have \"charslength ts + length (chars_of_token s) = 0\""], ["proof (prove)\nusing this:\n  charslength (p @ s # ts) = charslength p\n  charslength (p @ s # ts) =\n  charslength p + charslength ts + length (chars_of_token s)\n\ngoal (1 subgoal):\n 1. charslength ts + length (chars_of_token s) = 0", "by arith"], ["proof (state)\nthis:\n  charslength ts + length (chars_of_token s) = 0\n\ngoal (1 subgoal):\n 1. \\<And>a ts t.\n       \\<lbrakk>\\<And>t.\n                   \\<lbrakk>charslength (p @ ts) = charslength p;\n                    t \\<in> set ts\\<rbrakk>\n                   \\<Longrightarrow> chars_of_token t = [];\n        charslength (p @ a # ts) = charslength p;\n        t \\<in> set (a # ts)\\<rbrakk>\n       \\<Longrightarrow> chars_of_token t = []", "then"], ["proof (chain)\npicking this:\n  charslength ts + length (chars_of_token s) = 0", "show ?case"], ["proof (prove)\nusing this:\n  charslength ts + length (chars_of_token s) = 0\n\ngoal (1 subgoal):\n 1. chars_of_token t = []", "using Cons.prems(2) charslength_0"], ["proof (prove)\nusing this:\n  charslength ts + length (chars_of_token s) = 0\n  t \\<in> set (s # ts)\n  (\\<forall>t\\<in>set ?ts. chars_of_token t = []) = (charslength ?ts = 0)\n\ngoal (1 subgoal):\n 1. chars_of_token t = []", "by auto"], ["proof (state)\nthis:\n  chars_of_token t = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma empty_tokens_have_charslength_0:\n  \"(\\<And> t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = []) \\<Longrightarrow> charslength ts = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t \\<in> set ts \\<Longrightarrow>\n        chars_of_token t = []) \\<Longrightarrow>\n    charslength ts = 0", "proof (induct ts)"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<And>t.\n        t \\<in> set [] \\<Longrightarrow>\n        chars_of_token t = []) \\<Longrightarrow>\n    charslength [] = 0\n 2. \\<And>a ts.\n       \\<lbrakk>(\\<And>t.\n                    t \\<in> set ts \\<Longrightarrow>\n                    chars_of_token t = []) \\<Longrightarrow>\n                charslength ts = 0;\n        \\<And>t.\n           t \\<in> set (a # ts) \\<Longrightarrow>\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> charslength (a # ts) = 0", "case Nil"], ["proof (state)\nthis:\n  ?t \\<in> set [] \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (2 subgoals):\n 1. (\\<And>t.\n        t \\<in> set [] \\<Longrightarrow>\n        chars_of_token t = []) \\<Longrightarrow>\n    charslength [] = 0\n 2. \\<And>a ts.\n       \\<lbrakk>(\\<And>t.\n                    t \\<in> set ts \\<Longrightarrow>\n                    chars_of_token t = []) \\<Longrightarrow>\n                charslength ts = 0;\n        \\<And>t.\n           t \\<in> set (a # ts) \\<Longrightarrow>\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> charslength (a # ts) = 0", "then"], ["proof (chain)\npicking this:\n  ?t \\<in> set [] \\<Longrightarrow> chars_of_token ?t = []", "show ?case"], ["proof (prove)\nusing this:\n  ?t \\<in> set [] \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (1 subgoal):\n 1. charslength [] = 0", "by simp"], ["proof (state)\nthis:\n  charslength [] = 0\n\ngoal (1 subgoal):\n 1. \\<And>a ts.\n       \\<lbrakk>(\\<And>t.\n                    t \\<in> set ts \\<Longrightarrow>\n                    chars_of_token t = []) \\<Longrightarrow>\n                charslength ts = 0;\n        \\<And>t.\n           t \\<in> set (a # ts) \\<Longrightarrow>\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> charslength (a # ts) = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ts.\n       \\<lbrakk>(\\<And>t.\n                    t \\<in> set ts \\<Longrightarrow>\n                    chars_of_token t = []) \\<Longrightarrow>\n                charslength ts = 0;\n        \\<And>t.\n           t \\<in> set (a # ts) \\<Longrightarrow>\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> charslength (a # ts) = 0", "case (Cons t ts)"], ["proof (state)\nthis:\n  (\\<And>t.\n      t \\<in> set ts \\<Longrightarrow>\n      chars_of_token t = []) \\<Longrightarrow>\n  charslength ts = 0\n  ?t \\<in> set (t # ts) \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (1 subgoal):\n 1. \\<And>a ts.\n       \\<lbrakk>(\\<And>t.\n                    t \\<in> set ts \\<Longrightarrow>\n                    chars_of_token t = []) \\<Longrightarrow>\n                charslength ts = 0;\n        \\<And>t.\n           t \\<in> set (a # ts) \\<Longrightarrow>\n           chars_of_token t = []\\<rbrakk>\n       \\<Longrightarrow> charslength (a # ts) = 0", "then"], ["proof (chain)\npicking this:\n  (\\<And>t.\n      t \\<in> set ts \\<Longrightarrow>\n      chars_of_token t = []) \\<Longrightarrow>\n  charslength ts = 0\n  ?t \\<in> set (t # ts) \\<Longrightarrow> chars_of_token ?t = []", "show ?case"], ["proof (prove)\nusing this:\n  (\\<And>t.\n      t \\<in> set ts \\<Longrightarrow>\n      chars_of_token t = []) \\<Longrightarrow>\n  charslength ts = 0\n  ?t \\<in> set (t # ts) \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (1 subgoal):\n 1. charslength (t # ts) = 0", "by auto"], ["proof (state)\nthis:\n  charslength (t # ts) = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<pi>_idempotent': \"\\<pi> k {} (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k {} (\\<pi> k T I) = \\<pi> k T I", "apply (simp add: \\<pi>_no_tokens)"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit (\\<lambda>I. Complete k (Predict k I)) (\\<pi> k T I) = \\<pi> k T I", "by (simp add: Complete_\\<pi>_fix Predict_\\<pi>_fix fix_is_fix_of_limit)"], ["", "theorem thmD12:\n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  shows \"items_le k (\\<J> k (Suc u)) \\<supseteq> Gen (paths_le k (\\<P> k (Suc u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "assume x_dom: \"x \\<in> Gen (paths_le k (\\<P> k (Suc u)))\""], ["proof (state)\nthis:\n  x \\<in> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "have \"\\<exists> q. pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>q.\n       pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k", "have \"\\<And>i I n. i \\<in> I \\<or> i \\<notin> items_le n I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i I n. i \\<in> I \\<or> i \\<notin> items_le n I", "by (meson items_le_is_filter subsetCE)"], ["proof (state)\nthis:\n  ?i \\<in> ?I \\<or> ?i \\<notin> items_le ?n ?I\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k", "then"], ["proof (chain)\npicking this:\n  ?i \\<in> ?I \\<or> ?i \\<notin> items_le ?n ?I", "show ?thesis"], ["proof (prove)\nusing this:\n  ?i \\<in> ?I \\<or> ?i \\<notin> items_le ?n ?I\n\ngoal (1 subgoal):\n 1. \\<exists>q.\n       pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k", "by (metis Gen_implies_pvalid x_dom items_le_fix_D items_le_idempotent items_le_paths_le \n          pvalid_item_end)"], ["proof (state)\nthis:\n  \\<exists>q.\n     pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>q.\n     pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  \\<exists>q.\n     pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k", "obtain q where q: \"pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\""], ["proof (prove)\nusing this:\n  \\<exists>q.\n     pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. (\\<And>q.\n        pvalid q x \\<and>\n        q \\<in> \\<P> k (Suc u) \\<and>\n        charslength q \\<le> k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "have \"q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u", "have \"x \\<in> items_le k (\\<J> k (Suc u))\""], ["proof (prove)\nusing this:\n  q \\<in> \\<P> k u \\<or> q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k (Suc u))", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow> x \\<in> items_le k (\\<J> k (Suc u))\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "case 1"], ["proof (state)\nthis:\n  q \\<in> \\<P> k u\n\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow> x \\<in> items_le k (\\<J> k (Suc u))\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "with q"], ["proof (chain)\npicking this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  q \\<in> \\<P> k u", "have \"x \\<in> Gen (paths_le k (\\<P> k u))\""], ["proof (prove)\nusing this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  q \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k (\\<P> k u))", "apply (auto simp add: Gen_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> \\<P> k u; pvalid q x;\n     q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u);\n     length (chars q) \\<le> k\\<rbrakk>\n    \\<Longrightarrow> \\<exists>p.\n                         p \\<in> paths_le k (\\<P> k u) \\<and> pvalid p x", "apply (rule_tac x=q in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> \\<P> k u; pvalid q x;\n     q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u);\n     length (chars q) \\<le> k\\<rbrakk>\n    \\<Longrightarrow> q \\<in> paths_le k (\\<P> k u) \\<and> pvalid q x", "by (simp add: paths_le_def)"], ["proof (state)\nthis:\n  x \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow> x \\<in> items_le k (\\<J> k (Suc u))\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "with induct"], ["proof (chain)\npicking this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n  x \\<in> Gen (paths_le k (\\<P> k u))", "have \"x \\<in> items_le k (\\<J> k u)\""], ["proof (prove)\nusing this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n  x \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k u)", "by simp"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<J> k u)\n\ngoal (2 subgoals):\n 1. q \\<in> \\<P> k u \\<Longrightarrow> x \\<in> items_le k (\\<J> k (Suc u))\n 2. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  x \\<in> items_le k (\\<J> k u)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<J> k u)\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k (Suc u))", "using LocalLexing.items_le_def LocalLexing_axioms \\<J>_subset_Suc_u"], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<J> k u)\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  \\<J> ?k ?u \\<subseteq> \\<J> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k (Suc u))", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<J> k (Suc u))\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "case 2"], ["proof (state)\nthis:\n  q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have q_is_limit: \"q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)", "using q"], ["proof (prove)\nusing this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)", "by auto"], ["proof (state)\nthis:\n  q \\<in> limit (Append (\\<Y> (\\<Z> k u) (\\<P> k u) k) k) (\\<P> k u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "from limit_Append_path_nonelem_split[OF q_is_limit 2]"], ["proof (chain)\npicking this:\n  \\<exists>qa ts.\n     q = qa @ ts \\<and>\n     qa \\<in> \\<P> k u \\<and>\n     charslength qa = k \\<and>\n     admissible (qa @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "obtain p ts where p_ts:\n          \"q = p @ ts \\<and>\n           p \\<in> \\<P> k u \\<and>\n           charslength p = k \\<and>\n           admissible (p @ ts) \\<and>\n           (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and> (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\""], ["proof (prove)\nusing this:\n  \\<exists>qa ts.\n     q = qa @ ts \\<and>\n     qa \\<in> \\<P> k u \\<and>\n     charslength qa = k \\<and>\n     admissible (qa @ ts) \\<and>\n     (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n     (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. (\\<And>p ts.\n        q = p @ ts \\<and>\n        p \\<in> \\<P> k u \\<and>\n        charslength p = k \\<and>\n        admissible (p @ ts) \\<and>\n        (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n        (\\<forall>t\\<in>set (butlast ts).\n            chars_of_token t = []) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "have ts_nonempty: \"ts \\<noteq> []\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. ts \\<noteq> []", "using 2"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  q \\<notin> \\<P> k u\n\ngoal (1 subgoal):\n 1. ts \\<noteq> []", "using self_append_conv"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  q \\<notin> \\<P> k u\n  (?xs = ?xs @ ?ys) = (?ys = [])\n\ngoal (1 subgoal):\n 1. ts \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  ts \\<noteq> []\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "obtain T where T: \"T = \\<Y> (\\<Z> k u) (\\<P> k u) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T.\n        T = \\<Y> (\\<Z> k u) (\\<P> k u) k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  T = \\<Y> (\\<Z> k u) (\\<P> k u) k\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "obtain J where J: \"J = \\<pi> k T (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>J.\n        J = \\<pi> k T (Gen (paths_le k (\\<P> k u))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  J = \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "from q p_ts"], ["proof (chain)\npicking this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])", "have chars_of_token_is_empty: \"\\<And> t. t\\<in>set ts \\<Longrightarrow> chars_of_token t = []\""], ["proof (prove)\nusing this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = []", "using charslength_appendix_is_empty chars_append charslength.simps le_add1 le_imp_less_Suc \n            le_neq_implies_less length_append not_less_eq"], ["proof (prove)\nusing this:\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  \\<lbrakk>charslength (?p @ ?ts) = charslength ?p;\n   ?t \\<in> set ?ts\\<rbrakk>\n  \\<Longrightarrow> chars_of_token ?t = []\n  chars (?a @ ?b) = chars ?a @ chars ?b\n  charslength ?cs = length (chars ?cs)\n  ?n \\<le> ?n + ?m\n  ?m \\<le> ?n \\<Longrightarrow> ?m < Suc ?n\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n  length (?xs @ ?ys) = length ?xs + length ?ys\n  (\\<not> ?m < ?n) = (?n < Suc ?m)\n\ngoal (1 subgoal):\n 1. \\<And>t. t \\<in> set ts \\<Longrightarrow> chars_of_token t = []", "by auto"], ["proof (state)\nthis:\n  ?t \\<in> set ts \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "{"], ["proof (state)\nthis:\n  ?t \\<in> set ts \\<Longrightarrow> chars_of_token ?t = []\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "fix sss :: \"token list\""], ["proof (state)\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have \"is_prefix sss ts \\<Longrightarrow> pvalid (p @ sss) x \\<Longrightarrow> x \\<in> J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix sss ts; pvalid (p @ sss) x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> J", "proof (induct \"length sss\" arbitrary: sss x rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>sss x.\n       \\<lbrakk>\\<And>sssa x.\n                   \\<lbrakk>length sssa < length sss; is_prefix sssa ts;\n                    pvalid (p @ sssa) x\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> J;\n        is_prefix sss ts; pvalid (p @ sss) x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> J", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?sss < length sss; is_prefix ?sss ts;\n   pvalid (p @ ?sss) ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> J\n  is_prefix sss ts\n  pvalid (p @ sss) x\n\ngoal (1 subgoal):\n 1. \\<And>sss x.\n       \\<lbrakk>\\<And>sssa x.\n                   \\<lbrakk>length sssa < length sss; is_prefix sssa ts;\n                    pvalid (p @ sssa) x\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> J;\n        is_prefix sss ts; pvalid (p @ sss) x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> J", "have \"sss = [] \\<or> sss \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sss = [] \\<or> sss \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  sss = [] \\<or> sss \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>sss x.\n       \\<lbrakk>\\<And>sssa x.\n                   \\<lbrakk>length sssa < length sss; is_prefix sssa ts;\n                    pvalid (p @ sssa) x\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> J;\n        is_prefix sss ts; pvalid (p @ sss) x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  sss = [] \\<or> sss \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  sss = [] \\<or> sss \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> J", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "case 1"], ["proof (state)\nthis:\n  sss = []\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "with less"], ["proof (chain)\npicking this:\n  \\<lbrakk>length ?sss < length sss; is_prefix ?sss ts;\n   pvalid (p @ ?sss) ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> J\n  is_prefix sss ts\n  pvalid (p @ sss) x\n  sss = []", "have pvalid_p_x: \"pvalid p x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?sss < length sss; is_prefix ?sss ts;\n   pvalid (p @ ?sss) ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> J\n  is_prefix sss ts\n  pvalid (p @ sss) x\n  sss = []\n\ngoal (1 subgoal):\n 1. pvalid p x", "by auto"], ["proof (state)\nthis:\n  pvalid p x\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have charslength_p: \"charslength p \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p \\<le> k", "using p_ts"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. charslength p \\<le> k", "by blast"], ["proof (state)\nthis:\n  charslength p \\<le> k\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "with p_ts"], ["proof (chain)\npicking this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  charslength p \\<le> k", "have \"p \\<in> paths_le k (\\<P> k u)\""], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  charslength p \\<le> k\n\ngoal (1 subgoal):\n 1. p \\<in> paths_le k (\\<P> k u)", "by (simp add: paths_le_def)"], ["proof (state)\nthis:\n  p \\<in> paths_le k (\\<P> k u)\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "with pvalid_p_x"], ["proof (chain)\npicking this:\n  pvalid p x\n  p \\<in> paths_le k (\\<P> k u)", "have \"x \\<in> Gen (paths_le k (\\<P> k u))\""], ["proof (prove)\nusing this:\n  pvalid p x\n  p \\<in> paths_le k (\\<P> k u)\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k (\\<P> k u))", "using Gen_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  pvalid p x\n  p \\<in> paths_le k (\\<P> k u)\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k (\\<P> k u))", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  x \\<in> Gen (paths_le k (\\<P> k u))", "have \"x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\nusing this:\n  x \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "using \\<pi>_apply_setmonotone"], ["proof (prove)\nusing this:\n  x \\<in> Gen (paths_le k (\\<P> k u))\n  ?x \\<in> ?I \\<Longrightarrow> ?x \\<in> \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (2 subgoals):\n 1. sss = [] \\<Longrightarrow> x \\<in> J\n 2. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "show \"x \\<in> J\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. x \\<in> J", "using pvalid_item_end q J LocalLexing.items_le_def \n                    LocalLexing_axioms charslength_p mem_Collect_eq pvalid_p_x"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n  pvalid q x__ \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  J = \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  charslength p \\<le> k\n  (?a \\<in> Collect ?P) = ?P ?a\n  pvalid p x\n\ngoal (1 subgoal):\n 1. x \\<in> J", "by auto"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "case 2"], ["proof (state)\nthis:\n  sss \\<noteq> []\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  sss \\<noteq> []", "have \"\\<exists> a ss. sss = ss@[a]\""], ["proof (prove)\nusing this:\n  sss \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>a ss. sss = ss @ [a]", "using rev_exhaust"], ["proof (prove)\nusing this:\n  sss \\<noteq> []\n  \\<lbrakk>?xs = [] \\<Longrightarrow> ?P;\n   \\<And>ys y. ?xs = ys @ [y] \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<exists>a ss. sss = ss @ [a]", "by blast"], ["proof (state)\nthis:\n  \\<exists>a ss. sss = ss @ [a]\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  \\<exists>a ss. sss = ss @ [a]", "obtain a ss where snoc: \"sss = ss@[a]\""], ["proof (prove)\nusing this:\n  \\<exists>a ss. sss = ss @ [a]\n\ngoal (1 subgoal):\n 1. (\\<And>ss a. sss = ss @ [a] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  sss = ss @ [a]\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "obtain p' where p': \"p' = p @ ss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p'. p' = p @ ss \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  p' = p @ ss\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  p' = p @ ss", "have \"pvalid_left (p'@[a]) x\""], ["proof (prove)\nusing this:\n  p' = p @ ss\n\ngoal (1 subgoal):\n 1. pvalid_left (p' @ [a]) x", "using snoc less pvalid_left"], ["proof (prove)\nusing this:\n  p' = p @ ss\n  sss = ss @ [a]\n  \\<lbrakk>length ?sss < length sss; is_prefix ?sss ts;\n   pvalid (p @ ?sss) ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> J\n  is_prefix sss ts\n  pvalid (p @ sss) x\n  pvalid ?p ?x = pvalid_left ?p ?x\n\ngoal (1 subgoal):\n 1. pvalid_left (p' @ [a]) x", "by simp"], ["proof (state)\nthis:\n  pvalid_left (p' @ [a]) x\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "from iffD1[OF pvalid_left_def this]"], ["proof (chain)\npicking this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens (p' @ [a]) \\<and>\n     wellformed_item x \\<and>\n     u \\<le> length (p' @ [a]) \\<and>\n     charslength (p' @ [a]) = item_end x \\<and>\n     charslength (take u (p' @ [a])) = item_origin x \\<and>\n     is_leftderivation\n      (terminals (take u (p' @ [a])) @\n       [item_nonterminal x] @ \\<gamma>) \\<and>\n     leftderives (item_\\<alpha> x) (terminals (drop u (p' @ [a])))", "obtain r \\<omega> where pvalid:\n                    \"wellformed_tokens (p' @ [a]) \\<and>\n                     wellformed_item x \\<and>\n                     r \\<le> length (p' @ [a]) \\<and>\n                     charslength (p' @ [a]) = item_end x \\<and>\n                     charslength (take r (p' @ [a])) = item_origin x \\<and>\n                     is_leftderivation (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n                     leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\""], ["proof (prove)\nusing this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens (p' @ [a]) \\<and>\n     wellformed_item x \\<and>\n     u \\<le> length (p' @ [a]) \\<and>\n     charslength (p' @ [a]) = item_end x \\<and>\n     charslength (take u (p' @ [a])) = item_origin x \\<and>\n     is_leftderivation\n      (terminals (take u (p' @ [a])) @\n       [item_nonterminal x] @ \\<gamma>) \\<and>\n     leftderives (item_\\<alpha> x) (terminals (drop u (p' @ [a])))\n\ngoal (1 subgoal):\n 1. (\\<And>r \\<omega>.\n        wellformed_tokens (p' @ [a]) \\<and>\n        wellformed_item x \\<and>\n        r \\<le> length (p' @ [a]) \\<and>\n        charslength (p' @ [a]) = item_end x \\<and>\n        charslength (take r (p' @ [a])) = item_origin x \\<and>\n        is_leftderivation\n         (terminals (take r (p' @ [a])) @\n          [item_nonterminal x] @ \\<omega>) \\<and>\n        leftderives (item_\\<alpha> x)\n         (terminals (drop r (p' @ [a]))) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens (p' @ [a]) \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length (p' @ [a]) \\<and>\n  charslength (p' @ [a]) = item_end x \\<and>\n  charslength (take r (p' @ [a])) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "obtain q' where q': \"q' = p'@[a]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>q'. q' = p' @ [a] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q' = p' @ [a]\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have is_prefix_ss_ts: \"is_prefix ss ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix ss ts", "using snoc less"], ["proof (prove)\nusing this:\n  sss = ss @ [a]\n  \\<lbrakk>length ?sss < length sss; is_prefix ?sss ts;\n   pvalid (p @ ?sss) ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> J\n  is_prefix sss ts\n  pvalid (p @ sss) x\n\ngoal (1 subgoal):\n 1. is_prefix ss ts", "by (simp add: is_prefix_append)"], ["proof (state)\nthis:\n  is_prefix ss ts\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix ss ts", "have \"is_prefix (p@ss) q\""], ["proof (prove)\nusing this:\n  is_prefix ss ts\n\ngoal (1 subgoal):\n 1. is_prefix (p @ ss) q", "using p' snoc p_ts"], ["proof (prove)\nusing this:\n  is_prefix ss ts\n  p' = p @ ss\n  sss = ss @ [a]\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. is_prefix (p @ ss) q", "by simp"], ["proof (state)\nthis:\n  is_prefix (p @ ss) q\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix (p @ ss) q", "have \"is_prefix p' q\""], ["proof (prove)\nusing this:\n  is_prefix (p @ ss) q\n\ngoal (1 subgoal):\n 1. is_prefix p' q", "using p'"], ["proof (prove)\nusing this:\n  is_prefix (p @ ss) q\n  p' = p @ ss\n\ngoal (1 subgoal):\n 1. is_prefix p' q", "by simp"], ["proof (state)\nthis:\n  is_prefix p' q\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix p' q", "have h1: \"p' \\<in> \\<PP>\""], ["proof (prove)\nusing this:\n  is_prefix p' q\n\ngoal (1 subgoal):\n 1. p' \\<in> \\<PP>", "using q \\<PP>_covers_\\<P> prefixes_are_paths' subsetCE"], ["proof (prove)\nusing this:\n  is_prefix p' q\n  pvalid q x__ \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n  \\<P> ?k ?u \\<subseteq> \\<PP>\n  \\<lbrakk>?p \\<in> \\<PP>; is_prefix ?q ?p\\<rbrakk>\n  \\<Longrightarrow> ?q \\<in> \\<PP>\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. p' \\<in> \\<PP>", "by blast"], ["proof (state)\nthis:\n  p' \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have charslength_ss: \"charslength ss = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength ss = 0", "apply (rule empty_tokens_have_charslength_0)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t. t \\<in> set ss \\<Longrightarrow> chars_of_token t = []", "by (metis is_prefix_ss_ts append_is_Nil_conv chars_append chars_of_token_is_empty \n                      charslength.simps charslength_0 is_prefix_def length_greater_0_conv list.size(3))"], ["proof (state)\nthis:\n  charslength ss = 0\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  charslength ss = 0", "have h2: \"charslength p' = k\""], ["proof (prove)\nusing this:\n  charslength ss = 0\n\ngoal (1 subgoal):\n 1. charslength p' = k", "using p' p_ts"], ["proof (prove)\nusing this:\n  charslength ss = 0\n  p' = p @ ss\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. charslength p' = k", "by auto"], ["proof (state)\nthis:\n  charslength p' = k\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have a_in_ts: \"a \\<in> set ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set ts", "by (metis in_set_dropD is_prefix_append is_prefix_cons list.set_intros(1) \n                      snoc less(2))"], ["proof (state)\nthis:\n  a \\<in> set ts\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  a \\<in> set ts", "have h3: \"a \\<in> T\""], ["proof (prove)\nusing this:\n  a \\<in> set ts\n\ngoal (1 subgoal):\n 1. a \\<in> T", "using T p_ts"], ["proof (prove)\nusing this:\n  a \\<in> set ts\n  T = \\<Y> (\\<Z> k u) (\\<P> k u) k\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n\ngoal (1 subgoal):\n 1. a \\<in> T", "by blast"], ["proof (state)\nthis:\n  a \\<in> T\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h4: \"T \\<subseteq> \\<X> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<X> k", "using LocalLexing.\\<Z>.simps(2) LocalLexing_axioms T \\<Z>_subset_\\<X>"], ["proof (prove)\nusing this:\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  LocalLexing.\\<Z> ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel ?Doc ?k (Suc ?u) =\n  LocalLexing.\\<Y> ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel ?Doc\n   (LocalLexing.\\<Z> ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel ?Doc ?k ?u)\n   (LocalLexing.\\<P> ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel ?Doc ?k ?u) ?k\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  T = \\<Y> (\\<Z> k u) (\\<P> k u) k\n  \\<Z> ?k ?n \\<subseteq> \\<X> ?k\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<X> k", "by blast"], ["proof (state)\nthis:\n  T \\<subseteq> \\<X> k\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "note h5 = q'"], ["proof (state)\nthis:\n  q' = p' @ [a]\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "obtain N where N: \"N = item_nonterminal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        N = item_nonterminal x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  N = item_nonterminal x\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "obtain \\<alpha> where \\<alpha>: \"\\<alpha> = item_\\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> = item_\\<alpha> x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = item_\\<alpha> x\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "obtain \\<beta> where \\<beta>: \"\\<beta> = item_\\<beta> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> = item_\\<beta> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<beta> = item_\\<beta> x\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have item_rule_x: \"item_rule x = (N, \\<alpha> @ \\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule x = (N, \\<alpha> @ \\<beta>)", "using N \\<alpha> \\<beta> item_nonterminal_def item_rhs_def item_rhs_split"], ["proof (prove)\nusing this:\n  N = item_nonterminal x\n  \\<alpha> = item_\\<alpha> x\n  \\<beta> = item_\\<beta> x\n  item_nonterminal ?x = fst (item_rule ?x)\n  item_rhs ?x = snd (item_rule ?x)\n  item_rhs ?x = item_\\<alpha> ?x @ item_\\<beta> ?x\n\ngoal (1 subgoal):\n 1. item_rule x = (N, \\<alpha> @ \\<beta>)", "by auto"], ["proof (state)\nthis:\n  item_rule x = (N, \\<alpha> @ \\<beta>)\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens (p' @ [a]) \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length (p' @ [a]) \\<and>\n  charslength (p' @ [a]) = item_end x \\<and>\n  charslength (take r (p' @ [a])) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by blast"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  wellformed_item x", "have h6: \"(N, \\<alpha>@\\<beta>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>", "using item_rule_x"], ["proof (prove)\nusing this:\n  wellformed_item x\n  item_rule x = (N, \\<alpha> @ \\<beta>)\n\ngoal (1 subgoal):\n 1. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>", "by (simp add: wellformed_item_def)"], ["proof (state)\nthis:\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h7: \"r \\<le> length q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length q'", "using pvalid q'"], ["proof (prove)\nusing this:\n  wellformed_tokens (p' @ [a]) \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length (p' @ [a]) \\<and>\n  charslength (p' @ [a]) = item_end x \\<and>\n  charslength (take r (p' @ [a])) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\n  q' = p' @ [a]\n\ngoal (1 subgoal):\n 1. r \\<le> length q'", "by blast"], ["proof (state)\nthis:\n  r \\<le> length q'\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h8: \"leftderives [\\<SS>] (terminals (take r q') @ [N] @ \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q') @ [N] @ \\<omega>)", "using N is_leftderivation_def pvalid q'"], ["proof (prove)\nusing this:\n  N = item_nonterminal x\n  is_leftderivation ?u = leftderives [\\<SS>] ?u\n  wellformed_tokens (p' @ [a]) \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length (p' @ [a]) \\<and>\n  charslength (p' @ [a]) = item_end x \\<and>\n  charslength (take r (p' @ [a])) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\n  q' = p' @ [a]\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q') @ [N] @ \\<omega>)", "by blast"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r q') @ [N] @ \\<omega>)\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h9: \"leftderives \\<alpha> (terminals (drop r q'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r q'))", "using \\<alpha> pvalid q'"], ["proof (prove)\nusing this:\n  \\<alpha> = item_\\<alpha> x\n  wellformed_tokens (p' @ [a]) \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length (p' @ [a]) \\<and>\n  charslength (p' @ [a]) = item_end x \\<and>\n  charslength (take r (p' @ [a])) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r (p' @ [a])) @ [item_nonterminal x] @ \\<omega>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r (p' @ [a])))\n  q' = p' @ [a]\n\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r q'))", "by blast"], ["proof (state)\nthis:\n  leftderives \\<alpha> (terminals (drop r q'))\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h10: \"k = k + length (chars_of_token a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = k + length (chars_of_token a)", "by (simp add: a_in_ts chars_of_token_is_empty)"], ["proof (state)\nthis:\n  k = k + length (chars_of_token a)\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have h11: \"x = Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q')) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q'))\n     k", "by (metis \\<alpha> charslength_ss a_in_ts append_Nil2 chars.simps(2) chars_append \n                      chars_of_token_is_empty charslength.simps h2 item.collapse item_dot_is_\\<alpha>_length \n                      item_rule_x length_greater_0_conv list.size(3) pvalid q')"], ["proof (state)\nthis:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q')) k\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have x_dom: \"x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))", "using thmD11[OF h1 h2 h3 h4 h5 h6 h7 h8 h9 h10 h11]"], ["proof (prove)\nusing this:\n  ?I =\n  items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p')))) \\<Longrightarrow>\n  x \\<in> ?I\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))", "by auto"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "{"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "fix y :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "fix toks :: \"token list\""], ["proof (state)\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "assume pvalid_toks_y: \"pvalid toks y\""], ["proof (state)\nthis:\n  pvalid toks y\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "assume is_prefix_toks_p': \"is_prefix toks p'\""], ["proof (state)\nthis:\n  is_prefix toks p'\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix toks p'", "have charslength_toks: \"charslength toks \\<le> k\""], ["proof (prove)\nusing this:\n  is_prefix toks p'\n\ngoal (1 subgoal):\n 1. charslength toks \\<le> k", "using charslength_of_prefix h2"], ["proof (prove)\nusing this:\n  is_prefix toks p'\n  is_prefix ?a ?b \\<Longrightarrow> charslength ?a \\<le> charslength ?b\n  charslength p' = k\n\ngoal (1 subgoal):\n 1. charslength toks \\<le> k", "by blast"], ["proof (state)\nthis:\n  charslength toks \\<le> k\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  charslength toks \\<le> k", "have item_end_y: \"item_end y \\<le> k\""], ["proof (prove)\nusing this:\n  charslength toks \\<le> k\n\ngoal (1 subgoal):\n 1. item_end y \\<le> k", "using pvalid_item_end pvalid_toks_y"], ["proof (prove)\nusing this:\n  charslength toks \\<le> k\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n  pvalid toks y\n\ngoal (1 subgoal):\n 1. item_end y \\<le> k", "by auto"], ["proof (state)\nthis:\n  item_end y \\<le> k\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have \"is_prefix toks p \\<or> (\\<exists> ss'. is_prefix ss' ss \\<and> toks = p@ss')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix toks p \\<or>\n    (\\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss')", "using is_prefix_of_append is_prefix_toks_p' p'"], ["proof (prove)\nusing this:\n  is_prefix ?p (?a @ ?b) \\<Longrightarrow>\n  is_prefix ?p ?a \\<or>\n  (\\<exists>b'. b' \\<noteq> [] \\<and> is_prefix b' ?b \\<and> ?p = ?a @ b')\n  is_prefix toks p'\n  p' = p @ ss\n\ngoal (1 subgoal):\n 1. is_prefix toks p \\<or>\n    (\\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss')", "by auto"], ["proof (state)\nthis:\n  is_prefix toks p \\<or>\n  (\\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss')\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix toks p \\<or>\n  (\\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss')", "have \"y \\<in> J\""], ["proof (prove)\nusing this:\n  is_prefix toks p \\<or>\n  (\\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss')\n\ngoal (1 subgoal):\n 1. y \\<in> J", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "case 1"], ["proof (state)\nthis:\n  is_prefix toks p\n\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix toks p", "have \"toks \\<in> \\<P> k u\""], ["proof (prove)\nusing this:\n  is_prefix toks p\n\ngoal (1 subgoal):\n 1. toks \\<in> \\<P> k u", "using p_ts prefixes_are_paths"], ["proof (prove)\nusing this:\n  is_prefix toks p\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; is_prefix ?x ?p\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> \\<P> ?k ?u\n\ngoal (1 subgoal):\n 1. toks \\<in> \\<P> k u", "by blast"], ["proof (state)\nthis:\n  toks \\<in> \\<P> k u\n\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "with charslength_toks"], ["proof (chain)\npicking this:\n  charslength toks \\<le> k\n  toks \\<in> \\<P> k u", "have \"toks \\<in> paths_le k (\\<P> k u)\""], ["proof (prove)\nusing this:\n  charslength toks \\<le> k\n  toks \\<in> \\<P> k u\n\ngoal (1 subgoal):\n 1. toks \\<in> paths_le k (\\<P> k u)", "by (simp add: paths_le_def)"], ["proof (state)\nthis:\n  toks \\<in> paths_le k (\\<P> k u)\n\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  toks \\<in> paths_le k (\\<P> k u)", "have \"y \\<in> Gen (paths_le k (\\<P> k u))\""], ["proof (prove)\nusing this:\n  toks \\<in> paths_le k (\\<P> k u)\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k (\\<P> k u))", "using pvalid_toks_y\n                          Gen_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  toks \\<in> paths_le k (\\<P> k u)\n  pvalid toks y\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k (\\<P> k u))", "by blast"], ["proof (state)\nthis:\n  y \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  y \\<in> Gen (paths_le k (\\<P> k u))", "have \"y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\nusing this:\n  y \\<in> Gen (paths_le k (\\<P> k u))\n\ngoal (1 subgoal):\n 1. y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "using \\<pi>_apply_setmonotone"], ["proof (prove)\nusing this:\n  y \\<in> Gen (paths_le k (\\<P> k u))\n  ?x \\<in> ?I \\<Longrightarrow> ?x \\<in> \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "by blast"], ["proof (state)\nthis:\n  y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (2 subgoals):\n 1. is_prefix toks p \\<Longrightarrow> y \\<in> J\n 2. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))", "show \"y \\<in> J\""], ["proof (prove)\nusing this:\n  y \\<in> \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. y \\<in> J", "by (simp add: J items_le_def item_end_y)"], ["proof (state)\nthis:\n  y \\<in> J\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "case 2"], ["proof (state)\nthis:\n  \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss'\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss'", "obtain ss' where ss': \"is_prefix ss' ss \\<and> toks = p@ss'\""], ["proof (prove)\nusing this:\n  \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss'\n\ngoal (1 subgoal):\n 1. (\\<And>ss'.\n        is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_prefix ss' ss \\<and> toks = p @ ss'\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "then"], ["proof (chain)\npicking this:\n  is_prefix ss' ss \\<and> toks = p @ ss'", "have l1: \"length ss' < length sss\""], ["proof (prove)\nusing this:\n  is_prefix ss' ss \\<and> toks = p @ ss'\n\ngoal (1 subgoal):\n 1. length ss' < length sss", "using append_eq_conv_conj append_self_conv is_prefix_length length_append \n                            less_le_trans nat_neq_iff not_Cons_self2 not_add_less1 snoc"], ["proof (prove)\nusing this:\n  is_prefix ss' ss \\<and> toks = p @ ss'\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n  (?xs @ ?ys = ?xs) = (?ys = [])\n  is_prefix ?a ?b \\<Longrightarrow> length ?a \\<le> length ?b\n  length (?xs @ ?ys) = length ?xs + length ?ys\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  ?x # ?xs \\<noteq> ?xs\n  \\<not> ?i + ?j < ?i\n  sss = ss @ [a]\n\ngoal (1 subgoal):\n 1. length ss' < length sss", "by fastforce"], ["proof (state)\nthis:\n  length ss' < length sss\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "have l2: \"is_prefix ss' ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix ss' ts", "using ss' is_prefix_ss_ts"], ["proof (prove)\nusing this:\n  is_prefix ss' ss \\<and> toks = p @ ss'\n  is_prefix ss ts\n\ngoal (1 subgoal):\n 1. is_prefix ss' ts", "by (metis append_dropped_prefix is_prefix_append)"], ["proof (state)\nthis:\n  is_prefix ss' ts\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "have l3: \"pvalid (p @ ss') y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid (p @ ss') y", "using ss' pvalid_toks_y"], ["proof (prove)\nusing this:\n  is_prefix ss' ss \\<and> toks = p @ ss'\n  pvalid toks y\n\ngoal (1 subgoal):\n 1. pvalid (p @ ss') y", "by simp"], ["proof (state)\nthis:\n  pvalid (p @ ss') y\n\ngoal (1 subgoal):\n 1. \\<exists>ss'. is_prefix ss' ss \\<and> toks = p @ ss' \\<Longrightarrow>\n    y \\<in> J", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> J", "using less.hyps[OF l1 l2 l3]"], ["proof (prove)\nusing this:\n  y \\<in> J\n\ngoal (1 subgoal):\n 1. y \\<in> J", "by blast"], ["proof (state)\nthis:\n  y \\<in> J\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "}"], ["proof (state)\nthis:\n  \\<lbrakk>pvalid ?toks2 ?y2; is_prefix ?toks2 p'\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<in> J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>pvalid ?toks2 ?y2; is_prefix ?toks2 p'\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<in> J", "have \"Gen (Prefixes p') \\<subseteq> J\""], ["proof (prove)\nusing this:\n  \\<lbrakk>pvalid ?toks2 ?y2; is_prefix ?toks2 p'\\<rbrakk>\n  \\<Longrightarrow> ?y2 \\<in> J\n\ngoal (1 subgoal):\n 1. Gen (Prefixes p') \\<subseteq> J", "by (meson Gen_implies_pvalid Prefixes_is_prefix subsetI)"], ["proof (state)\nthis:\n  Gen (Prefixes p') \\<subseteq> J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "with x_dom"], ["proof (chain)\npicking this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))\n  Gen (Prefixes p') \\<subseteq> J", "have r0: \"x \\<in> items_le k (\\<pi> k {} (Scan T k J))\""], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k (Gen (Prefixes p'))))\n  Gen (Prefixes p') \\<subseteq> J\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<pi> k {} (Scan T k J))", "by (metis (no_types, lifting) LocalLexing.items_le_def LocalLexing_axioms \n                      mem_Collect_eq mono_Scan mono_\\<pi> mono_subset_elem subsetI)"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k J))\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "then"], ["proof (chain)\npicking this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k J))", "have x_in_\\<pi>: \"x \\<in> \\<pi> k {} (Scan T k J)\""], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k J))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (Scan T k J)", "using LocalLexing.items_le_is_filter LocalLexing_axioms subsetCE"], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k J))\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I \\<subseteq> ?I\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (Scan T k J)", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k {} (Scan T k J)\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have r1: \"Scan T k J = J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k J = J", "by (simp add: J Scan_\\<pi>_fix)"], ["proof (state)\nthis:\n  Scan T k J = J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "have r2: \"\\<pi> k {} J = J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k {} J = J", "using \\<pi>_idempotent'"], ["proof (prove)\nusing this:\n  \\<pi> ?k {} (\\<pi> ?k ?T ?I) = \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. \\<pi> k {} J = J", "using J"], ["proof (prove)\nusing this:\n  \\<pi> ?k {} (\\<pi> ?k ?T ?I) = \\<pi> ?k ?T ?I\n  J = \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. \\<pi> k {} J = J", "by blast"], ["proof (state)\nthis:\n  \\<pi> k {} J = J\n\ngoal (1 subgoal):\n 1. sss \\<noteq> [] \\<Longrightarrow> x \\<in> J", "from x_in_\\<pi> r1 r2"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k {} (Scan T k J)\n  Scan T k J = J\n  \\<pi> k {} J = J", "show \"x \\<in> J\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k {} (Scan T k J)\n  Scan T k J = J\n  \\<pi> k {} J = J\n\ngoal (1 subgoal):\n 1. x \\<in> J", "by auto"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>is_prefix sss ts; pvalid (p @ sss) x\\<rbrakk>\n  \\<Longrightarrow> x \\<in> J\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>is_prefix ?sss2 ts; pvalid (p @ ?sss2) x\\<rbrakk>\n  \\<Longrightarrow> x \\<in> J\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "note th = this"], ["proof (state)\nthis:\n  \\<lbrakk>is_prefix ?sss2 ts; pvalid (p @ ?sss2) x\\<rbrakk>\n  \\<Longrightarrow> x \\<in> J\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have x_in_J: \"x \\<in> J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> J", "apply (rule th[of ts])"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_prefix ts ts\n 2. pvalid (p @ ts) x", "apply (simp add: is_prefix_eq_proper_prefix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid (p @ ts) x", "using p_ts q"], ["proof (prove)\nusing this:\n  q = p @ ts \\<and>\n  p \\<in> \\<P> k u \\<and>\n  charslength p = k \\<and>\n  admissible (p @ ts) \\<and>\n  (\\<forall>t\\<in>set ts. t \\<in> \\<Y> (\\<Z> k u) (\\<P> k u) k) \\<and>\n  (\\<forall>t\\<in>set (butlast ts). chars_of_token t = [])\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. pvalid (p @ ts) x", "by blast"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have \\<T>_eq_\\<Z>: \"\\<T> k (Suc u) = \\<Z> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "using induct induct_tokens \\<T>_equals_\\<Z>_induct_step"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n  \\<T> k u = \\<Z> k u\n  \\<lbrakk>items_le ?k (\\<J> ?k ?u) = Gen (paths_le ?k (\\<P> ?k ?u));\n   \\<T> ?k ?u = \\<Z> ?k ?u\\<rbrakk>\n  \\<Longrightarrow> \\<T> ?k (Suc ?u) = \\<Z> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have T_alt: \"T = \\<T> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = \\<T> k (Suc u)", "using \\<T>_eq_\\<Z> T"], ["proof (prove)\nusing this:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n  T = \\<Y> (\\<Z> k u) (\\<P> k u) k\n\ngoal (1 subgoal):\n 1. T = \\<T> k (Suc u)", "by simp"], ["proof (state)\nthis:\n  T = \\<T> k (Suc u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "have \"J = \\<pi> k T (items_le k (\\<J> k u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. J = \\<pi> k T (items_le k (\\<J> k u))", "using induct J"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n  J = \\<pi> k T (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. J = \\<pi> k T (items_le k (\\<J> k u))", "by simp"], ["proof (state)\nthis:\n  J = \\<pi> k T (items_le k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  J = \\<pi> k T (items_le k (\\<J> k u))", "have \"J \\<subseteq> \\<pi> k T (\\<J> k u)\""], ["proof (prove)\nusing this:\n  J = \\<pi> k T (items_le k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. J \\<subseteq> \\<pi> k T (\\<J> k u)", "by (simp add: items_le_is_filter monoD mono_\\<pi>)"], ["proof (state)\nthis:\n  J \\<subseteq> \\<pi> k T (\\<J> k u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "with T_alt"], ["proof (chain)\npicking this:\n  T = \\<T> k (Suc u)\n  J \\<subseteq> \\<pi> k T (\\<J> k u)", "have \"J \\<subseteq> \\<J> k (Suc u)\""], ["proof (prove)\nusing this:\n  T = \\<T> k (Suc u)\n  J \\<subseteq> \\<pi> k T (\\<J> k u)\n\ngoal (1 subgoal):\n 1. J \\<subseteq> \\<J> k (Suc u)", "using \\<J>.simps(2)"], ["proof (prove)\nusing this:\n  T = \\<T> k (Suc u)\n  J \\<subseteq> \\<pi> k T (\\<J> k u)\n  \\<J> ?k (Suc ?u) = \\<pi> ?k (\\<T> ?k (Suc ?u)) (\\<J> ?k ?u)\n\ngoal (1 subgoal):\n 1. J \\<subseteq> \\<J> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  J \\<subseteq> \\<J> k (Suc u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "with x_in_J"], ["proof (chain)\npicking this:\n  x \\<in> J\n  J \\<subseteq> \\<J> k (Suc u)", "have \"x \\<in> \\<J> k (Suc u)\""], ["proof (prove)\nusing this:\n  x \\<in> J\n  J \\<subseteq> \\<J> k (Suc u)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<J> k (Suc u)\n\ngoal (1 subgoal):\n 1. q \\<notin> \\<P> k u \\<Longrightarrow>\n    x \\<in> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<J> k (Suc u)", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k (Suc u)\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k (Suc u))", "using LocalLexing.items_le_def LocalLexing_axioms pvalid_item_end q"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k (Suc u)\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n  pvalid q x \\<and> q \\<in> \\<P> k (Suc u) \\<and> charslength q \\<le> k\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<J> k (Suc u))", "by auto"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<J> k (Suc u))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<J> k (Suc u))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> Gen (paths_le k (\\<P> k (Suc u))) \\<Longrightarrow>\n  ?x2 \\<in> items_le k (\\<J> k (Suc u))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> Gen (paths_le k (\\<P> k (Suc u))) \\<Longrightarrow>\n  ?x2 \\<in> items_le k (\\<J> k (Suc u))", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> Gen (paths_le k (\\<P> k (Suc u))) \\<Longrightarrow>\n  ?x2 \\<in> items_le k (\\<J> k (Suc u))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k (Suc u)))\n    \\<subseteq> items_le k (\\<J> k (Suc u))", "by auto"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k (Suc u))) \\<subseteq> items_le k (\\<J> k (Suc u))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}