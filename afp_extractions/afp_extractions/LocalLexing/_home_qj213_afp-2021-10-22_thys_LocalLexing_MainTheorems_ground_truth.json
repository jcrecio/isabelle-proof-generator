{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/MainTheorems.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["theorem \\<II>_is_generated_by_\\<PP>: \"\\<II> = Gen \\<PP>\"", "lemma item_rule_finished_item[simp]: \"item_rule (finished_item \\<alpha>) = (\\<SS>, \\<alpha>)\"", "lemma item_origin_finished_item[simp]: \"item_origin (finished_item \\<alpha>) = 0\"", "lemma item_end_finished_item[simp]: \"item_end (finished_item \\<alpha>) = length Doc\"", "lemma item_dot_finished_item[simp]: \"item_dot (finished_item \\<alpha>) = length \\<alpha>\"", "lemma item_rhs_finished_item[simp]: \"item_rhs (finished_item \\<alpha>) = \\<alpha>\"", "lemma item_\\<alpha>_finished_item[simp]: \"item_\\<alpha> (finished_item \\<alpha>) = \\<alpha>\"", "lemma item_nonterminal_finished_item[simp]: \"item_nonterminal (finished_item \\<alpha>) = \\<SS>\"", "lemma Derives1_of_singleton:\n  assumes \"Derives1 [N] i r \\<alpha>\"\n  shows \"i = 0 \\<and> r = (N, \\<alpha>)\"", "lemma pvalid_with: \"pvalid p x = (\\<exists> u \\<gamma>. pvalid_with p x u \\<gamma>)\"", "theorem Completeness:\n  assumes p_in_ll: \"p \\<in> ll\"\n  shows \"\\<exists> \\<alpha>. pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> finished_item \\<alpha> \\<in> \\<II>\"", "theorem Soundness:\n  assumes finished_item_\\<alpha>: \"finished_item \\<alpha> \\<in> \\<II>\"\n  shows \"\\<exists> p. pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll\"", "lemma is_finished_and_finished_item:\n  assumes wellformed_x: \"wellformed_item x\"\n  shows \"is_finished x = (\\<exists> \\<alpha>. x = finished_item \\<alpha>)\"", "theorem Correctness:\n  shows \"(ll \\<noteq> {}) = earley_recognised\""], "translations": [["", "theorem \\<II>_is_generated_by_\\<PP>: \"\\<II> = Gen \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "have \"wellformed_items (\\<I> (length Doc))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<I> (length Doc))", "using wellformed_items_\\<I>"], ["proof (prove)\nusing this:\n  wellformed_items (\\<I> ?k)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<I> (length Doc))", "by auto"], ["proof (state)\nthis:\n  wellformed_items (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  wellformed_items (\\<I> (length Doc))", "have \"\\<And> x. x \\<in> \\<I> (length Doc) \\<Longrightarrow> item_end x \\<le> length Doc\""], ["proof (prove)\nusing this:\n  wellformed_items (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<I> (length Doc) \\<Longrightarrow>\n       item_end x \\<le> length Doc", "using wellformed_item_def wellformed_items_def"], ["proof (prove)\nusing this:\n  wellformed_items (\\<I> (length Doc))\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<I> (length Doc) \\<Longrightarrow>\n       item_end x \\<le> length Doc", "by blast"], ["proof (state)\nthis:\n  ?x \\<in> \\<I> (length Doc) \\<Longrightarrow> item_end ?x \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> \\<I> (length Doc) \\<Longrightarrow> item_end ?x \\<le> length Doc", "have \"\\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))\""], ["proof (prove)\nusing this:\n  ?x \\<in> \\<I> (length Doc) \\<Longrightarrow> item_end ?x \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))", "by (auto simp only: items_le_def)"], ["proof (state)\nthis:\n  \\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  \\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))", "have \"\\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))\""], ["proof (prove)\nusing this:\n  \\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))", "using items_le_is_filter"], ["proof (prove)\nusing this:\n  \\<I> (length Doc) \\<subseteq> items_le (length Doc) (\\<I> (length Doc))\n  items_le ?k ?I \\<subseteq> ?I\n\ngoal (1 subgoal):\n 1. \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))", "by blast"], ["proof (state)\nthis:\n  \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))", "have \\<II>_altdef: \"\\<II> = items_le (length Doc) (\\<I> (length Doc))\""], ["proof (prove)\nusing this:\n  \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = items_le (length Doc) (\\<I> (length Doc))", "using \\<II>_def"], ["proof (prove)\nusing this:\n  \\<I> (length Doc) = items_le (length Doc) (\\<I> (length Doc))\n  \\<II> = \\<I> (length Doc)\n\ngoal (1 subgoal):\n 1. \\<II> = items_le (length Doc) (\\<I> (length Doc))", "by auto"], ["proof (state)\nthis:\n  \\<II> = items_le (length Doc) (\\<I> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "have \"\\<And> p. p \\<in> (\\<Q> (length Doc)) \\<Longrightarrow> charslength p \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       p \\<in> \\<Q> (length Doc) \\<Longrightarrow>\n       charslength p \\<le> length Doc", "using \\<PP>_are_doc_tokens \\<PP>_def doc_tokens_length"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<PP> \\<Longrightarrow> doc_tokens ?p\n  \\<PP> = \\<Q> (length Doc)\n  doc_tokens ?p \\<Longrightarrow> length (chars ?p) \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<And>p.\n       p \\<in> \\<Q> (length Doc) \\<Longrightarrow>\n       charslength p \\<le> length Doc", "by auto"], ["proof (state)\nthis:\n  ?p \\<in> \\<Q> (length Doc) \\<Longrightarrow>\n  charslength ?p \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  ?p \\<in> \\<Q> (length Doc) \\<Longrightarrow>\n  charslength ?p \\<le> length Doc", "have \"\\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))\""], ["proof (prove)\nusing this:\n  ?p \\<in> \\<Q> (length Doc) \\<Longrightarrow>\n  charslength ?p \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))", "by (auto simp only: paths_le_def)"], ["proof (state)\nthis:\n  \\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  \\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))", "have \"\\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))\""], ["proof (prove)\nusing this:\n  \\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))", "using paths_le_is_filter"], ["proof (prove)\nusing this:\n  \\<Q> (length Doc) \\<subseteq> paths_le (length Doc) (\\<Q> (length Doc))\n  paths_le ?k ?P \\<subseteq> ?P\n\ngoal (1 subgoal):\n 1. \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))", "by blast"], ["proof (state)\nthis:\n  \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "then"], ["proof (chain)\npicking this:\n  \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))", "have \\<PP>_altdef: \"\\<PP> = paths_le (length Doc) (\\<Q> (length Doc))\""], ["proof (prove)\nusing this:\n  \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<PP> = paths_le (length Doc) (\\<Q> (length Doc))", "using \\<PP>_def"], ["proof (prove)\nusing this:\n  \\<Q> (length Doc) = paths_le (length Doc) (\\<Q> (length Doc))\n  \\<PP> = \\<Q> (length Doc)\n\ngoal (1 subgoal):\n 1. \\<PP> = paths_le (length Doc) (\\<Q> (length Doc))", "by auto"], ["proof (state)\nthis:\n  \\<PP> = paths_le (length Doc) (\\<Q> (length Doc))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "using \\<II>_altdef \\<PP>_altdef thmD14"], ["proof (prove)\nusing this:\n  \\<II> = items_le (length Doc) (\\<I> (length Doc))\n  \\<PP> = paths_le (length Doc) (\\<Q> (length Doc))\n  ?k \\<le> length Doc \\<Longrightarrow>\n  items_le ?k (\\<J> ?k ?u) = Gen (paths_le ?k (\\<P> ?k ?u)) \\<and>\n  \\<T> ?k ?u = \\<Z> ?k ?u \\<and>\n  items_le ?k (\\<I> ?k) = Gen (paths_le ?k (\\<Q> ?k))\n\ngoal (1 subgoal):\n 1. \\<II> = Gen \\<PP>", "by auto"], ["proof (state)\nthis:\n  \\<II> = Gen \\<PP>\n\ngoal:\nNo subgoals!", "qed"], ["", "definition finished_item :: \"symbol list \\<Rightarrow> item\"\nwhere\n  \"finished_item \\<alpha> = Item (\\<SS>, \\<alpha>) (length \\<alpha>) 0 (length Doc)\""], ["", "lemma item_rule_finished_item[simp]: \"item_rule (finished_item \\<alpha>) = (\\<SS>, \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule (finished_item \\<alpha>) = (\\<SS>, \\<alpha>)", "by (simp add: finished_item_def)"], ["", "lemma item_origin_finished_item[simp]: \"item_origin (finished_item \\<alpha>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin (finished_item \\<alpha>) = 0", "by (simp add: finished_item_def)"], ["", "lemma item_end_finished_item[simp]: \"item_end (finished_item \\<alpha>) = length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end (finished_item \\<alpha>) = length Doc", "by (simp add: finished_item_def)"], ["", "lemma item_dot_finished_item[simp]: \"item_dot (finished_item \\<alpha>) = length \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot (finished_item \\<alpha>) = length \\<alpha>", "by (simp add: finished_item_def)"], ["", "lemma item_rhs_finished_item[simp]: \"item_rhs (finished_item \\<alpha>) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (finished_item \\<alpha>) = \\<alpha>", "by (simp add: finished_item_def)"], ["", "lemma item_\\<alpha>_finished_item[simp]: \"item_\\<alpha> (finished_item \\<alpha>) = \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> (finished_item \\<alpha>) = \\<alpha>", "by (simp add: finished_item_def item_\\<alpha>_def)"], ["", "lemma item_nonterminal_finished_item[simp]: \"item_nonterminal (finished_item \\<alpha>) = \\<SS>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal (finished_item \\<alpha>) = \\<SS>", "by (simp add: finished_item_def item_nonterminal_def)"], ["", "lemma Derives1_of_singleton:\n  assumes \"Derives1 [N] i r \\<alpha>\"\n  shows \"i = 0 \\<and> r = (N, \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "from assms"], ["proof (chain)\npicking this:\n  Derives1 [N] i r \\<alpha>", "have \"i = 0\""], ["proof (prove)\nusing this:\n  Derives1 [N] i r \\<alpha>\n\ngoal (1 subgoal):\n 1. i = 0", "using Derives1_bound"], ["proof (prove)\nusing this:\n  Derives1 [N] i r \\<alpha>\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?i < length ?a\n\ngoal (1 subgoal):\n 1. i = 0", "using length_Cons less_Suc0 list.size(3)"], ["proof (prove)\nusing this:\n  Derives1 [N] i r \\<alpha>\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?i < length ?a\n  length (?x # ?xs) = Suc (length ?xs)\n  (?n < Suc 0) = (?n = 0)\n  length [] = 0\n\ngoal (1 subgoal):\n 1. i = 0", "by fastforce"], ["proof (state)\nthis:\n  i = 0\n\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "then"], ["proof (chain)\npicking this:\n  i = 0", "show ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "using assms"], ["proof (prove)\nusing this:\n  i = 0\n  Derives1 [N] i r \\<alpha>\n\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "using Derives1_def append_Cons append_self_conv append_self_conv2 length_0_conv \n      list.inject"], ["proof (prove)\nusing this:\n  i = 0\n  Derives1 [N] i r \\<alpha>\n  Derives1 ?u ?i ?r ?v =\n  (\\<exists>x y N \\<alpha>.\n      ?u = x @ [N] @ y \\<and>\n      ?v = x @ \\<alpha> @ y \\<and>\n      is_sentence x \\<and>\n      is_sentence y \\<and>\n      (N, \\<alpha>) \\<in> \\<RR> \\<and>\n      ?r = (N, \\<alpha>) \\<and> ?i = length x)\n  (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys\n  (?xs @ ?ys = ?xs) = (?ys = [])\n  (?xs @ ?ys = ?ys) = (?xs = [])\n  (length ?xs = 0) = (?xs = [])\n  (?x21.0 # ?x22.0 = ?y21.0 # ?y22.0) =\n  (?x21.0 = ?y21.0 \\<and> ?x22.0 = ?y22.0)\n\ngoal (1 subgoal):\n 1. i = 0 \\<and> r = (N, \\<alpha>)", "by auto"], ["proof (state)\nthis:\n  i = 0 \\<and> r = (N, \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition pvalid_with :: \"tokens \\<Rightarrow> item \\<Rightarrow> nat \\<Rightarrow> symbol list \\<Rightarrow> bool\"\nwhere\n  \"pvalid_with p x u \\<gamma> = \n     (wellformed_tokens p \\<and>\n     wellformed_item x \\<and>\n     u \\<le> length p \\<and>\n     charslength p = item_end x \\<and>\n     charslength (take u p) = item_origin x \\<and>\n     is_derivation (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> x) (terminals (drop u p)))\""], ["", "lemma pvalid_with: \"pvalid p x = (\\<exists> u \\<gamma>. pvalid_with p x u \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p x = (\\<exists>u \\<gamma>. pvalid_with p x u \\<gamma>)", "using pvalid_def pvalid_with_def"], ["proof (prove)\nusing this:\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  pvalid_with ?p ?x ?u ?\\<gamma> =\n  (wellformed_tokens ?p \\<and>\n   wellformed_item ?x \\<and>\n   ?u \\<le> length ?p \\<and>\n   charslength ?p = item_end ?x \\<and>\n   charslength (take ?u ?p) = item_origin ?x \\<and>\n   is_derivation\n    (terminals (take ?u ?p) @ [item_nonterminal ?x] @ ?\\<gamma>) \\<and>\n   derives (item_\\<alpha> ?x) (terminals (drop ?u ?p)))\n\ngoal (1 subgoal):\n 1. pvalid p x = (\\<exists>u \\<gamma>. pvalid_with p x u \\<gamma>)", "by blast"], ["", "theorem Completeness:\n  assumes p_in_ll: \"p \\<in> ll\"\n  shows \"\\<exists> \\<alpha>. pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> finished_item \\<alpha> \\<in> \\<II>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have p: \"p \\<in> \\<PP> \\<and> charslength p = length Doc \\<and> terminals p \\<in> \\<L>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP> \\<and>\n    charslength p = length Doc \\<and> terminals p \\<in> \\<L>", "using p_in_ll ll_def"], ["proof (prove)\nusing this:\n  p \\<in> ll\n  ll =\n  {p \\<in> \\<PP>. charslength p = length Doc \\<and> terminals p \\<in> \\<L>}\n\ngoal (1 subgoal):\n 1. p \\<in> \\<PP> \\<and>\n    charslength p = length Doc \\<and> terminals p \\<in> \\<L>", "by auto"], ["proof (state)\nthis:\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>", "have derives_p: \"derives [\\<SS>] (terminals p)\""], ["proof (prove)\nusing this:\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n\ngoal (1 subgoal):\n 1. derives [\\<SS>] (terminals p)", "using \\<L>_def is_derivation_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n  \\<L> = {v |v. is_word v \\<and> is_derivation v}\n  is_derivation ?u = derives [\\<SS>] ?u\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. derives [\\<SS>] (terminals p)", "by blast"], ["proof (state)\nthis:\n  derives [\\<SS>] (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  derives [\\<SS>] (terminals p)", "have \"\\<exists> D. Derivation [\\<SS>] D (terminals p)\""], ["proof (prove)\nusing this:\n  derives [\\<SS>] (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>D. Derivation [\\<SS>] D (terminals p)", "by (simp add: derives_implies_Derivation)"], ["proof (state)\nthis:\n  \\<exists>D. Derivation [\\<SS>] D (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  \\<exists>D. Derivation [\\<SS>] D (terminals p)", "obtain D where D: \"Derivation [\\<SS>] D (terminals p)\""], ["proof (prove)\nusing this:\n  \\<exists>D. Derivation [\\<SS>] D (terminals p)\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        Derivation [\\<SS>] D (terminals p) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derivation [\\<SS>] D (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have is_word_p: \"is_word (terminals p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word (terminals p)", "using leftlang p"], ["proof (prove)\nusing this:\n  \\<L> = {v |v. is_word v \\<and> is_leftderivation v}\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n\ngoal (1 subgoal):\n 1. is_word (terminals p)", "by blast"], ["proof (state)\nthis:\n  is_word (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have not_is_word_\\<SS>: \"\\<not> (is_word [\\<SS>])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_word [\\<SS>]", "using is_nonterminal_startsymbol is_terminal_nonterminal \n    is_word_cons"], ["proof (prove)\nusing this:\n  is_nonterminal \\<SS>\n  \\<lbrakk>is_terminal ?x; is_nonterminal ?x\\<rbrakk>\n  \\<Longrightarrow> False\n  is_word (?x # ?xs) = (is_terminal ?x \\<and> is_word ?xs)\n\ngoal (1 subgoal):\n 1. \\<not> is_word [\\<SS>]", "by blast"], ["proof (state)\nthis:\n  \\<not> is_word [\\<SS>]\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have \"D \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<noteq> []", "using D is_word_p not_is_word_\\<SS>"], ["proof (prove)\nusing this:\n  Derivation [\\<SS>] D (terminals p)\n  is_word (terminals p)\n  \\<not> is_word [\\<SS>]\n\ngoal (1 subgoal):\n 1. D \\<noteq> []", "using Derivation.simps(1)"], ["proof (prove)\nusing this:\n  Derivation [\\<SS>] D (terminals p)\n  is_word (terminals p)\n  \\<not> is_word [\\<SS>]\n  Derivation ?a [] ?b = (?a = ?b)\n\ngoal (1 subgoal):\n 1. D \\<noteq> []", "by force"], ["proof (state)\nthis:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  D \\<noteq> []", "have \"\\<exists> d D'. D = d#D'\""], ["proof (prove)\nusing this:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>d D'. D = d # D'", "using D Derivation.elims(2)"], ["proof (prove)\nusing this:\n  D \\<noteq> []\n  Derivation [\\<SS>] D (terminals p)\n  \\<lbrakk>Derivation ?x ?xa ?xb;\n   \\<And>a b.\n      \\<lbrakk>?x = a; ?xa = []; ?xb = b; a = b\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>a d D b.\n      \\<lbrakk>?x = a; ?xa = d # D; ?xb = b;\n       \\<exists>x.\n          Derives1 a (fst d) (snd d) x \\<and> Derivation x D b\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<exists>d D'. D = d # D'", "by blast"], ["proof (state)\nthis:\n  \\<exists>d D'. D = d # D'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  \\<exists>d D'. D = d # D'", "obtain d D' where d: \"D = d#D'\""], ["proof (prove)\nusing this:\n  \\<exists>d D'. D = d # D'\n\ngoal (1 subgoal):\n 1. (\\<And>d D'. D = d # D' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D = d # D'\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have \"\\<exists> \\<alpha>. Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and> derives \\<alpha> (terminals p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n       derives \\<alpha> (terminals p)", "using d D Derivation.simps(2) Derivation_implies_derives"], ["proof (prove)\nusing this:\n  D = d # D'\n  Derivation [\\<SS>] D (terminals p)\n  Derivation ?a (?d # ?D) ?b =\n  (\\<exists>x. Derives1 ?a (fst ?d) (snd ?d) x \\<and> Derivation x ?D ?b)\n  Derivation ?a ?D ?b \\<Longrightarrow> derives ?a ?b\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n       derives \\<alpha> (terminals p)", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>.\n     Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n     derives \\<alpha> (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>.\n     Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n     derives \\<alpha> (terminals p)", "obtain \\<alpha> where \\<alpha>: \"Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and> derives \\<alpha> (terminals p)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>.\n     Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n     derives \\<alpha> (terminals p)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n        derives \\<alpha> (terminals p) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)", "have snd_d_in_\\<RR>: \"snd d \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n\ngoal (1 subgoal):\n 1. snd d \\<in> \\<RR>", "using Derives1_rule"], ["proof (prove)\nusing this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?r \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. snd d \\<in> \\<RR>", "by blast"], ["proof (state)\nthis:\n  snd d \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "with \\<alpha>"], ["proof (chain)\npicking this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n  snd d \\<in> \\<RR>", "have snd_d: \"snd d = (\\<SS>, \\<alpha>)\""], ["proof (prove)\nusing this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n  snd d \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. snd d = (\\<SS>, \\<alpha>)", "using Derives1_of_singleton"], ["proof (prove)\nusing this:\n  Derives1 [\\<SS>] (fst d) (snd d) \\<alpha> \\<and>\n  derives \\<alpha> (terminals p)\n  snd d \\<in> \\<RR>\n  Derives1 [?N] ?i ?r ?\\<alpha> \\<Longrightarrow>\n  ?i = 0 \\<and> ?r = (?N, ?\\<alpha>)\n\ngoal (1 subgoal):\n 1. snd d = (\\<SS>, \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  snd d = (\\<SS>, \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have wellformed_p: \"wellformed_tokens p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens p", "by (simp add: \\<PP>_wellformed p)"], ["proof (state)\nthis:\n  wellformed_tokens p\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have wellformed_finished_item: \"wellformed_item (finished_item \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (finished_item \\<alpha>)", "apply (auto simp add: wellformed_item_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<SS>, \\<alpha>) \\<in> \\<RR>", "using snd_d snd_d_in_\\<RR>"], ["proof (prove)\nusing this:\n  snd d = (\\<SS>, \\<alpha>)\n  snd d \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (\\<SS>, \\<alpha>) \\<in> \\<RR>", "by metis"], ["proof (state)\nthis:\n  wellformed_item (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "have pvalid_with: \"pvalid_with p (finished_item \\<alpha>) 0 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid_with p (finished_item \\<alpha>) 0 []", "apply (auto simp add: pvalid_with_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. wellformed_tokens p\n 2. wellformed_item (finished_item \\<alpha>)\n 3. length (chars p) = length Doc\n 4. is_derivation [\\<SS>]\n 5. derives \\<alpha> (terminals p)", "using wellformed_p"], ["proof (prove)\nusing this:\n  wellformed_tokens p\n\ngoal (5 subgoals):\n 1. wellformed_tokens p\n 2. wellformed_item (finished_item \\<alpha>)\n 3. length (chars p) = length Doc\n 4. is_derivation [\\<SS>]\n 5. derives \\<alpha> (terminals p)", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item (finished_item \\<alpha>)\n 2. length (chars p) = length Doc\n 3. is_derivation [\\<SS>]\n 4. derives \\<alpha> (terminals p)", "using wellformed_finished_item"], ["proof (prove)\nusing this:\n  wellformed_item (finished_item \\<alpha>)\n\ngoal (4 subgoals):\n 1. wellformed_item (finished_item \\<alpha>)\n 2. length (chars p) = length Doc\n 3. is_derivation [\\<SS>]\n 4. derives \\<alpha> (terminals p)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (chars p) = length Doc\n 2. is_derivation [\\<SS>]\n 3. derives \\<alpha> (terminals p)", "using p"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n\ngoal (3 subgoals):\n 1. length (chars p) = length Doc\n 2. is_derivation [\\<SS>]\n 3. derives \\<alpha> (terminals p)", "apply (simp add: finished_item_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation [\\<SS>]\n 2. derives \\<alpha> (terminals p)", "apply (simp add: is_derivation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives \\<alpha> (terminals p)", "by (simp add: \\<alpha>)"], ["proof (state)\nthis:\n  pvalid_with p (finished_item \\<alpha>) 0 []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  pvalid_with p (finished_item \\<alpha>) 0 []", "have \"pvalid p (finished_item \\<alpha>)\""], ["proof (prove)\nusing this:\n  pvalid_with p (finished_item \\<alpha>) 0 []\n\ngoal (1 subgoal):\n 1. pvalid p (finished_item \\<alpha>)", "using pvalid_def pvalid_with_def"], ["proof (prove)\nusing this:\n  pvalid_with p (finished_item \\<alpha>) 0 []\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  pvalid_with ?p ?x ?u ?\\<gamma> =\n  (wellformed_tokens ?p \\<and>\n   wellformed_item ?x \\<and>\n   ?u \\<le> length ?p \\<and>\n   charslength ?p = item_end ?x \\<and>\n   charslength (take ?u ?p) = item_origin ?x \\<and>\n   is_derivation\n    (terminals (take ?u ?p) @ [item_nonterminal ?x] @ ?\\<gamma>) \\<and>\n   derives (item_\\<alpha> ?x) (terminals (drop ?u ?p)))\n\ngoal (1 subgoal):\n 1. pvalid p (finished_item \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  pvalid p (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  pvalid p (finished_item \\<alpha>)", "have \"finished_item \\<alpha> \\<in> Gen \\<PP>\""], ["proof (prove)\nusing this:\n  pvalid p (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> Gen \\<PP>", "using Gen_def mem_Collect_eq p"], ["proof (prove)\nusing this:\n  pvalid p (finished_item \\<alpha>)\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  (?a \\<in> Collect ?P) = ?P ?a\n  p \\<in> \\<PP> \\<and>\n  charslength p = length Doc \\<and> terminals p \\<in> \\<L>\n\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> Gen \\<PP>", "by blast"], ["proof (state)\nthis:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "then"], ["proof (chain)\npicking this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>", "have \"finished_item \\<alpha> \\<in> \\<II>\""], ["proof (prove)\nusing this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> \\<II>", "using \\<II>_is_generated_by_\\<PP>"], ["proof (prove)\nusing this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n  \\<II> = Gen \\<PP>\n\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> \\<II>", "by blast"], ["proof (state)\nthis:\n  finished_item \\<alpha> \\<in> \\<II>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "with pvalid_with"], ["proof (chain)\npicking this:\n  pvalid_with p (finished_item \\<alpha>) 0 []\n  finished_item \\<alpha> \\<in> \\<II>", "show ?thesis"], ["proof (prove)\nusing this:\n  pvalid_with p (finished_item \\<alpha>) 0 []\n  finished_item \\<alpha> \\<in> \\<II>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n       finished_item \\<alpha> \\<in> \\<II>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>.\n     pvalid_with p (finished_item \\<alpha>) 0 [] \\<and>\n     finished_item \\<alpha> \\<in> \\<II>\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Soundness:\n  assumes finished_item_\\<alpha>: \"finished_item \\<alpha> \\<in> \\<II>\"\n  shows \"\\<exists> p. pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "have \"finished_item \\<alpha> \\<in> Gen \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> Gen \\<PP>", "using \\<II>_is_generated_by_\\<PP> finished_item_\\<alpha>"], ["proof (prove)\nusing this:\n  \\<II> = Gen \\<PP>\n  finished_item \\<alpha> \\<in> \\<II>\n\ngoal (1 subgoal):\n 1. finished_item \\<alpha> \\<in> Gen \\<PP>", "by auto"], ["proof (state)\nthis:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "then"], ["proof (chain)\npicking this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>", "obtain p where p: \"p \\<in> \\<PP> \\<and> pvalid p (finished_item \\<alpha>)\""], ["proof (prove)\nusing this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> \\<PP> \\<and>\n        pvalid p (finished_item \\<alpha>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Gen_implies_pvalid"], ["proof (prove)\nusing this:\n  finished_item \\<alpha> \\<in> Gen \\<PP>\n  ?x \\<in> Gen ?P \\<Longrightarrow> \\<exists>p\\<in>?P. pvalid p ?x\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> \\<PP> \\<and>\n        pvalid p (finished_item \\<alpha>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<PP> \\<and> pvalid p (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "have pvalid_p_finished_item: \"pvalid  p (finished_item \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p (finished_item \\<alpha>)", "using p"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP> \\<and> pvalid p (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. pvalid p (finished_item \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  pvalid p (finished_item \\<alpha>)\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "from iffD1[OF pvalid_def this, simplified]"], ["proof (chain)\npicking this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  (\\<exists>u\\<le>length p.\n      length (chars p) = length Doc \\<and>\n      chars (take u p) = [] \\<and>\n      (\\<exists>\\<gamma>.\n          is_derivation (take u (terminals p) @ \\<SS> # \\<gamma>)) \\<and>\n      derives \\<alpha> (drop u (terminals p)))", "obtain r \\<gamma> where pvalid:\n    \"wellformed_tokens p \\<and>\n     wellformed_item (finished_item \\<alpha>) \\<and>\n     r \\<le> length p \\<and>\n     length (chars p) = length Doc \\<and>\n     chars (take r p) = [] \\<and>\n     is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and> derives \\<alpha> (drop r (terminals p))\""], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  (\\<exists>u\\<le>length p.\n      length (chars p) = length Doc \\<and>\n      chars (take u p) = [] \\<and>\n      (\\<exists>\\<gamma>.\n          is_derivation (take u (terminals p) @ \\<SS> # \\<gamma>)) \\<and>\n      derives \\<alpha> (drop u (terminals p)))\n\ngoal (1 subgoal):\n 1. (\\<And>r \\<gamma>.\n        wellformed_tokens p \\<and>\n        wellformed_item (finished_item \\<alpha>) \\<and>\n        r \\<le> length p \\<and>\n        length (chars p) = length Doc \\<and>\n        chars (take r p) = [] \\<and>\n        is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n        derives \\<alpha> (drop r (terminals p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by  blast"], ["proof (state)\nthis:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "have \"item_rule (finished_item \\<alpha>) \\<in> \\<RR>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule (finished_item \\<alpha>) \\<in> \\<RR>", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (1 subgoal):\n 1. item_rule (finished_item \\<alpha>) \\<in> \\<RR>", "using wellformed_item_def"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (1 subgoal):\n 1. item_rule (finished_item \\<alpha>) \\<in> \\<RR>", "by blast"], ["proof (state)\nthis:\n  item_rule (finished_item \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "then"], ["proof (chain)\npicking this:\n  item_rule (finished_item \\<alpha>) \\<in> \\<RR>", "have \"(\\<SS>, \\<alpha>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  item_rule (finished_item \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (\\<SS>, \\<alpha>) \\<in> \\<RR>", "by simp"], ["proof (state)\nthis:\n  (\\<SS>, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "then"], ["proof (chain)\npicking this:\n  (\\<SS>, \\<alpha>) \\<in> \\<RR>", "have is_derivation_\\<alpha>: \"is_derivation \\<alpha>\""], ["proof (prove)\nusing this:\n  (\\<SS>, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. is_derivation \\<alpha>", "by (simp add: is_derivation_def leftderives_rule)"], ["proof (state)\nthis:\n  is_derivation \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "have drop_r_p_in_\\<PP>: \"drop r p \\<in> \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop r p \\<in> \\<PP>", "apply (rule drop_empty_tokens)"], ["proof (prove)\ngoal (4 subgoals):\n 1. p \\<in> \\<PP>\n 2. r \\<le> length p\n 3. charslength (take r p) = 0\n 4. admissible (drop r p)", "using p"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP> \\<and> pvalid p (finished_item \\<alpha>)\n\ngoal (4 subgoals):\n 1. p \\<in> \\<PP>\n 2. r \\<le> length p\n 3. charslength (take r p) = 0\n 4. admissible (drop r p)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. r \\<le> length p\n 2. charslength (take r p) = 0\n 3. admissible (drop r p)", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (3 subgoals):\n 1. r \\<le> length p\n 2. charslength (take r p) = 0\n 3. admissible (drop r p)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. charslength (take r p) = 0\n 2. admissible (drop r p)", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (2 subgoals):\n 1. charslength (take r p) = 0\n 2. admissible (drop r p)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (drop r p)", "by (metis append_Nil2 derives_trans is_derivation_\\<alpha> is_derivation_def \n      is_derivation_implies_admissible is_word_terminals_drop pvalid terminals_drop)"], ["proof (state)\nthis:\n  drop r p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "then"], ["proof (chain)\npicking this:\n  drop r p \\<in> \\<PP>", "have in_ll: \"drop r p \\<in> ll\""], ["proof (prove)\nusing this:\n  drop r p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. drop r p \\<in> ll", "apply (auto simp add: ll_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. drop r p \\<in> \\<PP> \\<Longrightarrow>\n    length (chars (drop r p)) = length Doc\n 2. drop r p \\<in> \\<PP> \\<Longrightarrow> drop r (terminals p) \\<in> \\<L>", "apply (metis append_Nil append_take_drop_id chars_append pvalid)"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop r p \\<in> \\<PP> \\<Longrightarrow> drop r (terminals p) \\<in> \\<L>", "using is_derivation_\\<alpha> pvalid"], ["proof (prove)\nusing this:\n  is_derivation \\<alpha>\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (1 subgoal):\n 1. drop r p \\<in> \\<PP> \\<Longrightarrow> drop r (terminals p) \\<in> \\<L>", "by (metis (no_types, lifting) \\<L>_def derives_trans is_derivation_def \n      is_word_terminals_drop mem_Collect_eq terminals_drop)"], ["proof (state)\nthis:\n  drop r p \\<in> ll\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "have \"pvalid_with (drop r p) (finished_item \\<alpha>) 0 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid_with (drop r p) (finished_item \\<alpha>) 0 []", "apply (auto simp add: pvalid_with_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. wellformed_tokens (drop r p)\n 2. wellformed_item (finished_item \\<alpha>)\n 3. length (chars (drop r p)) = length Doc\n 4. is_derivation [\\<SS>]\n 5. derives \\<alpha> (drop r (terminals p))", "using \\<PP>_wellformed drop_r_p_in_\\<PP>"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<PP> \\<Longrightarrow> wellformed_tokens ?p\n  drop r p \\<in> \\<PP>\n\ngoal (5 subgoals):\n 1. wellformed_tokens (drop r p)\n 2. wellformed_item (finished_item \\<alpha>)\n 3. length (chars (drop r p)) = length Doc\n 4. is_derivation [\\<SS>]\n 5. derives \\<alpha> (drop r (terminals p))", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item (finished_item \\<alpha>)\n 2. length (chars (drop r p)) = length Doc\n 3. is_derivation [\\<SS>]\n 4. derives \\<alpha> (drop r (terminals p))", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (4 subgoals):\n 1. wellformed_item (finished_item \\<alpha>)\n 2. length (chars (drop r p)) = length Doc\n 3. is_derivation [\\<SS>]\n 4. derives \\<alpha> (drop r (terminals p))", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (chars (drop r p)) = length Doc\n 2. is_derivation [\\<SS>]\n 3. derives \\<alpha> (drop r (terminals p))", "apply (metis append_Nil append_take_drop_id chars_append pvalid)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation [\\<SS>]\n 2. derives \\<alpha> (drop r (terminals p))", "apply (simp add: is_derivation_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives \\<alpha> (drop r (terminals p))", "using pvalid"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item (finished_item \\<alpha>) \\<and>\n  r \\<le> length p \\<and>\n  length (chars p) = length Doc \\<and>\n  chars (take r p) = [] \\<and>\n  is_derivation (take r (terminals p) @ \\<SS> # \\<gamma>) \\<and>\n  derives \\<alpha> (drop r (terminals p))\n\ngoal (1 subgoal):\n 1. derives \\<alpha> (drop r (terminals p))", "by blast"], ["proof (state)\nthis:\n  pvalid_with (drop r p) (finished_item \\<alpha>) 0 []\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "with in_ll"], ["proof (chain)\npicking this:\n  drop r p \\<in> ll\n  pvalid_with (drop r p) (finished_item \\<alpha>) 0 []", "show ?thesis"], ["proof (prove)\nusing this:\n  drop r p \\<in> ll\n  pvalid_with (drop r p) (finished_item \\<alpha>) 0 []\n\ngoal (1 subgoal):\n 1. \\<exists>p.\n       pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll", "by auto"], ["proof (state)\nthis:\n  \\<exists>p. pvalid_with p (finished_item \\<alpha>) 0 [] \\<and> p \\<in> ll\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_finished_and_finished_item:\n  assumes wellformed_x: \"wellformed_item x\"\n  shows \"is_finished x = (\\<exists> \\<alpha>. x = finished_item \\<alpha>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "assume is_finished_x: \"is_finished x\""], ["proof (state)\nthis:\n  is_finished x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "obtain \\<alpha> where \\<alpha>: \"\\<alpha> = item_rhs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> = item_rhs x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = item_rhs x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "have \"x = finished_item \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = finished_item \\<alpha>", "apply (rule item.expand)"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rule x = item_rule (finished_item \\<alpha>) \\<and>\n    item_dot x = item_dot (finished_item \\<alpha>) \\<and>\n    item_origin x = item_origin (finished_item \\<alpha>) \\<and>\n    item_end x = item_end (finished_item \\<alpha>)", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. item_rule x = (\\<SS>, \\<alpha>)\n 2. item_dot x = length \\<alpha>\n 3. item_origin x = 0\n 4. item_end x = length Doc", "using \\<alpha> is_finished_def is_finished_x item_nonterminal_def item_rhs_def"], ["proof (prove)\nusing this:\n  \\<alpha> = item_rhs x\n  is_finished ?x =\n  (item_nonterminal ?x = \\<SS> \\<and>\n   item_origin ?x = 0 \\<and> item_end ?x = length Doc \\<and> is_complete ?x)\n  is_finished x\n  item_nonterminal ?x = fst (item_rule ?x)\n  item_rhs ?x = snd (item_rule ?x)\n\ngoal (4 subgoals):\n 1. item_rule x = (\\<SS>, \\<alpha>)\n 2. item_dot x = length \\<alpha>\n 3. item_origin x = 0\n 4. item_end x = length Doc", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. item_dot x = length \\<alpha>\n 2. item_origin x = 0\n 3. item_end x = length Doc", "using \\<alpha> assms is_complete_def is_finished_def is_finished_x wellformed_item_def"], ["proof (prove)\nusing this:\n  \\<alpha> = item_rhs x\n  wellformed_item x\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  is_finished ?x =\n  (item_nonterminal ?x = \\<SS> \\<and>\n   item_origin ?x = 0 \\<and> item_end ?x = length Doc \\<and> is_complete ?x)\n  is_finished x\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (3 subgoals):\n 1. item_dot x = length \\<alpha>\n 2. item_origin x = 0\n 3. item_end x = length Doc", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_origin x = 0\n 2. item_end x = length Doc", "using is_finished_def is_finished_x"], ["proof (prove)\nusing this:\n  is_finished ?x =\n  (item_nonterminal ?x = \\<SS> \\<and>\n   item_origin ?x = 0 \\<and> item_end ?x = length Doc \\<and> is_complete ?x)\n  is_finished x\n\ngoal (2 subgoals):\n 1. item_origin x = 0\n 2. item_end x = length Doc", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = length Doc", "using is_finished_def is_finished_x"], ["proof (prove)\nusing this:\n  is_finished ?x =\n  (item_nonterminal ?x = \\<SS> \\<and>\n   item_origin ?x = 0 \\<and> item_end ?x = length Doc \\<and> is_complete ?x)\n  is_finished x\n\ngoal (1 subgoal):\n 1. item_end x = length Doc", "by auto"], ["proof (state)\nthis:\n  x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "then"], ["proof (chain)\npicking this:\n  x = finished_item \\<alpha>", "have \"\\<exists> \\<alpha>. x = finished_item \\<alpha>\""], ["proof (prove)\nusing this:\n  x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha>. x = finished_item \\<alpha>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "}"], ["proof (state)\nthis:\n  is_finished x \\<Longrightarrow>\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "note left_implies_right = this"], ["proof (state)\nthis:\n  is_finished x \\<Longrightarrow>\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "{"], ["proof (state)\nthis:\n  is_finished x \\<Longrightarrow>\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "assume \"\\<exists> \\<alpha>. x = finished_item \\<alpha>\""], ["proof (state)\nthis:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>", "obtain \\<alpha> where \\<alpha>: \"x = finished_item \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        x = finished_item \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = finished_item \\<alpha>\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "have \"is_finished x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_finished x", "by (simp add: \\<alpha> is_finished_def is_complete_def)"], ["proof (state)\nthis:\n  is_finished x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "}"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha> \\<Longrightarrow>\n  is_finished x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "note right_implies_left = this"], ["proof (state)\nthis:\n  \\<exists>\\<alpha>. x = finished_item \\<alpha> \\<Longrightarrow>\n  is_finished x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "using left_implies_right right_implies_left"], ["proof (prove)\nusing this:\n  is_finished x \\<Longrightarrow>\n  \\<exists>\\<alpha>. x = finished_item \\<alpha>\n  \\<exists>\\<alpha>. x = finished_item \\<alpha> \\<Longrightarrow>\n  is_finished x\n\ngoal (1 subgoal):\n 1. is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)", "by blast"], ["proof (state)\nthis:\n  is_finished x = (\\<exists>\\<alpha>. x = finished_item \\<alpha>)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem Correctness:\n  shows \"(ll \\<noteq> {}) = earley_recognised\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "have 1: \"(ll \\<noteq> {}) = (\\<exists> \\<alpha>. finished_item \\<alpha> \\<in> \\<II>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) =\n    (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>)", "using Soundness Completeness ex_in_conv"], ["proof (prove)\nusing this:\n  finished_item ?\\<alpha> \\<in> \\<II> \\<Longrightarrow>\n  \\<exists>p. pvalid_with p (finished_item ?\\<alpha>) 0 [] \\<and> p \\<in> ll\n  ?p \\<in> ll \\<Longrightarrow>\n  \\<exists>\\<alpha>.\n     pvalid_with ?p (finished_item \\<alpha>) 0 [] \\<and>\n     finished_item \\<alpha> \\<in> \\<II>\n  (\\<exists>x. x \\<in> ?A) = (?A \\<noteq> {})\n\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) =\n    (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>)", "by fastforce"], ["proof (state)\nthis:\n  (ll \\<noteq> {}) = (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>)\n\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "have 2: \"(\\<exists> \\<alpha>. finished_item \\<alpha> \\<in> \\<II>) = (\\<exists> x \\<in> \\<II>. is_finished x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>) =\n    Bex \\<II> is_finished", "using \\<II>_def is_finished_and_finished_item wellformed_items_\\<I> wellformed_items_def"], ["proof (prove)\nusing this:\n  \\<II> = \\<I> (length Doc)\n  wellformed_item ?x \\<Longrightarrow>\n  is_finished ?x = (\\<exists>\\<alpha>. ?x = finished_item \\<alpha>)\n  wellformed_items (\\<I> ?k)\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>) =\n    Bex \\<II> is_finished", "by auto"], ["proof (state)\nthis:\n  (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>) =\n  Bex \\<II> is_finished\n\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "using earley_recognised_def 1 2"], ["proof (prove)\nusing this:\n  earley_recognised = Bex \\<II> is_finished\n  (ll \\<noteq> {}) = (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>)\n  (\\<exists>\\<alpha>. finished_item \\<alpha> \\<in> \\<II>) =\n  Bex \\<II> is_finished\n\ngoal (1 subgoal):\n 1. (ll \\<noteq> {}) = earley_recognised", "by blast"], ["proof (state)\nthis:\n  (ll \\<noteq> {}) = earley_recognised\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}