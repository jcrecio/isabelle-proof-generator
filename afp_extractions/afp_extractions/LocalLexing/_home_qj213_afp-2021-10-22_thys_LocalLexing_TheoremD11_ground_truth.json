{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD11.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma LeftDerivationLadder_length_1:\n  assumes ladder: \"LeftDerivationLadder \\<alpha> D L \\<gamma>\"\n  assumes singleton_L: \"length L = 1\"\n  shows \"LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>\"", "lemma LeftDerivationFix_from_singleton_helper:\n  assumes \"LeftDerivationFix [A] 0 D (length u) (u @ [B] @ v)\"\n  shows \"D = []\"", "lemma LeftDerivationFix_from_singleton:\n  assumes \"LeftDerivationFix [A] i D j \\<gamma>\"\n  shows \"D = []\"", "lemma LeftDerivationLadder_ladder_\\<gamma>_last:\n  assumes \"LeftDerivationLadder \\<alpha> D L \\<gamma>\"\n  shows \"\\<gamma> = ladder_\\<gamma> \\<alpha> D L (length L - 1)\"", "theorem thmD11_helper:\n  \"p \\<in> \\<PP> \\<Longrightarrow>\n   charslength p = k \\<Longrightarrow> \n   X \\<in> T \\<Longrightarrow>\n   T \\<subseteq> \\<X> k \\<Longrightarrow>\n   q = p @ [X] \\<Longrightarrow>\n   (N, \\<alpha>@\\<beta>) \\<in> \\<RR> \\<Longrightarrow>\n   r \\<le> length q \\<Longrightarrow>\n   LeftDerivation [\\<SS>] D ((terminals (take r q))@[N]@\\<gamma>) \\<Longrightarrow>\n   leftderives \\<alpha> (terminals (drop r q)) \\<Longrightarrow>\n   k' = k + length (chars_of_token X) \\<Longrightarrow>\n   x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r q)) k' \\<Longrightarrow>\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))) \\<Longrightarrow>\n   x \\<in> I\"", "theorem thmD11:\n  assumes p_dom: \"p \\<in> \\<PP>\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes X_dom: \"X \\<in> T\"\n  assumes T_dom: \"T \\<subseteq> \\<X> k\"\n  assumes q_def: \"q = p @ [X]\"\n  assumes rule_dom: \"(N, \\<alpha>@\\<beta>) \\<in> \\<RR>\"\n  assumes r: \"r \\<le> length q\"\n  assumes leftderives_start: \"leftderives [\\<SS>] ((terminals (take r q))@[N]@\\<gamma>)\"\n  assumes leftderives_\\<alpha>: \"leftderives \\<alpha> (terminals (drop r q))\"\n  assumes k': \"k' = k + length (chars_of_token X)\"\n  assumes item_def: \"x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r q)) k'\"\n  assumes I: \"I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\"\n  shows \"x \\<in> I\""], "translations": [["", "lemma LeftDerivationLadder_length_1:\n  assumes ladder: \"LeftDerivationLadder \\<alpha> D L \\<gamma>\"\n  assumes singleton_L: \"length L = 1\"\n  shows \"LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>", "have ldfix: \"LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D) (ladder_j L 0) \n    (ladder_\\<gamma> \\<alpha> D L 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D)\n     (ladder_j L 0) (ladder_\\<gamma> \\<alpha> D L 0)", "using ladder LeftDerivationLadder_def"], ["proof (prove)\nusing this:\n  LeftDerivationLadder \\<alpha> D L \\<gamma>\n  LeftDerivationLadder ?a ?D ?L ?b =\n  (LeftDerivation ?a ?D ?b \\<and>\n   is_ladder ?D ?L \\<and>\n   LeftDerivationFix ?a (ladder_i ?L 0) (take (ladder_n ?L 0) ?D)\n    (ladder_j ?L 0) (ladder_\\<gamma> ?a ?D ?L 0) \\<and>\n   LeftDerivationIntros ?a ?D ?L)\n\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D)\n     (ladder_j L 0) (ladder_\\<gamma> \\<alpha> D L 0)", "by blast"], ["proof (state)\nthis:\n  LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D)\n   (ladder_j L 0) (ladder_\\<gamma> \\<alpha> D L 0)\n\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>", "have ladder_n_0: \"ladder_n L 0 = length D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_n L 0 = length D", "using ladder singleton_L"], ["proof (prove)\nusing this:\n  LeftDerivationLadder \\<alpha> D L \\<gamma>\n  length L = 1\n\ngoal (1 subgoal):\n 1. ladder_n L 0 = length D", "by (metis LeftDerivationLadder_def One_nat_def diff_Suc_1 is_ladder_def ladder_last_n_intro)"], ["proof (state)\nthis:\n  ladder_n L 0 = length D\n\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>", "from ldfix ladder_n_0 ladder singleton_L"], ["proof (chain)\npicking this:\n  LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D)\n   (ladder_j L 0) (ladder_\\<gamma> \\<alpha> D L 0)\n  ladder_n L 0 = length D\n  LeftDerivationLadder \\<alpha> D L \\<gamma>\n  length L = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  LeftDerivationFix \\<alpha> (ladder_i L 0) (take (ladder_n L 0) D)\n   (ladder_j L 0) (ladder_\\<gamma> \\<alpha> D L 0)\n  ladder_n L 0 = length D\n  LeftDerivationLadder \\<alpha> D L \\<gamma>\n  length L = 1\n\ngoal (1 subgoal):\n 1. LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>", "by (metis Derivation_unique_dest LeftDerivationLadder_def \n      LeftDerivationLadder_implies_LeftDerivation_at_index LeftDerivationLadder_ladder_n_bound \n      LeftDerivation_implies_Derivation One_nat_def diff_Suc_1 ladder_last_j_def take_all \n      zero_less_one)"], ["proof (state)\nthis:\n  LeftDerivationFix \\<alpha> (ladder_i L 0) D (ladder_last_j L) \\<gamma>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivationFix_from_singleton_helper:\n  assumes \"LeftDerivationFix [A] 0 D (length u) (u @ [B] @ v)\"\n  shows \"D = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D = []", "from iffD1[OF LeftDerivationFix_def assms]"], ["proof (chain)\npicking this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  (\\<exists>E F.\n      D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n      LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n      LeftDerivation (drop (Suc 0) [A]) F\n       (drop (Suc (length u)) (u @ [B] @ v)))", "obtain E F where EF:\n    \"is_sentence [A] \\<and>\n     is_sentence (u @ [B] @ v) \\<and>\n     LeftDerivation [A] D (u @ [B] @ v) \\<and>\n     0 < length [A] \\<and>\n     length u < length (u @ [B] @ v) \\<and>\n     [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n     D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n     LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n     LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\""], ["proof (prove)\nusing this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  (\\<exists>E F.\n      D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n      LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n      LeftDerivation (drop (Suc 0) [A]) F\n       (drop (Suc (length u)) (u @ [B] @ v)))\n\ngoal (1 subgoal):\n 1. (\\<And>E F.\n        is_sentence [A] \\<and>\n        is_sentence (u @ [B] @ v) \\<and>\n        LeftDerivation [A] D (u @ [B] @ v) \\<and>\n        0 < length [A] \\<and>\n        length u < length (u @ [B] @ v) \\<and>\n        [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n        D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n        LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n        LeftDerivation (drop (Suc 0) [A]) F\n         (drop (Suc (length u)) (u @ [B] @ v)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\n\ngoal (1 subgoal):\n 1. D = []", "from EF"], ["proof (chain)\npicking this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))", "have E: \"E = []\""], ["proof (prove)\nusing this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\n\ngoal (1 subgoal):\n 1. E = []", "by (metis Derivation.elims(2) Derives1_split LeftDerivation_implies_Derivation \n      Nil_is_append_conv list.distinct(1) take_0)"], ["proof (state)\nthis:\n  E = []\n\ngoal (1 subgoal):\n 1. D = []", "from EF"], ["proof (chain)\npicking this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))", "have F: \"F = []\""], ["proof (prove)\nusing this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\n\ngoal (1 subgoal):\n 1. F = []", "by (metis E LeftDerivation.simps(1) LeftDerivation_ge_take LeftDerivation_implies_Derivation \n      append_eq_conv_conj derivation_ge_shift is_word_Derivation length_Cons length_derivation_shift \n      list.size(3) nth_Cons_0 nth_append self_append_conv2 take_0)"], ["proof (state)\nthis:\n  F = []\n\ngoal (1 subgoal):\n 1. D = []", "from EF E F"], ["proof (chain)\npicking this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\n  E = []\n  F = []", "show \"D = []\""], ["proof (prove)\nusing this:\n  is_sentence [A] \\<and>\n  is_sentence (u @ [B] @ v) \\<and>\n  LeftDerivation [A] D (u @ [B] @ v) \\<and>\n  0 < length [A] \\<and>\n  length u < length (u @ [B] @ v) \\<and>\n  [A] ! 0 = (u @ [B] @ v) ! length u \\<and>\n  D = E @ derivation_shift F 0 (Suc (length u)) \\<and>\n  LeftDerivation (take 0 [A]) E (take (length u) (u @ [B] @ v)) \\<and>\n  LeftDerivation (drop (Suc 0) [A]) F (drop (Suc (length u)) (u @ [B] @ v))\n  E = []\n  F = []\n\ngoal (1 subgoal):\n 1. D = []", "by auto"], ["proof (state)\nthis:\n  D = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivationFix_from_singleton:\n  assumes \"LeftDerivationFix [A] i D j \\<gamma>\"\n  shows \"D = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D = []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. D = []", "have \"\\<exists> u B v. splits_at \\<gamma> j u B v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u B v. splits_at \\<gamma> j u B v", "using assms"], ["proof (prove)\nusing this:\n  LeftDerivationFix [A] i D j \\<gamma>\n\ngoal (1 subgoal):\n 1. \\<exists>u B v. splits_at \\<gamma> j u B v", "using LeftDerivationFix_splits_at_derives"], ["proof (prove)\nusing this:\n  LeftDerivationFix [A] i D j \\<gamma>\n  LeftDerivationFix ?a ?i ?D ?j ?b \\<Longrightarrow>\n  \\<exists>U a1 a2 b1 b2.\n     splits_at ?a ?i a1 U a2 \\<and>\n     splits_at ?b ?j b1 U b2 \\<and> derives a1 b1 \\<and> derives a2 b2\n\ngoal (1 subgoal):\n 1. \\<exists>u B v. splits_at \\<gamma> j u B v", "by blast"], ["proof (state)\nthis:\n  \\<exists>u B v. splits_at \\<gamma> j u B v\n\ngoal (1 subgoal):\n 1. D = []", "then"], ["proof (chain)\npicking this:\n  \\<exists>u B v. splits_at \\<gamma> j u B v", "obtain u B v where s: \"splits_at \\<gamma> j u B v\""], ["proof (prove)\nusing this:\n  \\<exists>u B v. splits_at \\<gamma> j u B v\n\ngoal (1 subgoal):\n 1. (\\<And>u B v.\n        splits_at \\<gamma> j u B v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at \\<gamma> j u B v\n\ngoal (1 subgoal):\n 1. D = []", "from s"], ["proof (chain)\npicking this:\n  splits_at \\<gamma> j u B v", "have s1: \"\\<gamma> = u @ [B] @ v\""], ["proof (prove)\nusing this:\n  splits_at \\<gamma> j u B v\n\ngoal (1 subgoal):\n 1. \\<gamma> = u @ [B] @ v", "using splits_at_combine"], ["proof (prove)\nusing this:\n  splits_at \\<gamma> j u B v\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<gamma> = u @ [B] @ v", "by blast"], ["proof (state)\nthis:\n  \\<gamma> = u @ [B] @ v\n\ngoal (1 subgoal):\n 1. D = []", "from s"], ["proof (chain)\npicking this:\n  splits_at \\<gamma> j u B v", "have s2: \"j = length u\""], ["proof (prove)\nusing this:\n  splits_at \\<gamma> j u B v\n\ngoal (1 subgoal):\n 1. j = length u", "using splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<gamma> j u B v\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. j = length u", "by auto"], ["proof (state)\nthis:\n  j = length u\n\ngoal (1 subgoal):\n 1. D = []", "from assms s1 s2 LeftDerivationFix_from_singleton_helper"], ["proof (chain)\npicking this:\n  LeftDerivationFix [A] i D j \\<gamma>\n  \\<gamma> = u @ [B] @ v\n  j = length u\n  LeftDerivationFix [?A] 0 ?D (length ?u) (?u @ [?B] @ ?v) \\<Longrightarrow>\n  ?D = []", "show ?thesis"], ["proof (prove)\nusing this:\n  LeftDerivationFix [A] i D j \\<gamma>\n  \\<gamma> = u @ [B] @ v\n  j = length u\n  LeftDerivationFix [?A] 0 ?D (length ?u) (?u @ [?B] @ ?v) \\<Longrightarrow>\n  ?D = []\n\ngoal (1 subgoal):\n 1. D = []", "by (metis LeftDerivationFix_def length_Cons less_Suc0 list.size(3))"], ["proof (state)\nthis:\n  D = []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivationLadder_ladder_\\<gamma>_last:\n  assumes \"LeftDerivationLadder \\<alpha> D L \\<gamma>\"\n  shows \"\\<gamma> = ladder_\\<gamma> \\<alpha> D L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<gamma> = ladder_\\<gamma> \\<alpha> D L (length L - 1)", "by (metis Derive LeftDerivationLadder_def LeftDerivation_implies_Derivation One_nat_def assms \n  is_ladder_def last_ladder_\\<gamma>)"], ["", "theorem thmD11_helper:\n  \"p \\<in> \\<PP> \\<Longrightarrow>\n   charslength p = k \\<Longrightarrow> \n   X \\<in> T \\<Longrightarrow>\n   T \\<subseteq> \\<X> k \\<Longrightarrow>\n   q = p @ [X] \\<Longrightarrow>\n   (N, \\<alpha>@\\<beta>) \\<in> \\<RR> \\<Longrightarrow>\n   r \\<le> length q \\<Longrightarrow>\n   LeftDerivation [\\<SS>] D ((terminals (take r q))@[N]@\\<gamma>) \\<Longrightarrow>\n   leftderives \\<alpha> (terminals (drop r q)) \\<Longrightarrow>\n   k' = k + length (chars_of_token X) \\<Longrightarrow>\n   x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r q)) k' \\<Longrightarrow>\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))) \\<Longrightarrow>\n   x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<PP>; charslength p = k; X \\<in> T;\n     T \\<subseteq> \\<X> k; q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>;\n     r \\<le> length q;\n     LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>);\n     leftderives \\<alpha> (terminals (drop r q));\n     k' = k + length (chars_of_token X);\n     x =\n     Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q))\n      k';\n     I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n    \\<Longrightarrow> x \\<in> I", "proof (induct \"length D\" arbitrary: D r N \\<gamma> \\<alpha> \\<beta> x rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D r N \\<gamma> \\<alpha> \\<beta> x.\n       \\<lbrakk>\\<And>Da r N \\<gamma> \\<alpha> \\<beta> x.\n                   \\<lbrakk>length Da < length D; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>;\n                    r \\<le> length q;\n                    LeftDerivation [\\<SS>] Da\n                     (terminals (take r q) @ [N] @ \\<gamma>);\n                    leftderives \\<alpha> (terminals (drop r q));\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r q)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length q;\n        LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>);\n        leftderives \\<alpha> (terminals (drop r q));\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r q)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?D < length D; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; q = p @ [X];\n   (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>; ?r \\<le> length q;\n   LeftDerivation [\\<SS>] ?D (terminals (take ?r q) @ [?N] @ ?\\<gamma>);\n   leftderives ?\\<alpha> (terminals (drop ?r q));\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r q)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. \\<And>D r N \\<gamma> \\<alpha> \\<beta> x.\n       \\<lbrakk>\\<And>Da r N \\<gamma> \\<alpha> \\<beta> x.\n                   \\<lbrakk>length Da < length D; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>;\n                    r \\<le> length q;\n                    LeftDerivation [\\<SS>] Da\n                     (terminals (take r q) @ [N] @ \\<gamma>);\n                    leftderives \\<alpha> (terminals (drop r q));\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r q)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length q;\n        LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>);\n        leftderives \\<alpha> (terminals (drop r q));\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r q)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "have \"D = [] \\<or> D \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D = [] \\<or> D \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  D = [] \\<or> D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<And>D r N \\<gamma> \\<alpha> \\<beta> x.\n       \\<lbrakk>\\<And>Da r N \\<gamma> \\<alpha> \\<beta> x.\n                   \\<lbrakk>length Da < length D; p \\<in> \\<PP>;\n                    charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n                    q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>;\n                    r \\<le> length q;\n                    LeftDerivation [\\<SS>] Da\n                     (terminals (take r q) @ [N] @ \\<gamma>);\n                    leftderives \\<alpha> (terminals (drop r q));\n                    k' = k + length (chars_of_token X);\n                    x =\n                    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n                     (charslength (take r q)) k';\n                    I =\n                    items_le k'\n                     (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n                   \\<Longrightarrow> x \\<in> I;\n        p \\<in> \\<PP>; charslength p = k; X \\<in> T; T \\<subseteq> \\<X> k;\n        q = p @ [X]; (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>; r \\<le> length q;\n        LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>);\n        leftderives \\<alpha> (terminals (drop r q));\n        k' = k + length (chars_of_token X);\n        x =\n        Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>)\n         (charslength (take r q)) k';\n        I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  D = [] \\<or> D \\<noteq> []", "show ?case"], ["proof (prove)\nusing this:\n  D = [] \\<or> D \\<noteq> []\n\ngoal (1 subgoal):\n 1. x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  D = []\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  D = []", "have r: \"r = 0\""], ["proof (prove)\nusing this:\n  D = []\n\ngoal (1 subgoal):\n 1. r = 0", "by (metis LeftDerivation.simps(1) diff_add_0 diff_add_inverse2 le_0_eq length_0_conv \n            length_append length_terminals less.prems(7) less.prems(8) list.size(4) take_eq_Nil)"], ["proof (state)\nthis:\n  r = 0\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "with 1"], ["proof (chain)\npicking this:\n  D = []\n  r = 0", "have \\<gamma>: \"\\<gamma> = []\""], ["proof (prove)\nusing this:\n  D = []\n  r = 0\n\ngoal (1 subgoal):\n 1. \\<gamma> = []", "using LeftDerivation.simps(1) append_Cons append_self_conv2 less.prems(8) list.inject \n            take_eq_Nil terminals_empty"], ["proof (prove)\nusing this:\n  D = []\n  r = 0\n  LeftDerivation ?a [] ?b = (?a = ?b)\n  (?x # ?xs) @ ?ys = ?x # ?xs @ ?ys\n  (?xs @ ?ys = ?ys) = (?xs = [])\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  (?x21.0 # ?x22.0 = ?y21.0 # ?y22.0) =\n  (?x21.0 = ?y21.0 \\<and> ?x22.0 = ?y22.0)\n  (take ?n ?xs = []) = (?n = 0 \\<or> ?xs = [])\n  terminals [] = []\n\ngoal (1 subgoal):\n 1. \\<gamma> = []", "by auto"], ["proof (state)\nthis:\n  \\<gamma> = []\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "from r \\<gamma> 1"], ["proof (chain)\npicking this:\n  r = 0\n  \\<gamma> = []\n  D = []", "have start_is_N: \"\\<SS> = N\""], ["proof (prove)\nusing this:\n  r = 0\n  \\<gamma> = []\n  D = []\n\ngoal (1 subgoal):\n 1. \\<SS> = N", "using LeftDerivation.simps(1) append_eq_Cons_conv less.prems(8) list.inject take_eq_Nil \n            terminals_empty"], ["proof (prove)\nusing this:\n  r = 0\n  \\<gamma> = []\n  D = []\n  LeftDerivation ?a [] ?b = (?a = ?b)\n  (?ys @ ?zs = ?x # ?xs) =\n  (?ys = [] \\<and> ?zs = ?x # ?xs \\<or>\n   (\\<exists>ys'. ?ys = ?x # ys' \\<and> ys' @ ?zs = ?xs))\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  (?x21.0 # ?x22.0 = ?y21.0 # ?y22.0) =\n  (?x21.0 = ?y21.0 \\<and> ?x22.0 = ?y22.0)\n  (take ?n ?xs = []) = (?n = 0 \\<or> ?xs = [])\n  terminals [] = []\n\ngoal (1 subgoal):\n 1. \\<SS> = N", "by auto"], ["proof (state)\nthis:\n  \\<SS> = N\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "have h1: \"r \\<le> length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length p", "using r"], ["proof (prove)\nusing this:\n  r = 0\n\ngoal (1 subgoal):\n 1. r \\<le> length p", "by auto"], ["proof (state)\nthis:\n  r \\<le> length p\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "have h2: \"leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)", "by (simp add: r \\<gamma> start_is_N)"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "have h3: \"leftderives \\<alpha> (terminals (drop r p @ [X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "using \"less.prems\""], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "by (simp add: r \"less.prems\")"], ["proof (state)\nthis:\n  leftderives \\<alpha> (terminals (drop r p @ [X]))\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "have h4: \"x = Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p))\n     k'", "using \"less.prems\""], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p))\n     k'", "by (simp add: r \"less.prems\")"], ["proof (state)\nthis:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n\ngoal (2 subgoals):\n 1. D = [] \\<Longrightarrow> x \\<in> I\n 2. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "from thmD10[OF \"less.prems\"(1, 2, 3, 4, 6) h1 h2 h3 \"less.prems\"(10) h4  \"less.prems\"(12)]"], ["proof (chain)\npicking this:\n  x \\<in> I", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "."], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "note D_non_empty = 2"], ["proof (state)\nthis:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "have \"r < length q \\<or> r = length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r < length q \\<or> r = length q", "using less"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?D < length D; p \\<in> \\<PP>; charslength p = k;\n   X \\<in> T; T \\<subseteq> \\<X> k; q = p @ [X];\n   (?N, ?\\<alpha> @ ?\\<beta>) \\<in> \\<RR>; ?r \\<le> length q;\n   LeftDerivation [\\<SS>] ?D (terminals (take ?r q) @ [?N] @ ?\\<gamma>);\n   leftderives ?\\<alpha> (terminals (drop ?r q));\n   k' = k + length (chars_of_token X);\n   ?x =\n   Item (?N, ?\\<alpha> @ ?\\<beta>) (length ?\\<alpha>)\n    (charslength (take ?r q)) k';\n   I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> I\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. r < length q \\<or> r = length q", "by arith"], ["proof (state)\nthis:\n  r < length q \\<or> r = length q\n\ngoal (1 subgoal):\n 1. D \\<noteq> [] \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  r < length q \\<or> r = length q", "show ?case"], ["proof (prove)\nusing this:\n  r < length q \\<or> r = length q\n\ngoal (1 subgoal):\n 1. x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  r < length q\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have h1: \"r \\<le> length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length p", "using less.prems 1"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  r < length q\n\ngoal (1 subgoal):\n 1. r \\<le> length p", "by auto"], ["proof (state)\nthis:\n  r \\<le> length p\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have take_q_p: \"take r q = take r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take r q = take r p", "using 1 less.prems"], ["proof (prove)\nusing this:\n  r < length q\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. take r q = take r p", "by (simp add: drop_keep_last le_neq_implies_less nat_le_linear not_less_eq not_less_eq_eq)"], ["proof (state)\nthis:\n  take r q = take r p\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have h2: \"leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)", "apply (simp only: take_q_p[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)", "using less.prems LeftDerivation_implies_leftderives"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r p) @ [N] @ \\<gamma>)\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have h3: \"leftderives \\<alpha> (terminals (drop r p @ [X]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "using less.prems(5, 9) h1"], ["proof (prove)\nusing this:\n  q = p @ [X]\n  leftderives \\<alpha> (terminals (drop r q))\n  r \\<le> length p\n\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r p @ [X]))", "by simp"], ["proof (state)\nthis:\n  leftderives \\<alpha> (terminals (drop r p @ [X]))\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have h4: \"k' = k + length (chars_of_token X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' = k + length (chars_of_token X)", "using less.prems"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. k' = k + length (chars_of_token X)", "by blast"], ["proof (state)\nthis:\n  k' = k + length (chars_of_token X)\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "have h5: \"x = Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p))\n     k'", "using less.prems take_q_p"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  take r q = take r p\n\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p))\n     k'", "by simp"], ["proof (state)\nthis:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r p)) k'\n\ngoal (2 subgoals):\n 1. r < length q \\<Longrightarrow> x \\<in> I\n 2. r = length q \\<Longrightarrow> x \\<in> I", "from thmD10[OF \"less.prems\"(1, 2, 3, 4, 6) h1 h2 h3 h4 h5 less.prems(12)]"], ["proof (chain)\npicking this:\n  x \\<in> I", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "."], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  r = length q\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "from 2"], ["proof (chain)\npicking this:\n  r = length q", "have ld: \"LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)\""], ["proof (prove)\nusing this:\n  r = length q\n\ngoal (1 subgoal):\n 1. LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)", "using less.prems(8)"], ["proof (prove)\nusing this:\n  r = length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "from 2"], ["proof (chain)\npicking this:\n  r = length q", "have \\<alpha>_derives_empty: \"derives \\<alpha> []\""], ["proof (prove)\nusing this:\n  r = length q\n\ngoal (1 subgoal):\n 1. derives \\<alpha> []", "using less.prems(9)"], ["proof (prove)\nusing this:\n  r = length q\n  leftderives \\<alpha> (terminals (drop r q))\n\ngoal (1 subgoal):\n 1. derives \\<alpha> []", "by auto"], ["proof (state)\nthis:\n  derives \\<alpha> []\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have is_sentence_p: \"is_sentence (terminals p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (terminals p)", "using less.prems(1) \\<L>\\<^sub>P_derives \\<PP>_are_admissible admissible_def is_derivation_def \n                is_derivation_is_sentence is_sentence_concat"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  ?a \\<in> \\<L>\\<^sub>P \\<Longrightarrow>\n  \\<exists>b. derives [\\<SS>] (?a @ b)\n  ?p \\<in> \\<PP> \\<Longrightarrow> admissible ?p\n  admissible ?ts = (terminals ?ts \\<in> \\<L>\\<^sub>P)\n  is_derivation ?u = derives [\\<SS>] ?u\n  is_derivation ?s \\<Longrightarrow> is_sentence ?s\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n\ngoal (1 subgoal):\n 1. is_sentence (terminals p)", "by blast"], ["proof (state)\nthis:\n  is_sentence (terminals p)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have is_symbol_X: \"is_symbol (terminal_of_token X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_symbol (terminal_of_token X)", "using less.prems(3, 4) \\<X>_are_terminals is_symbol_def rev_subsetD"], ["proof (prove)\nusing this:\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  ?u \\<in> \\<X> ?k \\<Longrightarrow> is_terminal (terminal_of_token ?u)\n  is_symbol ?s = (is_terminal ?s \\<or> is_nonterminal ?s)\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n\ngoal (1 subgoal):\n 1. is_symbol (terminal_of_token X)", "by blast"], ["proof (state)\nthis:\n  is_symbol (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have is_sentence_q: \"is_sentence (terminals q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (terminals q)", "using is_sentence_p is_symbol_X \n              less.prems LeftDerivation_implies_leftderives is_derivation_def \n              is_derivation_is_sentence is_sentence_concat ld leftderives_implies_derives"], ["proof (prove)\nusing this:\n  is_sentence (terminals p)\n  is_symbol (terminal_of_token X)\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  is_derivation ?u = derives [\\<SS>] ?u\n  is_derivation ?s \\<Longrightarrow> is_sentence ?s\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n\ngoal (1 subgoal):\n 1. is_sentence (terminals q)", "by blast"], ["proof (state)\nthis:\n  is_sentence (terminals q)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have is_symbol_N: \"is_symbol N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_symbol N", "using less.prems(6) is_symbol_def rule_nonterminal_type"], ["proof (prove)\nusing this:\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  is_symbol ?s = (is_terminal ?s \\<or> is_nonterminal ?s)\n  (?N, ?\\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_nonterminal ?N\n\ngoal (1 subgoal):\n 1. is_symbol N", "by blast"], ["proof (state)\nthis:\n  is_symbol N\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have is_sentence_\\<gamma>: \"is_sentence \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence \\<gamma>", "by (meson LeftDerivation_implies_leftderives is_derivation_def is_derivation_is_sentence \n                is_sentence_concat ld leftderives_implies_derives)"], ["proof (state)\nthis:\n  is_sentence \\<gamma>\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have ld_exists_h1: \"is_sentence (terminals q @ [N] @ \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (terminals q @ [N] @ \\<gamma>)", "using is_sentence_q is_sentence_\\<gamma> is_symbol_N is_sentence_concat \n                LeftDerivation_implies_leftderives is_derivation_def is_derivation_is_sentence ld \n                leftderives_implies_derives"], ["proof (prove)\nusing this:\n  is_sentence (terminals q)\n  is_sentence \\<gamma>\n  is_symbol N\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  is_derivation ?u = derives [\\<SS>] ?u\n  is_derivation ?s \\<Longrightarrow> is_sentence ?s\n  LeftDerivation [\\<SS>] D (terminals q @ [N] @ \\<gamma>)\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n\ngoal (1 subgoal):\n 1. is_sentence (terminals q @ [N] @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  is_sentence (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have ld_exists_h2: \"length q < length (terminals q @ [N] @ \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length q < length (terminals q @ [N] @ \\<gamma>)", "by simp"], ["proof (state)\nthis:\n  length q < length (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "from LeftDerivationLadder_exists[OF ld ld_exists_h1 ld_exists_h2]"], ["proof (chain)\npicking this:\n  \\<exists>L.\n     LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>) \\<and>\n     ladder_last_j L = length q", "obtain L where \n              L: \"LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\" and \n              L_last_j: \"ladder_last_j L = length q\""], ["proof (prove)\nusing this:\n  \\<exists>L.\n     LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>) \\<and>\n     ladder_last_j L = length q\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        \\<lbrakk>LeftDerivationLadder [\\<SS>] D L\n                  (terminals q @ [N] @ \\<gamma>);\n         ladder_last_j L = length q\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n  ladder_last_j L = length q\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "note r_eq_length_q = 2"], ["proof (state)\nthis:\n  r = length q\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have ladder_i_0_eq_0: \"ladder_i L 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ladder_i L 0 = 0", "using L append_Nil ladder_i_0_bound \n              length_append_singleton less_Suc0 list.size(3)"], ["proof (prove)\nusing this:\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n  [] @ ?ys = ?ys\n  LeftDerivationLadder ?\\<alpha> ?D ?L ?\\<gamma> \\<Longrightarrow>\n  ladder_i ?L 0 < length ?\\<alpha>\n  length (?xs @ [?x]) = Suc (length ?xs)\n  (?n < Suc 0) = (?n = 0)\n  length [] = 0\n\ngoal (1 subgoal):\n 1. ladder_i L 0 = 0", "by fastforce"], ["proof (state)\nthis:\n  ladder_i L 0 = 0\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "have \"length L = 1 \\<or> length L > 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length L = 1 \\<or> 1 < length L", "using L"], ["proof (prove)\nusing this:\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. length L = 1 \\<or> 1 < length L", "by (metis LeftDerivationLadder_def Suc_eq_plus1 Suc_eq_plus1_left butlast_conv_take \n                butlast_snoc diff_add_inverse2 is_ladder_def le_add1 le_neq_implies_less \n                length_append_singleton old.nat.exhaust take_0)"], ["proof (state)\nthis:\n  length L = 1 \\<or> 1 < length L\n\ngoal (1 subgoal):\n 1. r = length q \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length L = 1 \\<or> 1 < length L", "show ?case"], ["proof (prove)\nusing this:\n  length L = 1 \\<or> 1 < length L\n\ngoal (1 subgoal):\n 1. x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  length L = 1\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivationLadder_length_1[OF L 1] ladder_i_0_eq_0"], ["proof (chain)\npicking this:\n  LeftDerivationFix [\\<SS>] (ladder_i L 0) D (ladder_last_j L)\n   (terminals q @ [N] @ \\<gamma>)\n  ladder_i L 0 = 0", "have ldfix: \"LeftDerivationFix [\\<SS>] 0 D (ladder_last_j L) (terminals q @ [N] @ \\<gamma>)\""], ["proof (prove)\nusing this:\n  LeftDerivationFix [\\<SS>] (ladder_i L 0) D (ladder_last_j L)\n   (terminals q @ [N] @ \\<gamma>)\n  ladder_i L 0 = 0\n\ngoal (1 subgoal):\n 1. LeftDerivationFix [\\<SS>] 0 D (ladder_last_j L)\n     (terminals q @ [N] @ \\<gamma>)", "by auto"], ["proof (state)\nthis:\n  LeftDerivationFix [\\<SS>] 0 D (ladder_last_j L)\n   (terminals q @ [N] @ \\<gamma>)\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "with LeftDerivationFix_from_singleton"], ["proof (chain)\npicking this:\n  LeftDerivationFix [?A] ?i ?D ?j ?\\<gamma> \\<Longrightarrow> ?D = []\n  LeftDerivationFix [\\<SS>] 0 D (ladder_last_j L)\n   (terminals q @ [N] @ \\<gamma>)", "have \"D = []\""], ["proof (prove)\nusing this:\n  LeftDerivationFix [?A] ?i ?D ?j ?\\<gamma> \\<Longrightarrow> ?D = []\n  LeftDerivationFix [\\<SS>] 0 D (ladder_last_j L)\n   (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. D = []", "by blast"], ["proof (state)\nthis:\n  D = []\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "with D_non_empty"], ["proof (chain)\npicking this:\n  D \\<noteq> []\n  D = []", "have \"False\""], ["proof (prove)\nusing this:\n  D \\<noteq> []\n  D = []\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. length L = 1 \\<Longrightarrow> x \\<in> I\n 2. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. x \\<in> I", "by blast"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  1 < length L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain a where a: \"a = ladder_\\<alpha> [\\<SS>] D L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        a = ladder_\\<alpha> [\\<SS>] D L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a = ladder_\\<alpha> [\\<SS>] D L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  a = ladder_\\<alpha> [\\<SS>] D L (length L - 1)", "have a_as_\\<gamma>: \"a = ladder_\\<gamma> [\\<SS>] D L (length L - 2)\""], ["proof (prove)\nusing this:\n  a = ladder_\\<alpha> [\\<SS>] D L (length L - 1)\n\ngoal (1 subgoal):\n 1. a = ladder_\\<gamma> [\\<SS>] D L (length L - 2)", "using 2 ladder_\\<alpha>_def"], ["proof (prove)\nusing this:\n  a = ladder_\\<alpha> [\\<SS>] D L (length L - 1)\n  1 < length L\n  ladder_\\<alpha> ?a ?D ?L ?index =\n  (if ?index = 0 then ?a else ladder_\\<gamma> ?a ?D ?L (?index - 1))\n\ngoal (1 subgoal):\n 1. a = ladder_\\<gamma> [\\<SS>] D L (length L - 2)", "by (metis diff_diff_left diff_is_0_eq not_le one_add_one)"], ["proof (state)\nthis:\n  a = ladder_\\<gamma> [\\<SS>] D L (length L - 2)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have introsAt: \"LeftDerivationIntrosAt [\\<SS>] D L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivationIntrosAt [\\<SS>] D L (length L - 1)", "using L"], ["proof (prove)\nusing this:\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. LeftDerivationIntrosAt [\\<SS>] D L (length L - 1)", "by (metis \"2.hyps\" LeftDerivationIntros_def LeftDerivationLadder_def One_nat_def \n                    Suc_leI Suc_lessD diff_less less_not_refl not_less_eq zero_less_diff)"], ["proof (state)\nthis:\n  LeftDerivationIntrosAt [\\<SS>] D L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain i where i: \"i = ladder_i L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i.\n        i = ladder_i L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  i = ladder_i L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain j where j: \"j = ladder_j L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        j = ladder_j L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j = ladder_j L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain ix where ix: \"ix = ladder_ix L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ix.\n        ix = ladder_ix L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ix = ladder_ix L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain c where c: \"c = ladder_\\<gamma> [\\<SS>] D L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>c.\n        c = ladder_\\<gamma> [\\<SS>] D L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c = ladder_\\<gamma> [\\<SS>] D L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain n where n: \"n = ladder_n L (length L - 1 - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        n = ladder_n L (length L - 1 - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  n = ladder_n L (length L - 1 - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain m where m: \"m = ladder_n L (length L - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m = ladder_n L (length L - 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  m = ladder_n L (length L - 1)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain e where e: \"e = D ! n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e. e = D ! n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  e = D ! n\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain E where E: \"E = drop (Suc n) (take m D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>E.\n        E = drop (Suc n) (take m D) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  E = drop (Suc n) (take m D)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from iffD1[OF LeftDerivationIntrosAt_def introsAt]"], ["proof (chain)\npicking this:\n  let \\<alpha> = ladder_\\<alpha> [\\<SS>] D L (length L - 1);\n      i = ladder_i L (length L - 1); j = ladder_j L (length L - 1);\n      ix = ladder_ix L (length L - 1);\n      \\<gamma> = ladder_\\<gamma> [\\<SS>] D L (length L - 1);\n      n = ladder_n L (length L - 1 - 1); m = ladder_n L (length L - 1);\n      e = D ! n; E = drop (Suc n) (take m D)\n  in i = fst e \\<and> LeftDerivationIntro \\<alpha> i (snd e) ix E j \\<gamma>", "have \"i = fst e \\<and> LeftDerivationIntro a i (snd e) ix E j c\""], ["proof (prove)\nusing this:\n  let \\<alpha> = ladder_\\<alpha> [\\<SS>] D L (length L - 1);\n      i = ladder_i L (length L - 1); j = ladder_j L (length L - 1);\n      ix = ladder_ix L (length L - 1);\n      \\<gamma> = ladder_\\<gamma> [\\<SS>] D L (length L - 1);\n      n = ladder_n L (length L - 1 - 1); m = ladder_n L (length L - 1);\n      e = D ! n; E = drop (Suc n) (take m D)\n  in i = fst e \\<and> LeftDerivationIntro \\<alpha> i (snd e) ix E j \\<gamma>\n\ngoal (1 subgoal):\n 1. i = fst e \\<and> LeftDerivationIntro a i (snd e) ix E j c", "by (metis E a c e i ix j m n)"], ["proof (state)\nthis:\n  i = fst e \\<and> LeftDerivationIntro a i (snd e) ix E j c\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  i = fst e \\<and> LeftDerivationIntro a i (snd e) ix E j c", "have i_eq_fst_e: \"i = fst e\" and \n                  ldintro: \"LeftDerivationIntro a i (snd e) ix E j c\""], ["proof (prove)\nusing this:\n  i = fst e \\<and> LeftDerivationIntro a i (snd e) ix E j c\n\ngoal (1 subgoal):\n 1. i = fst e &&& LeftDerivationIntro a i (snd e) ix E j c", "by auto"], ["proof (state)\nthis:\n  i = fst e\n  LeftDerivationIntro a i (snd e) ix E j c\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have c_def: \"c = terminals q @ [N] @ \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = terminals q @ [N] @ \\<gamma>", "using c L LeftDerivationLadder_ladder_\\<gamma>_last"], ["proof (prove)\nusing this:\n  c = ladder_\\<gamma> [\\<SS>] D L (length L - 1)\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n  LeftDerivationLadder ?\\<alpha> ?D ?L ?\\<gamma> \\<Longrightarrow>\n  ?\\<gamma> = ladder_\\<gamma> ?\\<alpha> ?D ?L (length ?L - 1)\n\ngoal (1 subgoal):\n 1. c = terminals q @ [N] @ \\<gamma>", "by simp"], ["proof (state)\nthis:\n  c = terminals q @ [N] @ \\<gamma>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from iffD1[OF LeftDerivationIntro_def ldintro]"], ["proof (chain)\npicking this:\n  \\<exists>\\<beta>.\n     LeftDerives1 a i (snd e) \\<beta> \\<and>\n     ix < length (snd (snd e)) \\<and>\n     snd (snd e) ! ix = c ! j \\<and>\n     LeftDerivationFix \\<beta> (i + ix) E j c", "obtain b where b:\n                  \"LeftDerives1 a i (snd e) b \\<and> ix < length (snd (snd e)) \\<and> \n                   snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\""], ["proof (prove)\nusing this:\n  \\<exists>\\<beta>.\n     LeftDerives1 a i (snd e) \\<beta> \\<and>\n     ix < length (snd (snd e)) \\<and>\n     snd (snd e) ! ix = c ! j \\<and>\n     LeftDerivationFix \\<beta> (i + ix) E j c\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        LeftDerives1 a i (snd e) b \\<and>\n        ix < length (snd (snd e)) \\<and>\n        snd (snd e) ! ix = c ! j \\<and>\n        LeftDerivationFix b (i + ix) E j c \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain M \\<omega> where M\\<omega>: \"(M, \\<omega>) = snd e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M \\<omega>.\n        (M, \\<omega>) = snd e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using prod.collapse"], ["proof (prove)\nusing this:\n  (fst ?prod, snd ?prod) = ?prod\n\ngoal (1 subgoal):\n 1. (\\<And>M \\<omega>.\n        (M, \\<omega>) = snd e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (M, \\<omega>) = snd e\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have j_q: \"j = length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. j = length q", "using L_last_j j ladder_last_j_def"], ["proof (prove)\nusing this:\n  ladder_last_j L = length q\n  j = ladder_j L (length L - 1)\n  ladder_last_j ?L = ladder_j ?L (length ?L - 1)\n\ngoal (1 subgoal):\n 1. j = length q", "by auto"], ["proof (state)\nthis:\n  j = length q\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with c_def"], ["proof (chain)\npicking this:\n  c = terminals q @ [N] @ \\<gamma>\n  j = length q", "have c_at_j: \"c ! j = N\""], ["proof (prove)\nusing this:\n  c = terminals q @ [N] @ \\<gamma>\n  j = length q\n\ngoal (1 subgoal):\n 1. c ! j = N", "by (metis append_Cons length_terminals nth_append_length)"], ["proof (state)\nthis:\n  c ! j = N\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with b M\\<omega>"], ["proof (chain)\npicking this:\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n  (M, \\<omega>) = snd e\n  c ! j = N", "have \\<omega>_at_ix: \"\\<omega> ! ix = N\""], ["proof (prove)\nusing this:\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n  (M, \\<omega>) = snd e\n  c ! j = N\n\ngoal (1 subgoal):\n 1. \\<omega> ! ix = N", "by (metis snd_conv)"], ["proof (state)\nthis:\n  \\<omega> ! ix = N\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain \\<mu>1 \\<mu>2 where split_\\<omega>: \"splits_at \\<omega> ix \\<mu>1 N \\<mu>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<mu>1 \\<mu>2.\n        splits_at \\<omega> ix \\<mu>1 N \\<mu>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis M\\<omega> \\<omega>_at_ix b snd_conv splits_at_def)"], ["proof (state)\nthis:\n  splits_at \\<omega> ix \\<mu>1 N \\<mu>2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain a1 a2 where split_a: \"splits_at a i a1 M a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a1 a2.\n        splits_at a i a1 M a2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using b"], ["proof (prove)\nusing this:\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n\ngoal (1 subgoal):\n 1. (\\<And>a1 a2.\n        splits_at a i a1 M a2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis LeftDerivationIntro_bounds_ij LeftDerivationIntro_examine_rule M\\<omega> \n                   fst_conv ldintro splits_at_def)"], ["proof (state)\nthis:\n  splits_at a i a1 M a2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  splits_at a i a1 M a2", "have is_word_a1: \"is_word a1\""], ["proof (prove)\nusing this:\n  splits_at a i a1 M a2\n\ngoal (1 subgoal):\n 1. is_word a1", "using LeftDerives1_splits_at_is_word b"], ["proof (prove)\nusing this:\n  splits_at a i a1 M a2\n  \\<lbrakk>LeftDerives1 ?\\<delta> ?i ?r ?s;\n   splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> is_word ?\\<alpha>\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n\ngoal (1 subgoal):\n 1. is_word a1", "by blast"], ["proof (state)\nthis:\n  is_word a1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"b = a1 @ \\<omega> @ a2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b = a1 @ \\<omega> @ a2", "using split_a b M\\<omega>"], ["proof (prove)\nusing this:\n  splits_at a i a1 M a2\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n  (M, \\<omega>) = snd e\n\ngoal (1 subgoal):\n 1. b = a1 @ \\<omega> @ a2", "by (metis LeftDerives1_implies_Derives1 snd_conv splits_at_combine_dest)"], ["proof (state)\nthis:\n  b = a1 @ \\<omega> @ a2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  b = a1 @ \\<omega> @ a2", "have b_def: \"b = a1 @ \\<mu>1 @ [N] @ \\<mu>2 @ a2\""], ["proof (prove)\nusing this:\n  b = a1 @ \\<omega> @ a2\n\ngoal (1 subgoal):\n 1. b = a1 @ \\<mu>1 @ [N] @ \\<mu>2 @ a2", "using split_\\<omega> splits_at_combine"], ["proof (prove)\nusing this:\n  b = a1 @ \\<omega> @ a2\n  splits_at \\<omega> ix \\<mu>1 N \\<mu>2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. b = a1 @ \\<mu>1 @ [N] @ \\<mu>2 @ a2", "by simp"], ["proof (state)\nthis:\n  b = a1 @ \\<mu>1 @ [N] @ \\<mu>2 @ a2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have is_nonterminal_N: \"is_nonterminal N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal N", "using less.prems(6) rule_nonterminal_type"], ["proof (prove)\nusing this:\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  (?N, ?\\<alpha>) \\<in> \\<RR> \\<Longrightarrow> is_nonterminal ?N\n\ngoal (1 subgoal):\n 1. is_nonterminal N", "by blast"], ["proof (state)\nthis:\n  is_nonterminal N\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with LeftDerivationFix_splits_at_nonterminal split_a b"], ["proof (chain)\npicking this:\n  \\<lbrakk>LeftDerivationFix ?a ?i ?D ?j ?b;\n   is_nonterminal (?a ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U a1 a2 b1.\n                       splits_at ?a ?i a1 U a2 \\<and>\n                       splits_at ?b ?j b1 U a2 \\<and>\n                       LeftDerivation a1 ?D b1\n  splits_at a i a1 M a2\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n  is_nonterminal N", "have \"\\<exists> U b1 b2 c1. splits_at b (i + ix) b1 U b2 \\<and> splits_at c j c1 U b2 \\<and>\n                  LeftDerivation b1 E c1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivationFix ?a ?i ?D ?j ?b;\n   is_nonterminal (?a ! ?i)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>U a1 a2 b1.\n                       splits_at ?a ?i a1 U a2 \\<and>\n                       splits_at ?b ?j b1 U a2 \\<and>\n                       LeftDerivation a1 ?D b1\n  splits_at a i a1 M a2\n  LeftDerives1 a i (snd e) b \\<and>\n  ix < length (snd (snd e)) \\<and>\n  snd (snd e) ! ix = c ! j \\<and> LeftDerivationFix b (i + ix) E j c\n  is_nonterminal N\n\ngoal (1 subgoal):\n 1. \\<exists>U b1 b2 c1.\n       splits_at b (i + ix) b1 U b2 \\<and>\n       splits_at c j c1 U b2 \\<and> LeftDerivation b1 E c1", "by (simp add: LeftDerivationFix_def c_at_j)"], ["proof (state)\nthis:\n  \\<exists>U b1 b2 c1.\n     splits_at b (i + ix) b1 U b2 \\<and>\n     splits_at c j c1 U b2 \\<and> LeftDerivation b1 E c1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>U b1 b2 c1.\n     splits_at b (i + ix) b1 U b2 \\<and>\n     splits_at c j c1 U b2 \\<and> LeftDerivation b1 E c1", "obtain b1 b2 c1 where b1b2c1:\n                  \"splits_at b (i + ix) b1 N b2 \\<and> splits_at c j c1 N b2 \\<and>\n                   LeftDerivation b1 E c1\""], ["proof (prove)\nusing this:\n  \\<exists>U b1 b2 c1.\n     splits_at b (i + ix) b1 U b2 \\<and>\n     splits_at c j c1 U b2 \\<and> LeftDerivation b1 E c1\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2 c1.\n        splits_at b (i + ix) b1 N b2 \\<and>\n        splits_at c j c1 N b2 \\<and>\n        LeftDerivation b1 E c1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using c_at_j splits_at_def"], ["proof (prove)\nusing this:\n  \\<exists>U b1 b2 c1.\n     splits_at b (i + ix) b1 U b2 \\<and>\n     splits_at c j c1 U b2 \\<and> LeftDerivation b1 E c1\n  c ! j = N\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2 c1.\n        splits_at b (i + ix) b1 N b2 \\<and>\n        splits_at c j c1 N b2 \\<and>\n        LeftDerivation b1 E c1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1", "have c1_q: \"c1 = terminals q\""], ["proof (prove)\nusing this:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1\n\ngoal (1 subgoal):\n 1. c1 = terminals q", "using c_def j_q"], ["proof (prove)\nusing this:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1\n  c = terminals q @ [N] @ \\<gamma>\n  j = length q\n\ngoal (1 subgoal):\n 1. c1 = terminals q", "by (simp add: append_eq_conv_conj splits_at_def)"], ["proof (state)\nthis:\n  c1 = terminals q\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have length_a1_eq_i: \"length a1 = i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length a1 = i", "using split_a splits_at_def"], ["proof (prove)\nusing this:\n  splits_at a i a1 M a2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. length a1 = i", "by auto"], ["proof (state)\nthis:\n  length a1 = i\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have length_\\<mu>1_eq_ix: \"length \\<mu>1 = ix\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<mu>1 = ix", "using split_\\<omega> splits_at_def"], ["proof (prove)\nusing this:\n  splits_at \\<omega> ix \\<mu>1 N \\<mu>2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. length \\<mu>1 = ix", "by auto"], ["proof (state)\nthis:\n  length \\<mu>1 = ix\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"b1 = take (i + ix) b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 = take (i + ix) b", "using b1b2c1 splits_at_def"], ["proof (prove)\nusing this:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. b1 = take (i + ix) b", "by blast"], ["proof (state)\nthis:\n  b1 = take (i + ix) b\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  b1 = take (i + ix) b", "have b1_eq_a1_\\<mu>1: \"b1 = a1 @ \\<mu>1\""], ["proof (prove)\nusing this:\n  b1 = take (i + ix) b\n\ngoal (1 subgoal):\n 1. b1 = a1 @ \\<mu>1", "using b_def length_a1_eq_i length_\\<mu>1_eq_ix"], ["proof (prove)\nusing this:\n  b1 = take (i + ix) b\n  b = a1 @ \\<mu>1 @ [N] @ \\<mu>2 @ a2\n  length a1 = i\n  length \\<mu>1 = ix\n\ngoal (1 subgoal):\n 1. b1 = a1 @ \\<mu>1", "by (simp add: append_eq_conv_conj take_add)"], ["proof (state)\nthis:\n  b1 = a1 @ \\<mu>1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"LeftDerivation (a1 @ \\<mu>1) E c1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (a1 @ \\<mu>1) E c1", "using b1b2c1 b1_eq_a1_\\<mu>1"], ["proof (prove)\nusing this:\n  splits_at b (i + ix) b1 N b2 \\<and>\n  splits_at c j c1 N b2 \\<and> LeftDerivation b1 E c1\n  b1 = a1 @ \\<mu>1\n\ngoal (1 subgoal):\n 1. LeftDerivation (a1 @ \\<mu>1) E c1", "by blast"], ["proof (state)\nthis:\n  LeftDerivation (a1 @ \\<mu>1) E c1\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from LeftDerivation_skip_prefixword_ex[OF this is_word_a1]"], ["proof (chain)\npicking this:\n  \\<exists>w'.\n     c1 = a1 @ w' \\<and>\n     LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w'", "obtain w where w: \"c1 = a1 @ w \\<and> \n                  LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w\""], ["proof (prove)\nusing this:\n  \\<exists>w'.\n     c1 = a1 @ w' \\<and>\n     LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w'\n\ngoal (1 subgoal):\n 1. (\\<And>w.\n        c1 = a1 @ w \\<and>\n        LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0)\n         w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  c1 = a1 @ w \\<and>\n  LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have a1_eq_take_i: \"a1 = take i (terminals q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a1 = take i (terminals q)", "using w c1_q split_a append_eq_conv_conj length_a1_eq_i"], ["proof (prove)\nusing this:\n  c1 = a1 @ w \\<and>\n  LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w\n  c1 = terminals q\n  splits_at a i a1 M a2\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n  length a1 = i\n\ngoal (1 subgoal):\n 1. a1 = take i (terminals q)", "by blast"], ["proof (state)\nthis:\n  a1 = take i (terminals q)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<mu>1_leftderives: \"leftderives \\<mu>1 (terminals (drop i q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<mu>1 (terminals (drop i q))", "using w c1_q split_a \n                  LeftDerivation_implies_leftderives append_eq_conv_conj length_a1_eq_i"], ["proof (prove)\nusing this:\n  c1 = a1 @ w \\<and>\n  LeftDerivation \\<mu>1 (derivation_shift E (length a1) 0) w\n  c1 = terminals q\n  splits_at a i a1 M a2\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  (?xs @ ?ys = ?zs) =\n  (?xs = take (length ?xs) ?zs \\<and> ?ys = drop (length ?xs) ?zs)\n  length a1 = i\n\ngoal (1 subgoal):\n 1. leftderives \\<mu>1 (terminals (drop i q))", "by auto"], ["proof (state)\nthis:\n  leftderives \\<mu>1 (terminals (drop i q))\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"LeftDerivation [\\<SS>] (take n D) a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation [\\<SS>] (take n D) a", "by (metis \"2.hyps\" L LeftDerivationLadder_implies_LeftDerivation_at_index \n                    One_nat_def Suc_lessD a_as_\\<gamma> diff_Suc_eq_diff_pred diff_Suc_less n numeral_2_eq_2)"], ["proof (state)\nthis:\n  LeftDerivation [\\<SS>] (take n D) a\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  LeftDerivation [\\<SS>] (take n D) a", "have LD_to_M: \"LeftDerivation [\\<SS>] (take n D) ((terminals (take i q))@[M]@a2)\""], ["proof (prove)\nusing this:\n  LeftDerivation [\\<SS>] (take n D) a\n\ngoal (1 subgoal):\n 1. LeftDerivation [\\<SS>] (take n D) (terminals (take i q) @ [M] @ a2)", "using split_a splits_at_combine a1_eq_take_i terminals_take"], ["proof (prove)\nusing this:\n  LeftDerivation [\\<SS>] (take n D) a\n  splits_at a i a1 M a2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n  a1 = take i (terminals q)\n  terminals (take ?n ?p) = take ?n (terminals ?p)\n\ngoal (1 subgoal):\n 1. LeftDerivation [\\<SS>] (take n D) (terminals (take i q) @ [M] @ a2)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation [\\<SS>] (take n D) (terminals (take i q) @ [M] @ a2)\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have is_ladder: \"is_ladder D L\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_ladder D L", "using L"], ["proof (prove)\nusing this:\n  LeftDerivationLadder [\\<SS>] D L (terminals q @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_ladder D L", "by (simp add: LeftDerivationLadder_def)"], ["proof (state)\nthis:\n  is_ladder D L\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  is_ladder D L", "have n_less_m: \"n < m\""], ["proof (prove)\nusing this:\n  is_ladder D L\n\ngoal (1 subgoal):\n 1. n < m", "using n m is_ladder_def"], ["proof (prove)\nusing this:\n  is_ladder D L\n  n = ladder_n L (length L - 1 - 1)\n  m = ladder_n L (length L - 1)\n  is_ladder ?D ?L =\n  (?L \\<noteq> [] \\<and>\n   (\\<forall>u<length ?L. ladder_n ?L u \\<le> length ?D) \\<and>\n   (\\<forall>u v.\n       u < v \\<and> v < length ?L \\<longrightarrow>\n       ladder_n ?L u < ladder_n ?L v) \\<and>\n   ladder_last_n ?L = length ?D)\n\ngoal (1 subgoal):\n 1. n < m", "by (metis (no_types, lifting) \"2.hyps\" One_nat_def diff_Suc_less \n                    length_greater_0_conv zero_less_diff)"], ["proof (state)\nthis:\n  n < m\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have m_le_D: \"m \\<le> length D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> length D", "using m is_ladder_def is_ladder dual_order.refl \n                  ladder_n_last_is_length"], ["proof (prove)\nusing this:\n  m = ladder_n L (length L - 1)\n  is_ladder ?D ?L =\n  (?L \\<noteq> [] \\<and>\n   (\\<forall>u<length ?L. ladder_n ?L u \\<le> length ?D) \\<and>\n   (\\<forall>u v.\n       u < v \\<and> v < length ?L \\<longrightarrow>\n       ladder_n ?L u < ladder_n ?L v) \\<and>\n   ladder_last_n ?L = length ?D)\n  is_ladder D L\n  ?a \\<le> ?a\n  is_ladder ?D ?L \\<Longrightarrow> ladder_n ?L (length ?L - 1) = length ?D\n\ngoal (1 subgoal):\n 1. m \\<le> length D", "by auto"], ["proof (state)\nthis:\n  m \\<le> length D\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"length (take n D) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take n D) = n", "using  n_less_m m_le_D"], ["proof (prove)\nusing this:\n  n < m\n  m \\<le> length D\n\ngoal (1 subgoal):\n 1. length (take n D) = n", "using length_take less_irrefl less_le_trans linear min.absorb2"], ["proof (prove)\nusing this:\n  n < m\n  m \\<le> length D\n  length (take ?n ?xs) = min (length ?xs) ?n\n  \\<not> ?x < ?x\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n  ?x \\<le> ?y \\<or> ?y \\<le> ?x\n  ?b \\<le> ?a \\<Longrightarrow> min ?a ?b = ?b\n\ngoal (1 subgoal):\n 1. length (take n D) = n", "by auto"], ["proof (state)\nthis:\n  length (take n D) = n\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  length (take n D) = n", "have length_take_n_D: \"length (take n D) < length D\""], ["proof (prove)\nusing this:\n  length (take n D) = n\n\ngoal (1 subgoal):\n 1. length (take n D) < length D", "using n_less_m m_le_D less_le_trans"], ["proof (prove)\nusing this:\n  length (take n D) = n\n  n < m\n  m \\<le> length D\n  \\<lbrakk>?x < ?y; ?y \\<le> ?z\\<rbrakk> \\<Longrightarrow> ?x < ?z\n\ngoal (1 subgoal):\n 1. length (take n D) < length D", "by linarith"], ["proof (state)\nthis:\n  length (take n D) < length D\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \\<omega>_decompose: \"\\<omega> = \\<mu>1@(N#\\<mu>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<omega> = \\<mu>1 @ N # \\<mu>2", "using split_\\<omega> splits_at_combine"], ["proof (prove)\nusing this:\n  splits_at \\<omega> ix \\<mu>1 N \\<mu>2\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. \\<omega> = \\<mu>1 @ N # \\<mu>2", "by simp"], ["proof (state)\nthis:\n  \\<omega> = \\<mu>1 @ N # \\<mu>2\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"(M, \\<omega>) \\<in> \\<RR>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M, \\<omega>) \\<in> \\<RR>", "by (metis Derives1_rule LeftDerives1_implies_Derives1 M\\<omega> b)"], ["proof (state)\nthis:\n  (M, \\<omega>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with \\<omega>_decompose"], ["proof (chain)\npicking this:\n  \\<omega> = \\<mu>1 @ N # \\<mu>2\n  (M, \\<omega>) \\<in> \\<RR>", "have M_rule: \"(M, \\<mu>1@(N#\\<mu>2)) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  \\<omega> = \\<mu>1 @ N # \\<mu>2\n  (M, \\<omega>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. (M, \\<mu>1 @ N # \\<mu>2) \\<in> \\<RR>", "by simp"], ["proof (state)\nthis:\n  (M, \\<mu>1 @ N # \\<mu>2) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have i_le_q: \"i \\<le> length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> length q", "using a1_eq_take_i length_a1_eq_i"], ["proof (prove)\nusing this:\n  a1 = take i (terminals q)\n  length a1 = i\n\ngoal (1 subgoal):\n 1. i \\<le> length q", "by auto"], ["proof (state)\nthis:\n  i \\<le> length q\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain y where \n                  y: \"y = Item (M, \\<mu>1 @ N # \\<mu>2) (length \\<mu>1) (charslength (take i q)) k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        y =\n        Item (M, \\<mu>1 @ N # \\<mu>2) (length \\<mu>1)\n         (charslength (take i q)) k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y =\n  Item (M, \\<mu>1 @ N # \\<mu>2) (length \\<mu>1) (charslength (take i q)) k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "from less.hyps[OF length_take_n_D less.prems(1, 2, 3, 4, 5) M_rule i_le_q LD_to_M\n                   \\<mu>1_leftderives less.prems(10) y less.prems(12)]"], ["proof (chain)\npicking this:\n  y \\<in> I", "have y_in_I: \"y \\<in> I\""], ["proof (prove)\nusing this:\n  y \\<in> I\n\ngoal (1 subgoal):\n 1. y \\<in> I", "by blast"], ["proof (state)\nthis:\n  y \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "obtain z where z: \"z = Item (N, \\<alpha>@\\<beta>) 0 k' k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z = Item (N, \\<alpha> @ \\<beta>) 0 k' k' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z = Item (N, \\<alpha> @ \\<beta>) 0 k' k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  z = Item (N, \\<alpha> @ \\<beta>) 0 k' k'", "have z_is_init_item: \"z = init_item (N, \\<alpha>@\\<beta>) k'\""], ["proof (prove)\nusing this:\n  z = Item (N, \\<alpha> @ \\<beta>) 0 k' k'\n\ngoal (1 subgoal):\n 1. z = init_item (N, \\<alpha> @ \\<beta>) k'", "by (simp add: init_item_def)"], ["proof (state)\nthis:\n  z = init_item (N, \\<alpha> @ \\<beta>) k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"z \\<in> Predict k' {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> Predict k' {y}", "apply (simp add: z_is_init_item)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init_item (N, \\<alpha> @ \\<beta>) k' \\<in> Predict k' {y}", "apply (rule next_symbol_predicts)"], ["proof (prove)\ngoal (3 subgoals):\n 1. next_symbol y = Some N\n 2. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n 3. k' = item_end y", "apply (simp add: is_complete_def next_symbol_def y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n 2. k' = item_end y", "apply (simp add: less.prems(6))"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' = item_end y", "apply (simp add: y item_end_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  z \\<in> Predict k' {y}\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  z \\<in> Predict k' {y}", "have \"z \\<in> Predict k' I\""], ["proof (prove)\nusing this:\n  z \\<in> Predict k' {y}\n\ngoal (1 subgoal):\n 1. z \\<in> Predict k' I", "using Predict_def bin_def y_in_I"], ["proof (prove)\nusing this:\n  z \\<in> Predict k' {y}\n  Predict ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>r x.\n      uu_ = init_item r ?k \\<and>\n      r \\<in> \\<RR> \\<and>\n      x \\<in> bin ?I ?k \\<and> next_symbol x = Some (fst r)}\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  y \\<in> I\n\ngoal (1 subgoal):\n 1. z \\<in> Predict k' I", "by auto"], ["proof (state)\nthis:\n  z \\<in> Predict k' I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  z \\<in> Predict k' I", "have z_in_I: \"z \\<in> I\""], ["proof (prove)\nusing this:\n  z \\<in> Predict k' I\n\ngoal (1 subgoal):\n 1. z \\<in> I", "by (metis Predict_\\<pi>_fix items_le_Predict less.prems(12))"], ["proof (state)\nthis:\n  z \\<in> I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have length_chars_q: \"length (chars q) = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars q) = k'", "using less.prems"], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n  charslength p = k\n  X \\<in> T\n  T \\<subseteq> \\<X> k\n  q = p @ [X]\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n  r \\<le> length q\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives \\<alpha> (terminals (drop r q))\n  k' = k + length (chars_of_token X)\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k'\n  I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. length (chars q) = k'", "by simp"], ["proof (state)\nthis:\n  length (chars q) = k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have x_is_inc_dot: \"x = inc_dot (length \\<alpha>) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = inc_dot (length \\<alpha>) z", "by (simp add: less.prems(11) r_eq_length_q length_chars_q z inc_dot_def)"], ["proof (state)\nthis:\n  x = inc_dot (length \\<alpha>) z\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have wellformed_items_I: \"wellformed_items I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items I", "apply (subst less.prems(12))"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items\n     (items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p)))))", "by (meson LocalLexing.items_le_is_filter LocalLexing.wellformed_items_Gen \n                    LocalLexing_axioms empty_subsetI less.prems(4) subsetCE wellformed_items_Scan \n                    wellformed_items_\\<pi> wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_items I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "with z_in_I"], ["proof (chain)\npicking this:\n  z \\<in> I\n  wellformed_items I", "have wellformed_z: \"wellformed_item z\""], ["proof (prove)\nusing this:\n  z \\<in> I\n  wellformed_items I\n\ngoal (1 subgoal):\n 1. wellformed_item z", "using wellformed_items_def"], ["proof (prove)\nusing this:\n  z \\<in> I\n  wellformed_items I\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_item z", "by blast"], ["proof (state)\nthis:\n  wellformed_item z\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_\\<beta>_z: \"item_\\<beta> z = \\<alpha>@\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> z = \\<alpha> @ \\<beta>", "by (simp add: z_is_init_item)"], ["proof (state)\nthis:\n  item_\\<beta> z = \\<alpha> @ \\<beta>\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have item_end_z: \"item_end z = k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end z = k'", "by (simp add: z_is_init_item)"], ["proof (state)\nthis:\n  item_end z = k'\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "have \"x \\<in> \\<pi> k' {} {z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} {z}", "apply (simp add: x_is_inc_dot)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<alpha>) z \\<in> \\<pi> k' {} {z}", "apply (rule thmD6)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item z\n 2. item_\\<beta> z = \\<alpha> @ ?\\<omega>1\n 3. item_end z = k'\n 4. derives \\<alpha> []", "apply (rule wellformed_z)"], ["proof (prove)\ngoal (3 subgoals):\n 1. item_\\<beta> z = \\<alpha> @ ?\\<omega>1\n 2. item_end z = k'\n 3. derives \\<alpha> []", "apply (rule item_\\<beta>_z)"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_end z = k'\n 2. derives \\<alpha> []", "apply (rule item_end_z)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives \\<alpha> []", "by (simp add: \\<alpha>_derives_empty)"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {} {z}\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k' {} {z}", "have \"x \\<in> \\<pi> k' {} I\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} {z}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} I", "using z_in_I"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} {z}\n  z \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k' {} I", "by (meson contra_subsetD empty_subsetI insert_subset monoD mono_\\<pi>)"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k' {} I\n\ngoal (1 subgoal):\n 1. 1 < length L \\<Longrightarrow> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k' {} I", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k' {} I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "by (metis (no_types, lifting) LocalLexing.wellformed_item_def LocalLexing_axioms \n                    \\<pi>_subset_elem_trans item.sel(3) item.sel(4) items_le_def items_le_is_filter \n                    less.prems(11) less.prems(12) mem_Collect_eq wellformed_z z)"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem thmD11:\n  assumes p_dom: \"p \\<in> \\<PP>\"\n  assumes p_charslength: \"charslength p = k\"\n  assumes X_dom: \"X \\<in> T\"\n  assumes T_dom: \"T \\<subseteq> \\<X> k\"\n  assumes q_def: \"q = p @ [X]\"\n  assumes rule_dom: \"(N, \\<alpha>@\\<beta>) \\<in> \\<RR>\"\n  assumes r: \"r \\<le> length q\"\n  assumes leftderives_start: \"leftderives [\\<SS>] ((terminals (take r q))@[N]@\\<gamma>)\"\n  assumes leftderives_\\<alpha>: \"leftderives \\<alpha> (terminals (drop r q))\"\n  assumes k': \"k' = k + length (chars_of_token X)\"\n  assumes item_def: \"x = Item (N, \\<alpha>@\\<beta>) (length \\<alpha>) (charslength (take r q)) k'\"\n  assumes I: \"I = items_le k' (\\<pi> k' {} (Scan T k (Gen (Prefixes p))))\"\n  shows \"x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> I", "have \"\\<exists> D. LeftDerivation  [\\<SS>] D ((terminals (take r q))@[N]@\\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>D.\n       LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)", "using leftderives_start leftderives_implies_LeftDerivation"], ["proof (prove)\nusing this:\n  leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)\n  leftderives ?a ?b \\<Longrightarrow> \\<exists>D. LeftDerivation ?a D ?b\n\ngoal (1 subgoal):\n 1. \\<exists>D.\n       LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  \\<exists>D.\n     LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. x \\<in> I", "then"], ["proof (chain)\npicking this:\n  \\<exists>D.\n     LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)", "obtain D where D: \"LeftDerivation  [\\<SS>] D ((terminals (take r q))@[N]@\\<gamma>)\""], ["proof (prove)\nusing this:\n  \\<exists>D.\n     LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. (\\<And>D.\n        LeftDerivation [\\<SS>] D\n         (terminals (take r q) @ [N] @ \\<gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivation [\\<SS>] D (terminals (take r q) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. x \\<in> I", "from thmD11_helper[OF assms(1, 2, 3, 4, 5, 6, 7) D assms(9, 10, 11, 12)]"], ["proof (chain)\npicking this:\n  x \\<in> I", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> I", "."], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}