{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/ListTools.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma is_prefix_eq_proper_prefix: \"is_prefix a b = (a = b \\<or> is_proper_prefix a b)\"", "lemma is_proper_prefix_eq_prefix: \"is_proper_prefix a b = (a \\<noteq> b \\<and> is_prefix a b)\"", "lemma is_suffix_eq_proper_suffix: \"is_suffix a b = (a = b \\<or> is_proper_suffix a b)\"", "lemma is_proper_suffix_eq_suffix: \"is_proper_suffix a b = (a \\<noteq> b \\<and> is_suffix a b)\"", "lemma is_prefix_unsplit: \"is_prefix u a \\<Longrightarrow> u @ (drop (length u) a) = a\"", "lemma le_take_same: \"i \\<le> j \\<Longrightarrow> take j a = take j b \\<Longrightarrow> take i a = take i b\"", "lemma is_first_drop_length: \n  assumes \"k \\<le> length a\" \n  and \"k > length u\"\n  and \"v = X#w\" \n  and \"take k a = take k (u@v)\"\n  shows \"is_first X (drop (length u) a)\"", "lemma is_first_cons: \"is_first x (y#ys) = (x = y)\"", "lemma list_all_pos_neg_ex: \"list_all P D \\<Longrightarrow> \\<not> (list_all Q D) \\<Longrightarrow> \n       \\<exists> k. k < length D \\<and> P(D ! k) \\<and> \\<not>(Q(D ! k))\"", "lemma split_list_at: \"k < length D \\<Longrightarrow> D = (take k D)@[D ! k]@(drop (Suc k) D)\"", "lemma take_eq_take_append: \"i \\<le> j \\<Longrightarrow> j \\<le> length a \\<Longrightarrow> \\<exists> u. take j a = take i a @ u\"", "lemma is_proper_suffix_length_cmp: \"is_proper_suffix a b \\<Longrightarrow> length a < length b\""], "translations": [["", "lemma is_prefix_eq_proper_prefix: \"is_prefix a b = (a = b \\<or> is_proper_prefix a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix a b = (a = b \\<or> is_proper_prefix a b)", "by (metis append_Nil2 is_prefix_def is_proper_prefix_def)"], ["", "lemma is_proper_prefix_eq_prefix: \"is_proper_prefix a b = (a \\<noteq> b \\<and> is_prefix a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_proper_prefix a b = (a \\<noteq> b \\<and> is_prefix a b)", "by (metis append_self_conv is_prefix_eq_proper_prefix is_proper_prefix_def)"], ["", "definition is_suffix :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"is_suffix u v = (\\<exists> w. w@u = v)\""], ["", "definition is_proper_suffix :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\"\nwhere\n  \"is_proper_suffix u v = (\\<exists> w. w \\<noteq> [] \\<and> w@u = v)\""], ["", "lemma is_suffix_eq_proper_suffix: \"is_suffix a b = (a = b \\<or> is_proper_suffix a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_suffix a b = (a = b \\<or> is_proper_suffix a b)", "by (metis append_Nil is_proper_suffix_def is_suffix_def)"], ["", "lemma is_proper_suffix_eq_suffix: \"is_proper_suffix a b = (a \\<noteq> b \\<and> is_suffix a b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_proper_suffix a b = (a \\<noteq> b \\<and> is_suffix a b)", "by (metis is_proper_suffix_def is_suffix_eq_proper_suffix self_append_conv2)"], ["", "lemma is_prefix_unsplit: \"is_prefix u a \\<Longrightarrow> u @ (drop (length u) a) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix u a \\<Longrightarrow> u @ drop (length u) a = a", "by (metis append_eq_conv_conj is_prefix_def)"], ["", "lemma le_take_same: \"i \\<le> j \\<Longrightarrow> take j a = take j b \\<Longrightarrow> take i a = take i b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; take j a = take j b\\<rbrakk>\n    \\<Longrightarrow> take i a = take i b", "by (metis min.absorb1 take_take)"], ["", "lemma is_first_drop_length: \n  assumes \"k \\<le> length a\" \n  and \"k > length u\"\n  and \"v = X#w\" \n  and \"take k a = take k (u@v)\"\n  shows \"is_first X (drop (length u) a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "let ?d = \"k - length u\""], ["proof (state)\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "from assms"], ["proof (chain)\npicking this:\n  k \\<le> length a\n  length u < k\n  v = X # w\n  take k a = take k (u @ v)", "have pos_d': \"?d > 0\""], ["proof (prove)\nusing this:\n  k \\<le> length a\n  length u < k\n  v = X # w\n  take k a = take k (u @ v)\n\ngoal (1 subgoal):\n 1. 0 < k - length u", "by auto"], ["proof (state)\nthis:\n  0 < k - length u\n\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "from assms"], ["proof (chain)\npicking this:\n  k \\<le> length a\n  length u < k\n  v = X # w\n  take k a = take k (u @ v)", "have take_d'_v: \"take ?d (drop (length u) a) = take ?d v\""], ["proof (prove)\nusing this:\n  k \\<le> length a\n  length u < k\n  v = X # w\n  take k a = take k (u @ v)\n\ngoal (1 subgoal):\n 1. take (k - length u) (drop (length u) a) = take (k - length u) v", "by (metis append_eq_conv_conj drop_take)"], ["proof (state)\nthis:\n  take (k - length u) (drop (length u) a) = take (k - length u) v\n\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "then"], ["proof (chain)\npicking this:\n  take (k - length u) (drop (length u) a) = take (k - length u) v", "have \"take 1 (drop (length u) a) = take 1 v\""], ["proof (prove)\nusing this:\n  take (k - length u) (drop (length u) a) = take (k - length u) v\n\ngoal (1 subgoal):\n 1. take 1 (drop (length u) a) = take 1 v", "by (metis One_nat_def Suc_leI le_take_same pos_d')"], ["proof (state)\nthis:\n  take 1 (drop (length u) a) = take 1 v\n\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "then"], ["proof (chain)\npicking this:\n  take 1 (drop (length u) a) = take 1 v", "have \"take 1 (drop (length u) a) = [X]\""], ["proof (prove)\nusing this:\n  take 1 (drop (length u) a) = take 1 v\n\ngoal (1 subgoal):\n 1. take 1 (drop (length u) a) = [X]", "by (simp add: assms)"], ["proof (state)\nthis:\n  take 1 (drop (length u) a) = [X]\n\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "then"], ["proof (chain)\npicking this:\n  take 1 (drop (length u) a) = [X]", "show ?thesis"], ["proof (prove)\nusing this:\n  take 1 (drop (length u) a) = [X]\n\ngoal (1 subgoal):\n 1. is_first X (drop (length u) a)", "by (metis append_take_drop_id is_first_def)"], ["proof (state)\nthis:\n  is_first X (drop (length u) a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_first_cons: \"is_first x (y#ys) = (x = y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_first x (y # ys) = (x = y)", "by (auto simp add: is_first_def)"], ["", "lemma list_all_pos_neg_ex: \"list_all P D \\<Longrightarrow> \\<not> (list_all Q D) \\<Longrightarrow> \n       \\<exists> k. k < length D \\<and> P(D ! k) \\<and> \\<not>(Q(D ! k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all P D; \\<not> list_all Q D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k<length D. P (D ! k) \\<and> \\<not> Q (D ! k)", "using list_all_length"], ["proof (prove)\nusing this:\n  list_all ?P ?xs = (\\<forall>n<length ?xs. ?P (?xs ! n))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all P D; \\<not> list_all Q D\\<rbrakk>\n    \\<Longrightarrow> \\<exists>k<length D. P (D ! k) \\<and> \\<not> Q (D ! k)", "by blast"], ["", "lemma split_list_at: \"k < length D \\<Longrightarrow> D = (take k D)@[D ! k]@(drop (Suc k) D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length D \\<Longrightarrow> D = take k D @ [D ! k] @ drop (Suc k) D", "by (metis append_Cons append_Nil id_take_nth_drop)"], ["", "lemma take_eq_take_append: \"i \\<le> j \\<Longrightarrow> j \\<le> length a \\<Longrightarrow> \\<exists> u. take j a = take i a @ u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; j \\<le> length a\\<rbrakk>\n    \\<Longrightarrow> \\<exists>u. take j a = take i a @ u", "by (metis le_Suc_ex take_add)"], ["", "lemma is_proper_suffix_length_cmp: \"is_proper_suffix a b \\<Longrightarrow> length a < length b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_proper_suffix a b \\<Longrightarrow> length a < length b", "by (metis add_diff_cancel_right' append_Nil append_eq_append_conv \n  diff_is_0_eq is_proper_suffix_def leI length_append list.size(3))"], ["", "end"]]}