{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD14.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma empty_tokens_of_empty[simp]: \"empty_tokens {} = {}\"", "lemma items_le_split_via_eq: \"items_le (Suc k) J = items_le k J \\<union> items_eq (Suc k) J\"", "lemma paths_le_split_via_eq: \"paths_le (Suc k) P = paths_le k P \\<union> paths_eq (Suc k) P\"", "lemma natUnion_superset:\n  shows \"g i \\<subseteq> natUnion g\"", "lemma indexle_trans: \"indexle k'' u'' k' u' \\<Longrightarrow> indexle k' u' k u \\<Longrightarrow> indexle k'' u'' k u\"", "lemma produced_by_scan_step_trans:\n  assumes \"indexle k' u' k u\"\n  assumes \"produced_by_scan_step x k' u'\"\n  shows \"produced_by_scan_step x k u\"", "lemma \\<J>_induct[consumes 1, case_names Induct]:\n  assumes \"x \\<in> \\<J> k u\"\n  assumes induct: \"\\<And> x k u . (\\<And> x' k' u'. x' \\<in> \\<J> k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> P x' k' u') \n                     \\<Longrightarrow> x \\<in> \\<J> k u \\<Longrightarrow> P x k u\"\n  shows \"P x k u\"", "lemma \\<pi>_no_tokens_item_end: \n  assumes x_in_\\<pi>: \"x \\<in> \\<pi> k {} I\"\n  shows \"item_end x = k \\<or> x \\<in> I\"", "lemma natUnion_ex: \"x \\<in> natUnion f \\<Longrightarrow> \\<exists> i. x \\<in> f i\"", "lemma locate_in_limit:\n  assumes x_in_limit: \"x \\<in> limit f X\"\n  assumes x_notin_X: \"x \\<notin> X\"\n  shows \"\\<exists> n. x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X\"", "lemma produced_by_scan_step: \n  \"x \\<in> \\<J> k u \\<Longrightarrow> item_end x > k \\<Longrightarrow> produced_by_scan_step x k u\"", "lemma limit_single_step:\n  assumes \"x \\<in> f X\"\n  shows \"x \\<in> limit f X\"", "lemma Gen_union: \"Gen (A \\<union> B) = Gen A \\<union> Gen B\"", "lemma is_prefix_Prefixes_subset:\n  assumes \"is_prefix q p\"\n  shows \"Prefixes q \\<subseteq> Prefixes p\"", "lemma Prefixes_subset_\\<P>:\n  assumes \"p \\<in> \\<P> k u\"\n  shows \"Prefixes p \\<subseteq> \\<P> k u\"", "lemma Prefixes_subset_paths_le:\n  assumes \"Prefixes p \\<subseteq> P\"\n  shows \"Prefixes p \\<subseteq> paths_le (charslength p) P\"", "lemma Scan_\\<J>_subset_\\<J>:\n  \"Scan (\\<T> k (Suc u)) k (\\<J> k u) \\<subseteq> \\<J> k (Suc u)\"", "lemma subset_\\<J>k: \"u \\<le> v \\<Longrightarrow> \\<J> k u \\<subseteq> \\<J> k v\"", "lemma subset_\\<J>\\<I>k: \"\\<J> k u \\<subseteq> \\<I> k\"", "lemma subset_\\<I>\\<J>Suc: \"\\<I> k \\<subseteq> \\<J> (Suc k) u\"", "lemma subset_\\<I>Suc: \"\\<I> k \\<subseteq> \\<I> (Suc k)\"", "lemma subset_\\<I>: \"i \\<le> j \\<Longrightarrow> \\<I> i \\<subseteq> \\<I> j\"", "lemma subset_\\<J> :\n  assumes leq: \"k' < k \\<or> (k' = k \\<and> u' \\<le> u)\"\n  shows \"\\<J> k' u' \\<subseteq> \\<J> k u\"", "lemma \\<J>_subset:\n  assumes \"indexle k' u' k u\"\n  shows \"\\<J> k' u' \\<subseteq> \\<J> k u\"", "lemma Scan_items_le:\n  assumes bounded_T: \"\\<And> t . t \\<in> T \\<Longrightarrow> length (chars_of_token t) \\<le> l\"\n  shows \"Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)\"", "lemma Scan_mono_tokens:\n  \"P \\<subseteq> Q \\<Longrightarrow> Scan P k I \\<subseteq> Scan Q k I\"", "theorem thmD14: \"k \\<le> length Doc \\<Longrightarrow> items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and> \\<T> k u = \\<Z> k u \n    \\<and> items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\""], "translations": [["", "lemma empty_tokens_of_empty[simp]: \"empty_tokens {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empty_tokens {} = {}", "using empty_tokens_is_filter"], ["proof (prove)\nusing this:\n  empty_tokens ?T \\<subseteq> ?T\n\ngoal (1 subgoal):\n 1. empty_tokens {} = {}", "by blast"], ["", "lemma items_le_split_via_eq: \"items_le (Suc k) J = items_le k J \\<union> items_eq (Suc k) J\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le (Suc k) J = items_le k J \\<union> items_eq (Suc k) J", "by (auto simp add: items_le_def items_eq_def)"], ["", "lemma paths_le_split_via_eq: \"paths_le (Suc k) P = paths_le k P \\<union> paths_eq (Suc k) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le (Suc k) P = paths_le k P \\<union> paths_eq (Suc k) P", "by (auto simp add: paths_le_def paths_eq_def)"], ["", "lemma natUnion_superset:\n  shows \"g i \\<subseteq> natUnion g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g i \\<subseteq> natUnion g", "by (meson natUnion_elem subset_eq)"], ["", "definition indexle :: \"nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"indexle k' u' k u = ((indexlt k' u' k u) \\<or> (k' = k \\<and> u' = u))\""], ["", "definition produced_by_scan_step :: \"item \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"produced_by_scan_step x k u = (\\<exists> k' u' y X. indexle k' u' k u \\<and> y \\<in> \\<J> k' u' \\<and> \n   item_end y = k' \\<and> X \\<in> (\\<T> k' u') \\<and> x = inc_item y (k' + length (chars_of_token X)) \\<and> \n   next_symbol y = Some (terminal_of_token X))\""], ["", "lemma indexle_trans: \"indexle k'' u'' k' u' \\<Longrightarrow> indexle k' u' k u \\<Longrightarrow> indexle k'' u'' k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "using indexle_def indexlt_trans"], ["proof (prove)\nusing this:\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n  \\<lbrakk>indexlt ?k'' ?u'' ?k' ?u'; indexlt ?k' ?u' ?k ?u\\<rbrakk>\n  \\<Longrightarrow> indexlt ?k'' ?u'' ?k ?u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u;\n     \\<And>k' u' k u.\n        indexle k' u' k u = (indexlt k' u' k u \\<or> k' = k \\<and> u' = u);\n     \\<And>k'' u'' k' u' k u.\n        \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n        \\<Longrightarrow> indexlt k'' u'' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "assume a1: \"indexle k'' u'' k' u'\""], ["proof (state)\nthis:\n  indexle k'' u'' k' u'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u;\n     \\<And>k' u' k u.\n        indexle k' u' k u = (indexlt k' u' k u \\<or> k' = k \\<and> u' = u);\n     \\<And>k'' u'' k' u' k u.\n        \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n        \\<Longrightarrow> indexlt k'' u'' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "assume a2: \"indexle k' u' k u\""], ["proof (state)\nthis:\n  indexle k' u' k u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u;\n     \\<And>k' u' k u.\n        indexle k' u' k u = (indexlt k' u' k u \\<or> k' = k \\<and> u' = u);\n     \\<And>k'' u'' k' u' k u.\n        \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n        \\<Longrightarrow> indexlt k'' u'' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "then"], ["proof (chain)\npicking this:\n  indexle k' u' k u", "have f3: \"\\<And>n na. u' = u \\<or> indexlt n na k u \\<or> \\<not> indexlt n na k' u'\""], ["proof (prove)\nusing this:\n  indexle k' u' k u\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       u' = u \\<or> indexlt n na k u \\<or> \\<not> indexlt n na k' u'", "by (meson indexle_def indexlt_trans)"], ["proof (state)\nthis:\n  u' = u \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u;\n     \\<And>k' u' k u.\n        indexle k' u' k u = (indexlt k' u' k u \\<or> k' = k \\<and> u' = u);\n     \\<And>k'' u'' k' u' k u.\n        \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n        \\<Longrightarrow> indexlt k'' u'' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "have \"\\<And>n na. k' = k \\<or> indexlt n na k u \\<or> \\<not> indexlt n na k' u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n na.\n       k' = k \\<or> indexlt n na k u \\<or> \\<not> indexlt n na k' u'", "using a2"], ["proof (prove)\nusing this:\n  indexle k' u' k u\n\ngoal (1 subgoal):\n 1. \\<And>n na.\n       k' = k \\<or> indexlt n na k u \\<or> \\<not> indexlt n na k' u'", "by (meson indexle_def indexlt_trans)"], ["proof (state)\nthis:\n  k' = k \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>indexle k'' u'' k' u'; indexle k' u' k u;\n     \\<And>k' u' k u.\n        indexle k' u' k u = (indexlt k' u' k u \\<or> k' = k \\<and> u' = u);\n     \\<And>k'' u'' k' u' k u.\n        \\<lbrakk>indexlt k'' u'' k' u'; indexlt k' u' k u\\<rbrakk>\n        \\<Longrightarrow> indexlt k'' u'' k u\\<rbrakk>\n    \\<Longrightarrow> indexle k'' u'' k u", "then"], ["proof (chain)\npicking this:\n  k' = k \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'", "show ?thesis"], ["proof (prove)\nusing this:\n  k' = k \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'\n\ngoal (1 subgoal):\n 1. indexle k'' u'' k u", "using f3 a2 a1 indexle_def"], ["proof (prove)\nusing this:\n  k' = k \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'\n  u' = u \\<or> indexlt ?n ?na k u \\<or> \\<not> indexlt ?n ?na k' u'\n  indexle k' u' k u\n  indexle k'' u'' k' u'\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n\ngoal (1 subgoal):\n 1. indexle k'' u'' k u", "by auto"], ["proof (state)\nthis:\n  indexle k'' u'' k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma produced_by_scan_step_trans:\n  assumes \"indexle k' u' k u\"\n  assumes \"produced_by_scan_step x k' u'\"\n  shows \"produced_by_scan_step x k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "from iffD1[OF produced_by_scan_step_def assms(2)]"], ["proof (chain)\npicking this:\n  \\<exists>k'a u'a y X.\n     indexle k'a u'a k' u' \\<and>\n     y \\<in> \\<J> k'a u'a \\<and>\n     item_end y = k'a \\<and>\n     X \\<in> \\<T> k'a u'a \\<and>\n     x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n     next_symbol y = Some (terminal_of_token X)", "obtain k'a u'a y X where produced_k'_u':\n    \"indexle k'a u'a k' u' \\<and>\n     y \\<in> \\<J> k'a u'a \\<and>\n     item_end y = k'a \\<and>\n     X \\<in> \\<T> k'a u'a \\<and>\n     x = inc_item y (k'a + length (chars_of_token X)) \\<and> next_symbol y = Some (terminal_of_token X)\""], ["proof (prove)\nusing this:\n  \\<exists>k'a u'a y X.\n     indexle k'a u'a k' u' \\<and>\n     y \\<in> \\<J> k'a u'a \\<and>\n     item_end y = k'a \\<and>\n     X \\<in> \\<T> k'a u'a \\<and>\n     x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n     next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. (\\<And>k'a u'a y X.\n        indexle k'a u'a k' u' \\<and>\n        y \\<in> \\<J> k'a u'a \\<and>\n        item_end y = k'a \\<and>\n        X \\<in> \\<T> k'a u'a \\<and>\n        x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n        next_symbol y = Some (terminal_of_token X) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  indexle k'a u'a k' u' \\<and>\n  y \\<in> \\<J> k'a u'a \\<and>\n  item_end y = k'a \\<and>\n  X \\<in> \\<T> k'a u'a \\<and>\n  x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  indexle k'a u'a k' u' \\<and>\n  y \\<in> \\<J> k'a u'a \\<and>\n  item_end y = k'a \\<and>\n  X \\<in> \\<T> k'a u'a \\<and>\n  x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)", "show ?thesis"], ["proof (prove)\nusing this:\n  indexle k'a u'a k' u' \\<and>\n  y \\<in> \\<J> k'a u'a \\<and>\n  item_end y = k'a \\<and>\n  X \\<in> \\<T> k'a u'a \\<and>\n  x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "using indexle_trans assms(1) produced_by_scan_step_def"], ["proof (prove)\nusing this:\n  indexle k'a u'a k' u' \\<and>\n  y \\<in> \\<J> k'a u'a \\<and>\n  item_end y = k'a \\<and>\n  X \\<in> \\<T> k'a u'a \\<and>\n  x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n  \\<lbrakk>indexle ?k'' ?u'' ?k' ?u'; indexle ?k' ?u' ?k ?u\\<rbrakk>\n  \\<Longrightarrow> indexle ?k'' ?u'' ?k ?u\n  indexle k' u' k u\n  produced_by_scan_step ?x ?k ?u =\n  (\\<exists>k' u' y X.\n      indexle k' u' ?k ?u \\<and>\n      y \\<in> \\<J> k' u' \\<and>\n      item_end y = k' \\<and>\n      X \\<in> \\<T> k' u' \\<and>\n      ?x = inc_item y (k' + length (chars_of_token X)) \\<and>\n      next_symbol y = Some (terminal_of_token X))\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by blast"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<J>_induct[consumes 1, case_names Induct]:\n  assumes \"x \\<in> \\<J> k u\"\n  assumes induct: \"\\<And> x k u . (\\<And> x' k' u'. x' \\<in> \\<J> k' u' \\<Longrightarrow> indexlt k' u' k u \\<Longrightarrow> P x' k' u') \n                     \\<Longrightarrow> x \\<in> \\<J> k u \\<Longrightarrow> P x k u\"\n  shows \"P x k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P x k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P x k u", "let ?R = \"indexlt_rel <*lex*> {}\""], ["proof (state)\ngoal (1 subgoal):\n 1. P x k u", "have wf_R: \"wf ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (indexlt_rel <*lex*> {})", "by (auto simp add: wf_indexlt_rel)"], ["proof (state)\nthis:\n  wf (indexlt_rel <*lex*> {})\n\ngoal (1 subgoal):\n 1. P x k u", "let ?P = \"\\<lambda> a. snd a \\<in> \\<J> (fst (fst a)) (snd (fst a)) \\<longrightarrow> P (snd a) (fst (fst a)) (snd (fst a))\""], ["proof (state)\ngoal (1 subgoal):\n 1. P x k u", "have \"x \\<in> \\<J> k u \\<longrightarrow> P x k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k u \\<longrightarrow> P x k u", "apply (rule wf_induct[OF wf_R, where P = ?P and a = \"((k, u), x)\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<forall>a b ba.\n          (((a, b), ba), x) \\<in> indexlt_rel <*lex*> {} \\<longrightarrow>\n          ba \\<in> \\<J> a b \\<longrightarrow> P ba a b \\<Longrightarrow>\n       snd x \\<in> \\<J> (fst (fst x)) (snd (fst x)) \\<longrightarrow>\n       P (snd x) (fst (fst x)) (snd (fst x))", "apply (auto simp add: indexlt_def[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ba.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<J> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<J> a b\\<rbrakk>\n       \\<Longrightarrow> P ba a b", "apply (rule_tac x=ba and k=a and u=b in induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b ba x' k' u'.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<J> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<J> a b; x' \\<in> \\<J> k' u'; indexlt k' u' a b\\<rbrakk>\n       \\<Longrightarrow> P x' k' u'\n 2. \\<And>a b ba.\n       \\<lbrakk>\\<forall>aa ba.\n                   indexlt aa ba a b \\<longrightarrow>\n                   (\\<forall>b.\n                       b \\<in> \\<J> aa ba \\<longrightarrow> P b aa ba);\n        ba \\<in> \\<J> a b\\<rbrakk>\n       \\<Longrightarrow> ba \\<in> \\<J> a b", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<J> k u \\<longrightarrow> P x k u\n\ngoal (1 subgoal):\n 1. P x k u", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k u \\<longrightarrow> P x k u\n\ngoal (1 subgoal):\n 1. P x k u", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k u \\<longrightarrow> P x k u\n  x \\<in> \\<J> k u\n  \\<lbrakk>\\<And>x' k' u'.\n              \\<lbrakk>x' \\<in> \\<J> k' u'; indexlt k' u' ?k ?u\\<rbrakk>\n              \\<Longrightarrow> P x' k' u';\n   ?x \\<in> \\<J> ?k ?u\\<rbrakk>\n  \\<Longrightarrow> P ?x ?k ?u\n\ngoal (1 subgoal):\n 1. P x k u", "by auto"], ["proof (state)\nthis:\n  P x k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<pi>_no_tokens_item_end: \n  assumes x_in_\\<pi>: \"x \\<in> \\<pi> k {} I\"\n  shows \"item_end x = k \\<or> x \\<in> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "have x_in_limit: \"x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I", "using x_in_\\<pi> \\<pi>_no_tokens"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k {} I\n  \\<pi> ?k {} ?I = limit (\\<lambda>I. Complete ?k (Predict ?k I)) ?I\n\ngoal (1 subgoal):\n 1. x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I", "by auto"], ["proof (state)\nthis:\n  x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> limit (\\<lambda>I. Complete k (Predict k I)) I\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "proof (induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> I \\<Longrightarrow> item_end p = k \\<or> p \\<in> I\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "case (Init x)"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> I \\<Longrightarrow> item_end p = k \\<or> p \\<in> I\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> I", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "by auto"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "case (Iterate x J)"], ["proof (state)\nthis:\n  ?q \\<in> J \\<Longrightarrow> item_end ?q = k \\<or> ?q \\<in> I\n  x \\<in> Complete k (Predict k J)\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "from Iterate(2)"], ["proof (chain)\npicking this:\n  x \\<in> Complete k (Predict k J)", "have \"item_end x = k \\<or> x \\<in> Predict k J\""], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k J)\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> Predict k J", "using Complete_item_end"], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k J)\n  ?x \\<in> Complete ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> Predict k J", "by auto"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> Predict k J\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q.\n                   q \\<in> Y \\<Longrightarrow>\n                   item_end q = k \\<or> q \\<in> I;\n        p \\<in> Complete k (Predict k Y)\\<rbrakk>\n       \\<Longrightarrow> item_end p = k \\<or> p \\<in> I", "then"], ["proof (chain)\npicking this:\n  item_end x = k \\<or> x \\<in> Predict k J", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k \\<or> x \\<in> Predict k J\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> item_end x = k \\<or> x \\<in> I\n 2. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> item_end x = k \\<or> x \\<in> I\n 2. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  item_end x = k", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "by blast"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  x \\<in> Predict k J\n\ngoal (1 subgoal):\n 1. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> Predict k J", "have \"item_end x = k \\<or> x \\<in> J\""], ["proof (prove)\nusing this:\n  x \\<in> Predict k J\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> J", "using Predict_item_end"], ["proof (prove)\nusing this:\n  x \\<in> Predict k J\n  ?x \\<in> Predict ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> J", "by auto"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> J\n\ngoal (1 subgoal):\n 1. x \\<in> Predict k J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  item_end x = k \\<or> x \\<in> J", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k \\<or> x \\<in> J\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> item_end x = k \\<or> x \\<in> I\n 2. x \\<in> J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "case 1"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> item_end x = k \\<or> x \\<in> I\n 2. x \\<in> J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  item_end x = k", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "by blast"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "case 2"], ["proof (state)\nthis:\n  x \\<in> J\n\ngoal (1 subgoal):\n 1. x \\<in> J \\<Longrightarrow> item_end x = k \\<or> x \\<in> I", "then"], ["proof (chain)\npicking this:\n  x \\<in> J", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> J\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "using Iterate(1)[OF 2]"], ["proof (prove)\nusing this:\n  x \\<in> J\n  item_end x = k \\<or> x \\<in> I\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> I", "by blast"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma natUnion_ex: \"x \\<in> natUnion f \\<Longrightarrow> \\<exists> i. x \\<in> f i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> natUnion f \\<Longrightarrow> \\<exists>i. x \\<in> f i", "by (metis (no_types, hide_lams) mk_disjoint_insert natUnion_superset natUnion_upperbound \n    subsetCE subset_insert)"], ["", "lemma locate_in_limit:\n  assumes x_in_limit: \"x \\<in> limit f X\"\n  assumes x_notin_X: \"x \\<notin> X\"\n  shows \"\\<exists> n. x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "have \"\\<exists> N. x \\<in> funpower f N X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N. x \\<in> funpower f N X", "using x_in_limit limit_def natUnion_ex"], ["proof (prove)\nusing this:\n  x \\<in> limit f X\n  limit ?f ?x = natUnion (\\<lambda>n. funpower ?f n ?x)\n  ?x \\<in> natUnion ?f \\<Longrightarrow> \\<exists>i. ?x \\<in> ?f i\n\ngoal (1 subgoal):\n 1. \\<exists>N. x \\<in> funpower f N X", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>N. x \\<in> funpower f N X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "then"], ["proof (chain)\npicking this:\n  \\<exists>N. x \\<in> funpower f N X", "obtain N where N: \"x \\<in> funpower f N X\""], ["proof (prove)\nusing this:\n  \\<exists>N. x \\<in> funpower f N X\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        x \\<in> funpower f N X \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> funpower f N X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "{"], ["proof (state)\nthis:\n  x \\<in> funpower f N X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "fix n :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "have \"x \\<in> funpower f n X \\<Longrightarrow> \\<exists> m < n. x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> funpower f 0 X \\<Longrightarrow>\n    \\<exists>m<0.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n 2. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "case 0"], ["proof (state)\nthis:\n  x \\<in> funpower f 0 X\n\ngoal (2 subgoals):\n 1. x \\<in> funpower f 0 X \\<Longrightarrow>\n    \\<exists>m<0.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n 2. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "with x_notin_X"], ["proof (chain)\npicking this:\n  x \\<notin> X\n  x \\<in> funpower f 0 X", "show ?case"], ["proof (prove)\nusing this:\n  x \\<notin> X\n  x \\<in> funpower f 0 X\n\ngoal (1 subgoal):\n 1. \\<exists>m<0.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "by auto"], ["proof (state)\nthis:\n  \\<exists>m<0.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "case (Suc n)"], ["proof (state)\nthis:\n  x \\<in> funpower f n X \\<Longrightarrow>\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n  x \\<in> funpower f (Suc n) X\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "have \"x \\<notin> funpower f n X \\<or> x \\<in> funpower f n X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> funpower f n X \\<or> x \\<in> funpower f n X", "by blast"], ["proof (state)\nthis:\n  x \\<notin> funpower f n X \\<or> x \\<in> funpower f n X\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>x \\<in> funpower f n X \\<Longrightarrow>\n                \\<exists>m<n.\n                   x \\<in> funpower f (Suc m) X \\<and>\n                   x \\<notin> funpower f m X;\n        x \\<in> funpower f (Suc n) X\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m<Suc n.\n                            x \\<in> funpower f (Suc m) X \\<and>\n                            x \\<notin> funpower f m X", "then"], ["proof (chain)\npicking this:\n  x \\<notin> funpower f n X \\<or> x \\<in> funpower f n X", "show ?case"], ["proof (prove)\nusing this:\n  x \\<notin> funpower f n X \\<or> x \\<in> funpower f n X\n\ngoal (1 subgoal):\n 1. \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<notin> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n 2. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "case 1"], ["proof (state)\nthis:\n  x \\<notin> funpower f n X\n\ngoal (2 subgoals):\n 1. x \\<notin> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n 2. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "then"], ["proof (chain)\npicking this:\n  x \\<notin> funpower f n X", "show ?case"], ["proof (prove)\nusing this:\n  x \\<notin> funpower f n X\n\ngoal (1 subgoal):\n 1. \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "using Suc"], ["proof (prove)\nusing this:\n  x \\<notin> funpower f n X\n  x \\<in> funpower f n X \\<Longrightarrow>\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n  x \\<in> funpower f (Suc n) X\n\ngoal (1 subgoal):\n 1. \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>m<Suc n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "case 2"], ["proof (state)\nthis:\n  x \\<in> funpower f n X\n\ngoal (1 subgoal):\n 1. x \\<in> funpower f n X \\<Longrightarrow>\n    \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "from Suc(1)[OF 2]"], ["proof (chain)\npicking this:\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "using less_SucI"], ["proof (prove)\nusing this:\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n  ?m < ?n \\<Longrightarrow> ?m < Suc ?n\n\ngoal (1 subgoal):\n 1. \\<exists>m<Suc n.\n       x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "by blast"], ["proof (state)\nthis:\n  \\<exists>m<Suc n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m<Suc n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> funpower f n X \\<Longrightarrow>\n  \\<exists>m<n.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "}"], ["proof (state)\nthis:\n  x \\<in> funpower f ?n2 X \\<Longrightarrow>\n  \\<exists>m<?n2.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "with N"], ["proof (chain)\npicking this:\n  x \\<in> funpower f N X\n  x \\<in> funpower f ?n2 X \\<Longrightarrow>\n  \\<exists>m<?n2.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> funpower f N X\n  x \\<in> funpower f ?n2 X \\<Longrightarrow>\n  \\<exists>m<?n2.\n     x \\<in> funpower f (Suc m) X \\<and> x \\<notin> funpower f m X\n\ngoal (1 subgoal):\n 1. \\<exists>n.\n       x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X", "by auto"], ["proof (state)\nthis:\n  \\<exists>n. x \\<in> funpower f (Suc n) X \\<and> x \\<notin> funpower f n X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma produced_by_scan_step: \n  \"x \\<in> \\<J> k u \\<Longrightarrow> item_end x > k \\<Longrightarrow> produced_by_scan_step x k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> \\<J> k u; k < item_end x\\<rbrakk>\n    \\<Longrightarrow> produced_by_scan_step x k u", "proof (induct rule: \\<J>_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x k u.\n       \\<lbrakk>\\<And>x' k' u'.\n                   \\<lbrakk>x' \\<in> \\<J> k' u'; indexlt k' u' k u;\n                    k' < item_end x'\\<rbrakk>\n                   \\<Longrightarrow> produced_by_scan_step x' k' u';\n        x \\<in> \\<J> k u; k < item_end x\\<rbrakk>\n       \\<Longrightarrow> produced_by_scan_step x k u", "case (Induct x k u)"], ["proof (state)\nthis:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n\ngoal (1 subgoal):\n 1. \\<And>x k u.\n       \\<lbrakk>\\<And>x' k' u'.\n                   \\<lbrakk>x' \\<in> \\<J> k' u'; indexlt k' u' k u;\n                    k' < item_end x'\\<rbrakk>\n                   \\<Longrightarrow> produced_by_scan_step x' k' u';\n        x \\<in> \\<J> k u; k < item_end x\\<rbrakk>\n       \\<Longrightarrow> produced_by_scan_step x k u", "have \"(k = 0 \\<and> u = 0) \\<or> (k > 0 \\<and> u = 0) \\<or> (u > 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 0 \\<and> u = 0 \\<or> 0 < k \\<and> u = 0 \\<or> 0 < u", "by arith"], ["proof (state)\nthis:\n  k = 0 \\<and> u = 0 \\<or> 0 < k \\<and> u = 0 \\<or> 0 < u\n\ngoal (1 subgoal):\n 1. \\<And>x k u.\n       \\<lbrakk>\\<And>x' k' u'.\n                   \\<lbrakk>x' \\<in> \\<J> k' u'; indexlt k' u' k u;\n                    k' < item_end x'\\<rbrakk>\n                   \\<Longrightarrow> produced_by_scan_step x' k' u';\n        x \\<in> \\<J> k u; k < item_end x\\<rbrakk>\n       \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  k = 0 \\<and> u = 0 \\<or> 0 < k \\<and> u = 0 \\<or> 0 < u", "show ?case"], ["proof (prove)\nusing this:\n  k = 0 \\<and> u = 0 \\<or> 0 < k \\<and> u = 0 \\<or> 0 < u\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "proof (induct rule: disjCases3)"], ["proof (state)\ngoal (3 subgoals):\n 1. k = 0 \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 3. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "case 1"], ["proof (state)\nthis:\n  k = 0 \\<and> u = 0\n\ngoal (3 subgoals):\n 1. k = 0 \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 3. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "with Induct"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  k = 0 \\<and> u = 0", "have \"item_end x = 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  k = 0 \\<and> u = 0\n\ngoal (1 subgoal):\n 1. item_end x = 0", "using \\<J>_0_0_item_end"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  k = 0 \\<and> u = 0\n  ?x \\<in> \\<J> 0 0 \\<Longrightarrow> item_end ?x = 0\n\ngoal (1 subgoal):\n 1. item_end x = 0", "by blast"], ["proof (state)\nthis:\n  item_end x = 0\n\ngoal (3 subgoals):\n 1. k = 0 \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 3. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "with Induct"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  item_end x = 0", "have \"False\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  item_end x = 0\n\ngoal (1 subgoal):\n 1. False", "by arith"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. k = 0 \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 3. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by  blast"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "case 2"], ["proof (state)\nthis:\n  0 < k \\<and> u = 0\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  0 < k \\<and> u = 0", "obtain k' where k': \"k = Suc k'\""], ["proof (prove)\nusing this:\n  0 < k \\<and> u = 0\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = Suc k' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using Suc_pred'"], ["proof (prove)\nusing this:\n  0 < k \\<and> u = 0\n  0 < ?n \\<Longrightarrow> ?n = Suc (?n - 1)\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = Suc k' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  k = Suc k'\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "with Induct 2"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  0 < k \\<and> u = 0\n  k = Suc k'", "have \"x \\<in> \\<J> (Suc k') 0\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  0 < k \\<and> u = 0\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<J> (Suc k') 0", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<J> (Suc k') 0\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<J> (Suc k') 0", "have \"x \\<in> \\<pi> k {} (\\<I> k')\""], ["proof (prove)\nusing this:\n  x \\<in> \\<J> (Suc k') 0\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (\\<I> k')", "by (simp add: k')"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k {} (\\<I> k')\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k {} (\\<I> k')", "have \"item_end x = k \\<or> x \\<in> \\<I> k'\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k {} (\\<I> k')\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> \\<I> k'", "using \\<pi>_no_tokens_item_end"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k {} (\\<I> k')\n  ?x \\<in> \\<pi> ?k {} ?I \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?I\n\ngoal (1 subgoal):\n 1. item_end x = k \\<or> x \\<in> \\<I> k'", "by blast"], ["proof (state)\nthis:\n  item_end x = k \\<or> x \\<in> \\<I> k'\n\ngoal (2 subgoals):\n 1. 0 < k \\<and> u = 0 \\<Longrightarrow> produced_by_scan_step x k u\n 2. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  item_end x = k \\<or> x \\<in> \\<I> k'", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k \\<or> x \\<in> \\<I> k'\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "case 1"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "with Induct"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  item_end x = k", "have \"False\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  item_end x = k\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. item_end x = k \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by blast"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "case 2"], ["proof (state)\nthis:\n  x \\<in> \\<I> k'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<I> k'", "have \"\\<exists> u'. x \\<in> \\<J> k' u'\""], ["proof (prove)\nusing this:\n  x \\<in> \\<I> k'\n\ngoal (1 subgoal):\n 1. \\<exists>u'. x \\<in> \\<J> k' u'", "using \\<I>.simps natUnion_ex"], ["proof (prove)\nusing this:\n  x \\<in> \\<I> k'\n  \\<I> ?k = natUnion (\\<J> ?k)\n  ?x \\<in> natUnion ?f \\<Longrightarrow> \\<exists>i. ?x \\<in> ?f i\n\ngoal (1 subgoal):\n 1. \\<exists>u'. x \\<in> \\<J> k' u'", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>u'. x \\<in> \\<J> k' u'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  \\<exists>u'. x \\<in> \\<J> k' u'", "obtain u' where u': \"x \\<in> \\<J> k' u'\""], ["proof (prove)\nusing this:\n  \\<exists>u'. x \\<in> \\<J> k' u'\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        x \\<in> \\<J> k' u' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<J> k' u'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "have k'_bound: \"k' < item_end x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < item_end x", "using k' Induct"], ["proof (prove)\nusing this:\n  k = Suc k'\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n\ngoal (1 subgoal):\n 1. k' < item_end x", "by arith"], ["proof (state)\nthis:\n  k' < item_end x\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "have indexlt: \"indexlt k' u' k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k' u' k u", "by (simp add: indexlt_simp k')"], ["proof (state)\nthis:\n  indexlt k' u' k u\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "from Induct(1)[OF u' this k'_bound]"], ["proof (chain)\npicking this:\n  produced_by_scan_step x k' u'", "have pred_produced: \"produced_by_scan_step x k' u'\""], ["proof (prove)\nusing this:\n  produced_by_scan_step x k' u'\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k' u'", "."], ["proof (state)\nthis:\n  produced_by_scan_step x k' u'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<I> k' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  produced_by_scan_step x k' u'", "show ?case"], ["proof (prove)\nusing this:\n  produced_by_scan_step x k' u'\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "using indexlt produced_by_scan_step_trans indexle_def"], ["proof (prove)\nusing this:\n  produced_by_scan_step x k' u'\n  indexlt k' u' k u\n  \\<lbrakk>indexle ?k' ?u' ?k ?u; produced_by_scan_step ?x ?k' ?u'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x ?k ?u\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by blast"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "case 3"], ["proof (state)\nthis:\n  0 < u\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  0 < u", "have ex_u': \"\\<exists> u'. u = Suc u'\""], ["proof (prove)\nusing this:\n  0 < u\n\ngoal (1 subgoal):\n 1. \\<exists>u'. u = Suc u'", "by arith"], ["proof (state)\nthis:\n  \\<exists>u'. u = Suc u'\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  \\<exists>u'. u = Suc u'", "obtain u' where u': \"u = Suc u'\""], ["proof (prove)\nusing this:\n  \\<exists>u'. u = Suc u'\n\ngoal (1 subgoal):\n 1. (\\<And>u'. u = Suc u' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "with Induct"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  u = Suc u'", "have \"x \\<in> \\<J> k (Suc u')\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k (Suc u')", "by metis"], ["proof (state)\nthis:\n  x \\<in> \\<J> k (Suc u')\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<J> k (Suc u')", "have x_in_\\<pi>: \"x \\<in> \\<pi> k (\\<T> k u) (\\<J> k u')\""], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k (Suc u')\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k (\\<T> k u) (\\<J> k u')", "using u' \\<J>.simps"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k (Suc u')\n  u = Suc u'\n  \\<J> 0 0 = \\<pi> 0 {} Init\n  \\<J> ?k (Suc ?u) = \\<pi> ?k (\\<T> ?k (Suc ?u)) (\\<J> ?k ?u)\n  \\<J> (Suc ?k) 0 = \\<pi> (Suc ?k) {} (\\<I> ?k)\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k (\\<T> k u) (\\<J> k u')", "by metis"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k (\\<T> k u) (\\<J> k u')\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "have \"x \\<in> \\<J> k u' \\<or> x \\<notin> \\<J> k u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k u' \\<or> x \\<notin> \\<J> k u'", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<J> k u' \\<or> x \\<notin> \\<J> k u'\n\ngoal (1 subgoal):\n 1. 0 < u \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> \\<J> k u' \\<or> x \\<notin> \\<J> k u'", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> \\<J> k u' \\<or> x \\<notin> \\<J> k u'\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "case 1"], ["proof (state)\nthis:\n  x \\<in> \\<J> k u'\n\ngoal (2 subgoals):\n 1. x \\<in> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "have indexlt: \"indexlt k u' k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexlt k u' k u", "by (simp add: indexlt_simp u')"], ["proof (state)\nthis:\n  indexlt k u' k u\n\ngoal (2 subgoals):\n 1. x \\<in> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u\n 2. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "with Induct(1)[OF 1 indexlt Induct(3)]"], ["proof (chain)\npicking this:\n  produced_by_scan_step x k u'\n  indexlt k u' k u", "show ?case"], ["proof (prove)\nusing this:\n  produced_by_scan_step x k u'\n  indexlt k u' k u\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "using indexle_def produced_by_scan_step_trans"], ["proof (prove)\nusing this:\n  produced_by_scan_step x k u'\n  indexlt k u' k u\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n  \\<lbrakk>indexle ?k' ?u' ?k ?u; produced_by_scan_step ?x ?k' ?u'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x ?k ?u\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by blast"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "case 2"], ["proof (state)\nthis:\n  x \\<notin> \\<J> k u'\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "have item_end_x: \"k < item_end x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < item_end x", "using Induct"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x' \\<in> \\<J> ?k' ?u'; indexlt ?k' ?u' k u;\n   ?k' < item_end ?x'\\<rbrakk>\n  \\<Longrightarrow> produced_by_scan_step ?x' ?k' ?u'\n  x \\<in> \\<J> k u\n  k < item_end x\n\ngoal (1 subgoal):\n 1. k < item_end x", "by auto"], ["proof (state)\nthis:\n  k < item_end x\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "obtain f where f: \"f = Scan (\\<T> k u) k \\<circ> Complete k \\<circ> Predict k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        f =\n        Scan (\\<T> k u) k \\<circ> Complete k \\<circ>\n        Predict k \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f = Scan (\\<T> k u) k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "have \"x \\<in> limit f (\\<J> k u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> limit f (\\<J> k u')", "using x_in_\\<pi> \\<pi>_functional f"], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k (\\<T> k u) (\\<J> k u')\n  \\<pi> ?k ?T = limit (Scan ?T ?k \\<circ> Complete ?k \\<circ> Predict ?k)\n  f = Scan (\\<T> k u) k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. x \\<in> limit f (\\<J> k u')", "by simp"], ["proof (state)\nthis:\n  x \\<in> limit f (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "from locate_in_limit[OF this 2]"], ["proof (chain)\npicking this:\n  \\<exists>n.\n     x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n     x \\<notin> funpower f n (\\<J> k u')", "obtain n where n:\n              \"x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n               x \\<notin> funpower f n (\\<J> k u')\""], ["proof (prove)\nusing this:\n  \\<exists>n.\n     x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n     x \\<notin> funpower f n (\\<J> k u')\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n        x \\<notin> funpower f n (\\<J> k u') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n  x \\<notin> funpower f n (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "obtain Y where Y: \"Y = funpower f n (\\<J> k u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y.\n        Y = funpower f n (\\<J> k u') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y = funpower f n (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "have x_f_Y: \"x \\<in> f Y \\<and> x \\<notin> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> f Y \\<and> x \\<notin> Y", "using Y n"], ["proof (prove)\nusing this:\n  Y = funpower f n (\\<J> k u')\n  x \\<in> funpower f (Suc n) (\\<J> k u') \\<and>\n  x \\<notin> funpower f n (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<in> f Y \\<and> x \\<notin> Y", "by auto"], ["proof (state)\nthis:\n  x \\<in> f Y \\<and> x \\<notin> Y\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> f Y \\<and> x \\<notin> Y", "have \"x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))\""], ["proof (prove)\nusing this:\n  x \\<in> f Y \\<and> x \\<notin> Y\n\ngoal (1 subgoal):\n 1. x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))", "using comp_apply f"], ["proof (prove)\nusing this:\n  x \\<in> f Y \\<and> x \\<notin> Y\n  (?f \\<circ> ?g) ?x = ?f (?g ?x)\n  f = Scan (\\<T> k u) k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))", "by simp"], ["proof (state)\nthis:\n  x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))", "have \"x \\<in> (Complete k (Predict k Y)) \\<or>\n              x \\<in> { inc_item x' (k + length c) | x' t c. x' \\<in> bin (Complete k (Predict k Y)) k \\<and> \n                    (t, c) \\<in> (\\<T> k u) \\<and> next_symbol x' = Some t }\""], ["proof (prove)\nusing this:\n  x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. x \\<in> Complete k (Predict k Y) \\<or>\n    x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}", "using Scan_def"], ["proof (prove)\nusing this:\n  x \\<in> Scan (\\<T> k u) k (Complete k (Predict k Y))\n  Scan ?T ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x t c.\n      uu_ = inc_item x (?k + length c) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      (t, c) \\<in> ?T \\<and> next_symbol x = Some t}\n\ngoal (1 subgoal):\n 1. x \\<in> Complete k (Predict k Y) \\<or>\n    x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}", "by simp"], ["proof (state)\nthis:\n  x \\<in> Complete k (Predict k Y) \\<or>\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}\n\ngoal (1 subgoal):\n 1. x \\<notin> \\<J> k u' \\<Longrightarrow> produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> Complete k (Predict k Y) \\<or>\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k Y) \\<or>\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> Complete k (Predict k Y) \\<Longrightarrow>\n    produced_by_scan_step x k u\n 2. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "case 1"], ["proof (state)\nthis:\n  x \\<in> Complete k (Predict k Y)\n\ngoal (2 subgoals):\n 1. x \\<in> Complete k (Predict k Y) \\<Longrightarrow>\n    produced_by_scan_step x k u\n 2. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  x \\<in> Complete k (Predict k Y)", "have \"False\""], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k Y)\n\ngoal (1 subgoal):\n 1. False", "using item_end_x x_f_Y Complete_item_end Predict_item_end"], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k Y)\n  k < item_end x\n  x \\<in> f Y \\<and> x \\<notin> Y\n  ?x \\<in> Complete ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n  ?x \\<in> Predict ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n\ngoal (1 subgoal):\n 1. False", "using less_not_refl3"], ["proof (prove)\nusing this:\n  x \\<in> Complete k (Predict k Y)\n  k < item_end x\n  x \\<in> f Y \\<and> x \\<notin> Y\n  ?x \\<in> Complete ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n  ?x \\<in> Predict ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n  ?s < ?t \\<Longrightarrow> ?s \\<noteq> ?t\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. x \\<in> Complete k (Predict k Y) \\<Longrightarrow>\n    produced_by_scan_step x k u\n 2. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "by auto"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "case 2"], ["proof (state)\nthis:\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "have \"Y \\<subseteq> limit f (\\<J> k u')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<subseteq> limit f (\\<J> k u')", "using Y limit_def natUnion_superset"], ["proof (prove)\nusing this:\n  Y = funpower f n (\\<J> k u')\n  limit ?f ?x = natUnion (\\<lambda>n. funpower ?f n ?x)\n  ?g ?i \\<subseteq> natUnion ?g\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> limit f (\\<J> k u')", "by fastforce"], ["proof (state)\nthis:\n  Y \\<subseteq> limit f (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  Y \\<subseteq> limit f (\\<J> k u')", "have \"Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> limit f (\\<J> k u')\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')", "using f"], ["proof (prove)\nusing this:\n  Y \\<subseteq> limit f (\\<J> k u')\n  f = Scan (\\<T> k u) k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')", "by (simp add: \\<pi>_functional)"], ["proof (state)\nthis:\n  Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')", "have Y_in_\\<J>: \"Y \\<subseteq> \\<J> k u\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u", "using u'"], ["proof (prove)\nusing this:\n  Y \\<subseteq> \\<pi> k (\\<T> k u) (\\<J> k u')\n  u = Suc u'\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u", "by simp"], ["proof (state)\nthis:\n  Y \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "then"], ["proof (chain)\npicking this:\n  Y \\<subseteq> \\<J> k u", "have in_\\<J>: \"Complete k (Predict k Y) \\<subseteq> \\<J> k u\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. Complete k (Predict k Y) \\<subseteq> \\<J> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "(* automatically generated *)"], ["proof (state)\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "have f1: \"\\<forall>f I Ia i. (\\<not> mono f \\<or> \\<not> (I::item set) \\<subseteq> Ia \\<or> (i::item) \\<notin> f I) \\<or> i \\<in> f Ia\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f I Ia i.\n       (\\<not> mono f \\<or>\n        \\<not> I \\<subseteq> Ia \\<or> i \\<notin> f I) \\<or>\n       i \\<in> f Ia", "by (meson mono_subset_elem)"], ["proof (state)\nthis:\n  \\<forall>f I Ia i.\n     (\\<not> mono f \\<or>\n      \\<not> I \\<subseteq> Ia \\<or> i \\<notin> f I) \\<or>\n     i \\<in> f Ia\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "obtain ii :: \"item set \\<Rightarrow> item set \\<Rightarrow> item\" where\n                    \"\\<forall>x0 x1. (\\<exists>v2. v2 \\<in> x1 \\<and> v2 \\<notin> x0) = (ii x0 x1 \\<in> x1 \\<and> ii x0 x1 \\<notin> x0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ii.\n        \\<forall>x0 x1.\n           (\\<exists>v2. v2 \\<in> x1 \\<and> v2 \\<notin> x0) =\n           (ii x0 x1 \\<in> x1 \\<and> ii x0 x1 \\<notin> x0) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x0 x1.\n     (\\<exists>v2. v2 \\<in> x1 \\<and> v2 \\<notin> x0) =\n     (ii x0 x1 \\<in> x1 \\<and> ii x0 x1 \\<notin> x0)\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "then"], ["proof (chain)\npicking this:\n  \\<forall>x0 x1.\n     (\\<exists>v2. v2 \\<in> x1 \\<and> v2 \\<notin> x0) =\n     (ii x0 x1 \\<in> x1 \\<and> ii x0 x1 \\<notin> x0)", "have f2: \"\\<forall>I Ia. ii Ia I \\<in> I \\<and> ii Ia I \\<notin> Ia \\<or> I \\<subseteq> Ia\""], ["proof (prove)\nusing this:\n  \\<forall>x0 x1.\n     (\\<exists>v2. v2 \\<in> x1 \\<and> v2 \\<notin> x0) =\n     (ii x0 x1 \\<in> x1 \\<and> ii x0 x1 \\<notin> x0)\n\ngoal (1 subgoal):\n 1. \\<forall>I Ia.\n       ii Ia I \\<in> I \\<and> ii Ia I \\<notin> Ia \\<or> I \\<subseteq> Ia", "by blast"], ["proof (state)\nthis:\n  \\<forall>I Ia.\n     ii Ia I \\<in> I \\<and> ii Ia I \\<notin> Ia \\<or> I \\<subseteq> Ia\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "obtain nn :: nat where\n                    f3: \"u = Suc nn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn. u = Suc nn \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using ex_u'"], ["proof (prove)\nusing this:\n  \\<exists>u'. u = Suc u'\n\ngoal (1 subgoal):\n 1. (\\<And>nn. u = Suc nn \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by presburger"], ["proof (state)\nthis:\n  u = Suc nn\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "moreover"], ["proof (state)\nthis:\n  u = Suc nn\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "{"], ["proof (state)\nthis:\n  u = Suc nn\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "assume \"ii (\\<J> k u) (Complete k (Predict k Y)) \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn))\""], ["proof (state)\nthis:\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn))\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "then"], ["proof (chain)\npicking this:\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn))", "have ?thesis"], ["proof (prove)\nusing this:\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn))\n\ngoal (1 subgoal):\n 1. Complete k (Predict k Y) \\<subseteq> \\<J> k u", "using f3 f2 Complete_\\<pi>_fix"], ["proof (prove)\nusing this:\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn))\n  u = Suc nn\n  \\<forall>I Ia.\n     ii Ia I \\<in> I \\<and> ii Ia I \\<notin> Ia \\<or> I \\<subseteq> Ia\n  Complete ?k (\\<pi> ?k ?T ?I) = \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. Complete k (Predict k Y) \\<subseteq> \\<J> k u", "by auto"], ["proof (state)\nthis:\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "}"], ["proof (state)\nthis:\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn)) \\<Longrightarrow>\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. Y \\<subseteq> \\<J> k u \\<Longrightarrow>\n    Complete k (Predict k Y) \\<subseteq> \\<J> k u", "ultimately"], ["proof (chain)\npicking this:\n  u = Suc nn\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn)) \\<Longrightarrow>\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u", "show ?thesis"], ["proof (prove)\nusing this:\n  u = Suc nn\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn)) \\<Longrightarrow>\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. Complete k (Predict k Y) \\<subseteq> \\<J> k u", "using f2 f1"], ["proof (prove)\nusing this:\n  u = Suc nn\n  ii (\\<J> k u) (Complete k (Predict k Y))\n  \\<in> Complete k (\\<pi> k (\\<T> k (Suc nn)) (\\<J> k nn)) \\<Longrightarrow>\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n  \\<forall>I Ia.\n     ii Ia I \\<in> I \\<and> ii Ia I \\<notin> Ia \\<or> I \\<subseteq> Ia\n  \\<forall>f I Ia i.\n     (\\<not> mono f \\<or>\n      \\<not> I \\<subseteq> Ia \\<or> i \\<notin> f I) \\<or>\n     i \\<in> f Ia\n\ngoal (1 subgoal):\n 1. Complete k (Predict k Y) \\<subseteq> \\<J> k u", "by (metis (full_types) Complete_regular Predict_\\<pi>_fix Predict_regular \n                      \\<J>.simps(2) Y_in_\\<J> regular_implies_mono)"], ["proof (state)\nthis:\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "from 2"], ["proof (chain)\npicking this:\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}", "obtain  x' t c where x'_t_c:\n                  \"x = inc_item x' (k + length c) \\<and> x' \\<in> bin (Complete k (Predict k Y)) k \\<and> \n                    (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t\""], ["proof (prove)\nusing this:\n  x \\<in> {uu_.\n           \\<exists>x' t c.\n              uu_ = inc_item x' (k + length c) \\<and>\n              x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n              (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t}\n\ngoal (1 subgoal):\n 1. (\\<And>x' c t.\n        x = inc_item x' (k + length c) \\<and>\n        x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n        (t, c) \\<in> \\<T> k u \\<and>\n        next_symbol x' = Some t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = inc_item x' (k + length c) \\<and>\n  x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n  (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t\n\ngoal (1 subgoal):\n 1. x \\<in> {uu_.\n             \\<exists>x' t c.\n                uu_ = inc_item x' (k + length c) \\<and>\n                x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n                (t, c) \\<in> \\<T> k u \\<and>\n                next_symbol x' = Some t} \\<Longrightarrow>\n    produced_by_scan_step x k u", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. produced_by_scan_step x k u", "apply (simp add: produced_by_scan_step_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k' u'.\n       indexle k' u' k u \\<and>\n       (\\<exists>y.\n           y \\<in> \\<J> k' u' \\<and>\n           item_end y = k' \\<and>\n           (\\<exists>a b.\n               (a, b) \\<in> \\<T> k' u' \\<and>\n               x = inc_item y (k' + length b) \\<and>\n               next_symbol y = Some a))", "apply (rule_tac x=k in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u'.\n       indexle k u' k u \\<and>\n       (\\<exists>y.\n           y \\<in> \\<J> k u' \\<and>\n           item_end y = k \\<and>\n           (\\<exists>a b.\n               (a, b) \\<in> \\<T> k u' \\<and>\n               x = inc_item y (k + length b) \\<and> next_symbol y = Some a))", "apply (rule_tac x=u in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. indexle k u k u \\<and>\n    (\\<exists>y.\n        y \\<in> \\<J> k u \\<and>\n        item_end y = k \\<and>\n        (\\<exists>a b.\n            (a, b) \\<in> \\<T> k u \\<and>\n            x = inc_item y (k + length b) \\<and> next_symbol y = Some a))", "apply (simp add: indexle_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       y \\<in> \\<J> k u \\<and>\n       item_end y = k \\<and>\n       (\\<exists>a b.\n           (a, b) \\<in> \\<T> k u \\<and>\n           x = inc_item y (k + length b) \\<and> next_symbol y = Some a)", "apply (rule_tac x=x' in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<in> \\<J> k u \\<and>\n    item_end x' = k \\<and>\n    (\\<exists>a b.\n        (a, b) \\<in> \\<T> k u \\<and>\n        x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a)", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. x' \\<in> \\<J> k u\n 2. item_end x' = k\n 3. \\<exists>a b.\n       (a, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a", "using x'_t_c bin_def in_\\<J>"], ["proof (prove)\nusing this:\n  x = inc_item x' (k + length c) \\<and>\n  x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n  (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n  Complete k (Predict k Y) \\<subseteq> \\<J> k u\n\ngoal (3 subgoals):\n 1. x' \\<in> \\<J> k u\n 2. item_end x' = k\n 3. \\<exists>a b.\n       (a, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_end x' = k\n 2. \\<exists>a b.\n       (a, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a", "using x'_t_c bin_def"], ["proof (prove)\nusing this:\n  x = inc_item x' (k + length c) \\<and>\n  x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n  (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t\n  bin ?I ?k = {x \\<in> ?I. item_end x = ?k}\n\ngoal (2 subgoals):\n 1. item_end x' = k\n 2. \\<exists>a b.\n       (a, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       (a, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some a", "apply (rule_tac x=t in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       (t, b) \\<in> \\<T> k u \\<and>\n       x = inc_item x' (k + length b) \\<and> next_symbol x' = Some t", "apply (rule_tac x=c in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, c) \\<in> \\<T> k u \\<and>\n    x = inc_item x' (k + length c) \\<and> next_symbol x' = Some t", "using x'_t_c"], ["proof (prove)\nusing this:\n  x = inc_item x' (k + length c) \\<and>\n  x' \\<in> bin (Complete k (Predict k Y)) k \\<and>\n  (t, c) \\<in> \\<T> k u \\<and> next_symbol x' = Some t\n\ngoal (1 subgoal):\n 1. (t, c) \\<in> \\<T> k u \\<and>\n    x = inc_item x' (k + length c) \\<and> next_symbol x' = Some t", "by auto"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  produced_by_scan_step x k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma limit_single_step:\n  assumes \"x \\<in> f X\"\n  shows \"x \\<in> limit f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> limit f X", "by (metis assms elem_limit_simp funpower.simps(1) funpower.simps(2))"], ["", "lemma Gen_union: \"Gen (A \\<union> B) = Gen A \\<union> Gen B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (A \\<union> B) = Gen A \\<union> Gen B", "by (simp add: Gen_def, blast)"], ["", "lemma is_prefix_Prefixes_subset:\n  assumes \"is_prefix q p\"\n  shows \"Prefixes q \\<subseteq> Prefixes p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes q \\<subseteq> Prefixes p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Prefixes q \\<subseteq> Prefixes p", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes q \\<subseteq> Prefixes p", "apply (auto simp add: Prefixes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. is_prefix x q \\<Longrightarrow> is_prefix x p", "using assms"], ["proof (prove)\nusing this:\n  is_prefix q p\n\ngoal (1 subgoal):\n 1. \\<And>x. is_prefix x q \\<Longrightarrow> is_prefix x p", "by (metis is_prefix_append is_prefix_def)"], ["proof (state)\nthis:\n  Prefixes q \\<subseteq> Prefixes p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Prefixes_subset_\\<P>:\n  assumes \"p \\<in> \\<P> k u\"\n  shows \"Prefixes p \\<subseteq> \\<P> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> \\<P> k u", "using Prefixes_is_prefix assms prefixes_are_paths"], ["proof (prove)\nusing this:\n  (?q \\<in> Prefixes ?p) = is_prefix ?q ?p\n  p \\<in> \\<P> k u\n  \\<lbrakk>?p \\<in> \\<P> ?k ?u; is_prefix ?x ?p\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> \\<P> ?k ?u\n\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> \\<P> k u", "by blast"], ["", "lemma Prefixes_subset_paths_le:\n  assumes \"Prefixes p \\<subseteq> P\"\n  shows \"Prefixes p \\<subseteq> paths_le (charslength p) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> paths_le (charslength p) P", "using Prefixes_is_prefix assms charslength_of_prefix paths_le_def"], ["proof (prove)\nusing this:\n  (?q \\<in> Prefixes ?p) = is_prefix ?q ?p\n  Prefixes p \\<subseteq> P\n  is_prefix ?a ?b \\<Longrightarrow> charslength ?a \\<le> charslength ?b\n  paths_le ?k ?P = {p \\<in> ?P. charslength p \\<le> ?k}\n\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> paths_le (charslength p) P", "by auto"], ["", "lemma Scan_\\<J>_subset_\\<J>:\n  \"Scan (\\<T> k (Suc u)) k (\\<J> k u) \\<subseteq> \\<J> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan (\\<T> k (Suc u)) k (\\<J> k u) \\<subseteq> \\<J> k (Suc u)", "by (metis (no_types, lifting) Scan_\\<pi>_fix \\<J>.simps(2) \\<J>_subset_Suc_u monoD mono_Scan)"], ["", "lemma subset_\\<J>k: \"u \\<le> v \\<Longrightarrow> \\<J> k u \\<subseteq> \\<J> k v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<le> v \\<Longrightarrow> \\<J> k u \\<subseteq> \\<J> k v", "thm \\<J>_subset_Suc_u"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<le> v \\<Longrightarrow> \\<J> k u \\<subseteq> \\<J> k v", "by (rule subset_fSuc, rule \\<J>_subset_Suc_u)"], ["", "lemma subset_\\<J>\\<I>k: \"\\<J> k u \\<subseteq> \\<I> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k u \\<subseteq> \\<I> k", "by (auto simp add: natUnion_def)"], ["", "lemma subset_\\<I>\\<J>Suc: \"\\<I> k \\<subseteq> \\<J> (Suc k) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<J> (Suc k) u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<J> (Suc k) u", "have a: \"\\<I> k \\<subseteq> \\<J> (Suc k) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<J> (Suc k) 0", "apply (simp only: \\<J>.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<pi> (Suc k) {} (\\<I> k)", "using \\<pi>_apply_setmonotone"], ["proof (prove)\nusing this:\n  ?x \\<in> ?I \\<Longrightarrow> ?x \\<in> \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<pi> (Suc k) {} (\\<I> k)", "by blast"], ["proof (state)\nthis:\n  \\<I> k \\<subseteq> \\<J> (Suc k) 0\n\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<J> (Suc k) u", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<J> (Suc k) u", "apply (case_tac \"u = 0\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. u = 0 \\<Longrightarrow> \\<I> k \\<subseteq> \\<J> (Suc k) u\n 2. u \\<noteq> 0 \\<Longrightarrow> \\<I> k \\<subseteq> \\<J> (Suc k) u", "apply (simp only: a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> \\<I> k \\<subseteq> \\<J> (Suc k) u", "apply (rule subset_trans[OF a subset_\\<J>k])"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<noteq> 0 \\<Longrightarrow> 0 \\<le> u", "by auto"], ["proof (state)\nthis:\n  \\<I> k \\<subseteq> \\<J> (Suc k) u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subset_\\<I>Suc: \"\\<I> k \\<subseteq> \\<I> (Suc k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k \\<subseteq> \\<I> (Suc k)", "by (rule subset_trans[OF subset_\\<I>\\<J>Suc subset_\\<J>\\<I>k])"], ["", "lemma subset_\\<I>: \"i \\<le> j \\<Longrightarrow> \\<I> i \\<subseteq> \\<I> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i \\<le> j \\<Longrightarrow> \\<I> i \\<subseteq> \\<I> j", "by (rule subset_fSuc[where u=i and v=j and f = \\<I>, OF subset_\\<I>Suc])"], ["", "lemma subset_\\<J> :\n  assumes leq: \"k' < k \\<or> (k' = k \\<and> u' \\<le> u)\"\n  shows \"\\<J> k' u' \\<subseteq> \\<J> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "from leq"], ["proof (chain)\npicking this:\n  k' < k \\<or> k' = k \\<and> u' \\<le> u", "show ?thesis"], ["proof (prove)\nusing this:\n  k' < k \\<or> k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "case 1"], ["proof (state)\nthis:\n  k' < k\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "have s1: \"\\<J> k' u' \\<subseteq> \\<I> k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<I> k'", "by (rule_tac subset_\\<J>\\<I>k)"], ["proof (state)\nthis:\n  \\<J> k' u' \\<subseteq> \\<I> k'\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "have s2: \"\\<I> k' \\<subseteq> \\<I> (k - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<I> k' \\<subseteq> \\<I> (k - 1)", "apply (rule_tac subset_\\<I>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> k - 1", "using 1"], ["proof (prove)\nusing this:\n  k' < k\n\ngoal (1 subgoal):\n 1. k' \\<le> k - 1", "by arith"], ["proof (state)\nthis:\n  \\<I> k' \\<subseteq> \\<I> (k - 1)\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "from subset_\\<I>\\<J>Suc[where k=\"k - 1\"] 1"], ["proof (chain)\npicking this:\n  \\<I> (k - 1) \\<subseteq> \\<J> (Suc (k - 1)) ?u\n  k' < k", "have s3: \"\\<I> (k - 1) \\<subseteq> \\<J> k 0\""], ["proof (prove)\nusing this:\n  \\<I> (k - 1) \\<subseteq> \\<J> (Suc (k - 1)) ?u\n  k' < k\n\ngoal (1 subgoal):\n 1. \\<I> (k - 1) \\<subseteq> \\<J> k 0", "by simp"], ["proof (state)\nthis:\n  \\<I> (k - 1) \\<subseteq> \\<J> k 0\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "have s4: \"\\<J> k 0 \\<subseteq> \\<J> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k 0 \\<subseteq> \\<J> k u", "by (rule_tac subset_\\<J>k, simp)"], ["proof (state)\nthis:\n  \\<J> k 0 \\<subseteq> \\<J> k u\n\ngoal (2 subgoals):\n 1. k' < k \\<Longrightarrow> \\<J> k' u' \\<subseteq> \\<J> k u\n 2. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "from s1 s2 s3 s4 subset_trans"], ["proof (chain)\npicking this:\n  \\<J> k' u' \\<subseteq> \\<I> k'\n  \\<I> k' \\<subseteq> \\<I> (k - 1)\n  \\<I> (k - 1) \\<subseteq> \\<J> k 0\n  \\<J> k 0 \\<subseteq> \\<J> k u\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C", "show ?case"], ["proof (prove)\nusing this:\n  \\<J> k' u' \\<subseteq> \\<I> k'\n  \\<I> k' \\<subseteq> \\<I> (k - 1)\n  \\<I> (k - 1) \\<subseteq> \\<J> k 0\n  \\<J> k 0 \\<subseteq> \\<J> k u\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C\n\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "by blast"], ["proof (state)\nthis:\n  \\<J> k' u' \\<subseteq> \\<J> k u\n\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "case 2"], ["proof (state)\nthis:\n  k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. k' = k \\<and> u' \\<le> u \\<Longrightarrow>\n    \\<J> k' u' \\<subseteq> \\<J> k u", "thus ?case"], ["proof (prove)\nusing this:\n  k' = k \\<and> u' \\<le> u\n\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "by (simp add : subset_\\<J>k)"], ["proof (state)\nthis:\n  \\<J> k' u' \\<subseteq> \\<J> k u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<J> k' u' \\<subseteq> \\<J> k u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<J>_subset:\n  assumes \"indexle k' u' k u\"\n  shows \"\\<J> k' u' \\<subseteq> \\<J> k u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "using subset_\\<J> indexle_def indexlt_simp"], ["proof (prove)\nusing this:\n  ?k' < ?k \\<or> ?k' = ?k \\<and> ?u' \\<le> ?u \\<Longrightarrow>\n  \\<J> ?k' ?u' \\<subseteq> \\<J> ?k ?u\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. \\<J> k' u' \\<subseteq> \\<J> k u", "by (metis assms less_imp_le_nat order_refl)"], ["", "lemma Scan_items_le:\n  assumes bounded_T: \"\\<And> t . t \\<in> T \\<Longrightarrow> length (chars_of_token t) \\<le> l\"\n  shows \"Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "assume x_dom: \"x \\<in> Scan T k (items_le k P)\""], ["proof (state)\nthis:\n  x \\<in> Scan T k (items_le k P)\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> Scan T k (items_le k P)", "have x_dom': \"x \\<in> Scan T k P\""], ["proof (prove)\nusing this:\n  x \\<in> Scan T k (items_le k P)\n\ngoal (1 subgoal):\n 1. x \\<in> Scan T k P", "by (meson items_le_is_filter mono_Scan mono_subset_elem)"], ["proof (state)\nthis:\n  x \\<in> Scan T k P\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "from x_dom"], ["proof (chain)\npicking this:\n  x \\<in> Scan T k (items_le k P)", "have \"x \\<in> items_le k P \\<or> \n      (\\<exists> y t c. x = inc_item y (k + length c) \\<and> y \\<in> bin (items_le k P) k \\<and> (t, c) \\<in> T\n       \\<and> next_symbol y = Some t)\""], ["proof (prove)\nusing this:\n  x \\<in> Scan T k (items_le k P)\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k P \\<or>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin (items_le k P) k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t)", "using Scan_def"], ["proof (prove)\nusing this:\n  x \\<in> Scan T k (items_le k P)\n  Scan ?T ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x t c.\n      uu_ = inc_item x (?k + length c) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      (t, c) \\<in> ?T \\<and> next_symbol x = Some t}\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k P \\<or>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin (items_le k P) k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t)", "using UnE mem_Collect_eq"], ["proof (prove)\nusing this:\n  x \\<in> Scan T k (items_le k P)\n  Scan ?T ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x t c.\n      uu_ = inc_item x (?k + length c) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      (t, c) \\<in> ?T \\<and> next_symbol x = Some t}\n  \\<lbrakk>?c \\<in> ?A \\<union> ?B; ?c \\<in> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k P \\<or>\n    (\\<exists>y t c.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin (items_le k P) k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t)", "by auto"], ["proof (state)\nthis:\n  x \\<in> items_le k P \\<or>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin (items_le k P) k \\<and>\n      (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> items_le k P \\<or>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin (items_le k P) k \\<and>\n      (t, c) \\<in> T \\<and> next_symbol y = Some t)", "have \"item_end x \\<le> k + l\""], ["proof (prove)\nusing this:\n  x \\<in> items_le k P \\<or>\n  (\\<exists>y t c.\n      x = inc_item y (k + length c) \\<and>\n      y \\<in> bin (items_le k P) k \\<and>\n      (t, c) \\<in> T \\<and> next_symbol y = Some t)\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k + l", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> items_le k P \\<Longrightarrow> item_end x \\<le> k + l\n 2. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "case 1"], ["proof (state)\nthis:\n  x \\<in> items_le k P\n\ngoal (2 subgoals):\n 1. x \\<in> items_le k P \\<Longrightarrow> item_end x \\<le> k + l\n 2. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "then"], ["proof (chain)\npicking this:\n  x \\<in> items_le k P", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> items_le k P\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k + l", "by (meson items_le_fix_D items_le_idempotent trans_le_add1)"], ["proof (state)\nthis:\n  item_end x \\<le> k + l\n\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "case 2"], ["proof (state)\nthis:\n  \\<exists>y t c.\n     x = inc_item y (k + length c) \\<and>\n     y \\<in> bin (items_le k P) k \\<and>\n     (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "then"], ["proof (chain)\npicking this:\n  \\<exists>y t c.\n     x = inc_item y (k + length c) \\<and>\n     y \\<in> bin (items_le k P) k \\<and>\n     (t, c) \\<in> T \\<and> next_symbol y = Some t", "obtain y t c where y: \"x = inc_item y (k + length c) \\<and> y \\<in> bin (items_le k P) k \\<and> \n          (t, c) \\<in> T \\<and> next_symbol y = Some t\""], ["proof (prove)\nusing this:\n  \\<exists>y t c.\n     x = inc_item y (k + length c) \\<and>\n     y \\<in> bin (items_le k P) k \\<and>\n     (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. (\\<And>y c t.\n        x = inc_item y (k + length c) \\<and>\n        y \\<in> bin (items_le k P) k \\<and>\n        (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "then"], ["proof (chain)\npicking this:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t", "have item_end_x: \"item_end x = (k + length c)\""], ["proof (prove)\nusing this:\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. item_end x = k + length c", "by simp"], ["proof (state)\nthis:\n  item_end x = k + length c\n\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "from bounded_T y"], ["proof (chain)\npicking this:\n  ?t \\<in> T \\<Longrightarrow> length (chars_of_token ?t) \\<le> l\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t", "have \"length c \\<le> l\""], ["proof (prove)\nusing this:\n  ?t \\<in> T \\<Longrightarrow> length (chars_of_token ?t) \\<le> l\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t\n\ngoal (1 subgoal):\n 1. length c \\<le> l", "using chars_of_token_simp"], ["proof (prove)\nusing this:\n  ?t \\<in> T \\<Longrightarrow> length (chars_of_token ?t) \\<le> l\n  x = inc_item y (k + length c) \\<and>\n  y \\<in> bin (items_le k P) k \\<and>\n  (t, c) \\<in> T \\<and> next_symbol y = Some t\n  chars_of_token (?a, ?b) = ?b\n\ngoal (1 subgoal):\n 1. length c \\<le> l", "by auto"], ["proof (state)\nthis:\n  length c \\<le> l\n\ngoal (1 subgoal):\n 1. \\<exists>y t c.\n       x = inc_item y (k + length c) \\<and>\n       y \\<in> bin (items_le k P) k \\<and>\n       (t, c) \\<in> T \\<and> next_symbol y = Some t \\<Longrightarrow>\n    item_end x \\<le> k + l", "with item_end_x"], ["proof (chain)\npicking this:\n  item_end x = k + length c\n  length c \\<le> l", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = k + length c\n  length c \\<le> l\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k + l", "by arith"], ["proof (state)\nthis:\n  item_end x \\<le> k + l\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  item_end x \\<le> k + l\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "with x_dom'"], ["proof (chain)\npicking this:\n  x \\<in> Scan T k P\n  item_end x \\<le> k + l", "have \"x \\<in> items_le (k + l) (Scan T k P)\""], ["proof (prove)\nusing this:\n  x \\<in> Scan T k P\n  item_end x \\<le> k + l\n\ngoal (1 subgoal):\n 1. x \\<in> items_le (k + l) (Scan T k P)", "using items_le_def mem_Collect_eq"], ["proof (prove)\nusing this:\n  x \\<in> Scan T k P\n  item_end x \\<le> k + l\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> items_le (k + l) (Scan T k P)", "by blast"], ["proof (state)\nthis:\n  x \\<in> items_le (k + l) (Scan T k P)\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> Scan T k (items_le k P) \\<Longrightarrow>\n  ?x2 \\<in> items_le (k + l) (Scan T k P)\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> Scan T k (items_le k P) \\<Longrightarrow>\n  ?x2 \\<in> items_le (k + l) (Scan T k P)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> Scan T k (items_le k P) \\<Longrightarrow>\n  ?x2 \\<in> items_le (k + l) (Scan T k P)\n\ngoal (1 subgoal):\n 1. Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)", "by blast"], ["proof (state)\nthis:\n  Scan T k (items_le k P) \\<subseteq> items_le (k + l) (Scan T k P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Scan_mono_tokens:\n  \"P \\<subseteq> Q \\<Longrightarrow> Scan P k I \\<subseteq> Scan Q k I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<subseteq> Q \\<Longrightarrow> Scan P k I \\<subseteq> Scan Q k I", "by (auto simp add: Scan_def)"], ["", "theorem thmD14: \"k \\<le> length Doc \\<Longrightarrow> items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and> \\<T> k u = \\<Z> k u \n    \\<and> items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> length Doc \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "proof (induct k arbitrary: u rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x u.\n       \\<lbrakk>\\<And>y u.\n                   \\<lbrakk>y < x; y \\<le> length Doc\\<rbrakk>\n                   \\<Longrightarrow> items_le y (\\<J> y u) =\n                                     Gen (paths_le y (\\<P> y u)) \\<and>\n                                     \\<T> y u = \\<Z> y u \\<and>\n                                     items_le y (\\<I> y) =\n                                     Gen (paths_le y (\\<Q> y));\n        x \\<le> length Doc\\<rbrakk>\n       \\<Longrightarrow> items_le x (\\<J> x u) =\n                         Gen (paths_le x (\\<P> x u)) \\<and>\n                         \\<T> x u = \\<Z> x u \\<and>\n                         items_le x (\\<I> x) = Gen (paths_le x (\\<Q> x))", "case (less k)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < k; ?y \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?y (\\<J> ?y ?u) =\n                    Gen (paths_le ?y (\\<P> ?y ?u)) \\<and>\n                    \\<T> ?y ?u = \\<Z> ?y ?u \\<and>\n                    items_le ?y (\\<I> ?y) = Gen (paths_le ?y (\\<Q> ?y))\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. \\<And>x u.\n       \\<lbrakk>\\<And>y u.\n                   \\<lbrakk>y < x; y \\<le> length Doc\\<rbrakk>\n                   \\<Longrightarrow> items_le y (\\<J> y u) =\n                                     Gen (paths_le y (\\<P> y u)) \\<and>\n                                     \\<T> y u = \\<Z> y u \\<and>\n                                     items_le y (\\<I> y) =\n                                     Gen (paths_le y (\\<Q> y));\n        x \\<le> length Doc\\<rbrakk>\n       \\<Longrightarrow> items_le x (\\<J> x u) =\n                         Gen (paths_le x (\\<P> x u)) \\<and>\n                         \\<T> x u = \\<Z> x u \\<and>\n                         items_le x (\\<I> x) = Gen (paths_le x (\\<Q> x))", "have \"k = 0 \\<or> k \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = 0 \\<or> k \\<noteq> 0", "by arith"], ["proof (state)\nthis:\n  k = 0 \\<or> k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<And>x u.\n       \\<lbrakk>\\<And>y u.\n                   \\<lbrakk>y < x; y \\<le> length Doc\\<rbrakk>\n                   \\<Longrightarrow> items_le y (\\<J> y u) =\n                                     Gen (paths_le y (\\<P> y u)) \\<and>\n                                     \\<T> y u = \\<Z> y u \\<and>\n                                     items_le y (\\<I> y) =\n                                     Gen (paths_le y (\\<Q> y));\n        x \\<le> length Doc\\<rbrakk>\n       \\<Longrightarrow> items_le x (\\<J> x u) =\n                         Gen (paths_le x (\\<P> x u)) \\<and>\n                         \\<T> x u = \\<Z> x u \\<and>\n                         items_le x (\\<I> x) = Gen (paths_le x (\\<Q> x))", "then"], ["proof (chain)\npicking this:\n  k = 0 \\<or> k \\<noteq> 0", "show ?case"], ["proof (prove)\nusing this:\n  k = 0 \\<or> k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "proof (induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "case 1"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "have \\<J>_eq_\\<P>: \"items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "by (simp only: 1 thmD8 items_le_paths_le)"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n 2. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "using thmD13[OF \\<J>_eq_\\<P> less.prems]"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k ?u) = Gen (paths_le k (\\<P> k ?u)) \\<and>\n  \\<T> k ?u = \\<Z> k ?u \\<and>\n  items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n  \\<T> k u = \\<Z> k u \\<and> items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "case 2"], ["proof (state)\nthis:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "have \"\\<exists> k'. k = Suc k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k'. k = Suc k'", "using 2"], ["proof (prove)\nusing this:\n  k \\<noteq> 0\n\ngoal (1 subgoal):\n 1. \\<exists>k'. k = Suc k'", "by arith"], ["proof (state)\nthis:\n  \\<exists>k'. k = Suc k'\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "then"], ["proof (chain)\npicking this:\n  \\<exists>k'. k = Suc k'", "obtain k' where k': \"k = Suc k'\""], ["proof (prove)\nusing this:\n  \\<exists>k'. k = Suc k'\n\ngoal (1 subgoal):\n 1. (\\<And>k'. k = Suc k' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "have k'_less_k: \"k' < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < k", "using k'"], ["proof (prove)\nusing this:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k' < k", "by arith"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "have \"items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have simp_left: \"items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))", "using items_le_\\<pi>_swap k' wellformed_items_\\<I>"], ["proof (prove)\nusing this:\n  \\<lbrakk>wellformed_items ?I; ?T \\<subseteq> \\<X> ?k\\<rbrakk>\n  \\<Longrightarrow> items_le ?k (\\<pi> ?k ?T ?I) =\n                    \\<pi> ?k (empty_tokens ?T) (items_le ?k ?I)\n  k = Suc k'\n  wellformed_items (\\<I> ?k)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))", "by auto"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have simp_right: \"Gen (paths_le k (\\<P> k 0)) = natUnion (\\<lambda> v. Gen (paths_le k (\\<P> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k 0)) =\n    natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "by (simp add: k' paths_le_pointwise pointwise_Gen pointwise_natUnion_swap)"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k 0)) =\n  natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "{"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k 0)) =\n  natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix v :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have split_\\<J>: \"items_le k (\\<J> k' v) = items_le k' (\\<J> k' v) \\<union> items_eq k (\\<J> k' v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v) =\n    items_le k' (\\<J> k' v) \\<union> items_eq k (\\<J> k' v)", "using k'  items_le_split_via_eq"], ["proof (prove)\nusing this:\n  k = Suc k'\n  items_le (Suc ?k) ?J = items_le ?k ?J \\<union> items_eq (Suc ?k) ?J\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v) =\n    items_le k' (\\<J> k' v) \\<union> items_eq k (\\<J> k' v)", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k' v) =\n  items_le k' (\\<J> k' v) \\<union> items_eq k (\\<J> k' v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have sub1: \"items_le k' (\\<J> k' v) \\<subseteq> natUnion (\\<lambda> v. Gen (paths_le k (\\<P> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "have h: \"items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "(* automatically generated *)"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "have f1: \"items_le k' (Gen (\\<P> k' v)) \\<union> items_eq (Suc k') (Gen (\\<P> k' v)) = \n                  Gen (paths_le k (\\<P> k' v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k' (Gen (\\<P> k' v)) \\<union>\n    items_eq (Suc k') (Gen (\\<P> k' v)) =\n    Gen (paths_le k (\\<P> k' v))", "using LocalLexing.items_le_split_via_eq LocalLexing_axioms items_le_paths_le k'"], ["proof (prove)\nusing this:\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le (Suc ?k) ?J = items_le ?k ?J \\<union> items_eq (Suc ?k) ?J\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  items_le ?k (Gen ?P) = Gen (paths_le ?k ?P)\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. items_le k' (Gen (\\<P> k' v)) \\<union>\n    items_eq (Suc k') (Gen (\\<P> k' v)) =\n    Gen (paths_le k (\\<P> k' v))", "by blast"], ["proof (state)\nthis:\n  items_le k' (Gen (\\<P> k' v)) \\<union>\n  items_eq (Suc k') (Gen (\\<P> k' v)) =\n  Gen (paths_le k (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "have \"k' \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "by (metis (no_types) dual_order.trans k' less.prems lessI less_imp_le_nat)"], ["proof (state)\nthis:\n  k' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "then"], ["proof (chain)\npicking this:\n  k' \\<le> length Doc", "have \"items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))\""], ["proof (prove)\nusing this:\n  k' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))", "by (simp add: items_le_paths_le k' less.hyps)"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "then"], ["proof (chain)\npicking this:\n  items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))", "show ?thesis"], ["proof (prove)\nusing this:\n  items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "using f1"], ["proof (prove)\nusing this:\n  items_le k' (\\<J> k' v) = items_le k' (Gen (\\<P> k' v))\n  items_le k' (Gen (\\<P> k' v)) \\<union>\n  items_eq (Suc k') (Gen (\\<P> k' v)) =\n  Gen (paths_le k (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))", "by blast"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "have \"Gen (paths_le k (\\<P> k' v)) \\<subseteq> natUnion (\\<lambda> v. Gen (paths_le k (\\<P> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v))\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "using natUnion_superset"], ["proof (prove)\nusing this:\n  ?g ?i \\<subseteq> natUnion ?g\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v))\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "by fastforce"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "then"], ["proof (chain)\npicking this:\n  Gen (paths_le k (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "show ?thesis"], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "using h"], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n  items_le k' (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "by blast"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "{"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "assume x_dom: \"x \\<in> items_eq k (\\<J> k' v)\""], ["proof (state)\nthis:\n  x \\<in> items_eq k (\\<J> k' v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have x_in_\\<J>: \"x \\<in> \\<J> k' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k' v", "using x_dom items_eq_def"], ["proof (prove)\nusing this:\n  x \\<in> items_eq k (\\<J> k' v)\n  items_eq ?k ?I = {x \\<in> ?I. item_end x = ?k}\n\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k' v", "by auto"], ["proof (state)\nthis:\n  x \\<in> \\<J> k' v\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have item_end_x: \"item_end x = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x = k", "using x_dom items_eq_def"], ["proof (prove)\nusing this:\n  x \\<in> items_eq k (\\<J> k' v)\n  items_eq ?k ?I = {x \\<in> ?I. item_end x = ?k}\n\ngoal (1 subgoal):\n 1. item_end x = k", "by auto"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  item_end x = k", "have k'_bound: \"k' < item_end x\""], ["proof (prove)\nusing this:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. k' < item_end x", "using k'"], ["proof (prove)\nusing this:\n  item_end x = k\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k' < item_end x", "by arith"], ["proof (state)\nthis:\n  k' < item_end x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from produced_by_scan_step[OF x_in_\\<J> k'_bound]"], ["proof (chain)\npicking this:\n  produced_by_scan_step x k' v", "have \"produced_by_scan_step x k' v\""], ["proof (prove)\nusing this:\n  produced_by_scan_step x k' v\n\ngoal (1 subgoal):\n 1. produced_by_scan_step x k' v", "."], ["proof (state)\nthis:\n  produced_by_scan_step x k' v\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from iffD1[OF produced_by_scan_step_def this]"], ["proof (chain)\npicking this:\n  \\<exists>k'a u' y X.\n     indexle k'a u' k' v \\<and>\n     y \\<in> \\<J> k'a u' \\<and>\n     item_end y = k'a \\<and>\n     X \\<in> \\<T> k'a u' \\<and>\n     x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n     next_symbol y = Some (terminal_of_token X)", "obtain k'' v'' y X where scan_step:\n                \"indexle k'' v'' k' v \\<and> y \\<in> \\<J> k'' v'' \\<and> item_end y = k'' \\<and> X \\<in> \\<T> k'' v'' \\<and>\n                 x = inc_item y (k'' + length (chars_of_token X)) \\<and> \n                 next_symbol y = Some (terminal_of_token X)\""], ["proof (prove)\nusing this:\n  \\<exists>k'a u' y X.\n     indexle k'a u' k' v \\<and>\n     y \\<in> \\<J> k'a u' \\<and>\n     item_end y = k'a \\<and>\n     X \\<in> \\<T> k'a u' \\<and>\n     x = inc_item y (k'a + length (chars_of_token X)) \\<and>\n     next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. (\\<And>k'' v'' y X.\n        indexle k'' v'' k' v \\<and>\n        y \\<in> \\<J> k'' v'' \\<and>\n        item_end y = k'' \\<and>\n        X \\<in> \\<T> k'' v'' \\<and>\n        x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n        next_symbol y = Some (terminal_of_token X) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)", "have y_in_items_le: \"y \\<in> items_le k'' (\\<J> k'' v'')\""], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. y \\<in> items_le k'' (\\<J> k'' v'')", "using items_le_def LocalLexing_axioms le_refl mem_Collect_eq"], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  ?n \\<le> ?n\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. y \\<in> items_le k'' (\\<J> k'' v'')", "by blast"], ["proof (state)\nthis:\n  y \\<in> items_le k'' (\\<J> k'' v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have y_in_Gen: \"y \\<in> Gen(paths_le k'' (\\<P> k'' v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "(* automatically generated *)"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have f1: \"\\<And>n. k' < n \\<or> \\<not> k < n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n. k' < n \\<or> \\<not> k < n", "using Suc_lessD k'"], ["proof (prove)\nusing this:\n  Suc ?m < ?n \\<Longrightarrow> ?m < ?n\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. \\<And>n. k' < n \\<or> \\<not> k < n", "by blast"], ["proof (state)\nthis:\n  k' < ?n \\<or> \\<not> k < ?n\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have f2: \"k'' = k' \\<or> k'' < k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k'' = k' \\<or> k'' < k'", "using indexle_def indexlt_simp scan_step"], ["proof (prove)\nusing this:\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. k'' = k' \\<or> k'' < k'", "by force"], ["proof (state)\nthis:\n  k'' = k' \\<or> k'' < k'\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have f3: \"k' < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' < k", "using k'"], ["proof (prove)\nusing this:\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k' < k", "by blast"], ["proof (state)\nthis:\n  k' < k\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have f4: \"k' \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "using f1"], ["proof (prove)\nusing this:\n  k' < ?n \\<or> \\<not> k < ?n\n\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "by (meson less.prems less_Suc_eq_le)"], ["proof (state)\nthis:\n  k' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have \"k'' \\<le> length Doc \\<or> k' = k''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k'' \\<le> length Doc \\<or> k' = k''", "using f2 f1"], ["proof (prove)\nusing this:\n  k'' = k' \\<or> k'' < k'\n  k' < ?n \\<or> \\<not> k < ?n\n\ngoal (1 subgoal):\n 1. k'' \\<le> length Doc \\<or> k' = k''", "by (meson Suc_lessD less.prems less_Suc_eq_le less_trans_Suc)"], ["proof (state)\nthis:\n  k'' \\<le> length Doc \\<or> k' = k''\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "then"], ["proof (chain)\npicking this:\n  k'' \\<le> length Doc \\<or> k' = k''", "show ?thesis"], ["proof (prove)\nusing this:\n  k'' \\<le> length Doc \\<or> k' = k''\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "using f4 f3 f2 Suc_lessD y_in_items_le less.hyps less_trans_Suc"], ["proof (prove)\nusing this:\n  k'' \\<le> length Doc \\<or> k' = k''\n  k' \\<le> length Doc\n  k' < k\n  k'' = k' \\<or> k'' < k'\n  Suc ?m < ?n \\<Longrightarrow> ?m < ?n\n  y \\<in> items_le k'' (\\<J> k'' v'')\n  \\<lbrakk>?y < k; ?y \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?y (\\<J> ?y ?u) =\n                    Gen (paths_le ?y (\\<P> ?y ?u)) \\<and>\n                    \\<T> ?y ?u = \\<Z> ?y ?u \\<and>\n                    items_le ?y (\\<I> ?y) = Gen (paths_le ?y (\\<Q> ?y))\n  \\<lbrakk>?i < ?j; ?j < ?k\\<rbrakk> \\<Longrightarrow> Suc ?i < ?k\n\ngoal (1 subgoal):\n 1. y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "by blast"], ["proof (state)\nthis:\n  y \\<in> Gen (paths_le k'' (\\<P> k'' v''))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  y \\<in> Gen (paths_le k'' (\\<P> k'' v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  y \\<in> Gen (paths_le k'' (\\<P> k'' v''))", "have \"\\<exists> p. p \\<in> \\<P> k'' v'' \\<and> pvalid p y\""], ["proof (prove)\nusing this:\n  y \\<in> Gen (paths_le k'' (\\<P> k'' v''))\n\ngoal (1 subgoal):\n 1. \\<exists>p. p \\<in> \\<P> k'' v'' \\<and> pvalid p y", "by (meson Gen_implies_pvalid paths_le_is_filter rev_subsetD)"], ["proof (state)\nthis:\n  \\<exists>p. p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  \\<exists>p. p \\<in> \\<P> k'' v'' \\<and> pvalid p y", "obtain p where p: \"p \\<in> \\<P> k'' v'' \\<and> pvalid p y\""], ["proof (prove)\nusing this:\n  \\<exists>p. p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> \\<P> k'' v'' \\<and> pvalid p y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y", "have charslength_p: \"charslength p = k''\""], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. charslength p = k''", "using pvalid_item_end scan_step"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. charslength p = k''", "by auto"], ["proof (state)\nthis:\n  charslength p = k''\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have pvalid_p_y: \"pvalid p y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p y", "using p"], ["proof (prove)\nusing this:\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. pvalid p y", "by blast"], ["proof (state)\nthis:\n  pvalid p y\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"admissible (p@[(fst X, snd X)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p @ [(fst X, snd X)])", "apply (rule pvalid_next_terminal_admissible)"], ["proof (prove)\ngoal (3 subgoals):\n 1. pvalid p ?x\n 2. next_symbol ?x = Some (fst X)\n 3. is_terminal (fst X)", "apply (rule pvalid_p_y)"], ["proof (prove)\ngoal (2 subgoals):\n 1. next_symbol y = Some (fst X)\n 2. is_terminal (fst X)", "using scan_step"], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (2 subgoals):\n 1. next_symbol y = Some (fst X)\n 2. is_terminal (fst X)", "apply (simp add: terminal_of_token_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal (fst X)", "using scan_step"], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. is_terminal (fst X)", "by (metis TokensAt_subset_\\<X> \\<T>_subset_TokensAt \\<X>_are_terminals \n                  rev_subsetD terminal_of_token_def)"], ["proof (state)\nthis:\n  admissible (p @ [(fst X, snd X)])\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  admissible (p @ [(fst X, snd X)])", "have admissible_p_X: \"admissible (p@[X])\""], ["proof (prove)\nusing this:\n  admissible (p @ [(fst X, snd X)])\n\ngoal (1 subgoal):\n 1. admissible (p @ [X])", "by simp"], ["proof (state)\nthis:\n  admissible (p @ [X])\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have X_in_\\<Z>: \"X \\<in> \\<Z> k'' (Suc v'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> \\<Z> k'' (Suc v'')", "by (metis (no_types, lifting) Suc_lessD \\<Z>_subset_Suc \n                k'_bound dual_order.trans indexle_def indexlt_simp item_end_of_inc_item item_end_x \n                le_add1 le_neq_implies_less less.hyps less.prems not_less_eq scan_step subsetCE)"], ["proof (state)\nthis:\n  X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have pX_in_\\<P>_k''_v'': \"p@[X] \\<in> \\<P> k'' (Suc v'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<in> \\<P> k'' (Suc v'')", "apply (simp only: \\<P>.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<in> limit (Append (\\<Z> k'' (Suc v'')) k'') (\\<P> k'' v'')", "apply (rule limit_single_step)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<in> Append (\\<Z> k'' (Suc v'')) k'' (\\<P> k'' v'')", "apply (auto simp only: Append_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<notin> \\<P> k'' v'' \\<Longrightarrow>\n    \\<exists>pa t.\n       p @ [X] = pa @ [t] \\<and>\n       pa \\<in> by_length k'' (\\<P> k'' v'') \\<and>\n       t \\<in> \\<Z> k'' (Suc v'') \\<and> admissible (pa @ [t])", "apply (rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<notin> \\<P> k'' v'' \\<Longrightarrow>\n    \\<exists>t.\n       p @ [X] = p @ [t] \\<and>\n       p \\<in> by_length k'' (\\<P> k'' v'') \\<and>\n       t \\<in> \\<Z> k'' (Suc v'') \\<and> admissible (p @ [t])", "apply (rule_tac x=X in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<notin> \\<P> k'' v'' \\<Longrightarrow>\n    p @ [X] = p @ [X] \\<and>\n    p \\<in> by_length k'' (\\<P> k'' v'') \\<and>\n    X \\<in> \\<Z> k'' (Suc v'') \\<and> admissible (p @ [X])", "apply (simp only: admissible_p_X X_in_\\<Z>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p @ [X] \\<notin> \\<P> k'' v'' \\<Longrightarrow>\n    p @ [X] = p @ [X] \\<and>\n    p \\<in> by_length k'' (\\<P> k'' v'') \\<and> True \\<and> True", "using charslength_p p"], ["proof (prove)\nusing this:\n  charslength p = k''\n  p \\<in> \\<P> k'' v'' \\<and> pvalid p y\n\ngoal (1 subgoal):\n 1. p @ [X] \\<notin> \\<P> k'' v'' \\<Longrightarrow>\n    p @ [X] = p @ [X] \\<and>\n    p \\<in> by_length k'' (\\<P> k'' v'') \\<and> True \\<and> True", "by auto"], ["proof (state)\nthis:\n  p @ [X] \\<in> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"indexle k'' v'' k' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. indexle k'' v'' k' v", "using scan_step"], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. indexle k'' v'' k' v", "by simp"], ["proof (state)\nthis:\n  indexle k'' v'' k' v\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  indexle k'' v'' k' v", "have \"indexle k'' (Suc v'') k' (Suc v)\""], ["proof (prove)\nusing this:\n  indexle k'' v'' k' v\n\ngoal (1 subgoal):\n 1. indexle k'' (Suc v'') k' (Suc v)", "by (simp add: indexle_def indexlt_simp)"], ["proof (state)\nthis:\n  indexle k'' (Suc v'') k' (Suc v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  indexle k'' (Suc v'') k' (Suc v)", "have \"\\<P> k'' (Suc v'') \\<subseteq> \\<P> k' (Suc v)\""], ["proof (prove)\nusing this:\n  indexle k'' (Suc v'') k' (Suc v)\n\ngoal (1 subgoal):\n 1. \\<P> k'' (Suc v'') \\<subseteq> \\<P> k' (Suc v)", "by (metis indexle_def indexlt_simp less_or_eq_imp_le subset_\\<P>)"], ["proof (state)\nthis:\n  \\<P> k'' (Suc v'') \\<subseteq> \\<P> k' (Suc v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "with pX_in_\\<P>_k''_v''"], ["proof (chain)\npicking this:\n  p @ [X] \\<in> \\<P> k'' (Suc v'')\n  \\<P> k'' (Suc v'') \\<subseteq> \\<P> k' (Suc v)", "have pX_in_\\<P>_k': \"p@[X] \\<in> \\<P> k' (Suc v)\""], ["proof (prove)\nusing this:\n  p @ [X] \\<in> \\<P> k'' (Suc v'')\n  \\<P> k'' (Suc v'') \\<subseteq> \\<P> k' (Suc v)\n\ngoal (1 subgoal):\n 1. p @ [X] \\<in> \\<P> k' (Suc v)", "by blast"], ["proof (state)\nthis:\n  p @ [X] \\<in> \\<P> k' (Suc v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"charslength (p@[X]) = k'' +  length (chars_of_token X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = k'' + length (chars_of_token X)", "using charslength_p"], ["proof (prove)\nusing this:\n  charslength p = k''\n\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = k'' + length (chars_of_token X)", "by auto"], ["proof (state)\nthis:\n  charslength (p @ [X]) = k'' + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  charslength (p @ [X]) = k'' + length (chars_of_token X)", "have \"charslength (p@[X]) = item_end x\""], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = k'' + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = item_end x", "using scan_step"], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = k'' + length (chars_of_token X)\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = item_end x", "by simp"], ["proof (state)\nthis:\n  charslength (p @ [X]) = item_end x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  charslength (p @ [X]) = item_end x", "have charslength_p_X: \"charslength (p@[X]) = k\""], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = item_end x\n\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = k", "using item_end_x"], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = item_end x\n  item_end x = k\n\ngoal (1 subgoal):\n 1. charslength (p @ [X]) = k", "by simp"], ["proof (state)\nthis:\n  charslength (p @ [X]) = k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  charslength (p @ [X]) = k", "have pX_dom: \"p@[X] \\<in> paths_le k (\\<P> k' (Suc v))\""], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = k\n\ngoal (1 subgoal):\n 1. p @ [X] \\<in> paths_le k (\\<P> k' (Suc v))", "using lessI less_Suc_eq_le mem_Collect_eq pX_in_\\<P>_k' paths_le_def"], ["proof (prove)\nusing this:\n  charslength (p @ [X]) = k\n  ?n < Suc ?n\n  (?m < Suc ?n) = (?m \\<le> ?n)\n  (?a \\<in> Collect ?P) = ?P ?a\n  p @ [X] \\<in> \\<P> k' (Suc v)\n  paths_le ?k ?P = {p \\<in> ?P. charslength p \\<le> ?k}\n\ngoal (1 subgoal):\n 1. p @ [X] \\<in> paths_le k (\\<P> k' (Suc v))", "by auto"], ["proof (state)\nthis:\n  p @ [X] \\<in> paths_le k (\\<P> k' (Suc v))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "using item_end_x less.prems scan_step wellformed_inc_item wellformed_items_\\<J> \n                  wellformed_items_def"], ["proof (prove)\nusing this:\n  item_end x = k\n  k \\<le> length Doc\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n  \\<lbrakk>wellformed_item ?x; next_symbol ?x = Some ?s;\n   ?k \\<le> length Doc; item_end ?x \\<le> ?k\\<rbrakk>\n  \\<Longrightarrow> wellformed_item (inc_item ?x ?k)\n  wellformed_items (\\<J> ?k ?u)\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by auto"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have wellformed_p_X: \"wellformed_tokens (p@[X])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_tokens (p @ [X])", "using \\<P>_wellformed pX_in_\\<P>_k''_v''"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<P> ?k ?u \\<Longrightarrow> wellformed_tokens ?p\n  p @ [X] \\<in> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. wellformed_tokens (p @ [X])", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens (p @ [X])\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from iffD1[OF pvalid_def pvalid_p_y]"], ["proof (chain)\npicking this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens p \\<and>\n     wellformed_item y \\<and>\n     u \\<le> length p \\<and>\n     charslength p = item_end y \\<and>\n     charslength (take u p) = item_origin y \\<and>\n     is_derivation\n      (terminals (take u p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> y) (terminals (drop u p))", "obtain r \\<gamma> where r_\\<gamma>:\n                \"wellformed_tokens p \\<and>\n                 wellformed_item y \\<and>\n                 r \\<le> length p \\<and>\n                 charslength p = item_end y \\<and>\n                 charslength (take r p) = item_origin y \\<and>\n                 is_derivation (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n                 derives (item_\\<alpha> y) (terminals (drop r p))\""], ["proof (prove)\nusing this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens p \\<and>\n     wellformed_item y \\<and>\n     u \\<le> length p \\<and>\n     charslength p = item_end y \\<and>\n     charslength (take u p) = item_origin y \\<and>\n     is_derivation\n      (terminals (take u p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> y) (terminals (drop u p))\n\ngoal (1 subgoal):\n 1. (\\<And>r \\<gamma>.\n        wellformed_tokens p \\<and>\n        wellformed_item y \\<and>\n        r \\<le> length p \\<and>\n        charslength p = item_end y \\<and>\n        charslength (take r p) = item_origin y \\<and>\n        is_derivation\n         (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> y) (terminals (drop r p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  r \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take r p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop r p))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have r_le_p: \"r \\<le> length p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length p", "by (simp add: r_\\<gamma>)"], ["proof (state)\nthis:\n  r \\<le> length p\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have item_nonterminal_x: \"item_nonterminal x = item_nonterminal y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal x = item_nonterminal y", "by (simp add: scan_step)"], ["proof (state)\nthis:\n  item_nonterminal x = item_nonterminal y\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have item_\\<alpha>_x: \"item_\\<alpha> x = (item_\\<alpha> y) @ [terminal_of_token X]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<alpha> x = item_\\<alpha> y @ [terminal_of_token X]", "by (simp add: item_\\<alpha>_of_inc_item r_\\<gamma> scan_step)"], ["proof (state)\nthis:\n  item_\\<alpha> x = item_\\<alpha> y @ [terminal_of_token X]\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have pvalid_x: \"pvalid (p@[X]) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid (p @ [X]) x", "apply (auto simp add: pvalid_def wellformed_x wellformed_p_X)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u\\<le>Suc (length p).\n       length (chars p) + length (chars_of_token X) = item_end x \\<and>\n       length (chars (take u p)) +\n       length (chars (take (u - length p) [X])) =\n       item_origin x \\<and>\n       (\\<exists>\\<gamma>.\n           is_derivation\n            (take u (terminals p) @\n             take (u - length p) [terminal_of_token X] @\n             item_nonterminal x # \\<gamma>)) \\<and>\n       derives (item_\\<alpha> x)\n        (drop u (terminals p) @ drop (u - length p) [terminal_of_token X])", "apply (rule_tac x=r in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> Suc (length p) \\<and>\n    length (chars p) + length (chars_of_token X) = item_end x \\<and>\n    length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x \\<and>\n    (\\<exists>\\<gamma>.\n        is_derivation\n         (take r (terminals p) @\n          take (r - length p) [terminal_of_token X] @\n          item_nonterminal x # \\<gamma>)) \\<and>\n    derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply auto"], ["proof (prove)\ngoal (5 subgoals):\n 1. r \\<le> Suc (length p)\n 2. length (chars p) + length (chars_of_token X) = item_end x\n 3. length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x\n 4. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 5. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply (simp add: le_SucI r_\\<gamma>)"], ["proof (prove)\ngoal (4 subgoals):\n 1. length (chars p) + length (chars_of_token X) = item_end x\n 2. length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x\n 3. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 4. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "using r_\\<gamma> scan_step"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  r \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take r p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop r p))\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (4 subgoals):\n 1. length (chars p) + length (chars_of_token X) = item_end x\n 2. length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x\n 3. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 4. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x\n 2. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 3. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "using r_\\<gamma> scan_step"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  r \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take r p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop r p))\n  indexle k'' v'' k' v \\<and>\n  y \\<in> \\<J> k'' v'' \\<and>\n  item_end y = k'' \\<and>\n  X \\<in> \\<T> k'' v'' \\<and>\n  x = inc_item y (k'' + length (chars_of_token X)) \\<and>\n  next_symbol y = Some (terminal_of_token X)\n\ngoal (3 subgoals):\n 1. length (chars (take r p)) + length (chars (take (r - length p) [X])) =\n    item_origin x\n 2. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 3. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<exists>\\<gamma>.\n       is_derivation\n        (take r (terminals p) @\n         take (r - length p) [terminal_of_token X] @\n         item_nonterminal x # \\<gamma>)\n 2. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply (rule_tac x=\\<gamma> in exI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation\n     (take r (terminals p) @\n      take (r - length p) [terminal_of_token X] @\n      item_nonterminal x # \\<gamma>)\n 2. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply (simp add: r_le_p item_nonterminal_x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_derivation (take r (terminals p) @ item_nonterminal y # \\<gamma>)\n 2. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "using r_\\<gamma>"], ["proof (prove)\nusing this:\n  wellformed_tokens p \\<and>\n  wellformed_item y \\<and>\n  r \\<le> length p \\<and>\n  charslength p = item_end y \\<and>\n  charslength (take r p) = item_origin y \\<and>\n  is_derivation\n   (terminals (take r p) @ [item_nonterminal y] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> y) (terminals (drop r p))\n\ngoal (2 subgoals):\n 1. is_derivation (take r (terminals p) @ item_nonterminal y # \\<gamma>)\n 2. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> x)\n     (drop r (terminals p) @ drop (r - length p) [terminal_of_token X])", "apply (simp add: r_le_p item_\\<alpha>_x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. derives (item_\\<alpha> y @ [terminal_of_token X])\n     (drop r (terminals p) @ [terminal_of_token X])", "by (metis terminals_singleton append_Nil2 \n                  derives_implies_leftderives derives_is_sentence is_sentence_concat \n                  is_sentence_cons is_symbol_def is_word_append is_word_cons is_word_terminals \n                  is_word_terminals_drop leftderives_implies_derives leftderives_padback \n                  leftderives_refl r_\\<gamma> terminals_append terminals_drop wellformed_p_X)"], ["proof (state)\nthis:\n  pvalid (p @ [X]) x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  pvalid (p @ [X]) x", "have \"x \\<in> Gen (paths_le k (\\<P> k' (Suc v)))\""], ["proof (prove)\nusing this:\n  pvalid (p @ [X]) x\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k (\\<P> k' (Suc v)))", "using pX_dom Gen_def \n                LocalLexing_axioms mem_Collect_eq"], ["proof (prove)\nusing this:\n  pvalid (p @ [X]) x\n  p @ [X] \\<in> paths_le k (\\<P> k' (Suc v))\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  (?a \\<in> Collect ?P) = ?P ?a\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k (\\<P> k' (Suc v)))", "by auto"], ["proof (state)\nthis:\n  x \\<in> Gen (paths_le k (\\<P> k' (Suc v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> items_eq k (\\<J> k' v) \\<Longrightarrow>\n  ?x2 \\<in> Gen (paths_le k (\\<P> k' (Suc v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> items_eq k (\\<J> k' v) \\<Longrightarrow>\n  ?x2 \\<in> Gen (paths_le k (\\<P> k' (Suc v)))", "have sub2: \"items_eq k (\\<J> k' v) \\<subseteq> natUnion (\\<lambda> v. Gen (paths_le k (\\<P> k' v)))\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> items_eq k (\\<J> k' v) \\<Longrightarrow>\n  ?x2 \\<in> Gen (paths_le k (\\<P> k' (Suc v)))\n\ngoal (1 subgoal):\n 1. items_eq k (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "by (meson dual_order.trans natUnion_superset subsetI)"], ["proof (state)\nthis:\n  items_eq k (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have suffices3: \"items_le k (\\<J> k' v) \\<subseteq> natUnion (\\<lambda> v. Gen (paths_le k (\\<P> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "using split_\\<J> sub1 sub2"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k' v) =\n  items_le k' (\\<J> k' v) \\<union> items_eq k (\\<J> k' v)\n  items_le k' (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n  items_eq k (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v)\n    \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"items_le k (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "using suffices3 simp_right"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k' v)\n  \\<subseteq> natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n  Gen (paths_le k (\\<P> k 0)) =\n  natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k' v) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "}"], ["proof (state)\nthis:\n  items_le k (\\<J> k' ?v2) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "note suffices2 = this"], ["proof (state)\nthis:\n  items_le k (\\<J> k' ?v2) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have items_le_natUnion_swap: \"items_le k (\\<I> k') = natUnion(\\<lambda> v. items_le k (\\<J> k' v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))", "by (simp add: items_le_pointwise pointwise_natUnion_swap)"], ["proof (state)\nthis:\n  items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))", "have suffices1: \"items_le k (\\<I> k') \\<subseteq> Gen (paths_le k (\\<P> k 0))\""], ["proof (prove)\nusing this:\n  items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n\ngoal (1 subgoal):\n 1. items_le k (\\<I> k') \\<subseteq> Gen (paths_le k (\\<P> k 0))", "using suffices2 natUnion_upperbound"], ["proof (prove)\nusing this:\n  items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n  items_le k (\\<J> k' ?v2) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n  (\\<And>n. ?f n \\<subseteq> ?G) \\<Longrightarrow>\n  natUnion ?f \\<subseteq> ?G\n\ngoal (1 subgoal):\n 1. items_le k (\\<I> k') \\<subseteq> Gen (paths_le k (\\<P> k 0))", "by metis"], ["proof (state)\nthis:\n  items_le k (\\<I> k') \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have sub_lemma: \"items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "have \"items_le k (\\<J> k 0) \\<subseteq> Gen (\\<P> k 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) \\<subseteq> Gen (\\<P> k 0)", "apply (subst simp_left)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k {} (items_le k (\\<I> k')) \\<subseteq> Gen (\\<P> k 0)", "apply (rule thmD5)"], ["proof (prove)\ngoal (3 subgoals):\n 1. items_le k (\\<I> k') \\<subseteq> Gen (\\<P> k 0)\n 2. k \\<le> length Doc\n 3. {} \\<subseteq> \\<Z> k 0", "apply (auto simp only: less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> items_le k (\\<I> k') \\<Longrightarrow> x \\<in> Gen (\\<P> k 0)", "using suffices1 items_le_is_filter items_le_paths_le subsetCE"], ["proof (prove)\nusing this:\n  items_le k (\\<I> k') \\<subseteq> Gen (paths_le k (\\<P> k 0))\n  items_le ?k ?I \\<subseteq> ?I\n  items_le ?k (Gen ?P) = Gen (paths_le ?k ?P)\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> items_le k (\\<I> k') \\<Longrightarrow> x \\<in> Gen (\\<P> k 0)", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) \\<subseteq> Gen (\\<P> k 0)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  items_le k (\\<J> k 0) \\<subseteq> Gen (\\<P> k 0)", "show ?thesis"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k 0) \\<subseteq> Gen (\\<P> k 0)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "by (simp add: items_le_idempotent remove_paths_le_in_subset_Gen)"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have eq1: \"\\<pi> k {} (items_le k (\\<I> k')) = \\<pi> k {} (items_le k (natUnion (\\<J> k')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k {} (items_le k (\\<I> k')) =\n    \\<pi> k {} (items_le k (natUnion (\\<J> k')))", "by simp"], ["proof (state)\nthis:\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))", "have eq2: \"\\<pi> k {} (items_le k (natUnion (\\<J> k'))) = \n            \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\nusing this:\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))\n\ngoal (1 subgoal):\n 1. \\<pi> k {} (items_le k (natUnion (\\<J> k'))) =\n    \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "using items_le_natUnion_swap"], ["proof (prove)\nusing this:\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))\n  items_le k (\\<I> k') = natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n\ngoal (1 subgoal):\n 1. \\<pi> k {} (items_le k (natUnion (\\<J> k'))) =\n    \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by auto"], ["proof (state)\nthis:\n  \\<pi> k {} (items_le k (natUnion (\\<J> k'))) =\n  \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from simp_left eq1 eq2"], ["proof (chain)\npicking this:\n  items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))\n  \\<pi> k {} (items_le k (natUnion (\\<J> k'))) =\n  \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "have simp_left': \"items_le k (\\<J> k 0) = \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\nusing this:\n  items_le k (\\<J> k 0) = \\<pi> k {} (items_le k (\\<I> k'))\n  \\<pi> k {} (items_le k (\\<I> k')) =\n  \\<pi> k {} (items_le k (natUnion (\\<J> k')))\n  \\<pi> k {} (items_le k (natUnion (\\<J> k'))) =\n  \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) =\n    \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by metis"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) =\n  \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "{"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) =\n  \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix v :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix q :: \"token list\""], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "assume q_dom: \"q \\<in> paths_eq k (\\<P> k' v)\""], ["proof (state)\nthis:\n  q \\<in> paths_eq k (\\<P> k' v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "assume pvalid_q_x: \"pvalid q x\""], ["proof (state)\nthis:\n  pvalid q x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have q_in_\\<P>: \"q \\<in> \\<P> k' v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k' v", "using q_dom paths_eq_def"], ["proof (prove)\nusing this:\n  q \\<in> paths_eq k (\\<P> k' v)\n  paths_eq ?k ?P = {p \\<in> ?P. charslength p = ?k}\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k' v", "by auto"], ["proof (state)\nthis:\n  q \\<in> \\<P> k' v\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have charslength_q: \"charslength q = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength q = k", "using q_dom paths_eq_def"], ["proof (prove)\nusing this:\n  q \\<in> paths_eq k (\\<P> k' v)\n  paths_eq ?k ?P = {p \\<in> ?P. charslength p = ?k}\n\ngoal (1 subgoal):\n 1. charslength q = k", "by auto"], ["proof (state)\nthis:\n  charslength q = k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "with k'_less_k"], ["proof (chain)\npicking this:\n  k' < k\n  charslength q = k", "have q_nonempty: \"q \\<noteq> []\""], ["proof (prove)\nusing this:\n  k' < k\n  charslength q = k\n\ngoal (1 subgoal):\n 1. q \\<noteq> []", "using \"2.hyps\" chars.simps(1) charslength.simps list.size(3)"], ["proof (prove)\nusing this:\n  k' < k\n  charslength q = k\n  k \\<noteq> 0\n  chars [] = []\n  charslength ?cs = length (chars ?cs)\n  length [] = 0\n\ngoal (1 subgoal):\n 1. q \\<noteq> []", "by auto"], ["proof (state)\nthis:\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  q \\<noteq> []", "have \"\\<exists> p X. q = p @ [X]\""], ["proof (prove)\nusing this:\n  q \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>p X. q = p @ [X]", "by (metis append_butlast_last_id)"], ["proof (state)\nthis:\n  \\<exists>p X. q = p @ [X]\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  \\<exists>p X. q = p @ [X]", "obtain p X where pX: \"q = p @ [X]\""], ["proof (prove)\nusing this:\n  \\<exists>p X. q = p @ [X]\n\ngoal (1 subgoal):\n 1. (\\<And>p X. q = p @ [X] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  q = p @ [X]\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from last_step_of_path[OF q_in_\\<P> pX]"], ["proof (chain)\npicking this:\n  \\<exists>k'a u'.\n     indexlt k'a u' k' v \\<and>\n     q \\<in> \\<P> k'a (Suc u') \\<and>\n     charslength p = k'a \\<and> X \\<in> \\<Z> k'a (Suc u')", "obtain k'' v'' where k'':\n              \"indexlt k'' v'' k' v \\<and> q \\<in> \\<P> k'' (Suc v'') \\<and> charslength p = k'' \\<and> \n               X \\<in> \\<Z> k'' (Suc v'')\""], ["proof (prove)\nusing this:\n  \\<exists>k'a u'.\n     indexlt k'a u' k' v \\<and>\n     q \\<in> \\<P> k'a (Suc u') \\<and>\n     charslength p = k'a \\<and> X \\<in> \\<Z> k'a (Suc u')\n\ngoal (1 subgoal):\n 1. (\\<And>k'' v''.\n        indexlt k'' v'' k' v \\<and>\n        q \\<in> \\<P> k'' (Suc v'') \\<and>\n        charslength p = k'' \\<and>\n        X \\<in> \\<Z> k'' (Suc v'') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h1: \"p \\<in> \\<PP>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> \\<PP>", "by (metis (no_types, lifting) LocalLexing.\\<PP>_covers_\\<P> LocalLexing_axioms \n                append_Nil2 is_prefix_cancel is_prefix_empty pX prefixes_are_paths q_in_\\<P> subsetCE)"], ["proof (state)\nthis:\n  p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h2: \"charslength p = k''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p = k''", "using k''"], ["proof (prove)\nusing this:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. charslength p = k''", "by blast"], ["proof (state)\nthis:\n  charslength p = k''\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "obtain T where T: \"T = {X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T. T = {X} \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  T = {X}\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h3: \"X \\<in> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> T", "using T"], ["proof (prove)\nusing this:\n  T = {X}\n\ngoal (1 subgoal):\n 1. X \\<in> T", "by blast"], ["proof (state)\nthis:\n  X \\<in> T\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h4: \"T \\<subseteq> \\<X> k''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<X> k''", "using \\<Z>_subset_\\<X> T k''"], ["proof (prove)\nusing this:\n  \\<Z> ?k ?n \\<subseteq> \\<X> ?k\n  T = {X}\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<X> k''", "by blast"], ["proof (state)\nthis:\n  T \\<subseteq> \\<X> k''\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "obtain N where N: \"N = item_nonterminal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>N.\n        N = item_nonterminal x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  N = item_nonterminal x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "obtain \\<alpha> where \\<alpha>: \"\\<alpha> = item_\\<alpha> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha>.\n        \\<alpha> = item_\\<alpha> x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<alpha> = item_\\<alpha> x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "obtain \\<beta> where \\<beta>: \"\\<beta> = item_\\<beta> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<beta>.\n        \\<beta> = item_\\<beta> x \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<beta> = item_\\<beta> x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have wellformed_x: \"wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item x", "using pvalid_def pvalid_q_x"], ["proof (prove)\nusing this:\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  pvalid q x\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by blast"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  wellformed_item x", "have h5: \"(N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\""], ["proof (prove)\nusing this:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>", "using N \\<alpha> \\<beta> item_nonterminal_def item_rhs_def item_rhs_split prod.collapse \n                wellformed_item_def"], ["proof (prove)\nusing this:\n  wellformed_item x\n  N = item_nonterminal x\n  \\<alpha> = item_\\<alpha> x\n  \\<beta> = item_\\<beta> x\n  item_nonterminal ?x = fst (item_rule ?x)\n  item_rhs ?x = snd (item_rule ?x)\n  item_rhs ?x = item_\\<alpha> ?x @ item_\\<beta> ?x\n  (fst ?prod, snd ?prod) = ?prod\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (1 subgoal):\n 1. (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>", "by auto"], ["proof (state)\nthis:\n  (N, \\<alpha> @ \\<beta>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have pvalid_left_q_x: \"pvalid_left q x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid_left q x", "using pvalid_q_x"], ["proof (prove)\nusing this:\n  pvalid q x\n\ngoal (1 subgoal):\n 1. pvalid_left q x", "by (simp add: pvalid_left)"], ["proof (state)\nthis:\n  pvalid_left q x\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from iffD1[OF pvalid_left_def pvalid_left_q_x]"], ["proof (chain)\npicking this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens q \\<and>\n     wellformed_item x \\<and>\n     u \\<le> length q \\<and>\n     charslength q = item_end x \\<and>\n     charslength (take u q) = item_origin x \\<and>\n     is_leftderivation\n      (terminals (take u q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     leftderives (item_\\<alpha> x) (terminals (drop u q))", "obtain r \\<gamma> where r_\\<gamma>: \n              \"wellformed_tokens q \\<and>\n               wellformed_item x \\<and>\n               r \\<le> length q \\<and>\n               charslength q = item_end x \\<and>\n               charslength (take r q) = item_origin x \\<and>\n               is_leftderivation (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n               leftderives (item_\\<alpha> x) (terminals (drop r q))\""], ["proof (prove)\nusing this:\n  \\<exists>u \\<gamma>.\n     wellformed_tokens q \\<and>\n     wellformed_item x \\<and>\n     u \\<le> length q \\<and>\n     charslength q = item_end x \\<and>\n     charslength (take u q) = item_origin x \\<and>\n     is_leftderivation\n      (terminals (take u q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     leftderives (item_\\<alpha> x) (terminals (drop u q))\n\ngoal (1 subgoal):\n 1. (\\<And>r \\<gamma>.\n        wellformed_tokens q \\<and>\n        wellformed_item x \\<and>\n        r \\<le> length q \\<and>\n        charslength q = item_end x \\<and>\n        charslength (take r q) = item_origin x \\<and>\n        is_leftderivation\n         (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n        leftderives (item_\\<alpha> x)\n         (terminals (drop r q)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h6: \"r \\<le> length q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<le> length q", "using r_\\<gamma>"], ["proof (prove)\nusing this:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n\ngoal (1 subgoal):\n 1. r \\<le> length q", "by blast"], ["proof (state)\nthis:\n  r \\<le> length q\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h7: \"leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)", "using r_\\<gamma> N is_leftderivation_def"], ["proof (prove)\nusing this:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n  N = item_nonterminal x\n  is_leftderivation ?u = leftderives [\\<SS>] ?u\n\ngoal (1 subgoal):\n 1. leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)", "by blast"], ["proof (state)\nthis:\n  leftderives [\\<SS>] (terminals (take r q) @ [N] @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h8: \"leftderives \\<alpha> (terminals (drop r q))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r q))", "using r_\\<gamma> \\<alpha>"], ["proof (prove)\nusing this:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n  \\<alpha> = item_\\<alpha> x\n\ngoal (1 subgoal):\n 1. leftderives \\<alpha> (terminals (drop r q))", "by metis"], ["proof (state)\nthis:\n  leftderives \\<alpha> (terminals (drop r q))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h9: \"k = k'' + length (chars_of_token X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k = k'' + length (chars_of_token X)", "using r_\\<gamma>"], ["proof (prove)\nusing this:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n\ngoal (1 subgoal):\n 1. k = k'' + length (chars_of_token X)", "using charslength_q h2 pX"], ["proof (prove)\nusing this:\n  wellformed_tokens q \\<and>\n  wellformed_item x \\<and>\n  r \\<le> length q \\<and>\n  charslength q = item_end x \\<and>\n  charslength (take r q) = item_origin x \\<and>\n  is_leftderivation\n   (terminals (take r q) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  leftderives (item_\\<alpha> x) (terminals (drop r q))\n  charslength q = k\n  charslength p = k''\n  q = p @ [X]\n\ngoal (1 subgoal):\n 1. k = k'' + length (chars_of_token X)", "by auto"], ["proof (state)\nthis:\n  k = k'' + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have h10: \"x = Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x =\n    Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q))\n     k", "by (metis N \\<alpha> \\<beta> charslength_q item.collapse item_dot_is_\\<alpha>_length item_nonterminal_def \n                item_rhs_def item_rhs_split prod.collapse r_\\<gamma>)"], ["proof (state)\nthis:\n  x =\n  Item (N, \\<alpha> @ \\<beta>) (length \\<alpha>) (charslength (take r q)) k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from thmD11[OF h1 h2 h3 h4 pX h5 h6 h7 h8 h9 h10]"], ["proof (chain)\npicking this:\n  ?I =\n  items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p)))) \\<Longrightarrow>\n  x \\<in> ?I", "have \"x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))\""], ["proof (prove)\nusing this:\n  ?I =\n  items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p)))) \\<Longrightarrow>\n  x \\<in> ?I\n\ngoal (1 subgoal):\n 1. x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))", "by blast"], ["proof (state)\nthis:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))", "have x_in: \"x \\<in> \\<pi> k {} (Scan T k'' (Gen (Prefixes p)))\""], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (Scan T k'' (Gen (Prefixes p)))", "using items_le_is_filter"], ["proof (prove)\nusing this:\n  x \\<in> items_le k (\\<pi> k {} (Scan T k'' (Gen (Prefixes p))))\n  items_le ?k ?I \\<subseteq> ?I\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (Scan T k'' (Gen (Prefixes p)))", "by blast"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k {} (Scan T k'' (Gen (Prefixes p)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset1: \"Prefixes p \\<subseteq> Prefixes q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> Prefixes q", "apply (rule is_prefix_Prefixes_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix p q", "by (simp add: pX is_prefix_def)"], ["proof (state)\nthis:\n  Prefixes p \\<subseteq> Prefixes q\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset2: \"Prefixes q \\<subseteq> \\<P> k'' (Suc v'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Prefixes q \\<subseteq> \\<P> k'' (Suc v'')", "apply (rule Prefixes_subset_\\<P>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k'' (Suc v'')", "using k''"], ["proof (prove)\nusing this:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. q \\<in> \\<P> k'' (Suc v'')", "by blast"], ["proof (state)\nthis:\n  Prefixes q \\<subseteq> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from subset1 subset2"], ["proof (chain)\npicking this:\n  Prefixes p \\<subseteq> Prefixes q\n  Prefixes q \\<subseteq> \\<P> k'' (Suc v'')", "have \"Prefixes p \\<subseteq> \\<P> k'' (Suc v'')\""], ["proof (prove)\nusing this:\n  Prefixes p \\<subseteq> Prefixes q\n  Prefixes q \\<subseteq> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> \\<P> k'' (Suc v'')", "by blast"], ["proof (state)\nthis:\n  Prefixes p \\<subseteq> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  Prefixes p \\<subseteq> \\<P> k'' (Suc v'')", "have \"Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))\""], ["proof (prove)\nusing this:\n  Prefixes p \\<subseteq> \\<P> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))", "using k'' Prefixes_subset_paths_le"], ["proof (prove)\nusing this:\n  Prefixes p \\<subseteq> \\<P> k'' (Suc v'')\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n  Prefixes ?p \\<subseteq> ?P \\<Longrightarrow>\n  Prefixes ?p \\<subseteq> paths_le (charslength ?p) ?P\n\ngoal (1 subgoal):\n 1. Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))", "by blast"], ["proof (state)\nthis:\n  Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))", "have subset3: \"Gen (Prefixes p) \\<subseteq> Gen (paths_le k'' (\\<P> k'' (Suc v'')))\""], ["proof (prove)\nusing this:\n  Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))\n\ngoal (1 subgoal):\n 1. Gen (Prefixes p) \\<subseteq> Gen (paths_le k'' (\\<P> k'' (Suc v'')))", "using Gen_def LocalLexing_axioms"], ["proof (prove)\nusing this:\n  Prefixes p \\<subseteq> paths_le k'' (\\<P> k'' (Suc v''))\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n\ngoal (1 subgoal):\n 1. Gen (Prefixes p) \\<subseteq> Gen (paths_le k'' (\\<P> k'' (Suc v'')))", "by auto"], ["proof (state)\nthis:\n  Gen (Prefixes p) \\<subseteq> Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have k''_less_k: \"k'' < k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k'' < k", "using k'' k'"], ["proof (prove)\nusing this:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. k'' < k", "using indexlt_simp less_Suc_eq"], ["proof (prove)\nusing this:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n  k = Suc k'\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n  (?m < Suc ?n) = (?m < ?n \\<or> ?m = ?n)\n\ngoal (1 subgoal):\n 1. k'' < k", "by auto"], ["proof (state)\nthis:\n  k'' < k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  k'' < k", "have k''_Doc_bound: \"k'' \\<le> length Doc\""], ["proof (prove)\nusing this:\n  k'' < k\n\ngoal (1 subgoal):\n 1. k'' \\<le> length Doc", "using less"], ["proof (prove)\nusing this:\n  k'' < k\n  \\<lbrakk>?y < k; ?y \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?y (\\<J> ?y ?u) =\n                    Gen (paths_le ?y (\\<P> ?y ?u)) \\<and>\n                    \\<T> ?y ?u = \\<Z> ?y ?u \\<and>\n                    items_le ?y (\\<I> ?y) = Gen (paths_le ?y (\\<Q> ?y))\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. k'' \\<le> length Doc", "by auto"], ["proof (state)\nthis:\n  k'' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from less(1)[OF k''_less_k k''_Doc_bound, of \"Suc v''\"]"], ["proof (chain)\npicking this:\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v''))) \\<and>\n  \\<T> k'' (Suc v'') = \\<Z> k'' (Suc v'') \\<and>\n  items_le k'' (\\<I> k'') = Gen (paths_le k'' (\\<Q> k''))", "have induct1: \"items_le k'' (\\<J> k'' (Suc v'')) = Gen (paths_le k'' (\\<P> k'' (Suc v'')))\""], ["proof (prove)\nusing this:\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v''))) \\<and>\n  \\<T> k'' (Suc v'') = \\<Z> k'' (Suc v'') \\<and>\n  items_le k'' (\\<I> k'') = Gen (paths_le k'' (\\<Q> k''))\n\ngoal (1 subgoal):\n 1. items_le k'' (\\<J> k'' (Suc v'')) =\n    Gen (paths_le k'' (\\<P> k'' (Suc v'')))", "by blast"], ["proof (state)\nthis:\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from less(1)[OF k''_less_k k''_Doc_bound, of \"Suc(Suc v'')\"]"], ["proof (chain)\npicking this:\n  items_le k'' (\\<J> k'' (Suc (Suc v''))) =\n  Gen (paths_le k'' (\\<P> k'' (Suc (Suc v'')))) \\<and>\n  \\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v'')) \\<and>\n  items_le k'' (\\<I> k'') = Gen (paths_le k'' (\\<Q> k''))", "have induct2: \"\\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v''))\""], ["proof (prove)\nusing this:\n  items_le k'' (\\<J> k'' (Suc (Suc v''))) =\n  Gen (paths_le k'' (\\<P> k'' (Suc (Suc v'')))) \\<and>\n  \\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v'')) \\<and>\n  items_le k'' (\\<I> k'') = Gen (paths_le k'' (\\<Q> k''))\n\ngoal (1 subgoal):\n 1. \\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v''))", "by blast"], ["proof (state)\nthis:\n  \\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset4: \"Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))", "using subset3 induct1"], ["proof (prove)\nusing this:\n  Gen (Prefixes p) \\<subseteq> Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n\ngoal (1 subgoal):\n 1. Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))", "by auto"], ["proof (state)\nthis:\n  Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from induct1 subset4"], ["proof (chain)\npicking this:\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n  Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))", "have subset6: \"Scan T k'' (Gen (Prefixes p)) \\<subseteq> \n              Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\""], ["proof (prove)\nusing this:\n  items_le k'' (\\<J> k'' (Suc v'')) =\n  Gen (paths_le k'' (\\<P> k'' (Suc v'')))\n  Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))\n\ngoal (1 subgoal):\n 1. Scan T k'' (Gen (Prefixes p))\n    \\<subseteq> Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))", "apply (rule_tac monoD[OF mono_Scan])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>items_le k'' (\\<J> k'' (Suc v'')) =\n             Gen (paths_le k'' (\\<P> k'' (Suc v'')));\n     Gen (Prefixes p) \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))\\<rbrakk>\n    \\<Longrightarrow> Gen (Prefixes p)\n                      \\<subseteq> items_le k'' (\\<J> k'' (Suc v''))", "by blast"], ["proof (state)\nthis:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"k'' + length (chars_of_token X) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k'' + length (chars_of_token X) = k", "by (simp add: h9)"], ["proof (state)\nthis:\n  k'' + length (chars_of_token X) = k\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"\\<And> t. t \\<in> T \\<Longrightarrow> length (chars_of_token t) \\<le> length (chars_of_token X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> T \\<Longrightarrow>\n       length (chars_of_token t) \\<le> length (chars_of_token X)", "using T"], ["proof (prove)\nusing this:\n  T = {X}\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       t \\<in> T \\<Longrightarrow>\n       length (chars_of_token t) \\<le> length (chars_of_token X)", "by auto"], ["proof (state)\nthis:\n  ?t \\<in> T \\<Longrightarrow>\n  length (chars_of_token ?t) \\<le> length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from Scan_items_le[of T, OF this, simplified, of k'' \"\\<J> k'' (Suc v'')\"] h9"], ["proof (chain)\npicking this:\n  Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le (k'' + length (chars_of_token X))\n               (Scan T k'' (\\<J> k'' (Suc v'')))\n  k = k'' + length (chars_of_token X)", "have subset7: \"Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n              \\<subseteq> items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\""], ["proof (prove)\nusing this:\n  Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le (k'' + length (chars_of_token X))\n               (Scan T k'' (\\<J> k'' (Suc v'')))\n  k = k'' + length (chars_of_token X)\n\ngoal (1 subgoal):\n 1. Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n    \\<subseteq> items_le k (Scan T k'' (\\<J> k'' (Suc v'')))", "by simp"], ["proof (state)\nthis:\n  Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"T \\<subseteq> \\<Z> k'' (Suc (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<Z> k'' (Suc (Suc v''))", "using T k''"], ["proof (prove)\nusing this:\n  T = {X}\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<Z> k'' (Suc (Suc v''))", "using \\<Z>_subset_Suc rev_subsetD singletonD subsetI"], ["proof (prove)\nusing this:\n  T = {X}\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n  \\<Z> ?k ?n \\<subseteq> \\<Z> ?k (Suc ?n)\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  ?b \\<in> {?a} \\<Longrightarrow> ?b = ?a\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<Z> k'' (Suc (Suc v''))", "by blast"], ["proof (state)\nthis:\n  T \\<subseteq> \\<Z> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  T \\<subseteq> \\<Z> k'' (Suc (Suc v''))", "have T_subset_\\<T>: \"T \\<subseteq> \\<T> k'' (Suc (Suc v''))\""], ["proof (prove)\nusing this:\n  T \\<subseteq> \\<Z> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<T> k'' (Suc (Suc v''))", "using induct2"], ["proof (prove)\nusing this:\n  T \\<subseteq> \\<Z> k'' (Suc (Suc v''))\n  \\<T> k'' (Suc (Suc v'')) = \\<Z> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. T \\<subseteq> \\<T> k'' (Suc (Suc v''))", "by auto"], ["proof (state)\nthis:\n  T \\<subseteq> \\<T> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset8: \"Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq>\n              Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v''))\n    \\<subseteq> Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))", "using T_subset_\\<T> Scan_mono_tokens"], ["proof (prove)\nusing this:\n  T \\<subseteq> \\<T> k'' (Suc (Suc v''))\n  ?P \\<subseteq> ?Q \\<Longrightarrow>\n  Scan ?P ?k ?I \\<subseteq> Scan ?Q ?k ?I\n\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v''))\n    \\<subseteq> Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))", "by blast"], ["proof (state)\nthis:\n  Scan T k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset9: \"Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k'' (Suc (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n    \\<subseteq> \\<J> k'' (Suc (Suc v''))", "by (rule Scan_\\<J>_subset_\\<J>)"], ["proof (state)\nthis:\n  Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> \\<J> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset10: \"(Scan T k'' (\\<J> k'' (Suc v''))) \\<subseteq> \\<J> k'' (Suc (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k'' (Suc (Suc v''))", "using subset8 subset9"], ["proof (prove)\nusing this:\n  Scan T k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n  Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> \\<J> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k'' (Suc (Suc v''))", "by blast"], ["proof (state)\nthis:\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k'' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"k'' \\<le> k'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k'' \\<le> k'", "using k'' indexlt_simp"], ["proof (prove)\nusing this:\n  indexlt k'' v'' k' v \\<and>\n  q \\<in> \\<P> k'' (Suc v'') \\<and>\n  charslength p = k'' \\<and> X \\<in> \\<Z> k'' (Suc v'')\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. k'' \\<le> k'", "by auto"], ["proof (state)\nthis:\n  k'' \\<le> k'\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  k'' \\<le> k'", "have \"indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))\""], ["proof (prove)\nusing this:\n  k'' \\<le> k'\n\ngoal (1 subgoal):\n 1. indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))", "using indexlt_simp"], ["proof (prove)\nusing this:\n  k'' \\<le> k'\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n\ngoal (1 subgoal):\n 1. indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))", "using indexle_def le_neq_implies_less"], ["proof (prove)\nusing this:\n  k'' \\<le> k'\n  indexlt ?k' ?u' ?k ?u = (?k' < ?k \\<or> ?k' = ?k \\<and> ?u' < ?u)\n  indexle ?k' ?u' ?k ?u =\n  (indexlt ?k' ?u' ?k ?u \\<or> ?k' = ?k \\<and> ?u' = ?u)\n  \\<lbrakk>?m \\<le> ?n; ?m \\<noteq> ?n\\<rbrakk> \\<Longrightarrow> ?m < ?n\n\ngoal (1 subgoal):\n 1. indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))", "by auto"], ["proof (state)\nthis:\n  indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))", "have subset11: \"\\<J> k'' (Suc (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\""], ["proof (prove)\nusing this:\n  indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. \\<J> k'' (Suc (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))", "using \\<J>_subset"], ["proof (prove)\nusing this:\n  indexle k'' (Suc (Suc v'')) k' (Suc (Suc v''))\n  indexle ?k' ?u' ?k ?u \\<Longrightarrow>\n  \\<J> ?k' ?u' \\<subseteq> \\<J> ?k ?u\n\ngoal (1 subgoal):\n 1. \\<J> k'' (Suc (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))", "by blast"], ["proof (state)\nthis:\n  \\<J> k'' (Suc (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset12: \"Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))", "using subset8 subset9 subset10 subset11"], ["proof (prove)\nusing this:\n  Scan T k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n  Scan (\\<T> k'' (Suc (Suc v''))) k'' (\\<J> k'' (Suc v''))\n  \\<subseteq> \\<J> k'' (Suc (Suc v''))\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k'' (Suc (Suc v''))\n  \\<J> k'' (Suc (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))", "by blast"], ["proof (state)\nthis:\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))", "have subset13: \"items_le k (Scan T k'' (\\<J> k'' (Suc v''))) \\<subseteq>\n              items_le k (\\<J> k' (Suc (Suc v'')))\""], ["proof (prove)\nusing this:\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\n\ngoal (1 subgoal):\n 1. items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n    \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))", "using items_le_def mem_Collect_eq rev_subsetD subsetI"], ["proof (prove)\nusing this:\n  Scan T k'' (\\<J> k'' (Suc v'')) \\<subseteq> \\<J> k' (Suc (Suc v''))\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  (?a \\<in> Collect ?P) = ?P ?a\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n    \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))", "by auto"], ["proof (state)\nthis:\n  items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have subset14: \"Scan T k'' (Gen (Prefixes p)) \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k'' (Gen (Prefixes p))\n    \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))", "using subset6 subset7 subset13"], ["proof (prove)\nusing this:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n  Scan T k'' (items_le k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n  items_le k (Scan T k'' (\\<J> k'' (Suc v'')))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\n\ngoal (1 subgoal):\n 1. Scan T k'' (Gen (Prefixes p))\n    \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))", "by blast"], ["proof (state)\nthis:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))", "have x_in': \"x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))\""], ["proof (prove)\nusing this:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))", "using x_in"], ["proof (prove)\nusing this:\n  Scan T k'' (Gen (Prefixes p))\n  \\<subseteq> items_le k (\\<J> k' (Suc (Suc v'')))\n  x \\<in> \\<pi> k {} (Scan T k'' (Gen (Prefixes p)))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))", "by (meson \\<pi>_apply_setmonotone \\<pi>_subset_elem_trans subsetCE subsetI)"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from x_in'"], ["proof (chain)\npicking this:\n  x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))", "have \"x \\<in> \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\nusing this:\n  x \\<in> \\<pi> k {} (items_le k (\\<J> k' (Suc (Suc v''))))\n\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by (meson k' mono_\\<pi> mono_subset_elem natUnion_superset)"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?q2 \\<in> paths_eq k (\\<P> k' ?v2); pvalid ?q2 ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2\n                    \\<in> \\<pi> k {}\n                           (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "note suffices6 = this"], ["proof (state)\nthis:\n  \\<lbrakk>?q2 \\<in> paths_eq k (\\<P> k' ?v2); pvalid ?q2 ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2\n                    \\<in> \\<pi> k {}\n                           (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "{"], ["proof (state)\nthis:\n  \\<lbrakk>?q2 \\<in> paths_eq k (\\<P> k' ?v2); pvalid ?q2 ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2\n                    \\<in> \\<pi> k {}\n                           (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix v :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"Gen (paths_eq k (\\<P> k' v)) \\<subseteq> \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_eq k (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "using suffices6"], ["proof (prove)\nusing this:\n  \\<lbrakk>?q2 \\<in> paths_eq k (\\<P> k' ?v2); pvalid ?q2 ?x2\\<rbrakk>\n  \\<Longrightarrow> ?x2\n                    \\<in> \\<pi> k {}\n                           (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. Gen (paths_eq k (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by (meson Gen_implies_pvalid subsetI)"], ["proof (state)\nthis:\n  Gen (paths_eq k (\\<P> k' v))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "}"], ["proof (state)\nthis:\n  Gen (paths_eq k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "note suffices5 = this"], ["proof (state)\nthis:\n  Gen (paths_eq k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "{"], ["proof (state)\nthis:\n  Gen (paths_eq k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "fix v :: nat"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"paths_le k (\\<P> k' v) = paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le k (\\<P> k' v) =\n    paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)", "using  paths_le_split_via_eq k'"], ["proof (prove)\nusing this:\n  paths_le (Suc ?k) ?P = paths_le ?k ?P \\<union> paths_eq (Suc ?k) ?P\n  k = Suc k'\n\ngoal (1 subgoal):\n 1. paths_le k (\\<P> k' v) =\n    paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)", "by metis"], ["proof (state)\nthis:\n  paths_le k (\\<P> k' v) =\n  paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "then"], ["proof (chain)\npicking this:\n  paths_le k (\\<P> k' v) =\n  paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)", "have Gen_split: \"Gen (paths_le k (\\<P> k' v)) = \n              Gen (paths_le k' (\\<P> k' v)) \\<union> Gen(paths_eq k (\\<P> k' v))\""], ["proof (prove)\nusing this:\n  paths_le k (\\<P> k' v) =\n  paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v)) =\n    Gen (paths_le k' (\\<P> k' v)) \\<union> Gen (paths_eq k (\\<P> k' v))", "using Gen_union"], ["proof (prove)\nusing this:\n  paths_le k (\\<P> k' v) =\n  paths_le k' (\\<P> k' v) \\<union> paths_eq k (\\<P> k' v)\n  Gen (?A \\<union> ?B) = Gen ?A \\<union> Gen ?B\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v)) =\n    Gen (paths_le k' (\\<P> k' v)) \\<union> Gen (paths_eq k (\\<P> k' v))", "by metis"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k' v)) =\n  Gen (paths_le k' (\\<P> k' v)) \\<union> Gen (paths_eq k (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have case_le: \"Gen (paths_le k' (\\<P> k' v)) \\<subseteq>  \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "from less k'_less_k"], ["proof (chain)\npicking this:\n  \\<lbrakk>?y < k; ?y \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?y (\\<J> ?y ?u) =\n                    Gen (paths_le ?y (\\<P> ?y ?u)) \\<and>\n                    \\<T> ?y ?u = \\<Z> ?y ?u \\<and>\n                    items_le ?y (\\<I> ?y) = Gen (paths_le ?y (\\<Q> ?y))\n  k \\<le> length Doc\n  k' < k", "have \"k' \\<le> length Doc\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?y < k; ?y \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?y (\\<J> ?y ?u) =\n                    Gen (paths_le ?y (\\<P> ?y ?u)) \\<and>\n                    \\<T> ?y ?u = \\<Z> ?y ?u \\<and>\n                    items_le ?y (\\<I> ?y) = Gen (paths_le ?y (\\<Q> ?y))\n  k \\<le> length Doc\n  k' < k\n\ngoal (1 subgoal):\n 1. k' \\<le> length Doc", "by arith"], ["proof (state)\nthis:\n  k' \\<le> length Doc\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "from less(1)[OF k'_less_k this]"], ["proof (chain)\npicking this:\n  items_le k' (\\<J> k' ?u) = Gen (paths_le k' (\\<P> k' ?u)) \\<and>\n  \\<T> k' ?u = \\<Z> k' ?u \\<and>\n  items_le k' (\\<I> k') = Gen (paths_le k' (\\<Q> k'))", "have \"items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))\""], ["proof (prove)\nusing this:\n  items_le k' (\\<J> k' ?u) = Gen (paths_le k' (\\<P> k' ?u)) \\<and>\n  \\<T> k' ?u = \\<Z> k' ?u \\<and>\n  items_le k' (\\<I> k') = Gen (paths_le k' (\\<Q> k'))\n\ngoal (1 subgoal):\n 1. items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))", "by blast"], ["proof (state)\nthis:\n  items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "then"], ["proof (chain)\npicking this:\n  items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))", "have \"Gen (paths_le k' (\\<P> k' v)) \\<subseteq> natUnion (\\<lambda> v. items_le k (\\<J> k' v))\""], ["proof (prove)\nusing this:\n  items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))", "using items_le_def LocalLexing_axioms k'_less_k natUnion_superset"], ["proof (prove)\nusing this:\n  items_le k' (\\<J> k' v) = Gen (paths_le k' (\\<P> k' v))\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  k' < k\n  ?g ?i \\<subseteq> natUnion ?g\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))", "by fastforce"], ["proof (state)\nthis:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "then"], ["proof (chain)\npicking this:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))", "show ?thesis"], ["proof (prove)\nusing this:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "using \\<pi>_apply_setmonotone"], ["proof (prove)\nusing this:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> natUnion (\\<lambda>v. items_le k (\\<J> k' v))\n  ?x \\<in> ?I \\<Longrightarrow> ?x \\<in> \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. Gen (paths_le k' (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by blast"], ["proof (state)\nthis:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have \"Gen (paths_le k (\\<P> k' v)) \\<subseteq> \\<pi> k {} (natUnion (\\<lambda> v. items_le k (\\<J> k' v)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "using Gen_split case_le suffices5 UnE rev_subsetD subsetI"], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k' v)) =\n  Gen (paths_le k' (\\<P> k' v)) \\<union> Gen (paths_eq k (\\<P> k' v))\n  Gen (paths_le k' (\\<P> k' v))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n  Gen (paths_eq k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n  \\<lbrakk>?c \\<in> ?A \\<union> ?B; ?c \\<in> ?A \\<Longrightarrow> ?P;\n   ?c \\<in> ?B \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<lbrakk>?c \\<in> ?A; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<in> ?B\n  (\\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> ?B) \\<Longrightarrow>\n  ?A \\<subseteq> ?B\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k' v))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by blast"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k' v))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "}"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "note suffices4 = this"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "have super_lemma: \"Gen (paths_le k (\\<P> k 0)) \\<subseteq> items_le k (\\<J> k 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k 0)) \\<subseteq> items_le k (\\<J> k 0)", "apply (subst simp_right)"], ["proof (prove)\ngoal (1 subgoal):\n 1. natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n    \\<subseteq> items_le k (\\<J> k 0)", "apply (subst simp_left')"], ["proof (prove)\ngoal (1 subgoal):\n 1. natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "using suffices4"], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k' ?v2))\n  \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))\n\ngoal (1 subgoal):\n 1. natUnion (\\<lambda>v. Gen (paths_le k (\\<P> k' v)))\n    \\<subseteq> \\<pi> k {} (natUnion (\\<lambda>v. items_le k (\\<J> k' v)))", "by (meson natUnion_ex rev_subsetD subsetI)"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k 0)) \\<subseteq> items_le k (\\<J> k 0)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "from super_lemma sub_lemma"], ["proof (chain)\npicking this:\n  Gen (paths_le k (\\<P> k 0)) \\<subseteq> items_le k (\\<J> k 0)\n  items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k 0)) \\<subseteq> items_le k (\\<J> k 0)\n  items_le k (\\<J> k 0) \\<subseteq> Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. k \\<noteq> 0 \\<Longrightarrow>\n    items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "then"], ["proof (chain)\npicking this:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))", "show ?case"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "using thmD13 less.prems"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k 0) = Gen (paths_le k (\\<P> k 0))\n  \\<lbrakk>items_le ?k (\\<J> ?k 0) = Gen (paths_le ?k (\\<P> ?k 0));\n   ?k \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> items_le ?k (\\<J> ?k ?u) =\n                    Gen (paths_le ?k (\\<P> ?k ?u)) \\<and>\n                    \\<T> ?k ?u = \\<Z> ?k ?u \\<and>\n                    items_le ?k (\\<I> ?k) = Gen (paths_le ?k (\\<Q> ?k))\n  k \\<le> length Doc\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n    \\<T> k u = \\<Z> k u \\<and>\n    items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n  \\<T> k u = \\<Z> k u \\<and> items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u)) \\<and>\n  \\<T> k u = \\<Z> k u \\<and> items_le k (\\<I> k) = Gen (paths_le k (\\<Q> k))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}