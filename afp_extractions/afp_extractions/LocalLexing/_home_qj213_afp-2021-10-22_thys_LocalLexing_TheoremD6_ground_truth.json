{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD6.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma inc_dot_0[simp]: \"inc_dot 0 x = x\"", "lemma Predict_mk_regular1: \n  \"\\<exists> (P :: rule \\<Rightarrow> item \\<Rightarrow> bool) F. Predict k = mk_regular1 P F\"", "lemma Complete_mk_regular2: \n  \"\\<exists> (P :: dummy \\<Rightarrow> item \\<Rightarrow> item \\<Rightarrow> bool) F. Complete k = mk_regular2 P F\"", "lemma Scan_mk_regular1:\n  \"\\<exists> (P :: token \\<Rightarrow> item \\<Rightarrow> bool) F. Scan T k = mk_regular1 P F\"", "lemma Predict_regular: \"regular (Predict k)\"", "lemma Complete_regular: \"regular (Complete k)\"", "lemma Scan_regular: \"regular (Scan T k)\"", "lemma \\<pi>_functional: \"\\<pi> k T = limit ((Scan T k) o (Complete k) o (Predict k))\"", "lemma \\<pi>_step_regular: \"regular ((Scan T k) o (Complete k) o (Predict k))\"", "lemma \\<pi>_regular: \"regular (\\<pi> k T)\"", "lemma \\<pi>_fix: \"Scan T k (Complete k (Predict k (\\<pi> k T I))) = \\<pi> k T I\"", "lemma \\<pi>_fix': \"((Scan T k) o (Complete k) o (Predict k)) (\\<pi> k T I) = \\<pi> k T I\"", "lemma setmonotone_cases:\n  assumes \"setmonotone f\"\n  shows \"f X = X \\<or> X \\<subset> f X\"", "lemma distribute_fixpoint_over_setmonotone_comp:\n  assumes f: \"setmonotone f\"\n  assumes g: \"setmonotone g\"\n  assumes fixpoint: \"(f o g) I = I\"\n  shows \"f I = I \\<and> g I = I\"", "lemma distribute_fixpoint_over_setmonotone_comp_3:\n  assumes f: \"setmonotone f\"\n  assumes g: \"setmonotone g\"\n  assumes h: \"setmonotone h\"\n  assumes fixpoint: \"(f o g o h) I = I\"\n  shows \"f I = I \\<and> g I = I \\<and> h I = I\"", "lemma Predict_\\<pi>_fix: \"Predict k (\\<pi> k T I) = \\<pi> k T I\"", "lemma Scan_\\<pi>_fix: \"Scan T k (\\<pi> k T I) = \\<pi> k T I\"", "lemma Complete_\\<pi>_fix: \"Complete k (\\<pi> k T I) = \\<pi> k T I\"", "lemma \\<pi>_idempotent: \"\\<pi> k T (\\<pi> k T I) = \\<pi> k T I\"", "lemma derivation_shift_identity[simp]: \"derivation_shift D 0 0 = D\"", "lemma Derivation_skip_prefix: \"Derivation (u@v) D w \\<Longrightarrow> derivation_ge D (length u) \\<Longrightarrow> \n  Derivation v (derivation_shift D (length u) 0) (drop (length u) w)\"", "lemma leftmost_skip_prefix: \"leftmost i (u@v) \\<Longrightarrow> i \\<ge> length u \\<Longrightarrow> leftmost (i - length u) v\"", "lemma LeftDerivation_skip_prefix: \"LeftDerivation (u@v) D w \\<Longrightarrow> derivation_ge D (length u) \\<Longrightarrow> \n  LeftDerivation v (derivation_shift D (length u) 0) (drop (length u) w)\"", "lemma splits_at_append: \"splits_at u i u1 N u2 \\<Longrightarrow> splits_at (u@v) i u1 N (u2@v)\"", "lemma LeftDerives1_append_leftmost_unique: \"LeftDerives1 (a@b) i r c \\<Longrightarrow> leftmost j a \\<Longrightarrow> i = j\"", "lemma drop_derivation_shift: \n  \"drop n (derivation_shift D left right) = derivation_shift (drop n D) left right\"", "lemma take_derivation_shift: \n  \"take n (derivation_shift D left right) = derivation_shift (take n D) left right\"", "lemma derivation_shift_0_shift: \"derivation_shift (derivation_shift D left1 0) left2 right2 = \n  derivation_shift D (left1 + left2) right2\"", "lemma splits_at_append_prefix:\n  \"splits_at v i \\<alpha> N \\<beta> \\<Longrightarrow> splits_at (u@v) (i + length u) (u@\\<alpha>) N \\<beta>\"", "lemma splits_at_implies_Derives1: \"splits_at \\<delta> i \\<alpha> N \\<beta> \\<Longrightarrow> is_sentence \\<delta> \\<Longrightarrow> r\\<in> \\<RR> \\<Longrightarrow> fst r = N \n \\<Longrightarrow> Derives1 \\<delta> i r (\\<alpha>@(snd r)@\\<beta>)\"", "lemma Derives1_append_prefix: \n  assumes Derives1: \"Derives1 v i r w\"\n  assumes u: \"is_sentence u\"\n  shows \"Derives1 (u@v) (i + length u) r (u@w)\"", "lemma leftmost_prepend_word: \"leftmost i v \\<Longrightarrow> is_word u \\<Longrightarrow> leftmost (i + length u) (u@v)\"", "lemma LeftDerives1_append_prefix: \n  assumes Derives1: \"LeftDerives1 v i r w\"\n  assumes u: \"is_word u\"\n  shows \"LeftDerives1 (u@v) (i + length u) r (u@w)\"", "lemma Derivation_append_prefix: \"Derivation v D w \\<Longrightarrow> is_sentence u \\<Longrightarrow>\n  Derivation (u@v) (derivation_shift D 0 (length u)) (u@w)\"", "lemma LeftDerivation_append_prefix: \"LeftDerivation v D w \\<Longrightarrow> is_word u \\<Longrightarrow> \n  LeftDerivation (u@v) (derivation_shift D 0 (length u)) (u@w)\"", "lemma derivation_ge_shift_simp: \"derivation_ge D i \\<Longrightarrow> i \\<ge> l \\<Longrightarrow> r \\<ge> l \\<Longrightarrow> \n   derivation_shift D l r = derivation_shift D 0 (r - l)\"", "lemma append_dropped_prefix: \"is_prefix u v \\<Longrightarrow> drop (length u) v = w \\<Longrightarrow> u@w = v\"", "lemma derivation_ge_shift_plus:\n  assumes \"derivation_ge D u\"\n  assumes \"derivation_ge (derivation_shift D u 0) v\"\n  shows \"derivation_ge D (u + v)\"", "lemma LeftDerivation_breakdown: \n  \"LeftDerivation (u@v) D w \\<Longrightarrow> \\<exists> n w1 w2. w = w1 @ w2 \\<and> \n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\"", "lemma Derives1_terminals_stay:\n  assumes Derives1: \"Derives1 u i r v\"\n  assumes t_dom: \"t \\<in> set u\"\n  assumes terminal: \"is_terminal t\"\n  shows \"t \\<in> set v\"", "lemma Derivation_terminals_stay: \"Derivation u D v \\<Longrightarrow> t \\<in> set u \\<Longrightarrow> is_terminal t \\<Longrightarrow> t \\<in> set v\"", "lemma Derivation_empty_no_terminals: \"Derivation u D [] \\<Longrightarrow> t \\<in> set u \\<Longrightarrow> is_nonterminal t\"", "lemma mono_subset_elem: \"mono f \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<in> f A \\<Longrightarrow> x \\<in> f B\"", "lemma wellformed_inc_dot: \"wellformed_item x \\<Longrightarrow> item_dot x + d \\<le> length (item_rhs x) \\<Longrightarrow>\n  wellformed_item(inc_dot d x)\"", "lemma init_item_dot[simp]: \"item_dot (init_item r k) = 0\"", "lemma init_item_rhs[simp]: \"item_rhs (init_item r k) = snd r\"", "lemma init_item_\\<beta>[simp]: \"item_\\<beta> (init_item r k) = snd r\"", "lemma mono_\\<pi>: \"mono (\\<pi> k T)\"", "lemma \\<pi>_subset_elem_trans: \n  assumes Y: \"Y \\<subseteq> \\<pi> k T X\"\n  assumes z: \"z \\<in> \\<pi> k T Y\"\n  shows \"z \\<in>  \\<pi> k T X\"", "lemma inc_dot_origin[simp]: \"item_origin (inc_dot d x) = item_origin x\"", "lemma inc_dot_end[simp]: \"item_end (inc_dot d x) = item_end x\"", "lemma inc_dot_rhs[simp]: \"item_rhs (inc_dot d x) = item_rhs x\"", "lemma inc_dot_dot[simp]: \"item_dot (inc_dot d x) = item_dot x + d\"", "lemma inc_dot_nonterminal[simp]: \"item_nonterminal (inc_dot d x) = item_nonterminal x\"", "lemma Predict_subset_\\<pi>: \"Predict k X \\<subseteq> \\<pi> k T X\"", "lemma Complete_subset_\\<pi>: \"Complete k X \\<subseteq> \\<pi> k T X\"", "lemma inc_inc_dot[simp]: \"inc_dot a (inc_dot b x) = inc_dot (a + b) x\"", "lemma thmD6_Left: \"wellformed_item x \\<Longrightarrow> item_\\<beta> x = \\<delta> @ \\<omega> \\<Longrightarrow> item_end x = k \\<Longrightarrow> \n  LeftDerivation \\<delta> D [] \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\"", "lemma derives_empty_implies_LeftDerivation: \"derives \\<delta> [] \\<Longrightarrow> \\<exists> D. LeftDerivation \\<delta> D []\"", "lemma thmD6: \"wellformed_item x \\<Longrightarrow> item_\\<beta> x = \\<delta> @ \\<omega> \\<Longrightarrow> item_end x = k \\<Longrightarrow> \n  derives \\<delta> [] \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\""], "translations": [["", "lemma inc_dot_0[simp]: \"inc_dot 0 x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot 0 x = x", "by (simp add: inc_dot_def)"], ["", "lemma Predict_mk_regular1: \n  \"\\<exists> (P :: rule \\<Rightarrow> item \\<Rightarrow> bool) F. Predict k = mk_regular1 P F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Predict k = mk_regular1 P F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Predict k = mk_regular1 P F", "let ?P = \"\\<lambda> r x::item. r \\<in> \\<RR> \\<and> item_end x = k \\<and> next_symbol x = Some(fst r)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Predict k = mk_regular1 P F", "let ?F = \"\\<lambda> r (x::item). init_item r k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Predict k = mk_regular1 P F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Predict k = mk_regular1 P F", "apply (rule_tac x=\"?P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       Predict k =\n       mk_regular1\n        (\\<lambda>r x.\n            r \\<in> \\<RR> \\<and>\n            item_end x = k \\<and> next_symbol x = Some (fst r))\n        F", "apply (rule_tac x=\"?F\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Predict k =\n    mk_regular1\n     (\\<lambda>r x.\n         r \\<in> \\<RR> \\<and>\n         item_end x = k \\<and> next_symbol x = Some (fst r))\n     (\\<lambda>r x. init_item r k)", "apply (rule_tac ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Predict k x =\n       mk_regular1\n        (\\<lambda>r x.\n            r \\<in> \\<RR> \\<and>\n            item_end x = k \\<and> next_symbol x = Some (fst r))\n        (\\<lambda>r x. init_item r k) x", "by (auto simp add: mk_regular1_def bin_def Predict_def)"], ["proof (state)\nthis:\n  \\<exists>P F. Predict k = mk_regular1 P F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Complete_mk_regular2: \n  \"\\<exists> (P :: dummy \\<Rightarrow> item \\<Rightarrow> item \\<Rightarrow> bool) F. Complete k = mk_regular2 P F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Complete k = mk_regular2 P F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Complete k = mk_regular2 P F", "let ?P = \"\\<lambda> (r::dummy) x y. item_end x = item_origin y \\<and> item_end y = k \\<and> is_complete y \\<and> \n     next_symbol x = Some (item_nonterminal y)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Complete k = mk_regular2 P F", "let ?F = \"\\<lambda> (r::dummy) x y. inc_item x k\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Complete k = mk_regular2 P F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Complete k = mk_regular2 P F", "apply (rule_tac x=\"?P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       Complete k =\n       mk_regular2\n        (\\<lambda>r x y.\n            item_end x = item_origin y \\<and>\n            item_end y = k \\<and>\n            is_complete y \\<and> next_symbol x = Some (item_nonterminal y))\n        F", "apply (rule_tac x=\"?F\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete k =\n    mk_regular2\n     (\\<lambda>r x y.\n         item_end x = item_origin y \\<and>\n         item_end y = k \\<and>\n         is_complete y \\<and> next_symbol x = Some (item_nonterminal y))\n     (\\<lambda>r x y. inc_item x k)", "apply (rule_tac ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Complete k x =\n       mk_regular2\n        (\\<lambda>r x y.\n            item_end x = item_origin y \\<and>\n            item_end y = k \\<and>\n            is_complete y \\<and> next_symbol x = Some (item_nonterminal y))\n        (\\<lambda>r x y. inc_item x k) x", "by (auto simp add: mk_regular2_def bin_def Complete_def)"], ["proof (state)\nthis:\n  \\<exists>P F. Complete k = mk_regular2 P F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Scan_mk_regular1:\n  \"\\<exists> (P :: token \\<Rightarrow> item \\<Rightarrow> bool) F. Scan T k = mk_regular1 P F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Scan T k = mk_regular1 P F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Scan T k = mk_regular1 P F", "let ?P = \"\\<lambda> (tok::token) (x::item). item_end x = k \\<and> tok \\<in> T \\<and> next_symbol x = Some (fst tok)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Scan T k = mk_regular1 P F", "let ?F = \"\\<lambda> (tok::token) (x::item). inc_item x (k + length (snd tok))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>P F. Scan T k = mk_regular1 P F", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>P F. Scan T k = mk_regular1 P F", "apply (rule_tac x=\"?P\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>F.\n       Scan T k =\n       mk_regular1\n        (\\<lambda>tok x.\n            item_end x = k \\<and>\n            tok \\<in> T \\<and> next_symbol x = Some (fst tok))\n        F", "apply (rule_tac x=\"?F\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k =\n    mk_regular1\n     (\\<lambda>tok x.\n         item_end x = k \\<and>\n         tok \\<in> T \\<and> next_symbol x = Some (fst tok))\n     (\\<lambda>tok x. inc_item x (k + length (snd tok)))", "apply (rule_tac ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Scan T k x =\n       mk_regular1\n        (\\<lambda>tok x.\n            item_end x = k \\<and>\n            tok \\<in> T \\<and> next_symbol x = Some (fst tok))\n        (\\<lambda>tok x. inc_item x (k + length (snd tok))) x", "by (auto simp add: mk_regular1_def bin_def Scan_def)"], ["proof (state)\nthis:\n  \\<exists>P F. Scan T k = mk_regular1 P F\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Predict_regular: \"regular (Predict k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (Predict k)", "by (metis Predict_mk_regular1 regular1)"], ["", "lemma Complete_regular: \"regular (Complete k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (Complete k)", "by (metis Complete_mk_regular2 regular2)"], ["", "lemma Scan_regular: \"regular (Scan T k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (Scan T k)", "by (metis Scan_mk_regular1 regular1)"], ["", "lemma \\<pi>_functional: \"\\<pi> k T = limit ((Scan T k) o (Complete k) o (Predict k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "have \"\\<pi> k T = limit (\\<lambda> I. Scan T k (Complete k (Predict k I)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))", "using \\<pi>_def"], ["proof (prove)\nusing this:\n  \\<pi> ?k ?T ?I =\n  limit (\\<lambda>I. Scan ?T ?k (Complete ?k (Predict ?k I))) ?I\n\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))", "by blast"], ["proof (state)\nthis:\n  \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))\n\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "moreover"], ["proof (state)\nthis:\n  \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))\n\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "have \"(\\<lambda> I. Scan T k (Complete k (Predict k I))) = \n     (Scan T k) o (Complete k) o (Predict k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>I. Scan T k (Complete k (Predict k I))) =\n    Scan T k \\<circ> Complete k \\<circ> Predict k", "apply (rule ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       Scan T k (Complete k (Predict k I)) =\n       (Scan T k \\<circ> Complete k \\<circ> Predict k) I", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>I. Scan T k (Complete k (Predict k I))) =\n  Scan T k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "ultimately"], ["proof (chain)\npicking this:\n  \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))\n  (\\<lambda>I. Scan T k (Complete k (Predict k I))) =\n  Scan T k \\<circ> Complete k \\<circ> Predict k", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<pi> k T = limit (\\<lambda>I. Scan T k (Complete k (Predict k I)))\n  (\\<lambda>I. Scan T k (Complete k (Predict k I))) =\n  Scan T k \\<circ> Complete k \\<circ> Predict k\n\ngoal (1 subgoal):\n 1. \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)", "by simp"], ["proof (state)\nthis:\n  \\<pi> k T = limit (Scan T k \\<circ> Complete k \\<circ> Predict k)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<pi>_step_regular: \"regular ((Scan T k) o (Complete k) o (Predict k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (Scan T k \\<circ> Complete k \\<circ> Predict k)", "by (simp add: Complete_regular Predict_regular Scan_regular regular_comp)"], ["", "lemma \\<pi>_regular: \"regular (\\<pi> k T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular (\\<pi> k T)", "by (simp add: \\<pi>_functional \\<pi>_step_regular regular_limit)"], ["", "lemma \\<pi>_fix: \"Scan T k (Complete k (Predict k (\\<pi> k T I))) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k (Complete k (Predict k (\\<pi> k T I))) = \\<pi> k T I", "using \\<pi>_functional \\<pi>_step_regular regular_fixpoint"], ["proof (prove)\nusing this:\n  \\<pi> ?k ?T = limit (Scan ?T ?k \\<circ> Complete ?k \\<circ> Predict ?k)\n  regular (Scan ?T ?k \\<circ> Complete ?k \\<circ> Predict ?k)\n  regular ?f \\<Longrightarrow> ?f (limit ?f ?I) = limit ?f ?I\n\ngoal (1 subgoal):\n 1. Scan T k (Complete k (Predict k (\\<pi> k T I))) = \\<pi> k T I", "by fastforce"], ["", "lemma \\<pi>_fix': \"((Scan T k) o (Complete k) o (Predict k)) (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Scan T k \\<circ> Complete k \\<circ> Predict k) (\\<pi> k T I) =\n    \\<pi> k T I", "using \\<pi>_functional \\<pi>_step_regular regular_fixpoint"], ["proof (prove)\nusing this:\n  \\<pi> ?k ?T = limit (Scan ?T ?k \\<circ> Complete ?k \\<circ> Predict ?k)\n  regular (Scan ?T ?k \\<circ> Complete ?k \\<circ> Predict ?k)\n  regular ?f \\<Longrightarrow> ?f (limit ?f ?I) = limit ?f ?I\n\ngoal (1 subgoal):\n 1. (Scan T k \\<circ> Complete k \\<circ> Predict k) (\\<pi> k T I) =\n    \\<pi> k T I", "by fastforce"], ["", "lemma setmonotone_cases:\n  assumes \"setmonotone f\"\n  shows \"f X = X \\<or> X \\<subset> f X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f X = X \\<or> X \\<subset> f X", "using assms elem_setmonotone"], ["proof (prove)\nusing this:\n  setmonotone f\n  \\<lbrakk>setmonotone ?f; ?x \\<in> ?X\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> ?f ?X\n\ngoal (1 subgoal):\n 1. f X = X \\<or> X \\<subset> f X", "by fastforce"], ["", "lemma distribute_fixpoint_over_setmonotone_comp:\n  assumes f: \"setmonotone f\"\n  assumes g: \"setmonotone g\"\n  assumes fixpoint: \"(f o g) I = I\"\n  shows \"f I = I \\<and> g I = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "from setmonotone_cases[OF g, where X=I]"], ["proof (chain)\npicking this:\n  g I = I \\<or> I \\<subset> g I", "show ?thesis"], ["proof (prove)\nusing this:\n  g I = I \\<or> I \\<subset> g I\n\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "proof(induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. g I = I \\<Longrightarrow> f I = I \\<and> g I = I\n 2. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "case 1"], ["proof (state)\nthis:\n  g I = I\n\ngoal (2 subgoals):\n 1. g I = I \\<Longrightarrow> f I = I \\<and> g I = I\n 2. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "thus ?case"], ["proof (prove)\nusing this:\n  g I = I\n\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "using fixpoint"], ["proof (prove)\nusing this:\n  g I = I\n  (f \\<circ> g) I = I\n\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "by simp"], ["proof (state)\nthis:\n  f I = I \\<and> g I = I\n\ngoal (1 subgoal):\n 1. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "case 2"], ["proof (state)\nthis:\n  I \\<subset> g I\n\ngoal (1 subgoal):\n 1. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "with f"], ["proof (chain)\npicking this:\n  setmonotone f\n  I \\<subset> g I", "have \"I \\<subset> (f o g) I\""], ["proof (prove)\nusing this:\n  setmonotone f\n  I \\<subset> g I\n\ngoal (1 subgoal):\n 1. I \\<subset> (f \\<circ> g) I", "by (metis comp_apply fixpoint less_asym' setmonotone_cases)"], ["proof (state)\nthis:\n  I \\<subset> (f \\<circ> g) I\n\ngoal (1 subgoal):\n 1. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "with fixpoint"], ["proof (chain)\npicking this:\n  (f \\<circ> g) I = I\n  I \\<subset> (f \\<circ> g) I", "have \"False\""], ["proof (prove)\nusing this:\n  (f \\<circ> g) I = I\n  I \\<subset> (f \\<circ> g) I\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. I \\<subset> g I \\<Longrightarrow> f I = I \\<and> g I = I", "then"], ["proof (chain)\npicking this:\n  False", "show ?case"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I", "by blast"], ["proof (state)\nthis:\n  f I = I \\<and> g I = I\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  f I = I \\<and> g I = I\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma distribute_fixpoint_over_setmonotone_comp_3:\n  assumes f: \"setmonotone f\"\n  assumes g: \"setmonotone g\"\n  assumes h: \"setmonotone h\"\n  assumes fixpoint: \"(f o g o h) I = I\"\n  shows \"f I = I \\<and> g I = I \\<and> h I = I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f I = I \\<and> g I = I \\<and> h I = I", "by (meson distribute_fixpoint_over_setmonotone_comp f fixpoint g h setmonotone_comp)"], ["", "lemma Predict_\\<pi>_fix: \"Predict k (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predict k (\\<pi> k T I) = \\<pi> k T I", "by (meson Complete_regular Predict_regular Scan_regular \\<pi>_fix' \n  distribute_fixpoint_over_setmonotone_comp_3 regular_implies_setmonotone)"], ["", "lemma Scan_\\<pi>_fix: \"Scan T k (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Scan T k (\\<pi> k T I) = \\<pi> k T I", "by (meson Complete_regular Predict_regular Scan_regular \\<pi>_fix' \n  distribute_fixpoint_over_setmonotone_comp_3 regular_implies_setmonotone)"], ["", "lemma Complete_\\<pi>_fix: \"Complete k (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete k (\\<pi> k T I) = \\<pi> k T I", "by (meson Complete_regular Predict_regular Scan_regular \\<pi>_fix' \n  distribute_fixpoint_over_setmonotone_comp_3 regular_implies_setmonotone)"], ["", "lemma \\<pi>_idempotent: \"\\<pi> k T (\\<pi> k T I) = \\<pi> k T I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k T (\\<pi> k T I) = \\<pi> k T I", "by (simp add: \\<pi>_functional \\<pi>_step_regular limit_is_idempotent)"], ["", "lemma derivation_shift_identity[simp]: \"derivation_shift D 0 0 = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift D 0 0 = D", "by (simp add: derivation_shift_def)"], ["", "lemma Derivation_skip_prefix: \"Derivation (u@v) D w \\<Longrightarrow> derivation_ge D (length u) \\<Longrightarrow> \n  Derivation v (derivation_shift D (length u) 0) (drop (length u) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation (u @ v) D w; derivation_ge D (length u)\\<rbrakk>\n    \\<Longrightarrow> Derivation v (derivation_shift D (length u) 0)\n                       (drop (length u) w)", "proof (induct D arbitrary: u v w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>Derivation (u @ v) [] w;\n        derivation_ge [] (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v (derivation_shift [] (length u) 0)\n                          (drop (length u) w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "case Nil"], ["proof (state)\nthis:\n  Derivation (u @ v) [] w\n  derivation_ge [] (length u)\n\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>Derivation (u @ v) [] w;\n        derivation_ge [] (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v (derivation_shift [] (length u) 0)\n                          (drop (length u) w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation (u @ v) [] w\n  derivation_ge [] (length u)\n\ngoal (1 subgoal):\n 1. Derivation v (derivation_shift [] (length u) 0) (drop (length u) w)", "by (simp add: append_eq_conv_conj)"], ["proof (state)\nthis:\n  Derivation v (derivation_shift [] (length u) 0) (drop (length u) w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)", "have \"\\<exists>x. Derives1 (u@v) (fst d) (snd d) x \\<and> Derivation x D w\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w", "obtain x where x: \"Derives1 (u@v) (fst d) (snd d) x \\<and> Derivation x D w\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        Derives1 (u @ v) (fst d) (snd d) x \\<and>\n        Derivation x D w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)", "have d: \"fst d \\<ge> length u\" and D: \"derivation_ge D (length u)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. length u \\<le> fst d &&& derivation_ge D (length u)", "using derivation_ge_cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  Derivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. length u \\<le> fst d &&& derivation_ge D (length u)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "using Cons.prems(2) derivation_ge_cons"], ["proof (prove)\nusing this:\n  derivation_ge (d # D) (length u)\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "by blast"], ["proof (state)\nthis:\n  length u \\<le> fst d\n  derivation_ge D (length u)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "have \"\\<exists> x'. x = u@x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x'. x = u @ x'", "by (metis append_eq_conv_conj d le_Derives1_take x)"], ["proof (state)\nthis:\n  \\<exists>x'. x = u @ x'\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x'. x = u @ x'", "obtain x' where x': \"x = u@x'\""], ["proof (prove)\nusing this:\n  \\<exists>x'. x = u @ x'\n\ngoal (1 subgoal):\n 1. (\\<And>x'. x = u @ x' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x = u @ x'\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> Derivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        Derivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> Derivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation v (derivation_shift (d # D) (length u) 0) (drop (length u) w)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       Derives1 v (fst d - length u) (snd d) x \\<and>\n       Derivation x (derivation_shift D (length u) 0) (drop (length u) w)", "apply (rule_tac x=\"x'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 v (fst d - length u) (snd d) x' \\<and>\n    Derivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "using Cons.hyps D Derives1_skip_prefix d x x'"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation (?u @ ?v) D ?w; derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> Derivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  derivation_ge D (length u)\n  \\<lbrakk>length ?a \\<le> ?i; Derives1 (?a @ ?b) ?i ?r (?a @ ?c)\\<rbrakk>\n  \\<Longrightarrow> Derives1 ?b (?i - length ?a) ?r ?c\n  length u \\<le> fst d\n  Derives1 (u @ v) (fst d) (snd d) x \\<and> Derivation x D w\n  x = u @ x'\n\ngoal (1 subgoal):\n 1. Derives1 v (fst d - length u) (snd d) x' \\<and>\n    Derivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "by blast"], ["proof (state)\nthis:\n  Derivation v (derivation_shift (d # D) (length u) 0) (drop (length u) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftmost_skip_prefix: \"leftmost i (u@v) \\<Longrightarrow> i \\<ge> length u \\<Longrightarrow> leftmost (i - length u) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i (u @ v); length u \\<le> i\\<rbrakk>\n    \\<Longrightarrow> leftmost (i - length u) v", "by (simp add: leftmost_def less_diff_conv2 nth_append)"], ["", "lemma LeftDerivation_skip_prefix: \"LeftDerivation (u@v) D w \\<Longrightarrow> derivation_ge D (length u) \\<Longrightarrow> \n  LeftDerivation v (derivation_shift D (length u) 0) (drop (length u) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerivation (u @ v) D w; derivation_ge D (length u)\\<rbrakk>\n    \\<Longrightarrow> LeftDerivation v (derivation_shift D (length u) 0)\n                       (drop (length u) w)", "proof (induct D arbitrary: u v w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>LeftDerivation (u @ v) [] w;\n        derivation_ge [] (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v (derivation_shift [] (length u) 0)\n                          (drop (length u) w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "case Nil"], ["proof (state)\nthis:\n  LeftDerivation (u @ v) [] w\n  derivation_ge [] (length u)\n\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>LeftDerivation (u @ v) [] w;\n        derivation_ge [] (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v (derivation_shift [] (length u) 0)\n                          (drop (length u) w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation (u @ v) [] w\n  derivation_ge [] (length u)\n\ngoal (1 subgoal):\n 1. LeftDerivation v (derivation_shift [] (length u) 0) (drop (length u) w)", "by (simp add: append_eq_conv_conj)"], ["proof (state)\nthis:\n  LeftDerivation v (derivation_shift [] (length u) 0) (drop (length u) w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)", "have \"\\<exists>x. LeftDerives1 (u@v) (fst d) (snd d) x \\<and> LeftDerivation x D w\""], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w", "by auto"], ["proof (state)\nthis:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w", "obtain x where x: \"LeftDerives1 (u@v) (fst d) (snd d) x \\<and> LeftDerivation x D w\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        LeftDerives1 (u @ v) (fst d) (snd d) x \\<and>\n        LeftDerivation x D w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "from Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)", "have d: \"fst d \\<ge> length u\" and D: \"derivation_ge D (length u)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n\ngoal (1 subgoal):\n 1. length u \\<le> fst d &&& derivation_ge D (length u)", "using derivation_ge_cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  LeftDerivation (u @ v) (d # D) w\n  derivation_ge (d # D) (length u)\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. length u \\<le> fst d &&& derivation_ge D (length u)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "using Cons.prems(2) derivation_ge_cons"], ["proof (prove)\nusing this:\n  derivation_ge (d # D) (length u)\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "by blast"], ["proof (state)\nthis:\n  length u \\<le> fst d\n  derivation_ge D (length u)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "have \"\\<exists> x'. x = u@x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x'. x = u @ x'", "by (metis LeftDerives1_implies_Derives1 append_eq_conv_conj d le_Derives1_take x)"], ["proof (state)\nthis:\n  \\<exists>x'. x = u @ x'\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x'. x = u @ x'", "obtain x' where x': \"x = u@x'\""], ["proof (prove)\nusing this:\n  \\<exists>x'. x = u @ x'\n\ngoal (1 subgoal):\n 1. (\\<And>x'. x = u @ x' \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x = u @ x'\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "have leftmost: \"leftmost (fst d) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost (fst d) (u @ v)", "using LeftDerives1_def x"], ["proof (prove)\nusing this:\n  LeftDerives1 ?u ?i ?r ?v = (leftmost ?i ?u \\<and> Derives1 ?u ?i ?r ?v)\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. leftmost (fst d) (u @ v)", "by blast"], ["proof (state)\nthis:\n  leftmost (fst d) (u @ v)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "have 1: \"LeftDerives1 v (fst d - length u) (snd d) x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 v (fst d - length u) (snd d) x'", "apply (auto simp add: LeftDerives1_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. leftmost (fst d - length u) v\n 2. Derives1 v (fst d - length u) (snd d) x'", "apply (simp add: leftmost d leftmost_skip_prefix)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 v (fst d - length u) (snd d) x'", "using Derives1_skip_prefix LeftDerives1_implies_Derives1 d x x'"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?a \\<le> ?i; Derives1 (?a @ ?b) ?i ?r (?a @ ?c)\\<rbrakk>\n  \\<Longrightarrow> Derives1 ?b (?i - length ?a) ?r ?c\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n  length u \\<le> fst d\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n  x = u @ x'\n\ngoal (1 subgoal):\n 1. Derives1 v (fst d - length u) (snd d) x'", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 v (fst d - length u) (snd d) x'\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "have 2: \"LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "using Cons.hyps D x x'"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) D ?w;\n   derivation_ge D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  derivation_ge D (length u)\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D w\n  x = u @ x'\n\ngoal (1 subgoal):\n 1. LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "by blast"], ["proof (state)\nthis:\n  LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation (u @ v) D w;\n                    derivation_ge D (length u)\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation v\n(derivation_shift D (length u) 0) (drop (length u) w);\n        LeftDerivation (u @ v) (a # D) w;\n        derivation_ge (a # D) (length u)\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation v\n                          (derivation_shift (a # D) (length u) 0)\n                          (drop (length u) w)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation v (derivation_shift (d # D) (length u) 0)\n     (drop (length u) w)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       LeftDerives1 v (fst d - length u) (snd d) x \\<and>\n       LeftDerivation x (derivation_shift D (length u) 0)\n        (drop (length u) w)", "apply (rule_tac x=\"x'\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 v (fst d - length u) (snd d) x' \\<and>\n    LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "using 1 2"], ["proof (prove)\nusing this:\n  LeftDerives1 v (fst d - length u) (snd d) x'\n  LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)\n\ngoal (1 subgoal):\n 1. LeftDerives1 v (fst d - length u) (snd d) x' \\<and>\n    LeftDerivation x' (derivation_shift D (length u) 0) (drop (length u) w)", "by blast"], ["proof (state)\nthis:\n  LeftDerivation v (derivation_shift (d # D) (length u) 0)\n   (drop (length u) w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma splits_at_append: \"splits_at u i u1 N u2 \\<Longrightarrow> splits_at (u@v) i u1 N (u2@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splits_at u i u1 N u2 \\<Longrightarrow>\n    splits_at (u @ v) i u1 N (u2 @ v)", "by (auto simp add: splits_at_def)"], ["", "lemma LeftDerives1_append_leftmost_unique: \"LeftDerives1 (a@b) i r c \\<Longrightarrow> leftmost j a \\<Longrightarrow> i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerives1 (a @ b) i r c; leftmost j a\\<rbrakk>\n    \\<Longrightarrow> i = j", "by (meson LeftDerives1_def leftmost_cons_less leftmost_def leftmost_unique)"], ["", "lemma drop_derivation_shift: \n  \"drop n (derivation_shift D left right) = derivation_shift (drop n D) left right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop n (derivation_shift D left right) =\n    derivation_shift (drop n D) left right", "by (auto simp add: derivation_shift_def drop_map)"], ["", "lemma take_derivation_shift: \n  \"take n (derivation_shift D left right) = derivation_shift (take n D) left right\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n (derivation_shift D left right) =\n    derivation_shift (take n D) left right", "by (auto simp add: derivation_shift_def take_map)"], ["", "lemma derivation_shift_0_shift: \"derivation_shift (derivation_shift D left1 0) left2 right2 = \n  derivation_shift D (left1 + left2) right2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift (derivation_shift D left1 0) left2 right2 =\n    derivation_shift D (left1 + left2) right2", "by (auto simp add: derivation_shift_def)"], ["", "lemma splits_at_append_prefix:\n  \"splits_at v i \\<alpha> N \\<beta> \\<Longrightarrow> splits_at (u@v) (i + length u) (u@\\<alpha>) N \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splits_at v i \\<alpha> N \\<beta> \\<Longrightarrow>\n    splits_at (u @ v) (i + length u) (u @ \\<alpha>) N \\<beta>", "apply (auto simp add: splits_at_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < length v; \\<alpha> = take i v; N = v ! i;\n     \\<beta> = drop (Suc i) v\\<rbrakk>\n    \\<Longrightarrow> v ! i = (u @ v) ! (i + length u)", "by (simp add: nth_append)"], ["", "lemma splits_at_implies_Derives1: \"splits_at \\<delta> i \\<alpha> N \\<beta> \\<Longrightarrow> is_sentence \\<delta> \\<Longrightarrow> r\\<in> \\<RR> \\<Longrightarrow> fst r = N \n \\<Longrightarrow> Derives1 \\<delta> i r (\\<alpha>@(snd r)@\\<beta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>splits_at \\<delta> i \\<alpha> N \\<beta>; is_sentence \\<delta>;\n     r \\<in> \\<RR>; fst r = N\\<rbrakk>\n    \\<Longrightarrow> Derives1 \\<delta> i r (\\<alpha> @ snd r @ \\<beta>)", "by (metis (no_types, lifting) Derives1_def is_sentence_concat length_take \n  less_or_eq_imp_le min.absorb2 prod.collapse splits_at_combine splits_at_def)"], ["", "lemma Derives1_append_prefix: \n  assumes Derives1: \"Derives1 v i r w\"\n  assumes u: \"is_sentence u\"\n  shows \"Derives1 (u@v) (i + length u) r (u@w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "have \"\\<exists> \\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>", "using assms splits_at_ex"], ["proof (prove)\nusing this:\n  Derives1 v i r w\n  is_sentence u\n  Derives1 ?\\<delta> ?i ?r ?s \\<Longrightarrow>\n  \\<exists>\\<alpha> N \\<beta>. splits_at ?\\<delta> ?i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>", "obtain \\<alpha> N \\<beta> where split_v: \"splits_at v i \\<alpha> N \\<beta>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha> N \\<beta>. splits_at v i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> N \\<beta>.\n        splits_at v i \\<alpha> N \\<beta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at v i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "have split_w: \"w = \\<alpha>@(snd r)@\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = \\<alpha> @ snd r @ \\<beta>", "using assms split_v splits_at_combine_dest"], ["proof (prove)\nusing this:\n  Derives1 v i r w\n  is_sentence u\n  splits_at v i \\<alpha> N \\<beta>\n  \\<lbrakk>Derives1 ?a ?i ?r ?b;\n   splits_at ?a ?i ?\\<alpha> ?N ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?b = ?\\<alpha> @ snd ?r @ ?\\<beta>\n\ngoal (1 subgoal):\n 1. w = \\<alpha> @ snd r @ \\<beta>", "by blast"], ["proof (state)\nthis:\n  w = \\<alpha> @ snd r @ \\<beta>\n\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "have split_uv: \"splits_at (u@v) (i + length u) (u@\\<alpha>) N \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splits_at (u @ v) (i + length u) (u @ \\<alpha>) N \\<beta>", "by (simp add: split_v splits_at_append_prefix)"], ["proof (state)\nthis:\n  splits_at (u @ v) (i + length u) (u @ \\<alpha>) N \\<beta>\n\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "have is_sentence_uv: \"is_sentence (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (u @ v)", "using Derives1 Derives1_sentence1 is_sentence_concat u"], ["proof (prove)\nusing this:\n  Derives1 v i r w\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> is_sentence ?a\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  is_sentence u\n\ngoal (1 subgoal):\n 1. is_sentence (u @ v)", "by blast"], ["proof (state)\nthis:\n  is_sentence (u @ v)\n\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "by (metis Derives1 Derives1_nonterminal Derives1_rule append_assoc is_sentence_uv \n        split_uv split_v split_w splits_at_implies_Derives1)"], ["proof (state)\nthis:\n  Derives1 (u @ v) (i + length u) r (u @ w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma leftmost_prepend_word: \"leftmost i v \\<Longrightarrow> is_word u \\<Longrightarrow> leftmost (i + length u) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>leftmost i v; is_word u\\<rbrakk>\n    \\<Longrightarrow> leftmost (i + length u) (u @ v)", "by (simp add: leftmost_def nth_append)"], ["", "lemma LeftDerives1_append_prefix: \n  assumes Derives1: \"LeftDerives1 v i r w\"\n  assumes u: \"is_word u\"\n  shows \"LeftDerives1 (u@v) (i + length u) r (u@w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "have 1: \"Derives1 v i r w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 v i r w", "by (simp add: Derives1 LeftDerives1_implies_Derives1)"], ["proof (state)\nthis:\n  Derives1 v i r w\n\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "have 2: \"leftmost i v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost i v", "using Derives1 LeftDerives1_def"], ["proof (prove)\nusing this:\n  LeftDerives1 v i r w\n  LeftDerives1 ?u ?i ?r ?v = (leftmost ?i ?u \\<and> Derives1 ?u ?i ?r ?v)\n\ngoal (1 subgoal):\n 1. leftmost i v", "by blast"], ["proof (state)\nthis:\n  leftmost i v\n\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "have 3: \"is_sentence u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence u", "using u"], ["proof (prove)\nusing this:\n  is_word u\n\ngoal (1 subgoal):\n 1. is_sentence u", "by fastforce"], ["proof (state)\nthis:\n  is_sentence u\n\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "have 4: \"Derives1 (u@v) (i + length u) r (u@w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (i + length u) r (u @ w)", "by (simp add: \"1\" \"3\" Derives1_append_prefix)"], ["proof (state)\nthis:\n  Derives1 (u @ v) (i + length u) r (u @ w)\n\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "have 5: \"leftmost (i + length u) (u@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. leftmost (i + length u) (u @ v)", "by (simp add: \"2\" leftmost_prepend_word u)"], ["proof (state)\nthis:\n  leftmost (i + length u) (u @ v)\n\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (i + length u) r (u @ w)", "by (simp add: \"4\" \"5\" LeftDerives1_def)"], ["proof (state)\nthis:\n  LeftDerives1 (u @ v) (i + length u) r (u @ w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_append_prefix: \"Derivation v D w \\<Longrightarrow> is_sentence u \\<Longrightarrow>\n  Derivation (u@v) (derivation_shift D 0 (length u)) (u@w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n    \\<Longrightarrow> Derivation (u @ v) (derivation_shift D 0 (length u))\n                       (u @ w)", "proof (induct D arbitrary: u v w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>Derivation v [] w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift [] 0 (length u)) (u @ w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "case Nil"], ["proof (state)\nthis:\n  Derivation v [] w\n  is_sentence u\n\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>Derivation v [] w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift [] 0 (length u)) (u @ w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation v [] w\n  is_sentence u\n\ngoal (1 subgoal):\n 1. Derivation (u @ v) (derivation_shift [] 0 (length u)) (u @ w)", "by auto"], ["proof (state)\nthis:\n  Derivation (u @ v) (derivation_shift [] 0 (length u)) (u @ w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>Derivation ?v D ?w; is_sentence ?u\\<rbrakk>\n  \\<Longrightarrow> Derivation (?u @ ?v) (derivation_shift D 0 (length ?u))\n                     (?u @ ?w)\n  Derivation v (d # D) w\n  is_sentence u\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Derivation ?v D ?w; is_sentence ?u\\<rbrakk>\n  \\<Longrightarrow> Derivation (?u @ ?v) (derivation_shift D 0 (length ?u))\n                     (?u @ ?w)\n  Derivation v (d # D) w\n  is_sentence u", "have \"\\<exists> x. Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?v D ?w; is_sentence ?u\\<rbrakk>\n  \\<Longrightarrow> Derivation (?u @ ?v) (derivation_shift D 0 (length ?u))\n                     (?u @ ?w)\n  Derivation v (d # D) w\n  is_sentence u\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 v (fst d) (snd d) x \\<and> Derivation x D w", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 v (fst d) (snd d) x \\<and> Derivation x D w", "obtain x where x: \"Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        Derives1 v (fst d) (snd d) x \\<and>\n        Derivation x D w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>Derivation ?v D ?w; is_sentence ?u\\<rbrakk>\n  \\<Longrightarrow> Derivation (?u @ ?v) (derivation_shift D 0 (length ?u))\n                     (?u @ ?w)\n  Derivation v (d # D) w\n  is_sentence u\n  Derives1 v (fst d) (snd d) x \\<and> Derivation x D w", "have induct: \"Derivation (u@x) (derivation_shift D 0 (length u)) (u@w)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?v D ?w; is_sentence ?u\\<rbrakk>\n  \\<Longrightarrow> Derivation (?u @ ?v) (derivation_shift D 0 (length ?u))\n                     (?u @ ?w)\n  Derivation v (d # D) w\n  is_sentence u\n  Derives1 v (fst d) (snd d) x \\<and> Derivation x D w\n\ngoal (1 subgoal):\n 1. Derivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)", "by auto"], ["proof (state)\nthis:\n  Derivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "have Derives1: \"Derives1 (u@v) ((fst d) + length u) (snd d) (u@x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (fst d + length u) (snd d) (u @ x)", "by (simp add: Cons.prems(2) Derives1_append_prefix x)"], ["proof (state)\nthis:\n  Derives1 (u @ v) (fst d + length u) (snd d) (u @ x)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>Derivation v D w; is_sentence u\\<rbrakk>\n                   \\<Longrightarrow> Derivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        Derivation v (a # D) w; is_sentence u\\<rbrakk>\n       \\<Longrightarrow> Derivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derivation (u @ v) (derivation_shift (d # D) 0 (length u)) (u @ w)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       Derives1 (u @ v) (fst d + length u) (snd d) x \\<and>\n       Derivation x (derivation_shift D 0 (length u)) (u @ w)", "apply (rule_tac x=\"u@x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Derives1 (u @ v) (fst d + length u) (snd d) (u @ x) \\<and>\n    Derivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)", "by (simp add: Cons.hyps Cons.prems(2) Derives1 x)"], ["proof (state)\nthis:\n  Derivation (u @ v) (derivation_shift (d # D) 0 (length u)) (u @ w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_append_prefix: \"LeftDerivation v D w \\<Longrightarrow> is_word u \\<Longrightarrow> \n  LeftDerivation (u@v) (derivation_shift D 0 (length u)) (u@w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n    \\<Longrightarrow> LeftDerivation (u @ v)\n                       (derivation_shift D 0 (length u)) (u @ w)", "proof (induct D arbitrary: u v w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>LeftDerivation v [] w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift [] 0 (length u)) (u @ w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "case Nil"], ["proof (state)\nthis:\n  LeftDerivation v [] w\n  is_word u\n\ngoal (2 subgoals):\n 1. \\<And>u v w.\n       \\<lbrakk>LeftDerivation v [] w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift [] 0 (length u)) (u @ w)\n 2. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "thus ?case"], ["proof (prove)\nusing this:\n  LeftDerivation v [] w\n  is_word u\n\ngoal (1 subgoal):\n 1. LeftDerivation (u @ v) (derivation_shift [] 0 (length u)) (u @ w)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation (u @ v) (derivation_shift [] 0 (length u)) (u @ w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>LeftDerivation ?v D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation v (d # D) w\n  is_word u\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>LeftDerivation ?v D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation v (d # D) w\n  is_word u", "have \"\\<exists> x. LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\""], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?v D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation v (d # D) w\n  is_word u\n\ngoal (1 subgoal):\n 1. \\<exists>x. LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w", "obtain x where x: \"LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\""], ["proof (prove)\nusing this:\n  \\<exists>x. LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        LeftDerives1 v (fst d) (snd d) x \\<and>\n        LeftDerivation x D w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>LeftDerivation ?v D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation v (d # D) w\n  is_word u\n  LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w", "have induct: \"LeftDerivation (u@x) (derivation_shift D 0 (length u)) (u@w)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?v D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift D 0 (length ?u)) (?u @ ?w)\n  LeftDerivation v (d # D) w\n  is_word u\n  LeftDerives1 v (fst d) (snd d) x \\<and> LeftDerivation x D w\n\ngoal (1 subgoal):\n 1. LeftDerivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "have Derives1: \"LeftDerives1 (u@v) ((fst d) + length u) (snd d) (u@x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (fst d + length u) (snd d) (u @ x)", "by (simp add: Cons.prems(2) LeftDerives1_append_prefix x)"], ["proof (state)\nthis:\n  LeftDerives1 (u @ v) (fst d + length u) (snd d) (u @ x)\n\ngoal (1 subgoal):\n 1. \\<And>a D u v w.\n       \\<lbrakk>\\<And>u v w.\n                   \\<lbrakk>LeftDerivation v D w; is_word u\\<rbrakk>\n                   \\<Longrightarrow> LeftDerivation (u @ v)\n(derivation_shift D 0 (length u)) (u @ w);\n        LeftDerivation v (a # D) w; is_word u\\<rbrakk>\n       \\<Longrightarrow> LeftDerivation (u @ v)\n                          (derivation_shift (a # D) 0 (length u)) (u @ w)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (u @ v) (derivation_shift (d # D) 0 (length u)) (u @ w)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       LeftDerives1 (u @ v) (fst d + length u) (snd d) x \\<and>\n       LeftDerivation x (derivation_shift D 0 (length u)) (u @ w)", "apply (rule_tac x=\"u@x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 (u @ v) (fst d + length u) (snd d) (u @ x) \\<and>\n    LeftDerivation (u @ x) (derivation_shift D 0 (length u)) (u @ w)", "by (simp add: Cons.hyps Cons.prems(2) Derives1 x)"], ["proof (state)\nthis:\n  LeftDerivation (u @ v) (derivation_shift (d # D) 0 (length u)) (u @ w)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derivation_ge_shift_simp: \"derivation_ge D i \\<Longrightarrow> i \\<ge> l \\<Longrightarrow> r \\<ge> l \\<Longrightarrow> \n   derivation_shift D l r = derivation_shift D 0 (r - l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n    \\<Longrightarrow> derivation_shift D l r = derivation_shift D 0 (r - l)", "proof (induct D)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>derivation_ge [] i; l \\<le> i; l \\<le> r\\<rbrakk>\n    \\<Longrightarrow> derivation_shift [] l r =\n                      derivation_shift [] 0 (r - l)\n 2. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "case Nil"], ["proof (state)\nthis:\n  derivation_ge [] i\n  l \\<le> i\n  l \\<le> r\n\ngoal (2 subgoals):\n 1. \\<lbrakk>derivation_ge [] i; l \\<le> i; l \\<le> r\\<rbrakk>\n    \\<Longrightarrow> derivation_shift [] l r =\n                      derivation_shift [] 0 (r - l)\n 2. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "thus ?case"], ["proof (prove)\nusing this:\n  derivation_ge [] i\n  l \\<le> i\n  l \\<le> r\n\ngoal (1 subgoal):\n 1. derivation_shift [] l r = derivation_shift [] 0 (r - l)", "by auto"], ["proof (state)\nthis:\n  derivation_shift [] l r = derivation_shift [] 0 (r - l)\n\ngoal (1 subgoal):\n 1. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n  \\<Longrightarrow> derivation_shift D l r = derivation_shift D 0 (r - l)\n  derivation_ge (d # D) i\n  l \\<le> i\n  l \\<le> r\n\ngoal (1 subgoal):\n 1. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "have fst_d: \"fst d \\<ge> l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<le> fst d", "using Cons.prems(1) Cons.prems(2) derivation_ge_cons le_trans"], ["proof (prove)\nusing this:\n  derivation_ge (d # D) i\n  l \\<le> i\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n  \\<lbrakk>?i \\<le> ?j; ?j \\<le> ?k\\<rbrakk> \\<Longrightarrow> ?i \\<le> ?k\n\ngoal (1 subgoal):\n 1. l \\<le> fst d", "by blast"], ["proof (state)\nthis:\n  l \\<le> fst d\n\ngoal (1 subgoal):\n 1. \\<And>a D.\n       \\<lbrakk>\\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n                \\<Longrightarrow> derivation_shift D l r =\n                                  derivation_shift D 0 (r - l);\n        derivation_ge (a # D) i; l \\<le> i; l \\<le> r\\<rbrakk>\n       \\<Longrightarrow> derivation_shift (a # D) l r =\n                         derivation_shift (a # D) 0 (r - l)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift (d # D) l r = derivation_shift (d # D) 0 (r - l)", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. fst d - l + r = fst d + (r - l)\n 2. derivation_shift D l r = derivation_shift D 0 (r - l)", "using Cons fst_d"], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n  \\<Longrightarrow> derivation_shift D l r = derivation_shift D 0 (r - l)\n  derivation_ge (d # D) i\n  l \\<le> i\n  l \\<le> r\n  l \\<le> fst d\n\ngoal (2 subgoals):\n 1. fst d - l + r = fst d + (r - l)\n 2. derivation_shift D l r = derivation_shift D 0 (r - l)", "apply arith"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift D l r = derivation_shift D 0 (r - l)", "using Cons derivation_ge_cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>derivation_ge D i; l \\<le> i; l \\<le> r\\<rbrakk>\n  \\<Longrightarrow> derivation_shift D l r = derivation_shift D 0 (r - l)\n  derivation_ge (d # D) i\n  l \\<le> i\n  l \\<le> r\n  derivation_ge (?d # ?D) ?i = (?i \\<le> fst ?d \\<and> derivation_ge ?D ?i)\n\ngoal (1 subgoal):\n 1. derivation_shift D l r = derivation_shift D 0 (r - l)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  derivation_shift (d # D) l r = derivation_shift (d # D) 0 (r - l)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma append_dropped_prefix: \"is_prefix u v \\<Longrightarrow> drop (length u) v = w \\<Longrightarrow> u@w = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix u v; drop (length u) v = w\\<rbrakk>\n    \\<Longrightarrow> u @ w = v", "using is_prefix_unsplit"], ["proof (prove)\nusing this:\n  is_prefix ?u ?a \\<Longrightarrow> ?u @ drop (length ?u) ?a = ?a\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_prefix u v; drop (length u) v = w\\<rbrakk>\n    \\<Longrightarrow> u @ w = v", "by blast"], ["", "lemma derivation_ge_shift_plus:\n  assumes \"derivation_ge D u\"\n  assumes \"derivation_ge (derivation_shift D u 0) v\"\n  shows \"derivation_ge D (u + v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D (u + v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derivation_ge D (u + v)", "from assms"], ["proof (chain)\npicking this:\n  derivation_ge D u\n  derivation_ge (derivation_shift D u 0) v", "show ?thesis"], ["proof (prove)\nusing this:\n  derivation_ge D u\n  derivation_ge (derivation_shift D u 0) v\n\ngoal (1 subgoal):\n 1. derivation_ge D (u + v)", "apply (auto simp add: derivation_ge_def derivation_shift_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<forall>d\\<in>set D. u \\<le> fst d;\n        \\<forall>d\\<in>set D. v \\<le> fst d - u;\n        (a, aa, b) \\<in> set D\\<rbrakk>\n       \\<Longrightarrow> u + v \\<le> a", "by fastforce"], ["proof (state)\nthis:\n  derivation_ge D (u + v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma LeftDerivation_breakdown: \n  \"LeftDerivation (u@v) D w \\<Longrightarrow> \\<exists> n w1 w2. w = w1 @ w2 \\<and> \n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (u @ v) D w \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "proof (induct \"length D\" arbitrary: u v D w)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>D u v w.\n       \\<lbrakk>0 = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "case 0"], ["proof (state)\nthis:\n  0 = length D\n  LeftDerivation (u @ v) D w\n\ngoal (2 subgoals):\n 1. \\<And>D u v w.\n       \\<lbrakk>0 = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  0 = length D\n  LeftDerivation (u @ v) D w", "have D: \"D = []\""], ["proof (prove)\nusing this:\n  0 = length D\n  LeftDerivation (u @ v) D w\n\ngoal (1 subgoal):\n 1. D = []", "by auto"], ["proof (state)\nthis:\n  D = []\n\ngoal (2 subgoals):\n 1. \\<And>D u v w.\n       \\<lbrakk>0 = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "with 0"], ["proof (chain)\npicking this:\n  0 = length D\n  LeftDerivation (u @ v) D w\n  D = []", "have \"u@v = w\""], ["proof (prove)\nusing this:\n  0 = length D\n  LeftDerivation (u @ v) D w\n  D = []\n\ngoal (1 subgoal):\n 1. u @ v = w", "by auto"], ["proof (state)\nthis:\n  u @ v = w\n\ngoal (2 subgoals):\n 1. \\<And>D u v w.\n       \\<lbrakk>0 = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "with D"], ["proof (chain)\npicking this:\n  D = []\n  u @ v = w", "show ?case"], ["proof (prove)\nusing this:\n  D = []\n  u @ v = w\n\ngoal (1 subgoal):\n 1. \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "apply (rule_tac x=0 in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D = []; u @ v = w\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w1 w2.\n                         w = w1 @ w2 \\<and>\n                         LeftDerivation u (take 0 D) w1 \\<and>\n                         derivation_ge (drop 0 D) (length w1) \\<and>\n                         LeftDerivation v\n                          (derivation_shift (drop 0 D) (length w1) 0) w2", "apply (rule_tac x=\"u\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D = []; u @ v = w\\<rbrakk>\n    \\<Longrightarrow> \\<exists>w2.\n                         w = u @ w2 \\<and>\n                         LeftDerivation u (take 0 D) u \\<and>\n                         derivation_ge (drop 0 D) (length u) \\<and>\n                         LeftDerivation v\n                          (derivation_shift (drop 0 D) (length u) 0) w2", "apply (rule_tac x=\"v\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>D = []; u @ v = w\\<rbrakk>\n    \\<Longrightarrow> w = u @ v \\<and>\n                      LeftDerivation u (take 0 D) u \\<and>\n                      derivation_ge (drop 0 D) (length u) \\<and>\n                      LeftDerivation v\n                       (derivation_shift (drop 0 D) (length u) 0) v", "by auto"], ["proof (state)\nthis:\n  \\<exists>n w1 w2.\n     w = w1 @ w2 \\<and>\n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "case (Suc l)"], ["proof (state)\nthis:\n  \\<lbrakk>l = length ?D; LeftDerivation (?u @ ?v) ?D ?w\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n w1 w2.\n                       ?w = w1 @ w2 \\<and>\n                       LeftDerivation ?u (take n ?D) w1 \\<and>\n                       derivation_ge (drop n ?D) (length w1) \\<and>\n                       LeftDerivation ?v\n                        (derivation_shift (drop n ?D) (length w1) 0) w2\n  Suc l = length D\n  LeftDerivation (u @ v) D w\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>l = length ?D; LeftDerivation (?u @ ?v) ?D ?w\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n w1 w2.\n                       ?w = w1 @ w2 \\<and>\n                       LeftDerivation ?u (take n ?D) w1 \\<and>\n                       derivation_ge (drop n ?D) (length w1) \\<and>\n                       LeftDerivation ?v\n                        (derivation_shift (drop n ?D) (length w1) 0) w2\n  Suc l = length D\n  LeftDerivation (u @ v) D w", "have \"\\<exists> d D'. D = d#D'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l = length ?D; LeftDerivation (?u @ ?v) ?D ?w\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n w1 w2.\n                       ?w = w1 @ w2 \\<and>\n                       LeftDerivation ?u (take n ?D) w1 \\<and>\n                       derivation_ge (drop n ?D) (length w1) \\<and>\n                       LeftDerivation ?v\n                        (derivation_shift (drop n ?D) (length w1) 0) w2\n  Suc l = length D\n  LeftDerivation (u @ v) D w\n\ngoal (1 subgoal):\n 1. \\<exists>d D'. D = d # D'", "by (metis LeftDerivation.elims(2) length_0_conv nat.simps(3))"], ["proof (state)\nthis:\n  \\<exists>d D'. D = d # D'\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>d D'. D = d # D'", "obtain d D' where D_split: \"D = d#D'\""], ["proof (prove)\nusing this:\n  \\<exists>d D'. D = d # D'\n\ngoal (1 subgoal):\n 1. (\\<And>d D'. D = d # D' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  D = d # D'\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "from Suc"], ["proof (chain)\npicking this:\n  \\<lbrakk>l = length ?D; LeftDerivation (?u @ ?v) ?D ?w\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n w1 w2.\n                       ?w = w1 @ w2 \\<and>\n                       LeftDerivation ?u (take n ?D) w1 \\<and>\n                       derivation_ge (drop n ?D) (length w1) \\<and>\n                       LeftDerivation ?v\n                        (derivation_shift (drop n ?D) (length w1) 0) w2\n  Suc l = length D\n  LeftDerivation (u @ v) D w", "have is_sentence_uv: \"is_sentence (u@v)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>l = length ?D; LeftDerivation (?u @ ?v) ?D ?w\\<rbrakk>\n  \\<Longrightarrow> \\<exists>n w1 w2.\n                       ?w = w1 @ w2 \\<and>\n                       LeftDerivation ?u (take n ?D) w1 \\<and>\n                       derivation_ge (drop n ?D) (length w1) \\<and>\n                       LeftDerivation ?v\n                        (derivation_shift (drop n ?D) (length w1) 0) w2\n  Suc l = length D\n  LeftDerivation (u @ v) D w\n\ngoal (1 subgoal):\n 1. is_sentence (u @ v)", "by (metis D_split Derives1_sentence1 LeftDerivation.simps(2) LeftDerives1_implies_Derives1)"], ["proof (state)\nthis:\n  is_sentence (u @ v)\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  is_sentence (u @ v)", "have is_sentence_u: \"is_sentence u\" and is_sentence_v: \"is_sentence v\""], ["proof (prove)\nusing this:\n  is_sentence (u @ v)\n\ngoal (1 subgoal):\n 1. is_sentence u &&& is_sentence v", "by (simp add: is_sentence_concat)+"], ["proof (state)\nthis:\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "have \"is_word u \\<or> (\\<not> is_word u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word u \\<or> \\<not> is_word u", "by blast"], ["proof (state)\nthis:\n  is_word u \\<or> \\<not> is_word u\n\ngoal (1 subgoal):\n 1. \\<And>x D u v w.\n       \\<lbrakk>\\<And>D u v w.\n                   \\<lbrakk>x = length D;\n                    LeftDerivation (u @ v) D w\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>n w1 w2.\n  w = w1 @ w2 \\<and>\n  LeftDerivation u (take n D) w1 \\<and>\n  derivation_ge (drop n D) (length w1) \\<and>\n  LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2;\n        Suc x = length D; LeftDerivation (u @ v) D w\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n w1 w2.\n                            w = w1 @ w2 \\<and>\n                            LeftDerivation u (take n D) w1 \\<and>\n                            derivation_ge (drop n D) (length w1) \\<and>\n                            LeftDerivation v\n                             (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  is_word u \\<or> \\<not> is_word u", "show ?case"], ["proof (prove)\nusing this:\n  is_word u \\<or> \\<not> is_word u\n\ngoal (1 subgoal):\n 1. \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "proof(induct rule: disjCases2)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "case 1"], ["proof (state)\nthis:\n  is_word u\n\ngoal (2 subgoals):\n 1. is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  is_word u", "have derivation_ge_u: \"derivation_ge D (length u)\""], ["proof (prove)\nusing this:\n  is_word u\n\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "using LeftDerivation_implies_Derivation Suc.prems is_word_Derivation_derivation_ge"], ["proof (prove)\nusing this:\n  is_word u\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> Derivation ?a ?D ?b\n  LeftDerivation (u @ v) D w\n  \\<lbrakk>is_word ?w; Derivation (?w @ ?a) ?D ?b\\<rbrakk>\n  \\<Longrightarrow> derivation_ge ?D (length ?w)\n\ngoal (1 subgoal):\n 1. derivation_ge D (length u)", "by blast"], ["proof (state)\nthis:\n  derivation_ge D (length u)\n\ngoal (2 subgoals):\n 1. is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have is_prefix: \"is_prefix u w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix u w", "using \"1.hyps\" LeftDerivation_implies_leftderives Suc.prems \n              derives_word_is_prefix leftderives_implies_derives"], ["proof (prove)\nusing this:\n  is_word u\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  LeftDerivation (u @ v) D w\n  \\<lbrakk>is_word ?w; derives (?w @ ?a) ?b\\<rbrakk>\n  \\<Longrightarrow> is_prefix ?w ?b\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n\ngoal (1 subgoal):\n 1. is_prefix u w", "by blast"], ["proof (state)\nthis:\n  is_prefix u w\n\ngoal (2 subgoals):\n 1. is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have u_w: \"w = u @ (drop (length u) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. w = u @ drop (length u) w", "by (metis \"1.hyps\" LeftDerivation_implies_leftderives Suc.prems \n              derives_word_is_prefix is_prefix_unsplit leftderives_implies_derives)"], ["proof (state)\nthis:\n  w = u @ drop (length u) w\n\ngoal (2 subgoals):\n 1. is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n 2. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "apply (rule_tac x=\"0\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take 0 D) w1 \\<and>\n       derivation_ge (drop 0 D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop 0 D) (length w1) 0) w2", "apply (rule_tac x=\"u\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w2.\n       w = u @ w2 \\<and>\n       LeftDerivation u (take 0 D) u \\<and>\n       derivation_ge (drop 0 D) (length u) \\<and>\n       LeftDerivation v (derivation_shift (drop 0 D) (length u) 0) w2", "apply (rule_tac x=\"drop (length u) w\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. w = u @ drop (length u) w \\<and>\n    LeftDerivation u (take 0 D) u \\<and>\n    derivation_ge (drop 0 D) (length u) \\<and>\n    LeftDerivation v (derivation_shift (drop 0 D) (length u) 0)\n     (drop (length u) w)", "apply (auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. w = u @ drop (length u) w\n 2. derivation_ge D (length u)\n 3. LeftDerivation v (derivation_shift D (length u) 0) (drop (length u) w)", "apply (rule u_w)"], ["proof (prove)\ngoal (2 subgoals):\n 1. derivation_ge D (length u)\n 2. LeftDerivation v (derivation_shift D (length u) 0) (drop (length u) w)", "apply (rule derivation_ge_u)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation v (derivation_shift D (length u) 0) (drop (length u) w)", "by (simp add: LeftDerivation_skip_prefix Suc.prems derivation_ge_u)"], ["proof (state)\nthis:\n  \\<exists>n w1 w2.\n     w = w1 @ w2 \\<and>\n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "case 2"], ["proof (state)\nthis:\n  \\<not> is_word u\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "with is_sentence_u"], ["proof (chain)\npicking this:\n  is_sentence u\n  \\<not> is_word u", "have \"\\<exists> i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u\""], ["proof (prove)\nusing this:\n  is_sentence u\n  \\<not> is_word u\n\ngoal (1 subgoal):\n 1. \\<exists>i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u", "using leftmost_def nonword_leftmost_exists splits_at_def"], ["proof (prove)\nusing this:\n  is_sentence u\n  \\<not> is_word u\n  leftmost ?i ?s =\n  (?i < length ?s \\<and>\n   is_word (take ?i ?s) \\<and> is_nonterminal (?s ! ?i))\n  \\<lbrakk>is_sentence ?a; \\<not> is_word ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>i. leftmost i ?a\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n\ngoal (1 subgoal):\n 1. \\<exists>i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u", "by auto"], ["proof (state)\nthis:\n  \\<exists>i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u", "obtain i u1 N u2 where split_u: \"splits_at u i u1 N u2 \\<and> leftmost i u\""], ["proof (prove)\nusing this:\n  \\<exists>i u1 N u2. splits_at u i u1 N u2 \\<and> leftmost i u\n\ngoal (1 subgoal):\n 1. (\\<And>i u1 N u2.\n        splits_at u i u1 N u2 \\<and> leftmost i u \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at u i u1 N u2 \\<and> leftmost i u\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have is_word_u1: \"is_word u1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_word u1", "by (metis leftmost_def split_u splits_at_def)"], ["proof (state)\nthis:\n  is_word u1\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have \"LeftDerivation (u@v) (d#D') w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (u @ v) (d # D') w", "using D_split Suc.prems"], ["proof (prove)\nusing this:\n  D = d # D'\n  LeftDerivation (u @ v) D w\n\ngoal (1 subgoal):\n 1. LeftDerivation (u @ v) (d # D') w", "by blast"], ["proof (state)\nthis:\n  LeftDerivation (u @ v) (d # D') w\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  LeftDerivation (u @ v) (d # D') w", "have \"\\<exists> x. LeftDerives1 (u@v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\""], ["proof (prove)\nusing this:\n  LeftDerivation (u @ v) (d # D') w\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w", "by simp"], ["proof (state)\nthis:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w", "obtain x where x: \"LeftDerives1 (u@v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        LeftDerives1 (u @ v) (fst d) (snd d) x \\<and>\n        LeftDerivation x D' w \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w", "have fst_d_eq_i: \"fst d = i\""], ["proof (prove)\nusing this:\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. fst d = i", "using \n            splits_at_combine LeftDerives1_append_leftmost_unique split_u"], ["proof (prove)\nusing this:\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n  \\<lbrakk>LeftDerives1 (?a @ ?b) ?i ?r ?c; leftmost ?j ?a\\<rbrakk>\n  \\<Longrightarrow> ?i = ?j\n  splits_at u i u1 N u2 \\<and> leftmost i u\n\ngoal (1 subgoal):\n 1. fst d = i", "by metis"], ["proof (state)\nthis:\n  fst d = i\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have split_uv: \"splits_at (u@v) i u1 N (u2@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. splits_at (u @ v) i u1 N (u2 @ v)", "by (simp add: split_u splits_at_append)"], ["proof (state)\nthis:\n  splits_at (u @ v) i u1 N (u2 @ v)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have split_x: \"x = u1 @ ((snd (snd d)) @ u2 @ v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = u1 @ snd (snd d) @ u2 @ v", "using LeftDerives1_implies_Derives1 fst_d_eq_i split_uv \n              splits_at_combine_dest x"], ["proof (prove)\nusing this:\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n  fst d = i\n  splits_at (u @ v) i u1 N (u2 @ v)\n  \\<lbrakk>Derives1 ?a ?i ?r ?b;\n   splits_at ?a ?i ?\\<alpha> ?N ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> ?b = ?\\<alpha> @ snd ?r @ ?\\<beta>\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. x = u1 @ snd (snd d) @ u2 @ v", "by blast"], ["proof (state)\nthis:\n  x = u1 @ snd (snd d) @ u2 @ v\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have derivation_ge_D': \"derivation_ge D' (length u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge D' (length u1)", "using LeftDerivation_implies_Derivation is_word_Derivation_derivation_ge \n              leftmost_def split_u split_x splits_at_def x"], ["proof (prove)\nusing this:\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> Derivation ?a ?D ?b\n  \\<lbrakk>is_word ?w; Derivation (?w @ ?a) ?D ?b\\<rbrakk>\n  \\<Longrightarrow> derivation_ge ?D (length ?w)\n  leftmost ?i ?s =\n  (?i < length ?s \\<and>\n   is_word (take ?i ?s) \\<and> is_nonterminal (?s ! ?i))\n  splits_at u i u1 N u2 \\<and> leftmost i u\n  x = u1 @ snd (snd d) @ u2 @ v\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> =\n  (?i < length ?\\<delta> \\<and>\n   ?\\<alpha> = take ?i ?\\<delta> \\<and>\n   ?N = ?\\<delta> ! ?i \\<and> ?\\<beta> = drop (Suc ?i) ?\\<delta>)\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. derivation_ge D' (length u1)", "by fastforce"], ["proof (state)\nthis:\n  derivation_ge D' (length u1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have D1: \"LeftDerivation ((snd (snd d)) @ u2 @ v) (derivation_shift D' (length u1) 0) \n            (drop (length u1) w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (snd (snd d) @ u2 @ v)\n     (derivation_shift D' (length u1) 0) (drop (length u1) w)", "using LeftDerivation_skip_prefix derivation_ge_D' split_x x"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation (?u @ ?v) ?D ?w;\n   derivation_ge ?D (length ?u)\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation ?v (derivation_shift ?D (length ?u) 0)\n                     (drop (length ?u) ?w)\n  derivation_ge D' (length u1)\n  x = u1 @ snd (snd d) @ u2 @ v\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. LeftDerivation (snd (snd d) @ u2 @ v)\n     (derivation_shift D' (length u1) 0) (drop (length u1) w)", "by blast"], ["proof (state)\nthis:\n  LeftDerivation (snd (snd d) @ u2 @ v) (derivation_shift D' (length u1) 0)\n   (drop (length u1) w)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  LeftDerivation (snd (snd d) @ u2 @ v) (derivation_shift D' (length u1) 0)\n   (drop (length u1) w)", "have D2: \"LeftDerivation (((snd (snd d)) @ u2) @ v) (derivation_shift D' (length u1) 0) \n            (drop (length u1) w)\""], ["proof (prove)\nusing this:\n  LeftDerivation (snd (snd d) @ u2 @ v) (derivation_shift D' (length u1) 0)\n   (drop (length u1) w)\n\ngoal (1 subgoal):\n 1. LeftDerivation ((snd (snd d) @ u2) @ v)\n     (derivation_shift D' (length u1) 0) (drop (length u1) w)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation ((snd (snd d) @ u2) @ v)\n   (derivation_shift D' (length u1) 0) (drop (length u1) w)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have \"l = length (derivation_shift D' (length u1) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l = length (derivation_shift D' (length u1) 0)", "using D_split Suc.hyps(2)"], ["proof (prove)\nusing this:\n  D = d # D'\n  Suc l = length D\n\ngoal (1 subgoal):\n 1. l = length (derivation_shift D' (length u1) 0)", "by auto"], ["proof (state)\nthis:\n  l = length (derivation_shift D' (length u1) 0)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "from Suc(1)[OF this D2]"], ["proof (chain)\npicking this:\n  \\<exists>n w1 w2.\n     drop (length u1) w = w1 @ w2 \\<and>\n     LeftDerivation (snd (snd d) @ u2)\n      (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n     derivation_ge (drop n (derivation_shift D' (length u1) 0))\n      (length w1) \\<and>\n     LeftDerivation v\n      (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n        (length w1) 0)\n      w2", "obtain n w1 w2 where induct:\n            \"drop (length u1) w = w1 @ w2 \\<and> \n             LeftDerivation (snd (snd d) @ u2) \n               (take n (derivation_shift D' (length u1) 0)) w1 \\<and> \n             derivation_ge (drop n (derivation_shift D' (length u1) 0)) (length w1) \\<and>\n             LeftDerivation v (derivation_shift (drop n (derivation_shift D' (length u1) 0)) \n               (length w1) 0) w2\""], ["proof (prove)\nusing this:\n  \\<exists>n w1 w2.\n     drop (length u1) w = w1 @ w2 \\<and>\n     LeftDerivation (snd (snd d) @ u2)\n      (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n     derivation_ge (drop n (derivation_shift D' (length u1) 0))\n      (length w1) \\<and>\n     LeftDerivation v\n      (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n        (length w1) 0)\n      w2\n\ngoal (1 subgoal):\n 1. (\\<And>w1 w2 n.\n        drop (length u1) w = w1 @ w2 \\<and>\n        LeftDerivation (snd (snd d) @ u2)\n         (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n        derivation_ge (drop n (derivation_shift D' (length u1) 0))\n         (length w1) \\<and>\n        LeftDerivation v\n         (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n           (length w1) 0)\n         w2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  drop (length u1) w = w1 @ w2 \\<and>\n  LeftDerivation (snd (snd d) @ u2)\n   (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n  derivation_ge (drop n (derivation_shift D' (length u1) 0))\n   (length w1) \\<and>\n  LeftDerivation v\n   (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n     (length w1) 0)\n   w2\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have derivation_ge_D'_u1_w1: \"derivation_ge (drop n D') (length u1 + length w1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "from induct"], ["proof (chain)\npicking this:\n  drop (length u1) w = w1 @ w2 \\<and>\n  LeftDerivation (snd (snd d) @ u2)\n   (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n  derivation_ge (drop n (derivation_shift D' (length u1) 0))\n   (length w1) \\<and>\n  LeftDerivation v\n   (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n     (length w1) 0)\n   w2", "have 1: \"derivation_ge (derivation_shift (drop n D') (length u1) 0) (length w1)\""], ["proof (prove)\nusing this:\n  drop (length u1) w = w1 @ w2 \\<and>\n  LeftDerivation (snd (snd d) @ u2)\n   (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n  derivation_ge (drop n (derivation_shift D' (length u1) 0))\n   (length w1) \\<and>\n  LeftDerivation v\n   (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n     (length w1) 0)\n   w2\n\ngoal (1 subgoal):\n 1. derivation_ge (derivation_shift (drop n D') (length u1) 0) (length w1)", "apply (subst drop_derivation_shift[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. drop (length u1) w = w1 @ w2 \\<and>\n    LeftDerivation (snd (snd d) @ u2)\n     (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n    derivation_ge (drop n (derivation_shift D' (length u1) 0))\n     (length w1) \\<and>\n    LeftDerivation v\n     (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n       (length w1) 0)\n     w2 \\<Longrightarrow>\n    derivation_ge (drop n (derivation_shift D' (length u1) 0)) (length w1)", "by blast"], ["proof (state)\nthis:\n  derivation_ge (derivation_shift (drop n D') (length u1) 0) (length w1)\n\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "have 2: \"derivation_ge (drop n D') (length u1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1)", "by (metis append_take_drop_id derivation_ge_D' derivation_ge_append)"], ["proof (state)\nthis:\n  derivation_ge (drop n D') (length u1)\n\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "using 1 2 derivation_ge_shift_plus"], ["proof (prove)\nusing this:\n  derivation_ge (derivation_shift (drop n D') (length u1) 0) (length w1)\n  derivation_ge (drop n D') (length u1)\n  \\<lbrakk>derivation_ge ?D ?u;\n   derivation_ge (derivation_shift ?D ?u 0) ?v\\<rbrakk>\n  \\<Longrightarrow> derivation_ge ?D (?u + ?v)\n\ngoal (1 subgoal):\n 1. derivation_ge (drop n D') (length u1 + length w1)", "by blast"], ["proof (state)\nthis:\n  derivation_ge (drop n D') (length u1 + length w1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  derivation_ge (drop n D') (length u1 + length w1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have \"LeftDerivation (u1@(snd (snd d) @ u2)) (derivation_shift \n                (take n (derivation_shift D' (length u1) 0)) 0 (length u1)) (u1@w1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation (u1 @ snd (snd d) @ u2)\n     (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n       (length u1))\n     (u1 @ w1)", "using induct LeftDerivation_append_prefix is_word_u1"], ["proof (prove)\nusing this:\n  drop (length u1) w = w1 @ w2 \\<and>\n  LeftDerivation (snd (snd d) @ u2)\n   (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n  derivation_ge (drop n (derivation_shift D' (length u1) 0))\n   (length w1) \\<and>\n  LeftDerivation v\n   (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n     (length w1) 0)\n   w2\n  \\<lbrakk>LeftDerivation ?v ?D ?w; is_word ?u\\<rbrakk>\n  \\<Longrightarrow> LeftDerivation (?u @ ?v)\n                     (derivation_shift ?D 0 (length ?u)) (?u @ ?w)\n  is_word u1\n\ngoal (1 subgoal):\n 1. LeftDerivation (u1 @ snd (snd d) @ u2)\n     (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n       (length u1))\n     (u1 @ w1)", "by blast"], ["proof (state)\nthis:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n     (length u1))\n   (u1 @ w1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n     (length u1))\n   (u1 @ w1)", "have der1: \"LeftDerivation (u1@(snd (snd d) @ u2)) \n              (derivation_shift (take n D') (length u1) (length u1)) (u1@w1)\""], ["proof (prove)\nusing this:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n     (length u1))\n   (u1 @ w1)\n\ngoal (1 subgoal):\n 1. LeftDerivation (u1 @ snd (snd d) @ u2)\n     (derivation_shift (take n D') (length u1) (length u1)) (u1 @ w1)", "using take_derivation_shift derivation_shift_0_shift"], ["proof (prove)\nusing this:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n (derivation_shift D' (length u1) 0)) 0\n     (length u1))\n   (u1 @ w1)\n  take ?n (derivation_shift ?D ?left ?right) =\n  derivation_shift (take ?n ?D) ?left ?right\n  derivation_shift (derivation_shift ?D ?left1.0 0) ?left2.0 ?right2.0 =\n  derivation_shift ?D (?left1.0 + ?left2.0) ?right2.0\n\ngoal (1 subgoal):\n 1. LeftDerivation (u1 @ snd (snd d) @ u2)\n     (derivation_shift (take n D') (length u1) (length u1)) (u1 @ w1)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n D') (length u1) (length u1)) (u1 @ w1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have eq1: \"derivation_shift (take n D') (length u1) (length u1) = take n D'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_shift (take n D') (length u1) (length u1) = take n D'", "apply (subst derivation_ge_shift_simp[where i = \"length u1\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. derivation_ge (take n D') (length u1)\n 2. length u1 \\<le> length u1\n 3. derivation_shift (take n D') 0 (length u1 - length u1) = take n D'", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. derivation_ge (take n D') (length u1)", "by (metis append_take_drop_id derivation_ge_D' derivation_ge_append)"], ["proof (state)\nthis:\n  derivation_shift (take n D') (length u1) (length u1) = take n D'\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "from der1 eq1"], ["proof (chain)\npicking this:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n D') (length u1) (length u1)) (u1 @ w1)\n  derivation_shift (take n D') (length u1) (length u1) = take n D'", "have der2: \"LeftDerivation (u1@(snd (snd d) @ u2)) (take n D') (u1@w1)\""], ["proof (prove)\nusing this:\n  LeftDerivation (u1 @ snd (snd d) @ u2)\n   (derivation_shift (take n D') (length u1) (length u1)) (u1 @ w1)\n  derivation_shift (take n D') (length u1) (length u1) = take n D'\n\ngoal (1 subgoal):\n 1. LeftDerivation (u1 @ snd (snd d) @ u2) (take n D') (u1 @ w1)", "by auto"], ["proof (state)\nthis:\n  LeftDerivation (u1 @ snd (snd d) @ u2) (take n D') (u1 @ w1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have eq2: \"take (Suc n) D = d#(take n D')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take (Suc n) D = d # take n D'", "by (simp add: D_split)"], ["proof (state)\nthis:\n  take (Suc n) D = d # take n D'\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have der3: \"LeftDerivation u (take (Suc n) D) (u1@w1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation u (take (Suc n) D) (u1 @ w1)", "apply (simp add: eq2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       LeftDerives1 u (fst d) (snd d) x \\<and>\n       LeftDerivation x (take n D') (u1 @ w1)", "apply (rule_tac x=\"u1@(snd (snd d) @ u2)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerives1 u (fst d) (snd d) (u1 @ snd (snd d) @ u2) \\<and>\n    LeftDerivation (u1 @ snd (snd d) @ u2) (take n D') (u1 @ w1)", "by (metis Derives1_skip_suffix LeftDerives1_def append_assoc der2 fst_d_eq_i \n              split_u split_x splits_at_def x)"], ["proof (state)\nthis:\n  LeftDerivation u (take (Suc n) D) (u1 @ w1)\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "have \"is_prefix u1 w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_prefix u1 w", "using LeftDerivation_implies_leftderives derives_word_is_prefix is_word_u1 \n              leftderives_implies_derives split_x x"], ["proof (prove)\nusing this:\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> leftderives ?a ?b\n  \\<lbrakk>is_word ?w; derives (?w @ ?a) ?b\\<rbrakk>\n  \\<Longrightarrow> is_prefix ?w ?b\n  is_word u1\n  leftderives ?u ?v \\<Longrightarrow> derives ?u ?v\n  x = u1 @ snd (snd d) @ u2 @ v\n  LeftDerives1 (u @ v) (fst d) (snd d) x \\<and> LeftDerivation x D' w\n\ngoal (1 subgoal):\n 1. is_prefix u1 w", "by blast"], ["proof (state)\nthis:\n  is_prefix u1 w\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "then"], ["proof (chain)\npicking this:\n  is_prefix u1 w", "have eq3: \"u1 @ (w1@w2) = w\""], ["proof (prove)\nusing this:\n  is_prefix u1 w\n\ngoal (1 subgoal):\n 1. u1 @ w1 @ w2 = w", "apply (rule_tac append_dropped_prefix)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_prefix u1 w \\<Longrightarrow> is_prefix u1 w\n 2. is_prefix u1 w \\<Longrightarrow> drop (length u1) w = w1 @ w2", "apply (auto simp add: induct)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  u1 @ w1 @ w2 = w\n\ngoal (1 subgoal):\n 1. \\<not> is_word u \\<Longrightarrow>\n    \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take n D) w1 \\<and>\n       derivation_ge (drop n D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2", "apply (rule_tac x=\"Suc n\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w1 w2.\n       w = w1 @ w2 \\<and>\n       LeftDerivation u (take (Suc n) D) w1 \\<and>\n       derivation_ge (drop (Suc n) D) (length w1) \\<and>\n       LeftDerivation v (derivation_shift (drop (Suc n) D) (length w1) 0) w2", "apply (rule_tac x=\"u1@w1\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>w2.\n       w = (u1 @ w1) @ w2 \\<and>\n       LeftDerivation u (take (Suc n) D) (u1 @ w1) \\<and>\n       derivation_ge (drop (Suc n) D) (length (u1 @ w1)) \\<and>\n       LeftDerivation v\n        (derivation_shift (drop (Suc n) D) (length (u1 @ w1)) 0) w2", "apply (rule_tac x=\"w2\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. w = (u1 @ w1) @ w2 \\<and>\n    LeftDerivation u (take (Suc n) D) (u1 @ w1) \\<and>\n    derivation_ge (drop (Suc n) D) (length (u1 @ w1)) \\<and>\n    LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length (u1 @ w1)) 0) w2", "apply auto"], ["proof (prove)\ngoal (4 subgoals):\n 1. w = u1 @ w1 @ w2\n 2. LeftDerivation u (take (Suc n) D) (u1 @ w1)\n 3. derivation_ge (drop (Suc n) D) (length u1 + length w1)\n 4. LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length u1 + length w1) 0) w2", "apply (simp add: eq3)"], ["proof (prove)\ngoal (3 subgoals):\n 1. LeftDerivation u (take (Suc n) D) (u1 @ w1)\n 2. derivation_ge (drop (Suc n) D) (length u1 + length w1)\n 3. LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length u1 + length w1) 0) w2", "apply (simp add: der3)"], ["proof (prove)\ngoal (2 subgoals):\n 1. derivation_ge (drop (Suc n) D) (length u1 + length w1)\n 2. LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length u1 + length w1) 0) w2", "apply (simp add: D_split)"], ["proof (prove)\ngoal (2 subgoals):\n 1. derivation_ge (drop n D') (length u1 + length w1)\n 2. LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length u1 + length w1) 0) w2", "apply (rule derivation_ge_D'_u1_w1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation v\n     (derivation_shift (drop (Suc n) D) (length u1 + length w1) 0) w2", "apply (simp add: D_split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation v\n     (derivation_shift (drop n D') (length u1 + length w1) 0) w2", "using induct derivation_shift_0_shift drop_derivation_shift"], ["proof (prove)\nusing this:\n  drop (length u1) w = w1 @ w2 \\<and>\n  LeftDerivation (snd (snd d) @ u2)\n   (take n (derivation_shift D' (length u1) 0)) w1 \\<and>\n  derivation_ge (drop n (derivation_shift D' (length u1) 0))\n   (length w1) \\<and>\n  LeftDerivation v\n   (derivation_shift (drop n (derivation_shift D' (length u1) 0))\n     (length w1) 0)\n   w2\n  derivation_shift (derivation_shift ?D ?left1.0 0) ?left2.0 ?right2.0 =\n  derivation_shift ?D (?left1.0 + ?left2.0) ?right2.0\n  drop ?n (derivation_shift ?D ?left ?right) =\n  derivation_shift (drop ?n ?D) ?left ?right\n\ngoal (1 subgoal):\n 1. LeftDerivation v\n     (derivation_shift (drop n D') (length u1 + length w1) 0) w2", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>n w1 w2.\n     w = w1 @ w2 \\<and>\n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n w1 w2.\n     w = w1 @ w2 \\<and>\n     LeftDerivation u (take n D) w1 \\<and>\n     derivation_ge (drop n D) (length w1) \\<and>\n     LeftDerivation v (derivation_shift (drop n D) (length w1) 0) w2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derives1_terminals_stay:\n  assumes Derives1: \"Derives1 u i r v\"\n  assumes t_dom: \"t \\<in> set u\"\n  assumes terminal: \"is_terminal t\"\n  shows \"t \\<in> set v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set v", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. t \\<in> set v", "have \"\\<exists> \\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>", "using Derives1 splits_at_ex"], ["proof (prove)\nusing this:\n  Derives1 u i r v\n  Derives1 ?\\<delta> ?i ?r ?s \\<Longrightarrow>\n  \\<exists>\\<alpha> N \\<beta>. splits_at ?\\<delta> ?i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>", "obtain \\<alpha> \\<beta> N where split_u: \"splits_at u i \\<alpha> N \\<beta>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<alpha> \\<beta> N. splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> N \\<beta>.\n        splits_at u i \\<alpha> N \\<beta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "then"], ["proof (chain)\npicking this:\n  splits_at u i \\<alpha> N \\<beta>", "have \"t \\<in> set (\\<alpha> @ [N] @ \\<beta>)\""], ["proof (prove)\nusing this:\n  splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set (\\<alpha> @ [N] @ \\<beta>)", "using splits_at_combine t_dom"], ["proof (prove)\nusing this:\n  splits_at u i \\<alpha> N \\<beta>\n  splits_at ?\\<delta> ?i ?\\<alpha> ?N ?\\<beta> \\<Longrightarrow>\n  ?\\<delta> = ?\\<alpha> @ [?N] @ ?\\<beta>\n  t \\<in> set u\n\ngoal (1 subgoal):\n 1. t \\<in> set (\\<alpha> @ [N] @ \\<beta>)", "by auto"], ["proof (state)\nthis:\n  t \\<in> set (\\<alpha> @ [N] @ \\<beta>)\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "then"], ["proof (chain)\npicking this:\n  t \\<in> set (\\<alpha> @ [N] @ \\<beta>)", "have t_possible_locations: \"t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>\""], ["proof (prove)\nusing this:\n  t \\<in> set (\\<alpha> @ [N] @ \\<beta>)\n\ngoal (1 subgoal):\n 1. t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>", "by auto"], ["proof (state)\nthis:\n  t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "have is_nonterminal: \"is_nonterminal N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_nonterminal N", "using Derives1 Derives1_nonterminal split_u"], ["proof (prove)\nusing this:\n  Derives1 u i r v\n  \\<lbrakk>Derives1 ?a ?i ?r ?b;\n   splits_at ?a ?i ?\\<alpha> ?N ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> fst ?r = ?N \\<and> is_nonterminal ?N\n  splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. is_nonterminal N", "by auto"], ["proof (state)\nthis:\n  is_nonterminal N\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "with t_possible_locations terminal"], ["proof (chain)\npicking this:\n  t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>\n  is_terminal t\n  is_nonterminal N", "have t_locations: \"t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>\""], ["proof (prove)\nusing this:\n  t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>\n  is_terminal t\n  is_nonterminal N\n\ngoal (1 subgoal):\n 1. t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>", "using is_terminal_nonterminal"], ["proof (prove)\nusing this:\n  t \\<in> set \\<alpha> \\<or> t = N \\<or> t \\<in> set \\<beta>\n  is_terminal t\n  is_nonterminal N\n  \\<lbrakk>is_terminal ?x; is_nonterminal ?x\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>", "by blast"], ["proof (state)\nthis:\n  t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "from Derives1 split_u"], ["proof (chain)\npicking this:\n  Derives1 u i r v\n  splits_at u i \\<alpha> N \\<beta>", "have \"v = \\<alpha> @ (snd r) @ \\<beta>\""], ["proof (prove)\nusing this:\n  Derives1 u i r v\n  splits_at u i \\<alpha> N \\<beta>\n\ngoal (1 subgoal):\n 1. v = \\<alpha> @ snd r @ \\<beta>", "by (simp add: splits_at_combine_dest)"], ["proof (state)\nthis:\n  v = \\<alpha> @ snd r @ \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "with t_locations"], ["proof (chain)\npicking this:\n  t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>\n  v = \\<alpha> @ snd r @ \\<beta>", "show ?thesis"], ["proof (prove)\nusing this:\n  t \\<in> set \\<alpha> \\<or> t \\<in> set \\<beta>\n  v = \\<alpha> @ snd r @ \\<beta>\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "by auto"], ["proof (state)\nthis:\n  t \\<in> set v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_terminals_stay: \"Derivation u D v \\<Longrightarrow> t \\<in> set u \\<Longrightarrow> is_terminal t \\<Longrightarrow> t \\<in> set v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation u D v; t \\<in> set u; is_terminal t\\<rbrakk>\n    \\<Longrightarrow> t \\<in> set v", "proof (induct D arbitrary: u v)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u v.\n       \\<lbrakk>Derivation u [] v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v\n 2. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "case Nil"], ["proof (state)\nthis:\n  Derivation u [] v\n  t \\<in> set u\n  is_terminal t\n\ngoal (2 subgoals):\n 1. \\<And>u v.\n       \\<lbrakk>Derivation u [] v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v\n 2. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "thus ?case"], ["proof (prove)\nusing this:\n  Derivation u [] v\n  t \\<in> set u\n  is_terminal t\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "by auto"], ["proof (state)\nthis:\n  t \\<in> set v\n\ngoal (1 subgoal):\n 1. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "case (Cons d D)"], ["proof (state)\nthis:\n  \\<lbrakk>Derivation ?u D ?v; t \\<in> set ?u; is_terminal t\\<rbrakk>\n  \\<Longrightarrow> t \\<in> set ?v\n  Derivation u (d # D) v\n  t \\<in> set u\n  is_terminal t\n\ngoal (1 subgoal):\n 1. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>Derivation ?u D ?v; t \\<in> set ?u; is_terminal t\\<rbrakk>\n  \\<Longrightarrow> t \\<in> set ?v\n  Derivation u (d # D) v\n  t \\<in> set u\n  is_terminal t", "have \"\\<exists> x. Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?u D ?v; t \\<in> set ?u; is_terminal t\\<rbrakk>\n  \\<Longrightarrow> t \\<in> set ?v\n  Derivation u (d # D) v\n  t \\<in> set u\n  is_terminal t\n\ngoal (1 subgoal):\n 1. \\<exists>x. Derives1 u (fst d) (snd d) x \\<and> Derivation x D v", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\n\ngoal (1 subgoal):\n 1. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "then"], ["proof (chain)\npicking this:\n  \\<exists>x. Derives1 u (fst d) (snd d) x \\<and> Derivation x D v", "obtain x where x: \"Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\""], ["proof (prove)\nusing this:\n  \\<exists>x. Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        Derives1 u (fst d) (snd d) x \\<and>\n        Derivation x D v \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\n\ngoal (1 subgoal):\n 1. \\<And>a D u v.\n       \\<lbrakk>\\<And>u v.\n                   \\<lbrakk>Derivation u D v; t \\<in> set u;\n                    is_terminal t\\<rbrakk>\n                   \\<Longrightarrow> t \\<in> set v;\n        Derivation u (a # D) v; t \\<in> set u; is_terminal t\\<rbrakk>\n       \\<Longrightarrow> t \\<in> set v", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set v", "using Cons Derives1_terminals_stay x"], ["proof (prove)\nusing this:\n  \\<lbrakk>Derivation ?u D ?v; t \\<in> set ?u; is_terminal t\\<rbrakk>\n  \\<Longrightarrow> t \\<in> set ?v\n  Derivation u (d # D) v\n  t \\<in> set u\n  is_terminal t\n  \\<lbrakk>Derives1 ?u ?i ?r ?v; ?t \\<in> set ?u; is_terminal ?t\\<rbrakk>\n  \\<Longrightarrow> ?t \\<in> set ?v\n  Derives1 u (fst d) (snd d) x \\<and> Derivation x D v\n\ngoal (1 subgoal):\n 1. t \\<in> set v", "by blast"], ["proof (state)\nthis:\n  t \\<in> set v\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Derivation_empty_no_terminals: \"Derivation u D [] \\<Longrightarrow> t \\<in> set u \\<Longrightarrow> is_nonterminal t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Derivation u D []; t \\<in> set u\\<rbrakk>\n    \\<Longrightarrow> is_nonterminal t", "by (metis Ball_set Derivation_implies_derives Derivation_terminals_stay \n    derives_is_sentence is_sentence_def is_symbol_distinct list.pred_inject(1))"], ["", "lemma mono_subset_elem: \"mono f \\<Longrightarrow> A \\<subseteq> B \\<Longrightarrow> x \\<in> f A \\<Longrightarrow> x \\<in> f B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>mono f; A \\<subseteq> B; x \\<in> f A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> f B", "using mono_def"], ["proof (prove)\nusing this:\n  mono ?f = (\\<forall>x y. x \\<le> y \\<longrightarrow> ?f x \\<le> ?f y)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>mono f; A \\<subseteq> B; x \\<in> f A\\<rbrakk>\n    \\<Longrightarrow> x \\<in> f B", "by blast"], ["", "lemma wellformed_inc_dot: \"wellformed_item x \\<Longrightarrow> item_dot x + d \\<le> length (item_rhs x) \\<Longrightarrow>\n  wellformed_item(inc_dot d x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wellformed_item x;\n     item_dot x + d \\<le> length (item_rhs x)\\<rbrakk>\n    \\<Longrightarrow> wellformed_item (inc_dot d x)", "by (simp add: inc_dot_def item_rhs_def wellformed_item_def)"], ["", "lemma init_item_dot[simp]: \"item_dot (init_item r k) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot (init_item r k) = 0", "by (simp add: init_item_def)"], ["", "lemma init_item_rhs[simp]: \"item_rhs (init_item r k) = snd r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (init_item r k) = snd r", "by (simp add: init_item_def item_rhs_def)"], ["", "lemma init_item_\\<beta>[simp]: \"item_\\<beta> (init_item r k) = snd r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> (init_item r k) = snd r", "by (simp add: item_\\<beta>_def)"], ["", "lemma mono_\\<pi>: \"mono (\\<pi> k T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<pi> k T)", "by (simp add: \\<pi>_regular regular_implies_mono)"], ["", "lemma \\<pi>_subset_elem_trans: \n  assumes Y: \"Y \\<subseteq> \\<pi> k T X\"\n  assumes z: \"z \\<in> \\<pi> k T Y\"\n  shows \"z \\<in>  \\<pi> k T X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "from Y"], ["proof (chain)\npicking this:\n  Y \\<subseteq> \\<pi> k T X", "have \"\\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)\""], ["proof (prove)\nusing this:\n  Y \\<subseteq> \\<pi> k T X\n\ngoal (1 subgoal):\n 1. \\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)", "by (simp add: monoD mono_\\<pi>)"], ["proof (state)\nthis:\n  \\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "then"], ["proof (chain)\npicking this:\n  \\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)", "have \"\\<pi> k T Y \\<subseteq> \\<pi> k T X\""], ["proof (prove)\nusing this:\n  \\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. \\<pi> k T Y \\<subseteq> \\<pi> k T X", "using \\<pi>_idempotent"], ["proof (prove)\nusing this:\n  \\<pi> k T Y \\<subseteq> \\<pi> k T (\\<pi> k T X)\n  \\<pi> ?k ?T (\\<pi> ?k ?T ?I) = \\<pi> ?k ?T ?I\n\ngoal (1 subgoal):\n 1. \\<pi> k T Y \\<subseteq> \\<pi> k T X", "by blast"], ["proof (state)\nthis:\n  \\<pi> k T Y \\<subseteq> \\<pi> k T X\n\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "with z"], ["proof (chain)\npicking this:\n  z \\<in> \\<pi> k T Y\n  \\<pi> k T Y \\<subseteq> \\<pi> k T X", "show ?thesis"], ["proof (prove)\nusing this:\n  z \\<in> \\<pi> k T Y\n  \\<pi> k T Y \\<subseteq> \\<pi> k T X\n\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "using contra_subsetD"], ["proof (prove)\nusing this:\n  z \\<in> \\<pi> k T Y\n  \\<pi> k T Y \\<subseteq> \\<pi> k T X\n  \\<lbrakk>?A \\<subseteq> ?B; ?c \\<notin> ?B\\<rbrakk>\n  \\<Longrightarrow> ?c \\<notin> ?A\n\ngoal (1 subgoal):\n 1. z \\<in> \\<pi> k T X", "by blast"], ["proof (state)\nthis:\n  z \\<in> \\<pi> k T X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inc_dot_origin[simp]: \"item_origin (inc_dot d x) = item_origin x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_origin (inc_dot d x) = item_origin x", "by (simp add: inc_dot_def)"], ["", "lemma inc_dot_end[simp]: \"item_end (inc_dot d x) = item_end x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end (inc_dot d x) = item_end x", "by (simp add: inc_dot_def)"], ["", "lemma inc_dot_rhs[simp]: \"item_rhs (inc_dot d x) = item_rhs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs (inc_dot d x) = item_rhs x", "by (simp add: inc_dot_def item_rhs_def)"], ["", "lemma inc_dot_dot[simp]: \"item_dot (inc_dot d x) = item_dot x + d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot (inc_dot d x) = item_dot x + d", "by (simp add: inc_dot_def)"], ["", "lemma inc_dot_nonterminal[simp]: \"item_nonterminal (inc_dot d x) = item_nonterminal x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_nonterminal (inc_dot d x) = item_nonterminal x", "by (simp add: inc_dot_def item_nonterminal_def)"], ["", "lemma Predict_subset_\\<pi>: \"Predict k X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "have \"setmonotone (\\<pi> k T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setmonotone (\\<pi> k T)", "by (simp add: \\<pi>_regular regular_implies_setmonotone)"], ["proof (state)\nthis:\n  setmonotone (\\<pi> k T)\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "then"], ["proof (chain)\npicking this:\n  setmonotone (\\<pi> k T)", "have s: \"X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\nusing this:\n  setmonotone (\\<pi> k T)\n\ngoal (1 subgoal):\n 1. X \\<subseteq> \\<pi> k T X", "by (simp add: subset_setmonotone)"], ["proof (state)\nthis:\n  X \\<subseteq> \\<pi> k T X\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "have \"mono (Predict k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Predict k)", "by (simp add: Predict_regular regular_implies_mono)"], ["proof (state)\nthis:\n  mono (Predict k)\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "with s"], ["proof (chain)\npicking this:\n  X \\<subseteq> \\<pi> k T X\n  mono (Predict k)", "have \"Predict k X \\<subseteq> Predict k (\\<pi> k T X)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> \\<pi> k T X\n  mono (Predict k)\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> Predict k (\\<pi> k T X)", "by (simp add: monoD)"], ["proof (state)\nthis:\n  Predict k X \\<subseteq> Predict k (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "then"], ["proof (chain)\npicking this:\n  Predict k X \\<subseteq> Predict k (\\<pi> k T X)", "show \"Predict k X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\nusing this:\n  Predict k X \\<subseteq> Predict k (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. Predict k X \\<subseteq> \\<pi> k T X", "by (simp add: Predict_\\<pi>_fix)"], ["proof (state)\nthis:\n  Predict k X \\<subseteq> \\<pi> k T X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Complete_subset_\\<pi>: \"Complete k X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "have \"setmonotone (\\<pi> k T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. setmonotone (\\<pi> k T)", "by (simp add: \\<pi>_regular regular_implies_setmonotone)"], ["proof (state)\nthis:\n  setmonotone (\\<pi> k T)\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "then"], ["proof (chain)\npicking this:\n  setmonotone (\\<pi> k T)", "have s: \"X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\nusing this:\n  setmonotone (\\<pi> k T)\n\ngoal (1 subgoal):\n 1. X \\<subseteq> \\<pi> k T X", "by (simp add: subset_setmonotone)"], ["proof (state)\nthis:\n  X \\<subseteq> \\<pi> k T X\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "have \"mono (Complete k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (Complete k)", "by (simp add: Complete_regular regular_implies_mono)"], ["proof (state)\nthis:\n  mono (Complete k)\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "with s"], ["proof (chain)\npicking this:\n  X \\<subseteq> \\<pi> k T X\n  mono (Complete k)", "have \"Complete k X \\<subseteq> Complete k (\\<pi> k T X)\""], ["proof (prove)\nusing this:\n  X \\<subseteq> \\<pi> k T X\n  mono (Complete k)\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> Complete k (\\<pi> k T X)", "by (simp add: monoD)"], ["proof (state)\nthis:\n  Complete k X \\<subseteq> Complete k (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "then"], ["proof (chain)\npicking this:\n  Complete k X \\<subseteq> Complete k (\\<pi> k T X)", "show \"Complete k X \\<subseteq> \\<pi> k T X\""], ["proof (prove)\nusing this:\n  Complete k X \\<subseteq> Complete k (\\<pi> k T X)\n\ngoal (1 subgoal):\n 1. Complete k X \\<subseteq> \\<pi> k T X", "by (simp add: Complete_\\<pi>_fix)"], ["proof (state)\nthis:\n  Complete k X \\<subseteq> \\<pi> k T X\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inc_inc_dot[simp]: \"inc_dot a (inc_dot b x) = inc_dot (a + b) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot a (inc_dot b x) = inc_dot (a + b) x", "by (simp add: inc_dot_def)"], ["", "lemma thmD6_Left: \"wellformed_item x \\<Longrightarrow> item_\\<beta> x = \\<delta> @ \\<omega> \\<Longrightarrow> item_end x = k \\<Longrightarrow> \n  LeftDerivation \\<delta> D [] \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n     item_end x = k; LeftDerivation \\<delta> D []\\<rbrakk>\n    \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "proof (induct \"length D\" arbitrary: x \\<delta> \\<omega> D rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>D x \\<delta> \\<omega>.\n       \\<lbrakk>\\<And>Da x \\<delta> \\<omega>.\n                   \\<lbrakk>length Da < length D; wellformed_item x;\n                    item_\\<beta> x = \\<delta> @ \\<omega>; item_end x = k;\n                    LeftDerivation \\<delta> Da []\\<rbrakk>\n                   \\<Longrightarrow> inc_dot (length \\<delta>) x\n                                     \\<in> \\<pi> k {} {x};\n        wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n        item_end x = k; LeftDerivation \\<delta> D []\\<rbrakk>\n       \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "case less"], ["proof (state)\nthis:\n  \\<lbrakk>length ?D < length D; wellformed_item ?x;\n   item_\\<beta> ?x = ?\\<delta> @ ?\\<omega>; item_end ?x = k;\n   LeftDerivation ?\\<delta> ?D []\\<rbrakk>\n  \\<Longrightarrow> inc_dot (length ?\\<delta>) ?x \\<in> \\<pi> k {} {?x}\n  wellformed_item x\n  item_\\<beta> x = \\<delta> @ \\<omega>\n  item_end x = k\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. \\<And>D x \\<delta> \\<omega>.\n       \\<lbrakk>\\<And>Da x \\<delta> \\<omega>.\n                   \\<lbrakk>length Da < length D; wellformed_item x;\n                    item_\\<beta> x = \\<delta> @ \\<omega>; item_end x = k;\n                    LeftDerivation \\<delta> Da []\\<rbrakk>\n                   \\<Longrightarrow> inc_dot (length \\<delta>) x\n                                     \\<in> \\<pi> k {} {x};\n        wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n        item_end x = k; LeftDerivation \\<delta> D []\\<rbrakk>\n       \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"length \\<delta> = 0 \\<or> length \\<delta> = 1 \\<or> length \\<delta> \\<ge> 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length \\<delta> = 0 \\<or>\n    length \\<delta> = 1 \\<or> 2 \\<le> length \\<delta>", "by arith"], ["proof (state)\nthis:\n  length \\<delta> = 0 \\<or>\n  length \\<delta> = 1 \\<or> 2 \\<le> length \\<delta>\n\ngoal (1 subgoal):\n 1. \\<And>D x \\<delta> \\<omega>.\n       \\<lbrakk>\\<And>Da x \\<delta> \\<omega>.\n                   \\<lbrakk>length Da < length D; wellformed_item x;\n                    item_\\<beta> x = \\<delta> @ \\<omega>; item_end x = k;\n                    LeftDerivation \\<delta> Da []\\<rbrakk>\n                   \\<Longrightarrow> inc_dot (length \\<delta>) x\n                                     \\<in> \\<pi> k {} {x};\n        wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n        item_end x = k; LeftDerivation \\<delta> D []\\<rbrakk>\n       \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  length \\<delta> = 0 \\<or>\n  length \\<delta> = 1 \\<or> 2 \\<le> length \\<delta>", "show ?case"], ["proof (prove)\nusing this:\n  length \\<delta> = 0 \\<or>\n  length \\<delta> = 1 \\<or> 2 \\<le> length \\<delta>\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "proof (induct rule: disjCases3)"], ["proof (state)\ngoal (3 subgoals):\n 1. length \\<delta> = 0 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 3. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "case 1"], ["proof (state)\nthis:\n  length \\<delta> = 0\n\ngoal (3 subgoals):\n 1. length \\<delta> = 0 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 3. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  length \\<delta> = 0", "have \"\\<delta> = []\""], ["proof (prove)\nusing this:\n  length \\<delta> = 0\n\ngoal (1 subgoal):\n 1. \\<delta> = []", "by auto"], ["proof (state)\nthis:\n  \\<delta> = []\n\ngoal (3 subgoals):\n 1. length \\<delta> = 0 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 3. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<delta> = []", "show ?case"], ["proof (prove)\nusing this:\n  \\<delta> = []\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "by (simp add: \\<pi>_regular elem_setmonotone regular_implies_setmonotone)"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "case 2"], ["proof (state)\nthis:\n  length \\<delta> = 1\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  length \\<delta> = 1", "have \"\\<exists> N. \\<delta> = [N]\""], ["proof (prove)\nusing this:\n  length \\<delta> = 1\n\ngoal (1 subgoal):\n 1. \\<exists>N. \\<delta> = [N]", "by (metis One_nat_def append_self_conv2 drop_all id_take_nth_drop \n            le_numeral_extra(4) lessI take_0)"], ["proof (state)\nthis:\n  \\<exists>N. \\<delta> = [N]\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<exists>N. \\<delta> = [N]", "obtain N where N: \"\\<delta> = [N]\""], ["proof (prove)\nusing this:\n  \\<exists>N. \\<delta> = [N]\n\ngoal (1 subgoal):\n 1. (\\<And>N. \\<delta> = [N] \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<delta> = [N]\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<delta> = [N]", "have \"N \\<in> set \\<delta>\""], ["proof (prove)\nusing this:\n  \\<delta> = [N]\n\ngoal (1 subgoal):\n 1. N \\<in> set \\<delta>", "by auto"], ["proof (state)\nthis:\n  N \\<in> set \\<delta>\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  N \\<in> set \\<delta>", "have is_nonterminal_N: \"is_nonterminal N\""], ["proof (prove)\nusing this:\n  N \\<in> set \\<delta>\n\ngoal (1 subgoal):\n 1. is_nonterminal N", "using Derivation_empty_no_terminals \n          LeftDerivation_implies_Derivation less.prems(4)"], ["proof (prove)\nusing this:\n  N \\<in> set \\<delta>\n  \\<lbrakk>Derivation ?u ?D []; ?t \\<in> set ?u\\<rbrakk>\n  \\<Longrightarrow> is_nonterminal ?t\n  LeftDerivation ?a ?D ?b \\<Longrightarrow> Derivation ?a ?D ?b\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. is_nonterminal N", "by blast"], ["proof (state)\nthis:\n  is_nonterminal N\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"D \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. D \\<noteq> []", "using LeftDerivation.elims(2) N less.prems(4)"], ["proof (prove)\nusing this:\n  \\<lbrakk>LeftDerivation ?x ?xa ?xb;\n   \\<And>a b.\n      \\<lbrakk>?x = a; ?xa = []; ?xb = b; a = b\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>a d D b.\n      \\<lbrakk>?x = a; ?xa = d # D; ?xb = b;\n       \\<exists>x.\n          LeftDerives1 a (fst d) (snd d) x \\<and>\n          LeftDerivation x D b\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  \\<delta> = [N]\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. D \\<noteq> []", "by blast"], ["proof (state)\nthis:\n  D \\<noteq> []\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  D \\<noteq> []", "have \"\\<exists> e E. D = e#E\""], ["proof (prove)\nusing this:\n  D \\<noteq> []\n\ngoal (1 subgoal):\n 1. \\<exists>e E. D = e # E", "using LeftDerivation.elims(2) less.prems(4)"], ["proof (prove)\nusing this:\n  D \\<noteq> []\n  \\<lbrakk>LeftDerivation ?x ?xa ?xb;\n   \\<And>a b.\n      \\<lbrakk>?x = a; ?xa = []; ?xb = b; a = b\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>a d D b.\n      \\<lbrakk>?x = a; ?xa = d # D; ?xb = b;\n       \\<exists>x.\n          LeftDerives1 a (fst d) (snd d) x \\<and>\n          LeftDerivation x D b\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. \\<exists>e E. D = e # E", "by blast"], ["proof (state)\nthis:\n  \\<exists>e E. D = e # E\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<exists>e E. D = e # E", "obtain e E where eE: \"D = e#E\""], ["proof (prove)\nusing this:\n  \\<exists>e E. D = e # E\n\ngoal (1 subgoal):\n 1. (\\<And>e E. D = e # E \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  D = e # E\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  D = e # E", "have \"\\<exists> \\<gamma>. LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and> \n          LeftDerivation \\<gamma> E []\""], ["proof (prove)\nusing this:\n  D = e # E\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n       LeftDerivation \\<gamma> E []", "using LeftDerivation.simps(2) less.prems(4)"], ["proof (prove)\nusing this:\n  D = e # E\n  LeftDerivation ?a (?d # ?D) ?b =\n  (\\<exists>x.\n      LeftDerives1 ?a (fst ?d) (snd ?d) x \\<and> LeftDerivation x ?D ?b)\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. \\<exists>\\<gamma>.\n       LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n       LeftDerivation \\<gamma> E []", "by blast"], ["proof (state)\nthis:\n  \\<exists>\\<gamma>.\n     LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n     LeftDerivation \\<gamma> E []\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<gamma>.\n     LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n     LeftDerivation \\<gamma> E []", "obtain \\<gamma> where \\<gamma>: \"LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and> LeftDerivation \\<gamma> E []\""], ["proof (prove)\nusing this:\n  \\<exists>\\<gamma>.\n     LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n     LeftDerivation \\<gamma> E []\n\ngoal (1 subgoal):\n 1. (\\<And>\\<gamma>.\n        LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n        LeftDerivation \\<gamma> E [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n  LeftDerivation \\<gamma> E []\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "with N"], ["proof (chain)\npicking this:\n  \\<delta> = [N]\n  LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n  LeftDerivation \\<gamma> E []", "have \\<gamma>_def: \"\\<gamma> = snd (snd e)\""], ["proof (prove)\nusing this:\n  \\<delta> = [N]\n  LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n  LeftDerivation \\<gamma> E []\n\ngoal (1 subgoal):\n 1. \\<gamma> = snd (snd e)", "by (metis \"2.hyps\" Derives1_split LeftDerives1_def One_nat_def append_Cons \n            append_Nil append_Nil2 leftmost_def length_0_conv less_nat_zero_code linorder_neqE_nat \n            list.inject not_less_eq)"], ["proof (state)\nthis:\n  \\<gamma> = snd (snd e)\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have next_symbol_x: \"next_symbol x = Some N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol x = Some N", "using N less.prems(1) less.prems(2) next_symbol_def next_symbol_starts_item_\\<beta> \n            wellformed_complete_item_\\<beta>"], ["proof (prove)\nusing this:\n  \\<delta> = [N]\n  wellformed_item x\n  item_\\<beta> x = \\<delta> @ \\<omega>\n  next_symbol ?x =\n  (if is_complete ?x then None else Some (item_rhs ?x ! item_dot ?x))\n  \\<lbrakk>wellformed_item ?x; next_symbol ?x = Some ?t\\<rbrakk>\n  \\<Longrightarrow> \\<exists>\\<delta>. item_\\<beta> ?x = ?t # \\<delta>\n  \\<lbrakk>wellformed_item ?x; is_complete ?x\\<rbrakk>\n  \\<Longrightarrow> item_\\<beta> ?x = []\n\ngoal (1 subgoal):\n 1. next_symbol x = Some N", "by fastforce"], ["proof (state)\nthis:\n  next_symbol x = Some N\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have x_subset: \"{x} \\<subseteq> \\<pi> k {} {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x} \\<subseteq> \\<pi> k {} {x}", "using \\<pi>_regular regular_implies_setmonotone subset_setmonotone"], ["proof (prove)\nusing this:\n  regular (\\<pi> ?k ?T)\n  regular ?f \\<Longrightarrow> setmonotone ?f\n  setmonotone ?f \\<Longrightarrow> ?X \\<subseteq> ?f ?X\n\ngoal (1 subgoal):\n 1. {x} \\<subseteq> \\<pi> k {} {x}", "by blast"], ["proof (state)\nthis:\n  {x} \\<subseteq> \\<pi> k {} {x}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?y = \"init_item (snd e) k\""], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?y \\<in> Predict k {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init_item (snd e) k \\<in> Predict k {x}", "apply (simp add: Predict_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init_item (snd e) k = x \\<or>\n    (\\<exists>a b.\n        init_item (snd e) k = init_item (a, b) k \\<and>\n        (a, b) \\<in> \\<RR> \\<and>\n        (\\<exists>x. x \\<in> bin {x} k \\<and> next_symbol x = Some a))", "apply (rule disjI2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       init_item (snd e) k = init_item (a, b) k \\<and>\n       (a, b) \\<in> \\<RR> \\<and>\n       (\\<exists>x. x \\<in> bin {x} k \\<and> next_symbol x = Some a)", "apply (rule_tac x=\"fst (snd e)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b.\n       init_item (snd e) k = init_item (fst (snd e), b) k \\<and>\n       (fst (snd e), b) \\<in> \\<RR> \\<and>\n       (\\<exists>x.\n           x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e)))", "apply (rule_tac x=\"snd (snd e)\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. init_item (snd e) k = init_item (fst (snd e), snd (snd e)) k \\<and>\n    (fst (snd e), snd (snd e)) \\<in> \\<RR> \\<and>\n    (\\<exists>x.\n        x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e)))", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. snd e \\<in> \\<RR>\n 2. \\<exists>x. x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e))", "using Derives1_rule LeftDerives1_implies_Derives1 \\<gamma>"], ["proof (prove)\nusing this:\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?r \\<in> \\<RR>\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n  LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n  LeftDerivation \\<gamma> E []\n\ngoal (2 subgoals):\n 1. snd e \\<in> \\<RR>\n 2. \\<exists>x. x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e))", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> bin {x} k \\<and> next_symbol x = Some (fst (snd e))", "by (metis (mono_tags, lifting) Derives1_split LeftDerives1_def N \\<gamma> \n              append.simps(1) append.simps(2) bin_def is_nonterminal_N leftmost_cons_nonterminal \n              leftmost_unique length_greater_0_conv less.prems(3) less_nat_zero_code \n              list.inject mem_Collect_eq next_symbol_x singletonI)"], ["proof (state)\nthis:\n  init_item (snd e) k \\<in> Predict k {x}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  init_item (snd e) k \\<in> Predict k {x}", "have y_dom: \"?y \\<in> \\<pi> k {} {x}\""], ["proof (prove)\nusing this:\n  init_item (snd e) k \\<in> Predict k {x}\n\ngoal (1 subgoal):\n 1. init_item (snd e) k \\<in> \\<pi> k {} {x}", "using Predict_subset_\\<pi>"], ["proof (prove)\nusing this:\n  init_item (snd e) k \\<in> Predict k {x}\n  Predict ?k ?X \\<subseteq> \\<pi> ?k ?T ?X\n\ngoal (1 subgoal):\n 1. init_item (snd e) k \\<in> \\<pi> k {} {x}", "by blast"], ["proof (state)\nthis:\n  init_item (snd e) k \\<in> \\<pi> k {} {x}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?z = \"inc_dot (length \\<gamma>) ?y\""], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"item_dot ?y = 0\" and \"item_rhs ?y = \\<gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_dot (init_item (snd e) k) = 0 &&&\n    item_rhs (init_item (snd e) k) = \\<gamma>", "by (auto simp add: \\<gamma>_def)"], ["proof (state)\nthis:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "note y_props = this"], ["proof (state)\nthis:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>", "have wellformed_y: \"wellformed_item ?y\""], ["proof (prove)\nusing this:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n\ngoal (1 subgoal):\n 1. wellformed_item (init_item (snd e) k)", "using Derives1_rule LeftDerives1_implies_Derives1 \\<gamma> less.prems(1) less.prems(3) \n          wellformed_init_item wellformed_item_def"], ["proof (prove)\nusing this:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n  Derives1 ?a ?i ?r ?b \\<Longrightarrow> ?r \\<in> \\<RR>\n  LeftDerives1 ?a ?i ?r ?b \\<Longrightarrow> Derives1 ?a ?i ?r ?b\n  LeftDerives1 \\<delta> (fst e) (snd e) \\<gamma> \\<and>\n  LeftDerivation \\<gamma> E []\n  wellformed_item x\n  item_end x = k\n  \\<lbrakk>?r \\<in> \\<RR>; ?k \\<le> length Doc\\<rbrakk>\n  \\<Longrightarrow> wellformed_item (init_item ?r ?k)\n  wellformed_item ?x =\n  (item_rule ?x \\<in> \\<RR> \\<and>\n   item_origin ?x \\<le> item_end ?x \\<and>\n   item_end ?x \\<le> length Doc \\<and>\n   item_dot ?x \\<le> length (item_rhs ?x))\n\ngoal (1 subgoal):\n 1. wellformed_item (init_item (snd e) k)", "by blast"], ["proof (state)\nthis:\n  wellformed_item (init_item (snd e) k)\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "with y_props"], ["proof (chain)\npicking this:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n  wellformed_item (init_item (snd e) k)", "have wellformed_z: \"wellformed_item ?z\""], ["proof (prove)\nusing this:\n  item_dot (init_item (snd e) k) = 0\n  item_rhs (init_item (snd e) k) = \\<gamma>\n  wellformed_item (init_item (snd e) k)\n\ngoal (1 subgoal):\n 1. wellformed_item (inc_dot (length \\<gamma>) (init_item (snd e) k))", "by (simp add: wellformed_inc_dot)"], ["proof (state)\nthis:\n  wellformed_item (inc_dot (length \\<gamma>) (init_item (snd e) k))\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have item_\\<beta>_y: \"item_\\<beta> ?y = \\<gamma> @ []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> (init_item (snd e) k) = \\<gamma> @ []", "using item_rhs_split y_props(2)"], ["proof (prove)\nusing this:\n  item_rhs ?x = item_\\<alpha> ?x @ item_\\<beta> ?x\n  item_rhs (init_item (snd e) k) = \\<gamma>\n\ngoal (1 subgoal):\n 1. item_\\<beta> (init_item (snd e) k) = \\<gamma> @ []", "by auto"], ["proof (state)\nthis:\n  item_\\<beta> (init_item (snd e) k) = \\<gamma> @ []\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have is_complete_z: \"is_complete ?z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_complete (inc_dot (length \\<gamma>) (init_item (snd e) k))", "by (simp add: is_complete_def \\<gamma>_def)"], ["proof (state)\nthis:\n  is_complete (inc_dot (length \\<gamma>) (init_item (snd e) k))\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?z \\<in> \\<pi> k {} {?y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<gamma>) (init_item (snd e) k)\n    \\<in> \\<pi> k {} {init_item (snd e) k}", "apply (rule less(1)[where D=\"E\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. length E < length D\n 2. wellformed_item (init_item (snd e) k)\n 3. item_\\<beta> (init_item (snd e) k) = \\<gamma> @ ?\\<omega>\n 4. item_end (init_item (snd e) k) = k\n 5. LeftDerivation \\<gamma> E []", "apply (auto simp add: eE wellformed_y \\<gamma>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (snd e) = \\<gamma> @ ?\\<omega>", "apply (simp add: \\<gamma>_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  inc_dot (length \\<gamma>) (init_item (snd e) k)\n  \\<in> \\<pi> k {} {init_item (snd e) k}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "with y_dom"], ["proof (chain)\npicking this:\n  init_item (snd e) k \\<in> \\<pi> k {} {x}\n  inc_dot (length \\<gamma>) (init_item (snd e) k)\n  \\<in> \\<pi> k {} {init_item (snd e) k}", "have z_dom: \"?z \\<in> \\<pi> k {} {x}\""], ["proof (prove)\nusing this:\n  init_item (snd e) k \\<in> \\<pi> k {} {x}\n  inc_dot (length \\<gamma>) (init_item (snd e) k)\n  \\<in> \\<pi> k {} {init_item (snd e) k}\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<gamma>) (init_item (snd e) k) \\<in> \\<pi> k {} {x}", "using \\<pi>_subset_elem_trans empty_subsetI insert_subset"], ["proof (prove)\nusing this:\n  init_item (snd e) k \\<in> \\<pi> k {} {x}\n  inc_dot (length \\<gamma>) (init_item (snd e) k)\n  \\<in> \\<pi> k {} {init_item (snd e) k}\n  \\<lbrakk>?Y \\<subseteq> \\<pi> ?k ?T ?X; ?z \\<in> \\<pi> ?k ?T ?Y\\<rbrakk>\n  \\<Longrightarrow> ?z \\<in> \\<pi> ?k ?T ?X\n  {} \\<subseteq> ?A\n  (insert ?x ?A \\<subseteq> ?B) = (?x \\<in> ?B \\<and> ?A \\<subseteq> ?B)\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<gamma>) (init_item (snd e) k) \\<in> \\<pi> k {} {x}", "by blast"], ["proof (state)\nthis:\n  inc_dot (length \\<gamma>) (init_item (snd e) k) \\<in> \\<pi> k {} {x}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?w = \"inc_dot (length \\<delta>) x\""], ["proof (state)\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?w \\<in> Complete k {x, ?z}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x\n    \\<in> Complete k {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}", "apply (simp add: Complete_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x = x \\<or>\n    inc_dot (length \\<delta>) x =\n    inc_dot (length \\<gamma>) (init_item (snd e) k) \\<or>\n    (\\<exists>x.\n        inc_dot (length \\<delta>) x = inc_item x k \\<and>\n        (\\<exists>y.\n            x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                     (item_origin y) \\<and>\n            y \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                     k \\<and>\n            is_complete y \\<and> next_symbol x = Some (item_nonterminal y)))", "apply (rule_tac disjI2)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       inc_dot (length \\<delta>) x = inc_item x k \\<and>\n       (\\<exists>y.\n           x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                    (item_origin y) \\<and>\n           y \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                    k \\<and>\n           is_complete y \\<and> next_symbol x = Some (item_nonterminal y))", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x = inc_item x k \\<and>\n    (\\<exists>y.\n        x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                 (item_origin y) \\<and>\n        y \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                 k \\<and>\n        is_complete y \\<and> next_symbol x = Some (item_nonterminal y))", "apply (auto simp add: 2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. inc_dot (Suc 0) x = inc_item x k\n 2. \\<exists>y.\n       x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                (item_origin y) \\<and>\n       y \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                k \\<and>\n       is_complete y \\<and> next_symbol x = Some (item_nonterminal y)", "apply (simp add: inc_dot_def inc_item_def less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                (item_origin y) \\<and>\n       y \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n                k \\<and>\n       is_complete y \\<and> next_symbol x = Some (item_nonterminal y)", "apply (rule_tac x=\"?z\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n             (item_origin\n               (inc_dot (length \\<gamma>) (init_item (snd e) k))) \\<and>\n    inc_dot (length \\<gamma>) (init_item (snd e) k)\n    \\<in> bin {x, inc_dot (length \\<gamma>) (init_item (snd e) k)} k \\<and>\n    is_complete (inc_dot (length \\<gamma>) (init_item (snd e) k)) \\<and>\n    next_symbol x =\n    Some\n     (item_nonterminal (inc_dot (length \\<gamma>) (init_item (snd e) k)))", "apply (auto simp add: bin_def less is_complete_z next_symbol_x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. N = fst (snd e)", "by (metis Derives1_split LeftDerives1_def N \\<gamma> append_Cons append_self_conv2 \n          is_nonterminal_N leftmost_cons_nonterminal leftmost_unique length_0_conv list.inject)"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x\n  \\<in> Complete k {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  inc_dot (length \\<delta>) x\n  \\<in> Complete k {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}", "have \"?w \\<in> \\<pi> k {} {x, ?z}\""], ["proof (prove)\nusing this:\n  inc_dot (length \\<delta>) x\n  \\<in> Complete k {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x\n    \\<in> \\<pi> k {} {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}", "using Complete_subset_\\<pi>"], ["proof (prove)\nusing this:\n  inc_dot (length \\<delta>) x\n  \\<in> Complete k {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n  Complete ?k ?X \\<subseteq> \\<pi> ?k ?T ?X\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x\n    \\<in> \\<pi> k {} {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}", "by blast"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x\n  \\<in> \\<pi> k {} {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n\ngoal (2 subgoals):\n 1. length \\<delta> = 1 \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n 2. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  inc_dot (length \\<delta>) x\n  \\<in> \\<pi> k {} {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}", "show ?case"], ["proof (prove)\nusing this:\n  inc_dot (length \\<delta>) x\n  \\<in> \\<pi> k {} {x, inc_dot (length \\<gamma>) (init_item (snd e) k)}\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "by (meson \\<pi>_subset_elem_trans insert_subset x_subset z_dom)"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "case 3"], ["proof (state)\nthis:\n  2 \\<le> length \\<delta>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  2 \\<le> length \\<delta>", "have \"\\<exists> N \\<alpha>. \\<delta> = [N] @ \\<alpha>\""], ["proof (prove)\nusing this:\n  2 \\<le> length \\<delta>\n\ngoal (1 subgoal):\n 1. \\<exists>N \\<alpha>. \\<delta> = [N] @ \\<alpha>", "by (metis append_Cons append_Nil count_terminals.cases le0 le_0_eq list.size(3) \n           numeral_le_iff semiring_norm(69))"], ["proof (state)\nthis:\n  \\<exists>N \\<alpha>. \\<delta> = [N] @ \\<alpha>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  \\<exists>N \\<alpha>. \\<delta> = [N] @ \\<alpha>", "obtain N \\<alpha> where \\<delta>_split: \"\\<delta> = [N] @ \\<alpha>\""], ["proof (prove)\nusing this:\n  \\<exists>N \\<alpha>. \\<delta> = [N] @ \\<alpha>\n\ngoal (1 subgoal):\n 1. (\\<And>N \\<alpha>.\n        \\<delta> = [N] @ \\<alpha> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<delta> = [N] @ \\<alpha>\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "with 3"], ["proof (chain)\npicking this:\n  2 \\<le> length \\<delta>\n  \\<delta> = [N] @ \\<alpha>", "have \\<alpha>_nonempty: \"\\<alpha> \\<noteq> []\""], ["proof (prove)\nusing this:\n  2 \\<le> length \\<delta>\n  \\<delta> = [N] @ \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> []", "by (metis (full_types) One_nat_def Suc_eq_plus1 append_Nil2 impossible_Cons length_Cons \n          list.size(3) nat_1_add_1)"], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"LeftDerivation ([N] @ \\<alpha>) D []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LeftDerivation ([N] @ \\<alpha>) D []", "using \\<delta>_split less.prems(4)"], ["proof (prove)\nusing this:\n  \\<delta> = [N] @ \\<alpha>\n  LeftDerivation \\<delta> D []\n\ngoal (1 subgoal):\n 1. LeftDerivation ([N] @ \\<alpha>) D []", "by blast"], ["proof (state)\nthis:\n  LeftDerivation ([N] @ \\<alpha>) D []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "from LeftDerivation_breakdown[OF this, simplified]"], ["proof (chain)\npicking this:\n  \\<exists>n.\n     LeftDerivation [N] (take n D) [] \\<and>\n     derivation_ge (drop n D) 0 \\<and> LeftDerivation \\<alpha> (drop n D) []", "obtain n where n: \"LeftDerivation [N] (take n D) [] \\<and> LeftDerivation \\<alpha> (drop n D) []\""], ["proof (prove)\nusing this:\n  \\<exists>n.\n     LeftDerivation [N] (take n D) [] \\<and>\n     derivation_ge (drop n D) 0 \\<and> LeftDerivation \\<alpha> (drop n D) []\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        LeftDerivation [N] (take n D) [] \\<and>\n        LeftDerivation \\<alpha> (drop n D) [] \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  LeftDerivation [N] (take n D) [] \\<and>\n  LeftDerivation \\<alpha> (drop n D) []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?E = \"take n D\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "from n"], ["proof (chain)\npicking this:\n  LeftDerivation [N] (take n D) [] \\<and>\n  LeftDerivation \\<alpha> (drop n D) []", "have E: \"LeftDerivation [N] ?E []\""], ["proof (prove)\nusing this:\n  LeftDerivation [N] (take n D) [] \\<and>\n  LeftDerivation \\<alpha> (drop n D) []\n\ngoal (1 subgoal):\n 1. LeftDerivation [N] (take n D) []", "by auto"], ["proof (state)\nthis:\n  LeftDerivation [N] (take n D) []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?F = \"drop n D\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "from n"], ["proof (chain)\npicking this:\n  LeftDerivation [N] (take n D) [] \\<and>\n  LeftDerivation \\<alpha> (drop n D) []", "have F: \"LeftDerivation \\<alpha> ?F []\""], ["proof (prove)\nusing this:\n  LeftDerivation [N] (take n D) [] \\<and>\n  LeftDerivation \\<alpha> (drop n D) []\n\ngoal (1 subgoal):\n 1. LeftDerivation \\<alpha> (drop n D) []", "by auto"], ["proof (state)\nthis:\n  LeftDerivation \\<alpha> (drop n D) []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have length_add: \"length ?E + length ?F = length D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (take n D) + length (drop n D) = length D", "by simp"], ["proof (state)\nthis:\n  length (take n D) + length (drop n D) = length D\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?E \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n D \\<noteq> []", "using E"], ["proof (prove)\nusing this:\n  LeftDerivation [N] (take n D) []\n\ngoal (1 subgoal):\n 1. take n D \\<noteq> []", "by force"], ["proof (state)\nthis:\n  take n D \\<noteq> []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  take n D \\<noteq> []", "have length_E_0: \"length ?E > 0\""], ["proof (prove)\nusing this:\n  take n D \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length (take n D)", "by auto"], ["proof (state)\nthis:\n  0 < length (take n D)\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?F \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop n D \\<noteq> []", "using F \\<alpha>_nonempty"], ["proof (prove)\nusing this:\n  LeftDerivation \\<alpha> (drop n D) []\n  \\<alpha> \\<noteq> []\n\ngoal (1 subgoal):\n 1. drop n D \\<noteq> []", "by force"], ["proof (state)\nthis:\n  drop n D \\<noteq> []\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  drop n D \\<noteq> []", "have length_F_0: \"length ?F > 0\""], ["proof (prove)\nusing this:\n  drop n D \\<noteq> []\n\ngoal (1 subgoal):\n 1. 0 < length (drop n D)", "by auto"], ["proof (state)\nthis:\n  0 < length (drop n D)\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "from length_add length_E_0 length_F_0"], ["proof (chain)\npicking this:\n  length (take n D) + length (drop n D) = length D\n  0 < length (take n D)\n  0 < length (drop n D)", "have \"length ?E < length D \\<and> length ?F < length D\""], ["proof (prove)\nusing this:\n  length (take n D) + length (drop n D) = length D\n  0 < length (take n D)\n  0 < length (drop n D)\n\ngoal (1 subgoal):\n 1. length (take n D) < length D \\<and> length (drop n D) < length D", "using add.commute nat_add_left_cancel_less nat_neq_iff not_add_less2"], ["proof (prove)\nusing this:\n  length (take n D) + length (drop n D) = length D\n  0 < length (take n D)\n  0 < length (drop n D)\n  ?a + ?b = ?b + ?a\n  (?k + ?m < ?k + ?n) = (?m < ?n)\n  (?m \\<noteq> ?n) = (?m < ?n \\<or> ?n < ?m)\n  \\<not> ?j + ?i < ?i\n\ngoal (1 subgoal):\n 1. length (take n D) < length D \\<and> length (drop n D) < length D", "by linarith"], ["proof (state)\nthis:\n  length (take n D) < length D \\<and> length (drop n D) < length D\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  length (take n D) < length D \\<and> length (drop n D) < length D", "have length_E: \"length ?E < length D\" and length_F: \"length ?F < length D\""], ["proof (prove)\nusing this:\n  length (take n D) < length D \\<and> length (drop n D) < length D\n\ngoal (1 subgoal):\n 1. length (take n D) < length D &&& length (drop n D) < length D", "by auto"], ["proof (state)\nthis:\n  length (take n D) < length D\n  length (drop n D) < length D\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?y = \"inc_dot (length [N]) x\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have y_dom: \"?y \\<in> \\<pi> k {} {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length [N]) x \\<in> \\<pi> k {} {x}", "apply (rule_tac less(1)[where D=\"?E\" and \\<omega>=\"\\<alpha>@\\<omega>\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. length (take n D) < length D\n 2. wellformed_item x\n 3. item_\\<beta> x = [N] @ \\<alpha> @ \\<omega>\n 4. item_end x = k\n 5. LeftDerivation [N] (take n D) []", "apply (rule length_E)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item x\n 2. item_\\<beta> x = [N] @ \\<alpha> @ \\<omega>\n 3. item_end x = k\n 4. LeftDerivation [N] (take n D) []", "by (auto simp add: less \\<delta>_split E)"], ["proof (state)\nthis:\n  inc_dot (length [N]) x \\<in> \\<pi> k {} {x}\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "let ?z = \"inc_dot (length \\<alpha>) ?y\""], ["proof (state)\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have wellformed_y: \"wellformed_item ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_item (inc_dot (length [N]) x)", "using \\<delta>_split is_complete_def less.prems(1) less.prems(2) wellformed_complete_item_\\<beta> \n          wellformed_inc_dot"], ["proof (prove)\nusing this:\n  \\<delta> = [N] @ \\<alpha>\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  wellformed_item x\n  item_\\<beta> x = \\<delta> @ \\<omega>\n  \\<lbrakk>wellformed_item ?x; is_complete ?x\\<rbrakk>\n  \\<Longrightarrow> item_\\<beta> ?x = []\n  \\<lbrakk>wellformed_item ?x;\n   item_dot ?x + ?d \\<le> length (item_rhs ?x)\\<rbrakk>\n  \\<Longrightarrow> wellformed_item (inc_dot ?d ?x)\n\ngoal (1 subgoal):\n 1. wellformed_item (inc_dot (length [N]) x)", "by fastforce"], ["proof (state)\nthis:\n  wellformed_item (inc_dot (length [N]) x)\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?z \\<in> \\<pi> k {} {?y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<alpha>) (inc_dot (length [N]) x)\n    \\<in> \\<pi> k {} {inc_dot (length [N]) x}", "apply (rule_tac less(1)[where D=\"?F\" and \\<omega>=\"\\<omega>\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. length (drop n D) < length D\n 2. wellformed_item (inc_dot (length [N]) x)\n 3. item_\\<beta> (inc_dot (length [N]) x) = \\<alpha> @ \\<omega>\n 4. item_end (inc_dot (length [N]) x) = k\n 5. LeftDerivation \\<alpha> (drop n D) []", "apply (rule length_F)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_item (inc_dot (length [N]) x)\n 2. item_\\<beta> (inc_dot (length [N]) x) = \\<alpha> @ \\<omega>\n 3. item_end (inc_dot (length [N]) x) = k\n 4. LeftDerivation \\<alpha> (drop n D) []", "apply (rule wellformed_y)"], ["proof (prove)\ngoal (3 subgoals):\n 1. item_\\<beta> (inc_dot (length [N]) x) = \\<alpha> @ \\<omega>\n 2. item_end (inc_dot (length [N]) x) = k\n 3. LeftDerivation \\<alpha> (drop n D) []", "apply (auto simp add: F less)"], ["proof (prove)\ngoal (1 subgoal):\n 1. item_\\<beta> (inc_dot (Suc 0) x) = \\<alpha> @ \\<omega>", "by (metis \\<delta>_split add.commute append_assoc append_eq_conv_conj drop_drop inc_dot_dot \n          inc_dot_rhs item_\\<beta>_def length_Cons less.prems(2) list.size(3))"], ["proof (state)\nthis:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x)\n  \\<in> \\<pi> k {} {inc_dot (length [N]) x}\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "then"], ["proof (chain)\npicking this:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x)\n  \\<in> \\<pi> k {} {inc_dot (length [N]) x}", "have z_dom: \"?z \\<in> \\<pi> k {} {x}\""], ["proof (prove)\nusing this:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x)\n  \\<in> \\<pi> k {} {inc_dot (length [N]) x}\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<alpha>) (inc_dot (length [N]) x) \\<in> \\<pi> k {} {x}", "using \\<pi>_subset_elem_trans y_dom"], ["proof (prove)\nusing this:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x)\n  \\<in> \\<pi> k {} {inc_dot (length [N]) x}\n  \\<lbrakk>?Y \\<subseteq> \\<pi> ?k ?T ?X; ?z \\<in> \\<pi> ?k ?T ?Y\\<rbrakk>\n  \\<Longrightarrow> ?z \\<in> \\<pi> ?k ?T ?X\n  inc_dot (length [N]) x \\<in> \\<pi> k {} {x}\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<alpha>) (inc_dot (length [N]) x) \\<in> \\<pi> k {} {x}", "by blast"], ["proof (state)\nthis:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) \\<in> \\<pi> k {} {x}\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "have \"?z = inc_dot (length \\<delta>) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_dot (length \\<alpha>) (inc_dot (length [N]) x) =\n    inc_dot (length \\<delta>) x", "by (simp add: \\<delta>_split)"], ["proof (state)\nthis:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) =\n  inc_dot (length \\<delta>) x\n\ngoal (1 subgoal):\n 1. 2 \\<le> length \\<delta> \\<Longrightarrow>\n    inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "with z_dom"], ["proof (chain)\npicking this:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) \\<in> \\<pi> k {} {x}\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) =\n  inc_dot (length \\<delta>) x", "show ?case"], ["proof (prove)\nusing this:\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) \\<in> \\<pi> k {} {x}\n  inc_dot (length \\<alpha>) (inc_dot (length [N]) x) =\n  inc_dot (length \\<delta>) x\n\ngoal (1 subgoal):\n 1. inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "by auto"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derives_empty_implies_LeftDerivation: \"derives \\<delta> [] \\<Longrightarrow> \\<exists> D. LeftDerivation \\<delta> D []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derives \\<delta> [] \\<Longrightarrow>\n    \\<exists>D. LeftDerivation \\<delta> D []", "using derives_implies_leftderives is_word_def leftderives_implies_LeftDerivation \n    list.pred_inject(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>derives ?a ?b; is_word ?b\\<rbrakk>\n  \\<Longrightarrow> leftderives ?a ?b\n  is_word ?s = list_all is_terminal ?s\n  leftderives ?a ?b \\<Longrightarrow> \\<exists>D. LeftDerivation ?a D ?b\n  list_all ?P []\n\ngoal (1 subgoal):\n 1. derives \\<delta> [] \\<Longrightarrow>\n    \\<exists>D. LeftDerivation \\<delta> D []", "by blast"], ["", "lemma thmD6: \"wellformed_item x \\<Longrightarrow> item_\\<beta> x = \\<delta> @ \\<omega> \\<Longrightarrow> item_end x = k \\<Longrightarrow> \n  derives \\<delta> [] \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n     item_end x = k; derives \\<delta> []\\<rbrakk>\n    \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "using derives_empty_implies_LeftDerivation thmD6_Left"], ["proof (prove)\nusing this:\n  derives ?\\<delta> [] \\<Longrightarrow>\n  \\<exists>D. LeftDerivation ?\\<delta> D []\n  \\<lbrakk>wellformed_item ?x; item_\\<beta> ?x = ?\\<delta> @ ?\\<omega>;\n   item_end ?x = ?k; LeftDerivation ?\\<delta> ?D []\\<rbrakk>\n  \\<Longrightarrow> inc_dot (length ?\\<delta>) ?x \\<in> \\<pi> ?k {} {?x}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>wellformed_item x; item_\\<beta> x = \\<delta> @ \\<omega>;\n     item_end x = k; derives \\<delta> []\\<rbrakk>\n    \\<Longrightarrow> inc_dot (length \\<delta>) x \\<in> \\<pi> k {} {x}", "by blast"], ["", "end"], ["", "end"]]}