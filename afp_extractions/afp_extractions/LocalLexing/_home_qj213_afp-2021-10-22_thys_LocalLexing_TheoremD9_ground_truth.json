{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD9.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma items_le_pointwise: \"pointwise (items_le k)\"", "lemma items_le_is_filter: \"items_le k I \\<subseteq> I\"", "lemma items_eq_pointwise: \"pointwise (items_eq k)\"", "lemma items_eq_is_filter: \"items_eq k I \\<subseteq> I\"", "lemma paths_le_pointwise: \"pointwise (paths_le k)\"", "lemma paths_le_continuous: \"continuous (paths_le k)\"", "lemma paths_le_mono: \"mono (paths_le k)\"", "lemma paths_le_is_filter: \"paths_le k P \\<subseteq> P\"", "lemma paths_eq_pointwise: \"pointwise (paths_eq k)\"", "lemma paths_eq_is_filter: \"paths_eq k P \\<subseteq> P\"", "lemma Predict_item_end: \"x \\<in> Predict k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y\"", "lemma Complete_item_end: \"x \\<in> Complete k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y\"", "lemma \\<J>_0_0_item_end: \"x \\<in> \\<J> 0 0 \\<Longrightarrow> item_end x = 0\"", "lemma items_le_\\<J>_0_0: \"items_le 0 (\\<J> 0 0) = \\<J> 0 0\"", "lemma paths_le_\\<P>_0_0: \"paths_le 0 (\\<P> 0 0) = \\<P> 0 0\"", "lemma items_le_Predict: \"items_le k (Predict k I) = Predict k (items_le k I)\"", "lemma items_le_Complete: \n  \"wellformed_items I \\<Longrightarrow> items_le k (Complete k I) = Complete k (items_le k I)\"", "lemma items_le_Scan:\n  \"items_le k (Scan T k I) = Scan (empty_tokens T) k (items_le k I)\"", "lemma wellformed_items_Gen: \"wellformed_items (Gen P)\"", "lemma wellformed_\\<J>_0_0: \"wellformed_items (\\<J> 0 0)\"", "lemma wellformed_items_Predict: \n  \"wellformed_items I \\<Longrightarrow> wellformed_items (Predict k I)\"", "lemma wellformed_items_Complete:\n  \"wellformed_items I \\<Longrightarrow> wellformed_items (Complete k I)\"", "lemma \\<X>_length_bound: \"(t, c) \\<in> \\<X> k \\<Longrightarrow> k + length c \\<le> length Doc\"", "lemma wellformed_items_Scan:\n  \"wellformed_items I \\<Longrightarrow> T \\<subseteq> \\<X> k \\<Longrightarrow> wellformed_items (Scan T k I)\"", "lemma wellformed_items_\\<pi>:\n  assumes \"wellformed_items I\"\n  assumes \"T \\<subseteq> \\<X> k\"\n  shows \"wellformed_items (\\<pi> k T I)\"", "lemma \\<J>_subset_Suc_u: \"\\<J> k u \\<subseteq> \\<J> k (Suc u)\"", "lemma mono_TokensAt: \"mono (TokensAt k)\"", "lemma \\<T>_subset_TokensAt: \"\\<T> k u \\<subseteq> TokensAt k (\\<J> k u)\"", "lemma TokensAt_subset_\\<X>: \"TokensAt k I \\<subseteq> \\<X> k\"", "lemma wellformed_items_\\<J>_induct_u: \n  assumes \"wellformed_items (\\<J> k u)\"\n  shows \"wellformed_items (\\<J> k (Suc u))\"", "lemma wellformed_items_\\<J>_k_u_if_0: \"wellformed_items (\\<J> k 0) \\<Longrightarrow> wellformed_items (\\<J> k u)\"", "lemma wellformed_items_natUnion: \"(\\<And> k. wellformed_items (I k)) \\<Longrightarrow> wellformed_items (natUnion I)\"", "lemma wellformed_items_\\<I>_k_if_0: \"wellformed_items (\\<J> k 0) \\<Longrightarrow> wellformed_items (\\<I> k)\"", "lemma wellformed_items_\\<J>_\\<I>: \"wellformed_items (\\<J> k u) \\<and> wellformed_items (\\<I> k)\"", "lemma wellformed_items_\\<J>: \"wellformed_items (\\<J> k u)\"", "lemma wellformed_items_\\<I>: \"wellformed_items (\\<I> k)\"", "lemma funpower_consume_function:\n  assumes law: \"\\<And> X. P X \\<Longrightarrow> f (g X) = h (f X) \\<and> P (g X)\"\n  shows \"P I \\<Longrightarrow> P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)\"", "lemma limit_consume_function:\n  assumes continuous: \"continuous f\"\n  assumes law: \"\\<And> X. P X \\<Longrightarrow> f (g X) = h (f X) \\<and> P (g X)\"\n  assumes setmonotone: \"setmonotone g\"\n  shows \"P I \\<Longrightarrow> f (limit g I) = limit h (f I)\"", "lemma items_le_\\<pi>_swap: \n  assumes wellformed_I: \"wellformed_items I\"\n  assumes T: \"T \\<subseteq> \\<X> k\"\n  shows \"items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)\"", "lemma items_le_idempotent: \"items_le k (items_le k I) = items_le k I\"", "lemma paths_le_idempotent: \"paths_le k (paths_le k P) = paths_le k P\"", "lemma items_le_fix_D:\n  assumes items_le_fix: \"items_le k I = I\"\n  assumes x_dom: \"x \\<in> I\" \n  shows \"item_end x \\<le> k\"", "lemma remove_paths_le_in_subset_Gen:\n  assumes \"items_le k I = I\"\n  assumes \"I \\<subseteq> Gen P\"\n  shows \"I \\<subseteq> Gen (paths_le k P)\"", "lemma mono_Gen: \"mono Gen\"", "lemma empty_tokens_idempotent: \"empty_tokens (empty_tokens T) = empty_tokens T\"", "lemma empty_tokens_is_filter: \"empty_tokens T \\<subseteq> T\"", "lemma items_le_paths_le: \"items_le k (Gen P) = Gen (paths_le k P)\"", "lemma bin_items_le[symmetric]: \"bin I k = bin (items_le k I) k\"", "lemma TokensAt_items_le[symmetric]: \"TokensAt k I = TokensAt k (items_le k I)\"", "lemma by_length_paths_le[symmetric]: \"by_length k P = by_length k (paths_le k P)\"", "lemma \\<W>_paths_le[symmetric]: \"\\<W> P k = \\<W> (paths_le k P) k\"", "theorem \\<T>_equals_\\<Z>_induct_step: \n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  shows \"\\<T> k (Suc u) = \\<Z> k (Suc u)\"", "theorem thmD9:\n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  assumes k: \"k \\<le> length Doc\"\n  shows \"items_le k (\\<J> k (Suc u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\""], "translations": [["", "lemma items_le_pointwise: \"pointwise (items_le k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pointwise (items_le k)", "by (auto simp add: pointwise_def items_le_def)"], ["", "lemma items_le_is_filter: \"items_le k I \\<subseteq> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k I \\<subseteq> I", "by (auto simp add: items_le_def)"], ["", "lemma items_eq_pointwise: \"pointwise (items_eq k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pointwise (items_eq k)", "by (auto simp add: pointwise_def items_eq_def)"], ["", "lemma items_eq_is_filter: \"items_eq k I \\<subseteq> I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_eq k I \\<subseteq> I", "by (auto simp add: items_eq_def)"], ["", "lemma paths_le_pointwise: \"pointwise (paths_le k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pointwise (paths_le k)", "by (auto simp add: pointwise_def paths_le_def)"], ["", "lemma paths_le_continuous: \"continuous (paths_le k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. continuous (paths_le k)", "by (simp add: paths_le_pointwise pointbased_implies_continuous pointwise_implies_pointbased)"], ["", "lemma paths_le_mono: \"mono (paths_le k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (paths_le k)", "by (simp add: continuous_imp_mono paths_le_continuous)"], ["", "lemma paths_le_is_filter: \"paths_le k P \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le k P \\<subseteq> P", "by (auto simp add: paths_le_def)"], ["", "lemma paths_eq_pointwise: \"pointwise (paths_eq k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pointwise (paths_eq k)", "by (auto simp add: pointwise_def paths_eq_def)"], ["", "lemma paths_eq_is_filter: \"paths_eq k P \\<subseteq> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_eq k P \\<subseteq> P", "by (auto simp add: paths_eq_def)"], ["", "lemma Predict_item_end: \"x \\<in> Predict k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Predict k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y", "using Predict_def"], ["proof (prove)\nusing this:\n  Predict ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>r x.\n      uu_ = init_item r ?k \\<and>\n      r \\<in> \\<RR> \\<and>\n      x \\<in> bin ?I ?k \\<and> next_symbol x = Some (fst r)}\n\ngoal (1 subgoal):\n 1. x \\<in> Predict k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y", "by auto"], ["", "lemma Complete_item_end: \"x \\<in> Complete k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Complete k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y", "using Complete_def"], ["proof (prove)\nusing this:\n  Complete ?k ?I =\n  ?I \\<union>\n  {uu_.\n   \\<exists>x y.\n      uu_ = inc_item x ?k \\<and>\n      x \\<in> bin ?I (item_origin y) \\<and>\n      y \\<in> bin ?I ?k \\<and>\n      is_complete y \\<and> next_symbol x = Some (item_nonterminal y)}\n\ngoal (1 subgoal):\n 1. x \\<in> Complete k Y \\<Longrightarrow> item_end x = k \\<or> x \\<in> Y", "by auto"], ["", "lemma \\<J>_0_0_item_end: \"x \\<in> \\<J> 0 0 \\<Longrightarrow> item_end x = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<J> 0 0 \\<Longrightarrow> item_end x = 0", "apply (simp add: \\<pi>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> limit (\\<lambda>I. Scan {} 0 (Complete 0 (Predict 0 I)))\n             Init \\<Longrightarrow>\n    item_end x = 0", "proof (induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> Init \\<Longrightarrow> item_end p = 0\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "case (Init x)"], ["proof (state)\nthis:\n  x \\<in> Init\n\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> Init \\<Longrightarrow> item_end p = 0\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> Init\n\ngoal (1 subgoal):\n 1. item_end x = 0", "by (auto simp add: Init_def)"], ["proof (state)\nthis:\n  item_end x = 0\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "case (Iterate x Y)"], ["proof (state)\nthis:\n  ?q \\<in> Y \\<Longrightarrow> item_end ?q = 0\n  x \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "then"], ["proof (chain)\npicking this:\n  ?q \\<in> Y \\<Longrightarrow> item_end ?q = 0\n  x \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))", "have \"x \\<in> Complete 0 (Predict 0 Y)\""], ["proof (prove)\nusing this:\n  ?q \\<in> Y \\<Longrightarrow> item_end ?q = 0\n  x \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\n\ngoal (1 subgoal):\n 1. x \\<in> Complete 0 (Predict 0 Y)", "by (simp add: Scan_empty)"], ["proof (state)\nthis:\n  x \\<in> Complete 0 (Predict 0 Y)\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "then"], ["proof (chain)\npicking this:\n  x \\<in> Complete 0 (Predict 0 Y)", "have \"item_end x = 0 \\<or> x \\<in> Predict 0 Y\""], ["proof (prove)\nusing this:\n  x \\<in> Complete 0 (Predict 0 Y)\n\ngoal (1 subgoal):\n 1. item_end x = 0 \\<or> x \\<in> Predict 0 Y", "using Complete_item_end"], ["proof (prove)\nusing this:\n  x \\<in> Complete 0 (Predict 0 Y)\n  ?x \\<in> Complete ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n\ngoal (1 subgoal):\n 1. item_end x = 0 \\<or> x \\<in> Predict 0 Y", "by blast"], ["proof (state)\nthis:\n  item_end x = 0 \\<or> x \\<in> Predict 0 Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "then"], ["proof (chain)\npicking this:\n  item_end x = 0 \\<or> x \\<in> Predict 0 Y", "have \"item_end x = 0 \\<or> x \\<in> Y\""], ["proof (prove)\nusing this:\n  item_end x = 0 \\<or> x \\<in> Predict 0 Y\n\ngoal (1 subgoal):\n 1. item_end x = 0 \\<or> x \\<in> Y", "using Predict_item_end"], ["proof (prove)\nusing this:\n  item_end x = 0 \\<or> x \\<in> Predict 0 Y\n  ?x \\<in> Predict ?k ?Y \\<Longrightarrow>\n  item_end ?x = ?k \\<or> ?x \\<in> ?Y\n\ngoal (1 subgoal):\n 1. item_end x = 0 \\<or> x \\<in> Y", "by blast"], ["proof (state)\nthis:\n  item_end x = 0 \\<or> x \\<in> Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> item_end q = 0;\n        p \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\\<rbrakk>\n       \\<Longrightarrow> item_end p = 0", "then"], ["proof (chain)\npicking this:\n  item_end x = 0 \\<or> x \\<in> Y", "show ?case"], ["proof (prove)\nusing this:\n  item_end x = 0 \\<or> x \\<in> Y\n\ngoal (1 subgoal):\n 1. item_end x = 0", "using Iterate"], ["proof (prove)\nusing this:\n  item_end x = 0 \\<or> x \\<in> Y\n  ?q \\<in> Y \\<Longrightarrow> item_end ?q = 0\n  x \\<in> Scan {} 0 (Complete 0 (Predict 0 Y))\n\ngoal (1 subgoal):\n 1. item_end x = 0", "by blast"], ["proof (state)\nthis:\n  item_end x = 0\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma items_le_\\<J>_0_0: \"items_le 0 (\\<J> 0 0) = \\<J> 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le 0 (\\<J> 0 0) = \\<J> 0 0", "using LocalLexing.\\<J>_0_0_item_end LocalLexing.items_le_def LocalLexing_axioms"], ["proof (prove)\nusing this:\n  \\<lbrakk>LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel;\n   ?x \\<in> LocalLexing.\\<J> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel ?Doc 0\n             0\\<rbrakk>\n  \\<Longrightarrow> item_end ?x = 0\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n\ngoal (1 subgoal):\n 1. items_le 0 (\\<J> 0 0) = \\<J> 0 0", "by blast"], ["", "lemma paths_le_\\<P>_0_0: \"paths_le 0 (\\<P> 0 0) = \\<P> 0 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le 0 (\\<P> 0 0) = \\<P> 0 0", "by (auto simp add: paths_le_def)"], ["", "definition empty_tokens :: \"token set \\<Rightarrow> token set\"\nwhere\n  \"empty_tokens T = { t . t \\<in> T \\<and> chars_of_token t = [] }\""], ["", "lemma items_le_Predict: \"items_le k (Predict k I) = Predict k (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (Predict k I) = Predict k (items_le k I)", "by (auto simp add: items_le_def Predict_def bin_def)"], ["", "lemma items_le_Complete: \n  \"wellformed_items I \\<Longrightarrow> items_le k (Complete k I) = Complete k (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items I \\<Longrightarrow>\n    items_le k (Complete k I) = Complete k (items_le k I)", "by (auto simp add: items_le_def Complete_def bin_def is_complete_def wellformed_items_def \n    wellformed_item_def)"], ["", "lemma items_le_Scan:\n  \"items_le k (Scan T k I) = Scan (empty_tokens T) k (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (Scan T k I) = Scan (empty_tokens T) k (items_le k I)", "by (auto simp add: items_le_def Scan_def bin_def empty_tokens_def)"], ["", "lemma wellformed_items_Gen: \"wellformed_items (Gen P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (Gen P)", "using Gen_implies_pvalid pvalid_def wellformed_items_def"], ["proof (prove)\nusing this:\n  ?x \\<in> Gen ?P \\<Longrightarrow> \\<exists>p\\<in>?P. pvalid p ?x\n  pvalid ?p ?x =\n  (\\<exists>u \\<gamma>.\n      wellformed_tokens ?p \\<and>\n      wellformed_item ?x \\<and>\n      u \\<le> length ?p \\<and>\n      charslength ?p = item_end ?x \\<and>\n      charslength (take u ?p) = item_origin ?x \\<and>\n      is_derivation\n       (terminals (take u ?p) @ [item_nonterminal ?x] @ \\<gamma>) \\<and>\n      derives (item_\\<alpha> ?x) (terminals (drop u ?p)))\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_items (Gen P)", "by blast"], ["", "lemma wellformed_\\<J>_0_0: \"wellformed_items (\\<J> 0 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> 0 0)", "using thmD8 wellformed_items_Gen"], ["proof (prove)\nusing this:\n  \\<J> 0 0 = Gen (\\<P> 0 0)\n  wellformed_items (Gen ?P)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> 0 0)", "by auto"], ["", "lemma wellformed_items_Predict: \n  \"wellformed_items I \\<Longrightarrow> wellformed_items (Predict k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items I \\<Longrightarrow> wellformed_items (Predict k I)", "by (auto simp add: wellformed_items_def wellformed_item_def Predict_def bin_def)"], ["", "lemma wellformed_items_Complete:\n  \"wellformed_items I \\<Longrightarrow> wellformed_items (Complete k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items I \\<Longrightarrow> wellformed_items (Complete k I)", "apply (auto simp add: wellformed_items_def wellformed_item_def Complete_def bin_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        xa \\<in> I; item_end xa = item_origin y; y \\<in> I; k = item_end y;\n        is_complete y; next_symbol xa = Some (item_nonterminal y)\\<rbrakk>\n       \\<Longrightarrow> item_origin xa \\<le> item_end y\n 2. \\<And>xa y.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        xa \\<in> I; item_end xa = item_origin y; y \\<in> I; k = item_end y;\n        is_complete y; next_symbol xa = Some (item_nonterminal y)\\<rbrakk>\n       \\<Longrightarrow> Suc (item_dot xa) \\<le> length (item_rhs xa)", "apply (metis dual_order.trans)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        xa \\<in> I; item_end xa = item_origin y; y \\<in> I; k = item_end y;\n        is_complete y; next_symbol xa = Some (item_nonterminal y)\\<rbrakk>\n       \\<Longrightarrow> Suc (item_dot xa) \\<le> length (item_rhs xa)", "using is_complete_def next_symbol_not_complete not_less_eq_eq"], ["proof (prove)\nusing this:\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  next_symbol ?x = Some ?t \\<Longrightarrow> \\<not> is_complete ?x\n  (\\<not> ?m \\<le> ?n) = (Suc ?n \\<le> ?m)\n\ngoal (1 subgoal):\n 1. \\<And>xa y.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        xa \\<in> I; item_end xa = item_origin y; y \\<in> I; k = item_end y;\n        is_complete y; next_symbol xa = Some (item_nonterminal y)\\<rbrakk>\n       \\<Longrightarrow> Suc (item_dot xa) \\<le> length (item_rhs xa)", "by blast"], ["", "lemma \\<X>_length_bound: \"(t, c) \\<in> \\<X> k \\<Longrightarrow> k + length c \\<le> length Doc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t, c) \\<in> \\<X> k \\<Longrightarrow> k + length c \\<le> length Doc", "using \\<X>_is_prefix is_prefix_length not_le"], ["proof (prove)\nusing this:\n  ?t \\<in> \\<X> ?k \\<Longrightarrow> is_prefix (snd ?t) (drop ?k Doc)\n  is_prefix ?a ?b \\<Longrightarrow> length ?a \\<le> length ?b\n  (\\<not> ?x \\<le> ?y) = (?y < ?x)\n\ngoal (1 subgoal):\n 1. (t, c) \\<in> \\<X> k \\<Longrightarrow> k + length c \\<le> length Doc", "by fastforce"], ["", "lemma wellformed_items_Scan:\n  \"wellformed_items I \\<Longrightarrow> T \\<subseteq> \\<X> k \\<Longrightarrow> wellformed_items (Scan T k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wellformed_items I; T \\<subseteq> \\<X> k\\<rbrakk>\n    \\<Longrightarrow> wellformed_items (Scan T k I)", "apply (auto simp add: wellformed_items_def wellformed_item_def Scan_def bin_def \\<X>_length_bound)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa t c.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        T \\<subseteq> \\<X> (item_end xa); xa \\<in> I; k = item_end xa;\n        (t, c) \\<in> T; next_symbol xa = Some t\\<rbrakk>\n       \\<Longrightarrow> Suc (item_dot xa) \\<le> length (item_rhs xa)", "using is_complete_def next_symbol_not_complete not_less_eq_eq"], ["proof (prove)\nusing this:\n  is_complete ?x = (length (item_rhs ?x) \\<le> item_dot ?x)\n  next_symbol ?x = Some ?t \\<Longrightarrow> \\<not> is_complete ?x\n  (\\<not> ?m \\<le> ?n) = (Suc ?n \\<le> ?m)\n\ngoal (1 subgoal):\n 1. \\<And>xa t c.\n       \\<lbrakk>\\<forall>x\\<in>I.\n                   item_rule x \\<in> \\<RR> \\<and>\n                   item_origin x \\<le> item_end x \\<and>\n                   item_end x \\<le> length Doc \\<and>\n                   item_dot x \\<le> length (item_rhs x);\n        T \\<subseteq> \\<X> (item_end xa); xa \\<in> I; k = item_end xa;\n        (t, c) \\<in> T; next_symbol xa = Some t\\<rbrakk>\n       \\<Longrightarrow> Suc (item_dot xa) \\<le> length (item_rhs xa)", "by blast"], ["", "lemma wellformed_items_\\<pi>:\n  assumes \"wellformed_items I\"\n  assumes \"T \\<subseteq> \\<X> k\"\n  shows \"wellformed_items (\\<pi> k T I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "have \"x \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item x", "proof (simp add: \\<pi>_def, induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> I \\<Longrightarrow> wellformed_item p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "case (Init x)"], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> I \\<Longrightarrow> wellformed_item p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. wellformed_item x", "using assms(1)"], ["proof (prove)\nusing this:\n  x \\<in> I\n  wellformed_items I\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by (simp add: wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "case (Iterate x Y)"], ["proof (state)\nthis:\n  ?q \\<in> Y \\<Longrightarrow> wellformed_item ?q\n  x \\<in> Scan T k (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "have \"wellformed_items Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items Y", "by (simp add: Iterate.hyps(1) wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_items Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "then"], ["proof (chain)\npicking this:\n  wellformed_items Y", "have \"wellformed_items (Scan T k (Complete k (Predict k Y)))\""], ["proof (prove)\nusing this:\n  wellformed_items Y\n\ngoal (1 subgoal):\n 1. wellformed_items (Scan T k (Complete k (Predict k Y)))", "by (simp add: assms(2) wellformed_items_Complete wellformed_items_Predict \n          wellformed_items_Scan)"], ["proof (state)\nthis:\n  wellformed_items (Scan T k (Complete k (Predict k Y)))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan T k (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "then"], ["proof (chain)\npicking this:\n  wellformed_items (Scan T k (Complete k (Predict k Y)))", "show ?case"], ["proof (prove)\nusing this:\n  wellformed_items (Scan T k (Complete k (Predict k Y)))\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by (simp add: Iterate.hyps(2) wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item x\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item ?x2\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item ?x2\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "using wellformed_items_def"], ["proof (prove)\nusing this:\n  ?x2 \\<in> \\<pi> k T I \\<Longrightarrow> wellformed_item ?x2\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> k T I)", "by auto"], ["proof (state)\nthis:\n  wellformed_items (\\<pi> k T I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma \\<J>_subset_Suc_u: \"\\<J> k u \\<subseteq> \\<J> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<J> k u \\<subseteq> \\<J> k (Suc u)", "by (metis Complete_\\<pi>_fix Complete_subset_\\<pi> \\<J>.simps(1) \\<J>.simps(2) \\<J>.simps(3) not0_implies_Suc)"], ["", "lemma mono_TokensAt: \"mono (TokensAt k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (TokensAt k)", "by (auto simp add: mono_def TokensAt_def bin_def)"], ["", "lemma \\<T>_subset_TokensAt: \"\\<T> k u \\<subseteq> TokensAt k (\\<J> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k u \\<subseteq> TokensAt k (\\<J> k u)", "proof (induct u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<T> k 0 \\<subseteq> TokensAt k (\\<J> k 0)\n 2. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<T> k 0 \\<subseteq> TokensAt k (\\<J> k 0)\n 2. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k 0 \\<subseteq> TokensAt k (\\<J> k 0)", "by simp"], ["proof (state)\nthis:\n  \\<T> k 0 \\<subseteq> TokensAt k (\\<J> k 0)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "case (Suc u)"], ["proof (state)\nthis:\n  \\<T> k u \\<subseteq> TokensAt k (\\<J> k u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "have 1: \"Tokens k (\\<T> k u) (\\<J> k u) = Sel (\\<T> k u) (TokensAt k (\\<J> k u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Tokens k (\\<T> k u) (\\<J> k u) = Sel (\\<T> k u) (TokensAt k (\\<J> k u))", "by (simp add: Tokens_def)"], ["proof (state)\nthis:\n  Tokens k (\\<T> k u) (\\<J> k u) = Sel (\\<T> k u) (TokensAt k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "have 2: \"Sel (\\<T> k u) (TokensAt k (\\<J> k u)) \\<subseteq> TokensAt k (\\<J> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sel (\\<T> k u) (TokensAt k (\\<J> k u)) \\<subseteq> TokensAt k (\\<J> k u)", "by (simp add: Sel_upper_bound Suc.hyps)"], ["proof (state)\nthis:\n  Sel (\\<T> k u) (TokensAt k (\\<J> k u)) \\<subseteq> TokensAt k (\\<J> k u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "have \"\\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k u)", "by (simp add: 1 2)"], ["proof (state)\nthis:\n  \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k u)\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<T> k u \\<subseteq> TokensAt k (\\<J> k u) \\<Longrightarrow>\n       \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k u)", "show ?case"], ["proof (prove)\nusing this:\n  \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k u)\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))", "by (meson \\<J>_subset_Suc_u mono_TokensAt mono_subset_elem subset_iff)"], ["proof (state)\nthis:\n  \\<T> k (Suc u) \\<subseteq> TokensAt k (\\<J> k (Suc u))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma TokensAt_subset_\\<X>: \"TokensAt k I \\<subseteq> \\<X> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k I \\<subseteq> \\<X> k", "using TokensAt_def \\<X>_def is_terminal_def"], ["proof (prove)\nusing this:\n  TokensAt ?k ?I =\n  {uu_.\n   \\<exists>t s x l.\n      uu_ = (t, s) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      next_symbol x = Some t \\<and>\n      is_terminal t \\<and>\n      l \\<in> Lex t Doc ?k \\<and> s = take l (drop ?k Doc)}\n  \\<X> ?k =\n  {uu_.\n   \\<exists>t l \\<omega>.\n      uu_ = (t, \\<omega>) \\<and>\n      t \\<in> \\<TT> \\<and>\n      l \\<in> Lex t Doc ?k \\<and> \\<omega> = take l (drop ?k Doc)}\n  is_terminal ?s = (?s \\<in> \\<TT>)\n\ngoal (1 subgoal):\n 1. TokensAt k I \\<subseteq> \\<X> k", "by auto"], ["", "lemma wellformed_items_\\<J>_induct_u: \n  assumes \"wellformed_items (\\<J> k u)\"\n  shows \"wellformed_items (\\<J> k (Suc u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "have \"x \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item x", "proof (simp add: \\<pi>_def, induct rule: limit_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> \\<J> k u \\<Longrightarrow> wellformed_item p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "case (Init x)"], ["proof (state)\nthis:\n  x \\<in> \\<J> k u\n\ngoal (2 subgoals):\n 1. \\<And>p. p \\<in> \\<J> k u \\<Longrightarrow> wellformed_item p\n 2. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "with assms"], ["proof (chain)\npicking this:\n  wellformed_items (\\<J> k u)\n  x \\<in> \\<J> k u", "show ?case"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> k u)\n  x \\<in> \\<J> k u\n\ngoal (1 subgoal):\n 1. wellformed_item x", "by (auto simp add: wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_item x\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "case (Iterate p Y)"], ["proof (state)\nthis:\n  ?q \\<in> Y \\<Longrightarrow> wellformed_item ?q\n  p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "from Iterate(1)"], ["proof (chain)\npicking this:\n  ?q \\<in> Y \\<Longrightarrow> wellformed_item ?q", "have wellformed_Y: \"wellformed_items Y\""], ["proof (prove)\nusing this:\n  ?q \\<in> Y \\<Longrightarrow> wellformed_item ?q\n\ngoal (1 subgoal):\n 1. wellformed_items Y", "by (auto simp add: wellformed_items_def)"], ["proof (state)\nthis:\n  wellformed_items Y\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "then"], ["proof (chain)\npicking this:\n  wellformed_items Y", "have \"wellformed_items (Complete k (Predict k Y))\""], ["proof (prove)\nusing this:\n  wellformed_items Y\n\ngoal (1 subgoal):\n 1. wellformed_items (Complete k (Predict k Y))", "by (simp add: wellformed_items_Complete wellformed_items_Predict)"], ["proof (state)\nthis:\n  wellformed_items (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "then"], ["proof (chain)\npicking this:\n  wellformed_items (Complete k (Predict k Y))", "have \"wellformed_items (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))\""], ["proof (prove)\nusing this:\n  wellformed_items (Complete k (Predict k Y))\n\ngoal (1 subgoal):\n 1. wellformed_items\n     (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))", "apply (rule_tac wellformed_items_Scan)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_items (Complete k (Predict k Y)) \\<Longrightarrow>\n    wellformed_items (Complete k (Predict k Y))\n 2. wellformed_items (Complete k (Predict k Y)) \\<Longrightarrow>\n    Tokens k (\\<T> k u) (\\<J> k u) \\<subseteq> \\<X> k", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (Complete k (Predict k Y)) \\<Longrightarrow>\n    Tokens k (\\<T> k u) (\\<J> k u) \\<subseteq> \\<X> k", "apply (simp add: Tokens_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (Complete k (Predict k Y)) \\<Longrightarrow>\n    Sel (\\<T> k u) (TokensAt k (\\<J> k u)) \\<subseteq> \\<X> k", "by (meson Sel_upper_bound TokensAt_subset_\\<X> \\<T>_subset_TokensAt subset_trans)"], ["proof (state)\nthis:\n  wellformed_items\n   (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))\n\ngoal (1 subgoal):\n 1. \\<And>p Y.\n       \\<lbrakk>\\<And>q. q \\<in> Y \\<Longrightarrow> wellformed_item q;\n        p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k\n                 (Complete k (Predict k Y))\\<rbrakk>\n       \\<Longrightarrow> wellformed_item p", "then"], ["proof (chain)\npicking this:\n  wellformed_items\n   (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))", "show ?case"], ["proof (prove)\nusing this:\n  wellformed_items\n   (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))\n\ngoal (1 subgoal):\n 1. wellformed_item p", "using Iterate.hyps(2) wellformed_items_def"], ["proof (prove)\nusing this:\n  wellformed_items\n   (Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y)))\n  p \\<in> Scan (Tokens k (\\<T> k u) (\\<J> k u)) k (Complete k (Predict k Y))\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_item p", "by blast"], ["proof (state)\nthis:\n  wellformed_item p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item x\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item ?x2\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item ?x2", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item ?x2\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "using wellformed_items_def"], ["proof (prove)\nusing this:\n  ?x2 \\<in> \\<J> k (Suc u) \\<Longrightarrow> wellformed_item ?x2\n  wellformed_items ?X = Ball ?X wellformed_item\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k (Suc u))", "by blast"], ["proof (state)\nthis:\n  wellformed_items (\\<J> k (Suc u))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_items_\\<J>_k_u_if_0: \"wellformed_items (\\<J> k 0) \\<Longrightarrow> wellformed_items (\\<J> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k 0) \\<Longrightarrow>\n    wellformed_items (\\<J> k u)", "apply (induct u)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_items (\\<J> k 0) \\<Longrightarrow>\n    wellformed_items (\\<J> k 0)\n 2. \\<And>u.\n       \\<lbrakk>wellformed_items (\\<J> k 0) \\<Longrightarrow>\n                wellformed_items (\\<J> k u);\n        wellformed_items (\\<J> k 0)\\<rbrakk>\n       \\<Longrightarrow> wellformed_items (\\<J> k (Suc u))", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>wellformed_items (\\<J> k 0) \\<Longrightarrow>\n                wellformed_items (\\<J> k u);\n        wellformed_items (\\<J> k 0)\\<rbrakk>\n       \\<Longrightarrow> wellformed_items (\\<J> k (Suc u))", "using wellformed_items_\\<J>_induct_u"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> ?k ?u) \\<Longrightarrow>\n  wellformed_items (\\<J> ?k (Suc ?u))\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       \\<lbrakk>wellformed_items (\\<J> k 0) \\<Longrightarrow>\n                wellformed_items (\\<J> k u);\n        wellformed_items (\\<J> k 0)\\<rbrakk>\n       \\<Longrightarrow> wellformed_items (\\<J> k (Suc u))", "by blast"], ["", "lemma wellformed_items_natUnion: \"(\\<And> k. wellformed_items (I k)) \\<Longrightarrow> wellformed_items (natUnion I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k. wellformed_items (I k)) \\<Longrightarrow>\n    wellformed_items (natUnion I)", "by (auto simp add: natUnion_def wellformed_items_def)"], ["", "lemma wellformed_items_\\<I>_k_if_0: \"wellformed_items (\\<J> k 0) \\<Longrightarrow> wellformed_items (\\<I> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k 0) \\<Longrightarrow> wellformed_items (\\<I> k)", "apply (simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k 0) \\<Longrightarrow>\n    wellformed_items (natUnion (\\<J> k))", "apply (rule wellformed_items_natUnion)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ka.\n       wellformed_items (\\<J> k 0) \\<Longrightarrow>\n       wellformed_items (\\<J> k ka)", "using wellformed_items_\\<J>_k_u_if_0"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> ?k 0) \\<Longrightarrow>\n  wellformed_items (\\<J> ?k ?u)\n\ngoal (1 subgoal):\n 1. \\<And>ka.\n       wellformed_items (\\<J> k 0) \\<Longrightarrow>\n       wellformed_items (\\<J> k ka)", "by blast"], ["", "lemma wellformed_items_\\<J>_\\<I>: \"wellformed_items (\\<J> k u) \\<and> wellformed_items (\\<I> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k u) \\<and> wellformed_items (\\<I> k)", "proof (induct k arbitrary: u)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>u. wellformed_items (\\<J> 0 u) \\<and> wellformed_items (\\<I> 0)\n 2. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>u. wellformed_items (\\<J> 0 u) \\<and> wellformed_items (\\<I> 0)\n 2. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> 0 u) \\<and> wellformed_items (\\<I> 0)", "using wellformed_\\<J>_0_0 wellformed_items_\\<I>_k_if_0 wellformed_items_\\<J>_k_u_if_0"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> 0 0)\n  wellformed_items (\\<J> ?k 0) \\<Longrightarrow> wellformed_items (\\<I> ?k)\n  wellformed_items (\\<J> ?k 0) \\<Longrightarrow>\n  wellformed_items (\\<J> ?k ?u)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> 0 u) \\<and> wellformed_items (\\<I> 0)", "by blast"], ["proof (state)\nthis:\n  wellformed_items (\\<J> 0 u) \\<and> wellformed_items (\\<I> 0)\n\ngoal (1 subgoal):\n 1. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "case (Suc k)"], ["proof (state)\nthis:\n  wellformed_items (\\<J> k ?u) \\<and> wellformed_items (\\<I> k)\n\ngoal (1 subgoal):\n 1. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "have 0: \"wellformed_items (\\<J> (Suc k) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> (Suc k) 0)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> (Suc k) {} (natUnion (\\<J> k)))", "using Suc.hyps wellformed_items_\\<pi>"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> k ?u) \\<and> wellformed_items (\\<I> k)\n  \\<lbrakk>wellformed_items ?I; ?T \\<subseteq> \\<X> ?k\\<rbrakk>\n  \\<Longrightarrow> wellformed_items (\\<pi> ?k ?T ?I)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<pi> (Suc k) {} (natUnion (\\<J> k)))", "by auto"], ["proof (state)\nthis:\n  wellformed_items (\\<J> (Suc k) 0)\n\ngoal (1 subgoal):\n 1. \\<And>k u.\n       (\\<And>u.\n           wellformed_items (\\<J> k u) \\<and>\n           wellformed_items (\\<I> k)) \\<Longrightarrow>\n       wellformed_items (\\<J> (Suc k) u) \\<and>\n       wellformed_items (\\<I> (Suc k))", "then"], ["proof (chain)\npicking this:\n  wellformed_items (\\<J> (Suc k) 0)", "show ?case"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> (Suc k) 0)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> (Suc k) u) \\<and> wellformed_items (\\<I> (Suc k))", "using wellformed_items_\\<I>_k_if_0 wellformed_items_\\<J>_k_u_if_0"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> (Suc k) 0)\n  wellformed_items (\\<J> ?k 0) \\<Longrightarrow> wellformed_items (\\<I> ?k)\n  wellformed_items (\\<J> ?k 0) \\<Longrightarrow>\n  wellformed_items (\\<J> ?k ?u)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> (Suc k) u) \\<and> wellformed_items (\\<I> (Suc k))", "by blast"], ["proof (state)\nthis:\n  wellformed_items (\\<J> (Suc k) u) \\<and> wellformed_items (\\<I> (Suc k))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wellformed_items_\\<J>: \"wellformed_items (\\<J> k u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<J> k u)", "by (simp add: wellformed_items_\\<J>_\\<I>)"], ["", "lemma wellformed_items_\\<I>: \"wellformed_items (\\<I> k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wellformed_items (\\<I> k)", "using wellformed_items_\\<J>_\\<I>"], ["proof (prove)\nusing this:\n  wellformed_items (\\<J> ?k ?u) \\<and> wellformed_items (\\<I> ?k)\n\ngoal (1 subgoal):\n 1. wellformed_items (\\<I> k)", "by blast"], ["", "lemma funpower_consume_function:\n  assumes law: \"\\<And> X. P X \\<Longrightarrow> f (g X) = h (f X) \\<and> P (g X)\"\n  shows \"P I \\<Longrightarrow> P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow>\n    P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. P I \\<Longrightarrow>\n    P (funpower g 0 I) \\<and> f (funpower g 0 I) = funpower h 0 (f I)\n 2. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "case 0"], ["proof (state)\nthis:\n  P I\n\ngoal (2 subgoals):\n 1. P I \\<Longrightarrow>\n    P (funpower g 0 I) \\<and> f (funpower g 0 I) = funpower h 0 (f I)\n 2. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "then"], ["proof (chain)\npicking this:\n  P I", "show ?case"], ["proof (prove)\nusing this:\n  P I\n\ngoal (1 subgoal):\n 1. P (funpower g 0 I) \\<and> f (funpower g 0 I) = funpower h 0 (f I)", "by simp"], ["proof (state)\nthis:\n  P (funpower g 0 I) \\<and> f (funpower g 0 I) = funpower h 0 (f I)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "case (Suc n)"], ["proof (state)\nthis:\n  P I \\<Longrightarrow>\n  P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)\n  P I\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "then"], ["proof (chain)\npicking this:\n  P I \\<Longrightarrow>\n  P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)\n  P I", "have S1: \"P (funpower g n I)\" and S2: \"f (funpower g n I) = funpower h n (f I)\""], ["proof (prove)\nusing this:\n  P I \\<Longrightarrow>\n  P (funpower g n I) \\<and> f (funpower g n I) = funpower h n (f I)\n  P I\n\ngoal (1 subgoal):\n 1. P (funpower g n I) &&& f (funpower g n I) = funpower h n (f I)", "by auto"], ["proof (state)\nthis:\n  P (funpower g n I)\n  f (funpower g n I) = funpower h n (f I)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "have law1: \"\\<And> X. P X \\<Longrightarrow> f (g X) = h (f X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X. P X \\<Longrightarrow> f (g X) = h (f X)", "using law"], ["proof (prove)\nusing this:\n  P ?X \\<Longrightarrow> f (g ?X) = h (f ?X) \\<and> P (g ?X)\n\ngoal (1 subgoal):\n 1. \\<And>X. P X \\<Longrightarrow> f (g X) = h (f X)", "by auto"], ["proof (state)\nthis:\n  P ?X \\<Longrightarrow> f (g ?X) = h (f ?X)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "have law2: \"\\<And> X. P X \\<Longrightarrow> P (g X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>X. P X \\<Longrightarrow> P (g X)", "using law"], ["proof (prove)\nusing this:\n  P ?X \\<Longrightarrow> f (g ?X) = h (f ?X) \\<and> P (g ?X)\n\ngoal (1 subgoal):\n 1. \\<And>X. P X \\<Longrightarrow> P (g X)", "by auto"], ["proof (state)\nthis:\n  P ?X \\<Longrightarrow> P (g ?X)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>P I \\<Longrightarrow>\n                P (funpower g n I) \\<and>\n                f (funpower g n I) = funpower h n (f I);\n        P I\\<rbrakk>\n       \\<Longrightarrow> P (funpower g (Suc n) I) \\<and>\n                         f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (funpower g (Suc n) I) \\<and>\n    f (funpower g (Suc n) I) = funpower h (Suc n) (f I)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (g (funpower g n I)) \\<and>\n    f (g (funpower g n I)) = h (funpower h n (f I))", "apply (subst law1[where X=\"funpower g n I\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. P (funpower g n I)\n 2. P (g (funpower g n I)) \\<and>\n    h (f (funpower g n I)) = h (funpower h n (f I))", "apply (simp add: S1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (g (funpower g n I)) \\<and>\n    h (f (funpower g n I)) = h (funpower h n (f I))", "apply (subst S2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (g (funpower g n I)) \\<and>\n    h (funpower h n (f I)) = h (funpower h n (f I))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (g (funpower g n I))", "apply (rule law2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P (funpower g n I)", "apply (simp add: S1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  P (funpower g (Suc n) I) \\<and>\n  f (funpower g (Suc n) I) = funpower h (Suc n) (f I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma limit_consume_function:\n  assumes continuous: \"continuous f\"\n  assumes law: \"\\<And> X. P X \\<Longrightarrow> f (g X) = h (f X) \\<and> P (g X)\"\n  assumes setmonotone: \"setmonotone g\"\n  shows \"P I \\<Longrightarrow> f (limit g I) = limit h (f I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "have 1: \"f (limit g I) = f (natUnion (\\<lambda>n. funpower g n I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (limit g I) = f (natUnion (\\<lambda>n. funpower g n I))", "by (simp add: limit_def)"], ["proof (state)\nthis:\n  f (limit g I) = f (natUnion (\\<lambda>n. funpower g n I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "have \"chain (\\<lambda>n. funpower g n I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chain (\\<lambda>n. funpower g n I)", "by (simp add: setmonotone setmonotone_implies_chain_funpower)"], ["proof (state)\nthis:\n  chain (\\<lambda>n. funpower g n I)\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "from continuous_apply[OF continuous this]"], ["proof (chain)\npicking this:\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (f \\<circ> (\\<lambda>n. funpower g n I))", "have swap: \"f (natUnion (\\<lambda>n. funpower g n I)) = natUnion (f \\<circ> (\\<lambda>n. funpower g n I))\""], ["proof (prove)\nusing this:\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (f \\<circ> (\\<lambda>n. funpower g n I))\n\ngoal (1 subgoal):\n 1. f (natUnion (\\<lambda>n. funpower g n I)) =\n    natUnion (f \\<circ> (\\<lambda>n. funpower g n I))", "by blast"], ["proof (state)\nthis:\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (f \\<circ> (\\<lambda>n. funpower g n I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "have \"f o (\\<lambda>n. funpower g n I) = (\\<lambda> n. f (funpower g n I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<circ> (\\<lambda>n. funpower g n I) =\n    (\\<lambda>n. f (funpower g n I))", "by auto"], ["proof (state)\nthis:\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. f (funpower g n I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "also"], ["proof (state)\nthis:\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. f (funpower g n I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "have \"P I \\<Longrightarrow> (\\<lambda> n. f (funpower g n I)) = (\\<lambda> n. funpower h n (f I))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow>\n    (\\<lambda>n. f (funpower g n I)) = (\\<lambda>n. funpower h n (f I))", "by (metis funpower_consume_function[where P=P and f=f and g=g and h=h, OF law, simplified])"], ["proof (state)\nthis:\n  P I \\<Longrightarrow>\n  (\\<lambda>n. f (funpower g n I)) = (\\<lambda>n. funpower h n (f I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "ultimately"], ["proof (chain)\npicking this:\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. f (funpower g n I))\n  P I \\<Longrightarrow>\n  (\\<lambda>n. f (funpower g n I)) = (\\<lambda>n. funpower h n (f I))", "have \"P I \\<Longrightarrow> f o (\\<lambda>n. funpower g n I) = (\\<lambda> n. funpower h n (f I))\""], ["proof (prove)\nusing this:\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. f (funpower g n I))\n  P I \\<Longrightarrow>\n  (\\<lambda>n. f (funpower g n I)) = (\\<lambda>n. funpower h n (f I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow>\n    f \\<circ> (\\<lambda>n. funpower g n I) =\n    (\\<lambda>n. funpower h n (f I))", "by auto"], ["proof (state)\nthis:\n  P I \\<Longrightarrow>\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. funpower h n (f I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "with swap"], ["proof (chain)\npicking this:\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (f \\<circ> (\\<lambda>n. funpower g n I))\n  P I \\<Longrightarrow>\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. funpower h n (f I))", "have 2: \"P I \\<Longrightarrow> f (natUnion (\\<lambda>n. funpower g n I)) = natUnion (\\<lambda> n. funpower h n (f I))\""], ["proof (prove)\nusing this:\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (f \\<circ> (\\<lambda>n. funpower g n I))\n  P I \\<Longrightarrow>\n  f \\<circ> (\\<lambda>n. funpower g n I) = (\\<lambda>n. funpower h n (f I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow>\n    f (natUnion (\\<lambda>n. funpower g n I)) =\n    natUnion (\\<lambda>n. funpower h n (f I))", "by auto"], ["proof (state)\nthis:\n  P I \\<Longrightarrow>\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (\\<lambda>n. funpower h n (f I))\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "have 3: \"natUnion (\\<lambda> n. funpower h n (f I)) = limit h (f I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. natUnion (\\<lambda>n. funpower h n (f I)) = limit h (f I)", "by (simp add: limit_def)"], ["proof (state)\nthis:\n  natUnion (\\<lambda>n. funpower h n (f I)) = limit h (f I)\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "assume \"P I\""], ["proof (state)\nthis:\n  P I\n\ngoal (1 subgoal):\n 1. P I \\<Longrightarrow> f (limit g I) = limit h (f I)", "with 1 2 3"], ["proof (chain)\npicking this:\n  f (limit g I) = f (natUnion (\\<lambda>n. funpower g n I))\n  P I \\<Longrightarrow>\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (\\<lambda>n. funpower h n (f I))\n  natUnion (\\<lambda>n. funpower h n (f I)) = limit h (f I)\n  P I", "show ?thesis"], ["proof (prove)\nusing this:\n  f (limit g I) = f (natUnion (\\<lambda>n. funpower g n I))\n  P I \\<Longrightarrow>\n  f (natUnion (\\<lambda>n. funpower g n I)) =\n  natUnion (\\<lambda>n. funpower h n (f I))\n  natUnion (\\<lambda>n. funpower h n (f I)) = limit h (f I)\n  P I\n\ngoal (1 subgoal):\n 1. f (limit g I) = limit h (f I)", "by auto"], ["proof (state)\nthis:\n  f (limit g I) = limit h (f I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma items_le_\\<pi>_swap: \n  assumes wellformed_I: \"wellformed_items I\"\n  assumes T: \"T \\<subseteq> \\<X> k\"\n  shows \"items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "let ?g = \"(Scan T k) o (Complete k) o (Predict k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "let ?h = \"(Scan (empty_tokens T) k) o (Complete k) o (Predict k)\""], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "have law1: \"\\<And> I. wellformed_items I \\<Longrightarrow> items_le k (?g I) = ?h (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       wellformed_items I \\<Longrightarrow>\n       items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) I) =\n       (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n        (items_le k I)", "using LocalLexing.wellformed_items_Predict LocalLexing_axioms items_le_Complete \n      items_le_Predict items_le_Scan"], ["proof (prove)\nusing this:\n  \\<lbrakk>LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel;\n   LocalLexing.wellformed_items ?\\<RR> ?Doc ?I\\<rbrakk>\n  \\<Longrightarrow> LocalLexing.wellformed_items ?\\<RR> ?Doc\n                     (LocalLexing.Predict ?\\<RR> ?k ?I)\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  wellformed_items ?I \\<Longrightarrow>\n  items_le ?k (Complete ?k ?I) = Complete ?k (items_le ?k ?I)\n  items_le ?k (Predict ?k ?I) = Predict ?k (items_le ?k ?I)\n  items_le ?k (Scan ?T ?k ?I) = Scan (empty_tokens ?T) ?k (items_le ?k ?I)\n\ngoal (1 subgoal):\n 1. \\<And>I.\n       wellformed_items I \\<Longrightarrow>\n       items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) I) =\n       (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n        (items_le k I)", "by auto"], ["proof (state)\nthis:\n  wellformed_items ?I \\<Longrightarrow>\n  items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) ?I) =\n  (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n   (items_le k ?I)\n\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "have law2: \"\\<And> I. wellformed_items I \\<Longrightarrow> wellformed_items (?g I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>I.\n       wellformed_items I \\<Longrightarrow>\n       wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) I)", "by (simp add: T wellformed_items_Complete wellformed_items_Predict wellformed_items_Scan)"], ["proof (state)\nthis:\n  wellformed_items ?I \\<Longrightarrow>\n  wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) ?I)\n\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)", "apply (subst \\<pi>_functional)"], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (limit (Scan T k \\<circ> Complete k \\<circ> Predict k) I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply (subst limit_consume_function[where P=\"wellformed_items\" and h=\"?h\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. continuous (items_le k)\n 2. \\<And>X.\n       wellformed_items X \\<Longrightarrow>\n       items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) X) =\n       (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n        (items_le k X) \\<and>\n       wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) X)\n 3. setmonotone (Scan T k \\<circ> Complete k \\<circ> Predict k)\n 4. wellformed_items I\n 5. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply (simp add: items_le_pointwise pointbased_implies_continuous pointwise_implies_pointbased)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>X.\n       wellformed_items X \\<Longrightarrow>\n       items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) X) =\n       (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n        (items_le k X) \\<and>\n       wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) X)\n 2. setmonotone (Scan T k \\<circ> Complete k \\<circ> Predict k)\n 3. wellformed_items I\n 4. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "using law1 law2"], ["proof (prove)\nusing this:\n  wellformed_items ?I \\<Longrightarrow>\n  items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) ?I) =\n  (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n   (items_le k ?I)\n  wellformed_items ?I \\<Longrightarrow>\n  wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) ?I)\n\ngoal (4 subgoals):\n 1. \\<And>X.\n       wellformed_items X \\<Longrightarrow>\n       items_le k ((Scan T k \\<circ> Complete k \\<circ> Predict k) X) =\n       (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n        (items_le k X) \\<and>\n       wellformed_items ((Scan T k \\<circ> Complete k \\<circ> Predict k) X)\n 2. setmonotone (Scan T k \\<circ> Complete k \\<circ> Predict k)\n 3. wellformed_items I\n 4. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. setmonotone (Scan T k \\<circ> Complete k \\<circ> Predict k)\n 2. wellformed_items I\n 3. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply (simp add: \\<pi>_step_regular regular_implies_setmonotone)"], ["proof (prove)\ngoal (2 subgoals):\n 1. wellformed_items I\n 2. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply (rule wellformed_I)"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    \\<pi> k (empty_tokens T) (items_le k I)", "apply (subst \\<pi>_functional)"], ["proof (prove)\ngoal (1 subgoal):\n 1. limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I) =\n    limit (Scan (empty_tokens T) k \\<circ> Complete k \\<circ> Predict k)\n     (items_le k I)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  items_le k (\\<pi> k T I) = \\<pi> k (empty_tokens T) (items_le k I)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma items_le_idempotent: \"items_le k (items_le k I) = items_le k I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (items_le k I) = items_le k I", "using items_le_def"], ["proof (prove)\nusing this:\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n\ngoal (1 subgoal):\n 1. items_le k (items_le k I) = items_le k I", "by auto"], ["", "lemma paths_le_idempotent: \"paths_le k (paths_le k P) = paths_le k P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le k (paths_le k P) = paths_le k P", "using paths_le_def"], ["proof (prove)\nusing this:\n  paths_le ?k ?P = {p \\<in> ?P. charslength p \\<le> ?k}\n\ngoal (1 subgoal):\n 1. paths_le k (paths_le k P) = paths_le k P", "by auto"], ["", "lemma items_le_fix_D:\n  assumes items_le_fix: \"items_le k I = I\"\n  assumes x_dom: \"x \\<in> I\" \n  shows \"item_end x \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_end x \\<le> k", "using items_le_def items_le_fix x_dom"], ["proof (prove)\nusing this:\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  items_le k I = I\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k", "by blast"], ["", "lemma remove_paths_le_in_subset_Gen:\n  assumes \"items_le k I = I\"\n  assumes \"I \\<subseteq> Gen P\"\n  shows \"I \\<subseteq> Gen (paths_le k P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "fix x :: item"], ["proof (state)\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "assume x_dom: \"x \\<in> I\""], ["proof (state)\nthis:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> I", "have x_item_end:  \"item_end x \\<le> k\""], ["proof (prove)\nusing this:\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k", "using assms items_le_fix_D"], ["proof (prove)\nusing this:\n  x \\<in> I\n  items_le k I = I\n  I \\<subseteq> Gen P\n  \\<lbrakk>items_le ?k ?I = ?I; ?x \\<in> ?I\\<rbrakk>\n  \\<Longrightarrow> item_end ?x \\<le> ?k\n\ngoal (1 subgoal):\n 1. item_end x \\<le> k", "by auto"], ["proof (state)\nthis:\n  item_end x \\<le> k\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "have \"x \\<in> Gen P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "using assms x_dom"], ["proof (prove)\nusing this:\n  items_le k I = I\n  I \\<subseteq> Gen P\n  x \\<in> I\n\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "by auto"], ["proof (state)\nthis:\n  x \\<in> Gen P\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "then"], ["proof (chain)\npicking this:\n  x \\<in> Gen P", "obtain p where p: \"p \\<in> P \\<and> pvalid p x\""], ["proof (prove)\nusing this:\n  x \\<in> Gen P\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> P \\<and> pvalid p x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using Gen_implies_pvalid"], ["proof (prove)\nusing this:\n  x \\<in> Gen P\n  ?x \\<in> Gen ?P \\<Longrightarrow> \\<exists>p\\<in>?P. pvalid p ?x\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> P \\<and> pvalid p x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> P \\<and> pvalid p x\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "have charslength_p: \"charslength p \\<le> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. charslength p \\<le> k", "using p pvalid_item_end x_item_end"], ["proof (prove)\nusing this:\n  p \\<in> P \\<and> pvalid p x\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n  item_end x \\<le> k\n\ngoal (1 subgoal):\n 1. charslength p \\<le> k", "by auto"], ["proof (state)\nthis:\n  charslength p \\<le> k\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "then"], ["proof (chain)\npicking this:\n  charslength p \\<le> k", "have \"p \\<in> paths_le k P\""], ["proof (prove)\nusing this:\n  charslength p \\<le> k\n\ngoal (1 subgoal):\n 1. p \\<in> paths_le k P", "by (simp add: p paths_le_def)"], ["proof (state)\nthis:\n  p \\<in> paths_le k P\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "then"], ["proof (chain)\npicking this:\n  p \\<in> paths_le k P", "have \"x \\<in> Gen (paths_le k P)\""], ["proof (prove)\nusing this:\n  p \\<in> paths_le k P\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k P)", "using Gen_def p"], ["proof (prove)\nusing this:\n  p \\<in> paths_le k P\n  Gen ?P = {uu_. \\<exists>x p. uu_ = x \\<and> p \\<in> ?P \\<and> pvalid p x}\n  p \\<in> P \\<and> pvalid p x\n\ngoal (1 subgoal):\n 1. x \\<in> Gen (paths_le k P)", "by blast"], ["proof (state)\nthis:\n  x \\<in> Gen (paths_le k P)\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> I \\<Longrightarrow> ?x2 \\<in> Gen (paths_le k P)\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "then"], ["proof (chain)\npicking this:\n  ?x2 \\<in> I \\<Longrightarrow> ?x2 \\<in> Gen (paths_le k P)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> I \\<Longrightarrow> ?x2 \\<in> Gen (paths_le k P)\n\ngoal (1 subgoal):\n 1. I \\<subseteq> Gen (paths_le k P)", "by blast"], ["proof (state)\nthis:\n  I \\<subseteq> Gen (paths_le k P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mono_Gen: \"mono Gen\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono Gen", "by (auto simp add: mono_def Gen_def)"], ["", "lemma empty_tokens_idempotent: \"empty_tokens (empty_tokens T) = empty_tokens T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empty_tokens (empty_tokens T) = empty_tokens T", "by (auto simp add: empty_tokens_def)"], ["", "lemma empty_tokens_is_filter: \"empty_tokens T \\<subseteq> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. empty_tokens T \\<subseteq> T", "by (auto simp add: empty_tokens_def)"], ["", "lemma items_le_paths_le: \"items_le k (Gen P) = Gen (paths_le k P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (Gen P) = Gen (paths_le k P)", "using LocalLexing.Gen_def LocalLexing.items_le_def LocalLexing_axioms paths_le_def \n  pvalid_item_end"], ["proof (prove)\nusing this:\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  LocalLexing.Gen ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Doc ?P =\n  {uu_.\n   \\<exists>x p.\n      uu_ = x \\<and>\n      p \\<in> ?P \\<and>\n      LocalLexing.pvalid ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Doc p x}\n  LocalLexing ?\\<NN> ?\\<TT> ?\\<RR> ?\\<SS> ?Lex ?Sel \\<Longrightarrow>\n  items_le ?k ?I = {x \\<in> ?I. item_end x \\<le> ?k}\n  LocalLexing \\<NN> \\<TT> \\<RR> \\<SS> Lex Sel\n  paths_le ?k ?P = {p \\<in> ?P. charslength p \\<le> ?k}\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n\ngoal (1 subgoal):\n 1. items_le k (Gen P) = Gen (paths_le k P)", "by auto"], ["", "lemma bin_items_le[symmetric]: \"bin I k = bin (items_le k I) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bin I k = bin (items_le k I) k", "by (auto simp add: bin_def items_le_def)"], ["", "lemma TokensAt_items_le[symmetric]: \"TokensAt k I = TokensAt k (items_le k I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k I = TokensAt k (items_le k I)", "using TokensAt_def bin_items_le"], ["proof (prove)\nusing this:\n  TokensAt ?k ?I =\n  {uu_.\n   \\<exists>t s x l.\n      uu_ = (t, s) \\<and>\n      x \\<in> bin ?I ?k \\<and>\n      next_symbol x = Some t \\<and>\n      is_terminal t \\<and>\n      l \\<in> Lex t Doc ?k \\<and> s = take l (drop ?k Doc)}\n  bin (items_le ?k ?I) ?k = bin ?I ?k\n\ngoal (1 subgoal):\n 1. TokensAt k I = TokensAt k (items_le k I)", "by blast"], ["", "lemma by_length_paths_le[symmetric]: \"by_length k P = by_length k (paths_le k P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. by_length k P = by_length k (paths_le k P)", "using by_length.simps paths_le_def"], ["proof (prove)\nusing this:\n  by_length ?l ?tss = {ts \\<in> ?tss. length (chars ts) = ?l}\n  paths_le ?k ?P = {p \\<in> ?P. charslength p \\<le> ?k}\n\ngoal (1 subgoal):\n 1. by_length k P = by_length k (paths_le k P)", "by auto"], ["", "lemma \\<W>_paths_le[symmetric]: \"\\<W> P k = \\<W> (paths_le k P) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<W> P k = \\<W> (paths_le k P) k", "using \\<W>_def by_length_paths_le"], ["proof (prove)\nusing this:\n  \\<W> ?P ?k =\n  {u \\<in> \\<X> ?k. \\<exists>p\\<in>by_length ?k ?P. admissible (p @ [u])}\n  by_length ?k (paths_le ?k ?P) = by_length ?k ?P\n\ngoal (1 subgoal):\n 1. \\<W> P k = \\<W> (paths_le k P) k", "by blast"], ["", "theorem \\<T>_equals_\\<Z>_induct_step: \n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  shows \"\\<T> k (Suc u) = \\<Z> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "have \"TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))", "using TokensAt_items_le"], ["proof (prove)\nusing this:\n  TokensAt ?k (items_le ?k ?I) = TokensAt ?k ?I\n\ngoal (1 subgoal):\n 1. TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))", "by blast"], ["proof (state)\nthis:\n  TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "also"], ["proof (state)\nthis:\n  TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "have \"TokensAt k (items_le k (\\<J> k u)) = TokensAt k (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k (items_le k (\\<J> k u)) =\n    TokensAt k (Gen (paths_le k (\\<P> k u)))", "using induct"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n\ngoal (1 subgoal):\n 1. TokensAt k (items_le k (\\<J> k u)) =\n    TokensAt k (Gen (paths_le k (\\<P> k u)))", "by auto"], ["proof (state)\nthis:\n  TokensAt k (items_le k (\\<J> k u)) =\n  TokensAt k (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "ultimately"], ["proof (chain)\npicking this:\n  TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))\n  TokensAt k (items_le k (\\<J> k u)) =\n  TokensAt k (Gen (paths_le k (\\<P> k u)))", "have TokensAt_le: \"TokensAt k (\\<J> k u) = TokensAt k (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\nusing this:\n  TokensAt k (\\<J> k u) = TokensAt k (items_le k (\\<J> k u))\n  TokensAt k (items_le k (\\<J> k u)) =\n  TokensAt k (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. TokensAt k (\\<J> k u) = TokensAt k (Gen (paths_le k (\\<P> k u)))", "by auto"], ["proof (state)\nthis:\n  TokensAt k (\\<J> k u) = TokensAt k (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "have \"TokensAt k (\\<J> k u) = \\<W> (\\<P> k u) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k (\\<J> k u) = \\<W> (\\<P> k u) k", "apply (subst TokensAt_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k (Gen (paths_le k (\\<P> k u))) = \\<W> (\\<P> k u) k", "apply (subst \\<W>_paths_le[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. TokensAt k (Gen (paths_le k (\\<P> k u))) =\n    \\<W> (paths_le k (\\<P> k u)) k", "apply (rule_tac thmD4[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. paths_le k (\\<P> k u) \\<subseteq> \\<PP>", "using \\<PP>_covers_\\<P> paths_le_is_filter"], ["proof (prove)\nusing this:\n  \\<P> ?k ?u \\<subseteq> \\<PP>\n  paths_le ?k ?P \\<subseteq> ?P\n\ngoal (1 subgoal):\n 1. paths_le k (\\<P> k u) \\<subseteq> \\<PP>", "by blast"], ["proof (state)\nthis:\n  TokensAt k (\\<J> k u) = \\<W> (\\<P> k u) k\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "then"], ["proof (chain)\npicking this:\n  TokensAt k (\\<J> k u) = \\<W> (\\<P> k u) k", "show ?thesis"], ["proof (prove)\nusing this:\n  TokensAt k (\\<J> k u) = \\<W> (\\<P> k u) k\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "by (simp add: induct_tokens Tokens_def \\<Y>_def)"], ["proof (state)\nthis:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem thmD9:\n  assumes induct: \"items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\"\n  assumes induct_tokens: \"\\<T> k u = \\<Z> k u\"\n  assumes k: \"k \\<le> length Doc\"\n  shows \"items_le k (\\<J> k (Suc u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have t1: \"items_le k (\\<J> k (Suc u)) = items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u)) =\n    items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))", "by auto"], ["proof (state)\nthis:\n  items_le k (\\<J> k (Suc u)) =\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have t2: \"items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) = \n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))", "apply (subst items_le_\\<pi>_swap)"], ["proof (prove)\ngoal (3 subgoals):\n 1. wellformed_items (\\<J> k u)\n 2. \\<T> k (Suc u) \\<subseteq> \\<X> k\n 3. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))", "apply (simp add: wellformed_items_\\<J>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<T> k (Suc u) \\<subseteq> \\<X> k\n 2. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))", "using TokensAt_subset_\\<X> \\<T>_subset_TokensAt"], ["proof (prove)\nusing this:\n  TokensAt ?k ?I \\<subseteq> \\<X> ?k\n  \\<T> ?k ?u \\<subseteq> TokensAt ?k (\\<J> ?k ?u)\n\ngoal (2 subgoals):\n 1. \\<T> k (Suc u) \\<subseteq> \\<X> k\n 2. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have t3: \"\\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))", "using induct"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))", "by auto"], ["proof (state)\nthis:\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have \\<P>_subset: \"\\<P> k u \\<subseteq> \\<P> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P> k u \\<subseteq> \\<P> k (Suc u)", "using subset_\\<P>Suc"], ["proof (prove)\nusing this:\n  \\<P> ?k ?u \\<subseteq> \\<P> ?k (Suc ?u)\n\ngoal (1 subgoal):\n 1. \\<P> k u \\<subseteq> \\<P> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  \\<P> k u \\<subseteq> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "then"], ["proof (chain)\npicking this:\n  \\<P> k u \\<subseteq> \\<P> k (Suc u)", "have \"paths_le k (\\<P> k u) \\<subseteq> paths_le k (\\<P> k (Suc u))\""], ["proof (prove)\nusing this:\n  \\<P> k u \\<subseteq> \\<P> k (Suc u)\n\ngoal (1 subgoal):\n 1. paths_le k (\\<P> k u) \\<subseteq> paths_le k (\\<P> k (Suc u))", "by (simp add: mono_subset_elem paths_le_mono subsetI)"], ["proof (state)\nthis:\n  paths_le k (\\<P> k u) \\<subseteq> paths_le k (\\<P> k (Suc u))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "with mono_Gen"], ["proof (chain)\npicking this:\n  mono Gen\n  paths_le k (\\<P> k u) \\<subseteq> paths_le k (\\<P> k (Suc u))", "have \"Gen (paths_le k (\\<P> k u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\""], ["proof (prove)\nusing this:\n  mono Gen\n  paths_le k (\\<P> k u) \\<subseteq> paths_le k (\\<P> k (Suc u))\n\ngoal (1 subgoal):\n 1. Gen (paths_le k (\\<P> k u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "by (simp add: mono_subset_elem subsetI)"], ["proof (state)\nthis:\n  Gen (paths_le k (\\<P> k u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "then"], ["proof (chain)\npicking this:\n  Gen (paths_le k (\\<P> k u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have t4: \"\\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u))) \\<subseteq>\n    \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k (Suc u))))\""], ["proof (prove)\nusing this:\n  Gen (paths_le k (\\<P> k u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n    \\<subseteq> \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n                 (Gen (paths_le k (\\<P> k (Suc u))))", "by (rule monoD[OF mono_\\<pi>])"], ["proof (state)\nthis:\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<subseteq> \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n               (Gen (paths_le k (\\<P> k (Suc u))))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have \\<T>_eq_\\<Z>: \"\\<T> k (Suc u) = \\<Z> k (Suc u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "using \\<T>_equals_\\<Z>_induct_step assms(1) induct_tokens"], ["proof (prove)\nusing this:\n  \\<lbrakk>items_le ?k (\\<J> ?k ?u) = Gen (paths_le ?k (\\<P> ?k ?u));\n   \\<T> ?k ?u = \\<Z> ?k ?u\\<rbrakk>\n  \\<Longrightarrow> \\<T> ?k (Suc ?u) = \\<Z> ?k (Suc ?u)\n  items_le k (\\<J> k u) = Gen (paths_le k (\\<P> k u))\n  \\<T> k u = \\<Z> k u\n\ngoal (1 subgoal):\n 1. \\<T> k (Suc u) = \\<Z> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "have t5: \"\\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k (Suc u)))) \\<subseteq> \n    Gen (paths_le k (\\<P> k (Suc u)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "apply (rule_tac remove_paths_le_in_subset_Gen)"], ["proof (prove)\ngoal (2 subgoals):\n 1. items_le k\n     (\\<pi> k (empty_tokens (\\<T> k (Suc u)))\n       (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 2. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "apply (subst items_le_\\<pi>_swap)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wellformed_items (Gen (paths_le k (\\<P> k (Suc u))))\n 2. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<X> k\n 3. \\<pi> k (empty_tokens (empty_tokens (\\<T> k (Suc u))))\n     (items_le k (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 4. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "using wellformed_items_Gen"], ["proof (prove)\nusing this:\n  wellformed_items (Gen ?P)\n\ngoal (4 subgoals):\n 1. wellformed_items (Gen (paths_le k (\\<P> k (Suc u))))\n 2. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<X> k\n 3. \\<pi> k (empty_tokens (empty_tokens (\\<T> k (Suc u))))\n     (items_le k (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 4. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<X> k\n 2. \\<pi> k (empty_tokens (empty_tokens (\\<T> k (Suc u))))\n     (items_le k (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 3. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "using \\<T>_eq_\\<Z> \\<Z>_subset_\\<X> empty_tokens_is_filter"], ["proof (prove)\nusing this:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n  \\<Z> ?k ?n \\<subseteq> \\<X> ?k\n  empty_tokens ?T \\<subseteq> ?T\n\ngoal (3 subgoals):\n 1. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<X> k\n 2. \\<pi> k (empty_tokens (empty_tokens (\\<T> k (Suc u))))\n     (items_le k (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 3. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<pi> k (empty_tokens (empty_tokens (\\<T> k (Suc u))))\n     (items_le k (Gen (paths_le k (\\<P> k (Suc u))))) =\n    \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n 2. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "apply (simp only: empty_tokens_idempotent paths_le_idempotent items_le_paths_le)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n     (Gen (paths_le k (\\<P> k (Suc u))))\n    \\<subseteq> Gen (\\<P> k (Suc u))", "apply (rule_tac thmD5)"], ["proof (prove)\ngoal (3 subgoals):\n 1. Gen (paths_le k (\\<P> k (Suc u))) \\<subseteq> Gen (\\<P> k (Suc u))\n 2. k \\<le> length Doc\n 3. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<Z> k (Suc u)", "using items_le_is_filter items_le_paths_le"], ["proof (prove)\nusing this:\n  items_le ?k ?I \\<subseteq> ?I\n  items_le ?k (Gen ?P) = Gen (paths_le ?k ?P)\n\ngoal (3 subgoals):\n 1. Gen (paths_le k (\\<P> k (Suc u))) \\<subseteq> Gen (\\<P> k (Suc u))\n 2. k \\<le> length Doc\n 3. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<Z> k (Suc u)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. k \\<le> length Doc\n 2. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<Z> k (Suc u)", "apply (rule k)"], ["proof (prove)\ngoal (1 subgoal):\n 1. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<Z> k (Suc u)", "using \\<T>_eq_\\<Z> empty_tokens_is_filter"], ["proof (prove)\nusing this:\n  \\<T> k (Suc u) = \\<Z> k (Suc u)\n  empty_tokens ?T \\<subseteq> ?T\n\ngoal (1 subgoal):\n 1. empty_tokens (\\<T> k (Suc u)) \\<subseteq> \\<Z> k (Suc u)", "by blast"], ["proof (state)\nthis:\n  \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n   (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "from t1 t2 t3 t4 t5"], ["proof (chain)\npicking this:\n  items_le k (\\<J> k (Suc u)) =\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<subseteq> \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n               (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n   (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "show ?thesis"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k (Suc u)) =\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<subseteq> \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n               (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n   (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "using subset_trans"], ["proof (prove)\nusing this:\n  items_le k (\\<J> k (Suc u)) =\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u))\n  items_le k (\\<pi> k (\\<T> k (Suc u)) (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (items_le k (\\<J> k u)) =\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u))) (Gen (paths_le k (\\<P> k u)))\n  \\<subseteq> \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n               (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<pi> k (empty_tokens (\\<T> k (Suc u)))\n   (Gen (paths_le k (\\<P> k (Suc u))))\n  \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n  \\<lbrakk>?A \\<subseteq> ?B; ?B \\<subseteq> ?C\\<rbrakk>\n  \\<Longrightarrow> ?A \\<subseteq> ?C\n\ngoal (1 subgoal):\n 1. items_le k (\\<J> k (Suc u))\n    \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))", "by blast"], ["proof (state)\nthis:\n  items_le k (\\<J> k (Suc u)) \\<subseteq> Gen (paths_le k (\\<P> k (Suc u)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}