{"file_name": "/home/qj213/afp-2021-10-22/thys/LocalLexing/TheoremD4.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/LocalLexing", "problem_names": ["lemma \\<X>_are_terminals: \"u \\<in> \\<X> k \\<Longrightarrow> is_terminal (terminal_of_token u)\"", "lemma terminals_append[simp]: \"terminals (a@b) = ((terminals a) @ (terminals b))\"", "lemma terminals_singleton[simp]: \"terminals [u] = [terminal_of_token u]\"", "lemma terminal_of_token_simp[simp]: \"terminal_of_token (a, b) = a\"", "lemma pvalid_item_end: \"pvalid p x \\<Longrightarrow> item_end x = charslength p\"", "lemma \\<W>_elem_in_TokensAt: \n  assumes P: \"P \\<subseteq> \\<PP>\"\n  assumes u_in_\\<W>: \"u \\<in> \\<W> P k\"\n  shows \"u \\<in> TokensAt k (Gen P)\"", "lemma is_derivation_is_sentence: \"is_derivation s \\<Longrightarrow> is_sentence s\"", "lemma is_sentence_cons: \"is_sentence (N#s) = (is_symbol N \\<and> is_sentence s)\"", "lemma is_derivation_step:\n  assumes uNv: \"is_derivation (u@[N]@v)\"\n  assumes N\\<alpha>: \"(N, \\<alpha>) \\<in> \\<RR>\"\n  shows \"is_derivation (u@\\<alpha>@v)\"", "lemma is_derivation_derives:\n  \"derives \\<alpha> \\<beta> \\<Longrightarrow> is_derivation (u@\\<alpha>@v) \\<Longrightarrow> is_derivation (u@\\<beta>@v)\"", "lemma item_rhs_split: \"item_rhs x = (item_\\<alpha> x)@(item_\\<beta> x)\"", "lemma pvalid_is_derivation_terminals_item_\\<beta>:\n  assumes pvalid: \"pvalid p x\"\n  shows \"\\<exists> \\<delta>. is_derivation ((terminals p)@(item_\\<beta> x)@\\<delta>)\"", "lemma next_symbol_not_complete: \"next_symbol x = Some t \\<Longrightarrow> \\<not> (is_complete x)\"", "lemma next_symbol_starts_item_\\<beta>:\n  assumes wf: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some t\"\n  shows \"\\<exists> \\<delta>. item_\\<beta> x = t#\\<delta>\"", "lemma pvalid_prefixlang:\n  assumes pvalid: \"pvalid p x\"\n  assumes is_terminal: \"is_terminal t\"\n  assumes next_symbol: \"next_symbol x = Some t\"\n  shows \"(terminals p) @ [t] \\<in> \\<L>\\<^sub>P\"", "lemma TokensAt_elem_in_\\<W>: \n  assumes P: \"P \\<subseteq> \\<PP>\"\n  assumes u_in_Tokens_at: \"u \\<in> TokensAt k (Gen P)\"\n  shows \"u \\<in> \\<W> P k\"", "theorem thmD4:\n  assumes P: \"P \\<subseteq> \\<PP>\"\n  shows \"\\<W> P k = TokensAt k (Gen P)\""], "translations": [["", "lemma \\<X>_are_terminals: \"u \\<in> \\<X> k \\<Longrightarrow> is_terminal (terminal_of_token u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<X> k \\<Longrightarrow> is_terminal (terminal_of_token u)", "by (auto simp add: \\<X>_def is_terminal_def terminal_of_token_def)"], ["", "lemma terminals_append[simp]: \"terminals (a@b) = ((terminals a) @ (terminals b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals (a @ b) = terminals a @ terminals b", "by (auto simp add: terminals_def)"], ["", "lemma terminals_singleton[simp]: \"terminals [u] = [terminal_of_token u]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals [u] = [terminal_of_token u]", "by (simp add: terminals_def)"], ["", "lemma terminal_of_token_simp[simp]: \"terminal_of_token (a, b) = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminal_of_token (a, b) = a", "by (simp add: terminal_of_token_def)"], ["", "lemma pvalid_item_end: \"pvalid p x \\<Longrightarrow> item_end x = charslength p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pvalid p x \\<Longrightarrow> item_end x = charslength p", "by (metis pvalid_def)"], ["", "lemma \\<W>_elem_in_TokensAt: \n  assumes P: \"P \\<subseteq> \\<PP>\"\n  assumes u_in_\\<W>: \"u \\<in> \\<W> P k\"\n  shows \"u \\<in> TokensAt k (Gen P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "have u: \"u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<X> k \\<and>\n    (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))", "using u_in_\\<W>"], ["proof (prove)\nusing this:\n  u \\<in> \\<W> P k\n\ngoal (1 subgoal):\n 1. u \\<in> \\<X> k \\<and>\n    (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))", "by (auto simp add: \\<W>_def)"], ["proof (state)\nthis:\n  u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "then"], ["proof (chain)\npicking this:\n  u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))", "obtain p where p: \"p \\<in> by_length k P \\<and> admissible (p @ [u])\""], ["proof (prove)\nusing this:\n  u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> by_length k P \\<and> admissible (p @ [u]) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "then"], ["proof (chain)\npicking this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])", "have charslength_p: \"charslength p = k\""], ["proof (prove)\nusing this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])\n\ngoal (1 subgoal):\n 1. charslength p = k", "by (metis (mono_tags, lifting) by_length.simps charslength.simps mem_Collect_eq)"], ["proof (state)\nthis:\n  charslength p = k\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "from u"], ["proof (chain)\npicking this:\n  u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))", "have u: \"u \\<in> \\<X> k\""], ["proof (prove)\nusing this:\n  u \\<in> \\<X> k \\<and> (\\<exists>p\\<in>by_length k P. admissible (p @ [u]))\n\ngoal (1 subgoal):\n 1. u \\<in> \\<X> k", "by blast"], ["proof (state)\nthis:\n  u \\<in> \\<X> k\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "from p"], ["proof (chain)\npicking this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])", "have p_in_\\<PP>: \"p \\<in> \\<PP>\""], ["proof (prove)\nusing this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])\n\ngoal (1 subgoal):\n 1. p \\<in> \\<PP>", "by (metis (no_types, lifting) P by_length.simps mem_Collect_eq subsetCE)"], ["proof (state)\nthis:\n  p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "then"], ["proof (chain)\npicking this:\n  p \\<in> \\<PP>", "have doc_tokens_p: \"doc_tokens p\""], ["proof (prove)\nusing this:\n  p \\<in> \\<PP>\n\ngoal (1 subgoal):\n 1. doc_tokens p", "by (metis \\<PP>_are_doc_tokens)"], ["proof (state)\nthis:\n  doc_tokens p\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "let ?X = \"terminal_of_token u\""], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "have X_is_terminal: \"is_terminal ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_terminal (terminal_of_token u)", "by (metis \\<X>_are_terminals u)"], ["proof (state)\nthis:\n  is_terminal (terminal_of_token u)\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "from p"], ["proof (chain)\npicking this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])", "have \"terminals p @ [terminal_of_token u] \\<in> \\<L>\\<^sub>P\""], ["proof (prove)\nusing this:\n  p \\<in> by_length k P \\<and> admissible (p @ [u])\n\ngoal (1 subgoal):\n 1. terminals p @ [terminal_of_token u] \\<in> \\<L>\\<^sub>P", "by (auto simp add: admissible_def)"], ["proof (state)\nthis:\n  terminals p @ [terminal_of_token u] \\<in> \\<L>\\<^sub>P\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "from thmD2[OF X_is_terminal p_in_\\<PP> this]"], ["proof (chain)\npicking this:\n  \\<exists>x. pvalid p x \\<and> next_symbol x = Some (terminal_of_token u)", "obtain x where\n    x: \"pvalid p x \\<and> next_symbol x = Some (terminal_of_token u)\""], ["proof (prove)\nusing this:\n  \\<exists>x. pvalid p x \\<and> next_symbol x = Some (terminal_of_token u)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        pvalid p x \\<and>\n        next_symbol x = Some (terminal_of_token u) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  pvalid p x \\<and> next_symbol x = Some (terminal_of_token u)\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "have x_is_in_Gen_P: \"x \\<in> Gen P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen P", "by (metis (mono_tags, lifting) Gen_def by_length.simps mem_Collect_eq p x)"], ["proof (state)\nthis:\n  x \\<in> Gen P\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "have u_split[dest!]: \"\\<And> t s. u = (t, s) \\<Longrightarrow> t = terminal_of_token u \\<and> s = chars_of_token u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t s.\n       u = (t, s) \\<Longrightarrow>\n       t = terminal_of_token u \\<and> s = chars_of_token u", "by (metis chars_of_token_simp fst_conv terminal_of_token_def)"], ["proof (state)\nthis:\n  u = (?t, ?s) \\<Longrightarrow>\n  ?t = terminal_of_token u \\<and> ?s = chars_of_token u\n\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> TokensAt k (Gen P)", "apply (auto simp add: TokensAt_def bin_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> Gen P \\<and>\n       item_end x = k \\<and>\n       next_symbol x = Some (terminal_of_token u) \\<and>\n       is_terminal (terminal_of_token u) \\<and>\n       (\\<exists>l.\n           l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n           chars_of_token u = take l (drop k Doc))", "apply (rule_tac x=x in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> Gen P \\<and>\n    item_end x = k \\<and>\n    next_symbol x = Some (terminal_of_token u) \\<and>\n    is_terminal (terminal_of_token u) \\<and>\n    (\\<exists>l.\n        l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n        chars_of_token u = take l (drop k Doc))", "apply (auto simp add: x_is_in_Gen_P x X_is_terminal)"], ["proof (prove)\ngoal (2 subgoals):\n 1. item_end x = k\n 2. \\<exists>l.\n       l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n       chars_of_token u = take l (drop k Doc)", "using x charslength_p pvalid_item_end"], ["proof (prove)\nusing this:\n  pvalid p x \\<and> next_symbol x = Some (terminal_of_token u)\n  charslength p = k\n  pvalid ?p ?x \\<Longrightarrow> item_end ?x = charslength ?p\n\ngoal (2 subgoals):\n 1. item_end x = k\n 2. \\<exists>l.\n       l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n       chars_of_token u = take l (drop k Doc)", "apply (simp, blast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n       chars_of_token u = take l (drop k Doc)", "using u"], ["proof (prove)\nusing this:\n  u \\<in> \\<X> k\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l \\<in> Lex (terminal_of_token u) Doc k \\<and>\n       chars_of_token u = take l (drop k Doc)", "by (auto simp add: \\<X>_def)"], ["proof (state)\nthis:\n  u \\<in> TokensAt k (Gen P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_derivation_is_sentence: \"is_derivation s \\<Longrightarrow> is_sentence s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_derivation s \\<Longrightarrow> is_sentence s", "by (metis (no_types, lifting) Derives1_sentence2 derives1_implies_Derives1 \n    derives_induct is_derivation_def is_nonterminal_startsymbol is_sentence_cons \n    is_sentence_def is_symbol_def list.pred_inject(1))"], ["", "lemma is_sentence_cons: \"is_sentence (N#s) = (is_symbol N \\<and> is_sentence s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_sentence (N # s) = (is_symbol N \\<and> is_sentence s)", "by (auto simp add: is_sentence_def)"], ["", "lemma is_derivation_step:\n  assumes uNv: \"is_derivation (u@[N]@v)\"\n  assumes N\\<alpha>: \"(N, \\<alpha>) \\<in> \\<RR>\"\n  shows \"is_derivation (u@\\<alpha>@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "from uNv"], ["proof (chain)\npicking this:\n  is_derivation (u @ [N] @ v)", "have \"is_sentence (u@[N]@v)\""], ["proof (prove)\nusing this:\n  is_derivation (u @ [N] @ v)\n\ngoal (1 subgoal):\n 1. is_sentence (u @ [N] @ v)", "by (metis is_derivation_is_sentence)"], ["proof (state)\nthis:\n  is_sentence (u @ [N] @ v)\n\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "with is_sentence_concat is_sentence_cons"], ["proof (chain)\npicking this:\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  is_sentence (?N # ?s) = (is_symbol ?N \\<and> is_sentence ?s)\n  is_sentence (u @ [N] @ v)", "have u_is_sentence: \"is_sentence u\" and v_is_sentence: \"is_sentence v\""], ["proof (prove)\nusing this:\n  is_sentence (?x @ ?y) = (is_sentence ?x \\<and> is_sentence ?y)\n  is_sentence (?N # ?s) = (is_symbol ?N \\<and> is_sentence ?s)\n  is_sentence (u @ [N] @ v)\n\ngoal (1 subgoal):\n 1. is_sentence u &&& is_sentence v", "by auto"], ["proof (state)\nthis:\n  is_sentence u\n  is_sentence v\n\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "from N\\<alpha>"], ["proof (chain)\npicking this:\n  (N, \\<alpha>) \\<in> \\<RR>", "have \"derives1 (u@[N]@v) (u@\\<alpha>@v)\""], ["proof (prove)\nusing this:\n  (N, \\<alpha>) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. derives1 (u @ [N] @ v) (u @ \\<alpha> @ v)", "apply (auto simp add: derives1_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow>\n    \\<exists>x y Na.\n       u @ N # v = x @ Na # y \\<and>\n       (\\<exists>\\<alpha>'.\n           u @ \\<alpha> @ v = x @ \\<alpha>' @ y \\<and>\n           is_sentence x \\<and>\n           is_sentence y \\<and> (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=u in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow>\n    \\<exists>y Na.\n       u @ N # v = u @ Na # y \\<and>\n       (\\<exists>\\<alpha>'.\n           u @ \\<alpha> @ v = u @ \\<alpha>' @ y \\<and>\n           is_sentence u \\<and>\n           is_sentence y \\<and> (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=v in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow>\n    \\<exists>Na.\n       u @ N # v = u @ Na # v \\<and>\n       (\\<exists>\\<alpha>'.\n           u @ \\<alpha> @ v = u @ \\<alpha>' @ v \\<and>\n           is_sentence u \\<and>\n           is_sentence v \\<and> (Na, \\<alpha>') \\<in> \\<RR>)", "apply (rule_tac x=N in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, \\<alpha>) \\<in> \\<RR> \\<Longrightarrow>\n    u @ N # v = u @ N # v \\<and>\n    (\\<exists>\\<alpha>'.\n        u @ \\<alpha> @ v = u @ \\<alpha>' @ v \\<and>\n        is_sentence u \\<and>\n        is_sentence v \\<and> (N, \\<alpha>') \\<in> \\<RR>)", "by (auto simp add: u_is_sentence v_is_sentence)"], ["proof (state)\nthis:\n  derives1 (u @ [N] @ v) (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "then"], ["proof (chain)\npicking this:\n  derives1 (u @ [N] @ v) (u @ \\<alpha> @ v)", "show ?thesis"], ["proof (prove)\nusing this:\n  derives1 (u @ [N] @ v) (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "by (metis derives1_implies_derives derives_trans is_derivation_def uNv)"], ["proof (state)\nthis:\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma is_derivation_derives:\n  \"derives \\<alpha> \\<beta> \\<Longrightarrow> is_derivation (u@\\<alpha>@v) \\<Longrightarrow> is_derivation (u@\\<beta>@v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>derives \\<alpha> \\<beta>;\n     is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n    \\<Longrightarrow> is_derivation (u @ \\<beta> @ v)", "proof (induct rule: derives_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n    is_derivation (u @ \\<alpha> @ v)\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "case Base"], ["proof (state)\nthis:\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (2 subgoals):\n 1. is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n    is_derivation (u @ \\<alpha> @ v)\n 2. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "thus ?case"], ["proof (prove)\nusing this:\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. is_derivation (u @ \\<alpha> @ v)", "by simp"], ["proof (state)\nthis:\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "case (Step y z)"], ["proof (state)\nthis:\n  derives \\<alpha> y\n  derives1 y z\n  is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n  is_derivation (u @ y @ v)\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "from Step"], ["proof (chain)\npicking this:\n  derives \\<alpha> y\n  derives1 y z\n  is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n  is_derivation (u @ y @ v)\n  is_derivation (u @ \\<alpha> @ v)", "have 1: \"is_derivation (u @ y @ v)\""], ["proof (prove)\nusing this:\n  derives \\<alpha> y\n  derives1 y z\n  is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n  is_derivation (u @ y @ v)\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. is_derivation (u @ y @ v)", "by auto"], ["proof (state)\nthis:\n  is_derivation (u @ y @ v)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "from Step"], ["proof (chain)\npicking this:\n  derives \\<alpha> y\n  derives1 y z\n  is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n  is_derivation (u @ y @ v)\n  is_derivation (u @ \\<alpha> @ v)", "have 2: \"derives1 y z\""], ["proof (prove)\nusing this:\n  derives \\<alpha> y\n  derives1 y z\n  is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n  is_derivation (u @ y @ v)\n  is_derivation (u @ \\<alpha> @ v)\n\ngoal (1 subgoal):\n 1. derives1 y z", "by auto"], ["proof (state)\nthis:\n  derives1 y z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>derives \\<alpha> y; derives1 y z;\n        is_derivation (u @ \\<alpha> @ v) \\<Longrightarrow>\n        is_derivation (u @ y @ v);\n        is_derivation (u @ \\<alpha> @ v)\\<rbrakk>\n       \\<Longrightarrow> is_derivation (u @ z @ v)", "from 1 2"], ["proof (chain)\npicking this:\n  is_derivation (u @ y @ v)\n  derives1 y z", "show ?case"], ["proof (prove)\nusing this:\n  is_derivation (u @ y @ v)\n  derives1 y z\n\ngoal (1 subgoal):\n 1. is_derivation (u @ z @ v)", "by (metis append_assoc derives1_def is_derivation_step)"], ["proof (state)\nthis:\n  is_derivation (u @ z @ v)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma item_rhs_split: \"item_rhs x = (item_\\<alpha> x)@(item_\\<beta> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. item_rhs x = item_\\<alpha> x @ item_\\<beta> x", "by (metis append_take_drop_id item_\\<alpha>_def item_\\<beta>_def)"], ["", "lemma pvalid_is_derivation_terminals_item_\\<beta>:\n  assumes pvalid: \"pvalid p x\"\n  shows \"\\<exists> \\<delta>. is_derivation ((terminals p)@(item_\\<beta> x)@\\<delta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "from pvalid"], ["proof (chain)\npicking this:\n  pvalid p x", "have \"\\<exists> u \\<gamma>. is_derivation (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n    derives (item_\\<alpha> x) (terminals (drop u p))\""], ["proof (prove)\nusing this:\n  pvalid p x\n\ngoal (1 subgoal):\n 1. \\<exists>u \\<gamma>.\n       is_derivation\n        (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n       derives (item_\\<alpha> x) (terminals (drop u p))", "by (auto simp add: pvalid_def)"], ["proof (state)\nthis:\n  \\<exists>u \\<gamma>.\n     is_derivation\n      (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> x) (terminals (drop u p))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  \\<exists>u \\<gamma>.\n     is_derivation\n      (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> x) (terminals (drop u p))", "obtain u \\<gamma> where 1: \"is_derivation (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n    derives (item_\\<alpha> x) (terminals (drop u p))\""], ["proof (prove)\nusing this:\n  \\<exists>u \\<gamma>.\n     is_derivation\n      (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n     derives (item_\\<alpha> x) (terminals (drop u p))\n\ngoal (1 subgoal):\n 1. (\\<And>u \\<gamma>.\n        is_derivation\n         (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n        derives (item_\\<alpha> x) (terminals (drop u p)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_derivation\n   (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x) (terminals (drop u p))\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "have x_rule: \"(item_nonterminal x, item_rhs x) \\<in> \\<RR>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (item_nonterminal x, item_rhs x) \\<in> \\<RR>", "by (metis (no_types, lifting) LocalLexing.pvalid_def LocalLexing_axioms assms case_prodE item_nonterminal_def item_rhs_def prod.sel(1) snd_conv validRules wellformed_item_def)"], ["proof (state)\nthis:\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "from 1 x_rule is_derivation_step"], ["proof (chain)\npicking this:\n  is_derivation\n   (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x) (terminals (drop u p))\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>\n  \\<lbrakk>is_derivation (?u @ [?N] @ ?v);\n   (?N, ?\\<alpha>) \\<in> \\<RR>\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<alpha> @ ?v)", "have \n    \"is_derivation ((take u (terminals p)) @ (item_rhs x) @ \\<gamma>)\""], ["proof (prove)\nusing this:\n  is_derivation\n   (terminals (take u p) @ [item_nonterminal x] @ \\<gamma>) \\<and>\n  derives (item_\\<alpha> x) (terminals (drop u p))\n  (item_nonterminal x, item_rhs x) \\<in> \\<RR>\n  \\<lbrakk>is_derivation (?u @ [?N] @ ?v);\n   (?N, ?\\<alpha>) \\<in> \\<RR>\\<rbrakk>\n  \\<Longrightarrow> is_derivation (?u @ ?\\<alpha> @ ?v)\n\ngoal (1 subgoal):\n 1. is_derivation (take u (terminals p) @ item_rhs x @ \\<gamma>)", "by auto"], ["proof (state)\nthis:\n  is_derivation (take u (terminals p) @ item_rhs x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation (take u (terminals p) @ item_rhs x @ \\<gamma>)", "have \"is_derivation ((take u (terminals p)) @ ((item_\\<alpha> x)@(item_\\<beta> x)) @ \\<gamma>)\""], ["proof (prove)\nusing this:\n  is_derivation (take u (terminals p) @ item_rhs x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (take u (terminals p) @ (item_\\<alpha> x @ item_\\<beta> x) @ \\<gamma>)", "by (simp add: item_rhs_split)"], ["proof (state)\nthis:\n  is_derivation\n   (take u (terminals p) @ (item_\\<alpha> x @ item_\\<beta> x) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (take u (terminals p) @ (item_\\<alpha> x @ item_\\<beta> x) @ \\<gamma>)", "have \"is_derivation ((take u (terminals p)) @ (item_\\<alpha> x) @ ((item_\\<beta> x) @ \\<gamma>))\""], ["proof (prove)\nusing this:\n  is_derivation\n   (take u (terminals p) @ (item_\\<alpha> x @ item_\\<beta> x) @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (take u (terminals p) @ item_\\<alpha> x @ item_\\<beta> x @ \\<gamma>)", "by simp"], ["proof (state)\nthis:\n  is_derivation\n   (take u (terminals p) @ item_\\<alpha> x @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (take u (terminals p) @ item_\\<alpha> x @ item_\\<beta> x @ \\<gamma>)", "have \"is_derivation ((take u (terminals p)) @ (drop u (terminals p)) @ ((item_\\<beta> x) @ \\<gamma>))\""], ["proof (prove)\nusing this:\n  is_derivation\n   (take u (terminals p) @ item_\\<alpha> x @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_derivation\n     (take u (terminals p) @\n      drop u (terminals p) @ item_\\<beta> x @ \\<gamma>)", "by (metis 1 is_derivation_derives terminals_drop)"], ["proof (state)\nthis:\n  is_derivation\n   (take u (terminals p) @ drop u (terminals p) @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation\n   (take u (terminals p) @ drop u (terminals p) @ item_\\<beta> x @ \\<gamma>)", "have \"is_derivation ((terminals p) @ ((item_\\<beta> x) @ \\<gamma>))\""], ["proof (prove)\nusing this:\n  is_derivation\n   (take u (terminals p) @ drop u (terminals p) @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "by (metis append_assoc append_take_drop_id)"], ["proof (state)\nthis:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<gamma>)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)", "by auto"], ["proof (state)\nthis:\n  \\<exists>\\<delta>. is_derivation (terminals p @ item_\\<beta> x @ \\<delta>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma next_symbol_not_complete: \"next_symbol x = Some t \\<Longrightarrow> \\<not> (is_complete x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol x = Some t \\<Longrightarrow> \\<not> is_complete x", "by (metis next_symbol_def option.discI)"], ["", "lemma next_symbol_starts_item_\\<beta>:\n  assumes wf: \"wellformed_item x\"\n  assumes next_symbol: \"next_symbol x = Some t\"\n  shows \"\\<exists> \\<delta>. item_\\<beta> x = t#\\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "from next_symbol"], ["proof (chain)\npicking this:\n  next_symbol x = Some t", "have nc: \"\\<not> (is_complete x)\""], ["proof (prove)\nusing this:\n  next_symbol x = Some t\n\ngoal (1 subgoal):\n 1. \\<not> is_complete x", "using next_symbol_not_complete"], ["proof (prove)\nusing this:\n  next_symbol x = Some t\n  next_symbol ?x = Some ?t \\<Longrightarrow> \\<not> is_complete ?x\n\ngoal (1 subgoal):\n 1. \\<not> is_complete x", "by auto"], ["proof (state)\nthis:\n  \\<not> is_complete x\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "from next_symbol"], ["proof (chain)\npicking this:\n  next_symbol x = Some t", "have atdot: \"item_rhs x ! item_dot x = t\""], ["proof (prove)\nusing this:\n  next_symbol x = Some t\n\ngoal (1 subgoal):\n 1. item_rhs x ! item_dot x = t", "by (simp add: next_symbol_def nc)"], ["proof (state)\nthis:\n  item_rhs x ! item_dot x = t\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "from nc"], ["proof (chain)\npicking this:\n  \\<not> is_complete x", "have inrange: \"item_dot x < length (item_rhs x)\""], ["proof (prove)\nusing this:\n  \\<not> is_complete x\n\ngoal (1 subgoal):\n 1. item_dot x < length (item_rhs x)", "by (simp add: is_complete_def)"], ["proof (state)\nthis:\n  item_dot x < length (item_rhs x)\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "from inrange atdot"], ["proof (chain)\npicking this:\n  item_dot x < length (item_rhs x)\n  item_rhs x ! item_dot x = t", "show ?thesis"], ["proof (prove)\nusing this:\n  item_dot x < length (item_rhs x)\n  item_rhs x ! item_dot x = t\n\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "apply (simp add: item_\\<beta>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>item_dot x < length (item_rhs x);\n     item_rhs x ! item_dot x = t\\<rbrakk>\n    \\<Longrightarrow> \\<exists>\\<delta>.\n                         drop (item_dot x) (item_rhs x) = t # \\<delta>", "by (metis Cons_nth_drop_Suc)"], ["proof (state)\nthis:\n  \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pvalid_prefixlang:\n  assumes pvalid: \"pvalid p x\"\n  assumes is_terminal: \"is_terminal t\"\n  assumes next_symbol: \"next_symbol x = Some t\"\n  shows \"(terminals p) @ [t] \\<in> \\<L>\\<^sub>P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "have \"\\<exists> \\<delta>. item_\\<beta> x = t#\\<delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "by (metis next_symbol next_symbol_starts_item_\\<beta> pvalid pvalid_def)"], ["proof (state)\nthis:\n  \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>", "obtain \\<delta> where \\<delta>:\"item_\\<beta> x = t#\\<delta>\""], ["proof (prove)\nusing this:\n  \\<exists>\\<delta>. item_\\<beta> x = t # \\<delta>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<delta>.\n        item_\\<beta> x = t # \\<delta> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  item_\\<beta> x = t # \\<delta>\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "have \"\\<exists> \\<omega>. is_derivation ((terminals p)@(item_\\<beta> x)@\\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<omega>.\n       is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)", "by (metis pvalid pvalid_is_derivation_terminals_item_\\<beta>)"], ["proof (state)\nthis:\n  \\<exists>\\<omega>. is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "then"], ["proof (chain)\npicking this:\n  \\<exists>\\<omega>. is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)", "obtain \\<omega> where \"is_derivation ((terminals p)@(item_\\<beta> x)@\\<omega>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<omega>. is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<omega>.\n        is_derivation\n         (terminals p @ item_\\<beta> x @ \\<omega>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)", "have \"is_derivation ((terminals p)@(t#\\<delta>)@\\<omega>)\""], ["proof (prove)\nusing this:\n  is_derivation (terminals p @ item_\\<beta> x @ \\<omega>)\n\ngoal (1 subgoal):\n 1. is_derivation (terminals p @ (t # \\<delta>) @ \\<omega>)", "by (metis \\<delta>)"], ["proof (state)\nthis:\n  is_derivation (terminals p @ (t # \\<delta>) @ \\<omega>)\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "then"], ["proof (chain)\npicking this:\n  is_derivation (terminals p @ (t # \\<delta>) @ \\<omega>)", "have \"is_derivation (((terminals p)@[t])@(\\<delta>@\\<omega>))\""], ["proof (prove)\nusing this:\n  is_derivation (terminals p @ (t # \\<delta>) @ \\<omega>)\n\ngoal (1 subgoal):\n 1. is_derivation ((terminals p @ [t]) @ \\<delta> @ \\<omega>)", "by simp"], ["proof (state)\nthis:\n  is_derivation ((terminals p @ [t]) @ \\<delta> @ \\<omega>)\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "then"], ["proof (chain)\npicking this:\n  is_derivation ((terminals p @ [t]) @ \\<delta> @ \\<omega>)", "show ?thesis"], ["proof (prove)\nusing this:\n  is_derivation ((terminals p @ [t]) @ \\<delta> @ \\<omega>)\n\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "by (metis (no_types, lifting) CFG.\\<L>\\<^sub>P_def CFG_axioms  \n      append_Nil2 is_terminal is_word_append is_word_cons \n      is_word_terminals mem_Collect_eq pvalid pvalid_def)"], ["proof (state)\nthis:\n  terminals p @ [t] \\<in> \\<L>\\<^sub>P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma TokensAt_elem_in_\\<W>: \n  assumes P: \"P \\<subseteq> \\<PP>\"\n  assumes u_in_Tokens_at: \"u \\<in> TokensAt k (Gen P)\"\n  shows \"u \\<in> \\<W> P k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "have \"\\<exists>t s x l.\n         u = (t, s) \\<and>\n         x \\<in> bin (Gen P) k \\<and>\n         next_symbol x = Some t \\<and> is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t s x l.\n       u = (t, s) \\<and>\n       x \\<in> bin (Gen P) k \\<and>\n       next_symbol x = Some t \\<and>\n       is_terminal t \\<and>\n       l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "using u_in_Tokens_at"], ["proof (prove)\nusing this:\n  u \\<in> TokensAt k (Gen P)\n\ngoal (1 subgoal):\n 1. \\<exists>t s x l.\n       u = (t, s) \\<and>\n       x \\<in> bin (Gen P) k \\<and>\n       next_symbol x = Some t \\<and>\n       is_terminal t \\<and>\n       l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "by (auto simp add: TokensAt_def)"], ["proof (state)\nthis:\n  \\<exists>t s x l.\n     u = (t, s) \\<and>\n     x \\<in> bin (Gen P) k \\<and>\n     next_symbol x = Some t \\<and>\n     is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "then"], ["proof (chain)\npicking this:\n  \\<exists>t s x l.\n     u = (t, s) \\<and>\n     x \\<in> bin (Gen P) k \\<and>\n     next_symbol x = Some t \\<and>\n     is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "obtain t s x l where\n     u: \"u = (t, s) \\<and>\n         x \\<in> bin (Gen P) k \\<and>\n         next_symbol x = Some t \\<and> is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\""], ["proof (prove)\nusing this:\n  \\<exists>t s x l.\n     u = (t, s) \\<and>\n     x \\<in> bin (Gen P) k \\<and>\n     next_symbol x = Some t \\<and>\n     is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. (\\<And>t s x l.\n        u = (t, s) \\<and>\n        x \\<in> bin (Gen P) k \\<and>\n        next_symbol x = Some t \\<and>\n        is_terminal t \\<and>\n        l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "from u"], ["proof (chain)\npicking this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "have t: \"t = terminal_of_token u\""], ["proof (prove)\nusing this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. t = terminal_of_token u", "by (metis terminal_of_token_simp)"], ["proof (state)\nthis:\n  t = terminal_of_token u\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "from u"], ["proof (chain)\npicking this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "have s: \"s = chars_of_token u\""], ["proof (prove)\nusing this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. s = chars_of_token u", "by (metis chars_of_token_simp)"], ["proof (state)\nthis:\n  s = chars_of_token u\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "from u"], ["proof (chain)\npicking this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "have item_end_x: \"item_end x = k\""], ["proof (prove)\nusing this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. item_end x = k", "by (metis (mono_tags, lifting) bin_def mem_Collect_eq)"], ["proof (state)\nthis:\n  item_end x = k\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "from u"], ["proof (chain)\npicking this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)", "have \"\\<exists> p \\<in> P. pvalid p x\""], ["proof (prove)\nusing this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. \\<exists>p\\<in>P. pvalid p x", "by (auto simp add: bin_def Gen_def)"], ["proof (state)\nthis:\n  \\<exists>p\\<in>P. pvalid p x\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "then"], ["proof (chain)\npicking this:\n  \\<exists>p\\<in>P. pvalid p x", "obtain p where p: \"p \\<in> P\" and pvalid: \"pvalid p x\""], ["proof (prove)\nusing this:\n  \\<exists>p\\<in>P. pvalid p x\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>p \\<in> P; pvalid p x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  p \\<in> P\n  pvalid p x\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "have p_len: \"length (chars p) = k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (chars p) = k", "by (metis charslength.simps item_end_x pvalid pvalid_item_end)"], ["proof (state)\nthis:\n  length (chars p) = k\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "have u_in_\\<X>: \"u \\<in> \\<X> k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<X> k", "apply (simp add: \\<X>_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>t l.\n       u = (t, take l (drop k Doc)) \\<and>\n       t \\<in> \\<TT> \\<and> l \\<in> Lex t Doc k", "apply (rule_tac x=t in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l.\n       u = (t, take l (drop k Doc)) \\<and>\n       t \\<in> \\<TT> \\<and> l \\<in> Lex t Doc k", "apply (rule_tac x=l in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. u = (t, take l (drop k Doc)) \\<and>\n    t \\<in> \\<TT> \\<and> l \\<in> Lex t Doc k", "using u"], ["proof (prove)\nusing this:\n  u = (t, s) \\<and>\n  x \\<in> bin (Gen P) k \\<and>\n  next_symbol x = Some t \\<and>\n  is_terminal t \\<and> l \\<in> Lex t Doc k \\<and> s = take l (drop k Doc)\n\ngoal (1 subgoal):\n 1. u = (t, take l (drop k Doc)) \\<and>\n    t \\<in> \\<TT> \\<and> l \\<in> Lex t Doc k", "by (simp add: is_terminal_def)"], ["proof (state)\nthis:\n  u \\<in> \\<X> k\n\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> \\<W> P k", "apply (auto simp add: \\<W>_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. u \\<in> \\<X> k\n 2. \\<exists>p.\n       p \\<in> P \\<and> length (chars p) = k \\<and> admissible (p @ [u])", "apply (simp add: u_in_\\<X>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       p \\<in> P \\<and> length (chars p) = k \\<and> admissible (p @ [u])", "apply (rule_tac x=p in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> P \\<and> length (chars p) = k \\<and> admissible (p @ [u])", "apply (simp add: p p_len)"], ["proof (prove)\ngoal (1 subgoal):\n 1. admissible (p @ [u])", "apply (simp add: admissible_def t[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. terminals p @ [t] \\<in> \\<L>\\<^sub>P", "apply (rule pvalid_prefixlang[where x=x])"], ["proof (prove)\ngoal (3 subgoals):\n 1. pvalid p x\n 2. is_terminal t\n 3. next_symbol x = Some t", "apply (simp add: pvalid)"], ["proof (prove)\ngoal (2 subgoals):\n 1. is_terminal t\n 2. next_symbol x = Some t", "apply (simp add: u)"], ["proof (prove)\ngoal (1 subgoal):\n 1. next_symbol x = Some t", "apply (simp add: u)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  u \\<in> \\<W> P k\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem thmD4:\n  assumes P: \"P \\<subseteq> \\<PP>\"\n  shows \"\\<W> P k = TokensAt k (Gen P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<W> P k = TokensAt k (Gen P)", "using \\<W>_elem_in_TokensAt TokensAt_elem_in_\\<W>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?P \\<subseteq> \\<PP>; ?u \\<in> \\<W> ?P ?k\\<rbrakk>\n  \\<Longrightarrow> ?u \\<in> TokensAt ?k (Gen ?P)\n  \\<lbrakk>?P \\<subseteq> \\<PP>; ?u \\<in> TokensAt ?k (Gen ?P)\\<rbrakk>\n  \\<Longrightarrow> ?u \\<in> \\<W> ?P ?k\n\ngoal (1 subgoal):\n 1. \\<W> P k = TokensAt k (Gen P)", "by (metis Collect_cong Collect_mem_eq assms)"], ["", "end"], ["", "end"]]}