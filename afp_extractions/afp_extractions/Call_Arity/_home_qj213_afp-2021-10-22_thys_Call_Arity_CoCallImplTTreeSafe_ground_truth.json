{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CoCallImplTTreeSafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma valid_lists_many_calls:\n  assumes \"\\<not> one_call_in_path x p\"\n  assumes \"p \\<in> valid_lists S G\"\n  shows \"x--x \\<in> G\"", "lemma carrier_Fexp': \"carrier (Texp e\\<cdot>a) \\<subseteq> fv e\"", "lemma carrier_AnalBinds_below:\n  \"carrier ((Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<subseteq> edom ((ABinds \\<Delta>)\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\"", "lemma Theap_simp: \"Theap \\<Gamma> e\\<cdot>a = (if nonrec \\<Gamma> then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a)) (ccExp e\\<cdot>a) else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)\"", "lemma carrier_Fheap':\"carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\"", "lemma paths_singles: \"xs \\<in> paths (singles S) \\<longleftrightarrow> (\\<forall>x \\<in> S. one_call_in_path x xs)\"", "lemma paths_singles': \"xs \\<in> paths (singles S) \\<longleftrightarrow> (\\<forall>x \\<in> (set xs \\<inter> S). one_call_in_path x xs)\"", "lemma both_below_singles1:\n  assumes \"t \\<sqsubseteq> singles S\"\n  assumes \"carrier t' \\<inter> S = {}\"\n  shows \"t \\<otimes>\\<otimes> t' \\<sqsubseteq> singles S\"", "lemma paths_ttree_restr_singles: \"xs \\<in> paths (ttree_restr S' (singles S)) \\<longleftrightarrow> set xs \\<subseteq> S' \\<and> (\\<forall>x \\<in> S. one_call_in_path x xs)\"", "lemma substitute_not_carrier:\n  assumes \"x \\<notin> carrier t\"\n  assumes \"\\<And> x'. x \\<notin> carrier (f x')\"\n  shows \"x \\<notin>  carrier (substitute f T t)\"", "lemma substitute_below_singlesI:\n  assumes \"t \\<sqsubseteq> singles S\"\n  assumes \"\\<And> x. carrier (f x) \\<inter> S = {}\"\n  shows \"substitute f T t \\<sqsubseteq> singles S\""], "translations": [["", "lemma valid_lists_many_calls:\n  assumes \"\\<not> one_call_in_path x p\"\n  assumes \"p \\<in> valid_lists S G\"\n  shows \"x--x \\<in> G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x--x\\<in>G", "using assms(2,1)"], ["proof (prove)\nusing this:\n  p \\<in> valid_lists S G\n  \\<not> one_call_in_path x p\n\ngoal (1 subgoal):\n 1. x--x\\<in>G", "proof(induction rule:valid_lists.induct[case_names Nil Cons])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> one_call_in_path x [] \\<Longrightarrow> x--x\\<in>G\n 2. \\<And>xs xa.\n       \\<lbrakk>set xs \\<subseteq> ccNeighbors xa G;\n        xs \\<in> valid_lists S G;\n        \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G;\n        xa \\<in> S; \\<not> one_call_in_path x (xa # xs)\\<rbrakk>\n       \\<Longrightarrow> x--x\\<in>G", "case Nil"], ["proof (state)\nthis:\n  \\<not> one_call_in_path x []\n\ngoal (2 subgoals):\n 1. \\<not> one_call_in_path x [] \\<Longrightarrow> x--x\\<in>G\n 2. \\<And>xs xa.\n       \\<lbrakk>set xs \\<subseteq> ccNeighbors xa G;\n        xs \\<in> valid_lists S G;\n        \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G;\n        xa \\<in> S; \\<not> one_call_in_path x (xa # xs)\\<rbrakk>\n       \\<Longrightarrow> x--x\\<in>G", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> one_call_in_path x []\n\ngoal (1 subgoal):\n 1. x--x\\<in>G", "by simp"], ["proof (state)\nthis:\n  x--x\\<in>G\n\ngoal (1 subgoal):\n 1. \\<And>xs xa.\n       \\<lbrakk>set xs \\<subseteq> ccNeighbors xa G;\n        xs \\<in> valid_lists S G;\n        \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G;\n        xa \\<in> S; \\<not> one_call_in_path x (xa # xs)\\<rbrakk>\n       \\<Longrightarrow> x--x\\<in>G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs xa.\n       \\<lbrakk>set xs \\<subseteq> ccNeighbors xa G;\n        xs \\<in> valid_lists S G;\n        \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G;\n        xa \\<in> S; \\<not> one_call_in_path x (xa # xs)\\<rbrakk>\n       \\<Longrightarrow> x--x\\<in>G", "case (Cons xs x')"], ["proof (state)\nthis:\n  set xs \\<subseteq> ccNeighbors x' G\n  xs \\<in> valid_lists S G\n  x' \\<in> S\n  \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G\n  \\<not> one_call_in_path x (x' # xs)\n\ngoal (1 subgoal):\n 1. \\<And>xs xa.\n       \\<lbrakk>set xs \\<subseteq> ccNeighbors xa G;\n        xs \\<in> valid_lists S G;\n        \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G;\n        xa \\<in> S; \\<not> one_call_in_path x (xa # xs)\\<rbrakk>\n       \\<Longrightarrow> x--x\\<in>G", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x--x\\<in>G", "proof(cases \"one_call_in_path x xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G\n 2. \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "case False"], ["proof (state)\nthis:\n  \\<not> one_call_in_path x xs\n\ngoal (2 subgoals):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G\n 2. \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "from Cons.IH[OF this]"], ["proof (chain)\npicking this:\n  x--x\\<in>G", "show ?thesis"], ["proof (prove)\nusing this:\n  x--x\\<in>G\n\ngoal (1 subgoal):\n 1. x--x\\<in>G", "."], ["proof (state)\nthis:\n  x--x\\<in>G\n\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "case True"], ["proof (state)\nthis:\n  one_call_in_path x xs\n\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "with \\<open>\\<not> one_call_in_path x (x' # xs)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> one_call_in_path x (x' # xs)\n  one_call_in_path x xs", "have [simp]: \"x' = x\""], ["proof (prove)\nusing this:\n  \\<not> one_call_in_path x (x' # xs)\n  one_call_in_path x xs\n\ngoal (1 subgoal):\n 1. x' = x", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  x' = x\n\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "have \"x \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set xs", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> set xs \\<Longrightarrow> False", "assume \"x \\<notin> set xs\""], ["proof (state)\nthis:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. x \\<notin> set xs \\<Longrightarrow> False", "hence \"no_call_in_path x xs\""], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. no_call_in_path x xs", "by (metis no_call_in_path_set_conv)"], ["proof (state)\nthis:\n  no_call_in_path x xs\n\ngoal (1 subgoal):\n 1. x \\<notin> set xs \\<Longrightarrow> False", "hence \"one_call_in_path x (x # xs)\""], ["proof (prove)\nusing this:\n  no_call_in_path x xs\n\ngoal (1 subgoal):\n 1. one_call_in_path x (x # xs)", "by simp"], ["proof (state)\nthis:\n  one_call_in_path x (x # xs)\n\ngoal (1 subgoal):\n 1. x \\<notin> set xs \\<Longrightarrow> False", "with Cons"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> ccNeighbors x' G\n  xs \\<in> valid_lists S G\n  x' \\<in> S\n  \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G\n  \\<not> one_call_in_path x (x' # xs)\n  one_call_in_path x (x # xs)", "show False"], ["proof (prove)\nusing this:\n  set xs \\<subseteq> ccNeighbors x' G\n  xs \\<in> valid_lists S G\n  x' \\<in> S\n  \\<not> one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G\n  \\<not> one_call_in_path x (x' # xs)\n  one_call_in_path x (x # xs)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "with \\<open>set xs \\<subseteq> ccNeighbors x' G\\<close>"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> ccNeighbors x' G\n  x \\<in> set xs", "have \"x \\<in> ccNeighbors x G\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> ccNeighbors x' G\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. x \\<in> ccNeighbors x G", "by auto"], ["proof (state)\nthis:\n  x \\<in> ccNeighbors x G\n\ngoal (1 subgoal):\n 1. one_call_in_path x xs \\<Longrightarrow> x--x\\<in>G", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> ccNeighbors x G\n\ngoal (1 subgoal):\n 1. x--x\\<in>G", "by simp"], ["proof (state)\nthis:\n  x--x\\<in>G\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x--x\\<in>G\n\ngoal:\nNo subgoals!", "qed"], ["", "context CoCallArityEdom\nbegin"], ["", "lemma carrier_Fexp': \"carrier (Texp e\\<cdot>a) \\<subseteq> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (Texp e\\<cdot>a) \\<subseteq> fv e", "unfolding Texp_simp carrier_ccTTree"], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (\\<A>\\<^bsub>a\\<^esub> e) \\<subseteq> fv e", "by (rule Aexp_edom)"], ["", "end"], ["", "context CoCallAritySafe\nbegin"], ["", "lemma carrier_AnalBinds_below:\n  \"carrier ((Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<subseteq> edom ((ABinds \\<Delta>)\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))", "by (auto simp add: Texp.AnalBinds_lookup Texp_def split: option.splits \n         elim!: subsetD[OF edom_mono[OF monofun_cfun_fun[OF ABind_below_ABinds]]])"], ["", "sublocale TTreeAnalysisCarrier Texp"], ["proof (prove)\ngoal (1 subgoal):\n 1. TTreeAnalysisCarrier Texp Aexp", "apply standard"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a. carrier (Texp e\\<cdot>a) = edom (\\<A>\\<^bsub>a\\<^esub> e)", "unfolding Texp_simp carrier_ccTTree"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e a.\n       edom (\\<A>\\<^bsub>a\\<^esub> e) = edom (\\<A>\\<^bsub>a\\<^esub> e)", "apply standard"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "sublocale TTreeAnalysisSafe Texp"], ["proof (prove)\ngoal (1 subgoal):\n 1. TTreeAnalysisSafe Texp Aexp", "proof"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "fix x e a"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "from edom_mono[OF Aexp_App]"], ["proof (chain)\npicking this:\n  edom\n   (\\<A>\\<^bsub>inc\\<cdot>?n1\\<^esub> ?e1 \\<squnion>\n    esing ?x1\\<cdot>(up\\<cdot>0))\n  \\<subseteq> edom (\\<A>\\<^bsub>?n1\\<^esub> (App ?e1 ?x1))", "have \"{x} \\<union> edom (Aexp e\\<cdot>(inc\\<cdot>a)) \\<subseteq> edom (Aexp (App e x)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  edom\n   (\\<A>\\<^bsub>inc\\<cdot>?n1\\<^esub> ?e1 \\<squnion>\n    esing ?x1\\<cdot>(up\\<cdot>0))\n  \\<subseteq> edom (\\<A>\\<^bsub>?n1\\<^esub> (App ?e1 ?x1))\n\ngoal (1 subgoal):\n 1. {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))", "by auto"], ["proof (state)\nthis:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "moreover"], ["proof (state)\nthis:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "{"], ["proof (state)\nthis:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccApprox (many_calls x \\<otimes>\\<otimes> ccTTree (edom (Aexp e\\<cdot>(inc\\<cdot>a))) (ccExp e\\<cdot>(inc\\<cdot>a))) \n    = cc_restr (edom (Aexp e\\<cdot>(inc\\<cdot>a))) (ccExp e\\<cdot>(inc\\<cdot>a)) \\<squnion> ccProd {x} (insert x (edom (Aexp e\\<cdot>(inc\\<cdot>a))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccApprox\n     (many_calls x \\<otimes>\\<otimes>\n      ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n       (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) =\n    \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n    edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<squnion>\n    {x} G\\<times> insert x (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))", "by (simp add: ccApprox_both ccProd_insert2[where S' = \"edom e\" for e])"], ["proof (state)\nthis:\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) =\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<squnion>\n  {x} G\\<times> insert x (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) =\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<squnion>\n  {x} G\\<times> insert x (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"edom (Aexp e\\<cdot>(inc\\<cdot>a)) \\<subseteq> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<subseteq> fv e", "by (rule Aexp_edom)"], ["proof (state)\nthis:\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<subseteq> fv e\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also(below_trans[OF eq_imp_below join_mono[OF below_refl ccProd_mono2[OF insert_mono] ]])"], ["proof (state)\nthis:\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<subseteq> fv e\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"cc_restr (edom (Aexp e\\<cdot>(inc\\<cdot>a))) (ccExp e\\<cdot>(inc\\<cdot>a)) \\<sqsubseteq> ccExp e\\<cdot>(inc\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n    edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<sqsubseteq>\n    \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e", "by (rule cc_restr_below_arg)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<sqsubseteq>\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e G|`\n  edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<sqsubseteq>\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccExp e\\<cdot>(inc\\<cdot>a) \\<squnion> ccProd {x} (insert x (fv e)) \\<sqsubseteq> ccExp (App e x)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e \\<squnion>\n    {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (App e x)", "by (rule ccExp_App)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e \\<squnion>\n  {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>cont (\\<lambda>a. a \\<squnion> {x} G\\<times> insert x (fv e));\n   cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> ccApprox\n                     (many_calls x \\<otimes>\\<otimes>\n                      ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n                       (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n                    \\<G>\\<^bsub>a\\<^esub> (App e x)", "have \"ccApprox (many_calls x \\<otimes>\\<otimes> ccTTree (edom (Aexp e\\<cdot>(inc\\<cdot>a))) (ccExp e\\<cdot>(inc\\<cdot>a))) \\<sqsubseteq> ccExp (App e x)\\<cdot>a\""], ["proof (prove)\nusing this:\n  \\<lbrakk>cont (\\<lambda>a. a \\<squnion> {x} G\\<times> insert x (fv e));\n   cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> ccApprox\n                     (many_calls x \\<otimes>\\<otimes>\n                      ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n                       (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n                    \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (many_calls x \\<otimes>\\<otimes>\n      ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n       (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (App e x)", "by this simp_all"], ["proof (state)\nthis:\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "}"], ["proof (state)\nthis:\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (6 subgoals):\n 1. \\<And>x e a.\n       many_calls x \\<otimes>\\<otimes>\n       Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n       Texp (App e x)\\<cdot>a\n 2. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 3. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 4. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 5. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 6. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "ultimately"], ["proof (chain)\npicking this:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)", "show \"many_calls x \\<otimes>\\<otimes> Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq> Texp (App e x)\\<cdot>a\""], ["proof (prove)\nusing this:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (1 subgoal):\n 1. many_calls x \\<otimes>\\<otimes> Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n    Texp (App e x)\\<cdot>a", "unfolding Texp_simp"], ["proof (prove)\nusing this:\n  {x} \\<union> edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e)\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (App e x))\n  ccApprox\n   (many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (App e x)\n\ngoal (1 subgoal):\n 1. many_calls x \\<otimes>\\<otimes>\n    ccTTree (edom (\\<A>\\<^bsub>inc\\<cdot>a\\<^esub> e))\n     (\\<G>\\<^bsub>inc\\<cdot>a\\<^esub> e) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> (App e x)))\n     (\\<G>\\<^bsub>a\\<^esub> (App e x))", "by (auto intro!: below_ccTTreeI)"], ["proof (state)\nthis:\n  many_calls x \\<otimes>\\<otimes> Texp e\\<cdot>(inc\\<cdot>a) \\<sqsubseteq>\n  Texp (App e x)\\<cdot>a\n\ngoal (5 subgoals):\n 1. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 2. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 3. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 4. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 5. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 2. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 3. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 4. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 5. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "fix y e n"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>y e n.\n       without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n       Texp (Lam [y]. e)\\<cdot>n\n 2. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 3. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 4. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 5. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "show \"without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq> Texp (Lam [y]. e)\\<cdot>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n    Texp (Lam [y]. e)\\<cdot>n", "unfolding Texp_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. without y\n     (ccTTree (edom (\\<A>\\<^bsub>pred\\<cdot>n\\<^esub> e))\n       (\\<G>\\<^bsub>pred\\<cdot>n\\<^esub> e)) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>n\\<^esub> (Lam [y]. e)))\n     (\\<G>\\<^bsub>n\\<^esub> (Lam [y]. e))", "by (auto dest: subsetD[OF Aexp_edom]\n             intro!: below_ccTTreeI  below_trans[OF _ ccExp_Lam] cc_restr_mono1 subsetD[OF edom_mono[OF Aexp_Lam]])"], ["proof (state)\nthis:\n  without y (Texp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq>\n  Texp (Lam [y]. e)\\<cdot>n\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "fix e y x a"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "from edom_mono[OF Aexp_subst]"], ["proof (chain)\npicking this:\n  edom (\\<A>\\<^bsub>?a1\\<^esub> ?e1[?y1::=?x1])\n  \\<subseteq> edom\n               (env_delete ?y1 (\\<A>\\<^bsub>?a1\\<^esub> ?e1) \\<squnion>\n                esing ?x1\\<cdot>(up\\<cdot>0))", "have *: \"edom (Aexp e[y::=x]\\<cdot>a) \\<subseteq> insert x (edom (Aexp e\\<cdot>a) - {y})\""], ["proof (prove)\nusing this:\n  edom (\\<A>\\<^bsub>?a1\\<^esub> ?e1[?y1::=?x1])\n  \\<subseteq> edom\n               (env_delete ?y1 (\\<A>\\<^bsub>?a1\\<^esub> ?e1) \\<squnion>\n                esing ?x1\\<cdot>(up\\<cdot>0))\n\ngoal (1 subgoal):\n 1. edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x])\n    \\<subseteq> insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y})", "by simp"], ["proof (state)\nthis:\n  edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x])\n  \\<subseteq> insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y})\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"Texp e[y::=x]\\<cdot>a = ccTTree (edom (Aexp e[y::=x]\\<cdot>a)) (ccExp e[y::=x]\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Texp e[y::=x]\\<cdot>a =\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])", "unfolding Texp_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) =\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])", ".."], ["proof (state)\nthis:\n  Texp e[y::=x]\\<cdot>a =\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  Texp e[y::=x]\\<cdot>a =\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccTTree (insert x (edom (Aexp e\\<cdot>a) - {y})) (ccExp e[y::=x]\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n    ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])", "by (rule ccTTree_mono1[OF *])"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e[y::=x]))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> many_calls x \\<otimes>\\<otimes> without x (\\<dots>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n    many_calls x \\<otimes>\\<otimes>\n    without x\n     (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n       (\\<G>\\<^bsub>a\\<^esub> e[y::=x]))", "by (rule paths_many_calls_subset)"], ["proof (state)\nthis:\n  ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  many_calls x \\<otimes>\\<otimes>\n  without x\n   (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]))\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  many_calls x \\<otimes>\\<otimes>\n  without x\n   (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]))\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"without x (ccTTree (insert x (edom (Aexp e\\<cdot>a) - {y})) (ccExp e[y::=x]\\<cdot>a))\n    = ccTTree (edom (Aexp e\\<cdot>a) - {y} - {x}) (ccExp e[y::=x]\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. without x\n     (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n       (\\<G>\\<^bsub>a\\<^esub> e[y::=x])) =\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])", "by simp"], ["proof (state)\nthis:\n  without x\n   (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])) =\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  without x\n   (ccTTree (insert x (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y}))\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x])) =\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x])\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccTTree (edom (Aexp e\\<cdot>a) - {y} - {x}) (ccExp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e)", "by (rule ccTTree_cong_below[OF ccExp_subst]) auto"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e[y::=x]) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"\\<dots> = without y (ccTTree (edom (Aexp e\\<cdot>a) - {x}) (ccExp e\\<cdot>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e) =\n    without y\n     (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n       (\\<G>\\<^bsub>a\\<^esub> e))", "by simp (metis Diff_insert Diff_insert2)"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e) =\n  without y\n   (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e))\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {y} - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e) =\n  without y\n   (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e))\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccTTree (edom (Aexp e\\<cdot>a) - {x}) (ccExp e\\<cdot>a) \\<sqsubseteq> ccTTree (edom (Aexp e\\<cdot>a)) (ccExp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n     (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e)", "by (rule ccTTree_mono1) auto"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) - {x})\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"\\<dots> = Texp e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e) =\n    Texp e\\<cdot>a", "unfolding Texp_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e) =\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e)", ".."], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e)) (\\<G>\\<^bsub>a\\<^esub> e) =\n  Texp e\\<cdot>a\n\ngoal (4 subgoals):\n 1. \\<And>e y x a.\n       Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n       many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n 2. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 3. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 4. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont ((\\<otimes>\\<otimes>) (many_calls x));\n   cont (\\<lambda>a. many_calls x \\<otimes>\\<otimes> without y a)\\<rbrakk>\n  \\<Longrightarrow> Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n                    many_calls x \\<otimes>\\<otimes>\n                    without y (Texp e\\<cdot>a)", "show \"Texp e[y::=x]\\<cdot>a \\<sqsubseteq> many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont ((\\<otimes>\\<otimes>) (many_calls x));\n   cont (\\<lambda>a. many_calls x \\<otimes>\\<otimes> without y a)\\<rbrakk>\n  \\<Longrightarrow> Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n                    many_calls x \\<otimes>\\<otimes>\n                    without y (Texp e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n    many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)", "by this simp_all"], ["proof (state)\nthis:\n  Texp e[y::=x]\\<cdot>a \\<sqsubseteq>\n  many_calls x \\<otimes>\\<otimes> without y (Texp e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 2. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 3. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 2. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 3. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "fix v a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 2. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 3. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"up\\<cdot>a \\<sqsubseteq> (Aexp (Var v)\\<cdot>a) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. up\\<cdot>a \\<sqsubseteq> \\<A>\\<^bsub>a\\<^esub> (Var v) v", "by (rule Aexp_Var)"], ["proof (state)\nthis:\n  up\\<cdot>a \\<sqsubseteq> \\<A>\\<^bsub>a\\<^esub> (Var v) v\n\ngoal (3 subgoals):\n 1. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 2. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 3. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "hence \"v \\<in> edom (Aexp (Var v)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  up\\<cdot>a \\<sqsubseteq> \\<A>\\<^bsub>a\\<^esub> (Var v) v\n\ngoal (1 subgoal):\n 1. v \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Var v))", "by (auto simp add: edom_def)"], ["proof (state)\nthis:\n  v \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Var v))\n\ngoal (3 subgoals):\n 1. \\<And>v a. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n 2. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 3. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "thus \"single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\""], ["proof (prove)\nusing this:\n  v \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Var v))\n\ngoal (1 subgoal):\n 1. single v \\<sqsubseteq> Texp (Var v)\\<cdot>a", "unfolding Texp_simp"], ["proof (prove)\nusing this:\n  v \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Var v))\n\ngoal (1 subgoal):\n 1. single v \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> (Var v)))\n     (\\<G>\\<^bsub>a\\<^esub> (Var v))", "by (auto intro: below_ccTTreeI)"], ["proof (state)\nthis:\n  single v \\<sqsubseteq> Texp (Var v)\\<cdot>a\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "fix scrut e1 a e2"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccTTree (edom (Aexp e1\\<cdot>a)) (ccExp e1\\<cdot>a) \\<oplus>\\<oplus> ccTTree (edom (Aexp e2\\<cdot>a)) (ccExp e2\\<cdot>a)\n    \\<sqsubseteq> ccTTree (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)) (ccExp e1\\<cdot>a \\<squnion> ccExp e2\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e1))\n     (\\<G>\\<^bsub>a\\<^esub> e1) \\<oplus>\\<oplus>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e2))\n     (\\<G>\\<^bsub>a\\<^esub> e2) \\<sqsubseteq>\n    ccTTree\n     (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n      edom (\\<A>\\<^bsub>a\\<^esub> e2))\n     (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion> \\<G>\\<^bsub>a\\<^esub> e2)", "by (rule either_ccTTree)"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e1))\n   (\\<G>\\<^bsub>a\\<^esub> e1) \\<oplus>\\<oplus>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e2) \\<sqsubseteq>\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion> \\<G>\\<^bsub>a\\<^esub> e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "note both_mono2'[OF this]"], ["proof (state)\nthis:\n  ?t'' \\<otimes>\\<otimes>\n  (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e1))\n    (\\<G>\\<^bsub>a\\<^esub> e1) \\<oplus>\\<oplus>\n   ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e2))\n    (\\<G>\\<^bsub>a\\<^esub> e2)) \\<sqsubseteq>\n  ?t'' \\<otimes>\\<otimes>\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion> \\<G>\\<^bsub>a\\<^esub> e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ?t'' \\<otimes>\\<otimes>\n  (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e1))\n    (\\<G>\\<^bsub>a\\<^esub> e1) \\<oplus>\\<oplus>\n   ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e2))\n    (\\<G>\\<^bsub>a\\<^esub> e2)) \\<sqsubseteq>\n  ?t'' \\<otimes>\\<otimes>\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion> \\<G>\\<^bsub>a\\<^esub> e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccTTree (edom (Aexp scrut\\<cdot>0)) (ccExp scrut\\<cdot>0) \\<otimes>\\<otimes> ccTTree (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)) (ccExp e1\\<cdot>a \\<squnion> ccExp e2\\<cdot>a)\n    \\<sqsubseteq> ccTTree (edom (Aexp scrut\\<cdot>0) \\<union> (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a))) (ccExp scrut\\<cdot>0 \\<squnion> (ccExp e1\\<cdot>a \\<squnion> ccExp e2\\<cdot>a) \\<squnion> ccProd (edom (Aexp scrut\\<cdot>0)) (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>0\\<^esub> scrut))\n     (\\<G>\\<^bsub>0\\<^esub> scrut) \\<otimes>\\<otimes>\n    ccTTree\n     (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n      edom (\\<A>\\<^bsub>a\\<^esub> e2))\n     (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n      \\<G>\\<^bsub>a\\<^esub> e2) \\<sqsubseteq>\n    ccTTree\n     (edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n      (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n       edom (\\<A>\\<^bsub>a\\<^esub> e2)))\n     (\\<G>\\<^bsub>0\\<^esub> scrut \\<squnion>\n      (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n       \\<G>\\<^bsub>a\\<^esub> e2) \\<squnion>\n      edom (\\<A>\\<^bsub>0\\<^esub> scrut) G\\<times>\n      (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n       edom (\\<A>\\<^bsub>a\\<^esub> e2)))", "by (rule interleave_ccTTree)"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>0\\<^esub> scrut))\n   (\\<G>\\<^bsub>0\\<^esub> scrut) \\<otimes>\\<otimes>\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n    \\<G>\\<^bsub>a\\<^esub> e2) \\<sqsubseteq>\n  ccTTree\n   (edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)))\n   (\\<G>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n     \\<G>\\<^bsub>a\\<^esub> e2) \\<squnion>\n    edom (\\<A>\\<^bsub>0\\<^esub> scrut) G\\<times>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)))\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>0\\<^esub> scrut))\n   (\\<G>\\<^bsub>0\\<^esub> scrut) \\<otimes>\\<otimes>\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> e2))\n   (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n    \\<G>\\<^bsub>a\\<^esub> e2) \\<sqsubseteq>\n  ccTTree\n   (edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)))\n   (\\<G>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n     \\<G>\\<^bsub>a\\<^esub> e2) \\<squnion>\n    edom (\\<A>\\<^bsub>0\\<^esub> scrut) G\\<times>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)))\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"edom (Aexp scrut\\<cdot>0) \\<union> (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)) = edom (Aexp scrut\\<cdot>0 \\<squnion> Aexp e1\\<cdot>a \\<squnion> Aexp e2\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)) =\n    edom\n     (\\<A>\\<^bsub>0\\<^esub> scrut \\<squnion>\n      \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n      \\<A>\\<^bsub>a\\<^esub> e2)", "by auto"], ["proof (state)\nthis:\n  edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n  (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n   edom (\\<A>\\<^bsub>a\\<^esub> e2)) =\n  edom\n   (\\<A>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  edom (\\<A>\\<^bsub>0\\<^esub> scrut) \\<union>\n  (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n   edom (\\<A>\\<^bsub>a\\<^esub> e2)) =\n  edom\n   (\\<A>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"Aexp scrut\\<cdot>0 \\<squnion> Aexp e1\\<cdot>a \\<squnion> Aexp e2\\<cdot>a \\<sqsubseteq> Aexp (scrut ? e1 : e2)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e2 \\<sqsubseteq>\n    \\<A>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)", "by (rule Aexp_IfThenElse)"], ["proof (state)\nthis:\n  \\<A>\\<^bsub>0\\<^esub> scrut \\<squnion> \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n  \\<A>\\<^bsub>a\\<^esub> e2 \\<sqsubseteq>\n  \\<A>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "also"], ["proof (state)\nthis:\n  \\<A>\\<^bsub>0\\<^esub> scrut \\<squnion> \\<A>\\<^bsub>a\\<^esub> e1 \\<squnion>\n  \\<A>\\<^bsub>a\\<^esub> e2 \\<sqsubseteq>\n  \\<A>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "have \"ccExp scrut\\<cdot>0 \\<squnion> (ccExp e1\\<cdot>a \\<squnion> ccExp e2\\<cdot>a) \\<squnion> ccProd (edom (Aexp scrut\\<cdot>0)) (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)) \\<sqsubseteq>\n        ccExp (scrut ? e1 : e2)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>0\\<^esub> scrut \\<squnion>\n    (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion>\n     \\<G>\\<^bsub>a\\<^esub> e2) \\<squnion>\n    edom (\\<A>\\<^bsub>0\\<^esub> scrut) G\\<times>\n    (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n     edom (\\<A>\\<^bsub>a\\<^esub> e2)) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)", "by (rule ccExp_IfThenElse)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>0\\<^esub> scrut \\<squnion>\n  (\\<G>\\<^bsub>a\\<^esub> e1 \\<squnion> \\<G>\\<^bsub>a\\<^esub> e2) \\<squnion>\n  edom (\\<A>\\<^bsub>0\\<^esub> scrut) G\\<times>\n  (edom (\\<A>\\<^bsub>a\\<^esub> e1) \\<union>\n   edom (\\<A>\\<^bsub>a\\<^esub> e2)) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)\n\ngoal (2 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)\n 2. \\<And>scrut e1 a e2.\n       Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n       (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n       Texp (scrut ? e1 : e2)\\<cdot>a", "show \"Texp scrut\\<cdot>0 \\<otimes>\\<otimes> (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq> Texp (scrut ? e1 : e2)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n    (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n    Texp (scrut ? e1 : e2)\\<cdot>a", "unfolding Texp_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>0\\<^esub> scrut))\n     (\\<G>\\<^bsub>0\\<^esub> scrut) \\<otimes>\\<otimes>\n    (ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e1))\n      (\\<G>\\<^bsub>a\\<^esub> e1) \\<oplus>\\<oplus>\n     ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e2))\n      (\\<G>\\<^bsub>a\\<^esub> e2)) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> (scrut ? e1 : e2)))\n     (\\<G>\\<^bsub>a\\<^esub> (scrut ? e1 : e2))", "by (auto simp add: ccApprox_both join_below_iff  below_trans[OF _ join_above2]\n             intro!: below_ccTTreeI below_trans[OF cc_restr_below_arg]\n                     below_trans[OF _ ccExp_IfThenElse]  subsetD[OF edom_mono[OF Aexp_IfThenElse]])"], ["proof (state)\nthis:\n  Texp scrut\\<cdot>0 \\<otimes>\\<otimes>\n  (Texp e1\\<cdot>a \\<oplus>\\<oplus> Texp e2\\<cdot>a) \\<sqsubseteq>\n  Texp (scrut ? e1 : e2)\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)", "assume \"isVal e\""], ["proof (state)\nthis:\n  isVal e\n\ngoal (1 subgoal):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)", "hence [simp]: \"ccExp e\\<cdot>0 = ccSquare (fv e)\""], ["proof (prove)\nusing this:\n  isVal e\n\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>0\\<^esub> e = fv e\\<^sup>2", "by (rule ccExp_pap)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>0\\<^esub> e = fv e\\<^sup>2\n\ngoal (1 subgoal):\n 1. \\<And>e. isVal e \\<Longrightarrow> repeatable (Texp e\\<cdot>0)", "thus \"repeatable (Texp e\\<cdot>0)\""], ["proof (prove)\nusing this:\n  \\<G>\\<^bsub>0\\<^esub> e = fv e\\<^sup>2\n\ngoal (1 subgoal):\n 1. repeatable (Texp e\\<cdot>0)", "unfolding Texp_simp"], ["proof (prove)\nusing this:\n  \\<G>\\<^bsub>0\\<^esub> e = fv e\\<^sup>2\n\ngoal (1 subgoal):\n 1. repeatable\n     (ccTTree (edom (\\<A>\\<^bsub>0\\<^esub> e)) (\\<G>\\<^bsub>0\\<^esub> e))", "by (auto intro: repeatable_ccTTree_ccSquare[OF Aexp_edom])"], ["proof (state)\nthis:\n  repeatable (Texp e\\<cdot>0)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Theap :: \"heap \\<Rightarrow> exp \\<Rightarrow> Arity \\<rightarrow> var ttree\"\n  where \"Theap \\<Gamma> e = (\\<Lambda> a. if nonrec \\<Gamma> then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a)) (ccExp e\\<cdot>a) else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)\""], ["", "lemma Theap_simp: \"Theap \\<Gamma> e\\<cdot>a = (if nonrec \\<Gamma> then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a)) (ccExp e\\<cdot>a) else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Theap \\<Gamma> e\\<cdot>a =\n    (if nonrec \\<Gamma>\n     then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a))\n           (\\<G>\\<^bsub>a\\<^esub> e)\n     else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)", "unfolding Theap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a.\n        if nonrec \\<Gamma>\n        then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a))\n              (\\<G>\\<^bsub>a\\<^esub> e)\n        else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)\\<cdot>\n    a =\n    (if nonrec \\<Gamma>\n     then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a))\n           (\\<G>\\<^bsub>a\\<^esub> e)\n     else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)", "by simp"], ["", "lemma carrier_Fheap':\"carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)", "unfolding Theap_simp carrier_ccTTree"], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier\n     (if nonrec \\<Gamma>\n      then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a))\n            (\\<G>\\<^bsub>a\\<^esub> e)\n      else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything) =\n    edom (Aheap \\<Gamma> e\\<cdot>a)", "by simp"], ["", "sublocale TTreeAnalysisCardinalityHeap Texp Aexp Aheap Theap"], ["proof (prove)\ngoal (1 subgoal):\n 1. TTreeAnalysisCardinalityHeap Texp Aexp Aheap Theap", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\n 2. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "fix \\<Gamma> e a"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\n 2. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "show \"carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)", "by (rule carrier_Fheap')"], ["proof (state)\nthis:\n  carrier (Theap \\<Gamma> e\\<cdot>a) = edom (Aheap \\<Gamma> e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "fix x \\<Gamma> p e a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "assume \"x \\<in> thunks \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "assume \"\\<not> one_call_in_path x p\""], ["proof (state)\nthis:\n  \\<not> one_call_in_path x p\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "hence \"x \\<in> set p\""], ["proof (prove)\nusing this:\n  \\<not> one_call_in_path x p\n\ngoal (1 subgoal):\n 1. x \\<in> set p", "by (rule more_than_one_setD)"], ["proof (state)\nthis:\n  x \\<in> set p\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "assume \"p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\""], ["proof (state)\nthis:\n  p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "with \\<open>x \\<in> set p\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> set p\n  p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)", "have \"x \\<in> carrier (Theap \\<Gamma> e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  x \\<in> set p\n  p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. x \\<in> carrier (Theap \\<Gamma> e\\<cdot>a)", "by (auto simp add: Union_paths_carrier[symmetric])"], ["proof (state)\nthis:\n  x \\<in> carrier (Theap \\<Gamma> e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "hence \"x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (Theap \\<Gamma> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)", "unfolding Theap_simp"], ["proof (prove)\nusing this:\n  x \\<in> carrier\n           (if nonrec \\<Gamma>\n            then ccTTree (edom (Aheap \\<Gamma> e\\<cdot>a))\n                  (\\<G>\\<^bsub>a\\<^esub> e)\n            else ttree_restr (edom (Aheap \\<Gamma> e\\<cdot>a)) anything)\n\ngoal (1 subgoal):\n 1. x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>x \\<Gamma> p e a.\n       \\<lbrakk>x \\<in> thunks \\<Gamma>;\n        p \\<in> paths (Theap \\<Gamma> e\\<cdot>a);\n        \\<not> one_call_in_path x p\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "show \"(Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "proof(cases \"nonrec \\<Gamma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "case False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "from False \\<open>x \\<in> thunks \\<Gamma>\\<close>  \\<open>x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<close>"], ["proof (chain)\npicking this:\n  \\<not> nonrec \\<Gamma>\n  x \\<in> thunks \\<Gamma>\n  x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> nonrec \\<Gamma>\n  x \\<in> thunks \\<Gamma>\n  x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "by (rule aHeap_thunks_rec)"], ["proof (state)\nthis:\n  (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "case True"], ["proof (state)\nthis:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "with \\<open>p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\\<close>"], ["proof (chain)\npicking this:\n  p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\n  nonrec \\<Gamma>", "have \"p \\<in> valid_lists (edom (Aheap \\<Gamma> e\\<cdot>a)) (ccExp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  p \\<in> paths (Theap \\<Gamma> e\\<cdot>a)\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. p \\<in> valid_lists (edom (Aheap \\<Gamma> e\\<cdot>a))\n             (\\<G>\\<^bsub>a\\<^esub> e)", "by (simp add: Theap_simp)"], ["proof (state)\nthis:\n  p \\<in> valid_lists (edom (Aheap \\<Gamma> e\\<cdot>a))\n           (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "with \\<open>\\<not> one_call_in_path x p\\<close>"], ["proof (chain)\npicking this:\n  \\<not> one_call_in_path x p\n  p \\<in> valid_lists (edom (Aheap \\<Gamma> e\\<cdot>a))\n           (\\<G>\\<^bsub>a\\<^esub> e)", "have \"x--x\\<in> (ccExp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  \\<not> one_call_in_path x p\n  p \\<in> valid_lists (edom (Aheap \\<Gamma> e\\<cdot>a))\n           (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. x--x\\<in>\\<G>\\<^bsub>a\\<^esub> e", "by (rule valid_lists_many_calls)"], ["proof (state)\nthis:\n  x--x\\<in>\\<G>\\<^bsub>a\\<^esub> e\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "from True \\<open>x \\<in> thunks \\<Gamma>\\<close> this"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>\n  x \\<in> thunks \\<Gamma>\n  x--x\\<in>\\<G>\\<^bsub>a\\<^esub> e", "show ?thesis"], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n  x \\<in> thunks \\<Gamma>\n  x--x\\<in>\\<G>\\<^bsub>a\\<^esub> e\n\ngoal (1 subgoal):\n 1. (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "by (rule aHeap_thunks_nonrec)"], ["proof (state)\nthis:\n  (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n\ngoal (2 subgoals):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "fix \\<Delta> e a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "have carrier: \"carrier (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> edom (Aexp (Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "proof(rule carrier_substitute_below)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. carrier (Texp e\\<cdot>a)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "from edom_mono[OF Aexp_Let[of \\<Delta> e a]]"], ["proof (chain)\npicking this:\n  edom\n   (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a) \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e)\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "show \"carrier (Texp e\\<cdot>a) \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> edom (Aexp (Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  edom\n   (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a) \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e)\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. carrier (Texp e\\<cdot>a)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by (simp add: Texp_def)"], ["proof (state)\nthis:\n  carrier (Texp e\\<cdot>a)\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "assume \"x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> edom (Aexp (Let \\<Delta> e)\\<cdot>a)\""], ["proof (state)\nthis:\n  x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n          edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "hence \"x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<or> x : (edom (Aexp (Let \\<Delta> e)\\<cdot>a))\""], ["proof (prove)\nusing this:\n  x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n          edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<or>\n    x \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by simp"], ["proof (state)\nthis:\n  x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<or>\n  x \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n               edom\n                (\\<A>\\<^bsub>a\\<^esub>\n                  (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n       carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n       \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                   edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "thus \"carrier ((Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> edom (Aexp (Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<or>\n  x \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "assume \"x \\<in> edom (Aheap \\<Delta> e\\<cdot>a)\""], ["proof (state)\nthis:\n  x \\<in> edom (Aheap \\<Delta> e\\<cdot>a)\n\ngoal (2 subgoals):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "have \"carrier ((Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<subseteq> edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))", "by (rule carrier_AnalBinds_below)"], ["proof (state)\nthis:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n\ngoal (2 subgoals):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "also"], ["proof (state)\nthis:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n\ngoal (2 subgoals):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "have \"\\<dots> \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> Aexp (Terms.Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n    \\<subseteq> edom\n                 (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                  \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "using edom_mono[OF Aexp_Let[of \\<Delta> e a]]"], ["proof (prove)\nusing this:\n  edom\n   (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a) \\<squnion>\n    \\<A>\\<^bsub>a\\<^esub> e)\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n    \\<subseteq> edom\n                 (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                  \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by simp"], ["proof (state)\nthis:\n  edom (ABinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (2 subgoals):\n 1. x \\<in> edom (Aheap \\<Delta> e\\<cdot>a) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "finally"], ["proof (chain)\npicking this:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "show ?thesis"], ["proof (prove)\nusing this:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom\n               (Aheap \\<Delta> e\\<cdot>a \\<squnion>\n                \\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by simp"], ["proof (state)\nthis:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "assume \"x \\<in> edom (Aexp (Terms.Let \\<Delta> e)\\<cdot>a)\""], ["proof (state)\nthis:\n  x \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "hence \"x \\<notin> domA \\<Delta>\""], ["proof (prove)\nusing this:\n  x \\<in> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. x \\<notin> domA \\<Delta>", "by (auto  dest: subsetD[OF Aexp_edom])"], ["proof (state)\nthis:\n  x \\<notin> domA \\<Delta>\n\ngoal (1 subgoal):\n 1. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "hence \"(Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Delta>\n\ngoal (1 subgoal):\n 1. (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = \\<bottom>", "by (rule Texp.AnalBinds_not_there)"], ["proof (state)\nthis:\n  (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = \\<bottom>\n\ngoal (1 subgoal):\n 1. x \\<in> edom\n             (\\<A>\\<^bsub>a\\<^esub>\n               (Terms.Let \\<Delta> e)) \\<Longrightarrow>\n    carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = \\<bottom>\n\ngoal (1 subgoal):\n 1. carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n                edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by simp"], ["proof (state)\nthis:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (2 subgoals):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a\n 2. \\<And>\\<Delta> e a.\n       ttree_restr (- domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Texp (Terms.Let \\<Delta> e)\\<cdot>a", "show \"ttree_restr (- domA \\<Delta>) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq> Texp (Let \\<Delta> e)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Texp (Terms.Let \\<Delta> e)\\<cdot>a", "proof (rule below_trans[OF _ eq_imp_below[OF Texp_simp[symmetric]]], rule below_ccTTreeI)"], ["proof (state)\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "have \"carrier (ttree_restr (- domA \\<Delta>) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)))\n       = carrier (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)) - domA \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n    carrier\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) -\n    domA \\<Delta>", "by auto"], ["proof (state)\nthis:\n  carrier\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) -\n  domA \\<Delta>\n\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "also"], ["proof (state)\nthis:\n  carrier\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) -\n  domA \\<Delta>\n\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "note carrier"], ["proof (state)\nthis:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "also"], ["proof (state)\nthis:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "have \"edom (Aheap \\<Delta> e\\<cdot>a) \\<union> edom (Aexp (Terms.Let \\<Delta> e)\\<cdot>a) - domA \\<Delta> = edom (Aexp (Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n    edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)) -\n    domA \\<Delta> =\n    edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by (auto dest: subsetD[OF edom_Aheap] subsetD[OF Aexp_edom])"], ["proof (state)\nthis:\n  edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n  edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)) -\n  domA \\<Delta> =\n  edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (2 subgoals):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n 2. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "finally"], ["proof (chain)\npicking this:\n  (\\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      x - domA \\<Delta> \\<subseteq> y - domA \\<Delta>) \\<Longrightarrow>\n  carrier\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)))\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "show \"carrier (ttree_restr (- domA \\<Delta>) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>)(Texp e\\<cdot>a)))\n          \\<subseteq> edom (Aexp (Terms.Let \\<Delta> e)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  (\\<And>x y.\n      x \\<subseteq> y \\<Longrightarrow>\n      x - domA \\<Delta> \\<subseteq> y - domA \\<Delta>) \\<Longrightarrow>\n  carrier\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)))\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. carrier\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))\n    \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))", "by this auto"], ["proof (state)\nthis:\n  carrier\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)))\n  \\<subseteq> edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "let ?x = \"ccApprox (ttree_restr (- domA \\<Delta>) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)))\""], ["proof (state)\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "have \"?x = cc_restr (- domA \\<Delta>) ?x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n    ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n    (- domA \\<Delta>)", "by simp"], ["proof (state)\nthis:\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n  (- domA \\<Delta>)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "also"], ["proof (state)\nthis:\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n  (- domA \\<Delta>)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "have \"\\<dots> \\<sqsubseteq> cc_restr (- domA \\<Delta>) (ccHeap \\<Delta> e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n    (- domA \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a G|` (- domA \\<Delta>)", "proof(rule cc_restr_mono2[OF wild_recursion_thunked])"], ["proof (state)\ngoal (4 subgoals):\n 1. ccApprox (Texp e\\<cdot>a) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "have \"ccExp e\\<cdot>a \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>a\\<^esub> e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (rule ccHeap_Exp)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>a\\<^esub> e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (4 subgoals):\n 1. ccApprox (Texp e\\<cdot>a) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "thus \"ccApprox (Texp e\\<cdot>a) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\nusing this:\n  \\<G>\\<^bsub>a\\<^esub> e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ccApprox (Texp e\\<cdot>a) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: Texp_simp intro: below_trans[OF cc_restr_below_arg])"], ["proof (state)\nthis:\n  ccApprox (Texp e\\<cdot>a) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "assume \"x \\<notin> domA \\<Delta>\""], ["proof (state)\nthis:\n  x \\<notin> domA \\<Delta>\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       x \\<notin> domA \\<Delta> \\<Longrightarrow>\n       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "thus \"(Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = empty\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Delta>\n\ngoal (1 subgoal):\n 1. (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty", "by (metis Texp.AnalBinds_not_there empty_is_bottom)"], ["proof (state)\nthis:\n  (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x = TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "assume \"x \\<in> domA \\<Delta>\""], ["proof (state)\nthis:\n  x \\<in> domA \\<Delta>\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "then"], ["proof (chain)\npicking this:\n  x \\<in> domA \\<Delta>", "obtain e' where e': \"map_of \\<Delta> x = Some e'\""], ["proof (prove)\nusing this:\n  x \\<in> domA \\<Delta>\n\ngoal (1 subgoal):\n 1. (\\<And>e'.\n        map_of \\<Delta> x = Some e' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis domA_map_of_Some_the)"], ["proof (state)\nthis:\n  map_of \\<Delta> x = Some e'\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "show \"ccApprox ((Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "proof(cases \"(Aheap \\<Delta> e\\<cdot>a) x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom> \\<Longrightarrow>\n    ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "case bottom"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n\ngoal (2 subgoals):\n 1. (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom> \\<Longrightarrow>\n    ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "thus ?thesis"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n\ngoal (1 subgoal):\n 1. ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using e'"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (simp add: Texp.AnalBinds_lookup)"], ["proof (state)\nthis:\n  ccApprox\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "case (up a')"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "with e'"], ["proof (chain)\npicking this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'", "have \"ccExp e'\\<cdot>a' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. \\<G>\\<^bsub>a'\\<^esub> e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (rule ccHeap_Heap)"], ["proof (state)\nthis:\n  \\<G>\\<^bsub>a'\\<^esub> e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       ccApprox\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<G>\\<^bsub>a'\\<^esub> e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using up e'"], ["proof (prove)\nusing this:\n  \\<G>\\<^bsub>a'\\<^esub> e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. ccApprox\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: Texp.AnalBinds_lookup Texp_simp  intro: below_trans[OF cc_restr_below_arg])"], ["proof (state)\nthis:\n  ccApprox\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccApprox\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> domA \\<Delta> \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "show \"ccProd (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)- {x} \\<inter> thunks \\<Delta>) (carrier ((Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x)) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "proof(cases \"(Aheap \\<Delta> e\\<cdot>a) x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom> \\<Longrightarrow>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "case bottom"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n\ngoal (2 subgoals):\n 1. (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom> \\<Longrightarrow>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "thus ?thesis"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n\ngoal (1 subgoal):\n 1. (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using e'"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = \\<bottom>\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (simp add: Texp.AnalBinds_lookup)"], ["proof (state)\nthis:\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) G\\<times>\n  carrier\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "case (up a')"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "have subset: \"(carrier (fup\\<cdot>(Texp e')\\<cdot>((Aheap \\<Delta> e\\<cdot>a) x))) \\<subseteq> fv e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (fup\\<cdot>(Texp e')\\<cdot>((Aheap \\<Delta> e\\<cdot>a) x))\n    \\<subseteq> fv e'", "using up e'"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. carrier (fup\\<cdot>(Texp e')\\<cdot>((Aheap \\<Delta> e\\<cdot>a) x))\n    \\<subseteq> fv e'", "by (auto simp add: Texp.AnalBinds_lookup carrier_Fexp dest!: subsetD[OF Aexp_edom])"], ["proof (state)\nthis:\n  carrier (fup\\<cdot>(Texp e')\\<cdot>((Aheap \\<Delta> e\\<cdot>a) x))\n  \\<subseteq> fv e'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "from e' up"], ["proof (chain)\npicking this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'", "have \"ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (rule ccHeap_Extra_Edges)"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>xa \\<Longrightarrow>\n       (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n        {x} \\<inter> thunks \\<Delta>) G\\<times>\n       carrier\n        ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n       ccHeap \\<Delta> e\\<cdot>a", "then"], ["proof (chain)\npicking this:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using e'"], ["proof (prove)\nusing this:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) G\\<times>\n    carrier\n     ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (simp add: Texp.AnalBinds_lookup  Texp_simp ccProd_comm  below_trans[OF ccProd_mono2[OF subset]])"], ["proof (state)\nthis:\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) G\\<times>\n  carrier\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) G\\<times>\n  carrier\n   ((FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) x) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n  (- domA \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a G|` (- domA \\<Delta>)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "also"], ["proof (state)\nthis:\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) G|`\n  (- domA \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a G|` (- domA \\<Delta>)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "have \"\\<dots> \\<sqsubseteq> ccExp (Let \\<Delta> e)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccHeap \\<Delta> e\\<cdot>a G|` (- domA \\<Delta>) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "by (rule ccExp_Let)"], ["proof (state)\nthis:\n  ccHeap \\<Delta> e\\<cdot>a G|` (- domA \\<Delta>) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "show \"ccApprox (ttree_restr (- domA \\<Delta>) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)))\n        \\<sqsubseteq> ccExp (Terms.Let \\<Delta> e)\\<cdot>a\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)\n\ngoal (1 subgoal):\n 1. ccApprox\n     (ttree_restr (- domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n    \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)", "by this simp_all"], ["proof (state)\nthis:\n  ccApprox\n   (ttree_restr (- domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) \\<sqsubseteq>\n  \\<G>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ttree_restr (- domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Texp (Terms.Let \\<Delta> e)\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "note carrier"], ["proof (state)\nthis:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "hence \"carrier (substitute (ExpAnalysis.AnalBinds Texp \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> - domA \\<Delta>\""], ["proof (prove)\nusing this:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union>\n              edom (\\<A>\\<^bsub>a\\<^esub> (Terms.Let \\<Delta> e))\n\ngoal (1 subgoal):\n 1. carrier\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))\n    \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> - domA \\<Delta>", "by (rule order_trans) (auto dest: subsetD[OF Aexp_edom])"], ["proof (state)\nthis:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> - domA \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "hence \"ttree_restr (domA \\<Delta>)            (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a))\n      = ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (ttree_restr (domA \\<Delta>) (substitute (Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)))\""], ["proof (prove)\nusing this:\n  carrier\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n  \\<subseteq> edom (Aheap \\<Delta> e\\<cdot>a) \\<union> - domA \\<Delta>\n\ngoal (1 subgoal):\n 1. ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (ttree_restr (domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a)))", "by -(rule ttree_restr_noop[symmetric], auto)"], ["proof (state)\nthis:\n  ttree_restr (domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ttree_restr (domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)))\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> = ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (substitute (Texp.AnalBinds  \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (ttree_restr (domA \\<Delta>)\n       (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n         (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))", "by (simp add: inf.absorb2[OF edom_Aheap ])"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a))) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a))\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> Theap \\<Delta> e \\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "proof(cases \"nonrec \\<Delta>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "case False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Delta>\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a))\n      \\<sqsubseteq> ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything", "by (rule ttree_restr_mono) simp"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> = Theap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything =\n    Theap \\<Delta> e\\<cdot>a", "by (simp add: Theap_simp False)"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) anything =\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "."], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "case [simp]: True"], ["proof (state)\nthis:\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "from True"], ["proof (chain)\npicking this:\n  nonrec \\<Delta>", "have \"ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (substitute (Texp.AnalBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a))\n       = ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a)", "by (rule nonrecE) (rule ttree_rest_substitute, auto simp add: carrier_Fexp fv_def fresh_def dest!: subsetD[OF edom_Aheap] subsetD[OF Aexp_edom])"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) =\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> = ccTTree (edom (Aexp e\\<cdot>a) \\<inter> edom (Aheap \\<Delta> e\\<cdot>a)) (ccExp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a) =\n    ccTTree\n     (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter>\n      edom (Aheap \\<Delta> e\\<cdot>a))\n     (\\<G>\\<^bsub>a\\<^esub> e)", "by (simp add: Texp_simp)"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a) =\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> edom (Aheap \\<Delta> e\\<cdot>a))\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a)) (Texp e\\<cdot>a) =\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> edom (Aheap \\<Delta> e\\<cdot>a))\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccTTree (edom (Aexp e\\<cdot>a) \\<inter> domA \\<Delta>) (ccExp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree\n     (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter>\n      edom (Aheap \\<Delta> e\\<cdot>a))\n     (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n    ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n     (\\<G>\\<^bsub>a\\<^esub> e)", "by (rule ccTTree_mono1[OF Int_mono[OF order_refl edom_Aheap]])"], ["proof (state)\nthis:\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> edom (Aheap \\<Delta> e\\<cdot>a))\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree\n   (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> edom (Aheap \\<Delta> e\\<cdot>a))\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n   (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccTTree (edom (Aheap \\<Delta> e\\<cdot>a)) (ccExp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n     (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n    ccTTree (edom (Aheap \\<Delta> e\\<cdot>a)) (\\<G>\\<^bsub>a\\<^esub> e)", "by (rule ccTTree_mono1[OF edom_mono[OF Aheap_nonrec[OF True], simplified]])"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (Aheap \\<Delta> e\\<cdot>a)) (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccTTree (edom (\\<A>\\<^bsub>a\\<^esub> e) \\<inter> domA \\<Delta>)\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  ccTTree (edom (Aheap \\<Delta> e\\<cdot>a)) (\\<G>\\<^bsub>a\\<^esub> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> Theap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccTTree (edom (Aheap \\<Delta> e\\<cdot>a))\n     (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "by (simp add: Theap_simp)"], ["proof (state)\nthis:\n  ccTTree (edom (Aheap \\<Delta> e\\<cdot>a))\n   (\\<G>\\<^bsub>a\\<^esub> e) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n                     (substitute\n                       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n                       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n                    Theap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n                     (substitute\n                       (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n                       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n                    Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "by this simp_all"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ttree_restr (edom (Aheap \\<Delta> e\\<cdot>a))\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<And>\\<Delta> e a.\n       ttree_restr (domA \\<Delta>)\n        (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n          (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n       Theap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  ttree_restr (domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a", "show \"ttree_restr (domA \\<Delta>) (substitute (ExpAnalysis.AnalBinds Texp \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a)) (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq> Theap \\<Delta> e\\<cdot>a\""], ["proof (prove)\nusing this:\n  ttree_restr (domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ttree_restr (domA \\<Delta>)\n     (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n       (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n    Theap \\<Delta> e\\<cdot>a", "."], ["proof (state)\nthis:\n  ttree_restr (domA \\<Delta>)\n   (substitute (FBinds \\<Delta>\\<cdot>(Aheap \\<Delta> e\\<cdot>a))\n     (thunks \\<Delta>) (Texp e\\<cdot>a)) \\<sqsubseteq>\n  Theap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* TODO: Unused stuff from here, mostly about singles. Might be useful later. *)"], ["", "lemma paths_singles: \"xs \\<in> paths (singles S) \\<longleftrightarrow> (\\<forall>x \\<in> S. one_call_in_path x xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (singles S)) = (\\<forall>x\\<in>S. one_call_in_path x xs)", "by transfer (auto simp add: one_call_in_path_filter_conv)"], ["", "lemma paths_singles': \"xs \\<in> paths (singles S) \\<longleftrightarrow> (\\<forall>x \\<in> (set xs \\<inter> S). one_call_in_path x xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (singles S)) =\n    (\\<forall>x\\<in>set xs \\<inter> S. one_call_in_path x xs)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs S.\n       (xs \\<in> {xs.\n                  \\<forall>x\\<in>S.\n                     length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}) =\n       (\\<forall>x\\<in>set xs \\<inter> S. one_call_in_path x xs)", "apply (auto simp add: one_call_in_path_filter_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs S x.\n       \\<lbrakk>\\<forall>x\\<in>set xs \\<inter> S.\n                   length (filter (\\<lambda>x'. x' = x) xs) \\<le> Suc 0;\n        x \\<in> S\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) xs)\n                         \\<le> Suc 0", "apply (erule_tac x = x in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xs S x.\n       \\<lbrakk>x \\<in> S;\n        length (filter (\\<lambda>x'. x' = x) xs) \\<le> Suc 0\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) xs)\n                         \\<le> Suc 0\n 2. \\<And>xs S x.\n       \\<lbrakk>x \\<in> S; x \\<notin> set xs \\<inter> S\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) xs)\n                         \\<le> Suc 0", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs S x.\n       \\<lbrakk>x \\<in> S; x \\<notin> set xs\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) xs)\n                         \\<le> Suc 0", "by (metis (poly_guards_query) filter_empty_conv le0 length_0_conv)"], ["", "lemma both_below_singles1:\n  assumes \"t \\<sqsubseteq> singles S\"\n  assumes \"carrier t' \\<inter> S = {}\"\n  shows \"t \\<otimes>\\<otimes> t' \\<sqsubseteq> singles S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> t' \\<sqsubseteq> singles S", "proof (rule ttree_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "assume \"xs \\<in> paths (t \\<otimes>\\<otimes> t')\""], ["proof (state)\nthis:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')", "obtain ys zs where \"ys \\<in> paths t\" and \"zs \\<in> paths t'\" and \"xs \\<in> ys \\<otimes> zs\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>ys \\<in> paths t; zs \\<in> paths t';\n         xs \\<in> ys \\<otimes> zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: paths_both)"], ["proof (state)\nthis:\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  xs \\<in> ys \\<otimes> zs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "with assms"], ["proof (chain)\npicking this:\n  t \\<sqsubseteq> singles S\n  carrier t' \\<inter> S = {}\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  xs \\<in> ys \\<otimes> zs", "have \"ys \\<in> paths (singles S)\" and \"set zs \\<inter> S = {}\""], ["proof (prove)\nusing this:\n  t \\<sqsubseteq> singles S\n  carrier t' \\<inter> S = {}\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  xs \\<in> ys \\<otimes> zs\n\ngoal (1 subgoal):\n 1. ys \\<in> paths (singles S) &&& set zs \\<inter> S = {}", "by (metis below_ttree.rep_eq contra_subsetD paths.rep_eq, auto simp add: Union_paths_carrier[symmetric])"], ["proof (state)\nthis:\n  ys \\<in> paths (singles S)\n  set zs \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "with \\<open>xs \\<in> ys \\<otimes> zs\\<close>"], ["proof (chain)\npicking this:\n  xs \\<in> ys \\<otimes> zs\n  ys \\<in> paths (singles S)\n  set zs \\<inter> S = {}", "show \"xs \\<in> paths (singles S)\""], ["proof (prove)\nusing this:\n  xs \\<in> ys \\<otimes> zs\n  ys \\<in> paths (singles S)\n  set zs \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (singles S)", "by (induction) (auto simp add: paths_singles no_call_in_path_set_conv interleave_set dest: more_than_one_setD split: if_splits)"], ["proof (state)\nthis:\n  xs \\<in> paths (singles S)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma paths_ttree_restr_singles: \"xs \\<in> paths (ttree_restr S' (singles S)) \\<longleftrightarrow> set xs \\<subseteq> S' \\<and> (\\<forall>x \\<in> S. one_call_in_path x xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (ttree_restr S' (singles S))) =\n    (set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. xs \\<in> paths (ttree_restr S' (singles S)) \\<Longrightarrow>\n    set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\n 2. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "show \"xs \\<in> paths (ttree_restr S' (singles S)) \\<Longrightarrow>  set xs \\<subseteq> S' \\<and> (\\<forall>x \\<in> S. one_call_in_path x xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths (ttree_restr S' (singles S)) \\<Longrightarrow>\n    set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)", "by (auto simp add: filter_paths_conv_free_restr[symmetric] paths_singles)"], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S' (singles S)) \\<Longrightarrow>\n  set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "assume *: \"set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\""], ["proof (state)\nthis:\n  set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "hence \"set xs \\<subseteq> S'\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S'", "by auto"], ["proof (state)\nthis:\n  set xs \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "hence [simp]: \"filter (\\<lambda> x'. x' \\<in> S') xs = xs\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S') xs = xs", "by (auto simp add: filter_id_conv)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S') xs = xs\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "from *"], ["proof (chain)\npicking this:\n  set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)", "have \"xs \\<in> paths (singles S)\""], ["proof (prove)\nusing this:\n  set xs \\<subseteq> S' \\<and> (\\<forall>x\\<in>S. one_call_in_path x xs)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (singles S)", "by (auto simp add: paths_singles')"], ["proof (state)\nthis:\n  xs \\<in> paths (singles S)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "hence \"filter (\\<lambda> x'. x' \\<in> S') xs \\<in> filter (\\<lambda>x'. x' \\<in> S') ` paths (singles S)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (singles S)\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S') xs\n    \\<in> filter (\\<lambda>x'. x' \\<in> S') ` paths (singles S)", "by (rule imageI)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S') xs\n  \\<in> filter (\\<lambda>x'. x' \\<in> S') ` paths (singles S)\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S' \\<and>\n    (\\<forall>x\\<in>S. one_call_in_path x xs) \\<Longrightarrow>\n    xs \\<in> paths (ttree_restr S' (singles S))", "thus \"xs \\<in> paths (ttree_restr S' (singles S))\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S') xs\n  \\<in> filter (\\<lambda>x'. x' \\<in> S') ` paths (singles S)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (ttree_restr S' (singles S))", "by (auto simp add: filter_paths_conv_free_restr[symmetric] )"], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S' (singles S))\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: unused *)"], ["", "lemma substitute_not_carrier:\n  assumes \"x \\<notin> carrier t\"\n  assumes \"\\<And> x'. x \\<notin> carrier (f x')\"\n  shows \"x \\<notin>  carrier (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> carrier (substitute f T t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> carrier (substitute f T t)", "have \"ttree_restr ({x}) (substitute f T t) = ttree_restr ({x}) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr {x} (substitute f T t) = ttree_restr {x} t", "proof(rule ttree_rest_substitute)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. carrier (f xa) \\<inter> {x} = {}", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa. carrier (f xa) \\<inter> {x} = {}", "from \\<open>x \\<notin> carrier (f x')\\<close>"], ["proof (chain)\npicking this:\n  x \\<notin> carrier (f x')", "show \"carrier (f x') \\<inter> {x} = {}\""], ["proof (prove)\nusing this:\n  x \\<notin> carrier (f x')\n\ngoal (1 subgoal):\n 1. carrier (f x') \\<inter> {x} = {}", "by auto"], ["proof (state)\nthis:\n  carrier (f x') \\<inter> {x} = {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ttree_restr {x} (substitute f T t) = ttree_restr {x} t\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (substitute f T t)", "hence \"x \\<notin> carrier (ttree_restr ({x}) (substitute f T t)) \\<longleftrightarrow> x \\<notin> carrier (ttree_restr ({x}) t)\""], ["proof (prove)\nusing this:\n  ttree_restr {x} (substitute f T t) = ttree_restr {x} t\n\ngoal (1 subgoal):\n 1. (x \\<notin> carrier (ttree_restr {x} (substitute f T t))) =\n    (x \\<notin> carrier (ttree_restr {x} t))", "by metis"], ["proof (state)\nthis:\n  (x \\<notin> carrier (ttree_restr {x} (substitute f T t))) =\n  (x \\<notin> carrier (ttree_restr {x} t))\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (substitute f T t)", "with assms(1)"], ["proof (chain)\npicking this:\n  x \\<notin> carrier t\n  (x \\<notin> carrier (ttree_restr {x} (substitute f T t))) =\n  (x \\<notin> carrier (ttree_restr {x} t))", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<notin> carrier t\n  (x \\<notin> carrier (ttree_restr {x} (substitute f T t))) =\n  (x \\<notin> carrier (ttree_restr {x} t))\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (substitute f T t)", "by simp"], ["proof (state)\nthis:\n  x \\<notin> carrier (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: unused *)"], ["", "lemma substitute_below_singlesI:\n  assumes \"t \\<sqsubseteq> singles S\"\n  assumes \"\\<And> x. carrier (f x) \\<inter> S = {}\"\n  shows \"substitute f T t \\<sqsubseteq> singles S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T t \\<sqsubseteq> singles S", "proof(rule ttree_belowI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "assume \"xs \\<in> paths (substitute f T t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n       xs \\<in> paths (singles S)", "thus \"xs \\<in> paths (singles S)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (singles S)", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  t \\<sqsubseteq> singles S\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (singles S)", "proof(induction f T t xs arbitrary: S rule: substitute_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t S.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (singles S)\n 2. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  t_ \\<sqsubseteq> singles S\n  carrier (f_ ?x) \\<inter> S = {}\n\ngoal (2 subgoals):\n 1. \\<And>f T t S.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (singles S)\n 2. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  t_ \\<sqsubseteq> singles S\n  carrier (f_ ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (singles S)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (singles S)\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "case (Cons f T t x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x) T\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles ?S;\n   \\<And>xa. carrier (f_nxt f T x xa) \\<inter> ?S = {}\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths (singles ?S)\n  x # xs \\<in> paths (substitute f T t)\n  t \\<sqsubseteq> singles S\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from \\<open>x#xs \\<in> _\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)", "have xs: \"xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "by auto"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "moreover"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from \\<open>t \\<sqsubseteq> singles S\\<close>"], ["proof (chain)\npicking this:\n  t \\<sqsubseteq> singles S", "have \"nxt t x \\<sqsubseteq> singles S\""], ["proof (prove)\nusing this:\n  t \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. nxt t x \\<sqsubseteq> singles S", "by (metis \"TTree-HOLCF.nxt_mono\" below_trans nxt_singles_below_singles)"], ["proof (state)\nthis:\n  nxt t x \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from this \\<open>carrier (f x) \\<inter> S = {}\\<close>"], ["proof (chain)\npicking this:\n  nxt t x \\<sqsubseteq> singles S\n  carrier (f x) \\<inter> S = {}", "have \"nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\""], ["proof (prove)\nusing this:\n  nxt t x \\<sqsubseteq> singles S\n  carrier (f x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S", "by (rule both_below_singles1)"], ["proof (state)\nthis:\n  nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "moreover"], ["proof (state)\nthis:\n  nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "{"], ["proof (state)\nthis:\n  nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from  \\<open>carrier (f x') \\<inter> S = {}\\<close>"], ["proof (chain)\npicking this:\n  carrier (f x') \\<inter> S = {}", "have \"carrier (f_nxt f T x x') \\<inter> S = {}\""], ["proof (prove)\nusing this:\n  carrier (f x') \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. carrier (f_nxt f T x x') \\<inter> S = {}", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  carrier (f_nxt f T x x') \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "}"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?x'2) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\n  carrier (f_nxt f T x ?x'2) \\<inter> S = {}", "have IH: \"xs \\<in> paths (singles S)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S\n  carrier (f_nxt f T x ?x'2) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (singles S)", "by (rule Cons.IH)"], ["proof (state)\nthis:\n  xs \\<in> paths (singles S)\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs S.\n       \\<lbrakk>\\<And>S.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    nxt t x \\<otimes>\\<otimes> f x \\<sqsubseteq> singles S;\n                    \\<And>xa.\n                       carrier (f_nxt f T x xa) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (singles S);\n        x # xs \\<in> paths (substitute f T t); t \\<sqsubseteq> singles S;\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (singles S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (singles S)", "proof(cases \"x \\<in> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "case True"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "with \\<open>carrier (f x) \\<inter> S = {}\\<close>"], ["proof (chain)\npicking this:\n  carrier (f x) \\<inter> S = {}\n  x \\<in> S", "have \"x \\<notin> carrier (f x)\""], ["proof (prove)\nusing this:\n  carrier (f x) \\<inter> S = {}\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (f x)", "by auto"], ["proof (state)\nthis:\n  x \\<notin> carrier (f x)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "moreover"], ["proof (state)\nthis:\n  x \\<notin> carrier (f x)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from \\<open>t \\<sqsubseteq> singles S\\<close>"], ["proof (chain)\npicking this:\n  t \\<sqsubseteq> singles S", "have \"nxt t x \\<sqsubseteq> nxt (singles S) x\""], ["proof (prove)\nusing this:\n  t \\<sqsubseteq> singles S\n\ngoal (1 subgoal):\n 1. nxt t x \\<sqsubseteq> nxt (singles S) x", "by (rule nxt_mono)"], ["proof (state)\nthis:\n  nxt t x \\<sqsubseteq> nxt (singles S) x\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "hence \"carrier (nxt t x) \\<subseteq> carrier (nxt (singles S) x)\""], ["proof (prove)\nusing this:\n  nxt t x \\<sqsubseteq> nxt (singles S) x\n\ngoal (1 subgoal):\n 1. carrier (nxt t x) \\<subseteq> carrier (nxt (singles S) x)", "by (rule carrier_mono)"], ["proof (state)\nthis:\n  carrier (nxt t x) \\<subseteq> carrier (nxt (singles S) x)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "from subsetD[OF this] True"], ["proof (chain)\npicking this:\n  ?c \\<in> carrier (nxt t x) \\<Longrightarrow>\n  ?c \\<in> carrier (nxt (singles S) x)\n  x \\<in> S", "have \"x \\<notin> carrier (nxt t x)\""], ["proof (prove)\nusing this:\n  ?c \\<in> carrier (nxt t x) \\<Longrightarrow>\n  ?c \\<in> carrier (nxt (singles S) x)\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (nxt t x)", "by auto"], ["proof (state)\nthis:\n  x \\<notin> carrier (nxt t x)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "ultimately"], ["proof (chain)\npicking this:\n  x \\<notin> carrier (f x)\n  x \\<notin> carrier (nxt t x)", "have \"x \\<notin> carrier (nxt t x \\<otimes>\\<otimes> f x)\""], ["proof (prove)\nusing this:\n  x \\<notin> carrier (f x)\n  x \\<notin> carrier (nxt t x)\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (nxt t x \\<otimes>\\<otimes> f x)", "by simp"], ["proof (state)\nthis:\n  x \\<notin> carrier (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "hence \"x \\<notin> carrier (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x \\<notin> carrier (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier\n                (substitute (f_nxt f T x) T\n                  (nxt t x \\<otimes>\\<otimes> f x))", "proof(rule substitute_not_carrier)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x'. x \\<notin> carrier (f_nxt f T x x')", "fix x'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x'. x \\<notin> carrier (f_nxt f T x x')", "from \\<open>carrier (f x') \\<inter> S = {}\\<close> \\<open>x \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  carrier (f x') \\<inter> S = {}\n  x \\<in> S", "show \"x \\<notin> carrier (f_nxt f T x x')\""], ["proof (prove)\nusing this:\n  carrier (f x') \\<inter> S = {}\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x \\<notin> carrier (f_nxt f T x x')", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  x \\<notin> carrier (f_nxt f T x x')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x \\<notin> carrier\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "with xs"], ["proof (chain)\npicking this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  x \\<notin> carrier\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "have \"x \\<notin> set xs\""], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  x \\<notin> carrier\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. x \\<notin> set xs", "by (auto simp add: Union_paths_carrier[symmetric])"], ["proof (state)\nthis:\n  x \\<notin> set xs\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "with IH"], ["proof (chain)\npicking this:\n  xs \\<in> paths (singles S)\n  x \\<notin> set xs", "have \"xs \\<in> paths (without x (singles S))\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (singles S)\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x (singles S))", "by (rule paths_withoutI)"], ["proof (state)\nthis:\n  xs \\<in> paths (without x (singles S))\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow> x # xs \\<in> paths (singles S)\n 2. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs \\<in> paths (without x (singles S))\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (singles S)", "using True"], ["proof (prove)\nusing this:\n  xs \\<in> paths (without x (singles S))\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (singles S)", "by (simp add: Cons_path)"], ["proof (state)\nthis:\n  x # xs \\<in> paths (singles S)\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "case False"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow> x # xs \\<in> paths (singles S)", "with IH"], ["proof (chain)\npicking this:\n  xs \\<in> paths (singles S)\n  x \\<notin> S", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<in> paths (singles S)\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (singles S)", "by (simp add: Cons_path)"], ["proof (state)\nthis:\n  x # xs \\<in> paths (singles S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x # xs \\<in> paths (singles S)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths (singles S)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}