{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/TrivialArityAnal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma Trivial_Aexp_simp: \"Trivial_Aexp e \\<cdot> n = (\\<lambda> x. up\\<cdot>0) f|` fv e\"", "lemma edom_Trivial_Aexp[simp]: \"edom (Trivial_Aexp e \\<cdot> n) = fv e\"", "lemma Trivial_Aexp_eq[iff]: \"Trivial_Aexp e \\<cdot> n = Trivial_Aexp e' \\<cdot> n' \\<longleftrightarrow> fv e = (fv e' :: var set)\"", "lemma below_Trivial_Aexp[simp]: \"(ae \\<sqsubseteq> Trivial_Aexp e \\<cdot> n) \\<longleftrightarrow> edom ae \\<subseteq> fv e\"", "lemma Trivial_Aheap_eqvt[eqvt]: \"\\<pi> \\<bullet>  (Trivial_Aheap \\<Gamma> e) = Trivial_Aheap (\\<pi> \\<bullet> \\<Gamma>) (\\<pi> \\<bullet> e)\"", "lemma Trivial_Aheap_simp: \"Trivial_Aheap \\<Gamma> e\\<cdot> a = (\\<lambda> x. up\\<cdot>0) f|` domA \\<Gamma>\"", "lemma Trivial_fup_Aexp_below_fv: \"fup\\<cdot>(Trivial_Aexp e)\\<cdot>a \\<sqsubseteq> (\\<lambda> x . up\\<cdot>0) f|` fv e\"", "lemma Trivial_Abinds_below_fv: \"ABinds \\<Gamma>\\<cdot>ae \\<sqsubseteq> (\\<lambda> x . up\\<cdot>0) f|` fv \\<Gamma>\""], "translations": [["", "lemma Trivial_Aexp_simp: \"Trivial_Aexp e \\<cdot> n = (\\<lambda> x. up\\<cdot>0) f|` fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Trivial_Aexp e\\<cdot>n = (\\<lambda>x. up\\<cdot>0) f|` fv e", "unfolding Trivial_Aexp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> n. (\\<lambda>x. up\\<cdot>0) f|` fv e)\\<cdot>n =\n    (\\<lambda>x. up\\<cdot>0) f|` fv e", "by simp"], ["", "lemma edom_Trivial_Aexp[simp]: \"edom (Trivial_Aexp e \\<cdot> n) = fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (Trivial_Aexp e\\<cdot>n) = fv e", "by (auto simp add: edom_def env_restr_def Trivial_Aexp_def)"], ["", "lemma Trivial_Aexp_eq[iff]: \"Trivial_Aexp e \\<cdot> n = Trivial_Aexp e' \\<cdot> n' \\<longleftrightarrow> fv e = (fv e' :: var set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Trivial_Aexp e\\<cdot>n = Trivial_Aexp e'\\<cdot>n') = (fv e = fv e')", "apply (auto simp add: Trivial_Aexp_simp env_restr_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>(\\<lambda>x.\n                    if x \\<in> fv e then up\\<cdot>0 else \\<bottom>) =\n                (\\<lambda>x.\n                    if x \\<in> fv e' then up\\<cdot>0 else \\<bottom>);\n        x \\<in> fv e\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv e'\n 2. \\<And>x.\n       \\<lbrakk>(\\<lambda>x.\n                    if x \\<in> fv e then up\\<cdot>0 else \\<bottom>) =\n                (\\<lambda>x.\n                    if x \\<in> fv e' then up\\<cdot>0 else \\<bottom>);\n        x \\<in> fv e'\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fv e", "apply (metis up_defined)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma below_Trivial_Aexp[simp]: \"(ae \\<sqsubseteq> Trivial_Aexp e \\<cdot> n) \\<longleftrightarrow> edom ae \\<subseteq> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ae \\<sqsubseteq> Trivial_Aexp e\\<cdot>n) = (edom ae \\<subseteq> fv e)", "by (auto dest:fun_belowD intro!: fun_belowI  simp add: Trivial_Aexp_def env_restr_def edom_def split:if_splits)"], ["", "interpretation ArityAnalysis Trivial_Aexp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "interpretation EdomArityAnalysis Trivial_Aexp"], ["proof (prove)\ngoal (1 subgoal):\n 1. EdomArityAnalysis Trivial_Aexp", "by standard simp"], ["", "interpretation ArityAnalysisSafe Trivial_Aexp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ArityAnalysisSafe Trivial_Aexp", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>n x. up\\<cdot>n \\<sqsubseteq> Aexp_syn n (Var x) x\n 3. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 4. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 5. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "(*\n  fix \\<pi>\n  show \"\\<pi> \\<bullet> Trivial_Aexp = Trivial_Aexp\" by perm_simp rule\nnext\n*)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>n x. up\\<cdot>n \\<sqsubseteq> Aexp_syn n (Var x) x\n 3. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 4. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 5. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "fix n x"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>n x. up\\<cdot>n \\<sqsubseteq> Aexp_syn n (Var x) x\n 3. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 4. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 5. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "show \"up\\<cdot>n \\<sqsubseteq> (Trivial_Aexp (Var x)\\<cdot>n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. up\\<cdot>n \\<sqsubseteq> Aexp_syn n (Var x) x", "by (simp add: Trivial_Aexp_simp)"], ["proof (state)\nthis:\n  up\\<cdot>n \\<sqsubseteq> Aexp_syn n (Var x) x\n\ngoal (4 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 3. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 4. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 3. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 4. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "fix e x n"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>e n x.\n       Aexp_syn (inc\\<cdot>n) e \\<squnion>\n       esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n       Aexp_syn n (App e x)\n 3. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 4. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "show \"Trivial_Aexp e\\<cdot>(inc\\<cdot>n) \\<squnion> esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq> Trivial_Aexp (App e x)\\<cdot>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn (inc\\<cdot>n) e \\<squnion>\n    esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n    Aexp_syn n (App e x)", "by (auto intro: fun_belowI simp add: Trivial_Aexp_def env_restr_def )"], ["proof (state)\nthis:\n  Aexp_syn (inc\\<cdot>n) e \\<squnion>\n  esing x\\<cdot>(up\\<cdot>0) \\<sqsubseteq>\n  Aexp_syn n (App e x)\n\ngoal (3 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 3. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 3. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "fix y e n"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>y e n.\n       env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n       Aexp_syn n (Lam [y]. e)\n 3. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "show \"env_delete y (Trivial_Aexp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq> Trivial_Aexp (Lam [y]. e)\\<cdot>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n    Aexp_syn n (Lam [y]. e)", "by (auto simp add: Trivial_Aexp_simp env_delete_restr Diff_eq inf_commute)"], ["proof (state)\nthis:\n  env_delete y (Aexp_syn (pred\\<cdot>n) e) \\<sqsubseteq>\n  Aexp_syn n (Lam [y]. e)\n\ngoal (2 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "fix x y :: var and S e a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "assume \"x \\<notin> S\" and \"y \\<notin> S\""], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n 2. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "thus \"Trivial_Aexp e[x::=y]\\<cdot>a f|` S = Trivial_Aexp e\\<cdot>a f|` S\""], ["proof (prove)\nusing this:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S", "by (auto simp add: Trivial_Aexp_simp fv_subst_eq intro!: arg_cong[where f = \"\\<lambda> S. env_restr S e\" for e])"], ["proof (state)\nthis:\n  Aexp_syn a e[x::=y] f|` S = Aexp_syn a e f|` S\n\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "fix scrut e1 a e2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n       Aexp_syn a e2 \\<sqsubseteq>\n       Aexp_syn a (scrut ? e1 : e2)", "show \"Trivial_Aexp scrut\\<cdot>0 \\<squnion> Trivial_Aexp e1\\<cdot>a \\<squnion> Trivial_Aexp e2\\<cdot>a \\<sqsubseteq> Trivial_Aexp (scrut ? e1 : e2)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n    Aexp_syn a e2 \\<sqsubseteq>\n    Aexp_syn a (scrut ? e1 : e2)", "by (auto intro: env_restr_mono2 simp add: Trivial_Aexp_simp join_below_iff )"], ["proof (state)\nthis:\n  Aexp_syn 0 scrut \\<squnion> Aexp_syn a e1 \\<squnion>\n  Aexp_syn a e2 \\<sqsubseteq>\n  Aexp_syn a (scrut ? e1 : e2)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition Trivial_Aheap :: \"heap \\<Rightarrow> exp \\<Rightarrow> Arity \\<rightarrow> AEnv\" where\n  \"Trivial_Aheap \\<Gamma> e = (\\<Lambda> a. (\\<lambda> x. up\\<cdot>0) f|` domA \\<Gamma>)\""], ["", "lemma Trivial_Aheap_eqvt[eqvt]: \"\\<pi> \\<bullet>  (Trivial_Aheap \\<Gamma> e) = Trivial_Aheap (\\<pi> \\<bullet> \\<Gamma>) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> Trivial_Aheap \\<Gamma> e =\n    Trivial_Aheap (\\<pi> \\<bullet> \\<Gamma>) (\\<pi> \\<bullet> e)", "unfolding Trivial_Aheap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (\\<Lambda> a.\n                        (\\<lambda>x. up\\<cdot>0) f|` domA \\<Gamma>) =\n    (\\<Lambda> a.\n        (\\<lambda>x. up\\<cdot>0) f|` domA (\\<pi> \\<bullet> \\<Gamma>))", "apply perm_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<pi> \\<bullet> Abs_cfun)\n     (\\<lambda>x.\n         (\\<lambda>x. up\\<cdot>0) f|` domA (\\<pi> \\<bullet> \\<Gamma>)) =\n    (\\<Lambda> a.\n        (\\<lambda>x. up\\<cdot>0) f|` domA (\\<pi> \\<bullet> \\<Gamma>))", "apply (simp add: Abs_cfun_eqvt)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Trivial_Aheap_simp: \"Trivial_Aheap \\<Gamma> e\\<cdot> a = (\\<lambda> x. up\\<cdot>0) f|` domA \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Trivial_Aheap \\<Gamma> e\\<cdot>a =\n    (\\<lambda>x. up\\<cdot>0) f|` domA \\<Gamma>", "unfolding Trivial_Aheap_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a. (\\<lambda>x. up\\<cdot>0) f|` domA \\<Gamma>)\\<cdot>a =\n    (\\<lambda>x. up\\<cdot>0) f|` domA \\<Gamma>", "by simp"], ["", "lemma Trivial_fup_Aexp_below_fv: \"fup\\<cdot>(Trivial_Aexp e)\\<cdot>a \\<sqsubseteq> (\\<lambda> x . up\\<cdot>0) f|` fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_bot_syn a e \\<sqsubseteq> (\\<lambda>x. up\\<cdot>0) f|` fv e", "by (cases a)(auto simp add: Trivial_Aexp_simp)"], ["", "lemma Trivial_Abinds_below_fv: \"ABinds \\<Gamma>\\<cdot>ae \\<sqsubseteq> (\\<lambda> x . up\\<cdot>0) f|` fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>ae \\<sqsubseteq>\n    (\\<lambda>x. up\\<cdot>0) f|` fv \\<Gamma>", "by (induction \\<Gamma> rule:ABinds.induct)\n     (auto simp add: join_below_iff intro!: below_trans[OF Trivial_fup_Aexp_below_fv] env_restr_mono2 elim: below_trans dest: subsetD[OF fv_delete_subset] simp del: fun_meet_simp)"], ["", "interpretation ArityAnalysisLetSafe Trivial_Aexp Trivial_Aheap"], ["proof (prove)\ngoal (1 subgoal):\n 1. ArityAnalysisLetSafe Trivial_Aexp Trivial_Aheap", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<pi>. \\<pi> \\<bullet> Trivial_Aheap = Trivial_Aheap\n 2. \\<And>\\<Gamma> e a.\n       edom (Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 3. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 4. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "fix \\<pi>"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<pi>. \\<pi> \\<bullet> Trivial_Aheap = Trivial_Aheap\n 2. \\<And>\\<Gamma> e a.\n       edom (Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 3. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 4. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "show \"\\<pi> \\<bullet> Trivial_Aheap = Trivial_Aheap\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> Trivial_Aheap = Trivial_Aheap", "by perm_simp rule"], ["proof (state)\nthis:\n  \\<pi> \\<bullet> Trivial_Aheap = Trivial_Aheap\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       edom (Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 2. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 3. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       edom (Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 2. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 3. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "fix \\<Gamma> e ae"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       edom (Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 2. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 3. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "show \"edom (Trivial_Aheap \\<Gamma> e\\<cdot>ae) \\<subseteq> domA \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (Trivial_Aheap \\<Gamma> e\\<cdot>ae) \\<subseteq> domA \\<Gamma>", "by (simp add: Trivial_Aheap_simp)"], ["proof (state)\nthis:\n  edom (Trivial_Aheap \\<Gamma> e\\<cdot>ae) \\<subseteq> domA \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "fix \\<Gamma> :: heap and e and a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn a e \\<sqsubseteq>\n       Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn a (Terms.Let \\<Gamma> e)", "show \"ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion> Trivial_Aexp e\\<cdot>a \\<sqsubseteq> Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion> Trivial_Aexp (Terms.Let \\<Gamma> e)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn a e \\<sqsubseteq>\n    Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n    Aexp_syn a (Terms.Let \\<Gamma> e)", "by (auto simp add: Trivial_Aheap_simp Trivial_Aexp_simp join_below_iff env_restr_join2 intro!: env_restr_mono2 below_trans[OF Trivial_Abinds_below_fv])"], ["proof (state)\nthis:\n  ABinds \\<Gamma>\\<cdot>(Trivial_Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n  Aexp_syn a e \\<sqsubseteq>\n  Trivial_Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n  Aexp_syn a (Terms.Let \\<Gamma> e)\n\ngoal (1 subgoal):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e", "fix x y :: var and \\<Gamma> :: heap and e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e", "assume \"x \\<notin> domA \\<Gamma>\" and \"y \\<notin> domA \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] =\n                         Trivial_Aheap \\<Gamma> e", "thus \"Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] = Trivial_Aheap \\<Gamma> e\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] = Trivial_Aheap \\<Gamma> e", "by (auto intro: cfun_eqI simp add: Trivial_Aheap_simp)"], ["proof (state)\nthis:\n  Trivial_Aheap \\<Gamma>[x::h=y] e[x::=y] = Trivial_Aheap \\<Gamma> e\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}