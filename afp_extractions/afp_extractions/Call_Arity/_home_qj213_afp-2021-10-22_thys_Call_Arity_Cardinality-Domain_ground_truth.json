{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/Cardinality-Domain.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma many_max[simp]: \"a \\<sqsubseteq> many\"", "lemma two_conj: \"c = many \\<or> c = once \\<or> c = none\"", "lemma two_cases[case_names many once none]:\n  obtains \"c = many\" | \"c = once\" | \"c = none\"", "lemma two_pred_simp: \"two_pred\\<cdot>c = (if c \\<sqsubseteq> once then \\<bottom> else c)\"", "lemma two_pred_simps[simp]:\n  \"two_pred\\<cdot>many = many\"\n  \"two_pred\\<cdot>once = none\"\n  \"two_pred\\<cdot>none = none\"", "lemma two_pred_below_arg: \"two_pred \\<cdot> f \\<sqsubseteq> f\"", "lemma two_pred_none: \"two_pred\\<cdot>c = none \\<longleftrightarrow> c \\<sqsubseteq> once\"", "lemma record_call_simp: \"(record_call x \\<cdot> f) x' = (if x = x' then two_pred \\<cdot> (f x') else f x')\"", "lemma record_call[simp]: \"(record_call x \\<cdot> f) x = two_pred \\<cdot> (f x)\"", "lemma record_call_other[simp]: \"x' \\<noteq> x \\<Longrightarrow> (record_call x \\<cdot> f) x' = f x'\"", "lemma record_call_below_arg: \"record_call x \\<cdot> f \\<sqsubseteq> f\"", "lemma two_add_simp: \"two_add\\<cdot>x\\<cdot>y = (if x \\<sqsubseteq> \\<bottom> then y else (if y \\<sqsubseteq> \\<bottom> then x else many))\"", "lemma two_pred_two_add_once: \"c \\<sqsubseteq> two_pred\\<cdot>(two_add\\<cdot>once\\<cdot>c)\""], "translations": [["", "lemma many_max[simp]: \"a \\<sqsubseteq> many\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sqsubseteq> many", "by (cases a) auto"], ["", "lemma two_conj: \"c = many \\<or> c = once \\<or> c = none\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c = many \\<or> c = once \\<or> c = none", "by (metis Exh_Up one_neq_iffs(1))"], ["", "lemma two_cases[case_names many once none]:\n  obtains \"c = many\" | \"c = once\" | \"c = none\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>c = many \\<Longrightarrow> thesis;\n     c = once \\<Longrightarrow> thesis;\n     c = none \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using two_conj"], ["proof (prove)\nusing this:\n  ?c = many \\<or> ?c = once \\<or> ?c = none\n\ngoal (1 subgoal):\n 1. \\<lbrakk>c = many \\<Longrightarrow> thesis;\n     c = once \\<Longrightarrow> thesis;\n     c = none \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by metis"], ["", "definition two_pred where \"two_pred = (\\<Lambda> x. if x \\<sqsubseteq> once then \\<bottom> else x)\""], ["", "lemma two_pred_simp: \"two_pred\\<cdot>c = (if c \\<sqsubseteq> once then \\<bottom> else c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_pred\\<cdot>c = (if c \\<sqsubseteq> once then none else c)", "unfolding two_pred_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x. if x \\<sqsubseteq> once then none else x)\\<cdot>c =\n    (if c \\<sqsubseteq> once then none else c)", "apply (rule beta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cont (\\<lambda>x. if x \\<sqsubseteq> once then none else x)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (5 subgoals):\n 1. cont (\\<lambda>x. none)\n 2. cont (\\<lambda>x. x)\n 3. \\<And>x. none \\<sqsubseteq> x\n 4. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> once\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> once\n 5. adm (\\<lambda>x. x \\<sqsubseteq> once)", "apply (auto elim: below_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma two_pred_simps[simp]:\n  \"two_pred\\<cdot>many = many\"\n  \"two_pred\\<cdot>once = none\"\n  \"two_pred\\<cdot>none = none\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_pred\\<cdot>many = many &&&\n    two_pred\\<cdot>once = none &&& two_pred\\<cdot>none = none", "by (simp_all add: two_pred_simp)"], ["", "lemma two_pred_below_arg: \"two_pred \\<cdot> f \\<sqsubseteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_pred\\<cdot>f \\<sqsubseteq> f", "by (auto simp add: two_pred_simp)"], ["", "lemma two_pred_none: \"two_pred\\<cdot>c = none \\<longleftrightarrow> c \\<sqsubseteq> once\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (two_pred\\<cdot>c = none) = (c \\<sqsubseteq> once)", "by (auto simp add: two_pred_simp)"], ["", "definition record_call where \"record_call x = (\\<Lambda> ce. (\\<lambda> y. if x = y then two_pred\\<cdot>(ce y) else ce y))\""], ["", "lemma record_call_simp: \"(record_call x \\<cdot> f) x' = (if x = x' then two_pred \\<cdot> (f x') else f x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (record_call x\\<cdot>f) x' =\n    (if x = x' then two_pred\\<cdot>(f x') else f x')", "unfolding record_call_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Lambda> ce.\n         (\\<lambda>y. if x = y then two_pred\\<cdot>(ce y) else ce y))\\<cdot>\n     f)\n     x' =\n    (if x = x' then two_pred\\<cdot>(f x') else f x')", "by auto"], ["", "lemma record_call[simp]: \"(record_call x \\<cdot> f) x = two_pred \\<cdot> (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (record_call x\\<cdot>f) x = two_pred\\<cdot>(f x)", "unfolding record_call_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if x = x then two_pred\\<cdot>(f x) else f x) = two_pred\\<cdot>(f x)", "by auto"], ["", "lemma record_call_other[simp]: \"x' \\<noteq> x \\<Longrightarrow> (record_call x \\<cdot> f) x' = f x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow> (record_call x\\<cdot>f) x' = f x'", "unfolding record_call_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<noteq> x \\<Longrightarrow>\n    (if x = x' then two_pred\\<cdot>(f x') else f x') = f x'", "by auto"], ["", "lemma record_call_below_arg: \"record_call x \\<cdot> f \\<sqsubseteq> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. record_call x\\<cdot>f \\<sqsubseteq> f", "unfolding record_call_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> ce.\n        (\\<lambda>y. if x = y then two_pred\\<cdot>(ce y) else ce y))\\<cdot>\n    f \\<sqsubseteq>\n    f", "by (auto intro!: fun_belowI two_pred_below_arg)"], ["", "definition two_add :: \"two \\<rightarrow> two \\<rightarrow> two\"\n  where \"two_add = (\\<Lambda> x. (\\<Lambda> y. if x \\<sqsubseteq> \\<bottom> then y else (if y \\<sqsubseteq> \\<bottom> then x else many)))\""], ["", "lemma two_add_simp: \"two_add\\<cdot>x\\<cdot>y = (if x \\<sqsubseteq> \\<bottom> then y else (if y \\<sqsubseteq> \\<bottom> then x else many))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. two_add\\<cdot>x\\<cdot>y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "unfolding two_add_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> x y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    x\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (subst beta_cfun)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cont\n     (\\<lambda>x.\n         \\<Lambda> y.\n            if x \\<sqsubseteq> none then y\n            else if y \\<sqsubseteq> none then x else many)\n 2. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (rule cont2cont)"], ["proof (prove)\ngoal (2 subgoals):\n 1. cont\n     (\\<lambda>p.\n         if fst p \\<sqsubseteq> none then snd p\n         else if snd p \\<sqsubseteq> none then fst p else many)\n 2. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (6 subgoals):\n 1. cont snd\n 2. cont (\\<lambda>x. if snd x \\<sqsubseteq> none then fst x else many)\n 3. \\<And>p.\n       snd p \\<sqsubseteq>\n       (if snd p \\<sqsubseteq> none then fst p else many)\n 4. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y; fst y \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> fst p \\<sqsubseteq> none\n 5. adm (\\<lambda>x. fst x \\<sqsubseteq> none)\n 6. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (auto elim: below_trans)[1]"], ["proof (prove)\ngoal (5 subgoals):\n 1. cont (\\<lambda>x. if snd x \\<sqsubseteq> none then fst x else many)\n 2. \\<And>p.\n       snd p \\<sqsubseteq>\n       (if snd p \\<sqsubseteq> none then fst p else many)\n 3. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y; fst y \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> fst p \\<sqsubseteq> none\n 4. adm (\\<lambda>x. fst x \\<sqsubseteq> none)\n 5. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (9 subgoals):\n 1. cont fst\n 2. cont (\\<lambda>x. many)\n 3. \\<And>x. fst x \\<sqsubseteq> many\n 4. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; snd y \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> snd x \\<sqsubseteq> none\n 5. adm (\\<lambda>x. snd x \\<sqsubseteq> none)\n 6. \\<And>p.\n       snd p \\<sqsubseteq>\n       (if snd p \\<sqsubseteq> none then fst p else many)\n 7. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y; fst y \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> fst p \\<sqsubseteq> none\n 8. adm (\\<lambda>x. fst x \\<sqsubseteq> none)\n 9. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (auto elim: below_trans)[8]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> y.\n        if x \\<sqsubseteq> none then y\n        else if y \\<sqsubseteq> none then x else many)\\<cdot>\n    y =\n    (if x \\<sqsubseteq> none then y\n     else if y \\<sqsubseteq> none then x else many)", "apply (rule beta_cfun)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cont\n     (\\<lambda>xa.\n         if x \\<sqsubseteq> none then xa\n         else if xa \\<sqsubseteq> none then x else many)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (5 subgoals):\n 1. cont (\\<lambda>x. x)\n 2. cont (\\<lambda>xa. if xa \\<sqsubseteq> none then x else many)\n 3. \\<And>xa. xa \\<sqsubseteq> (if xa \\<sqsubseteq> none then x else many)\n 4. \\<And>xa y.\n       \\<lbrakk>xa \\<sqsubseteq> y; x \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> none\n 5. adm (\\<lambda>xa. x \\<sqsubseteq> none)", "apply (auto elim: below_trans)[1]"], ["proof (prove)\ngoal (4 subgoals):\n 1. cont (\\<lambda>xa. if xa \\<sqsubseteq> none then x else many)\n 2. \\<And>xa. xa \\<sqsubseteq> (if xa \\<sqsubseteq> none then x else many)\n 3. \\<And>xa y.\n       \\<lbrakk>xa \\<sqsubseteq> y; x \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> none\n 4. adm (\\<lambda>xa. x \\<sqsubseteq> none)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (8 subgoals):\n 1. cont (\\<lambda>xa. x)\n 2. cont (\\<lambda>x. many)\n 3. \\<And>xa. x \\<sqsubseteq> many\n 4. \\<And>x y.\n       \\<lbrakk>x \\<sqsubseteq> y; y \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> none\n 5. adm (\\<lambda>x. x \\<sqsubseteq> none)\n 6. \\<And>xa. xa \\<sqsubseteq> (if xa \\<sqsubseteq> none then x else many)\n 7. \\<And>xa y.\n       \\<lbrakk>xa \\<sqsubseteq> y; x \\<sqsubseteq> none\\<rbrakk>\n       \\<Longrightarrow> x \\<sqsubseteq> none\n 8. adm (\\<lambda>xa. x \\<sqsubseteq> none)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma two_pred_two_add_once: \"c \\<sqsubseteq> two_pred\\<cdot>(two_add\\<cdot>once\\<cdot>c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sqsubseteq> two_pred\\<cdot>(two_add\\<cdot>once\\<cdot>c)", "by (cases c rule: two_cases) (auto simp add: two_add_simp)"], ["", "end"]]}