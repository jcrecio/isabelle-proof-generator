{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CallArityEnd2End.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma fresh_var_eqE[elim_format]: \"fresh_var e = x \\<Longrightarrow> x \\<notin>  fv e\"", "lemma example1:\n  fixes e :: exp\n  fixes f g x y z :: var\n  assumes Aexp_e: \"\\<And>a. Aexp e\\<cdot>a = esing x\\<cdot>(up\\<cdot>a) \\<squnion> esing y\\<cdot>(up\\<cdot>a)\"\n  assumes ccExp_e: \"\\<And>a. CCexp e\\<cdot>a = \\<bottom>\"\n  assumes [simp]: \"transform 1 e = e\"\n  assumes \"isVal e\"\n  assumes disj: \"y \\<noteq> f\" \"y \\<noteq> g\" \"x \\<noteq> y\" \"z \\<noteq> f\" \"z \\<noteq> g\" \"y \\<noteq> x\"\n  assumes fresh: \"atom z \\<sharp> e\"\n  shows \"transform 1 (let y be  App (Var f) g in (let x be e in (Var x))) = \n         let y be (Lam [z]. App (App (Var f) g) z) in (let x be (Lam [z]. App e z) in (Var x))\""], "translations": [["", "lemma fresh_var_eqE[elim_format]: \"fresh_var e = x \\<Longrightarrow> x \\<notin>  fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_var e = x \\<Longrightarrow> x \\<notin> fv e", "by (metis fresh_var_not_free)"], ["", "lemma example1:\n  fixes e :: exp\n  fixes f g x y z :: var\n  assumes Aexp_e: \"\\<And>a. Aexp e\\<cdot>a = esing x\\<cdot>(up\\<cdot>a) \\<squnion> esing y\\<cdot>(up\\<cdot>a)\"\n  assumes ccExp_e: \"\\<And>a. CCexp e\\<cdot>a = \\<bottom>\"\n  assumes [simp]: \"transform 1 e = e\"\n  assumes \"isVal e\"\n  assumes disj: \"y \\<noteq> f\" \"y \\<noteq> g\" \"x \\<noteq> y\" \"z \\<noteq> f\" \"z \\<noteq> g\" \"y \\<noteq> x\"\n  assumes fresh: \"atom z \\<sharp> e\"\n  shows \"transform 1 (let y be  App (Var f) g in (let x be e in (Var x))) = \n         let y be (Lam [z]. App (App (Var f) g) z) in (let x be (Lam [z]. App e z) in (Var x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "from arg_cong[where f = edom, OF Aexp_e]"], ["proof (chain)\npicking this:\n  edom (Aexp_syn' ?a2 e) =\n  edom\n   (esing x\\<cdot>(up\\<cdot>?a2) \\<squnion> esing y\\<cdot>(up\\<cdot>?a2))", "have \"x \\<in> fv e\""], ["proof (prove)\nusing this:\n  edom (Aexp_syn' ?a2 e) =\n  edom\n   (esing x\\<cdot>(up\\<cdot>?a2) \\<squnion> esing y\\<cdot>(up\\<cdot>?a2))\n\ngoal (1 subgoal):\n 1. x \\<in> fv e", "by simp (metis Aexp_edom' insert_subset)"], ["proof (state)\nthis:\n  x \\<in> fv e\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "hence [simp]: \"\\<not> nonrec [(x,e)]\""], ["proof (prove)\nusing this:\n  x \\<in> fv e\n\ngoal (1 subgoal):\n 1. \\<not> nonrec [(x, e)]", "by (simp add: nonrec_def)"], ["proof (state)\nthis:\n  \\<not> nonrec [(x, e)]\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "from \\<open>isVal e\\<close>"], ["proof (chain)\npicking this:\n  isVal e", "have [simp]: \"thunks [(x, e)] = {}\""], ["proof (prove)\nusing this:\n  isVal e\n\ngoal (1 subgoal):\n 1. thunks [(x, e)] = {}", "by (simp add: thunks_Cons)"], ["proof (state)\nthis:\n  thunks [(x, e)] = {}\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"CCfix [(x, e)]\\<cdot>(esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1), \\<bottom>) = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix [(x, e)]\\<cdot>\n    (esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1),\n     \\<bottom>) =\n    \\<bottom>", "unfolding CCfix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> aeG.\n        \\<mu> xa.\n           ccBindsExtra [(x, e)]\\<cdot>(fst aeG, xa) \\<squnion>\n           snd aeG)\\<cdot>\n    (esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1),\n     \\<bottom>) =\n    \\<bottom>", "apply (simp add: fix_bottom_iff ccBindsExtra_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBind x e\\<cdot>\n    (esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1),\n     \\<bottom>) =\n    \\<bottom>", "apply (simp add: ccBind_eq disj ccExp_e)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  CCfix [(x, e)]\\<cdot>\n  (esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1),\n   \\<bottom>) =\n  \\<bottom>\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"Afix [(x, e)]\\<cdot>(esing x\\<cdot>(up\\<cdot>1)) = esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix [(x, e)]\\<cdot>(esing x\\<cdot>(up\\<cdot>1)) =\n    esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)", "unfolding Afix_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> ae. \\<mu> xa. ABinds [(x, e)]\\<cdot>xa \\<squnion> ae)\\<cdot>\n    (esing x\\<cdot>(up\\<cdot>1)) =\n    esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<mu> xa.\n        esing x\\<cdot>(up\\<cdot>1) \\<squnion> Aexp_bot_syn' (xa x) e) =\n    esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)", "apply (rule fix_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<Lambda> xa.\n        esing x\\<cdot>(up\\<cdot>1) \\<squnion> Aexp_bot_syn' (xa x) e)\\<cdot>\n    (esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)) =\n    esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)\n 2. \\<And>z.\n       (\\<Lambda> xa.\n           esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n           Aexp_bot_syn' (xa x) e)\\<cdot>\n       z =\n       z \\<Longrightarrow>\n       esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n       esing y\\<cdot>(up\\<cdot>1) \\<sqsubseteq>\n       z", "apply (simp add: disj Aexp_e)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       (\\<Lambda> xa.\n           esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n           Aexp_bot_syn' (xa x) e)\\<cdot>\n       z =\n       z \\<Longrightarrow>\n       esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n       esing y\\<cdot>(up\\<cdot>1) \\<sqsubseteq>\n       z", "apply (case_tac \"z x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>z.\n       \\<lbrakk>(\\<Lambda> xa.\n                    esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n                    Aexp_bot_syn' (xa x) e)\\<cdot>\n                z =\n                z;\n        z x = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n                         esing y\\<cdot>(up\\<cdot>1) \\<sqsubseteq>\n                         z\n 2. \\<And>z xa.\n       \\<lbrakk>(\\<Lambda> xa.\n                    esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n                    Aexp_bot_syn' (xa x) e)\\<cdot>\n                z =\n                z;\n        z x = up\\<cdot>xa\\<rbrakk>\n       \\<Longrightarrow> esing x\\<cdot>(up\\<cdot>1) \\<squnion>\n                         esing y\\<cdot>(up\\<cdot>1) \\<sqsubseteq>\n                         z", "apply (auto simp add: disj Aexp_e)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Afix [(x, e)]\\<cdot>(esing x\\<cdot>(up\\<cdot>1)) =\n  esing x\\<cdot>(up\\<cdot>1) \\<squnion> esing y\\<cdot>(up\\<cdot>1)\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"Aheap [(y, App (Var f) g)] (let x be e in Var x)\\<cdot>1 = esing y\\<cdot>((Aexp (let x be e in Var x )\\<cdot>1) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap [(y, App (Var f) g)] (let x be e in Var x )\\<cdot>1 =\n    esing y\\<cdot>(Aexp_syn' 1 (let x be e in Var x ) y)", "by (auto simp add:  Aheap_nonrec_simp ABind_nonrec_eq pure_fresh fresh_at_base disj)"], ["proof (state)\nthis:\n  Aheap [(y, App (Var f) g)] (let x be e in Var x )\\<cdot>1 =\n  esing y\\<cdot>(Aexp_syn' 1 (let x be e in Var x ) y)\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"(Aexp (let x be e in Var x)\\<cdot>1) = esing y\\<cdot>(up\\<cdot>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn' 1 (let x be e in Var x ) = esing y\\<cdot>(up\\<cdot>1)", "by (simp add: env_restr_join disj)"], ["proof (state)\nthis:\n  Aexp_syn' 1 (let x be e in Var x ) = esing y\\<cdot>(up\\<cdot>1)\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"Aheap [(x, e)] (Var x)\\<cdot>1 = esing x\\<cdot>(up\\<cdot>1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap [(x, e)] (Var x)\\<cdot>1 = esing x\\<cdot>(up\\<cdot>1)", "by (simp add: env_restr_join disj)"], ["proof (state)\nthis:\n  Aheap [(x, e)] (Var x)\\<cdot>1 = esing x\\<cdot>(up\\<cdot>1)\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have 1: \"1 = inc\\<cdot>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 = inc\\<cdot>0", "apply (simp add: inc_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. inc_Arity 0 = 1", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc 0 = 1", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  1 = inc\\<cdot>0\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"Aeta_expand 1 (App (Var f) g) = (Lam [z]. App (App (Var f) g) z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aeta_expand 1 (App (Var f) g) = Lam [z]. App (App (Var f) g) z", "apply (simp add: 1 del: exp_assn.eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [fresh_var\n          (App (Var f)\n            g)]. App (App (Var f) g) (fresh_var (App (Var f) g)) =\n    Lam [z]. App (App (Var f) g) z", "apply (subst change_Lam_Variable[of z \"fresh_var (App (Var f) g)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. z \\<noteq> fresh_var (App (Var f) g) \\<Longrightarrow>\n    atom\n     z \\<sharp> (App (App (Var f) g) (fresh_var (App (Var f) g)),\n                 fresh_var (App (Var f) g))\n 2. Lam [z]. ((fresh_var\n                (App (Var f)\n                  g) \\<leftrightarrow> z) \\<bullet> App (App (Var f) g)\n               (fresh_var (App (Var f) g))) =\n    Lam [z]. App (App (Var f) g) z", "apply (auto simp add: fresh_Pair fresh_at_base pure_fresh disj intro!: flip_fresh_fresh  elim!: fresh_var_eqE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Aeta_expand 1 (App (Var f) g) = Lam [z]. App (App (Var f) g) z\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "have [simp]: \"Aeta_expand 1 e = (Lam [z]. App e z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aeta_expand 1 e = Lam [z]. App e z", "apply (simp add: 1 del: exp_assn.eq_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [fresh_var e]. App e (fresh_var e) = Lam [z]. App e z", "apply (subst change_Lam_Variable[of z \"fresh_var e\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. z \\<noteq> fresh_var e \\<Longrightarrow>\n    atom z \\<sharp> (App e (fresh_var e), fresh_var e)\n 2. Lam [z]. ((fresh_var\n                e \\<leftrightarrow> z) \\<bullet> App e (fresh_var e)) =\n    Lam [z]. App e z", "apply (auto simp add: fresh_Pair fresh_at_base pure_fresh disj fresh intro!: flip_fresh_fresh  elim!: fresh_var_eqE)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Aeta_expand 1 e = Lam [z]. App e z\n\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n    let y be Lam [z]. App (App (Var f) g)\n                       z in let x be Lam [z]. App e z in Var x", "by (simp del: Let_eq_iff add: map_transform_Cons map_transform_Nil disj[symmetric])"], ["proof (state)\nthis:\n  transform_syn 1 (let y be App (Var f) g in let x be e in Var x  ) =\n  let y be Lam [z]. App (App (Var f) g)\n                     z in let x be Lam [z]. App e z in Var x  \n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}