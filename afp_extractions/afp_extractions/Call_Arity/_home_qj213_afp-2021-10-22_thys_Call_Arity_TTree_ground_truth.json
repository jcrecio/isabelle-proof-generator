{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/TTree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma downsetE[elim]:\n  \"downset xss  \\<Longrightarrow> xs \\<in> xss \\<Longrightarrow> butlast xs \\<in> xss\"", "lemma downset_appendE[elim]:\n  \"downset xss \\<Longrightarrow> xs@ys \\<in> xss \\<Longrightarrow> xs \\<in> xss\"", "lemma downset_hdE[elim]:\n  \"downset xss \\<Longrightarrow> xs \\<in> xss \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> [hd xs] \\<in> xss\"", "lemma downsetI[intro]:\n  assumes \"\\<And> xs. xs \\<in> xss \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> butlast xs \\<in> xss\"\n  shows  \"downset xss\"", "lemma [simp]: \"downset {[]}\"", "lemma downset_mapI: \"downset xss \\<Longrightarrow> downset (map f ` xss)\"", "lemma downset_filter:\n  assumes \"downset xss\"\n  shows \"downset (filter P ` xss)\"", "lemma downset_set_subset:\n  \"downset ({xs. set xs \\<subseteq> S})\"", "lemma paths_inj: \"paths t = paths t' \\<Longrightarrow> t = t'\"", "lemma paths_injs_simps[simp]: \"paths t = paths t' \\<longleftrightarrow> t = t'\"", "lemma paths_Nil[simp]: \"[] \\<in> paths t\"", "lemma paths_not_empty[simp]: \"(paths t = {}) \\<longleftrightarrow> False\"", "lemma paths_Cons_nxt:\n  \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<Longrightarrow> (x#xs) \\<in> paths t\"", "lemma paths_Cons_nxt_iff:\n  \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<longleftrightarrow> (x#xs) \\<in> paths t\"", "lemma possible_mono:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> possible t x \\<Longrightarrow> possible t' x\"", "lemma nxt_mono:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (nxt t x) \\<subseteq> paths (nxt t' x)\"", "lemma ttree_eqI: \"(\\<And> x xs. x#xs \\<in> paths t \\<longleftrightarrow> x#xs \\<in> paths t') \\<Longrightarrow> t = t'\"", "lemma paths_nxt[elim]:\n assumes \"xs \\<in> paths (nxt t x)\"\n obtains \"x#xs \\<in> paths t\"  | \"xs = []\"", "lemma Cons_path: \"x # xs \\<in> paths t \\<longleftrightarrow> possible t x \\<and> xs \\<in> paths (nxt t x)\"", "lemma Cons_pathI[intro]:\n  assumes \"possible t x \\<longleftrightarrow> possible t' x\"\n  assumes \"possible t x \\<Longrightarrow> possible t' x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<longleftrightarrow> xs \\<in> paths (nxt t' x)\"\n  shows  \"x # xs \\<in> paths t \\<longleftrightarrow> x # xs \\<in> paths t'\"", "lemma paths_nxt_eq: \"xs \\<in> paths (nxt t x) \\<longleftrightarrow> xs = [] \\<or> x#xs \\<in> paths t\"", "lemma ttree_coinduct:\n  assumes \"P t t'\"\n  assumes \"\\<And> t t' x . P t t' \\<Longrightarrow> possible t x \\<longleftrightarrow> possible t' x\"\n  assumes \"\\<And> t t' x . P t t' \\<Longrightarrow> possible t x \\<Longrightarrow> possible t' x \\<Longrightarrow> P (nxt t x) (nxt t' x)\"\n  shows \"t = t'\"", "lemma carrier_mono: \"paths t \\<subseteq> paths t' \\<Longrightarrow> carrier t \\<subseteq> carrier t'\"", "lemma carrier_possible:\n  \"possible t x \\<Longrightarrow> x \\<in> carrier t\"", "lemma carrier_possible_subset:\n   \"carrier t \\<subseteq> A \\<Longrightarrow> possible t x \\<Longrightarrow> x \\<in> A\"", "lemma carrier_nxt_subset:\n  \"carrier (nxt t x) \\<subseteq> carrier t\"", "lemma Union_paths_carrier: \"(\\<Union>x\\<in>paths t. set x) = carrier t\"", "lemma nxt_repeatable[simp]: \"repeatable t \\<Longrightarrow> possible t x \\<Longrightarrow> nxt t x = t\"", "lemma possible_empty[simp]: \"possible empty x' \\<longleftrightarrow> False\"", "lemma nxt_not_possible[simp]: \"\\<not> possible t x \\<Longrightarrow> nxt t x = empty\"", "lemma paths_empty[simp]: \"paths empty = {[]}\"", "lemma carrier_empty[simp]: \"carrier empty = {}\"", "lemma repeatable_empty[simp]: \"repeatable empty\"", "lemma possible_single[simp]: \"possible (single x) x' \\<longleftrightarrow> x = x'\"", "lemma nxt_single[simp]: \"nxt (single x) x' =  empty\"", "lemma carrier_single[simp]: \"carrier (single y) = {y}\"", "lemma paths_single[simp]: \"paths (single x) = {[], [x]}\"", "lemma possible_many_calls[simp]: \"possible (many_calls x) x' \\<longleftrightarrow> x = x'\"", "lemma nxt_many_calls[simp]: \"nxt (many_calls x) x' = (if x' =  x then many_calls x else empty)\"", "lemma repeatable_many_calls: \"repeatable (many_calls x)\"", "lemma carrier_many_calls[simp]: \"carrier (many_calls x) = {x}\"", "lemma possible_anything[simp]: \"possible anything x' \\<longleftrightarrow> True\"", "lemma nxt_anything[simp]: \"nxt anything x = anything\"", "lemma paths_anything[simp]:\n  \"paths anything = UNIV\"", "lemma carrier_anything[simp]:\n  \"carrier anything = UNIV\"", "lemma carrier_many_among[simp]: \"carrier (many_among S) = S\"", "lemma paths_intersect[simp]: \"paths (t \\<inter>\\<inter> t') = paths t \\<inter> paths t'\"", "lemma carrier_intersect: \"carrier (t \\<inter>\\<inter> t') \\<subseteq> carrier t \\<inter> carrier t'\"", "lemma either_empty1[simp]: \"empty \\<oplus>\\<oplus> t = t\"", "lemma either_empty2[simp]: \"t \\<oplus>\\<oplus> empty = t\"", "lemma either_sym[simp]: \"t \\<oplus>\\<oplus> t2 = t2 \\<oplus>\\<oplus> t\"", "lemma either_idem[simp]: \"t \\<oplus>\\<oplus> t = t\"", "lemma possible_either[simp]: \"possible (t \\<oplus>\\<oplus> t') x \\<longleftrightarrow> possible t x \\<or> possible t' x\"", "lemma nxt_either[simp]: \"nxt (t \\<oplus>\\<oplus> t') x = nxt t x \\<oplus>\\<oplus> nxt t' x\"", "lemma paths_either[simp]: \"paths (t \\<oplus>\\<oplus> t') = paths t \\<union> paths t'\"", "lemma carrier_either[simp]:\n  \"carrier (t \\<oplus>\\<oplus> t') = carrier t \\<union> carrier t'\"", "lemma either_contains_arg1: \"paths t \\<subseteq> paths (t \\<oplus>\\<oplus> t')\"", "lemma either_contains_arg2: \"paths t' \\<subseteq> paths (t \\<oplus>\\<oplus> t')\"", "lemma paths_Either: \"paths (Either ts) = insert [] (\\<Union>(paths ` ts))\"", "lemma ex_ex_eq_hint: \"(\\<exists>x. (\\<exists>xs ys. x = f xs ys \\<and> P xs ys) \\<and> Q x) \\<longleftrightarrow> (\\<exists>xs ys. Q (f xs ys) \\<and> P xs ys)\"", "lemma both_assoc[simp]: \"t \\<otimes>\\<otimes> (t' \\<otimes>\\<otimes> t'') = (t \\<otimes>\\<otimes> t') \\<otimes>\\<otimes> t''\"", "lemma both_comm: \"t \\<otimes>\\<otimes> t' = t' \\<otimes>\\<otimes> t\"", "lemma both_empty1[simp]: \"empty \\<otimes>\\<otimes> t = t\"", "lemma both_empty2[simp]: \"t \\<otimes>\\<otimes> empty = t\"", "lemma paths_both: \"xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<longleftrightarrow> (\\<exists> ys \\<in> paths t. \\<exists> zs \\<in> paths t'. xs \\<in> ys \\<otimes> zs)\"", "lemma both_contains_arg1: \"paths t \\<subseteq> paths (t \\<otimes>\\<otimes> t')\"", "lemma both_contains_arg2: \"paths t' \\<subseteq> paths (t \\<otimes>\\<otimes> t')\"", "lemma both_mono1:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (t \\<otimes>\\<otimes> t'') \\<subseteq> paths (t' \\<otimes>\\<otimes> t'')\"", "lemma both_mono2:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (t'' \\<otimes>\\<otimes> t) \\<subseteq> paths (t'' \\<otimes>\\<otimes> t')\"", "lemma possible_both[simp]: \"possible (t \\<otimes>\\<otimes> t') x \\<longleftrightarrow> possible t x \\<or> possible t' x\"", "lemma nxt_both:\n    \"nxt (t' \\<otimes>\\<otimes> t) x = (if possible t' x \\<and> possible t x then nxt t' x \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t' \\<otimes>\\<otimes> nxt t x else\n                           if possible t' x then nxt t' x \\<otimes>\\<otimes> t else\n                           if possible t x then t' \\<otimes>\\<otimes> nxt t x else\n                           empty)\"", "lemma Cons_both:\n    \"x # xs \\<in> paths (t' \\<otimes>\\<otimes> t) \\<longleftrightarrow> (if possible t' x \\<and> possible t x then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t) \\<or> xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x) else\n                           if possible t' x then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t) else\n                           if possible t x then xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x) else\n                           False)\"", "lemma Cons_both_possible_leftE: \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x \\<otimes>\\<otimes> t') \\<Longrightarrow> x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\"", "lemma Cons_both_possible_rightE: \"possible t' x \\<Longrightarrow> xs \\<in> paths (t \\<otimes>\\<otimes> nxt t' x) \\<Longrightarrow> x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\"", "lemma either_both_distr[simp]:\n  \"t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t' \\<otimes>\\<otimes> t'' = t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> t'')\"", "lemma either_both_distr2[simp]:\n  \"t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t'' \\<otimes>\\<otimes> t = (t' \\<oplus>\\<oplus> t'') \\<otimes>\\<otimes> t\"", "lemma nxt_both_repeatable[simp]:\n  assumes [simp]: \"repeatable t'\"\n  assumes [simp]: \"possible t' x\"\n  shows \"nxt (t' \\<otimes>\\<otimes> t) x = t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> nxt t x)\"", "lemma nxt_both_many_calls[simp]: \"nxt (many_calls x \\<otimes>\\<otimes> t) x = many_calls x \\<otimes>\\<otimes> (t  \\<oplus>\\<oplus> nxt t x)\"", "lemma repeatable_both_self[simp]:\n  assumes [simp]: \"repeatable t\"\n  shows \"t \\<otimes>\\<otimes> t = t\"", "lemma repeatable_both_both[simp]:\n  assumes \"repeatable t\"\n  shows \"t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> t = t \\<otimes>\\<otimes> t'\"", "lemma repeatable_both_both2[simp]:\n  assumes \"repeatable t\"\n  shows \"t' \\<otimes>\\<otimes> t \\<otimes>\\<otimes> t = t' \\<otimes>\\<otimes> t\"", "lemma repeatable_both_nxt:\n  assumes \"repeatable t\"\n  assumes \"possible t' x\"\n  assumes \"t' \\<otimes>\\<otimes> t = t'\"\n  shows \"nxt t' x \\<otimes>\\<otimes> t = nxt t' x\"", "lemma repeatable_both_both_nxt:\n  assumes \"t' \\<otimes>\\<otimes> t = t'\"\n  shows \"t' \\<otimes>\\<otimes> t'' \\<otimes>\\<otimes> t = t' \\<otimes>\\<otimes> t''\"", "lemma carrier_both[simp]:\n  \"carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'\"", "lemma paths_withoutI:\n  assumes \"xs \\<in> paths t\"\n  assumes \"x \\<notin> set xs\"\n  shows \"xs \\<in> paths (without x t)\"", "lemma carrier_without[simp]: \"carrier (without x t) = carrier t - {x}\"", "lemma filter_paths_conv_free_restr:\n  \"filter (\\<lambda> x' . x' \\<in> S) ` paths t = paths (ttree_restr S t)\"", "lemma filter_paths_conv_free_restr2:\n  \"filter (\\<lambda> x' . x' \\<notin> S) ` paths t = paths (ttree_restr (- S) t)\"", "lemma filter_paths_conv_free_without:\n  \"filter (\\<lambda> x' . x' \\<noteq> y) ` paths t = paths (without y t)\"", "lemma ttree_restr_is_empty: \"carrier t \\<inter> S = {} \\<Longrightarrow> ttree_restr S t = empty\"", "lemma ttree_restr_noop: \"carrier t \\<subseteq> S \\<Longrightarrow> ttree_restr S t = t\"", "lemma ttree_restr_tree_restr[simp]:\n  \"ttree_restr S (ttree_restr S' t) = ttree_restr (S' \\<inter> S) t\"", "lemma ttree_restr_both:\n  \"ttree_restr S (t \\<otimes>\\<otimes> t') = ttree_restr S t \\<otimes>\\<otimes> ttree_restr S t'\"", "lemma ttree_restr_nxt_subset: \"x \\<in> S \\<Longrightarrow> paths (ttree_restr S (nxt t x)) \\<subseteq> paths (nxt (ttree_restr S t) x)\"", "lemma ttree_restr_nxt_subset2: \"x \\<notin> S \\<Longrightarrow> paths (ttree_restr S (nxt t x)) \\<subseteq> paths (ttree_restr S t)\"", "lemma ttree_restr_possible: \"x \\<in> S \\<Longrightarrow> possible t x \\<Longrightarrow> possible (ttree_restr S t) x\"", "lemma ttree_restr_possible2: \"possible (ttree_restr S t') x \\<Longrightarrow> x \\<in> S\"", "lemma carrier_ttree_restr[simp]:\n  \"carrier (ttree_restr S t) = S \\<inter> carrier t\"", "lemma possible_singles[simp]: \"possible (singles S) x\"", "lemma length_filter_mono[intro]:\n  assumes \"(\\<And> x. P x \\<Longrightarrow> Q x)\"\n  shows \"length (filter P xs) \\<le> length (filter Q xs)\"", "lemma nxt_singles[simp]: \"nxt (singles S) x' =  (if x' \\<in> S then without x' (singles S) else singles S)\"", "lemma carrier_singles[simp]:\n  \"carrier (singles S) = UNIV\"", "lemma singles_mono:\n  \"S \\<subseteq> S' \\<Longrightarrow> paths (singles S') \\<subseteq> paths (singles S)\"", "lemma paths_many_calls_subset:\n  \"paths t \\<subseteq> paths (many_calls x \\<otimes>\\<otimes> without x t)\"", "lemma f_nxt_mono1: \"(\\<And> x. paths (f x) \\<subseteq> paths (f' x)) \\<Longrightarrow> paths (f_nxt f T x x') \\<subseteq> paths (f_nxt f' T x x')\"", "lemma f_nxt_empty_set[simp]: \"f_nxt f {} x = f\"", "lemma downset_substitute: \"downset (Collect (substitute' f T t))\"", "lemma elim_substitute'[pred_set_conv]: \"substitute' f T t xs \\<longleftrightarrow> xs \\<in> paths (substitute f T t)\"", "lemmas substitute_induct[case_names Nil Cons] = substitute'.induct", "lemmas substitute_simps[simp] = substitute'.simps[unfolded elim_substitute']", "lemma substitute_mono2: \n  assumes \"paths t \\<subseteq> paths t'\"\n  shows \"paths (substitute f T t) \\<subseteq> paths (substitute f T t')\"", "lemma substitute_mono1: \n  assumes \"\\<And>x. paths (f x) \\<subseteq> paths (f' x)\"\n  shows \"paths (substitute f T t) \\<subseteq> paths (substitute f' T t)\"", "lemma substitute_monoT:\n  assumes \"T \\<subseteq> T'\"\n  shows \"paths (substitute f T' t) \\<subseteq> paths (substitute f T t)\"", "lemma substitute_contains_arg: \"paths t \\<subseteq> paths (substitute f T t)\"", "lemma possible_substitute[simp]: \"possible (substitute f T t) x \\<longleftrightarrow> possible t x\"", "lemma nxt_substitute[simp]: \"possible t x \\<Longrightarrow> nxt (substitute f T t) x = substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x)\"", "lemma substitute_either: \"substitute f T (t \\<oplus>\\<oplus> t') = substitute f T t \\<oplus>\\<oplus> substitute f T t'\"", "lemma f_nxt_T_delete:\n  assumes \"f x = empty\"\n  shows \"f_nxt f (T - {x}) x' = f_nxt f T x'\"", "lemma f_nxt_empty[simp]:\n  assumes \"f x = empty\"\n  shows \"f_nxt f T x' x = empty\"", "lemma f_nxt_empty'[simp]:\n  assumes \"f x = empty\"\n  shows \"f_nxt f T x = f\"", "lemma substitute_T_delete:\n  assumes \"f x = empty\"\n  shows \"substitute f (T - {x}) t = substitute f T t\"", "lemma substitute_only_empty:\n  assumes \"const_on f (carrier t) empty\"\n  shows \"substitute f T t = t\"", "lemma substitute_only_empty_both: \"const_on f (carrier t') empty \\<Longrightarrow> substitute f T (t \\<otimes>\\<otimes> t') = substitute f T t \\<otimes>\\<otimes> t'\"", "lemma f_nxt_upd_empty[simp]:\n  \"f_nxt (f(x' := empty)) T x = (f_nxt f T x)(x' := empty)\"", "lemma repeatable_f_nxt_upd[simp]:\n  \"repeatable (f x) \\<Longrightarrow> repeatable (f_nxt f T x' x)\"", "lemma substitute_remove_anyways_aux:\n  assumes \"repeatable (f x)\"\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"t \\<otimes>\\<otimes> f x = t\"\n  shows \"xs \\<in> paths (substitute (f(x := empty)) T t)\"", "lemma substitute_remove_anyways:\n  assumes \"repeatable t\"\n  assumes \"f x = t\"\n  shows \"substitute f T (t \\<otimes>\\<otimes> t') = substitute (f(x := empty)) T (t \\<otimes>\\<otimes> t')\"", "lemma carrier_f_nxt: \"carrier (f_nxt f T x x') \\<subseteq> carrier (f x')\"", "lemma f_nxt_cong: \"f x' = f' x' \\<Longrightarrow> f_nxt f T x x' = f_nxt f' T x x'\"", "lemma substitute_cong':\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"\\<And> x n. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows \"xs \\<in> paths (substitute f' T t)\"", "lemma substitute_cong_induct:\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows \"substitute f T t = substitute f' T t\"", "lemma carrier_substitute_aux:\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\" \n  shows   \"set xs \\<subseteq> A\"", "lemma carrier_substitute_below:\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  shows \"carrier (substitute f T t) \\<subseteq> A\"", "lemma f_nxt_eq_empty_iff:\n  \"f_nxt f T x x' = empty \\<longleftrightarrow> f x' = empty \\<or> (x' = x \\<and> x \\<in> T)\"", "lemma substitute_T_cong':\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"\\<And> x.  (x \\<in> T \\<longleftrightarrow> x \\<in> T') \\<or> f x = empty\"\n  shows \"xs \\<in> paths (substitute f T' t)\"", "lemma substitute_cong_T:\n  assumes \"\\<And> x.  (x \\<in> T \\<longleftrightarrow> x \\<in> T') \\<or> f x = empty\"\n  shows \"substitute f T = substitute f T'\"", "lemma carrier_substitute1: \"carrier t \\<subseteq> carrier (substitute f T t)\"", "lemma substitute_cong:\n  assumes \"\\<And> x. x \\<in> carrier (substitute f T t) \\<Longrightarrow> f x = f' x\"\n  shows \"substitute f T t = substitute f' T t\"", "lemma substitute_substitute:\n  assumes \"\\<And> x. const_on f' (carrier (f x)) empty\"\n  shows \"substitute f T (substitute f' T t) = substitute (\\<lambda> x. f x \\<otimes>\\<otimes> f' x) T t\"", "lemma ttree_rest_substitute:\n  assumes \"\\<And> x. carrier (f x) \\<inter> S = {}\"\n  shows \"ttree_restr S (substitute f T t) = ttree_restr S t\"", "lemma substitute_substitute'':\n  \"xs \\<in> paths (substitute f T t) \\<longleftrightarrow> (\\<exists> xs' \\<in> paths t. substitute'' f T xs' xs)\"", "lemma paths_substitute_substitute'':\n  \"paths (substitute f T t) = \\<Union>((\\<lambda> xs . Collect (substitute'' f T xs)) ` paths t)\"", "lemma ttree_rest_substitute2:\n  assumes \"\\<And> x. carrier (f x) \\<subseteq> S\"\n  assumes \"const_on f (-S) empty\"\n  shows \"ttree_restr S (substitute f T t) = substitute f T (ttree_restr S t)\""], "translations": [["", "lemma downsetE[elim]:\n  \"downset xss  \\<Longrightarrow> xs \\<in> xss \\<Longrightarrow> butlast xs \\<in> xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>downset xss; xs \\<in> xss\\<rbrakk>\n    \\<Longrightarrow> butlast xs \\<in> xss", "by (auto simp add: downset_def butlast_conv_take)"], ["", "lemma downset_appendE[elim]:\n  \"downset xss \\<Longrightarrow> xs@ys \\<in> xss \\<Longrightarrow> xs \\<in> xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>downset xss; xs @ ys \\<in> xss\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> xss", "by (auto simp add: downset_def) (metis append_eq_conv_conj)"], ["", "lemma downset_hdE[elim]:\n  \"downset xss \\<Longrightarrow> xs \\<in> xss \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> [hd xs] \\<in> xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>downset xss; xs \\<in> xss; xs \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> [hd xs] \\<in> xss", "by (auto simp add: downset_def) (metis take_0 take_Suc)"], ["", "lemma downsetI[intro]:\n  assumes \"\\<And> xs. xs \\<in> xss \\<Longrightarrow> xs \\<noteq> [] \\<Longrightarrow> butlast xs \\<in> xss\"\n  shows  \"downset xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset xss", "unfolding downset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x n. x \\<in> xss \\<longrightarrow> take n x \\<in> xss", "proof(intro impI allI )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n. x \\<in> xss \\<Longrightarrow> take n x \\<in> xss", "from assms"], ["proof (chain)\npicking this:\n  \\<lbrakk>?xs \\<in> xss; ?xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> butlast ?xs \\<in> xss", "have butlast: \"\\<And> xs. xs \\<in> xss \\<Longrightarrow> butlast xs \\<in> xss\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?xs \\<in> xss; ?xs \\<noteq> []\\<rbrakk>\n  \\<Longrightarrow> butlast ?xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>xs. xs \\<in> xss \\<Longrightarrow> butlast xs \\<in> xss", "by (metis butlast.simps(1))"], ["proof (state)\nthis:\n  ?xs \\<in> xss \\<Longrightarrow> butlast ?xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>x n. x \\<in> xss \\<Longrightarrow> take n x \\<in> xss", "fix xs n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x n. x \\<in> xss \\<Longrightarrow> take n x \\<in> xss", "assume \"xs \\<in> xss\""], ["proof (state)\nthis:\n  xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>x n. x \\<in> xss \\<Longrightarrow> take n x \\<in> xss", "show \"take n xs \\<in> xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n xs \\<in> xss", "proof(cases \"n \\<le> length xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss\n 2. \\<not> n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss", "case True"], ["proof (state)\nthis:\n  n \\<le> length xs\n\ngoal (2 subgoals):\n 1. n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss\n 2. \\<not> n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss", "from this"], ["proof (chain)\npicking this:\n  n \\<le> length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<le> length xs\n\ngoal (1 subgoal):\n 1. take n xs \\<in> xss", "proof(induction rule: inc_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. take (length xs) xs \\<in> xss\n 2. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < length xs;\n        take (Suc na) xs \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> take na xs \\<in> xss", "case base"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. take (length xs) xs \\<in> xss\n 2. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < length xs;\n        take (Suc na) xs \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> take na xs \\<in> xss", "with \\<open>xs \\<in> xss\\<close>"], ["proof (chain)\npicking this:\n  xs \\<in> xss", "show ?case"], ["proof (prove)\nusing this:\n  xs \\<in> xss\n\ngoal (1 subgoal):\n 1. take (length xs) xs \\<in> xss", "by simp"], ["proof (state)\nthis:\n  take (length xs) xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < length xs;\n        take (Suc na) xs \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> take na xs \\<in> xss", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < length xs;\n        take (Suc na) xs \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> take na xs \\<in> xss", "case (step n')"], ["proof (state)\nthis:\n  n \\<le> n'\n  n' < length xs\n  take (Suc n') xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>na.\n       \\<lbrakk>n \\<le> na; na < length xs;\n        take (Suc na) xs \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> take na xs \\<in> xss", "from butlast[OF step.IH] step(2)"], ["proof (chain)\npicking this:\n  butlast (take (Suc n') xs) \\<in> xss\n  n' < length xs", "show ?case"], ["proof (prove)\nusing this:\n  butlast (take (Suc n') xs) \\<in> xss\n  n' < length xs\n\ngoal (1 subgoal):\n 1. take n' xs \\<in> xss", "by (simp add: butlast_take)"], ["proof (state)\nthis:\n  take n' xs \\<in> xss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take n xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss", "case False"], ["proof (state)\nthis:\n  \\<not> n \\<le> length xs\n\ngoal (1 subgoal):\n 1. \\<not> n \\<le> length xs \\<Longrightarrow> take n xs \\<in> xss", "with \\<open>xs \\<in> xss\\<close>"], ["proof (chain)\npicking this:\n  xs \\<in> xss\n  \\<not> n \\<le> length xs", "show ?thesis"], ["proof (prove)\nusing this:\n  xs \\<in> xss\n  \\<not> n \\<le> length xs\n\ngoal (1 subgoal):\n 1. take n xs \\<in> xss", "by simp"], ["proof (state)\nthis:\n  take n xs \\<in> xss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  take n xs \\<in> xss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma [simp]: \"downset {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset {[]}", "by auto"], ["", "lemma downset_mapI: \"downset xss \\<Longrightarrow> downset (map f ` xss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset xss \\<Longrightarrow> downset (map f ` xss)", "by (fastforce simp add: map_butlast[symmetric])"], ["", "lemma downset_filter:\n  assumes \"downset xss\"\n  shows \"downset (filter P ` xss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset (filter P ` xss)", "proof(rule, elim imageE, clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>filter P x \\<noteq> []; x \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P x) \\<in> filter P ` xss", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>filter P x \\<noteq> []; x \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P x) \\<in> filter P ` xss", "assume \"xs \\<in> xss\""], ["proof (state)\nthis:\n  xs \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>filter P x \\<noteq> []; x \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P x) \\<in> filter P ` xss", "thus \"butlast (filter P xs) \\<in> filter P ` xss\""], ["proof (prove)\nusing this:\n  xs \\<in> xss\n\ngoal (1 subgoal):\n 1. butlast (filter P xs) \\<in> filter P ` xss", "proof (induction xs rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. [] \\<in> xss \\<Longrightarrow>\n    butlast (filter P []) \\<in> filter P ` xss\n 2. \\<And>x xs.\n       \\<lbrakk>xs \\<in> xss \\<Longrightarrow>\n                butlast (filter P xs) \\<in> filter P ` xss;\n        xs @ [x] \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P (xs @ [x])) \\<in> filter P ` xss", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> xss\n\ngoal (2 subgoals):\n 1. [] \\<in> xss \\<Longrightarrow>\n    butlast (filter P []) \\<in> filter P ` xss\n 2. \\<And>x xs.\n       \\<lbrakk>xs \\<in> xss \\<Longrightarrow>\n                butlast (filter P xs) \\<in> filter P ` xss;\n        xs @ [x] \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P (xs @ [x])) \\<in> filter P ` xss", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> xss\n\ngoal (1 subgoal):\n 1. butlast (filter P []) \\<in> filter P ` xss", "by force"], ["proof (state)\nthis:\n  butlast (filter P []) \\<in> filter P ` xss\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<in> xss \\<Longrightarrow>\n                butlast (filter P xs) \\<in> filter P ` xss;\n        xs @ [x] \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P (xs @ [x])) \\<in> filter P ` xss", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<in> xss \\<Longrightarrow>\n                butlast (filter P xs) \\<in> filter P ` xss;\n        xs @ [x] \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P (xs @ [x])) \\<in> filter P ` xss", "case snoc"], ["proof (state)\nthis:\n  xs_ \\<in> xss \\<Longrightarrow>\n  butlast (filter P xs_) \\<in> filter P ` xss\n  xs_ @ [x_] \\<in> xss\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>xs \\<in> xss \\<Longrightarrow>\n                butlast (filter P xs) \\<in> filter P ` xss;\n        xs @ [x] \\<in> xss\\<rbrakk>\n       \\<Longrightarrow> butlast (filter P (xs @ [x])) \\<in> filter P ` xss", "thus ?case"], ["proof (prove)\nusing this:\n  xs_ \\<in> xss \\<Longrightarrow>\n  butlast (filter P xs_) \\<in> filter P ` xss\n  xs_ @ [x_] \\<in> xss\n\ngoal (1 subgoal):\n 1. butlast (filter P (xs_ @ [x_])) \\<in> filter P ` xss", "using \\<open>downset xss\\<close>"], ["proof (prove)\nusing this:\n  xs_ \\<in> xss \\<Longrightarrow>\n  butlast (filter P xs_) \\<in> filter P ` xss\n  xs_ @ [x_] \\<in> xss\n  downset xss\n\ngoal (1 subgoal):\n 1. butlast (filter P (xs_ @ [x_])) \\<in> filter P ` xss", "by (auto intro: snoc.IH)"], ["proof (state)\nthis:\n  butlast (filter P (xs_ @ [x_])) \\<in> filter P ` xss\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  butlast (filter P xs) \\<in> filter P ` xss\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma downset_set_subset:\n  \"downset ({xs. set xs \\<subseteq> S})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset {xs. set xs \\<subseteq> S}", "by (auto dest: in_set_butlastD)"], ["", "subsubsection \\<open>The type of infinite labeled trees\\<close>"], ["", "typedef 'a ttree = \"{xss :: 'a list set . [] \\<in> xss \\<and> downset xss}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. x \\<in> {xss. [] \\<in> xss \\<and> downset xss}", "by auto"], ["", "setup_lifting type_definition_ttree"], ["", "subsubsection \\<open>Deconstructors\\<close>"], ["", "lift_definition possible ::\"'a ttree \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  is \"\\<lambda> xss x. \\<exists> xs. x#xs \\<in> xss\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lift_definition nxt ::\"'a ttree \\<Rightarrow> 'a \\<Rightarrow> 'a ttree\"\n  is \"\\<lambda> xss x. insert [] {xs | xs. x#xs \\<in> xss}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set a.\n       [] \\<in> set \\<and> downset set \\<Longrightarrow>\n       [] \\<in> insert [] {xs |xs. a # xs \\<in> set} \\<and>\n       downset (insert [] {xs |xs. a # xs \\<in> set})", "by (auto simp add: downset_def take_Suc_Cons[symmetric] simp del: take_Suc_Cons)"], ["", "subsubsection \\<open>Trees as set of paths\\<close>"], ["", "lift_definition paths :: \"'a ttree \\<Rightarrow> 'a list set\" is \"(\\<lambda> x. x)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma paths_inj: \"paths t = paths t' \\<Longrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t = paths t' \\<Longrightarrow> t = t'", "by transfer auto"], ["", "lemma paths_injs_simps[simp]: \"paths t = paths t' \\<longleftrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (paths t = paths t') = (t = t')", "by transfer auto"], ["", "lemma paths_Nil[simp]: \"[] \\<in> paths t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> paths t", "by transfer simp"], ["", "lemma paths_not_empty[simp]: \"(paths t = {}) \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (paths t = {}) = False", "by transfer auto"], ["", "lemma paths_Cons_nxt:\n  \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<Longrightarrow> (x#xs) \\<in> paths t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x; xs \\<in> paths (nxt t x)\\<rbrakk>\n    \\<Longrightarrow> x # xs \\<in> paths t", "by transfer auto"], ["", "lemma paths_Cons_nxt_iff:\n  \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<longleftrightarrow> (x#xs) \\<in> paths t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible t x \\<Longrightarrow>\n    (xs \\<in> paths (nxt t x)) = (x # xs \\<in> paths t)", "by transfer auto"], ["", "lemma possible_mono:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> possible t x \\<Longrightarrow> possible t' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>paths t \\<subseteq> paths t'; possible t x\\<rbrakk>\n    \\<Longrightarrow> possible t' x", "by transfer auto"], ["", "lemma nxt_mono:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (nxt t x) \\<subseteq> paths (nxt t' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths t' \\<Longrightarrow>\n    paths (nxt t x) \\<subseteq> paths (nxt t' x)", "by transfer auto"], ["", "lemma ttree_eqI: \"(\\<And> x xs. x#xs \\<in> paths t \\<longleftrightarrow> x#xs \\<in> paths t') \\<Longrightarrow> t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        (x # xs \\<in> paths t) = (x # xs \\<in> paths t')) \\<Longrightarrow>\n    t = t'", "apply (rule paths_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x xs.\n        (x # xs \\<in> paths t) = (x # xs \\<in> paths t')) \\<Longrightarrow>\n    paths t = paths t'", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<And>x xs.\n           (x # xs \\<in> paths t) =\n           (x # xs \\<in> paths t')) \\<Longrightarrow>\n       (x \\<in> paths t) = (x \\<in> paths t')", "apply (case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>x xs.\n                   (x # xs \\<in> paths t) = (x # xs \\<in> paths t');\n        x = []\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> paths t) = (x \\<in> paths t')\n 2. \\<And>x a list.\n       \\<lbrakk>\\<And>x xs.\n                   (x # xs \\<in> paths t) = (x # xs \\<in> paths t');\n        x = a # list\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> paths t) = (x \\<in> paths t')", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma paths_nxt[elim]:\n assumes \"xs \\<in> paths (nxt t x)\"\n obtains \"x#xs \\<in> paths t\"  | \"xs = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x # xs \\<in> paths t \\<Longrightarrow> thesis;\n     xs = [] \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (nxt t x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x # xs \\<in> paths t \\<Longrightarrow> thesis;\n     xs = [] \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by transfer auto"], ["", "lemma Cons_path: \"x # xs \\<in> paths t \\<longleftrightarrow> possible t x \\<and> xs \\<in> paths (nxt t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths t) = (possible t x \\<and> xs \\<in> paths (nxt t x))", "by transfer auto"], ["", "lemma Cons_pathI[intro]:\n  assumes \"possible t x \\<longleftrightarrow> possible t' x\"\n  assumes \"possible t x \\<Longrightarrow> possible t' x \\<Longrightarrow> xs \\<in> paths (nxt t x) \\<longleftrightarrow> xs \\<in> paths (nxt t' x)\"\n  shows  \"x # xs \\<in> paths t \\<longleftrightarrow> x # xs \\<in> paths t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths t) = (x # xs \\<in> paths t')", "using assms"], ["proof (prove)\nusing this:\n  possible t x = possible t' x\n  \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n  \\<Longrightarrow> (xs \\<in> paths (nxt t x)) = (xs \\<in> paths (nxt t' x))\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths t) = (x # xs \\<in> paths t')", "by (auto simp add: Cons_path)"], ["", "lemma paths_nxt_eq: \"xs \\<in> paths (nxt t x) \\<longleftrightarrow> xs = [] \\<or> x#xs \\<in> paths t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (nxt t x)) = (xs = [] \\<or> x # xs \\<in> paths t)", "by transfer auto"], ["", "lemma ttree_coinduct:\n  assumes \"P t t'\"\n  assumes \"\\<And> t t' x . P t t' \\<Longrightarrow> possible t x \\<longleftrightarrow> possible t' x\"\n  assumes \"\\<And> t t' x . P t t' \\<Longrightarrow> possible t x \\<Longrightarrow> possible t' x \\<Longrightarrow> P (nxt t x) (nxt t' x)\"\n  shows \"t = t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = t'", "proof(rule paths_inj, rule set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> paths t) = (x \\<in> paths t')", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> paths t) = (x \\<in> paths t')", "from assms(1)"], ["proof (chain)\npicking this:\n  P t t'", "show \"xs \\<in> paths t \\<longleftrightarrow> xs \\<in> paths t'\""], ["proof (prove)\nusing this:\n  P t t'\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths t) = (xs \\<in> paths t')", "proof (induction xs arbitrary: t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t t'.\n       P t t' \\<Longrightarrow> ([] \\<in> paths t) = ([] \\<in> paths t')\n 2. \\<And>a xs t t'.\n       \\<lbrakk>\\<And>t t'.\n                   P t t' \\<Longrightarrow>\n                   (xs \\<in> paths t) = (xs \\<in> paths t');\n        P t t'\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths t) = (a # xs \\<in> paths t')", "case Nil"], ["proof (state)\nthis:\n  P t t'\n\ngoal (2 subgoals):\n 1. \\<And>t t'.\n       P t t' \\<Longrightarrow> ([] \\<in> paths t) = ([] \\<in> paths t')\n 2. \\<And>a xs t t'.\n       \\<lbrakk>\\<And>t t'.\n                   P t t' \\<Longrightarrow>\n                   (xs \\<in> paths t) = (xs \\<in> paths t');\n        P t t'\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths t) = (a # xs \\<in> paths t')", "thus ?case"], ["proof (prove)\nusing this:\n  P t t'\n\ngoal (1 subgoal):\n 1. ([] \\<in> paths t) = ([] \\<in> paths t')", "by simp"], ["proof (state)\nthis:\n  ([] \\<in> paths t) = ([] \\<in> paths t')\n\ngoal (1 subgoal):\n 1. \\<And>a xs t t'.\n       \\<lbrakk>\\<And>t t'.\n                   P t t' \\<Longrightarrow>\n                   (xs \\<in> paths t) = (xs \\<in> paths t');\n        P t t'\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths t) = (a # xs \\<in> paths t')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs t t'.\n       \\<lbrakk>\\<And>t t'.\n                   P t t' \\<Longrightarrow>\n                   (xs \\<in> paths t) = (xs \\<in> paths t');\n        P t t'\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths t) = (a # xs \\<in> paths t')", "case (Cons x xs t t')"], ["proof (state)\nthis:\n  P ?t ?t' \\<Longrightarrow> (xs \\<in> paths ?t) = (xs \\<in> paths ?t')\n  P t t'\n\ngoal (1 subgoal):\n 1. \\<And>a xs t t'.\n       \\<lbrakk>\\<And>t t'.\n                   P t t' \\<Longrightarrow>\n                   (xs \\<in> paths t) = (xs \\<in> paths t');\n        P t t'\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths t) = (a # xs \\<in> paths t')", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths t) = (x # xs \\<in> paths t')", "proof (rule Cons_pathI)"], ["proof (state)\ngoal (2 subgoals):\n 1. possible t x = possible t' x\n 2. \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n    \\<Longrightarrow> (xs \\<in> paths (nxt t x)) =\n                      (xs \\<in> paths (nxt t' x))", "from \\<open>P t t'\\<close>"], ["proof (chain)\npicking this:\n  P t t'", "show \"possible t x \\<longleftrightarrow> possible t' x\""], ["proof (prove)\nusing this:\n  P t t'\n\ngoal (1 subgoal):\n 1. possible t x = possible t' x", "by (rule assms(2))"], ["proof (state)\nthis:\n  possible t x = possible t' x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n    \\<Longrightarrow> (xs \\<in> paths (nxt t x)) =\n                      (xs \\<in> paths (nxt t' x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n    \\<Longrightarrow> (xs \\<in> paths (nxt t x)) =\n                      (xs \\<in> paths (nxt t' x))", "assume \"possible t x\" and \"possible t' x\""], ["proof (state)\nthis:\n  possible t x\n  possible t' x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n    \\<Longrightarrow> (xs \\<in> paths (nxt t x)) =\n                      (xs \\<in> paths (nxt t' x))", "with \\<open>P t t'\\<close>"], ["proof (chain)\npicking this:\n  P t t'\n  possible t x\n  possible t' x", "have \"P (nxt t x) (nxt t' x)\""], ["proof (prove)\nusing this:\n  P t t'\n  possible t x\n  possible t' x\n\ngoal (1 subgoal):\n 1. P (nxt t x) (nxt t' x)", "by (rule assms(3))"], ["proof (state)\nthis:\n  P (nxt t x) (nxt t' x)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x; possible t' x\\<rbrakk>\n    \\<Longrightarrow> (xs \\<in> paths (nxt t x)) =\n                      (xs \\<in> paths (nxt t' x))", "thus \"xs \\<in> paths (nxt t x) \\<longleftrightarrow> xs \\<in> paths (nxt t' x)\""], ["proof (prove)\nusing this:\n  P (nxt t x) (nxt t' x)\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths (nxt t x)) = (xs \\<in> paths (nxt t' x))", "by (rule Cons.IH)"], ["proof (state)\nthis:\n  (xs \\<in> paths (nxt t x)) = (xs \\<in> paths (nxt t' x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x # xs \\<in> paths t) = (x # xs \\<in> paths t')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> paths t) = (xs \\<in> paths t')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>The carrier of a tree\\<close>"], ["", "lift_definition carrier :: \"'a ttree \\<Rightarrow> 'a set\" is \"\\<lambda> xss. \\<Union>(set ` xss)\""], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma carrier_mono: \"paths t \\<subseteq> paths t' \\<Longrightarrow> carrier t \\<subseteq> carrier t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths t' \\<Longrightarrow>\n    carrier t \\<subseteq> carrier t'", "by transfer auto"], ["", "lemma carrier_possible:\n  \"possible t x \\<Longrightarrow> x \\<in> carrier t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible t x \\<Longrightarrow> x \\<in> carrier t", "by transfer force"], ["", "lemma carrier_possible_subset:\n   \"carrier t \\<subseteq> A \\<Longrightarrow> possible t x \\<Longrightarrow> x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>carrier t \\<subseteq> A; possible t x\\<rbrakk>\n    \\<Longrightarrow> x \\<in> A", "by transfer force"], ["", "lemma carrier_nxt_subset:\n  \"carrier (nxt t x) \\<subseteq> carrier t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (nxt t x) \\<subseteq> carrier t", "by transfer auto"], ["", "lemma Union_paths_carrier: \"(\\<Union>x\\<in>paths t. set x) = carrier t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (set ` paths t) = carrier t", "by transfer auto"], ["", "subsubsection \\<open>Repeatable trees\\<close>"], ["", "definition repeatable where \"repeatable t = (\\<forall>x . possible t x \\<longrightarrow> nxt t x = t)\""], ["", "lemma nxt_repeatable[simp]: \"repeatable t \\<Longrightarrow> possible t x \\<Longrightarrow> nxt t x = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>repeatable t; possible t x\\<rbrakk>\n    \\<Longrightarrow> nxt t x = t", "unfolding repeatable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x. possible t x \\<longrightarrow> nxt t x = t;\n     possible t x\\<rbrakk>\n    \\<Longrightarrow> nxt t x = t", "by auto"], ["", "subsubsection \\<open>Simple trees\\<close>"], ["", "lift_definition empty :: \"'a ttree\" is \"{[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> {[]} \\<and> downset {[]}", "by auto"], ["", "lemma possible_empty[simp]: \"possible empty x' \\<longleftrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible TTree.empty x' = False", "by transfer auto"], ["", "lemma nxt_not_possible[simp]: \"\\<not> possible t x \\<Longrightarrow> nxt t x = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> possible t x \\<Longrightarrow> nxt t x = TTree.empty", "by transfer auto"], ["", "lemma paths_empty[simp]: \"paths empty = {[]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths TTree.empty = {[]}", "by transfer auto"], ["", "lemma carrier_empty[simp]: \"carrier empty = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier TTree.empty = {}", "by transfer auto"], ["", "lemma repeatable_empty[simp]: \"repeatable empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeatable TTree.empty", "unfolding repeatable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       possible TTree.empty x \\<longrightarrow>\n       nxt TTree.empty x = TTree.empty", "by transfer auto"], ["", "lift_definition single :: \"'a \\<Rightarrow> 'a ttree\" is \"\\<lambda> x. {[], [x]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. [] \\<in> {[], [a]} \\<and> downset {[], [a]}", "by auto"], ["", "lemma possible_single[simp]: \"possible (single x) x' \\<longleftrightarrow> x = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (single x) x' = (x = x')", "by transfer auto"], ["", "lemma nxt_single[simp]: \"nxt (single x) x' =  empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (single x) x' = TTree.empty", "by transfer auto"], ["", "lemma carrier_single[simp]: \"carrier (single y) = {y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (single y) = {y}", "by transfer auto"], ["", "lemma paths_single[simp]: \"paths (single x) = {[], [x]}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (single x) = {[], [x]}", "by transfer auto"], ["", "lift_definition many_calls :: \"'a \\<Rightarrow> 'a ttree\" is \"\\<lambda> x. range (\\<lambda> n. replicate n x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       [] \\<in> range (\\<lambda>n. replicate n a) \\<and>\n       downset (range (\\<lambda>n. replicate n a))", "by (auto simp add: downset_def)"], ["", "lemma possible_many_calls[simp]: \"possible (many_calls x) x' \\<longleftrightarrow> x = x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (many_calls x) x' = (x = x')", "by transfer (force simp add: Cons_replicate_eq)"], ["", "lemma nxt_many_calls[simp]: \"nxt (many_calls x) x' = (if x' =  x then many_calls x else empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (many_calls x) x' = (if x' = x then many_calls x else TTree.empty)", "by transfer (force simp add: Cons_replicate_eq)"], ["", "lemma repeatable_many_calls: \"repeatable (many_calls x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeatable (many_calls x)", "unfolding repeatable_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>xa.\n       possible (many_calls x) xa \\<longrightarrow>\n       nxt (many_calls x) xa = many_calls x", "by auto"], ["", "lemma carrier_many_calls[simp]: \"carrier (many_calls x) = {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (many_calls x) = {x}", "by transfer auto"], ["", "lift_definition anything :: \"'a ttree\" is \"UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> UNIV \\<and> downset UNIV", "by auto"], ["", "lemma possible_anything[simp]: \"possible anything x' \\<longleftrightarrow> True\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible anything x' = True", "by transfer auto"], ["", "lemma nxt_anything[simp]: \"nxt anything x = anything\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt anything x = anything", "by  transfer auto"], ["", "lemma paths_anything[simp]:\n  \"paths anything = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths anything = UNIV", "by transfer auto"], ["", "lemma carrier_anything[simp]:\n  \"carrier anything = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier anything = UNIV", "apply (auto simp add: Union_paths_carrier[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. \\<exists>xa. x \\<in> set xa", "apply (rule_tac x = \"[x]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set [x]", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lift_definition many_among :: \"'a set \\<Rightarrow> 'a ttree\" is \"\\<lambda> S. {xs . set xs \\<subseteq> S}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>seta.\n       [] \\<in> {xs. set xs \\<subseteq> seta} \\<and>\n       downset {xs. set xs \\<subseteq> seta}", "by (auto intro: downset_set_subset)"], ["", "lemma carrier_many_among[simp]: \"carrier (many_among S) = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (many_among S) = S", "by transfer (auto, metis List.set_insert bot.extremum insertCI insert_subset list.set(1))"], ["", "subsubsection \\<open>Intersection of two trees\\<close>"], ["", "lift_definition intersect :: \"'a ttree \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\" (infixl \"\\<inter>\\<inter>\" 80)\n  is \"(\\<inter>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set1 set2.\n       \\<lbrakk>[] \\<in> set1 \\<and> downset set1;\n        [] \\<in> set2 \\<and> downset set2\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> set1 \\<inter> set2 \\<and>\n                         downset (set1 \\<inter> set2)", "by (auto simp add: downset_def)"], ["", "lemma paths_intersect[simp]: \"paths (t \\<inter>\\<inter> t') = paths t \\<inter> paths t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (t \\<inter>\\<inter> t') = paths t \\<inter> paths t'", "by transfer auto"], ["", "lemma carrier_intersect: \"carrier (t \\<inter>\\<inter> t') \\<subseteq> carrier t \\<inter> carrier t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (t \\<inter>\\<inter> t')\n    \\<subseteq> carrier t \\<inter> carrier t'", "unfolding Union_paths_carrier[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (set ` paths (t \\<inter>\\<inter> t'))\n    \\<subseteq> \\<Union> (set ` paths t) \\<inter> \\<Union> (set ` paths t')", "by auto"], ["", "subsubsection \\<open>Disjoint union of trees\\<close>"], ["", "lift_definition either :: \"'a ttree \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\" (infixl \"\\<oplus>\\<oplus>\" 80)\n  is \"(\\<union>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set1 set2.\n       \\<lbrakk>[] \\<in> set1 \\<and> downset set1;\n        [] \\<in> set2 \\<and> downset set2\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> set1 \\<union> set2 \\<and>\n                         downset (set1 \\<union> set2)", "by (auto simp add: downset_def)"], ["", "lemma either_empty1[simp]: \"empty \\<oplus>\\<oplus> t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TTree.empty \\<oplus>\\<oplus> t = t", "by transfer auto"], ["", "lemma either_empty2[simp]: \"t \\<oplus>\\<oplus> empty = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus>\\<oplus> TTree.empty = t", "by transfer auto"], ["", "lemma either_sym[simp]: \"t \\<oplus>\\<oplus> t2 = t2 \\<oplus>\\<oplus> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus>\\<oplus> t2 = t2 \\<oplus>\\<oplus> t", "by transfer auto"], ["", "lemma either_idem[simp]: \"t \\<oplus>\\<oplus> t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<oplus>\\<oplus> t = t", "by transfer auto"], ["", "lemma possible_either[simp]: \"possible (t \\<oplus>\\<oplus> t') x \\<longleftrightarrow> possible t x \\<or> possible t' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (t \\<oplus>\\<oplus> t') x = (possible t x \\<or> possible t' x)", "by transfer auto"], ["", "lemma nxt_either[simp]: \"nxt (t \\<oplus>\\<oplus> t') x = nxt t x \\<oplus>\\<oplus> nxt t' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (t \\<oplus>\\<oplus> t') x = nxt t x \\<oplus>\\<oplus> nxt t' x", "by transfer auto"], ["", "lemma paths_either[simp]: \"paths (t \\<oplus>\\<oplus> t') = paths t \\<union> paths t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (t \\<oplus>\\<oplus> t') = paths t \\<union> paths t'", "by transfer simp"], ["", "lemma carrier_either[simp]:\n  \"carrier (t \\<oplus>\\<oplus> t') = carrier t \\<union> carrier t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (t \\<oplus>\\<oplus> t') = carrier t \\<union> carrier t'", "by transfer simp"], ["", "lemma either_contains_arg1: \"paths t \\<subseteq> paths (t \\<oplus>\\<oplus> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths (t \\<oplus>\\<oplus> t')", "by transfer fastforce"], ["", "lemma either_contains_arg2: \"paths t' \\<subseteq> paths (t \\<oplus>\\<oplus> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t' \\<subseteq> paths (t \\<oplus>\\<oplus> t')", "by transfer fastforce"], ["", "lift_definition Either :: \"'a ttree set \\<Rightarrow> 'a ttree\"  is \"\\<lambda> S. insert [] (\\<Union>S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set.\n       (\\<And>xss.\n           xss \\<in> set \\<Longrightarrow>\n           [] \\<in> xss \\<and> downset xss) \\<Longrightarrow>\n       [] \\<in> insert [] (\\<Union> set) \\<and>\n       downset (insert [] (\\<Union> set))", "by (auto simp add: downset_def)"], ["", "lemma paths_Either: \"paths (Either ts) = insert [] (\\<Union>(paths ` ts))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (Either ts) = insert [] (\\<Union> (paths ` ts))", "by transfer auto"], ["", "subsubsection \\<open>Merging of trees\\<close>"], ["", "lemma ex_ex_eq_hint: \"(\\<exists>x. (\\<exists>xs ys. x = f xs ys \\<and> P xs ys) \\<and> Q x) \\<longleftrightarrow> (\\<exists>xs ys. Q (f xs ys) \\<and> P xs ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>x. (\\<exists>xs ys. x = f xs ys \\<and> P xs ys) \\<and> Q x) =\n    (\\<exists>xs ys. Q (f xs ys) \\<and> P xs ys)", "by auto"], ["", "lift_definition both :: \"'a ttree \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\" (infixl \"\\<otimes>\\<otimes>\" 86)\n  is \"\\<lambda> xss yss . \\<Union> {xs \\<otimes> ys | xs ys. xs \\<in> xss \\<and> ys \\<in> yss}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set1 set2.\n       \\<lbrakk>[] \\<in> set1 \\<and> downset set1;\n        [] \\<in> set2 \\<and> downset set2\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> \\<Union>\n                                   {xs \\<otimes> ys |xs ys.\n                                    xs \\<in> set1 \\<and>\n                                    ys \\<in> set2} \\<and>\n                         downset\n                          (\\<Union>\n                            {xs \\<otimes> ys |xs ys.\n                             xs \\<in> set1 \\<and> ys \\<in> set2})", "by (force simp: ex_ex_eq_hint dest: interleave_butlast)"], ["", "lemma both_assoc[simp]: \"t \\<otimes>\\<otimes> (t' \\<otimes>\\<otimes> t'') = (t \\<otimes>\\<otimes> t') \\<otimes>\\<otimes> t''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> (t' \\<otimes>\\<otimes> t'') =\n    t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> t''", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t' t''.\n       \\<lbrakk>[] \\<in> t \\<and> downset t; [] \\<in> t' \\<and> downset t';\n        [] \\<in> t'' \\<and> downset t''\\<rbrakk>\n       \\<Longrightarrow> \\<Union>\n                          {xs \\<otimes> ys |xs ys.\n                           xs \\<in> t \\<and>\n                           ys \\<in> \\<Union>\n                                     {xs \\<otimes> ys |xs ys.\nxs \\<in> t' \\<and> ys \\<in> t''}} =\n                         \\<Union>\n                          {xs \\<otimes> ys |xs ys.\n                           xs \\<in> \\<Union>\n                                     {xs \\<otimes> ys |xs ys.\nxs \\<in> t \\<and> ys \\<in> t'} \\<and>\n                           ys \\<in> t''}", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t t' t'' x xs ys xsa ysa.\n       \\<lbrakk>[] \\<in> t; downset t; [] \\<in> t'; downset t';\n        [] \\<in> t''; downset t''; x \\<in> xs \\<otimes> ys; xs \\<in> t;\n        ys \\<in> xsa \\<otimes> ysa; xsa \\<in> t'; ysa \\<in> t''\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs ys.\n                                xa = xs \\<otimes> ys \\<and>\n                                (\\<exists>x.\n                                    (\\<exists>xs ys.\n  x = xs \\<otimes> ys \\<and> xs \\<in> t \\<and> ys \\<in> t') \\<and>\n                                    xs \\<in> x) \\<and>\n                                ys \\<in> t'') \\<and>\n                            x \\<in> xa\n 2. \\<And>t t' t'' x xs ys xsa ysa.\n       \\<lbrakk>[] \\<in> t; downset t; [] \\<in> t'; downset t';\n        [] \\<in> t''; downset t''; x \\<in> xs \\<otimes> ys; ys \\<in> t'';\n        xs \\<in> xsa \\<otimes> ysa; xsa \\<in> t; ysa \\<in> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs ys.\n                                xa = xs \\<otimes> ys \\<and>\n                                xs \\<in> t \\<and>\n                                (\\<exists>x.\n                                    (\\<exists>xs ys.\n  x = xs \\<otimes> ys \\<and> xs \\<in> t' \\<and> ys \\<in> t'') \\<and>\n                                    ys \\<in> x)) \\<and>\n                            x \\<in> xa", "apply (metis interleave_assoc2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t' t'' x xs ys xsa ysa.\n       \\<lbrakk>[] \\<in> t; downset t; [] \\<in> t'; downset t';\n        [] \\<in> t''; downset t''; x \\<in> xs \\<otimes> ys; ys \\<in> t'';\n        xs \\<in> xsa \\<otimes> ysa; xsa \\<in> t; ysa \\<in> t'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            (\\<exists>xs ys.\n                                xa = xs \\<otimes> ys \\<and>\n                                xs \\<in> t \\<and>\n                                (\\<exists>x.\n                                    (\\<exists>xs ys.\n  x = xs \\<otimes> ys \\<and> xs \\<in> t' \\<and> ys \\<in> t'') \\<and>\n                                    ys \\<in> x)) \\<and>\n                            x \\<in> xa", "apply (metis interleave_assoc1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma both_comm: \"t \\<otimes>\\<otimes> t' = t' \\<otimes>\\<otimes> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> t' = t' \\<otimes>\\<otimes> t", "by transfer (auto, (metis interleave_comm)+)"], ["", "lemma both_empty1[simp]: \"empty \\<otimes>\\<otimes> t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. TTree.empty \\<otimes>\\<otimes> t = t", "by transfer auto"], ["", "lemma both_empty2[simp]: \"t \\<otimes>\\<otimes> empty = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> TTree.empty = t", "by transfer auto"], ["", "lemma paths_both: \"xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<longleftrightarrow> (\\<exists> ys \\<in> paths t. \\<exists> zs \\<in> paths t'. xs \\<in> ys \\<otimes> zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (t \\<otimes>\\<otimes> t')) =\n    (\\<exists>ys\\<in>paths t.\n        \\<exists>zs\\<in>paths t'. xs \\<in> ys \\<otimes> zs)", "by transfer fastforce"], ["", "lemma both_contains_arg1: \"paths t \\<subseteq> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths (t \\<otimes>\\<otimes> t')", "by transfer fastforce"], ["", "lemma both_contains_arg2: \"paths t' \\<subseteq> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t' \\<subseteq> paths (t \\<otimes>\\<otimes> t')", "by transfer fastforce"], ["", "lemma both_mono1:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (t \\<otimes>\\<otimes> t'') \\<subseteq> paths (t' \\<otimes>\\<otimes> t'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths t' \\<Longrightarrow>\n    paths (t \\<otimes>\\<otimes> t'')\n    \\<subseteq> paths (t' \\<otimes>\\<otimes> t'')", "by transfer auto"], ["", "lemma both_mono2:\n  \"paths t \\<subseteq> paths t' \\<Longrightarrow> paths (t'' \\<otimes>\\<otimes> t) \\<subseteq> paths (t'' \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths t' \\<Longrightarrow>\n    paths (t'' \\<otimes>\\<otimes> t)\n    \\<subseteq> paths (t'' \\<otimes>\\<otimes> t')", "by transfer auto"], ["", "lemma possible_both[simp]: \"possible (t \\<otimes>\\<otimes> t') x \\<longleftrightarrow> possible t x \\<or> possible t' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (t \\<otimes>\\<otimes> t') x =\n    (possible t x \\<or> possible t' x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. possible (t \\<otimes>\\<otimes> t') x \\<Longrightarrow>\n    possible t x \\<or> possible t' x\n 2. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "assume \"possible (t \\<otimes>\\<otimes> t') x\""], ["proof (state)\nthis:\n  possible (t \\<otimes>\\<otimes> t') x\n\ngoal (2 subgoals):\n 1. possible (t \\<otimes>\\<otimes> t') x \\<Longrightarrow>\n    possible t x \\<or> possible t' x\n 2. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "then"], ["proof (chain)\npicking this:\n  possible (t \\<otimes>\\<otimes> t') x", "obtain xs where \"x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\nusing this:\n  possible (t \\<otimes>\\<otimes> t') x\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        x # xs \\<in> paths (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by transfer auto"], ["proof (state)\nthis:\n  x # xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (2 subgoals):\n 1. possible (t \\<otimes>\\<otimes> t') x \\<Longrightarrow>\n    possible t x \\<or> possible t' x\n 2. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "from \\<open>x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (t \\<otimes>\\<otimes> t')", "obtain ys zs where \"ys \\<in> paths t\" and \"zs \\<in> paths t'\" and \"x#xs \\<in> ys \\<otimes> zs\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>ys \\<in> paths t; zs \\<in> paths t';\n         x # xs \\<in> ys \\<otimes> zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by transfer auto"], ["proof (state)\nthis:\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  x # xs \\<in> ys \\<otimes> zs\n\ngoal (2 subgoals):\n 1. possible (t \\<otimes>\\<otimes> t') x \\<Longrightarrow>\n    possible t x \\<or> possible t' x\n 2. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "from \\<open>x#xs \\<in> ys \\<otimes> zs\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> ys \\<otimes> zs", "have \"ys \\<noteq> [] \\<and> hd ys = x  \\<or> zs \\<noteq> [] \\<and> hd zs = x\""], ["proof (prove)\nusing this:\n  x # xs \\<in> ys \\<otimes> zs\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<and> hd ys = x \\<or> zs \\<noteq> [] \\<and> hd zs = x", "by (auto elim: interleave_cases)"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<and> hd ys = x \\<or> zs \\<noteq> [] \\<and> hd zs = x\n\ngoal (2 subgoals):\n 1. possible (t \\<otimes>\\<otimes> t') x \\<Longrightarrow>\n    possible t x \\<or> possible t' x\n 2. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "thus \"possible t x \\<or> possible t' x\""], ["proof (prove)\nusing this:\n  ys \\<noteq> [] \\<and> hd ys = x \\<or> zs \\<noteq> [] \\<and> hd zs = x\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x", "using  \\<open>ys \\<in> paths t\\<close>   \\<open>zs \\<in> paths t'\\<close>"], ["proof (prove)\nusing this:\n  ys \\<noteq> [] \\<and> hd ys = x \\<or> zs \\<noteq> [] \\<and> hd zs = x\n  ys \\<in> paths t\n  zs \\<in> paths t'\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x", "by transfer auto"], ["proof (state)\nthis:\n  possible t x \\<or> possible t' x\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "assume \"possible t x \\<or> possible t' x\""], ["proof (state)\nthis:\n  possible t x \\<or> possible t' x\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "then"], ["proof (chain)\npicking this:\n  possible t x \\<or> possible t' x", "obtain xs where \"x#xs\\<in> paths t \\<or> x#xs\\<in> paths t'\""], ["proof (prove)\nusing this:\n  possible t x \\<or> possible t' x\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        x # xs \\<in> paths t \\<or> x # xs \\<in> paths t' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by transfer auto"], ["proof (state)\nthis:\n  x # xs \\<in> paths t \\<or> x # xs \\<in> paths t'\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "from this"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths t \\<or> x # xs \\<in> paths t'", "have \"x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths t \\<or> x # xs \\<in> paths t'\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (t \\<otimes>\\<otimes> t')", "by (auto dest: subsetD[OF both_contains_arg1]  subsetD[OF both_contains_arg2])"], ["proof (state)\nthis:\n  x # xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. possible t x \\<or> possible t' x \\<Longrightarrow>\n    possible (t \\<otimes>\\<otimes> t') x", "thus \"possible (t \\<otimes>\\<otimes> t') x\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. possible (t \\<otimes>\\<otimes> t') x", "by transfer auto"], ["proof (state)\nthis:\n  possible (t \\<otimes>\\<otimes> t') x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nxt_both:\n    \"nxt (t' \\<otimes>\\<otimes> t) x = (if possible t' x \\<and> possible t x then nxt t' x \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t' \\<otimes>\\<otimes> nxt t x else\n                           if possible t' x then nxt t' x \\<otimes>\\<otimes> t else\n                           if possible t x then t' \\<otimes>\\<otimes> nxt t x else\n                           empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (t' \\<otimes>\\<otimes> t) x =\n    (if possible t' x \\<and> possible t x\n     then nxt t' x \\<otimes>\\<otimes> t \\<oplus>\\<oplus>\n          t' \\<otimes>\\<otimes> nxt t x\n     else if possible t' x then nxt t' x \\<otimes>\\<otimes> t\n          else if possible t x then t' \\<otimes>\\<otimes> nxt t x\n               else TTree.empty)", "by (transfer, auto 4 4 intro: interleave_intros)"], ["", "lemma Cons_both:\n    \"x # xs \\<in> paths (t' \\<otimes>\\<otimes> t) \\<longleftrightarrow> (if possible t' x \\<and> possible t x then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t) \\<or> xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x) else\n                           if possible t' x then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t) else\n                           if possible t x then xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x) else\n                           False)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (t' \\<otimes>\\<otimes> t)) =\n    (if possible t' x \\<and> possible t x\n     then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t) \\<or>\n          xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x)\n     else if possible t' x\n          then xs \\<in> paths (nxt t' x \\<otimes>\\<otimes> t)\n          else if possible t x\n               then xs \\<in> paths (t' \\<otimes>\\<otimes> nxt t x)\n               else False)", "apply (auto simp add: paths_Cons_nxt_iff[symmetric] nxt_both)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> possible t x; \\<not> possible t' x;\n     x # xs \\<in> paths (t' \\<otimes>\\<otimes> t)\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis paths.rep_eq possible.rep_eq possible_both)"], ["", "lemma Cons_both_possible_leftE: \"possible t x \\<Longrightarrow> xs \\<in> paths (nxt t x \\<otimes>\\<otimes> t') \\<Longrightarrow> x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x;\n     xs \\<in> paths (nxt t x \\<otimes>\\<otimes> t')\\<rbrakk>\n    \\<Longrightarrow> x # xs \\<in> paths (t \\<otimes>\\<otimes> t')", "by (auto simp add: Cons_both)"], ["", "lemma Cons_both_possible_rightE: \"possible t' x \\<Longrightarrow> xs \\<in> paths (t \\<otimes>\\<otimes> nxt t' x) \\<Longrightarrow> x#xs \\<in> paths (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t' x;\n     xs \\<in> paths (t \\<otimes>\\<otimes> nxt t' x)\\<rbrakk>\n    \\<Longrightarrow> x # xs \\<in> paths (t \\<otimes>\\<otimes> t')", "by (auto simp add: Cons_both)"], ["", "lemma either_both_distr[simp]:\n  \"t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t' \\<otimes>\\<otimes> t'' = t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> t'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t' \\<otimes>\\<otimes> t'' =\n    t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> t'')", "by transfer auto"], ["", "lemma either_both_distr2[simp]:\n  \"t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t'' \\<otimes>\\<otimes> t = (t' \\<oplus>\\<oplus> t'') \\<otimes>\\<otimes> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<otimes>\\<otimes> t \\<oplus>\\<oplus> t'' \\<otimes>\\<otimes> t =\n    (t' \\<oplus>\\<oplus> t'') \\<otimes>\\<otimes> t", "by transfer auto"], ["", "lemma nxt_both_repeatable[simp]:\n  assumes [simp]: \"repeatable t'\"\n  assumes [simp]: \"possible t' x\"\n  shows \"nxt (t' \\<otimes>\\<otimes> t) x = t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> nxt t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (t' \\<otimes>\\<otimes> t) x =\n    t' \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> nxt t x)", "by (auto simp add: nxt_both)"], ["", "lemma nxt_both_many_calls[simp]: \"nxt (many_calls x \\<otimes>\\<otimes> t) x = many_calls x \\<otimes>\\<otimes> (t  \\<oplus>\\<oplus> nxt t x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (many_calls x \\<otimes>\\<otimes> t) x =\n    many_calls x \\<otimes>\\<otimes> (t \\<oplus>\\<oplus> nxt t x)", "by (simp add: repeatable_many_calls)"], ["", "lemma repeatable_both_self[simp]:\n  assumes [simp]: \"repeatable t\"\n  shows \"t \\<otimes>\\<otimes> t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> t = t", "apply (intro paths_inj set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> paths (t \\<otimes>\\<otimes> t)) = (x \\<in> paths t)", "apply (induct_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x. ([] \\<in> paths (t \\<otimes>\\<otimes> t)) = ([] \\<in> paths t)\n 2. \\<And>x a list.\n       (list \\<in> paths (t \\<otimes>\\<otimes> t)) =\n       (list \\<in> paths t) \\<Longrightarrow>\n       (a # list \\<in> paths (t \\<otimes>\\<otimes> t)) =\n       (a # list \\<in> paths t)", "apply (auto simp add: Cons_both paths_Cons_nxt_iff[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a list.\n       \\<lbrakk>\\<not> possible t a; a # list \\<in> paths t;\n        list \\<in> paths (t \\<otimes>\\<otimes> t);\n        list \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>a list.\n       \\<lbrakk>\\<not> possible t a; a # list \\<in> paths t;\n        list \\<notin> paths (t \\<otimes>\\<otimes> t);\n        list \\<notin> paths t\\<rbrakk>\n       \\<Longrightarrow> False", "apply (metis Cons_both both_empty1 possible_empty)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma repeatable_both_both[simp]:\n  assumes \"repeatable t\"\n  shows \"t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> t = t \\<otimes>\\<otimes> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> t = t \\<otimes>\\<otimes> t'", "by (metis repeatable_both_self[OF assms]  both_assoc both_comm)"], ["", "lemma repeatable_both_both2[simp]:\n  assumes \"repeatable t\"\n  shows \"t' \\<otimes>\\<otimes> t \\<otimes>\\<otimes> t = t' \\<otimes>\\<otimes> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<otimes>\\<otimes> t \\<otimes>\\<otimes> t = t' \\<otimes>\\<otimes> t", "by (metis repeatable_both_self[OF assms]  both_assoc both_comm)"], ["", "lemma repeatable_both_nxt:\n  assumes \"repeatable t\"\n  assumes \"possible t' x\"\n  assumes \"t' \\<otimes>\\<otimes> t = t'\"\n  shows \"nxt t' x \\<otimes>\\<otimes> t = nxt t' x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt t' x \\<otimes>\\<otimes> t = nxt t' x", "proof(rule classical)"], ["proof (state)\ngoal (1 subgoal):\n 1. nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x \\<Longrightarrow>\n    nxt t' x \\<otimes>\\<otimes> t = nxt t' x", "assume \"nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x\""], ["proof (state)\nthis:\n  nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x\n\ngoal (1 subgoal):\n 1. nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x \\<Longrightarrow>\n    nxt t' x \\<otimes>\\<otimes> t = nxt t' x", "hence \"(nxt t' x \\<oplus>\\<oplus> t') \\<otimes>\\<otimes> t \\<noteq> nxt t' x\""], ["proof (prove)\nusing this:\n  nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x\n\ngoal (1 subgoal):\n 1. (nxt t' x \\<oplus>\\<oplus> t') \\<otimes>\\<otimes> t \\<noteq> nxt t' x", "by (metis (no_types) assms(1) both_assoc repeatable_both_self)"], ["proof (state)\nthis:\n  (nxt t' x \\<oplus>\\<oplus> t') \\<otimes>\\<otimes> t \\<noteq> nxt t' x\n\ngoal (1 subgoal):\n 1. nxt t' x \\<otimes>\\<otimes> t \\<noteq> nxt t' x \\<Longrightarrow>\n    nxt t' x \\<otimes>\\<otimes> t = nxt t' x", "thus \"nxt t' x \\<otimes>\\<otimes> t = nxt t' x\""], ["proof (prove)\nusing this:\n  (nxt t' x \\<oplus>\\<oplus> t') \\<otimes>\\<otimes> t \\<noteq> nxt t' x\n\ngoal (1 subgoal):\n 1. nxt t' x \\<otimes>\\<otimes> t = nxt t' x", "by (metis (no_types) assms either_both_distr2 nxt_both nxt_repeatable)"], ["proof (state)\nthis:\n  nxt t' x \\<otimes>\\<otimes> t = nxt t' x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma repeatable_both_both_nxt:\n  assumes \"t' \\<otimes>\\<otimes> t = t'\"\n  shows \"t' \\<otimes>\\<otimes> t'' \\<otimes>\\<otimes> t = t' \\<otimes>\\<otimes> t''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<otimes>\\<otimes> t'' \\<otimes>\\<otimes> t =\n    t' \\<otimes>\\<otimes> t''", "by (metis assms both_assoc both_comm)"], ["", "lemma carrier_both[simp]:\n  \"carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "assume \"x \\<in> carrier (t \\<otimes>\\<otimes> t')\""], ["proof (state)\nthis:\n  x \\<in> carrier (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "then"], ["proof (chain)\npicking this:\n  x \\<in> carrier (t \\<otimes>\\<otimes> t')", "obtain xs where \"xs \\<in> paths (t \\<otimes>\\<otimes> t')\" and \"x \\<in> set xs\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>xs \\<in> paths (t \\<otimes>\\<otimes> t');\n         x \\<in> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by transfer auto"], ["proof (state)\nthis:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')\n  x \\<in> set xs", "obtain ys zs where \"ys \\<in> paths t\" and \"zs \\<in> paths t'\" and \"xs \\<in> interleave ys zs\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (t \\<otimes>\\<otimes> t')\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>ys zs.\n        \\<lbrakk>ys \\<in> paths t; zs \\<in> paths t';\n         xs \\<in> ys \\<otimes> zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: paths_both)"], ["proof (state)\nthis:\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  xs \\<in> ys \\<otimes> zs\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "from this(3)"], ["proof (chain)\npicking this:\n  xs \\<in> ys \\<otimes> zs", "have \"set xs = set ys \\<union> set zs\""], ["proof (prove)\nusing this:\n  xs \\<in> ys \\<otimes> zs\n\ngoal (1 subgoal):\n 1. set xs = set ys \\<union> set zs", "by (rule interleave_set)"], ["proof (state)\nthis:\n  set xs = set ys \\<union> set zs\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "with \\<open>ys \\<in> _\\<close> \\<open>zs \\<in> _\\<close> \\<open>x \\<in> set xs\\<close>"], ["proof (chain)\npicking this:\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  x \\<in> set xs\n  set xs = set ys \\<union> set zs", "have \"x \\<in> carrier t \\<union> carrier t'\""], ["proof (prove)\nusing this:\n  ys \\<in> paths t\n  zs \\<in> paths t'\n  x \\<in> set xs\n  set xs = set ys \\<union> set zs\n\ngoal (1 subgoal):\n 1. x \\<in> carrier t \\<union> carrier t'", "by transfer auto"], ["proof (state)\nthis:\n  x \\<in> carrier t \\<union> carrier t'\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> carrier (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n  ?x2 \\<in> carrier t \\<union> carrier t'\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> carrier (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n  ?x2 \\<in> carrier t \\<union> carrier t'\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "note subsetD[OF carrier_mono[OF both_contains_arg1[where t=t and t' = t']]]\n       subsetD[OF carrier_mono[OF both_contains_arg2[where t=t and t' = t']]]"], ["proof (state)\nthis:\n  ?c \\<in> carrier t \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')\n  ?c \\<in> carrier t' \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> carrier (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n  ?x2 \\<in> carrier t \\<union> carrier t'\n  ?c \\<in> carrier t \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')\n  ?c \\<in> carrier t' \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x2 \\<in> carrier (t \\<otimes>\\<otimes> t') \\<Longrightarrow>\n  ?x2 \\<in> carrier t \\<union> carrier t'\n  ?c \\<in> carrier t \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')\n  ?c \\<in> carrier t' \\<Longrightarrow>\n  ?c \\<in> carrier (t \\<otimes>\\<otimes> t')\n\ngoal (1 subgoal):\n 1. carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'", "by auto"], ["proof (state)\nthis:\n  carrier (t \\<otimes>\\<otimes> t') = carrier t \\<union> carrier t'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Removing elements from a tree\\<close>"], ["", "lift_definition without :: \"'a \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\"\n  is \"\\<lambda> x xss. filter (\\<lambda> x'. x' \\<noteq> x) ` xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a set.\n       [] \\<in> set \\<and> downset set \\<Longrightarrow>\n       [] \\<in> filter (\\<lambda>x'. x' \\<noteq> a) ` set \\<and>\n       downset (filter (\\<lambda>x'. x' \\<noteq> a) ` set)", "by (auto intro: downset_filter)(metis filter.simps(1) imageI)"], ["", "lemma paths_withoutI:\n  assumes \"xs \\<in> paths t\"\n  assumes \"x \\<notin> set xs\"\n  shows \"xs \\<in> paths (without x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x t)", "from assms(2)"], ["proof (chain)\npicking this:\n  x \\<notin> set xs", "have \"filter (\\<lambda> x'. x' \\<noteq> x) xs = xs\""], ["proof (prove)\nusing this:\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<noteq> x) xs = xs", "by (auto simp add: filter_id_conv)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<noteq> x) xs = xs\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x t)", "with assms(1)"], ["proof (chain)\npicking this:\n  xs \\<in> paths t\n  filter (\\<lambda>x'. x' \\<noteq> x) xs = xs", "have \"xs \\<in> filter (\\<lambda> x'. x' \\<noteq> x)` paths t\""], ["proof (prove)\nusing this:\n  xs \\<in> paths t\n  filter (\\<lambda>x'. x' \\<noteq> x) xs = xs\n\ngoal (1 subgoal):\n 1. xs \\<in> filter (\\<lambda>x'. x' \\<noteq> x) ` paths t", "by (metis imageI)"], ["proof (state)\nthis:\n  xs \\<in> filter (\\<lambda>x'. x' \\<noteq> x) ` paths t\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  xs \\<in> filter (\\<lambda>x'. x' \\<noteq> x) ` paths t\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (without x t)", "by transfer"], ["proof (state)\nthis:\n  xs \\<in> paths (without x t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma carrier_without[simp]: \"carrier (without x t) = carrier t - {x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (without x t) = carrier t - {x}", "by transfer auto"], ["", "lift_definition ttree_restr :: \"'a set \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\" is \"\\<lambda> S xss. filter (\\<lambda> x'. x' \\<in> S) ` xss\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set1 set2.\n       [] \\<in> set2 \\<and> downset set2 \\<Longrightarrow>\n       [] \\<in> filter (\\<lambda>x'. x' \\<in> set1) ` set2 \\<and>\n       downset (filter (\\<lambda>x'. x' \\<in> set1) ` set2)", "by (auto intro: downset_filter)(metis filter.simps(1) imageI)"], ["", "lemma filter_paths_conv_free_restr:\n  \"filter (\\<lambda> x' . x' \\<in> S) ` paths t = paths (ttree_restr S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) ` paths t = paths (ttree_restr S t)", "by transfer auto"], ["", "lemma filter_paths_conv_free_restr2:\n  \"filter (\\<lambda> x' . x' \\<notin> S) ` paths t = paths (ttree_restr (- S) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<notin> S) ` paths t =\n    paths (ttree_restr (- S) t)", "by transfer auto"], ["", "lemma filter_paths_conv_free_without:\n  \"filter (\\<lambda> x' . x' \\<noteq> y) ` paths t = paths (without y t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<noteq> y) ` paths t = paths (without y t)", "by transfer auto"], ["", "lemma ttree_restr_is_empty: \"carrier t \\<inter> S = {} \\<Longrightarrow> ttree_restr S t = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier t \\<inter> S = {} \\<Longrightarrow>\n    ttree_restr S t = TTree.empty", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S.\n       \\<lbrakk>[] \\<in> t \\<and> downset t;\n        \\<Union> (set ` t) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) ` t = {[]}", "apply (auto del: iffI )"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t S xa.\n       \\<lbrakk>\\<Union> (set ` t) \\<inter> S = {}; [] \\<in> t; downset t;\n        xa \\<in> t\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xa = []\n 2. \\<And>t S.\n       \\<lbrakk>\\<Union> (set ` t) \\<inter> S = {}; [] \\<in> t;\n        downset t\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> filter (\\<lambda>x'. x' \\<in> S) ` t", "apply (metis SUP_bot_conv(2) SUP_inf inf_commute inter_set_filter set_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S.\n       \\<lbrakk>\\<Union> (set ` t) \\<inter> S = {}; [] \\<in> t;\n        downset t\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> filter (\\<lambda>x'. x' \\<in> S) ` t", "apply force"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ttree_restr_noop: \"carrier t \\<subseteq> S \\<Longrightarrow> ttree_restr S t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier t \\<subseteq> S \\<Longrightarrow> ttree_restr S t = t", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S.\n       \\<lbrakk>[] \\<in> t \\<and> downset t;\n        \\<Union> (set ` t) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) ` t = t", "apply (auto simp add: image_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t S xa.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        xa \\<in> t\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xa \\<in> t\n 2. \\<And>t S x.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        x \\<in> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>t.\n                            x = filter (\\<lambda>x'. x' \\<in> S) xa", "apply (metis SUP_le_iff contra_subsetD filter_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S x.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        x \\<in> t\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa\\<in>t.\n                            x = filter (\\<lambda>x'. x' \\<in> S) xa", "apply (rule_tac x = x in bexI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>t S x.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        x \\<in> t\\<rbrakk>\n       \\<Longrightarrow> x = filter (\\<lambda>x'. x' \\<in> S) x\n 2. \\<And>t S x.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        x \\<in> t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> t", "apply (metis SUP_upper contra_subsetD filter_True)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t S x.\n       \\<lbrakk>\\<Union> (set ` t) \\<subseteq> S; [] \\<in> t; downset t;\n        x \\<in> t\\<rbrakk>\n       \\<Longrightarrow> x \\<in> t", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ttree_restr_tree_restr[simp]:\n  \"ttree_restr S (ttree_restr S' t) = ttree_restr (S' \\<inter> S) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr S (ttree_restr S' t) = ttree_restr (S' \\<inter> S) t", "by transfer (simp add: image_comp comp_def)"], ["", "lemma ttree_restr_both:\n  \"ttree_restr S (t \\<otimes>\\<otimes> t') = ttree_restr S t \\<otimes>\\<otimes> ttree_restr S t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr S (t \\<otimes>\\<otimes> t') =\n    ttree_restr S t \\<otimes>\\<otimes> ttree_restr S t'", "by (force simp add: paths_both filter_paths_conv_free_restr[symmetric] intro: paths_inj filter_interleave  elim: interleave_filter)"], ["", "lemma ttree_restr_nxt_subset: \"x \\<in> S \\<Longrightarrow> paths (ttree_restr S (nxt t x)) \\<subseteq> paths (nxt (ttree_restr S t) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow>\n    paths (ttree_restr S (nxt t x))\n    \\<subseteq> paths (nxt (ttree_restr S t) x)", "by transfer (force simp add: image_iff)"], ["", "lemma ttree_restr_nxt_subset2: \"x \\<notin> S \\<Longrightarrow> paths (ttree_restr S (nxt t x)) \\<subseteq> paths (ttree_restr S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    paths (ttree_restr S (nxt t x)) \\<subseteq> paths (ttree_restr S t)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x S t.\n       \\<lbrakk>x \\<notin> S; [] \\<in> t \\<and> downset t\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) `\n                         insert [] {xs |xs. x # xs \\<in> t}\n                         \\<subseteq> filter (\\<lambda>x'. x' \\<in> S) ` t", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x S t.\n       \\<lbrakk>x \\<notin> S; [] \\<in> t; downset t\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> filter (\\<lambda>x'. x' \\<in> S) ` t\n 2. \\<And>x S t xb.\n       \\<lbrakk>x \\<notin> S; [] \\<in> t; downset t; x # xb \\<in> t\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xb\n                         \\<in> filter (\\<lambda>x'. x' \\<in> S) ` t", "apply force"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x S t xb.\n       \\<lbrakk>x \\<notin> S; [] \\<in> t; downset t; x # xb \\<in> t\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xb\n                         \\<in> filter (\\<lambda>x'. x' \\<in> S) ` t", "by (metis filter.simps(2) imageI)"], ["", "lemma ttree_restr_possible: \"x \\<in> S \\<Longrightarrow> possible t x \\<Longrightarrow> possible (ttree_restr S t) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> S; possible t x\\<rbrakk>\n    \\<Longrightarrow> possible (ttree_restr S t) x", "by transfer force"], ["", "lemma ttree_restr_possible2: \"possible (ttree_restr S t') x \\<Longrightarrow> x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (ttree_restr S t') x \\<Longrightarrow> x \\<in> S", "by transfer (auto, metis filter_eq_Cons_iff)"], ["", "lemma carrier_ttree_restr[simp]:\n  \"carrier (ttree_restr S t) = S \\<inter> carrier t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (ttree_restr S t) = S \\<inter> carrier t", "by transfer auto"], ["", "(*\nlemma intersect_many_among: \"t \\<inter>\\<inter> many_among S = ttree_restr S t\"\n  apply transfer\n  apply auto\n*)"], ["", "subsubsection \\<open>Multiple variables, each called at most once\\<close>"], ["", "lift_definition singles :: \"'a set \\<Rightarrow> 'a ttree\" is \"\\<lambda> S. {xs. \\<forall> x \\<in> S. length (filter (\\<lambda> x'. x' = x) xs) \\<le> 1}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set.\n       [] \\<in> {xs.\n                 \\<forall>x\\<in>set.\n                    length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1} \\<and>\n       downset\n        {xs.\n         \\<forall>x\\<in>set.\n            length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set.\n       downset\n        {xs.\n         \\<forall>x\\<in>set.\n            length (filter (\\<lambda>x'. x' = x) xs) \\<le> Suc 0}", "apply (rule downsetI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set xs.\n       \\<lbrakk>xs \\<in> {xs.\n                          \\<forall>x\\<in>set.\n                             length (filter (\\<lambda>x'. x' = x) xs)\n                             \\<le> Suc 0};\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> butlast xs\n                         \\<in> {xs.\n                                \\<forall>x\\<in>set.\n                                   length (filter (\\<lambda>x'. x' = x) xs)\n                                   \\<le> Suc 0}", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set xs x.\n       \\<lbrakk>\\<forall>x\\<in>set.\n                   length (filter (\\<lambda>x'. x' = x) xs) \\<le> Suc 0;\n        xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) (butlast xs))\n                         \\<le> Suc 0", "apply (subst (asm) append_butlast_last_id[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>set xs x xa.\n       \\<lbrakk>xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' = xa) xs \\<noteq> []\n 2. \\<And>set xs x.\n       \\<lbrakk>\\<forall>x\\<in>set.\n                   length\n                    (butlast (filter (\\<lambda>x'. x' = x) xs) @\n                     [last (filter (\\<lambda>x'. x' = x) xs)])\n                   \\<le> Suc 0;\n        xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) (butlast xs))\n                         \\<le> Suc 0", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>set xs x.\n       \\<lbrakk>xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> xs \\<noteq> []\n 2. \\<And>set xs x.\n       \\<lbrakk>\\<forall>x\\<in>set.\n                   length\n                    (filter (\\<lambda>x'. x' = x) (butlast xs @ [last xs]))\n                   \\<le> Suc 0;\n        xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) (butlast xs))\n                         \\<le> Suc 0", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set xs x.\n       \\<lbrakk>\\<forall>x\\<in>set.\n                   length\n                    (filter (\\<lambda>x'. x' = x) (butlast xs @ [last xs]))\n                   \\<le> Suc 0;\n        xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) (butlast xs))\n                         \\<le> Suc 0", "apply (subst (asm) filter_append)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>set xs x.\n       \\<lbrakk>\\<forall>x\\<in>set.\n                   length\n                    (filter (\\<lambda>x'. x' = x) (butlast xs) @\n                     filter (\\<lambda>x'. x' = x) [last xs])\n                   \\<le> Suc 0;\n        xs \\<noteq> []; x \\<in> set\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>x'. x' = x) (butlast xs))\n                         \\<le> Suc 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma possible_singles[simp]: \"possible (singles S) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (singles S) x", "apply transfer'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x.\n       \\<exists>xs.\n          x # xs\n          \\<in> {xs.\n                 \\<forall>x\\<in>S.\n                    length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}", "apply (rule_tac x = \"[]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x.\n       [x]\n       \\<in> {xs.\n              \\<forall>x\\<in>S.\n                 length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma length_filter_mono[intro]:\n  assumes \"(\\<And> x. P x \\<Longrightarrow> Q x)\"\n  shows \"length (filter P xs) \\<le> length (filter Q xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (filter P xs) \\<le> length (filter Q xs)", "by (induction xs) (auto dest: assms)"], ["", "lemma nxt_singles[simp]: \"nxt (singles S) x' =  (if x' \\<in> S then without x' (singles S) else singles S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt (singles S) x' =\n    (if x' \\<in> S then without x' (singles S) else singles S)", "apply transfer'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x'.\n       insert []\n        {xs |xs.\n         x' # xs\n         \\<in> {xs.\n                \\<forall>x\\<in>S.\n                   length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}} =\n       (if x' \\<in> S\n        then filter (\\<lambda>x'a. x'a \\<noteq> x') `\n             {xs.\n              \\<forall>x\\<in>S.\n                 length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}\n        else {xs.\n              \\<forall>x\\<in>S.\n                 length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1})", "apply auto"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S x'.\n       x' \\<in> S \\<Longrightarrow>\n       [] \\<in> filter (\\<lambda>x'a. x'a \\<noteq> x') `\n                {xs.\n                 \\<forall>x\\<in>S.\n                    length (filter (\\<lambda>x'. x' = x) xs) \\<le> Suc 0}\n 2. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> filter (\\<lambda>x'a. x'a \\<noteq> x') `\n                                 {xs.\n                                  \\<forall>x\\<in>S.\n                                     length\n(filter (\\<lambda>x'. x' = x) xs)\n                                     \\<le> Suc 0}\n 3. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (rule rev_image_eqI[where x = \"[]\"], auto)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> filter (\\<lambda>x'a. x'a \\<noteq> x') `\n                                 {xs.\n                                  \\<forall>x\\<in>S.\n                                     length\n(filter (\\<lambda>x'. x' = x) xs)\n                                     \\<le> Suc 0}\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (rule_tac x = x in rev_image_eqI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {xs.\n                                  \\<forall>x\\<in>S.\n                                     length\n(filter (\\<lambda>x'. x' = x) xs)\n                                     \\<le> Suc 0}\n 2. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x = filter (\\<lambda>x'a. x'a \\<noteq> x') x\n 3. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (simp, rule ballI, erule_tac x = xa in ballE, auto)[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> x = filter (\\<lambda>x'a. x'a \\<noteq> x') x\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (rule sym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' x.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>xa\\<in>S.\n           (x' = xa \\<longrightarrow>\n            filter (\\<lambda>x'. x' = xa) x = []) \\<and>\n           (x' \\<noteq> xa \\<longrightarrow>\n            length (filter (\\<lambda>x'. x' = xa) x) \\<le> Suc 0)\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'a. x'a \\<noteq> x') x = x\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (simp add: filter_id_conv filter_empty_conv)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        \\<forall>x\\<in>S.\n           length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (erule_tac x = xb in ballE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb;\n        length (filter (\\<lambda>x'. x' = xb) xa) \\<le> Suc 0\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb; xb \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (erule order_trans[rotated])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> length (filter (\\<lambda>x'. x' = xb) xa)\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb; xb \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply (rule length_filter_mono)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>S x' xa xb x.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb; x \\<noteq> x' \\<and> x = xb\\<rbrakk>\n       \\<Longrightarrow> x = xb\n 2. \\<And>S x' xa xb.\n       \\<lbrakk>x' \\<in> S;\n        filter (\\<lambda>x'a. x'a \\<noteq> x') xa \\<noteq> []; xb \\<in> S;\n        x' \\<noteq> xb; xb \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> length\n                          (filter (\\<lambda>x. x \\<noteq> x' \\<and> x = xb)\n                            xa)\n                         \\<le> Suc 0", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carrier_singles[simp]:\n  \"carrier (singles S) = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (singles S) = UNIV", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<Union>\n        (set `\n         {xs.\n          \\<forall>x\\<in>S.\n             length (filter (\\<lambda>x'. x' = x) xs) \\<le> 1}) =\n       UNIV", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x.\n       \\<exists>xa.\n          (\\<forall>x\\<in>S.\n              length (filter (\\<lambda>x'. x' = x) xa) \\<le> Suc 0) \\<and>\n          x \\<in> set xa", "apply (rule_tac x = \"[x]\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>S x.\n       (\\<forall>xa\\<in>S.\n           length (filter (\\<lambda>x'. x' = xa) [x]) \\<le> Suc 0) \\<and>\n       x \\<in> set [x]", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma singles_mono:\n  \"S \\<subseteq> S' \\<Longrightarrow> paths (singles S') \\<subseteq> paths (singles S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> S' \\<Longrightarrow>\n    paths (singles S') \\<subseteq> paths (singles S)", "by transfer auto"], ["", "lemma paths_many_calls_subset:\n  \"paths t \\<subseteq> paths (many_calls x \\<otimes>\\<otimes> without x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths (many_calls x \\<otimes>\\<otimes> without x t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "assume \"xs \\<in> paths t\""], ["proof (state)\nthis:\n  xs \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "have \"filter (\\<lambda>x'. x' = x) xs = replicate (length (filter (\\<lambda>x'. x' = x) xs)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' = x) xs =\n    replicate (length (filter (\\<lambda>x'. x' = x) xs)) x", "by (induction xs) auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' = x) xs =\n  replicate (length (filter (\\<lambda>x'. x' = x) xs)) x\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "hence \"filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' = x) xs =\n  replicate (length (filter (\\<lambda>x'. x' = x) xs)) x\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)", "by transfer auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "moreover"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "from \\<open>xs \\<in> paths t\\<close>"], ["proof (chain)\npicking this:\n  xs \\<in> paths t", "have \"filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths t\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)", "by transfer auto"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "moreover"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "have \"xs \\<in> interleave (filter (\\<lambda>x'. x' = x) xs)  (filter (\\<lambda>x'. x' \\<noteq> x) xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> filter (\\<lambda>x'. x' = x) xs \\<otimes>\n             filter (\\<lambda>x'. x' \\<noteq> x) xs", "by (rule interleave_filtered)"], ["proof (state)\nthis:\n  xs \\<in> filter (\\<lambda>x'. x' = x) xs \\<otimes>\n           filter (\\<lambda>x'. x' \\<noteq> x) xs\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       xa \\<in> paths t \\<Longrightarrow>\n       xa \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "ultimately"], ["proof (chain)\npicking this:\n  filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)\n  filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)\n  xs \\<in> filter (\\<lambda>x'. x' = x) xs \\<otimes>\n           filter (\\<lambda>x'. x' \\<noteq> x) xs", "show \"xs \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' = x) xs \\<in> paths (many_calls x)\n  filter (\\<lambda>x'. x' \\<noteq> x) xs \\<in> paths (without x t)\n  xs \\<in> filter (\\<lambda>x'. x' = x) xs \\<otimes>\n           filter (\\<lambda>x'. x' \\<noteq> x) xs\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)", "by transfer auto"], ["proof (state)\nthis:\n  xs \\<in> paths (many_calls x \\<otimes>\\<otimes> without x t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Substituting trees for every node\\<close>"], ["", "definition f_nxt :: \"('a \\<Rightarrow> 'a ttree) \\<Rightarrow> 'a set \\<Rightarrow> 'a \\<Rightarrow> ('a \\<Rightarrow> 'a ttree)\"\n  where \"f_nxt f T x = (if x \\<in> T then f(x:=empty) else f)\""], ["", "fun substitute' :: \"('a \\<Rightarrow> 'a ttree) \\<Rightarrow> 'a set \\<Rightarrow> 'a ttree \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n    substitute'_Nil: \"substitute' f T t [] \\<longleftrightarrow> True\"\n  | substitute'_Cons: \"substitute' f T t (x#xs) \\<longleftrightarrow>\n        possible t x \\<and> substitute' (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x) xs\""], ["", "lemma f_nxt_mono1: \"(\\<And> x. paths (f x) \\<subseteq> paths (f' x)) \\<Longrightarrow> paths (f_nxt f T x x') \\<subseteq> paths (f_nxt f' T x x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. paths (f x) \\<subseteq> paths (f' x)) \\<Longrightarrow>\n    paths (f_nxt f T x x') \\<subseteq> paths (f_nxt f' T x x')", "unfolding f_nxt_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. paths (f x) \\<subseteq> paths (f' x)) \\<Longrightarrow>\n    paths ((if x \\<in> T then f(x := TTree.empty) else f) x')\n    \\<subseteq> paths ((if x \\<in> T then f'(x := TTree.empty) else f') x')", "by auto"], ["", "lemma f_nxt_empty_set[simp]: \"f_nxt f {} x = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f {} x = f", "by (simp add: f_nxt_def)"], ["", "lemma downset_substitute: \"downset (Collect (substitute' f T t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. downset (Collect (substitute' f T t))", "apply (rule)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<in> Collect (substitute' f T t);\n        xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> butlast xs \\<in> Collect (substitute' f T t)", "unfolding mem_Collect_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>substitute' f T t xs; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> substitute' f T t (butlast xs)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>substitute' f T t xs; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> substitute' f T t (butlast xs)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>substitute' f T t xs; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> substitute' f T t (butlast xs)", "assume \"substitute' f T t x\""], ["proof (state)\nthis:\n  substitute' f T t x\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>substitute' f T t xs; xs \\<noteq> []\\<rbrakk>\n       \\<Longrightarrow> substitute' f T t (butlast xs)", "thus \"substitute' f T t (butlast x)\""], ["proof (prove)\nusing this:\n  substitute' f T t x\n\ngoal (1 subgoal):\n 1. substitute' f T t (butlast x)", "by(induction t x rule: substitute'.induct) (auto)"], ["proof (state)\nthis:\n  substitute' f T t (butlast x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lift_definition substitute :: \"('a \\<Rightarrow> 'a ttree) \\<Rightarrow> 'a set \\<Rightarrow> 'a ttree \\<Rightarrow> 'a ttree\"\n  is \"\\<lambda> f T t. Collect (substitute' f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>fun set ttree.\n       [] \\<in> Collect (substitute' fun set ttree) \\<and>\n       downset (Collect (substitute' fun set ttree))", "by (simp add: downset_substitute)"], ["", "lemma elim_substitute'[pred_set_conv]: \"substitute' f T t xs \\<longleftrightarrow> xs \\<in> paths (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute' f T t xs = (xs \\<in> paths (substitute f T t))", "by transfer auto"], ["", "lemmas substitute_induct[case_names Nil Cons] = substitute'.induct"], ["", "lemmas substitute_simps[simp] = substitute'.simps[unfolded elim_substitute']"], ["", "lemma substitute_mono2: \n  assumes \"paths t \\<subseteq> paths t'\"\n  shows \"paths (substitute f T t) \\<subseteq> paths (substitute f T t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute f T t) \\<subseteq> paths (substitute f T t')", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t')", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t')", "assume \"xs \\<in> paths (substitute f T t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t')", "thus \"xs \\<in> paths (substitute f T t')\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T t')", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T t')", "proof(induction xs arbitrary:f t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f T t')\n 2. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    paths t \\<subseteq> paths t'\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f T t');\n        a # xs \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t')", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'\n\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f T t')\n 2. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    paths t \\<subseteq> paths t'\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f T t');\n        a # xs \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t')", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f T t')", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t')\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    paths t \\<subseteq> paths t'\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f T t');\n        a # xs \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    paths t \\<subseteq> paths t'\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f T t');\n        a # xs \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t')", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths (substitute ?f T ?t);\n   paths ?t \\<subseteq> paths ?t'\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths (substitute ?f T ?t')\n  x # xs \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    paths t \\<subseteq> paths t'\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f T t');\n        a # xs \\<in> paths (substitute f T t);\n        paths t \\<subseteq> paths t'\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t')", "from Cons.prems"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'", "show ?case"], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  paths t \\<subseteq> paths t'\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f T t')", "by (auto dest: possible_mono elim: Cons.IH intro!:  both_mono1 nxt_mono)"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f T t')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_mono1: \n  assumes \"\\<And>x. paths (f x) \\<subseteq> paths (f' x)\"\n  shows \"paths (substitute f T t) \\<subseteq> paths (substitute f' T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute f T t) \\<subseteq> paths (substitute f' T t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f' T t)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f' T t)", "assume \"xs \\<in> paths (substitute f T t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f' T t)", "from this assms"], ["proof (chain)\npicking this:\n  xs \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)", "show \"xs \\<in> paths (substitute f' T t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f' T t)", "proof (induction xs arbitrary: f f' t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f f' t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f' T t)\n 2. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f' T t);\n        a # xs \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f' T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)\n\ngoal (2 subgoals):\n 1. \\<And>f f' t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f' T t)\n 2. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f' T t);\n        a # xs \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f' T t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f' T t)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f' T t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f' T t);\n        a # xs \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f' T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f' T t);\n        a # xs \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f' T t)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths (substitute ?f T ?t);\n   \\<And>x. paths (?f x) \\<subseteq> paths (?f' x)\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths (substitute ?f' T ?t)\n  x # xs \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths (substitute f' T t);\n        a # xs \\<in> paths (substitute f T t);\n        \\<And>x. paths (f x) \\<subseteq> paths (f' x)\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f' T t)", "from Cons.prems"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)", "show ?case"], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  paths (f ?x) \\<subseteq> paths (f' ?x)\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f' T t)", "by (auto elim!: Cons.IH dest: subsetD dest!: subsetD[OF f_nxt_mono1[OF Cons.prems(2)]] subsetD[OF substitute_mono2[OF  both_mono2[OF Cons.prems(2)]]])"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f' T t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f' T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_monoT:\n  assumes \"T \\<subseteq> T'\"\n  shows \"paths (substitute f T' t) \\<subseteq> paths (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute f T' t) \\<subseteq> paths (substitute f T t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T' t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T' t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t)", "assume \"xs \\<in> paths (substitute f T' t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T' t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T' t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t)", "thus \"xs \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T' t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T t)", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T' t)\n  T \\<subseteq> T'\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T t)", "proof(induction f T' t xs arbitrary: T rule: substitute_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t Ta.\n       \\<lbrakk>[] \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f Ta t)\n 2. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  T \\<subseteq> T_\n\ngoal (2 subgoals):\n 1. \\<And>f T t Ta.\n       \\<lbrakk>[] \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f Ta t)\n 2. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  T \\<subseteq> T_\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f_ T t_)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T t_)\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "case (Cons f T' t x xs T)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T' x) T'\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   ?T \\<subseteq> T'\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute (f_nxt f T' x) ?T\n                                (nxt t x \\<otimes>\\<otimes> f x))\n  x # xs \\<in> paths (substitute f T' t)\n  T \\<subseteq> T'\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "from \\<open>x # xs \\<in> paths (substitute f T' t)\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T' t)", "have [simp]: \"possible t x\" and \"xs \\<in> paths (substitute (f_nxt f T' x) T' (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T' t)\n\ngoal (1 subgoal):\n 1. possible t x &&&\n    xs \\<in> paths\n              (substitute (f_nxt f T' x) T'\n                (nxt t x \\<otimes>\\<otimes> f x))", "by auto"], ["proof (state)\nthis:\n  possible t x\n  xs \\<in> paths\n            (substitute (f_nxt f T' x) T' (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "from Cons.IH[OF this(2) Cons.prems(2)]"], ["proof (chain)\npicking this:\n  xs \\<in> paths\n            (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))", "have \"xs \\<in> paths (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. xs \\<in> paths\n              (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))", "."], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "hence \"xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T' x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. xs \\<in> paths\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "by (rule subsetD[OF substitute_mono1, rotated])\n         (auto simp add: f_nxt_def subsetD[OF Cons.prems(2)])"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs Ta.\n       \\<lbrakk>\\<And>Ta.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    Ta \\<subseteq> T\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute (f_nxt f T x) Ta (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t); Ta \\<subseteq> T\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f Ta t)", "thus ?case"], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f T t)", "by auto"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_contains_arg: \"paths t \\<subseteq> paths (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths t \\<subseteq> paths (substitute f T t)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths t \\<Longrightarrow> x \\<in> paths (substitute f T t)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths t \\<Longrightarrow> x \\<in> paths (substitute f T t)", "show \"xs \\<in> paths t \\<Longrightarrow> xs \\<in> paths (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths t \\<Longrightarrow> xs \\<in> paths (substitute f T t)", "proof (induction xs arbitrary: f t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t.\n       [] \\<in> paths t \\<Longrightarrow> [] \\<in> paths (substitute f T t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths t\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       [] \\<in> paths t \\<Longrightarrow> [] \\<in> paths (substitute f T t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f T t)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "case (Cons x xs)"], ["proof (state)\nthis:\n  xs \\<in> paths ?t \\<Longrightarrow> xs \\<in> paths (substitute ?f T ?t)\n  x # xs \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "from \\<open>x # xs \\<in> paths t\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths t", "have \"possible t x\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths t\n\ngoal (1 subgoal):\n 1. possible t x", "by transfer auto"], ["proof (state)\nthis:\n  possible t x\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "moreover"], ["proof (state)\nthis:\n  possible t x\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "from \\<open>x # xs \\<in> paths t\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths t", "have \"xs \\<in> paths (nxt t x)\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths t\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (nxt t x)", "by (auto simp add: paths_nxt_eq)"], ["proof (state)\nthis:\n  xs \\<in> paths (nxt t x)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "hence \"xs \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (nxt t x)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)", "by (rule subsetD[OF both_contains_arg1])"], ["proof (state)\nthis:\n  xs \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "note Cons.IH[OF this]"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute ?f T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths t \\<Longrightarrow>\n                   xs \\<in> paths (substitute f T t);\n        a # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> a # xs \\<in> paths (substitute f T t)", "ultimately"], ["proof (chain)\npicking this:\n  possible t x\n  xs \\<in> paths (substitute ?f T (nxt t x \\<otimes>\\<otimes> f x))", "show ?case"], ["proof (prove)\nusing this:\n  possible t x\n  xs \\<in> paths (substitute ?f T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f T t)", "by simp"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths t \\<Longrightarrow> xs \\<in> paths (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma possible_substitute[simp]: \"possible (substitute f T t) x \\<longleftrightarrow> possible t x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible (substitute f T t) x = possible t x", "by (metis Cons_both both_empty2 paths_Nil substitute_simps(2))"], ["", "lemma nxt_substitute[simp]: \"possible t x \\<Longrightarrow> nxt (substitute f T t) x = substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible t x \\<Longrightarrow>\n    nxt (substitute f T t) x =\n    substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x)", "by (rule ttree_eqI) (simp add: paths_nxt_eq)"], ["", "lemma substitute_either: \"substitute f T (t \\<oplus>\\<oplus> t') = substitute f T t \\<oplus>\\<oplus> substitute f T t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "have [simp]: \"\\<And> t t' x . (nxt t x \\<oplus>\\<oplus> nxt t' x) \\<otimes>\\<otimes> f x = nxt t x \\<otimes>\\<otimes> f x \\<oplus>\\<oplus> nxt t' x \\<otimes>\\<otimes> f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t t' x.\n       (nxt t x \\<oplus>\\<oplus> nxt t' x) \\<otimes>\\<otimes> f x =\n       nxt t x \\<otimes>\\<otimes> f x \\<oplus>\\<oplus>\n       nxt t' x \\<otimes>\\<otimes> f x", "by (metis both_comm either_both_distr)"], ["proof (state)\nthis:\n  (nxt ?t ?x \\<oplus>\\<oplus> nxt ?t' ?x) \\<otimes>\\<otimes> f ?x =\n  nxt ?t ?x \\<otimes>\\<otimes> f ?x \\<oplus>\\<oplus>\n  nxt ?t' ?x \\<otimes>\\<otimes> f ?x\n\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "{"], ["proof (state)\nthis:\n  (nxt ?t ?x \\<oplus>\\<oplus> nxt ?t' ?x) \\<otimes>\\<otimes> f ?x =\n  nxt ?t ?x \\<otimes>\\<otimes> f ?x \\<oplus>\\<oplus>\n  nxt ?t' ?x \\<otimes>\\<otimes> f ?x\n\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "have \"xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))  \\<longleftrightarrow> xs \\<in> paths (substitute f T t) \\<or> xs \\<in> paths (substitute f T t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n    (xs \\<in> paths (substitute f T t) \\<or>\n     xs \\<in> paths (substitute f T t'))", "proof (induction xs arbitrary: f t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       ([] \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       ([] \\<in> paths (substitute f T t) \\<or>\n        [] \\<in> paths (substitute f T t'))\n 2. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       ([] \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       ([] \\<in> paths (substitute f T t) \\<or>\n        [] \\<in> paths (substitute f T t'))\n 2. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ([] \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n    ([] \\<in> paths (substitute f T t) \\<or>\n     [] \\<in> paths (substitute f T t'))", "by simp"], ["proof (state)\nthis:\n  ([] \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n  ([] \\<in> paths (substitute f T t) \\<or>\n   [] \\<in> paths (substitute f T t'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "case (Cons x xs)"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute ?f T (?t \\<oplus>\\<oplus> ?t'))) =\n  (xs \\<in> paths (substitute ?f T ?t) \\<or>\n   xs \\<in> paths (substitute ?f T ?t'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "note IH = Cons.IH[where f = \"f_nxt f T x\" and t = \"nxt t' x \\<otimes>\\<otimes> f x\" and t' = \"nxt t x \\<otimes>\\<otimes> f x\"]"], ["proof (state)\nthis:\n  (xs \\<in> paths\n             (substitute (f_nxt f T x) T\n               (nxt t' x \\<otimes>\\<otimes> f x \\<oplus>\\<oplus>\n                nxt t x \\<otimes>\\<otimes> f x))) =\n  (xs \\<in> paths\n             (substitute (f_nxt f T x) T\n               (nxt t' x \\<otimes>\\<otimes> f x)) \\<or>\n   xs \\<in> paths\n             (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x)))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       (\\<And>f t t'.\n           (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n           (xs \\<in> paths (substitute f T t) \\<or>\n            xs \\<in> paths (substitute f T t'))) \\<Longrightarrow>\n       (a # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n       (a # xs \\<in> paths (substitute f T t) \\<or>\n        a # xs \\<in> paths (substitute f T t'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n    (x # xs \\<in> paths (substitute f T t) \\<or>\n     x # xs \\<in> paths (substitute f T t'))", "apply (auto simp del: either_both_distr2 simp add: either_both_distr2[symmetric] IH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>possible t' x;\n     xs \\<in> paths\n               (substitute (f_nxt f T x) T\n                 (nxt t x \\<otimes>\\<otimes> f x));\n     xs \\<notin> paths\n                  (substitute (f_nxt f T x) T\n                    (nxt t' x \\<otimes>\\<otimes> f x))\\<rbrakk>\n    \\<Longrightarrow> possible t x\n 2. \\<lbrakk>possible t x;\n     xs \\<in> paths (substitute (f_nxt f T x) T (f x));\n     \\<not> possible t' x\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> paths\n                                (substitute (f_nxt f T x) T\n                                  (nxt t x \\<otimes>\\<otimes> f x))", "apply (metis IH both_comm either_both_distr either_empty2 nxt_not_possible)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>possible t x;\n     xs \\<in> paths (substitute (f_nxt f T x) T (f x));\n     \\<not> possible t' x\\<rbrakk>\n    \\<Longrightarrow> xs \\<in> paths\n                                (substitute (f_nxt f T x) T\n                                  (nxt t x \\<otimes>\\<otimes> f x))", "apply (metis IH both_comm both_empty1 either_both_distr either_empty1 nxt_not_possible)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n  (x # xs \\<in> paths (substitute f T t) \\<or>\n   x # xs \\<in> paths (substitute f T t'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n  (xs \\<in> paths (substitute f T t) \\<or>\n   xs \\<in> paths (substitute f T t'))\n\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "}"], ["proof (state)\nthis:\n  (?xs2 \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n  (?xs2 \\<in> paths (substitute f T t) \\<or>\n   ?xs2 \\<in> paths (substitute f T t'))\n\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (?xs2 \\<in> paths (substitute f T (t \\<oplus>\\<oplus> t'))) =\n  (?xs2 \\<in> paths (substitute f T t) \\<or>\n   ?xs2 \\<in> paths (substitute f T t'))\n\ngoal (1 subgoal):\n 1. substitute f T (t \\<oplus>\\<oplus> t') =\n    substitute f T t \\<oplus>\\<oplus> substitute f T t'", "by (auto intro: paths_inj)"], ["proof (state)\nthis:\n  substitute f T (t \\<oplus>\\<oplus> t') =\n  substitute f T t \\<oplus>\\<oplus> substitute f T t'\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma substitute_both: \"substitute f (t \\<otimes>\\<otimes> t') = substitute f t \\<otimes>\\<otimes> substitute f t'\"\nproof (intro paths_inj set_eqI)\n  fix xs\n  show \"(xs \\<in> paths (substitute f (t \\<otimes>\\<otimes> t'))) = (xs \\<in> paths (substitute f t \\<otimes>\\<otimes> substitute f t'))\"\n  proof (induction xs arbitrary: t t')\n  case Nil thus ?case by simp\n  next\n  case (Cons x xs)\n    have [simp]: \"nxt t x \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> t'\"\n      by (metis both_assoc both_comm)\n    have [simp]: \"t \\<otimes>\\<otimes> nxt t' x \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> (nxt t' x \\<otimes>\\<otimes> f x)\"\n      by (metis both_assoc both_comm)\n    note Cons[where t = \"nxt t x \\<otimes>\\<otimes> f x\" and t' = t', simp]\n    note Cons[where t = t and t' = \"nxt t' x \\<otimes>\\<otimes> f x\", simp]\n    show ?case\n      by (auto simp add: Cons_both nxt_both either_both_distr2[symmetric] substitute_either\n                  simp del: both_assoc )\n  qed\nqed\n*)"], ["", "lemma f_nxt_T_delete:\n  assumes \"f x = empty\"\n  shows \"f_nxt f (T - {x}) x' = f_nxt f T x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f (T - {x}) x' = f_nxt f T x'", "using assms"], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f (T - {x}) x' = f_nxt f T x'", "by (auto simp add: f_nxt_def)"], ["", "lemma f_nxt_empty[simp]:\n  assumes \"f x = empty\"\n  shows \"f_nxt f T x' x = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f T x' x = TTree.empty", "using assms"], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x' x = TTree.empty", "by (auto simp add: f_nxt_def)"], ["", "lemma f_nxt_empty'[simp]:\n  assumes \"f x = empty\"\n  shows \"f_nxt f T x = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f T x = f", "using assms"], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x = f", "by (auto simp add: f_nxt_def)"], ["", "lemma substitute_T_delete:\n  assumes \"f x = empty\"\n  shows \"substitute f (T - {x}) t = substitute f T t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f (T - {x}) t = substitute f T t", "proof (intro paths_inj  set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (xa \\<in> paths (substitute f (T - {x}) t)) =\n       (xa \\<in> paths (substitute f T t))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       (xa \\<in> paths (substitute f (T - {x}) t)) =\n       (xa \\<in> paths (substitute f T t))", "from assms"], ["proof (chain)\npicking this:\n  f x = TTree.empty", "show \"xs \\<in> paths (substitute f (T - {x}) t) \\<longleftrightarrow> xs \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f (T - {x}) t)) =\n    (xs \\<in> paths (substitute f T t))", "by (induction xs arbitrary: f t) (auto simp add: f_nxt_T_delete )"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f (T - {x}) t)) =\n  (xs \\<in> paths (substitute f T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_only_empty:\n  assumes \"const_on f (carrier t) empty\"\n  shows \"substitute f T t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T t = t", "proof (intro paths_inj  set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> paths (substitute f T t)) = (x \\<in> paths t)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. (x \\<in> paths (substitute f T t)) = (x \\<in> paths t)", "from assms"], ["proof (chain)\npicking this:\n  const_on f (carrier t) TTree.empty", "show \"xs \\<in> paths (substitute f T t) \\<longleftrightarrow> xs \\<in> paths t\""], ["proof (prove)\nusing this:\n  const_on f (carrier t) TTree.empty\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t)", "proof (induction xs arbitrary: f t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t.\n       const_on f (carrier t) TTree.empty \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T t)) = ([] \\<in> paths t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "case Nil"], ["proof (state)\nthis:\n  const_on f (carrier t) TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       const_on f (carrier t) TTree.empty \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T t)) = ([] \\<in> paths t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "thus ?case"], ["proof (prove)\nusing this:\n  const_on f (carrier t) TTree.empty\n\ngoal (1 subgoal):\n 1. ([] \\<in> paths (substitute f T t)) = ([] \\<in> paths t)", "by simp"], ["proof (state)\nthis:\n  ([] \\<in> paths (substitute f T t)) = ([] \\<in> paths t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "case (Cons x xs f t)"], ["proof (state)\nthis:\n  const_on ?f (carrier ?t) TTree.empty \\<Longrightarrow>\n  (xs \\<in> paths (substitute ?f T ?t)) = (xs \\<in> paths ?t)\n  const_on f (carrier t) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "note const_onD[OF Cons.prems carrier_possible, where y = x, simp]"], ["proof (state)\nthis:\n  possible t x \\<Longrightarrow> f x = TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "have [simp]: \"possible t x \\<Longrightarrow> f_nxt f T x = f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. possible t x \\<Longrightarrow> f_nxt f T x = f", "by (rule f_nxt_empty', rule const_onD[OF Cons.prems carrier_possible, where y = x])"], ["proof (state)\nthis:\n  possible t x \\<Longrightarrow> f_nxt f T x = f\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "from Cons.prems carrier_nxt_subset"], ["proof (chain)\npicking this:\n  const_on f (carrier t) TTree.empty\n  carrier (nxt ?t ?x) \\<subseteq> carrier ?t", "have \"const_on f (carrier (nxt t x)) empty\""], ["proof (prove)\nusing this:\n  const_on f (carrier t) TTree.empty\n  carrier (nxt ?t ?x) \\<subseteq> carrier ?t\n\ngoal (1 subgoal):\n 1. const_on f (carrier (nxt t x)) TTree.empty", "by (rule const_on_subset)"], ["proof (state)\nthis:\n  const_on f (carrier (nxt t x)) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "hence \"const_on (f_nxt f T x) (carrier (nxt t x)) empty\""], ["proof (prove)\nusing this:\n  const_on f (carrier (nxt t x)) TTree.empty\n\ngoal (1 subgoal):\n 1. const_on (f_nxt f T x) (carrier (nxt t x)) TTree.empty", "by (auto simp add: const_on_def f_nxt_def)"], ["proof (state)\nthis:\n  const_on (f_nxt f T x) (carrier (nxt t x)) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "note Cons.IH[OF this]"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x))) =\n  (xs \\<in> paths (nxt t x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "hence [simp]: \"possible t x \\<Longrightarrow> (xs \\<in> paths (substitute f T (nxt t x))) = (xs \\<in> paths (nxt t x))\""], ["proof (prove)\nusing this:\n  (xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x))) =\n  (xs \\<in> paths (nxt t x))\n\ngoal (1 subgoal):\n 1. possible t x \\<Longrightarrow>\n    (xs \\<in> paths (substitute f T (nxt t x))) = (xs \\<in> paths (nxt t x))", "by simp"], ["proof (state)\nthis:\n  possible t x \\<Longrightarrow>\n  (xs \\<in> paths (substitute f T (nxt t x))) = (xs \\<in> paths (nxt t x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   const_on f (carrier t) TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t);\n        const_on f (carrier t) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs \\<in> paths (substitute f T t)) =\n                         (a # xs \\<in> paths t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T t)) = (x # xs \\<in> paths t)", "by (auto simp add: Cons_path)"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T t)) = (x # xs \\<in> paths t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T t)) = (xs \\<in> paths t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_only_empty_both: \"const_on f (carrier t') empty \\<Longrightarrow> substitute f T (t \\<otimes>\\<otimes> t') = substitute f T t \\<otimes>\\<otimes> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. const_on f (carrier t') TTree.empty \\<Longrightarrow>\n    substitute f T (t \\<otimes>\\<otimes> t') =\n    substitute f T t \\<otimes>\\<otimes> t'", "proof (intro paths_inj set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       const_on f (carrier t') TTree.empty \\<Longrightarrow>\n       (x \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n       (x \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       const_on f (carrier t') TTree.empty \\<Longrightarrow>\n       (x \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n       (x \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "assume \"const_on f (carrier t') TTree.empty\""], ["proof (state)\nthis:\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       const_on f (carrier t') TTree.empty \\<Longrightarrow>\n       (x \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n       (x \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "thus \"(xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) = (xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\""], ["proof (prove)\nusing this:\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "proof (induction xs arbitrary: f t t')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       const_on f (carrier t') TTree.empty \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n       ([] \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   const_on f (carrier t') TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths\n                              (substitute f T (t \\<otimes>\\<otimes> t'))) =\n                   (xs \\<in> paths\n                              (substitute f T t \\<otimes>\\<otimes> t'));\n        const_on f (carrier t') TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T\n                                   (t \\<otimes>\\<otimes> t'))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute f T t \\<otimes>\\<otimes> t'))", "case Nil"], ["proof (state)\nthis:\n  const_on f (carrier t') TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>f t t'.\n       const_on f (carrier t') TTree.empty \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n       ([] \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   const_on f (carrier t') TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths\n                              (substitute f T (t \\<otimes>\\<otimes> t'))) =\n                   (xs \\<in> paths\n                              (substitute f T t \\<otimes>\\<otimes> t'));\n        const_on f (carrier t') TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T\n                                   (t \\<otimes>\\<otimes> t'))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute f T t \\<otimes>\\<otimes> t'))", "thus ?case"], ["proof (prove)\nusing this:\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. ([] \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    ([] \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "by simp"], ["proof (state)\nthis:\n  ([] \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n  ([] \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   const_on f (carrier t') TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths\n                              (substitute f T (t \\<otimes>\\<otimes> t'))) =\n                   (xs \\<in> paths\n                              (substitute f T t \\<otimes>\\<otimes> t'));\n        const_on f (carrier t') TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T\n                                   (t \\<otimes>\\<otimes> t'))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute f T t \\<otimes>\\<otimes> t'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   const_on f (carrier t') TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths\n                              (substitute f T (t \\<otimes>\\<otimes> t'))) =\n                   (xs \\<in> paths\n                              (substitute f T t \\<otimes>\\<otimes> t'));\n        const_on f (carrier t') TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T\n                                   (t \\<otimes>\\<otimes> t'))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute f T t \\<otimes>\\<otimes> t'))", "case (Cons x xs)"], ["proof (state)\nthis:\n  const_on ?f (carrier ?t') TTree.empty \\<Longrightarrow>\n  (xs \\<in> paths (substitute ?f T (?t \\<otimes>\\<otimes> ?t'))) =\n  (xs \\<in> paths (substitute ?f T ?t \\<otimes>\\<otimes> ?t'))\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t t'.\n       \\<lbrakk>\\<And>f t t'.\n                   const_on f (carrier t') TTree.empty \\<Longrightarrow>\n                   (xs \\<in> paths\n                              (substitute f T (t \\<otimes>\\<otimes> t'))) =\n                   (xs \\<in> paths\n                              (substitute f T t \\<otimes>\\<otimes> t'));\n        const_on f (carrier t') TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T\n                                   (t \\<otimes>\\<otimes> t'))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute f T t \\<otimes>\\<otimes> t'))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "proof(cases \"possible t' x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "case True"], ["proof (state)\nthis:\n  possible t' x\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "hence \"x \\<in> carrier t'\""], ["proof (prove)\nusing this:\n  possible t' x\n\ngoal (1 subgoal):\n 1. x \\<in> carrier t'", "by (metis carrier_possible)"], ["proof (state)\nthis:\n  x \\<in> carrier t'\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "with Cons.prems"], ["proof (chain)\npicking this:\n  const_on f (carrier t') TTree.empty\n  x \\<in> carrier t'", "have [simp]: \"f x = empty\""], ["proof (prove)\nusing this:\n  const_on f (carrier t') TTree.empty\n  x \\<in> carrier t'\n\ngoal (1 subgoal):\n 1. f x = TTree.empty", "by auto"], ["proof (state)\nthis:\n  f x = TTree.empty\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "hence [simp]: \"f_nxt f T x = f\""], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x = f", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x = f\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "note Cons.IH[OF Cons.prems, where t = \"nxt t x\", simp]"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T (nxt t x \\<otimes>\\<otimes> t'))) =\n  (xs \\<in> paths (substitute f T (nxt t x) \\<otimes>\\<otimes> t'))\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "from Cons.prems"], ["proof (chain)\npicking this:\n  const_on f (carrier t') TTree.empty", "have \"const_on f (carrier (nxt t' x)) empty\""], ["proof (prove)\nusing this:\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. const_on f (carrier (nxt t' x)) TTree.empty", "by (metis carrier_nxt_subset const_on_subset)"], ["proof (state)\nthis:\n  const_on f (carrier (nxt t' x)) TTree.empty\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "note Cons.IH[OF this, where t = t, simp]"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> nxt t' x))) =\n  (xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> nxt t' x))\n\ngoal (2 subgoals):\n 1. possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n 2. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "using True"], ["proof (prove)\nusing this:\n  possible t' x\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "by (auto simp add: Cons_both nxt_both  substitute_either)"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n  (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "case False"], ["proof (state)\nthis:\n  \\<not> possible t' x\n\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "have [simp]: \"nxt t x \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt t x \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x =\n    nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> t'", "by (metis both_assoc both_comm)"], ["proof (state)\nthis:\n  nxt t x \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x =\n  nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> t'\n\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "from Cons.prems"], ["proof (chain)\npicking this:\n  const_on f (carrier t') TTree.empty", "have \"const_on (f_nxt f T x) (carrier t') empty\""], ["proof (prove)\nusing this:\n  const_on f (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. const_on (f_nxt f T x) (carrier t') TTree.empty", "by (force simp add: f_nxt_def)"], ["proof (state)\nthis:\n  const_on (f_nxt f T x) (carrier t') TTree.empty\n\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "note Cons.IH[OF this, where t = \"nxt t x \\<otimes>\\<otimes> f x\", simp]"], ["proof (state)\nthis:\n  (xs \\<in> paths\n             (substitute (f_nxt f T x) T\n               (nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> t'))) =\n  (xs \\<in> paths\n             (substitute (f_nxt f T x) T\n               (nxt t x \\<otimes>\\<otimes> f x) \\<otimes>\\<otimes>\n              t'))\n\ngoal (1 subgoal):\n 1. \\<not> possible t' x \\<Longrightarrow>\n    (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "using False"], ["proof (prove)\nusing this:\n  \\<not> possible t' x\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n    (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))", "by (auto simp add: Cons_both nxt_both  substitute_either)"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n  (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n  (x # xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))) =\n  (xs \\<in> paths (substitute f T t \\<otimes>\\<otimes> t'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f_nxt_upd_empty[simp]:\n  \"f_nxt (f(x' := empty)) T x = (f_nxt f T x)(x' := empty)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt (f(x' := TTree.empty)) T x = (f_nxt f T x)(x' := TTree.empty)", "by (auto simp add: f_nxt_def)"], ["", "lemma repeatable_f_nxt_upd[simp]:\n  \"repeatable (f x) \\<Longrightarrow> repeatable (f_nxt f T x' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeatable (f x) \\<Longrightarrow> repeatable (f_nxt f T x' x)", "by (auto simp add: f_nxt_def)"], ["", "lemma substitute_remove_anyways_aux:\n  assumes \"repeatable (f x)\"\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"t \\<otimes>\\<otimes> f x = t\"\n  shows \"xs \\<in> paths (substitute (f(x := empty)) T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "using assms(2,3) assms(1)"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  t \\<otimes>\\<otimes> f x = t\n  repeatable (f x)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "proof (induction f T t xs  rule: substitute_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths\n                                   (substitute (f(x := TTree.empty)) T t)\n 2. \\<And>f T t xa xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T xa) T\n                                     (nxt t xa \\<otimes>\\<otimes> f xa));\n                 nxt t xa \\<otimes>\\<otimes> f xa \\<otimes>\\<otimes>\n                 f_nxt f T xa x =\n                 nxt t xa \\<otimes>\\<otimes> f xa;\n                 repeatable (f_nxt f T xa x)\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute ((f_nxt f T xa)(x := TTree.empty)) T\n        (nxt t xa \\<otimes>\\<otimes> f xa));\n        xa # xs \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> xa # xs\n                         \\<in> paths (substitute (f(x := TTree.empty)) T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  t_ \\<otimes>\\<otimes> f_ x = t_\n  repeatable (f_ x)\n\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths\n                                   (substitute (f(x := TTree.empty)) T t)\n 2. \\<And>f T t xa xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T xa) T\n                                     (nxt t xa \\<otimes>\\<otimes> f xa));\n                 nxt t xa \\<otimes>\\<otimes> f xa \\<otimes>\\<otimes>\n                 f_nxt f T xa x =\n                 nxt t xa \\<otimes>\\<otimes> f xa;\n                 repeatable (f_nxt f T xa x)\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute ((f_nxt f T xa)(x := TTree.empty)) T\n        (nxt t xa \\<otimes>\\<otimes> f xa));\n        xa # xs \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> xa # xs\n                         \\<in> paths (substitute (f(x := TTree.empty)) T t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  t_ \\<otimes>\\<otimes> f_ x = t_\n  repeatable (f_ x)\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute (f_(x := TTree.empty)) T_ t_)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute (f_(x := TTree.empty)) T_ t_)\n\ngoal (1 subgoal):\n 1. \\<And>f T t xa xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T xa) T\n                                     (nxt t xa \\<otimes>\\<otimes> f xa));\n                 nxt t xa \\<otimes>\\<otimes> f xa \\<otimes>\\<otimes>\n                 f_nxt f T xa x =\n                 nxt t xa \\<otimes>\\<otimes> f xa;\n                 repeatable (f_nxt f T xa x)\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute ((f_nxt f T xa)(x := TTree.empty)) T\n        (nxt t xa \\<otimes>\\<otimes> f xa));\n        xa # xs \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> xa # xs\n                         \\<in> paths (substitute (f(x := TTree.empty)) T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t xa xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T xa) T\n                                     (nxt t xa \\<otimes>\\<otimes> f xa));\n                 nxt t xa \\<otimes>\\<otimes> f xa \\<otimes>\\<otimes>\n                 f_nxt f T xa x =\n                 nxt t xa \\<otimes>\\<otimes> f xa;\n                 repeatable (f_nxt f T xa x)\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute ((f_nxt f T xa)(x := TTree.empty)) T\n        (nxt t xa \\<otimes>\\<otimes> f xa));\n        xa # xs \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> xa # xs\n                         \\<in> paths (substitute (f(x := TTree.empty)) T t)", "case (Cons f T t x' xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x') T\n                       (nxt t x' \\<otimes>\\<otimes> f x'));\n   nxt t x' \\<otimes>\\<otimes> f x' \\<otimes>\\<otimes> f_nxt f T x' x =\n   nxt t x' \\<otimes>\\<otimes> f x';\n   repeatable (f_nxt f T x' x)\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute ((f_nxt f T x')(x := TTree.empty))\n                                T (nxt t x' \\<otimes>\\<otimes> f x'))\n  x' # xs \\<in> paths (substitute f T t)\n  t \\<otimes>\\<otimes> f x = t\n  repeatable (f x)\n\ngoal (1 subgoal):\n 1. \\<And>f T t xa xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T xa) T\n                                     (nxt t xa \\<otimes>\\<otimes> f xa));\n                 nxt t xa \\<otimes>\\<otimes> f xa \\<otimes>\\<otimes>\n                 f_nxt f T xa x =\n                 nxt t xa \\<otimes>\\<otimes> f xa;\n                 repeatable (f_nxt f T xa x)\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute ((f_nxt f T xa)(x := TTree.empty)) T\n        (nxt t xa \\<otimes>\\<otimes> f xa));\n        xa # xs \\<in> paths (substitute f T t);\n        t \\<otimes>\\<otimes> f x = t; repeatable (f x)\\<rbrakk>\n       \\<Longrightarrow> xa # xs\n                         \\<in> paths (substitute (f(x := TTree.empty)) T t)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "proof(cases \"x' = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n 2. x' \\<noteq> x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "case False"], ["proof (state)\nthis:\n  x' \\<noteq> x\n\ngoal (2 subgoals):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n 2. x' \\<noteq> x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "hence [simp]: \"(f(x := TTree.empty)) x' = f x'\""], ["proof (prove)\nusing this:\n  x' \\<noteq> x\n\ngoal (1 subgoal):\n 1. (f(x := TTree.empty)) x' = f x'", "by simp"], ["proof (state)\nthis:\n  (f(x := TTree.empty)) x' = f x'\n\ngoal (2 subgoals):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n 2. x' \\<noteq> x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "have [simp]: \"f_nxt f T x' x = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f T x' x = f x", "using False"], ["proof (prove)\nusing this:\n  x' \\<noteq> x\n\ngoal (1 subgoal):\n 1. f_nxt f T x' x = f x", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x' x = f x\n\ngoal (2 subgoals):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n 2. x' \\<noteq> x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "using Cons"], ["proof (prove)\nusing this:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x') T\n                       (nxt t x' \\<otimes>\\<otimes> f x'));\n   nxt t x' \\<otimes>\\<otimes> f x' \\<otimes>\\<otimes> f_nxt f T x' x =\n   nxt t x' \\<otimes>\\<otimes> f x';\n   repeatable (f_nxt f T x' x)\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute ((f_nxt f T x')(x := TTree.empty))\n                                T (nxt t x' \\<otimes>\\<otimes> f x'))\n  x' # xs \\<in> paths (substitute f T t)\n  t \\<otimes>\\<otimes> f x = t\n  repeatable (f x)\n\ngoal (1 subgoal):\n 1. x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "by (auto  simp add: repeatable_both_nxt repeatable_both_both_nxt   simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "case True"], ["proof (state)\nthis:\n  x' = x\n\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "hence [simp]: \"(f(x := TTree.empty)) x = empty\""], ["proof (prove)\nusing this:\n  x' = x\n\ngoal (1 subgoal):\n 1. (f(x := TTree.empty)) x = TTree.empty", "by simp"], ["proof (state)\nthis:\n  (f(x := TTree.empty)) x = TTree.empty\n\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "(*  have [simp]: \"f_nxt f T x' x = f x\" using False by (auto simp add: f_nxt_def) *)"], ["proof (state)\nthis:\n  (f(x := TTree.empty)) x = TTree.empty\n\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "have *: \"(f_nxt f T x) x = f x \\<or> (f_nxt f T x) x = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f_nxt f T x x = f x \\<or> f_nxt f T x x = TTree.empty", "by (simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x x = f x \\<or> f_nxt f T x x = TTree.empty\n\ngoal (1 subgoal):\n 1. x' = x \\<Longrightarrow>\n    x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  f_nxt f T x x = f x \\<or> f_nxt f T x x = TTree.empty\n\ngoal (1 subgoal):\n 1. x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "using Cons True"], ["proof (prove)\nusing this:\n  f_nxt f T x x = f x \\<or> f_nxt f T x x = TTree.empty\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x') T\n                       (nxt t x' \\<otimes>\\<otimes> f x'));\n   nxt t x' \\<otimes>\\<otimes> f x' \\<otimes>\\<otimes> f_nxt f T x' x =\n   nxt t x' \\<otimes>\\<otimes> f x';\n   repeatable (f_nxt f T x' x)\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute ((f_nxt f T x')(x := TTree.empty))\n                                T (nxt t x' \\<otimes>\\<otimes> f x'))\n  x' # xs \\<in> paths (substitute f T t)\n  t \\<otimes>\\<otimes> f x = t\n  repeatable (f x)\n  x' = x\n\ngoal (1 subgoal):\n 1. x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)", "by (auto  simp add: repeatable_both_nxt repeatable_both_both_nxt   simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  x' # xs \\<in> paths (substitute (f(x := TTree.empty)) T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_remove_anyways:\n  assumes \"repeatable t\"\n  assumes \"f x = t\"\n  shows \"substitute f T (t \\<otimes>\\<otimes> t') = substitute (f(x := empty)) T (t \\<otimes>\\<otimes> t')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T (t \\<otimes>\\<otimes> t') =\n    substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t')", "proof (rule paths_inj, rule, rule subsetI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "have \"repeatable (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. repeatable (f x)", "using assms"], ["proof (prove)\nusing this:\n  repeatable t\n  f x = t\n\ngoal (1 subgoal):\n 1. repeatable (f x)", "by simp"], ["proof (state)\nthis:\n  repeatable (f x)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "moreover"], ["proof (state)\nthis:\n  repeatable (f x)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "assume \"xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "moreover"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "have \"t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> t'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> t'", "by (metis assms both_assoc both_comm repeatable_both_self)"], ["proof (state)\nthis:\n  t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> t'\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> paths\n                 (substitute f T\n                   (t \\<otimes>\\<otimes> t')) \\<Longrightarrow>\n       xa \\<in> paths\n                 (substitute (f(x := TTree.empty)) T\n                   (t \\<otimes>\\<otimes> t'))\n 2. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "ultimately"], ["proof (chain)\npicking this:\n  repeatable (f x)\n  xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))\n  t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> t'", "show \"xs \\<in> paths (substitute (f(x := empty)) T (t \\<otimes>\\<otimes> t'))\""], ["proof (prove)\nusing this:\n  repeatable (f x)\n  xs \\<in> paths (substitute f T (t \\<otimes>\\<otimes> t'))\n  t \\<otimes>\\<otimes> t' \\<otimes>\\<otimes> f x = t \\<otimes>\\<otimes> t'\n\ngoal (1 subgoal):\n 1. xs \\<in> paths\n              (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))", "by (rule substitute_remove_anyways_aux)"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n\ngoal (1 subgoal):\n 1. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "show \"paths (substitute (f(x := empty)) T (t \\<otimes>\\<otimes> t')) \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n    \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))", "by (rule substitute_mono1) auto"], ["proof (state)\nthis:\n  paths (substitute (f(x := TTree.empty)) T (t \\<otimes>\\<otimes> t'))\n  \\<subseteq> paths (substitute f T (t \\<otimes>\\<otimes> t'))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma carrier_f_nxt: \"carrier (f_nxt f T x x') \\<subseteq> carrier (f x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (f_nxt f T x x') \\<subseteq> carrier (f x')", "by (simp add: f_nxt_def)"], ["", "lemma f_nxt_cong: \"f x' = f' x' \\<Longrightarrow> f_nxt f T x x' = f_nxt f' T x x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x' = f' x' \\<Longrightarrow> f_nxt f T x x' = f_nxt f' T x x'", "by (simp add: f_nxt_def)"], ["", "lemma substitute_cong':\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"\\<And> x n. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows \"xs \\<in> paths (substitute f' T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f' T t)", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f' T t)", "proof (induction f T t xs arbitrary: f' rule: substitute_induct )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t f'.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f' T t)\n 2. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  ?x \\<in> A \\<Longrightarrow> carrier (f_ ?x) \\<subseteq> A\n  carrier t_ \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f_ ?x = f' ?x\n\ngoal (2 subgoals):\n 1. \\<And>f T t f'.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f' T t)\n 2. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  ?x \\<in> A \\<Longrightarrow> carrier (f_ ?x) \\<subseteq> A\n  carrier t_ \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f_ ?x = f' ?x\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f' T_ t_)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f' T_ t_)\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "case (Cons f T t x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x) T\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   \\<And>xa.\n      xa \\<in> A \\<Longrightarrow> carrier (f_nxt f T x xa) \\<subseteq> A;\n   carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n   \\<And>xa. xa \\<in> A \\<Longrightarrow> f_nxt f T x xa = ?f' xa\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute ?f' T\n                                (nxt t x \\<otimes>\\<otimes> f x))\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "hence \"possible t x\""], ["proof (prove)\nusing this:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x) T\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   \\<And>xa.\n      xa \\<in> A \\<Longrightarrow> carrier (f_nxt f T x xa) \\<subseteq> A;\n   carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n   \\<And>xa. xa \\<in> A \\<Longrightarrow> f_nxt f T x xa = ?f' xa\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute ?f' T\n                                (nxt t x \\<otimes>\\<otimes> f x))\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n\ngoal (1 subgoal):\n 1. possible t x", "by auto"], ["proof (state)\nthis:\n  possible t x\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "hence \"x \\<in> carrier t\""], ["proof (prove)\nusing this:\n  possible t x\n\ngoal (1 subgoal):\n 1. x \\<in> carrier t", "by (metis carrier_possible)"], ["proof (state)\nthis:\n  x \\<in> carrier t\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "hence \"x \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> carrier t\n\ngoal (1 subgoal):\n 1. x \\<in> A", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  x \\<in> carrier t\n  carrier t \\<subseteq> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by auto"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "with Cons.prems"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n  x \\<in> A", "have [simp]: \"f' x = f x\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f ?x = f' ?x\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. f' x = f x", "by auto"], ["proof (state)\nthis:\n  f' x = f x\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "have \"carrier (f x) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> A", "using \\<open>x \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> A", "by (rule Cons.prems(2))"], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs f'.\n       \\<lbrakk>\\<And>f'.\n                   \\<lbrakk>xs \\<in> paths\n(substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x));\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       carrier (f_nxt f T x xa) \\<subseteq> A;\n                    carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                    \\<And>xa.\n                       xa \\<in> A \\<Longrightarrow>\n                       f_nxt f T x xa = f' xa\\<rbrakk>\n                   \\<Longrightarrow> xs \\<in> paths\n         (substitute f' T (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> f x = f' x\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f' T t)", "from Cons.prems(1,2) Cons.prems(4)[symmetric]"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f' ?x = f ?x", "show ?case"], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> f' ?x = f ?x\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f' T t)", "by (auto elim!: Cons.IH\n          dest!: subsetD[OF carrier_f_nxt] subsetD[OF carrier_nxt_subset] subsetD[OF Cons.prems(3)] subsetD[OF \\<open>carrier (f x) \\<subseteq> A\\<close>]\n          intro: f_nxt_cong\n          )"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f' T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_cong_induct:\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> f x = f' x\"\n  shows \"substitute f T t = substitute f' T t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T t = substitute f' T t", "apply (rule paths_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute f T t) = paths (substitute f' T t)", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> paths (substitute f T t)) =\n       (x \\<in> paths (substitute f' T t))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f' T t)\n 2. \\<And>x.\n       x \\<in> paths (substitute f' T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t)", "apply (erule (2) substitute_cong'[OF _ assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f' T t) \\<Longrightarrow>\n       x \\<in> paths (substitute f T t)", "apply (erule substitute_cong'[OF _ _ assms(2)])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa n. xa \\<in> A \\<Longrightarrow> carrier (f' xa) \\<subseteq> A\n 2. \\<And>x xa. xa \\<in> A \\<Longrightarrow> f' xa = f xa", "apply (metis assms(1,3))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa. xa \\<in> A \\<Longrightarrow> f' xa = f xa", "apply (metis assms(3))"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carrier_substitute_aux:\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"carrier t \\<subseteq> A\"\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\" \n  shows   \"set xs \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  carrier t \\<subseteq> A\n  ?x \\<in> A \\<Longrightarrow> carrier (f ?x) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> A", "apply(induction  f T t xs rule: substitute_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t); carrier t \\<subseteq> A;\n        \\<And>x.\n           x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> set [] \\<subseteq> A\n 2. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 carrier (nxt t x \\<otimes>\\<otimes> f x) \\<subseteq> A;\n                 \\<And>xa.\n                    xa \\<in> A \\<Longrightarrow>\n                    carrier (f_nxt f T x xa) \\<subseteq> A\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subseteq> A;\n        x # xs \\<in> paths (substitute f T t); carrier t \\<subseteq> A;\n        \\<And>x.\n           x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> set (x # xs) \\<subseteq> A", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>carrier (nxt t x) \\<subseteq> A \\<and>\n                         carrier (f x) \\<subseteq> A;\n                 \\<And>xa.\n                    xa \\<in> A \\<Longrightarrow>\n                    carrier (f_nxt f T x xa) \\<subseteq> A\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        possible t x;\n        xs \\<in> paths\n                  (substitute (f_nxt f T x) T\n                    (nxt t x \\<otimes>\\<otimes> f x))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> A\n 2. \\<And>f T t x xs xa.\n       \\<lbrakk>\\<lbrakk>carrier (nxt t x) \\<subseteq> A \\<and>\n                         carrier (f x) \\<subseteq> A;\n                 \\<And>xa.\n                    xa \\<in> A \\<Longrightarrow>\n                    carrier (f_nxt f T x xa) \\<subseteq> A\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        possible t x;\n        xs \\<in> paths\n                  (substitute (f_nxt f T x) T\n                    (nxt t x \\<otimes>\\<otimes> f x));\n        xa \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> A", "apply (metis carrier_possible_subset)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs xa.\n       \\<lbrakk>\\<lbrakk>carrier (nxt t x) \\<subseteq> A \\<and>\n                         carrier (f x) \\<subseteq> A;\n                 \\<And>xa.\n                    xa \\<in> A \\<Longrightarrow>\n                    carrier (f_nxt f T x xa) \\<subseteq> A\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subseteq> A;\n        carrier t \\<subseteq> A;\n        \\<And>x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A;\n        possible t x;\n        xs \\<in> paths\n                  (substitute (f_nxt f T x) T\n                    (nxt t x \\<otimes>\\<otimes> f x));\n        xa \\<in> set xs\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> A", "apply (metis carrier_f_nxt carrier_nxt_subset carrier_possible_subset contra_subsetD order_trans)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carrier_substitute_below:\n  assumes \"\\<And> x. x \\<in> A \\<Longrightarrow> carrier (f x) \\<subseteq> A\"\n  assumes \"carrier t \\<subseteq> A\"\n  shows \"carrier (substitute f T t) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (substitute f T t) \\<subseteq> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. carrier (substitute f T t) \\<subseteq> A", "have \"\\<And> xs. xs \\<in> paths (substitute f T t) \\<Longrightarrow> set xs \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n       set xs \\<subseteq> A", "by (rule carrier_substitute_aux[OF _ assms(2,1)])"], ["proof (state)\nthis:\n  ?xs \\<in> paths (substitute f T t) \\<Longrightarrow> set ?xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. carrier (substitute f T t) \\<subseteq> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?xs \\<in> paths (substitute f T t) \\<Longrightarrow> set ?xs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. carrier (substitute f T t) \\<subseteq> A", "by (auto simp add:  Union_paths_carrier[symmetric])"], ["proof (state)\nthis:\n  carrier (substitute f T t) \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f_nxt_eq_empty_iff:\n  \"f_nxt f T x x' = empty \\<longleftrightarrow> f x' = empty \\<or> (x' = x \\<and> x \\<in> T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f_nxt f T x x' = TTree.empty) =\n    (f x' = TTree.empty \\<or> x' = x \\<and> x \\<in> T)", "by (auto simp add: f_nxt_def)"], ["", "lemma substitute_T_cong':\n  assumes \"xs \\<in> paths (substitute f T t)\"\n  assumes \"\\<And> x.  (x \\<in> T \\<longleftrightarrow> x \\<in> T') \\<or> f x = empty\"\n  shows \"xs \\<in> paths (substitute f T' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T' t)", "using assms"], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  (?x \\<in> T) = (?x \\<in> T') \\<or> f ?x = TTree.empty\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T' t)", "proof (induction f T t xs  rule: substitute_induct )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f T' t)\n 2. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  (?x \\<in> T_) = (?x \\<in> T') \\<or> f_ ?x = TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> [] \\<in> paths (substitute f T' t)\n 2. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  (?x \\<in> T_) = (?x \\<in> T') \\<or> f_ ?x = TTree.empty\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f_ T' t_)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T' t_)\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "case (Cons f T t x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x) T\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   \\<And>xa.\n      (xa \\<in> T) = (xa \\<in> T') \\<or>\n      f_nxt f T x xa = TTree.empty\\<rbrakk>\n  \\<Longrightarrow> xs \\<in> paths\n                              (substitute (f_nxt f T x) T'\n                                (nxt t x \\<otimes>\\<otimes> f x))\n  x # xs \\<in> paths (substitute f T t)\n  (?x \\<in> T) = (?x \\<in> T') \\<or> f ?x = TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "from Cons.prems(2)[where x = x]"], ["proof (chain)\npicking this:\n  (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty", "have [simp]: \"f_nxt f T x = f_nxt f T' x\""], ["proof (prove)\nusing this:\n  (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x = f_nxt f T' x", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x = f_nxt f T' x\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  (?x \\<in> T) = (?x \\<in> T') \\<or> f ?x = TTree.empty", "have \"(\\<And>x'. (x' \\<in> T) = (x' \\<in> T') \\<or> f_nxt f T x x' = TTree.empty)\""], ["proof (prove)\nusing this:\n  (?x \\<in> T) = (?x \\<in> T') \\<or> f ?x = TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>x'.\n       (x' \\<in> T) = (x' \\<in> T') \\<or> f_nxt f T x x' = TTree.empty", "by (auto simp add: f_nxt_eq_empty_iff)"], ["proof (state)\nthis:\n  (?x' \\<in> T) = (?x' \\<in> T') \\<or> f_nxt f T x ?x' = TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa.\n                    (xa \\<in> T) = (xa \\<in> T') \\<or>\n                    f_nxt f T x xa = TTree.empty\\<rbrakk>\n                \\<Longrightarrow> xs \\<in> paths\n      (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. (x \\<in> T) = (x \\<in> T') \\<or> f x = TTree.empty\\<rbrakk>\n       \\<Longrightarrow> x # xs \\<in> paths (substitute f T' t)", "from Cons.prems(1) Cons.IH[OF _ this]"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T\n              (nxt t x \\<otimes>\\<otimes> f x)) \\<Longrightarrow>\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x))", "show ?case"], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T\n              (nxt t x \\<otimes>\\<otimes> f x)) \\<Longrightarrow>\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T' (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. x # xs \\<in> paths (substitute f T' t)", "by auto"], ["proof (state)\nthis:\n  x # xs \\<in> paths (substitute f T' t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma substitute_cong_T:\n  assumes \"\\<And> x.  (x \\<in> T \\<longleftrightarrow> x \\<in> T') \\<or> f x = empty\"\n  shows \"substitute f T = substitute f T'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T = substitute f T'", "apply rule"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. substitute f T x = substitute f T' x", "apply (rule paths_inj)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. paths (substitute f T x) = paths (substitute f T' x)", "apply (rule set_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       (xa \\<in> paths (substitute f T x)) =\n       (xa \\<in> paths (substitute f T' x))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x xa.\n       xa \\<in> paths (substitute f T x) \\<Longrightarrow>\n       xa \\<in> paths (substitute f T' x)\n 2. \\<And>x xa.\n       xa \\<in> paths (substitute f T' x) \\<Longrightarrow>\n       xa \\<in> paths (substitute f T x)", "apply (erule substitute_T_cong'[OF _ assms])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       xa \\<in> paths (substitute f T' x) \\<Longrightarrow>\n       xa \\<in> paths (substitute f T x)", "apply (erule substitute_T_cong')"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa xb. (xb \\<in> T') = (xb \\<in> T) \\<or> f xb = TTree.empty", "apply (metis assms)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma carrier_substitute1: \"carrier t \\<subseteq> carrier (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier t \\<subseteq> carrier (substitute f T t)", "by (rule carrier_mono) (rule substitute_contains_arg)"], ["", "lemma substitute_cong:\n  assumes \"\\<And> x. x \\<in> carrier (substitute f T t) \\<Longrightarrow> f x = f' x\"\n  shows \"substitute f T t = substitute f' T t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T t = substitute f' T t", "proof(rule substitute_cong_induct[OF _ _ assms])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. x \\<in> ?A \\<Longrightarrow> carrier (f x) \\<subseteq> ?A\n 2. carrier t \\<subseteq> ?A\n 3. \\<And>x. x \\<in> ?A \\<Longrightarrow> x \\<in> carrier (substitute f T t)", "show \"carrier t \\<subseteq> carrier (substitute f T t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier t \\<subseteq> carrier (substitute f T t)", "by (rule carrier_substitute1)"], ["proof (state)\nthis:\n  carrier t \\<subseteq> carrier (substitute f T t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       carrier (f x) \\<subseteq> carrier (substitute f T t)\n 2. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       carrier (f x) \\<subseteq> carrier (substitute f T t)\n 2. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       carrier (f x) \\<subseteq> carrier (substitute f T t)\n 2. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "assume \"x \\<in> carrier (substitute f T t)\""], ["proof (state)\nthis:\n  x \\<in> carrier (substitute f T t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       carrier (f x) \\<subseteq> carrier (substitute f T t)\n 2. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "then"], ["proof (chain)\npicking this:\n  x \\<in> carrier (substitute f T t)", "obtain xs where \"xs \\<in> paths (substitute f T t)\"  and \"x \\<in> set xs\""], ["proof (prove)\nusing this:\n  x \\<in> carrier (substitute f T t)\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>xs \\<in> paths (substitute f T t); x \\<in> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by transfer auto"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n  x \\<in> set xs\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       carrier (f x) \\<subseteq> carrier (substitute f T t)\n 2. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "thus \"carrier (f x) \\<subseteq> carrier (substitute f T t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> carrier (substitute f T t)", "proof (induction xs arbitrary: f t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t); x \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n  x \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t); x \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f T t)\n  x \\<in> set []\n\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> carrier (substitute f T t)", "by simp"], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> carrier (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "case (Cons x' xs f t)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths (substitute ?f T ?t); x \\<in> set xs\\<rbrakk>\n  \\<Longrightarrow> carrier (?f x) \\<subseteq> carrier (substitute ?f T ?t)\n  x' # xs \\<in> paths (substitute f T t)\n  x \\<in> set (x' # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "from \\<open>x' # xs \\<in> paths (substitute f T t)\\<close>"], ["proof (chain)\npicking this:\n  x' # xs \\<in> paths (substitute f T t)", "have \"possible t x'\" and \"xs \\<in> paths (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\""], ["proof (prove)\nusing this:\n  x' # xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. possible t x' &&&\n    xs \\<in> paths\n              (substitute (f_nxt f T x') T\n                (nxt t x' \\<otimes>\\<otimes> f x'))", "by auto"], ["proof (state)\nthis:\n  possible t x'\n  xs \\<in> paths\n            (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "from \\<open>x \\<in> set (x' # xs)\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> set (x' # xs)", "have \"x = x' \\<or> (x \\<noteq> x' \\<and> x \\<in> set xs)\""], ["proof (prove)\nusing this:\n  x \\<in> set (x' # xs)\n\ngoal (1 subgoal):\n 1. x = x' \\<or> x \\<noteq> x' \\<and> x \\<in> set xs", "by auto"], ["proof (state)\nthis:\n  x = x' \\<or> x \\<noteq> x' \\<and> x \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "hence \"carrier (f x) \\<subseteq> carrier (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\""], ["proof (prove)\nusing this:\n  x = x' \\<or> x \\<noteq> x' \\<and> x \\<in> set xs\n\ngoal (1 subgoal):\n 1. carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))", "proof(elim conjE disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))\n 2. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "assume \"x = x'\""], ["proof (state)\nthis:\n  x = x'\n\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))\n 2. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "have \"carrier (f x) \\<subseteq> carrier (nxt t x \\<otimes>\\<otimes> f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> carrier (nxt t x \\<otimes>\\<otimes> f x)", "by simp"], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> carrier (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))\n 2. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "also"], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> carrier (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))\n 2. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "have \"\\<dots> \\<subseteq> carrier (substitute (f_nxt f T x') T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. carrier (nxt t x \\<otimes>\\<otimes> f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x \\<otimes>\\<otimes> f x))", "by (rule carrier_substitute1)"], ["proof (state)\nthis:\n  carrier (nxt t x \\<otimes>\\<otimes> f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (2 subgoals):\n 1. x = x' \\<Longrightarrow>\n    carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))\n 2. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "finally"], ["proof (chain)\npicking this:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x \\<otimes>\\<otimes> f x))", "show ?thesis"], ["proof (prove)\nusing this:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))", "unfolding \\<open>x = x'\\<close>"], ["proof (prove)\nusing this:\n  carrier (f x')\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. carrier (f x')\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))", "."], ["proof (state)\nthis:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "assume \"x \\<noteq> x'\""], ["proof (state)\nthis:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "hence [simp]: \"(f_nxt f T x' x) = f x\""], ["proof (prove)\nusing this:\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. f_nxt f T x' x = f x", "by (simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x' x = f x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "assume \"x \\<in> set xs\""], ["proof (state)\nthis:\n  x \\<in> set xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<noteq> x'; x \\<in> set xs\\<rbrakk>\n    \\<Longrightarrow> carrier (f x)\n                      \\<subseteq> carrier\n                                   (substitute (f_nxt f T x') T\n                                     (nxt t x' \\<otimes>\\<otimes> f x'))", "from Cons.IH[OF \\<open>xs \\<in> _ \\<close> this]"], ["proof (chain)\npicking this:\n  carrier (f_nxt f T x' x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))", "show \"carrier (f x) \\<subseteq> carrier (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\""], ["proof (prove)\nusing this:\n  carrier (f_nxt f T x' x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. carrier (f x)\n    \\<subseteq> carrier\n                 (substitute (f_nxt f T x') T\n                   (nxt t x' \\<otimes>\\<otimes> f x'))", "by simp"], ["proof (state)\nthis:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "also"], ["proof (state)\nthis:\n  carrier (f x)\n  \\<subseteq> carrier\n               (substitute (f_nxt f T x') T\n                 (nxt t x' \\<otimes>\\<otimes> f x'))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "from \\<open>possible t x'\\<close>"], ["proof (chain)\npicking this:\n  possible t x'", "have \"carrier (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x')) \\<subseteq>  carrier (substitute f T t)\""], ["proof (prove)\nusing this:\n  possible t x'\n\ngoal (1 subgoal):\n 1. carrier (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\n    \\<subseteq> carrier (substitute f T t)", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x' f T.\n       possible t x' \\<Longrightarrow>\n       \\<Union>\n        (set `\n         Collect\n          (substitute' (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x')))\n       \\<subseteq> \\<Union> (set ` Collect (substitute' f T t))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x' f T x xa.\n       \\<lbrakk>possible t x'; x \\<in> set xa;\n        substitute' (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x')\n         xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            substitute' f T t xa \\<and> x \\<in> set xa", "apply (rule_tac x = \"x'#xa\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t x' f T x xa.\n       \\<lbrakk>possible t x'; x \\<in> set xa;\n        substitute' (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x')\n         xa\\<rbrakk>\n       \\<Longrightarrow> substitute' f T t (x' # xa) \\<and>\n                         x \\<in> set (x' # xa)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  carrier (substitute (f_nxt f T x') T (nxt t x' \\<otimes>\\<otimes> f x'))\n  \\<subseteq> carrier (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs \\<in> paths (substitute f T t);\n                    x \\<in> set xs\\<rbrakk>\n                   \\<Longrightarrow> carrier (f x)\n                                     \\<subseteq> carrier (substitute f T t);\n        a # xs \\<in> paths (substitute f T t); x \\<in> set (a # xs)\\<rbrakk>\n       \\<Longrightarrow> carrier (f x)\n                         \\<subseteq> carrier (substitute f T t)", "finally"], ["proof (chain)\npicking this:\n  carrier (f x) \\<subseteq> carrier (substitute f T t)", "show ?case"], ["proof (prove)\nusing this:\n  carrier (f x) \\<subseteq> carrier (substitute f T t)\n\ngoal (1 subgoal):\n 1. carrier (f x) \\<subseteq> carrier (substitute f T t)", "."], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> carrier (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  carrier (f x) \\<subseteq> carrier (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> carrier (substitute f T t) \\<Longrightarrow>\n       x \\<in> carrier (substitute f T t)", "qed"], ["", "lemma substitute_substitute:\n  assumes \"\\<And> x. const_on f' (carrier (f x)) empty\"\n  shows \"substitute f T (substitute f' T t) = substitute (\\<lambda> x. f x \\<otimes>\\<otimes> f' x) T t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute f T (substitute f' T t) =\n    substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t", "proof (rule paths_inj, rule set_eqI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> paths (substitute f T (substitute f' T t))) =\n       (x \\<in> paths\n                 (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> paths (substitute f T (substitute f' T t))) =\n       (x \\<in> paths\n                 (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "have [simp]: \"\\<And> f f' x'. f_nxt (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T x' = (\\<lambda>x. f_nxt f T x' x \\<otimes>\\<otimes> f_nxt f' T x' x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f f' x'.\n       f_nxt (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T x' =\n       (\\<lambda>x. f_nxt f T x' x \\<otimes>\\<otimes> f_nxt f' T x' x)", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt (\\<lambda>x. ?f x \\<otimes>\\<otimes> ?f' x) T ?x' =\n  (\\<lambda>x. f_nxt ?f T ?x' x \\<otimes>\\<otimes> f_nxt ?f' T ?x' x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (x \\<in> paths (substitute f T (substitute f' T t))) =\n       (x \\<in> paths\n                 (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "from  assms"], ["proof (chain)\npicking this:\n  const_on f' (carrier (f ?x)) TTree.empty", "show \"xs \\<in> paths (substitute f T (substitute f' T t)) \\<longleftrightarrow> xs \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t)\""], ["proof (prove)\nusing this:\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f T (substitute f' T t))) =\n    (xs \\<in> paths\n               (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "proof (induction xs arbitrary: f f' t )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f f' t.\n       (\\<And>x. const_on f' (carrier (f x)) TTree.empty) \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T (substitute f' T t))) =\n       ([] \\<in> paths\n                  (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                    t))\n 2. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   (\\<And>x.\n                       const_on f' (carrier (f x))\n                        TTree.empty) \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                   (xs \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t));\n        \\<And>x. const_on f' (carrier (f x)) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T (substitute f' T t))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute\n                                   (\\<lambda>x. f x \\<otimes>\\<otimes> f' x)\n                                   T t))", "case Nil"], ["proof (state)\nthis:\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>f f' t.\n       (\\<And>x. const_on f' (carrier (f x)) TTree.empty) \\<Longrightarrow>\n       ([] \\<in> paths (substitute f T (substitute f' T t))) =\n       ([] \\<in> paths\n                  (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                    t))\n 2. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   (\\<And>x.\n                       const_on f' (carrier (f x))\n                        TTree.empty) \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                   (xs \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t));\n        \\<And>x. const_on f' (carrier (f x)) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T (substitute f' T t))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute\n                                   (\\<lambda>x. f x \\<otimes>\\<otimes> f' x)\n                                   T t))", "thus ?case"], ["proof (prove)\nusing this:\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (1 subgoal):\n 1. ([] \\<in> paths (substitute f T (substitute f' T t))) =\n    ([] \\<in> paths\n               (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "by simp"], ["proof (state)\nthis:\n  ([] \\<in> paths (substitute f T (substitute f' T t))) =\n  ([] \\<in> paths\n             (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   (\\<And>x.\n                       const_on f' (carrier (f x))\n                        TTree.empty) \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                   (xs \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t));\n        \\<And>x. const_on f' (carrier (f x)) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T (substitute f' T t))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute\n                                   (\\<lambda>x. f x \\<otimes>\\<otimes> f' x)\n                                   T t))", "case (Cons x xs)"], ["proof (state)\nthis:\n  (\\<And>x. const_on ?f' (carrier (?f x)) TTree.empty) \\<Longrightarrow>\n  (xs \\<in> paths (substitute ?f T (substitute ?f' T ?t))) =\n  (xs \\<in> paths\n             (substitute (\\<lambda>x. ?f x \\<otimes>\\<otimes> ?f' x) T ?t))\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>a xs f f' t.\n       \\<lbrakk>\\<And>f f' t.\n                   (\\<And>x.\n                       const_on f' (carrier (f x))\n                        TTree.empty) \\<Longrightarrow>\n                   (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                   (xs \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t));\n        \\<And>x. const_on f' (carrier (f x)) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> (a # xs\n                          \\<in> paths\n                                 (substitute f T (substitute f' T t))) =\n                         (a # xs\n                          \\<in> paths\n                                 (substitute\n                                   (\\<lambda>x. f x \\<otimes>\\<otimes> f' x)\n                                   T t))", "thus ?case"], ["proof (prove)\nusing this:\n  (\\<And>x. const_on ?f' (carrier (?f x)) TTree.empty) \\<Longrightarrow>\n  (xs \\<in> paths (substitute ?f T (substitute ?f' T ?t))) =\n  (xs \\<in> paths\n             (substitute (\\<lambda>x. ?f x \\<otimes>\\<otimes> ?f' x) T ?t))\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n    (x # xs\n     \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "proof (cases \"possible t x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "case True"], ["proof (state)\nthis:\n  possible t x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "from Cons.prems"], ["proof (chain)\npicking this:\n  const_on f' (carrier (f ?x)) TTree.empty", "have prem': \"\\<And> x'. const_on (f_nxt f' T x) (carrier (f x')) empty\""], ["proof (prove)\nusing this:\n  const_on f' (carrier (f ?x)) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>x'. const_on (f_nxt f' T x) (carrier (f x')) TTree.empty", "by (force simp add: f_nxt_def)"], ["proof (state)\nthis:\n  const_on (f_nxt f' T x) (carrier (f ?x')) TTree.empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "hence \"\\<And>x'. const_on (f_nxt f' T x) (carrier ((f_nxt f T x) x')) empty\""], ["proof (prove)\nusing this:\n  const_on (f_nxt f' T x) (carrier (f ?x')) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>x'. const_on (f_nxt f' T x) (carrier (f_nxt f T x x')) TTree.empty", "by (metis carrier_empty const_onI emptyE f_nxt_def fun_upd_apply)"], ["proof (state)\nthis:\n  const_on (f_nxt f' T x) (carrier (f_nxt f T x ?x')) TTree.empty\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "note Cons.IH[where f = \"f_nxt f T x\" and f' = \"f_nxt f' T x\", OF this, simp]"], ["proof (state)\nthis:\n  (xs \\<in> paths\n             (substitute (f_nxt f T x) T\n               (substitute (f_nxt f' T x) T ?t))) =\n  (xs \\<in> paths\n             (substitute\n               (\\<lambda>xa.\n                   f_nxt f T x xa \\<otimes>\\<otimes> f_nxt f' T x xa)\n               T ?t))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "have [simp]: \"nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> f' x = nxt t x \\<otimes>\\<otimes> f' x \\<otimes>\\<otimes> f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> f' x =\n    nxt t x \\<otimes>\\<otimes> f' x \\<otimes>\\<otimes> f x", "by (metis both_comm both_assoc)"], ["proof (state)\nthis:\n  nxt t x \\<otimes>\\<otimes> f x \\<otimes>\\<otimes> f' x =\n  nxt t x \\<otimes>\\<otimes> f' x \\<otimes>\\<otimes> f x\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty; possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))\n 2. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n    (x # xs\n     \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "using True"], ["proof (prove)\nusing this:\n  possible t x\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n    (x # xs\n     \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "by (auto del: iffI simp add: substitute_only_empty_both[OF prem'[where x' = x] , symmetric])"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n  (x # xs\n   \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "case False"], ["proof (state)\nthis:\n  \\<not> possible t x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>f' f t.\n                (\\<And>x.\n                    const_on f' (carrier (f x))\n                     TTree.empty) \\<Longrightarrow>\n                (xs \\<in> paths (substitute f T (substitute f' T t))) =\n                (xs \\<in> paths\n                           (substitute\n                             (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                             t));\n     \\<And>x. const_on f' (carrier (f x)) TTree.empty;\n     \\<not> possible t x\\<rbrakk>\n    \\<Longrightarrow> (x # xs\n                       \\<in> paths (substitute f T (substitute f' T t))) =\n                      (x # xs\n                       \\<in> paths\n                              (substitute\n                                (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T\n                                t))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> possible t x\n\ngoal (1 subgoal):\n 1. (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n    (x # xs\n     \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))", "by simp"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n  (x # xs\n   \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (x # xs \\<in> paths (substitute f T (substitute f' T t))) =\n  (x # xs\n   \\<in> paths (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (xs \\<in> paths (substitute f T (substitute f' T t))) =\n  (xs \\<in> paths\n             (substitute (\\<lambda>x. f x \\<otimes>\\<otimes> f' x) T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ttree_rest_substitute:\n  assumes \"\\<And> x. carrier (f x) \\<inter> S = {}\"\n  shows \"ttree_restr S (substitute f T t) = ttree_restr S t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr S (substitute f T t) = ttree_restr S t", "proof(rule paths_inj, rule set_eqI, rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S t)\n 2. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S t)\n 2. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "assume \"xs \\<in> paths (ttree_restr S (substitute f T t))\""], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S t)\n 2. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (ttree_restr S (substitute f T t))", "obtain xs' where [simp]: \"xs = filter (\\<lambda> x'. x' \\<in> S) xs'\" and \"xs' \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs = filter (\\<lambda>x'. x' \\<in> S) xs';\n         xs' \\<in> paths (substitute f T t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs'\n  xs' \\<in> paths (substitute f T t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S t)\n 2. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "from this(2) assms"], ["proof (chain)\npicking this:\n  xs' \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}", "have \"filter (\\<lambda> x'. x' \\<in> S) xs' \\<in>  paths (ttree_restr S t)\""], ["proof (prove)\nusing this:\n  xs' \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs' \\<in> paths (ttree_restr S t)", "proof (induction xs' arbitrary: f t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) []\n                         \\<in> paths (ttree_restr S t)\n 2. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) []\n                         \\<in> paths (ttree_restr S t)\n 2. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) [] \\<in> paths (ttree_restr S t)", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) [] \\<in> paths (ttree_restr S t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "case (Cons x xs f t)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths (substitute ?f T ?t);\n   \\<And>x. carrier (?f x) \\<inter> S = {}\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                    \\<in> paths (ttree_restr S ?t)\n  x # xs \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "from Cons.prems"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}", "have \"possible t x\" and \"xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. possible t x &&&\n    xs \\<in> paths\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "by auto"], ["proof (state)\nthis:\n  possible t x\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  carrier (f ?x) \\<inter> S = {}", "have \"(\\<And>x'. carrier (f_nxt f T x x') \\<inter> S = {})\""], ["proof (prove)\nusing this:\n  carrier (f ?x) \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>x'. carrier (f_nxt f T x x') \\<inter> S = {}", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?x') \\<inter> S = {}\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "from  Cons.IH[OF \\<open>xs \\<in> _\\<close> this]"], ["proof (chain)\npicking this:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x))", "have \"[x'\\<leftarrow>xs . x' \\<in> S] \\<in> paths (ttree_restr S (nxt t x) \\<otimes>\\<otimes> ttree_restr S (f x))\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs\n    \\<in> paths\n           (ttree_restr S (nxt t x) \\<otimes>\\<otimes> ttree_restr S (f x))", "by (simp add: ttree_restr_both)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (ttree_restr S (nxt t x) \\<otimes>\\<otimes> ttree_restr S (f x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "hence \"[x'\\<leftarrow>xs . x' \\<in> S] \\<in> paths (ttree_restr S (nxt t x))\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (ttree_restr S (nxt t x) \\<otimes>\\<otimes> ttree_restr S (f x))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs\n    \\<in> paths (ttree_restr S (nxt t x))", "by (simp add: ttree_restr_is_empty[OF Cons.prems(2)])"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs \\<in> paths (ttree_restr S (nxt t x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs' f t.\n       \\<lbrakk>\\<And>f t.\n                   \\<lbrakk>xs' \\<in> paths (substitute f T t);\n                    \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n                   \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs'\n                                     \\<in> paths (ttree_restr S t);\n        a # xs' \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<inter> S = {}\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (a # xs')\n                         \\<in> paths (ttree_restr S t)", "with \\<open>possible t x\\<close>"], ["proof (chain)\npicking this:\n  possible t x\n  filter (\\<lambda>x'. x' \\<in> S) xs \\<in> paths (ttree_restr S (nxt t x))", "show \"[x'\\<leftarrow>x#xs . x' \\<in> S] \\<in> paths (ttree_restr S t)\""], ["proof (prove)\nusing this:\n  possible t x\n  filter (\\<lambda>x'. x' \\<in> S) xs \\<in> paths (ttree_restr S (nxt t x))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs) \\<in> paths (ttree_restr S t)", "by (cases \"x \\<in> S\") (auto simp add: Cons_path ttree_restr_possible  dest: subsetD[OF ttree_restr_nxt_subset2]  subsetD[OF ttree_restr_nxt_subset])"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) (x # xs) \\<in> paths (ttree_restr S t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs' \\<in> paths (ttree_restr S t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S t)\n 2. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "thus \"xs \\<in> paths (ttree_restr S t)\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs' \\<in> paths (ttree_restr S t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (ttree_restr S t)", "by simp"], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "assume \"xs \\<in> paths (ttree_restr S t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (ttree_restr S t)", "obtain xs' where [simp]:\"xs = filter (\\<lambda> x'. x' \\<in> S) xs'\" and \"xs' \\<in> paths t\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (ttree_restr S t)\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs = filter (\\<lambda>x'. x' \\<in> S) xs';\n         xs' \\<in> paths t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs'\n  xs' \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "from this(2)"], ["proof (chain)\npicking this:\n  xs' \\<in> paths t", "have \"xs' \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  xs' \\<in> paths t\n\ngoal (1 subgoal):\n 1. xs' \\<in> paths (substitute f T t)", "by (rule subsetD[OF substitute_contains_arg])"], ["proof (state)\nthis:\n  xs' \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S t) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "thus \"xs \\<in> paths (ttree_restr S (substitute f T t))\""], ["proof (prove)\nusing this:\n  xs' \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (ttree_restr S (substitute f T t))", "by (auto simp add: filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>An alternative characterization of substitution\\<close>"], ["", "inductive substitute'' :: \"('a \\<Rightarrow> 'a ttree) \\<Rightarrow> 'a set \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  substitute''_Nil: \"substitute'' f T [] []\"\n  | substitute''_Cons:\n    \"zs \\<in> paths (f x) \\<Longrightarrow> xs' \\<in> interleave xs zs \\<Longrightarrow> substitute'' (f_nxt f T x) T xs' ys\n       \\<Longrightarrow> substitute'' f T (x#xs) (x#ys)\""], ["", "inductive_cases substitute''_NilE[elim]: \"substitute'' f T xs []\"  \"substitute'' f T [] xs\""], ["", "inductive_cases substitute''_ConsE[elim]: \"substitute'' f T (x#xs) ys\""], ["", "lemma substitute_substitute'':\n  \"xs \\<in> paths (substitute f T t) \\<longleftrightarrow> (\\<exists> xs' \\<in> paths t. substitute'' f T xs' xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> paths (substitute f T t)) =\n    (\\<exists>xs'\\<in>paths t. substitute'' f T xs' xs)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n    \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs\n 2. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "assume \"xs \\<in> paths (substitute f T t)\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal (2 subgoals):\n 1. xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n    \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs\n 2. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "thus \"\\<exists> xs' \\<in> paths t. substitute'' f T xs' xs\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs", "proof(induction xs arbitrary: f t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f t.\n       [] \\<in> paths (substitute f T t) \\<Longrightarrow>\n       \\<exists>xs'\\<in>paths t. substitute'' f T xs' []\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f T t)\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       [] \\<in> paths (substitute f T t) \\<Longrightarrow>\n       \\<exists>xs'\\<in>paths t. substitute'' f T xs' []\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "have \"substitute'' f T [] []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitute'' f T [] []", ".."], ["proof (state)\nthis:\n  substitute'' f T [] []\n\ngoal (2 subgoals):\n 1. \\<And>f t.\n       [] \\<in> paths (substitute f T t) \\<Longrightarrow>\n       \\<exists>xs'\\<in>paths t. substitute'' f T xs' []\n 2. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  substitute'' f T [] []\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' []", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' []\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "case (Cons x xs f t)"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute ?f T ?t) \\<Longrightarrow>\n  \\<exists>xs'\\<in>paths ?t. substitute'' ?f T xs' xs\n  x # xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "from \\<open>x # xs \\<in> paths (substitute f T t)\\<close>"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)", "have \"possible t x\" and \"xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. possible t x &&&\n    xs \\<in> paths\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "by (auto simp add: Cons_path)"], ["proof (state)\nthis:\n  possible t x\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "from Cons.IH[OF this(2)]"], ["proof (chain)\npicking this:\n  \\<exists>xs'\\<in>paths (nxt t x \\<otimes>\\<otimes> f x).\n     substitute'' (f_nxt f T x) T xs' xs", "obtain xs' where \"xs' \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)\" and \"substitute'' (f_nxt f T x) T xs' xs\""], ["proof (prove)\nusing this:\n  \\<exists>xs'\\<in>paths (nxt t x \\<otimes>\\<otimes> f x).\n     substitute'' (f_nxt f T x) T xs' xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs' \\<in> paths (nxt t x \\<otimes>\\<otimes> f x);\n         substitute'' (f_nxt f T x) T xs' xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs' \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)\n  substitute'' (f_nxt f T x) T xs' xs\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "from this(1)"], ["proof (chain)\npicking this:\n  xs' \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)", "obtain ys' zs' where \"ys' \\<in> paths (nxt t x)\" and \"zs' \\<in> paths (f x)\" and \"xs' \\<in> interleave ys' zs'\""], ["proof (prove)\nusing this:\n  xs' \\<in> paths (nxt t x \\<otimes>\\<otimes> f x)\n\ngoal (1 subgoal):\n 1. (\\<And>ys' zs'.\n        \\<lbrakk>ys' \\<in> paths (nxt t x); zs' \\<in> paths (f x);\n         xs' \\<in> ys' \\<otimes> zs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: paths_both)"], ["proof (state)\nthis:\n  ys' \\<in> paths (nxt t x)\n  zs' \\<in> paths (f x)\n  xs' \\<in> ys' \\<otimes> zs'\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "from this(2,3) \\<open>substitute'' (f_nxt f T x) T xs' xs\\<close>"], ["proof (chain)\npicking this:\n  zs' \\<in> paths (f x)\n  xs' \\<in> ys' \\<otimes> zs'\n  substitute'' (f_nxt f T x) T xs' xs", "have \"substitute'' f T (x # ys') (x # xs)\""], ["proof (prove)\nusing this:\n  zs' \\<in> paths (f x)\n  xs' \\<in> ys' \\<otimes> zs'\n  substitute'' (f_nxt f T x) T xs' xs\n\ngoal (1 subgoal):\n 1. substitute'' f T (x # ys') (x # xs)", ".."], ["proof (state)\nthis:\n  substitute'' f T (x # ys') (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "moreover"], ["proof (state)\nthis:\n  substitute'' f T (x # ys') (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "from \\<open>ys' \\<in> paths (nxt t x)\\<close> \\<open>possible t x\\<close>"], ["proof (chain)\npicking this:\n  ys' \\<in> paths (nxt t x)\n  possible t x", "have \"x # ys' \\<in> paths t\""], ["proof (prove)\nusing this:\n  ys' \\<in> paths (nxt t x)\n  possible t x\n\ngoal (1 subgoal):\n 1. x # ys' \\<in> paths t", "by (simp add: Cons_path)"], ["proof (state)\nthis:\n  x # ys' \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<And>a xs f t.\n       \\<lbrakk>\\<And>f t.\n                   xs \\<in> paths (substitute f T t) \\<Longrightarrow>\n                   \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs;\n        a # xs \\<in> paths (substitute f T t)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs'\\<in>paths t.\n                            substitute'' f T xs' (a # xs)", "ultimately"], ["proof (chain)\npicking this:\n  substitute'' f T (x # ys') (x # xs)\n  x # ys' \\<in> paths t", "show ?case"], ["proof (prove)\nusing this:\n  substitute'' f T (x # ys') (x # xs)\n  x # ys' \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' (x # xs)", "by auto"], ["proof (state)\nthis:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "assume \"\\<exists> xs' \\<in> paths t. substitute'' f T xs' xs\""], ["proof (state)\nthis:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "then"], ["proof (chain)\npicking this:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs", "obtain xs' where  \"substitute'' f T xs' xs\" and \"xs' \\<in> paths t\""], ["proof (prove)\nusing this:\n  \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>substitute'' f T xs' xs; xs' \\<in> paths t\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  substitute'' f T xs' xs\n  xs' \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<exists>xs'\\<in>paths t. substitute'' f T xs' xs \\<Longrightarrow>\n    xs \\<in> paths (substitute f T t)", "thus \"xs \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  substitute'' f T xs' xs\n  xs' \\<in> paths t\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T t)", "proof(induction arbitrary: t rule: substitute''.induct[case_names Nil Cons])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       [] \\<in> paths t \\<Longrightarrow> [] \\<in> paths (substitute f T t)\n 2. \\<And>zs f x xs' xs T ys t.\n       \\<lbrakk>zs \\<in> paths (f x); xs' \\<in> xs \\<otimes> zs;\n        substitute'' (f_nxt f T x) T xs' ys;\n        \\<And>t.\n           xs' \\<in> paths t \\<Longrightarrow>\n           ys \\<in> paths (substitute (f_nxt f T x) T t);\n        x # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> x # ys \\<in> paths (substitute f T t)", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths t\n\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       [] \\<in> paths t \\<Longrightarrow> [] \\<in> paths (substitute f T t)\n 2. \\<And>zs f x xs' xs T ys t.\n       \\<lbrakk>zs \\<in> paths (f x); xs' \\<in> xs \\<otimes> zs;\n        substitute'' (f_nxt f T x) T xs' ys;\n        \\<And>t.\n           xs' \\<in> paths t \\<Longrightarrow>\n           ys \\<in> paths (substitute (f_nxt f T x) T t);\n        x # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> x # ys \\<in> paths (substitute f T t)", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths t\n\ngoal (1 subgoal):\n 1. [] \\<in> paths (substitute f_ T_ t)", "by simp"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t)\n\ngoal (1 subgoal):\n 1. \\<And>zs f x xs' xs T ys t.\n       \\<lbrakk>zs \\<in> paths (f x); xs' \\<in> xs \\<otimes> zs;\n        substitute'' (f_nxt f T x) T xs' ys;\n        \\<And>t.\n           xs' \\<in> paths t \\<Longrightarrow>\n           ys \\<in> paths (substitute (f_nxt f T x) T t);\n        x # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> x # ys \\<in> paths (substitute f T t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>zs f x xs' xs T ys t.\n       \\<lbrakk>zs \\<in> paths (f x); xs' \\<in> xs \\<otimes> zs;\n        substitute'' (f_nxt f T x) T xs' ys;\n        \\<And>t.\n           xs' \\<in> paths t \\<Longrightarrow>\n           ys \\<in> paths (substitute (f_nxt f T x) T t);\n        x # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> x # ys \\<in> paths (substitute f T t)", "case (Cons zs x xs' xs ys t)"], ["proof (state)\nthis:\n  zs \\<in> paths (x xs')\n  xs \\<in> ys \\<otimes> zs\n  substitute'' (f_nxt x ta__ xs') ta__ xs ys_\n  xs \\<in> paths ?t \\<Longrightarrow>\n  ys_ \\<in> paths (substitute (f_nxt x ta__ xs') ta__ ?t)\n  xs' # ys \\<in> paths t\n\ngoal (1 subgoal):\n 1. \\<And>zs f x xs' xs T ys t.\n       \\<lbrakk>zs \\<in> paths (f x); xs' \\<in> xs \\<otimes> zs;\n        substitute'' (f_nxt f T x) T xs' ys;\n        \\<And>t.\n           xs' \\<in> paths t \\<Longrightarrow>\n           ys \\<in> paths (substitute (f_nxt f T x) T t);\n        x # xs \\<in> paths t\\<rbrakk>\n       \\<Longrightarrow> x # ys \\<in> paths (substitute f T t)", "from Cons.prems Cons.hyps"], ["proof (chain)\npicking this:\n  xs' # ys \\<in> paths t\n  zs \\<in> paths (x xs')\n  xs \\<in> ys \\<otimes> zs\n  substitute'' (f_nxt x ta__ xs') ta__ xs ys_", "show ?case"], ["proof (prove)\nusing this:\n  xs' # ys \\<in> paths t\n  zs \\<in> paths (x xs')\n  xs \\<in> ys \\<otimes> zs\n  substitute'' (f_nxt x ta__ xs') ta__ xs ys_\n\ngoal (1 subgoal):\n 1. xs' # ys_ \\<in> paths (substitute x ta__ t)", "by (force simp add: Cons_path paths_both intro!: Cons.IH)"], ["proof (state)\nthis:\n  xs' # ys_ \\<in> paths (substitute x ta__ t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma paths_substitute_substitute'':\n  \"paths (substitute f T t) = \\<Union>((\\<lambda> xs . Collect (substitute'' f T xs)) ` paths t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. paths (substitute f T t) =\n    (\\<Union>xs\\<in>paths t. Collect (substitute'' f T xs))", "by (auto simp add: substitute_substitute'')"], ["", "lemma ttree_rest_substitute2:\n  assumes \"\\<And> x. carrier (f x) \\<subseteq> S\"\n  assumes \"const_on f (-S) empty\"\n  shows \"ttree_restr S (substitute f T t) = substitute f T (ttree_restr S t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ttree_restr S (substitute f T t) = substitute f T (ttree_restr S t)", "proof(rule paths_inj, rule set_eqI, rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "fix xs"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "assume \"xs \\<in> paths (ttree_restr S (substitute f T t))\""], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (ttree_restr S (substitute f T t))", "obtain xs' where [simp]: \"xs = filter (\\<lambda> x'. x' \\<in> S) xs'\" and \"xs' \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs = filter (\\<lambda>x'. x' \\<in> S) xs';\n         xs' \\<in> paths (substitute f T t)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs'\n  xs' \\<in> paths (substitute f T t)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "from this(2) assms"], ["proof (chain)\npicking this:\n  xs' \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty", "have \"filter (\\<lambda> x'. x' \\<in> S) xs' \\<in> paths (substitute f T (ttree_restr S t))\""], ["proof (prove)\nusing this:\n  xs' \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs'\n    \\<in> paths (substitute f T (ttree_restr S t))", "proof (induction f T t xs' rule: substitute_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) []\n                         \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "case Nil"], ["proof (state)\nthis:\n  [] \\<in> paths (substitute f_ T_ t_)\n  carrier (f_ ?x) \\<subseteq> S\n  const_on f_ (- S) TTree.empty\n\ngoal (2 subgoals):\n 1. \\<And>f T t.\n       \\<lbrakk>[] \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) []\n                         \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "thus ?case"], ["proof (prove)\nusing this:\n  [] \\<in> paths (substitute f_ T_ t_)\n  carrier (f_ ?x) \\<subseteq> S\n  const_on f_ (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) []\n    \\<in> paths (substitute f_ T_ (ttree_restr S t_))", "by simp"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) []\n  \\<in> paths (substitute f_ T_ (ttree_restr S t_))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "case (Cons f T t x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs \\<in> paths\n                     (substitute (f_nxt f T x) T\n                       (nxt t x \\<otimes>\\<otimes> f x));\n   \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n   const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                    \\<in> paths\n                           (substitute (f_nxt f T x) T\n                             (ttree_restr S\n                               (nxt t x \\<otimes>\\<otimes> f x)))\n  x # xs \\<in> paths (substitute f T t)\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "from Cons.prems(1)"], ["proof (chain)\npicking this:\n  x # xs \\<in> paths (substitute f T t)", "have \"possible t x\" and \"xs \\<in> paths (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\""], ["proof (prove)\nusing this:\n  x # xs \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. possible t x &&&\n    xs \\<in> paths\n              (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))", "by auto"], ["proof (state)\nthis:\n  possible t x\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "note this(2)"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "moreover"], ["proof (state)\nthis:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "from  Cons.prems(2)"], ["proof (chain)\npicking this:\n  carrier (f ?x) \\<subseteq> S", "have \"\\<And> x'. carrier (f_nxt f T x x') \\<subseteq> S\""], ["proof (prove)\nusing this:\n  carrier (f ?x) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>x'. carrier (f_nxt f T x x') \\<subseteq> S", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?x') \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "moreover"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?x') \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "from  Cons.prems(3)"], ["proof (chain)\npicking this:\n  const_on f (- S) TTree.empty", "have \"const_on (f_nxt f T x) (-S) empty\""], ["proof (prove)\nusing this:\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. const_on (f_nxt f T x) (- S) TTree.empty", "by (force simp add: f_nxt_def)"], ["proof (state)\nthis:\n  const_on (f_nxt f T x) (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "ultimately"], ["proof (chain)\npicking this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  carrier (f_nxt f T x ?x') \\<subseteq> S\n  const_on (f_nxt f T x) (- S) TTree.empty", "have \"[x'\\<leftarrow>xs . x' \\<in> S] \\<in> paths (substitute (f_nxt f T x) T (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\""], ["proof (prove)\nusing this:\n  xs \\<in> paths\n            (substitute (f_nxt f T x) T (nxt t x \\<otimes>\\<otimes> f x))\n  carrier (f_nxt f T x ?x') \\<subseteq> S\n  const_on (f_nxt f T x) (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs\n    \\<in> paths\n           (substitute (f_nxt f T x) T\n             (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))", "by (rule Cons.IH)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (substitute (f_nxt f T x) T\n           (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "hence *: \"[x'\\<leftarrow>xs . x' \\<in> S] \\<in> paths (substitute (f_nxt f T x) T (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (substitute (f_nxt f T x) T\n           (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) xs\n    \\<in> paths\n           (substitute (f_nxt f T x) T\n             (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))", "by (simp add: ttree_restr_both)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (substitute (f_nxt f T x) T\n           (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\n\ngoal (1 subgoal):\n 1. \\<And>f T t x xs.\n       \\<lbrakk>\\<lbrakk>xs \\<in> paths\n                                   (substitute (f_nxt f T x) T\n                                     (nxt t x \\<otimes>\\<otimes> f x));\n                 \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S;\n                 const_on (f_nxt f T x) (- S) TTree.empty\\<rbrakk>\n                \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) xs\n                                  \\<in> paths\n   (substitute (f_nxt f T x) T\n     (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)));\n        x # xs \\<in> paths (substitute f T t);\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n                         \\<in> paths (substitute f T (ttree_restr S t))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "proof (cases \"x \\<in> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))\n 2. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "case True"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))\n 2. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "using \\<open>possible t x\\<close> Cons.prems(3) * True"], ["proof (prove)\nusing this:\n  possible t x\n  const_on f (- S) TTree.empty\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (substitute (f_nxt f T x) T\n           (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "by (auto simp add: ttree_restr_both ttree_restr_noop[OF Cons.prems(2)] intro: ttree_restr_possible\n                    dest: subsetD[OF substitute_mono2[OF both_mono1[OF ttree_restr_nxt_subset]]])"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n  \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "case False"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "with \\<open>const_on f (- S) TTree.empty\\<close>"], ["proof (chain)\npicking this:\n  const_on f (- S) TTree.empty\n  x \\<notin> S", "have [simp]: \"f x = empty\""], ["proof (prove)\nusing this:\n  const_on f (- S) TTree.empty\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. f x = TTree.empty", "by auto"], ["proof (state)\nthis:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "hence [simp]: \"f_nxt f T x = f\""], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x = f", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x = f\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "using * False"], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs\n  \\<in> paths\n         (substitute (f_nxt f T x) T\n           (ttree_restr S (nxt t x \\<otimes>\\<otimes> f x)))\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n    \\<in> paths (substitute f T (ttree_restr S t))", "by (auto dest:  subsetD[OF substitute_mono2[OF ttree_restr_nxt_subset2]])"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n  \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) (x # xs)\n  \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) xs'\n  \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       x \\<in> paths (ttree_restr S (substitute f T t)) \\<Longrightarrow>\n       x \\<in> paths (substitute f T (ttree_restr S t))\n 2. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "thus \"xs \\<in> paths (substitute f T (ttree_restr S t))\""], ["proof (prove)\nusing this:\n  filter (\\<lambda>x'. x' \\<in> S) xs'\n  \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (substitute f T (ttree_restr S t))", "by simp"], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "assume \"xs \\<in> paths (substitute f T (ttree_restr S t))\""], ["proof (state)\nthis:\n  xs \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "then"], ["proof (chain)\npicking this:\n  xs \\<in> paths (substitute f T (ttree_restr S t))", "obtain xs' where \"xs' \\<in> paths t\" and \"substitute'' f T (filter (\\<lambda> x'. x'\\<in>S) xs') xs \""], ["proof (prove)\nusing this:\n  xs \\<in> paths (substitute f T (ttree_restr S t))\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs' \\<in> paths t;\n         substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding substitute_substitute''"], ["proof (prove)\nusing this:\n  \\<exists>xs'\\<in>paths (ttree_restr S t). substitute'' f T xs' xs\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>xs' \\<in> paths t;\n         substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs' \\<in> paths t\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "from this(2) assms"], ["proof (chain)\npicking this:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty", "have \"\\<exists> xs''. xs = filter (\\<lambda> x'. x'\\<in>S) xs'' \\<and> substitute'' f T xs' xs''\""], ["proof (prove)\nusing this:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       xs = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs' xs''", "proof(induction \"(xs',xs)\" arbitrary: f xs' xs rule: measure_induct_rule[where f = \"\\<lambda> (xs,ys). length (filter (\\<lambda> x'. x' \\<notin> S) xs) + length ys\"])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs' xs f.\n       \\<lbrakk>\\<And>xs'a xsa f.\n                   \\<lbrakk>(case (xs'a, xsa) of\n                             (xs, ys) \\<Rightarrow>\n                               length\n                                (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                               length ys)\n                            < (case (xs', xs) of\n                               (xs, ys) \\<Rightarrow>\n                                 length\n                                  (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                                 length ys);\n                    substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs'a)\n                     xsa;\n                    \\<And>x. carrier (f x) \\<subseteq> S;\n                    const_on f (- S) TTree.empty\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xs''.\n  xsa = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n  substitute'' f T xs'a xs'';\n        substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs;\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs''.\n                            xs =\n                            filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n                            substitute'' f T xs' xs''", "case (less xs ys)"], ["proof (state)\nthis:\n  \\<lbrakk>(case (?xs', ?xs) of\n            (xs, ys) \\<Rightarrow>\n              length (filter (\\<lambda>x'. x' \\<notin> S) xs) + length ys)\n           < (case (xs, ys) of\n              (xs, ys) \\<Rightarrow>\n                length (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                length ys);\n   substitute'' ?f T (filter (\\<lambda>x'. x' \\<in> S) ?xs') ?xs;\n   \\<And>x. carrier (?f x) \\<subseteq> S;\n   const_on ?f (- S) TTree.empty\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xs''.\n                       ?xs = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n                       substitute'' ?f T ?xs' xs''\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<And>xs' xs f.\n       \\<lbrakk>\\<And>xs'a xsa f.\n                   \\<lbrakk>(case (xs'a, xsa) of\n                             (xs, ys) \\<Rightarrow>\n                               length\n                                (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                               length ys)\n                            < (case (xs', xs) of\n                               (xs, ys) \\<Rightarrow>\n                                 length\n                                  (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                                 length ys);\n                    substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs'a)\n                     xsa;\n                    \\<And>x. carrier (f x) \\<subseteq> S;\n                    const_on f (- S) TTree.empty\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xs''.\n  xsa = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n  substitute'' f T xs'a xs'';\n        substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs;\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs''.\n                            xs =\n                            filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n                            substitute'' f T xs' xs''", "note \\<open>substitute'' f T [x'\\<leftarrow>xs . x' \\<in> S] ys\\<close>"], ["proof (state)\nthis:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n\ngoal (1 subgoal):\n 1. \\<And>xs' xs f.\n       \\<lbrakk>\\<And>xs'a xsa f.\n                   \\<lbrakk>(case (xs'a, xsa) of\n                             (xs, ys) \\<Rightarrow>\n                               length\n                                (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                               length ys)\n                            < (case (xs', xs) of\n                               (xs, ys) \\<Rightarrow>\n                                 length\n                                  (filter (\\<lambda>x'. x' \\<notin> S) xs) +\n                                 length ys);\n                    substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs'a)\n                     xsa;\n                    \\<And>x. carrier (f x) \\<subseteq> S;\n                    const_on f (- S) TTree.empty\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>xs''.\n  xsa = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n  substitute'' f T xs'a xs'';\n        substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') xs;\n        \\<And>x. carrier (f x) \\<subseteq> S;\n        const_on f (- S) TTree.empty\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs''.\n                            xs =\n                            filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n                            substitute'' f T xs' xs''", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "proof(cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "case Nil"], ["proof (state)\nthis:\n  xs = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "with less.prems"], ["proof (chain)\npicking this:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  xs = []", "have \"ys = []\""], ["proof (prove)\nusing this:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  xs = []\n\ngoal (1 subgoal):\n 1. ys = []", "by auto"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "thus ?thesis"], ["proof (prove)\nusing this:\n  ys = []\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "using Nil"], ["proof (prove)\nusing this:\n  ys = []\n  xs = []\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "by (auto,  metis filter.simps(1) substitute''_Nil)"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs xs''\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "case (Cons x xs')"], ["proof (state)\nthis:\n  xs = x # xs'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       xs = a # list \\<Longrightarrow>\n       \\<exists>xs''.\n          ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n          substitute'' f T xs xs''", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "proof (cases \"x \\<in> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "case True"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "with Cons less.prems"], ["proof (chain)\npicking this:\n  xs = x # xs'\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  x \\<in> S", "have \"substitute'' f T (x# [x'\\<leftarrow>xs' . x' \\<in> S]) ys\""], ["proof (prove)\nusing this:\n  xs = x # xs'\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. substitute'' f T (x # filter (\\<lambda>x'. x' \\<in> S) xs') ys", "by simp"], ["proof (state)\nthis:\n  substitute'' f T (x # filter (\\<lambda>x'. x' \\<in> S) xs') ys\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from substitute''_ConsE[OF this]"], ["proof (chain)\npicking this:\n  (\\<And>zs xs' ysa.\n      \\<lbrakk>ys = x # ysa; zs \\<in> paths (f x);\n       xs' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs;\n       substitute'' (f_nxt f T x) T xs' ysa\\<rbrakk>\n      \\<Longrightarrow> ?P) \\<Longrightarrow>\n  ?P", "obtain zs xs'' ys' where \"ys = x # ys'\" and \"zs \\<in> paths (f x)\" and \"xs'' \\<in> interleave [x'\\<leftarrow>xs' . x' \\<in> S] zs\" and \"substitute'' (f_nxt f T x) T xs'' ys'\""], ["proof (prove)\nusing this:\n  (\\<And>zs xs' ysa.\n      \\<lbrakk>ys = x # ysa; zs \\<in> paths (f x);\n       xs' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs;\n       substitute'' (f_nxt f T x) T xs' ysa\\<rbrakk>\n      \\<Longrightarrow> ?P) \\<Longrightarrow>\n  ?P\n\ngoal (1 subgoal):\n 1. (\\<And>ys' zs xs''.\n        \\<lbrakk>ys = x # ys'; zs \\<in> paths (f x);\n         xs'' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs;\n         substitute'' (f_nxt f T x) T xs'' ys'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["proof (state)\nthis:\n  ys = x # ys'\n  zs \\<in> paths (f x)\n  xs'' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs\n  substitute'' (f_nxt f T x) T xs'' ys'\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from \\<open>zs \\<in> paths (f x)\\<close>  less.prems(2)"], ["proof (chain)\npicking this:\n  zs \\<in> paths (f x)\n  carrier (f ?x) \\<subseteq> S", "have \"set zs \\<subseteq> S\""], ["proof (prove)\nusing this:\n  zs \\<in> paths (f x)\n  carrier (f ?x) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. set zs \\<subseteq> S", "by (auto simp add: Union_paths_carrier[symmetric])"], ["proof (state)\nthis:\n  set zs \\<subseteq> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "hence [simp]: \"[x'\\<leftarrow>zs . x' \\<in> S] = zs\" \"[x'\\<leftarrow>zs . x' \\<notin> S] = []\""], ["proof (prove)\nusing this:\n  set zs \\<subseteq> S\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>x'. x' \\<in> S) zs = zs &&&\n    filter (\\<lambda>x'. x' \\<notin> S) zs = []", "by (metis UnCI Un_subset_iff eq_iff filter_True,\n               metis \\<open>set zs \\<subseteq> S\\<close> filter_False insert_absorb insert_subset)"], ["proof (state)\nthis:\n  filter (\\<lambda>x'. x' \\<in> S) zs = zs\n  filter (\\<lambda>x'. x' \\<notin> S) zs = []\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from \\<open>xs'' \\<in> interleave [x'\\<leftarrow>xs' . x' \\<in> S] zs\\<close>"], ["proof (chain)\npicking this:\n  xs'' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs", "have \"xs'' \\<in> interleave [x'\\<leftarrow>xs' . x' \\<in> S] [x'\\<leftarrow>zs . x' \\<in> S]\""], ["proof (prove)\nusing this:\n  xs'' \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes> zs\n\ngoal (1 subgoal):\n 1. xs''\n    \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes>\n          filter (\\<lambda>x'. x' \\<in> S) zs", "by simp"], ["proof (state)\nthis:\n  xs''\n  \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes>\n        filter (\\<lambda>x'. x' \\<in> S) zs\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "then"], ["proof (chain)\npicking this:\n  xs''\n  \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes>\n        filter (\\<lambda>x'. x' \\<in> S) zs", "obtain xs''' where \"xs'' = [x'\\<leftarrow>xs''' . x' \\<in> S]\" and \"xs''' \\<in> interleave xs' zs\""], ["proof (prove)\nusing this:\n  xs''\n  \\<in> filter (\\<lambda>x'. x' \\<in> S) xs' \\<otimes>\n        filter (\\<lambda>x'. x' \\<in> S) zs\n\ngoal (1 subgoal):\n 1. (\\<And>xs'''.\n        \\<lbrakk>xs'' = filter (\\<lambda>x'. x' \\<in> S) xs''';\n         xs''' \\<in> xs' \\<otimes> zs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule interleave_filter)"], ["proof (state)\nthis:\n  xs'' = filter (\\<lambda>x'. x' \\<in> S) xs'''\n  xs''' \\<in> xs' \\<otimes> zs\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from \\<open>xs''' \\<in> interleave xs' zs\\<close>"], ["proof (chain)\npicking this:\n  xs''' \\<in> xs' \\<otimes> zs", "have l: \"\\<And> P. length (filter P xs''') = length (filter P xs') + length (filter P zs)\""], ["proof (prove)\nusing this:\n  xs''' \\<in> xs' \\<otimes> zs\n\ngoal (1 subgoal):\n 1. \\<And>P.\n       length (filter P xs''') =\n       length (filter P xs') + length (filter P zs)", "by (induction) auto"], ["proof (state)\nthis:\n  length (filter ?P xs''') = length (filter ?P xs') + length (filter ?P zs)\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from \\<open>substitute'' (f_nxt f T x) T xs'' ys'\\<close> \\<open>xs'' = _\\<close>"], ["proof (chain)\npicking this:\n  substitute'' (f_nxt f T x) T xs'' ys'\n  xs'' = filter (\\<lambda>x'. x' \\<in> S) xs'''", "have \"substitute'' (f_nxt f T x) T [x'\\<leftarrow>xs''' . x' \\<in> S] ys'\""], ["proof (prove)\nusing this:\n  substitute'' (f_nxt f T x) T xs'' ys'\n  xs'' = filter (\\<lambda>x'. x' \\<in> S) xs'''\n\ngoal (1 subgoal):\n 1. substitute'' (f_nxt f T x) T (filter (\\<lambda>x'. x' \\<in> S) xs''')\n     ys'", "by simp"], ["proof (state)\nthis:\n  substitute'' (f_nxt f T x) T (filter (\\<lambda>x'. x' \\<in> S) xs''') ys'\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "moreover"], ["proof (state)\nthis:\n  substitute'' (f_nxt f T x) T (filter (\\<lambda>x'. x' \\<in> S) xs''') ys'\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from less.prems(2)"], ["proof (chain)\npicking this:\n  carrier (f ?x) \\<subseteq> S", "have \"\\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S\""], ["proof (prove)\nusing this:\n  carrier (f ?x) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<And>xa. carrier (f_nxt f T x xa) \\<subseteq> S", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?xa) \\<subseteq> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "moreover"], ["proof (state)\nthis:\n  carrier (f_nxt f T x ?xa) \\<subseteq> S\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from less.prems(3)"], ["proof (chain)\npicking this:\n  const_on f (- S) TTree.empty", "have \"const_on (f_nxt f T x) (- S) TTree.empty\""], ["proof (prove)\nusing this:\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. const_on (f_nxt f T x) (- S) TTree.empty", "by (force simp add: f_nxt_def)"], ["proof (state)\nthis:\n  const_on (f_nxt f T x) (- S) TTree.empty\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "ultimately"], ["proof (chain)\npicking this:\n  substitute'' (f_nxt f T x) T (filter (\\<lambda>x'. x' \\<in> S) xs''') ys'\n  carrier (f_nxt f T x ?xa) \\<subseteq> S\n  const_on (f_nxt f T x) (- S) TTree.empty", "have \"\\<exists>ys''. ys' = [x'\\<leftarrow>ys'' . x' \\<in> S] \\<and> substitute'' (f_nxt f T x) T xs''' ys''\""], ["proof (prove)\nusing this:\n  substitute'' (f_nxt f T x) T (filter (\\<lambda>x'. x' \\<in> S) xs''') ys'\n  carrier (f_nxt f T x ?xa) \\<subseteq> S\n  const_on (f_nxt f T x) (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. \\<exists>ys''.\n       ys' = filter (\\<lambda>x'. x' \\<in> S) ys'' \\<and>\n       substitute'' (f_nxt f T x) T xs''' ys''", "by (rule less.hyps[rotated])\n               (auto simp add: \\<open>ys = _ \\<close> \\<open>xs =_\\<close> \\<open>x \\<in> S\\<close> \\<open>xs'' = _\\<close>[symmetric] l)[1]"], ["proof (state)\nthis:\n  \\<exists>ys''.\n     ys' = filter (\\<lambda>x'. x' \\<in> S) ys'' \\<and>\n     substitute'' (f_nxt f T x) T xs''' ys''\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "then"], ["proof (chain)\npicking this:\n  \\<exists>ys''.\n     ys' = filter (\\<lambda>x'. x' \\<in> S) ys'' \\<and>\n     substitute'' (f_nxt f T x) T xs''' ys''", "obtain ys'' where \"ys' = [x'\\<leftarrow>ys'' . x' \\<in> S]\" and \"substitute'' (f_nxt f T x) T xs''' ys''\""], ["proof (prove)\nusing this:\n  \\<exists>ys''.\n     ys' = filter (\\<lambda>x'. x' \\<in> S) ys'' \\<and>\n     substitute'' (f_nxt f T x) T xs''' ys''\n\ngoal (1 subgoal):\n 1. (\\<And>ys''.\n        \\<lbrakk>ys' = filter (\\<lambda>x'. x' \\<in> S) ys'';\n         substitute'' (f_nxt f T x) T xs''' ys''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ys' = filter (\\<lambda>x'. x' \\<in> S) ys''\n  substitute'' (f_nxt f T x) T xs''' ys''\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "hence \"ys = [x'\\<leftarrow>x#ys'' . x' \\<in> S]\""], ["proof (prove)\nusing this:\n  ys' = filter (\\<lambda>x'. x' \\<in> S) ys''\n  substitute'' (f_nxt f T x) T xs''' ys''\n\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')", "using \\<open>x \\<in> S\\<close> \\<open>ys = _\\<close>"], ["proof (prove)\nusing this:\n  ys' = filter (\\<lambda>x'. x' \\<in> S) ys''\n  substitute'' (f_nxt f T x) T xs''' ys''\n  x \\<in> S\n  ys = x # ys'\n\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')", "by simp"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "moreover"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from \\<open>zs \\<in> paths (f x)\\<close> \\<open>xs''' \\<in> interleave xs' zs\\<close> \\<open>substitute'' (f_nxt f T x) T xs''' ys''\\<close>"], ["proof (chain)\npicking this:\n  zs \\<in> paths (f x)\n  xs''' \\<in> xs' \\<otimes> zs\n  substitute'' (f_nxt f T x) T xs''' ys''", "have \"substitute'' f T (x#xs') (x#ys'')\""], ["proof (prove)\nusing this:\n  zs \\<in> paths (f x)\n  xs''' \\<in> xs' \\<otimes> zs\n  substitute'' (f_nxt f T x) T xs''' ys''\n\ngoal (1 subgoal):\n 1. substitute'' f T (x # xs') (x # ys'')", "by rule"], ["proof (state)\nthis:\n  substitute'' f T (x # xs') (x # ys'')\n\ngoal (2 subgoals):\n 1. x \\<in> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''\n 2. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "ultimately"], ["proof (chain)\npicking this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')\n  substitute'' f T (x # xs') (x # ys'')", "show ?thesis"], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')\n  substitute'' f T (x # xs') (x # ys'')\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "unfolding Cons"], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys'')\n  substitute'' f T (x # xs') (x # ys'')\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T (x # xs') xs''", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs xs''\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "case False"], ["proof (state)\nthis:\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "with Cons less.prems"], ["proof (chain)\npicking this:\n  xs = x # xs'\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  x \\<notin> S", "have \"substitute'' f T ([x'\\<leftarrow>xs' . x' \\<in> S]) ys\""], ["proof (prove)\nusing this:\n  xs = x # xs'\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs) ys\n  carrier (f ?x) \\<subseteq> S\n  const_on f (- S) TTree.empty\n  x \\<notin> S\n\ngoal (1 subgoal):\n 1. substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') ys", "by simp"], ["proof (state)\nthis:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') ys\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "hence \"\\<exists>ys'. ys = [x'\\<leftarrow>ys' . x' \\<in> S] \\<and> substitute'' f T xs' ys'\""], ["proof (prove)\nusing this:\n  substitute'' f T (filter (\\<lambda>x'. x' \\<in> S) xs') ys\n\ngoal (1 subgoal):\n 1. \\<exists>ys'.\n       ys = filter (\\<lambda>x'. x' \\<in> S) ys' \\<and>\n       substitute'' f T xs' ys'", "by (rule less.hyps[OF _ _ less.prems(2,3), rotated]) (auto simp add:  \\<open>xs =_\\<close> \\<open>x \\<notin>  S\\<close>)"], ["proof (state)\nthis:\n  \\<exists>ys'.\n     ys = filter (\\<lambda>x'. x' \\<in> S) ys' \\<and>\n     substitute'' f T xs' ys'\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "then"], ["proof (chain)\npicking this:\n  \\<exists>ys'.\n     ys = filter (\\<lambda>x'. x' \\<in> S) ys' \\<and>\n     substitute'' f T xs' ys'", "obtain ys' where \"ys = [x'\\<leftarrow>ys' . x' \\<in> S]\" and \"substitute'' f T xs' ys'\""], ["proof (prove)\nusing this:\n  \\<exists>ys'.\n     ys = filter (\\<lambda>x'. x' \\<in> S) ys' \\<and>\n     substitute'' f T xs' ys'\n\ngoal (1 subgoal):\n 1. (\\<And>ys'.\n        \\<lbrakk>ys = filter (\\<lambda>x'. x' \\<in> S) ys';\n         substitute'' f T xs' ys'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>x'. x' \\<in> S) ys'\n  substitute'' f T xs' ys'\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "from this(1)"], ["proof (chain)\npicking this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) ys'", "have \"ys = [x'\\<leftarrow>x#ys' . x' \\<in> S]\""], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) ys'\n\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')", "using \\<open>x \\<notin> S\\<close> \\<open>ys = _\\<close>"], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) ys'\n  x \\<notin> S\n  ys = filter (\\<lambda>x'. x' \\<in> S) ys'\n\ngoal (1 subgoal):\n 1. ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')", "by simp"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "moreover"], ["proof (state)\nthis:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "have [simp]: \"f x = empty\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = TTree.empty", "using \\<open>x \\<notin> S\\<close> less.prems(3)"], ["proof (prove)\nusing this:\n  x \\<notin> S\n  const_on f (- S) TTree.empty\n\ngoal (1 subgoal):\n 1. f x = TTree.empty", "by force"], ["proof (state)\nthis:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "hence \"f_nxt f T x = f\""], ["proof (prove)\nusing this:\n  f x = TTree.empty\n\ngoal (1 subgoal):\n 1. f_nxt f T x = f", "by (auto simp add: f_nxt_def)"], ["proof (state)\nthis:\n  f_nxt f T x = f\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "with \\<open>substitute'' f T xs' ys'\\<close>"], ["proof (chain)\npicking this:\n  substitute'' f T xs' ys'\n  f_nxt f T x = f", "have \"substitute'' f T (x#xs') (x#ys')\""], ["proof (prove)\nusing this:\n  substitute'' f T xs' ys'\n  f_nxt f T x = f\n\ngoal (1 subgoal):\n 1. substitute'' f T (x # xs') (x # ys')", "by (auto intro: substitute''.intros)"], ["proof (state)\nthis:\n  substitute'' f T (x # xs') (x # ys')\n\ngoal (1 subgoal):\n 1. x \\<notin> S \\<Longrightarrow>\n    \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "ultimately"], ["proof (chain)\npicking this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')\n  substitute'' f T (x # xs') (x # ys')", "show ?thesis"], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')\n  substitute'' f T (x # xs') (x # ys')\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T xs xs''", "unfolding Cons"], ["proof (prove)\nusing this:\n  ys = filter (\\<lambda>x'. x' \\<in> S) (x # ys')\n  substitute'' f T (x # xs') (x # ys')\n\ngoal (1 subgoal):\n 1. \\<exists>xs''.\n       ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n       substitute'' f T (x # xs') xs''", "by blast"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs xs''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs xs''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     ys = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs xs''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>xs''.\n     xs = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs' xs''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "then"], ["proof (chain)\npicking this:\n  \\<exists>xs''.\n     xs = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs' xs''", "obtain xs'' where \"xs = filter (\\<lambda> x'. x'\\<in>S) xs''\" and \"substitute'' f T xs' xs''\""], ["proof (prove)\nusing this:\n  \\<exists>xs''.\n     xs = filter (\\<lambda>x'. x' \\<in> S) xs'' \\<and>\n     substitute'' f T xs' xs''\n\ngoal (1 subgoal):\n 1. (\\<And>xs''.\n        \\<lbrakk>xs = filter (\\<lambda>x'. x' \\<in> S) xs'';\n         substitute'' f T xs' xs''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs''\n  substitute'' f T xs' xs''\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "from this(2) \\<open>xs' \\<in> paths t\\<close>"], ["proof (chain)\npicking this:\n  substitute'' f T xs' xs''\n  xs' \\<in> paths t", "have \"xs'' \\<in> paths (substitute f T t)\""], ["proof (prove)\nusing this:\n  substitute'' f T xs' xs''\n  xs' \\<in> paths t\n\ngoal (1 subgoal):\n 1. xs'' \\<in> paths (substitute f T t)", "by (auto simp add: substitute_substitute'')"], ["proof (state)\nthis:\n  xs'' \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> paths (substitute f T (ttree_restr S t)) \\<Longrightarrow>\n       x \\<in> paths (ttree_restr S (substitute f T t))", "with \\<open>xs = _\\<close>"], ["proof (chain)\npicking this:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs''\n  xs'' \\<in> paths (substitute f T t)", "show \"xs \\<in> paths (ttree_restr S (substitute f T t))\""], ["proof (prove)\nusing this:\n  xs = filter (\\<lambda>x'. x' \\<in> S) xs''\n  xs'' \\<in> paths (substitute f T t)\n\ngoal (1 subgoal):\n 1. xs \\<in> paths (ttree_restr S (substitute f T t))", "by (auto simp add:  filter_paths_conv_free_restr[symmetric])"], ["proof (state)\nthis:\n  xs \\<in> paths (ttree_restr S (substitute f T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}