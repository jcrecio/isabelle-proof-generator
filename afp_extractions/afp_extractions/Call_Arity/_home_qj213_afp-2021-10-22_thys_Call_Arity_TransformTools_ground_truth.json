{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/TransformTools.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma lift_transform_simps[simp]:\n  \"lift_transform t \\<bottom> e = e\"\n  \"lift_transform t (up\\<cdot>a) e = t a e\"", "lemma lift_transform_eqvt[eqvt]: \"\\<pi> \\<bullet>  lift_transform t a e = lift_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> a) (\\<pi> \\<bullet> e)\"", "lemma lift_transform_fun_cong[fundef_cong]:\n  \"(\\<And> a. t1 a e1 = t2 a e1) \\<Longrightarrow> a1 = a2 \\<Longrightarrow> e1 = e2 \\<Longrightarrow> lift_transform t1 a1 e1 = lift_transform t2 a2 e2\"", "lemma subst_lift_transform: \n  assumes \"\\<And> a. (t a e)[x ::= y] = t a (e[x ::= y])\"\n  shows \"(lift_transform t a e)[x ::=y] = lift_transform t a (e[x ::= y])\"", "lemma map_transform_eqvt[eqvt]: \"\\<pi> \\<bullet> map_transform t ae = map_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> ae)\"", "lemma domA_map_transform[simp]: \"domA (map_transform t ae \\<Gamma>) = domA \\<Gamma>\"", "lemma length_map_transform[simp]: \"length (map_transform t ae xs) = length xs\"", "lemma map_transform_delete:\n  \"map_transform t ae (delete x \\<Gamma>) = delete x (map_transform t ae \\<Gamma>)\"", "lemma map_transform_restrA:\n  \"map_transform t ae (restrictA S \\<Gamma>) = restrictA S (map_transform t ae \\<Gamma>)\"", "lemma delete_map_transform_env_delete:\n  \"delete x (map_transform t (env_delete x ae) \\<Gamma>) = delete x (map_transform t ae \\<Gamma>)\"", "lemma map_transform_Nil[simp]:\n  \"map_transform t ae [] = []\"", "lemma map_transform_Cons:\n  \"map_transform t ae ((x,e)# \\<Gamma>) = (x, lift_transform t (ae x) e) #  (map_transform t ae \\<Gamma>)\"", "lemma map_transform_append:\n  \"map_transform t ae (\\<Delta>@\\<Gamma>) = map_transform t ae \\<Delta> @ map_transform t ae \\<Gamma>\"", "lemma map_transform_fundef_cong[fundef_cong]:\n  \"(\\<And>x e a. (x,e) \\<in> set m1 \\<Longrightarrow> t1 a e = t2 a e) \\<Longrightarrow> ae1 = ae2 \\<Longrightarrow> m1 = m2 \\<Longrightarrow> map_transform t1 ae1 m1 = map_transform t2 ae2 m2\"", "lemma map_transform_cong:\n  \"(\\<And>x. x \\<in> domA m1 \\<Longrightarrow> ae x = ae' x) \\<Longrightarrow> m1 = m2 \\<Longrightarrow> map_transform t ae m1 = map_transform t ae' m2\"", "lemma map_of_map_transform: \"map_of (map_transform t ae \\<Gamma>) x = map_option (lift_transform t (ae x)) (map_of \\<Gamma> x)\"", "lemma supp_map_transform_step:\n  assumes \"\\<And> x e a. (x, e) \\<in> set \\<Gamma> \\<Longrightarrow> supp (t a e) \\<subseteq> supp e\"\n  shows \"supp (map_transform t ae \\<Gamma>) \\<subseteq> supp \\<Gamma>\"", "lemma subst_map_transform: \n  assumes \"\\<And> x' e a. (x',e) : set \\<Gamma> \\<Longrightarrow> (t a e)[x ::= y] = t a (e[x ::= y])\"\n  shows \"(map_transform t ae \\<Gamma>)[x ::h=y] = map_transform t ae (\\<Gamma>[x ::h= y])\"", "lemma supp_lift_transform: \"supp (lift_transform trans a e) \\<subseteq> supp e\"", "lemma supp_map_transform: \"supp (map_transform trans ae \\<Gamma>) \\<subseteq> supp \\<Gamma>\"", "lemma fresh_transform[intro]: \"a \\<sharp> e \\<Longrightarrow> a \\<sharp> trans n e\"", "lemma fresh_star_transform[intro]: \"a \\<sharp>* e \\<Longrightarrow> a \\<sharp>* trans n e\"", "lemma fresh_map_transform[intro]: \"a \\<sharp> \\<Gamma> \\<Longrightarrow> a \\<sharp> map_transform trans ae \\<Gamma>\"", "lemma fresh_star_map_transform[intro]: \"a \\<sharp>* \\<Gamma> \\<Longrightarrow> a \\<sharp>* map_transform trans ae \\<Gamma>\""], "translations": [["", "lemma lift_transform_simps[simp]:\n  \"lift_transform t \\<bottom> e = e\"\n  \"lift_transform t (up\\<cdot>a) e = t a e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_transform t \\<bottom> e = e &&&\n    lift_transform t (up\\<cdot>a) e = t a e", "apply (metis inst_up_pcpo lift_transform.simps(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. lift_transform t (up\\<cdot>a) e = t a e", "apply (simp add: up_def cont_Iup)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma lift_transform_eqvt[eqvt]: \"\\<pi> \\<bullet>  lift_transform t a e = lift_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> a) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> lift_transform t a e =\n    lift_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> a)\n     (\\<pi> \\<bullet> e)", "by (cases \"a\") simp_all"], ["", "lemma lift_transform_fun_cong[fundef_cong]:\n  \"(\\<And> a. t1 a e1 = t2 a e1) \\<Longrightarrow> a1 = a2 \\<Longrightarrow> e1 = e2 \\<Longrightarrow> lift_transform t1 a1 e1 = lift_transform t2 a2 e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>a. t1 a e1 = t2 a e1; a1 = a2; e1 = e2\\<rbrakk>\n    \\<Longrightarrow> lift_transform t1 a1 e1 = lift_transform t2 a2 e2", "by (cases \"(t2,a2,e2)\" rule: lift_transform.cases) auto"], ["", "lemma subst_lift_transform: \n  assumes \"\\<And> a. (t a e)[x ::= y] = t a (e[x ::= y])\"\n  shows \"(lift_transform t a e)[x ::=y] = lift_transform t a (e[x ::= y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (lift_transform t a e)[x::=y] = lift_transform t a e[x::=y]", "using assms"], ["proof (prove)\nusing this:\n  (t ?a e)[x::=y] = t ?a e[x::=y]\n\ngoal (1 subgoal):\n 1. (lift_transform t a e)[x::=y] = lift_transform t a e[x::=y]", "by (cases a) auto"], ["", "definition\n  map_transform :: \"('a::cont_pt \\<Rightarrow> exp \\<Rightarrow> exp) \\<Rightarrow> (var \\<Rightarrow> 'a\\<^sub>\\<bottom>) \\<Rightarrow> heap \\<Rightarrow> heap\"\n  where \"map_transform t ae = map_ran (\\<lambda> x e . lift_transform t (ae x) e)\""], ["", "lemma map_transform_eqvt[eqvt]: \"\\<pi> \\<bullet> map_transform t ae = map_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> ae)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> map_transform t ae =\n    map_transform (\\<pi> \\<bullet> t) (\\<pi> \\<bullet> ae)", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> map_ran (\\<lambda>x. lift_transform t (ae x)) =\n    map_ran\n     (\\<lambda>x.\n         lift_transform (\\<pi> \\<bullet> t) ((\\<pi> \\<bullet> ae) x))", "by simp"], ["", "lemma domA_map_transform[simp]: \"domA (map_transform t ae \\<Gamma>) = domA \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domA (map_transform t ae \\<Gamma>) = domA \\<Gamma>", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. domA (map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>) =\n    domA \\<Gamma>", "by simp"], ["", "lemma length_map_transform[simp]: \"length (map_transform t ae xs) = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map_transform t ae xs) = length xs", "unfolding map_transform_def map_ran_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (map (\\<lambda>(k, v). (k, lift_transform t (ae k) v)) xs) =\n    length xs", "by simp"], ["", "lemma map_transform_delete:\n  \"map_transform t ae (delete x \\<Gamma>) = delete x (map_transform t ae \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_transform t ae (delete x \\<Gamma>) =\n    delete x (map_transform t ae \\<Gamma>)", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_ran (\\<lambda>x. lift_transform t (ae x)) (delete x \\<Gamma>) =\n    delete x (map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>)", "by (simp add: map_ran_delete)"], ["", "lemma map_transform_restrA:\n  \"map_transform t ae (restrictA S \\<Gamma>) = restrictA S (map_transform t ae \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_transform t ae (restrictA S \\<Gamma>) =\n    restrictA S (map_transform t ae \\<Gamma>)", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_ran (\\<lambda>x. lift_transform t (ae x)) (restrictA S \\<Gamma>) =\n    restrictA S (map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>)", "by (auto simp add: map_ran_restrictA)"], ["", "lemma delete_map_transform_env_delete:\n  \"delete x (map_transform t (env_delete x ae) \\<Gamma>) = delete x (map_transform t ae \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete x (map_transform t (env_delete x ae) \\<Gamma>) =\n    delete x (map_transform t ae \\<Gamma>)", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. delete x\n     (map_ran (\\<lambda>xa. lift_transform t (env_delete x ae xa))\n       \\<Gamma>) =\n    delete x (map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>)", "by (induction \\<Gamma>) auto"], ["", "lemma map_transform_Nil[simp]:\n  \"map_transform t ae [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_transform t ae [] = []", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_ran (\\<lambda>x. lift_transform t (ae x)) [] = []", "by simp"], ["", "lemma map_transform_Cons:\n  \"map_transform t ae ((x,e)# \\<Gamma>) = (x, lift_transform t (ae x) e) #  (map_transform t ae \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_transform t ae ((x, e) # \\<Gamma>) =\n    (x, lift_transform t (ae x) e) # map_transform t ae \\<Gamma>", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_ran (\\<lambda>x. lift_transform t (ae x)) ((x, e) # \\<Gamma>) =\n    (x, lift_transform t (ae x) e) #\n    map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>", "by simp"], ["", "lemma map_transform_append:\n  \"map_transform t ae (\\<Delta>@\\<Gamma>) = map_transform t ae \\<Delta> @ map_transform t ae \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_transform t ae (\\<Delta> @ \\<Gamma>) =\n    map_transform t ae \\<Delta> @ map_transform t ae \\<Gamma>", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_ran (\\<lambda>x. lift_transform t (ae x)) (\\<Delta> @ \\<Gamma>) =\n    map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Delta> @\n    map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>", "by (simp add: map_ran_append)"], ["", "lemma map_transform_fundef_cong[fundef_cong]:\n  \"(\\<And>x e a. (x,e) \\<in> set m1 \\<Longrightarrow> t1 a e = t2 a e) \\<Longrightarrow> ae1 = ae2 \\<Longrightarrow> m1 = m2 \\<Longrightarrow> map_transform t1 ae1 m1 = map_transform t2 ae2 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x e a.\n                (x, e) \\<in> set m1 \\<Longrightarrow> t1 a e = t2 a e;\n     ae1 = ae2; m1 = m2\\<rbrakk>\n    \\<Longrightarrow> map_transform t1 ae1 m1 = map_transform t2 ae2 m2", "by (induction m2 arbitrary: m1)\n     (fastforce simp add: map_transform_Nil map_transform_Cons intro!: lift_transform_fun_cong)+"], ["", "lemma map_transform_cong:\n  \"(\\<And>x. x \\<in> domA m1 \\<Longrightarrow> ae x = ae' x) \\<Longrightarrow> m1 = m2 \\<Longrightarrow> map_transform t ae m1 = map_transform t ae' m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. x \\<in> domA m1 \\<Longrightarrow> ae x = ae' x;\n     m1 = m2\\<rbrakk>\n    \\<Longrightarrow> map_transform t ae m1 = map_transform t ae' m2", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x. x \\<in> domA m1 \\<Longrightarrow> ae x = ae' x;\n     m1 = m2\\<rbrakk>\n    \\<Longrightarrow> map_ran (\\<lambda>x. lift_transform t (ae x)) m1 =\n                      map_ran (\\<lambda>x. lift_transform t (ae' x)) m2", "by (auto intro!: map_ran_cong dest: domA_from_set)"], ["", "lemma map_of_map_transform: \"map_of (map_transform t ae \\<Gamma>) x = map_option (lift_transform t (ae x)) (map_of \\<Gamma> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map_transform t ae \\<Gamma>) x =\n    map_option (lift_transform t (ae x)) (map_of \\<Gamma> x)", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of (map_ran (\\<lambda>x. lift_transform t (ae x)) \\<Gamma>) x =\n    map_option (lift_transform t (ae x)) (map_of \\<Gamma> x)", "by (simp add: map_ran_conv)"], ["", "lemma supp_map_transform_step:\n  assumes \"\\<And> x e a. (x, e) \\<in> set \\<Gamma> \\<Longrightarrow> supp (t a e) \\<subseteq> supp e\"\n  shows \"supp (map_transform t ae \\<Gamma>) \\<subseteq> supp \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (map_transform t ae \\<Gamma>) \\<subseteq> supp \\<Gamma>", "using assms"], ["proof (prove)\nusing this:\n  (?x, ?e) \\<in> set \\<Gamma> \\<Longrightarrow>\n  supp (t ?a ?e) \\<subseteq> supp ?e\n\ngoal (1 subgoal):\n 1. supp (map_transform t ae \\<Gamma>) \\<subseteq> supp \\<Gamma>", "apply (induction \\<Gamma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>x e a.\n        (x, e) \\<in> set [] \\<Longrightarrow>\n        supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n    supp (map_transform t ae []) \\<subseteq> supp []\n 2. \\<And>a \\<Gamma>.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           (x, e) \\<in> set (a # \\<Gamma>) \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e\\<rbrakk>\n       \\<Longrightarrow> supp (map_transform t ae (a # \\<Gamma>))\n                         \\<subseteq> supp (a # \\<Gamma>)", "apply (auto simp add: supp_Nil supp_Cons map_transform_Nil map_transform_Cons supp_Pair pure_supp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b \\<Gamma> x.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           x = a \\<and> e = b \\<or>\n           (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e;\n        x \\<notin> supp \\<Gamma>; x \\<notin> supp b;\n        x \\<in> supp (lift_transform t (ae a) b)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> supp a\n 2. \\<And>a b \\<Gamma> x.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           x = a \\<and> e = b \\<or>\n           (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e;\n        x \\<notin> supp \\<Gamma>; x \\<notin> supp b;\n        x \\<in> supp (map_transform t ae \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> supp a", "apply (case_tac \"ae a\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b \\<Gamma> x.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           x = a \\<and> e = b \\<or>\n           (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e;\n        x \\<notin> supp \\<Gamma>; x \\<notin> supp b;\n        x \\<in> supp (lift_transform t (ae a) b); ae a = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> x \\<in> supp a\n 2. \\<And>a b \\<Gamma> x xa.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           x = a \\<and> e = b \\<or>\n           (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e;\n        x \\<notin> supp \\<Gamma>; x \\<notin> supp b;\n        x \\<in> supp (lift_transform t (ae a) b);\n        ae a = up\\<cdot>xa\\<rbrakk>\n       \\<Longrightarrow> x \\<in> supp a\n 3. \\<And>a b \\<Gamma> x.\n       \\<lbrakk>(\\<And>x e a.\n                    (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    supp (t a e) \\<subseteq> supp e) \\<Longrightarrow>\n                supp (map_transform t ae \\<Gamma>)\n                \\<subseteq> supp \\<Gamma>;\n        \\<And>x e aa.\n           x = a \\<and> e = b \\<or>\n           (x, e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           supp (t aa e) \\<subseteq> supp e;\n        x \\<notin> supp \\<Gamma>; x \\<notin> supp b;\n        x \\<in> supp (map_transform t ae \\<Gamma>)\\<rbrakk>\n       \\<Longrightarrow> x \\<in> supp a", "apply (fastforce)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma subst_map_transform: \n  assumes \"\\<And> x' e a. (x',e) : set \\<Gamma> \\<Longrightarrow> (t a e)[x ::= y] = t a (e[x ::= y])\"\n  shows \"(map_transform t ae \\<Gamma>)[x ::h=y] = map_transform t ae (\\<Gamma>[x ::h= y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_transform t ae \\<Gamma>)[x::h=y] =\n    map_transform t ae \\<Gamma>[x::h=y]", "using assms"], ["proof (prove)\nusing this:\n  (?x', ?e) \\<in> set \\<Gamma> \\<Longrightarrow>\n  (t ?a ?e)[x::=y] = t ?a ?e[x::=y]\n\ngoal (1 subgoal):\n 1. (map_transform t ae \\<Gamma>)[x::h=y] =\n    map_transform t ae \\<Gamma>[x::h=y]", "apply (induction \\<Gamma>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<And>x' e a.\n        (x', e) \\<in> set [] \\<Longrightarrow>\n        (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n    (map_transform t ae [])[x::h=y] = map_transform t ae [][x::h=y]\n 2. \\<And>a \\<Gamma>.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           (x', e) \\<in> set (a # \\<Gamma>) \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> (map_transform t ae (a # \\<Gamma>))[x::h=y] =\n                         map_transform t ae (a # \\<Gamma>)[x::h=y]", "apply (auto simp add: map_transform_Nil map_transform_Cons)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b \\<Gamma>.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           x' = a \\<and> e = b \\<or>\n           (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> (lift_transform t (ae a) b)[x::=y] =\n                         lift_transform t (ae a) b[x::=y]\n 2. \\<And>a b \\<Gamma>.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           x' = a \\<and> e = b \\<or>\n           (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> (map_transform t ae \\<Gamma>)[x::h=y] =\n                         map_transform t ae \\<Gamma>[x::h=y]", "apply (subst subst_lift_transform)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b \\<Gamma> aa.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           x' = a \\<and> e = b \\<or>\n           (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> (t aa b)[x::=y] = t aa b[x::=y]\n 2. \\<And>a b \\<Gamma>.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           x' = a \\<and> e = b \\<or>\n           (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> lift_transform t (ae a) b[x::=y] =\n                         lift_transform t (ae a) b[x::=y]\n 3. \\<And>a b \\<Gamma>.\n       \\<lbrakk>(\\<And>x' e a.\n                    (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n                    (t a e)[x::=y] = t a e[x::=y]) \\<Longrightarrow>\n                (map_transform t ae \\<Gamma>)[x::h=y] =\n                map_transform t ae \\<Gamma>[x::h=y];\n        \\<And>x' e aa.\n           x' = a \\<and> e = b \\<or>\n           (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n           (t aa e)[x::=y] = t aa e[x::=y]\\<rbrakk>\n       \\<Longrightarrow> (map_transform t ae \\<Gamma>)[x::h=y] =\n                         map_transform t ae \\<Gamma>[x::h=y]", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "locale supp_bounded_transform = \n  fixes trans :: \"'a::cont_pt \\<Rightarrow> exp \\<Rightarrow> exp\"\n  assumes supp_trans: \"supp (trans a e) \\<subseteq> supp e\"\nbegin"], ["", "lemma supp_lift_transform: \"supp (lift_transform trans a e) \\<subseteq> supp e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (lift_transform trans a e) \\<subseteq> supp e", "by (cases \"(trans, a, e)\" rule:lift_transform.cases) (auto dest!: subsetD[OF supp_trans])"], ["", "lemma supp_map_transform: \"supp (map_transform trans ae \\<Gamma>) \\<subseteq> supp \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (map_transform trans ae \\<Gamma>) \\<subseteq> supp \\<Gamma>", "unfolding map_transform_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (map_ran (\\<lambda>x. lift_transform trans (ae x)) \\<Gamma>)\n    \\<subseteq> supp \\<Gamma>", "by (induction \\<Gamma>) (auto simp add: supp_Pair supp_Cons dest!: subsetD[OF supp_lift_transform])"], ["", "lemma fresh_transform[intro]: \"a \\<sharp> e \\<Longrightarrow> a \\<sharp> trans n e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> e \\<Longrightarrow> a \\<sharp> trans n e", "by (auto simp add: fresh_def) (auto dest!: subsetD[OF supp_trans])"], ["", "lemma fresh_star_transform[intro]: \"a \\<sharp>* e \\<Longrightarrow> a \\<sharp>* trans n e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* e \\<Longrightarrow> a \\<sharp>* trans n e", "by (auto simp add: fresh_star_def)"], ["", "lemma fresh_map_transform[intro]: \"a \\<sharp> \\<Gamma> \\<Longrightarrow> a \\<sharp> map_transform trans ae \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> \\<Gamma> \\<Longrightarrow>\n    a \\<sharp> map_transform trans ae \\<Gamma>", "unfolding fresh_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<notin> supp \\<Gamma> \\<Longrightarrow>\n    a \\<notin> supp (map_transform trans ae \\<Gamma>)", "using supp_map_transform"], ["proof (prove)\nusing this:\n  supp (map_transform trans ?ae ?\\<Gamma>) \\<subseteq> supp ?\\<Gamma>\n\ngoal (1 subgoal):\n 1. a \\<notin> supp \\<Gamma> \\<Longrightarrow>\n    a \\<notin> supp (map_transform trans ae \\<Gamma>)", "by auto"], ["", "lemma fresh_star_map_transform[intro]: \"a \\<sharp>* \\<Gamma> \\<Longrightarrow> a \\<sharp>* map_transform trans ae \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* \\<Gamma> \\<Longrightarrow>\n    a \\<sharp>* map_transform trans ae \\<Gamma>", "by (auto simp add: fresh_star_def)"], ["", "end"], ["", "end"]]}