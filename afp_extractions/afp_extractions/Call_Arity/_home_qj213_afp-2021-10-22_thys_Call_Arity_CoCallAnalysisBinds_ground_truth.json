{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CoCallAnalysisBinds.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma ccBind_eq:\n  \"ccBind v e\\<cdot>(ae, G) = (if v--v\\<notin>G \\<or> \\<not> isVal e then \\<G>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e G|` fv e else (fv e)\\<^sup>2)\"", "lemma ccBind_strict[simp]: \"ccBind v e \\<cdot> \\<bottom> = \\<bottom>\"", "lemma ccField_ccBind: \"ccField (ccBind v e\\<cdot>(ae,G)) \\<subseteq> fv e\"", "lemma ccBinds_eq:\n  \"ccBinds \\<Gamma>\\<cdot>i = (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>. ccBind v e\\<cdot>i)\"", "lemma ccBinds_strict[simp]: \"ccBinds \\<Gamma>\\<cdot>\\<bottom>=\\<bottom>\"", "lemma ccBinds_strict'[simp]: \"ccBinds \\<Gamma>\\<cdot>(\\<bottom>,\\<bottom>)=\\<bottom>\"", "lemma ccBinds_reorder1:\n  assumes \"map_of \\<Gamma> v = Some e\"\n  shows \"ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)\"", "lemma ccBinds_Nil[simp]:\n  \"ccBinds [] = \\<bottom>\"", "lemma ccBinds_Cons[simp]:\n   \"ccBinds ((x,e)#\\<Gamma>) = ccBind x e \\<squnion> ccBinds (delete x \\<Gamma>)\"", "lemma ccBind_below_ccBinds: \"map_of \\<Gamma> x = Some e \\<Longrightarrow> ccBind x e\\<cdot>ae \\<sqsubseteq> (ccBinds \\<Gamma>\\<cdot>ae)\"", "lemma ccField_ccBinds: \"ccField (ccBinds \\<Gamma>\\<cdot>(ae,G)) \\<subseteq> fv \\<Gamma>\"", "lemma ccBindsExtra_simp: \"ccBindsExtra \\<Gamma> \\<cdot> i =snd i \\<squnion> ccBinds \\<Gamma> \\<cdot> i \\<squnion> (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>. ccProd (fv e) (ccNeighbors x (snd i)))\"", "lemma ccBindsExtra_eq: \"ccBindsExtra \\<Gamma>\\<cdot>(ae,G) =\n  G \\<squnion> ccBinds \\<Gamma>\\<cdot>(ae,G) \\<squnion> (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>. fv e G\\<times> ccNeighbors x G)\"", "lemma ccBindsExtra_strict[simp]: \"ccBindsExtra \\<Gamma> \\<cdot> \\<bottom> = \\<bottom>\"", "lemma ccField_ccBindsExtra:\n  \"ccField (ccBindsExtra \\<Gamma>\\<cdot>(ae,G)) \\<subseteq> fv \\<Gamma> \\<union> ccField G\"", "lemma ccBind_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBind cccExp x e) = CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\"", "lemma ccBinds_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBinds cccExp \\<Gamma>) = CoCallAnalysis.ccBinds (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma ccBindsExtra_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBindsExtra cccExp \\<Gamma>) = CoCallAnalysis.ccBindsExtra (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma ccBind_cong[fundef_cong]:\n  \"cccexp1 e = cccexp2 e \\<Longrightarrow> CoCallAnalysis.ccBind cccexp1 x e = CoCallAnalysis.ccBind cccexp2 x e \"", "lemma ccBinds_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallAnalysis.ccBinds cccexp1 heap1 = CoCallAnalysis.ccBinds cccexp2 heap2\"", "lemma ccBindsExtra_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallAnalysis.ccBindsExtra cccexp1 heap1 = CoCallAnalysis.ccBindsExtra cccexp2 heap2\""], "translations": [["", "lemma ccBind_eq:\n  \"ccBind v e\\<cdot>(ae, G) = (if v--v\\<notin>G \\<or> \\<not> isVal e then \\<G>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e G|` fv e else (fv e)\\<^sup>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBind v e\\<cdot>(ae, G) =\n    (if v--v\\<notin>G \\<or> \\<not> isVal e\n     then \\<G>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e G|` fv e\n     else fv e\\<^sup>2)", "unfolding ccBind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> (ae, G).\n        if v--v\\<notin>G \\<or> \\<not> isVal e\n        then \\<G>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e G|` fv e\n        else fv e\\<^sup>2)\\<cdot>\n    (ae, G) =\n    (if v--v\\<notin>G \\<or> \\<not> isVal e\n     then \\<G>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e G|` fv e\n     else fv e\\<^sup>2)", "apply (rule cfun_beta_Pair)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cont\n     (\\<lambda>p.\n         if v--v\\<notin>snd p \\<or> \\<not> isVal e\n         then \\<G>\\<^sup>\\<bottom>\\<^bsub>fst p v\\<^esub> e G|` fv e\n         else fv e\\<^sup>2)", "apply (rule cont_if_else_above)"], ["proof (prove)\ngoal (5 subgoals):\n 1. cont\n     (\\<lambda>x. \\<G>\\<^sup>\\<bottom>\\<^bsub>fst x v\\<^esub> e G|` fv e)\n 2. cont (\\<lambda>x. fv e\\<^sup>2)\n 3. \\<And>p.\n       \\<G>\\<^sup>\\<bottom>\\<^bsub>fst p v\\<^esub> e G|` fv e \\<sqsubseteq>\n       fv e\\<^sup>2\n 4. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y;\n        v--v\\<notin>snd y \\<or> \\<not> isVal e\\<rbrakk>\n       \\<Longrightarrow> v--v\\<notin>snd p \\<or> \\<not> isVal e\n 5. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. cont (\\<lambda>x. fv e\\<^sup>2)\n 2. \\<And>p.\n       \\<G>\\<^sup>\\<bottom>\\<^bsub>fst p v\\<^esub> e G|` fv e \\<sqsubseteq>\n       fv e\\<^sup>2\n 3. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y;\n        v--v\\<notin>snd y \\<or> \\<not> isVal e\\<rbrakk>\n       \\<Longrightarrow> v--v\\<notin>snd p \\<or> \\<not> isVal e\n 4. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<G>\\<^sup>\\<bottom>\\<^bsub>fst p v\\<^esub> e G|` fv e \\<sqsubseteq>\n       fv e\\<^sup>2\n 2. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y;\n        v--v\\<notin>snd y \\<or> \\<not> isVal e\\<rbrakk>\n       \\<Longrightarrow> v--v\\<notin>snd p \\<or> \\<not> isVal e\n 3. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "apply (auto dest: subsetD[OF ccField_cc_restr])[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y;\n        v--v\\<notin>snd y \\<or> \\<not> isVal e\\<rbrakk>\n       \\<Longrightarrow> v--v\\<notin>snd p \\<or> \\<not> isVal e\n 2. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "(* Abstraction broken! Fix this. *)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p y.\n       \\<lbrakk>p \\<sqsubseteq> y;\n        v--v\\<notin>snd y \\<or> \\<not> isVal e\\<rbrakk>\n       \\<Longrightarrow> v--v\\<notin>snd p \\<or> \\<not> isVal e\n 2. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "apply (case_tac p, auto, transfer, auto)[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>x. v--v\\<notin>snd x \\<or> \\<not> isVal e)", "apply (rule adm_subst[OF cont_snd])"], ["proof (prove)\ngoal (1 subgoal):\n 1. adm (\\<lambda>a. v--v\\<notin>a \\<or> \\<not> isVal e)", "apply (rule admI, thin_tac \"chain _\", transfer, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ccBind_strict[simp]: \"ccBind v e \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBind v e\\<cdot>\\<bottom> = \\<bottom>", "by (auto simp add: inst_prod_pcpo ccBind_eq simp del: Pair_strict)"], ["", "lemma ccField_ccBind: \"ccField (ccBind v e\\<cdot>(ae,G)) \\<subseteq> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (ccBind v e\\<cdot>(ae, G)) \\<subseteq> fv e", "by (auto simp add: ccBind_eq dest: subsetD[OF ccField_cc_restr])"], ["", "definition ccBinds :: \"heap \\<Rightarrow> ((AEnv \\<times> CoCalls) \\<rightarrow> CoCalls)\"\n  where \"ccBinds \\<Gamma> = (\\<Lambda> i. (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>. ccBind v e\\<cdot>i))\""], ["", "lemma ccBinds_eq:\n  \"ccBinds \\<Gamma>\\<cdot>i = (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>. ccBind v e\\<cdot>i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma>\\<cdot>i =\n    (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>. ccBind v e\\<cdot>i)", "unfolding ccBinds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        \\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n           ccBind v e\\<cdot>i)\\<cdot>\n    i =\n    (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>. ccBind v e\\<cdot>i)", "by simp"], ["", "lemma ccBinds_strict[simp]: \"ccBinds \\<Gamma>\\<cdot>\\<bottom>=\\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma>\\<cdot>\\<bottom> = \\<bottom>", "unfolding ccBinds_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n        ccBind v e\\<cdot>\\<bottom>) =\n    \\<bottom>", "by (cases \"\\<Gamma> = []\") simp_all"], ["", "lemma ccBinds_strict'[simp]: \"ccBinds \\<Gamma>\\<cdot>(\\<bottom>,\\<bottom>)=\\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma>\\<cdot>(\\<bottom>, \\<bottom>) = \\<bottom>", "by (metis CoCallAnalysis.ccBinds_strict Pair_bottom_iff)"], ["", "lemma ccBinds_reorder1:\n  assumes \"map_of \\<Gamma> v = Some e\"\n  shows \"ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)", "from assms"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> v = Some e", "have \"map_of \\<Gamma> = map_of ((v,e) # delete v \\<Gamma>)\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> v = Some e\n\ngoal (1 subgoal):\n 1. map_of \\<Gamma> = map_of ((v, e) # delete v \\<Gamma>)", "by (metis map_of_delete_insert)"], ["proof (state)\nthis:\n  map_of \\<Gamma> = map_of ((v, e) # delete v \\<Gamma>)\n\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)", "thus ?thesis"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> = map_of ((v, e) # delete v \\<Gamma>)\n\ngoal (1 subgoal):\n 1. ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)", "by (auto intro: cfun_eqI simp add: ccBinds_eq delete_set_none)"], ["proof (state)\nthis:\n  ccBinds \\<Gamma> = ccBind v e \\<squnion> ccBinds (delete v \\<Gamma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccBinds_Nil[simp]:\n  \"ccBinds [] = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds [] = \\<bottom>", "unfolding ccBinds_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i. \\<Squnion>v\\<mapsto>e\\<in>map_of []. ccBind v e\\<cdot>i) =\n    \\<bottom>", "by simp"], ["", "lemma ccBinds_Cons[simp]:\n   \"ccBinds ((x,e)#\\<Gamma>) = ccBind x e \\<squnion> ccBinds (delete x \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBinds ((x, e) # \\<Gamma>) =\n    ccBind x e \\<squnion> ccBinds (delete x \\<Gamma>)", "by (subst ccBinds_reorder1[where v = x and e = e]) auto"], ["", "lemma ccBind_below_ccBinds: \"map_of \\<Gamma> x = Some e \\<Longrightarrow> ccBind x e\\<cdot>ae \\<sqsubseteq> (ccBinds \\<Gamma>\\<cdot>ae)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of \\<Gamma> x = Some e \\<Longrightarrow>\n    ccBind x e\\<cdot>ae \\<sqsubseteq> ccBinds \\<Gamma>\\<cdot>ae", "by (auto simp add: ccBinds_eq)"], ["", "lemma ccField_ccBinds: \"ccField (ccBinds \\<Gamma>\\<cdot>(ae,G)) \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (ccBinds \\<Gamma>\\<cdot>(ae, G)) \\<subseteq> fv \\<Gamma>", "by (auto simp add: ccBinds_eq dest: subsetD[OF ccField_ccBind] intro: subsetD[OF map_of_Some_fv_subset])"], ["", "definition ccBindsExtra :: \"heap \\<Rightarrow> ((AEnv \\<times> CoCalls) \\<rightarrow> CoCalls)\"\n  where \"ccBindsExtra \\<Gamma> = (\\<Lambda> i.  snd i \\<squnion> ccBinds \\<Gamma> \\<cdot> i  \\<squnion> (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>. ccProd (fv e) (ccNeighbors x (snd i))))\""], ["", "lemma ccBindsExtra_simp: \"ccBindsExtra \\<Gamma> \\<cdot> i =snd i \\<squnion> ccBinds \\<Gamma> \\<cdot> i \\<squnion> (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>. ccProd (fv e) (ccNeighbors x (snd i)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>\\<cdot>i =\n    snd i \\<squnion> ccBinds \\<Gamma>\\<cdot>i \\<squnion>\n    (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n        fv e G\\<times> ccNeighbors x (snd i))", "unfolding ccBindsExtra_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        snd i \\<squnion> ccBinds \\<Gamma>\\<cdot>i \\<squnion>\n        (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n            fv e G\\<times> ccNeighbors x (snd i)))\\<cdot>\n    i =\n    snd i \\<squnion> ccBinds \\<Gamma>\\<cdot>i \\<squnion>\n    (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n        fv e G\\<times> ccNeighbors x (snd i))", "by simp"], ["", "lemma ccBindsExtra_eq: \"ccBindsExtra \\<Gamma>\\<cdot>(ae,G) =\n  G \\<squnion> ccBinds \\<Gamma>\\<cdot>(ae,G) \\<squnion> (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>. fv e G\\<times> ccNeighbors x G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>\\<cdot>(ae, G) =\n    G \\<squnion> ccBinds \\<Gamma>\\<cdot>(ae, G) \\<squnion>\n    (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n        fv e G\\<times> ccNeighbors x G)", "unfolding ccBindsExtra_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> i.\n        snd i \\<squnion> ccBinds \\<Gamma>\\<cdot>i \\<squnion>\n        (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n            fv e G\\<times> ccNeighbors x (snd i)))\\<cdot>\n    (ae, G) =\n    G \\<squnion> ccBinds \\<Gamma>\\<cdot>(ae, G) \\<squnion>\n    (\\<Squnion>x\\<mapsto>e\\<in>map_of \\<Gamma>.\n        fv e G\\<times> ccNeighbors x G)", "by simp"], ["", "lemma ccBindsExtra_strict[simp]: \"ccBindsExtra \\<Gamma> \\<cdot> \\<bottom> = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Gamma>\\<cdot>\\<bottom> = \\<bottom>", "by (auto simp add: ccBindsExtra_simp inst_prod_pcpo simp del: Pair_strict)"], ["", "lemma ccField_ccBindsExtra:\n  \"ccField (ccBindsExtra \\<Gamma>\\<cdot>(ae,G)) \\<subseteq> fv \\<Gamma> \\<union> ccField G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (ccBindsExtra \\<Gamma>\\<cdot>(ae, G))\n    \\<subseteq> fv \\<Gamma> \\<union> ccField G", "by (auto simp add: ccBindsExtra_simp elem_to_ccField\n      dest!:  subsetD[OF ccField_ccBinds]  subsetD[OF ccField_ccProd_subset] map_of_Some_fv_subset)"], ["", "end"], ["", "lemma ccBind_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBind cccExp x e) = CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "fix \\<pi> ae G"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "have \"\\<pi> \\<bullet> ((CoCallAnalysis.ccBind cccExp x e) \\<cdot> (ae,G)) = CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x) (\\<pi> \\<bullet> e) \\<cdot> (\\<pi> \\<bullet> ae, \\<pi> \\<bullet> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e\\<cdot>(ae, G) =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)\\<cdot>\n    (\\<pi> \\<bullet> ae, \\<pi> \\<bullet> G)", "unfolding CoCallAnalysis.ccBind_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> (if x--x\\<notin>G \\<or> \\<not> isVal e\n                     then fup\\<cdot>(cccExp e)\\<cdot>(ae x) G|` fv e\n                     else fv e\\<^sup>2) =\n    (if (\\<pi> \\<bullet> x)--(\\<pi> \\<bullet> x)\\<notin>(\\<pi> \\<bullet> G) \\<or>\n        \\<not> isVal (\\<pi> \\<bullet> e)\n     then fup\\<cdot>((\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> e))\\<cdot>\n          ((\\<pi> \\<bullet> ae) (\\<pi> \\<bullet> x)) G|`\n          fv (\\<pi> \\<bullet> e)\n     else fv (\\<pi> \\<bullet> e)\\<^sup>2)", "by perm_simp (simp add: Abs_cfun_eqvt)"], ["proof (state)\nthis:\n  \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e\\<cdot>(ae, G) =\n  CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n   (\\<pi> \\<bullet> e)\\<cdot>\n  (\\<pi> \\<bullet> ae, \\<pi> \\<bullet> G)\n\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "}"], ["proof (state)\nthis:\n  ?\\<pi>'2 \\<bullet> CoCallAnalysis.ccBind cccExp x e\\<cdot>(?ae2, ?G2) =\n  CoCallAnalysis.ccBind (?\\<pi>'2 \\<bullet> cccExp) (?\\<pi>'2 \\<bullet> x)\n   (?\\<pi>'2 \\<bullet> e)\\<cdot>\n  (?\\<pi>'2 \\<bullet> ?ae2, ?\\<pi>'2 \\<bullet> ?G2)\n\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?\\<pi>'2 \\<bullet> CoCallAnalysis.ccBind cccExp x e\\<cdot>(?ae2, ?G2) =\n  CoCallAnalysis.ccBind (?\\<pi>'2 \\<bullet> cccExp) (?\\<pi>'2 \\<bullet> x)\n   (?\\<pi>'2 \\<bullet> e)\\<cdot>\n  (?\\<pi>'2 \\<bullet> ?ae2, ?\\<pi>'2 \\<bullet> ?G2)\n\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n    CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n     (\\<pi> \\<bullet> e)", "by (auto intro: cfun_eqvtI)"], ["proof (state)\nthis:\n  \\<pi> \\<bullet> CoCallAnalysis.ccBind cccExp x e =\n  CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> x)\n   (\\<pi> \\<bullet> e)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ccBinds_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBinds cccExp \\<Gamma>) = CoCallAnalysis.ccBinds (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBinds cccExp \\<Gamma> =\n    CoCallAnalysis.ccBinds (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> \\<Gamma>)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> CoCallAnalysis.ccBinds cccExp \\<Gamma>\\<cdot>x =\n       CoCallAnalysis.ccBinds (\\<pi> \\<bullet> cccExp)\n        (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n       (\\<pi> \\<bullet> x)", "unfolding CoCallAnalysis.ccBinds_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> (\\<Squnion>v\\<mapsto>e\\<in>map_of \\<Gamma>.\n                           CoCallAnalysis.ccBind cccExp v e\\<cdot>x) =\n       (\\<Squnion>v\\<mapsto>e\\<in>map_of (\\<pi> \\<bullet> \\<Gamma>).\n           CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) v e\\<cdot>\n           (\\<pi> \\<bullet> x))", "apply (perm_simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<Squnion>xa\\<mapsto>xb\\<in>map_of (\\<pi> \\<bullet> \\<Gamma>).\n           CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) xa xb\\<cdot>\n           (\\<pi> \\<bullet> x)) =\n       (\\<Squnion>v\\<mapsto>e\\<in>map_of (\\<pi> \\<bullet> \\<Gamma>).\n           CoCallAnalysis.ccBind (\\<pi> \\<bullet> cccExp) v e\\<cdot>\n           (\\<pi> \\<bullet> x))", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ccBindsExtra_eqvt[eqvt]: \"\\<pi> \\<bullet> (CoCallAnalysis.ccBindsExtra cccExp \\<Gamma>) = CoCallAnalysis.ccBindsExtra (\\<pi> \\<bullet> cccExp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> CoCallAnalysis.ccBindsExtra cccExp \\<Gamma> =\n    CoCallAnalysis.ccBindsExtra (\\<pi> \\<bullet> cccExp)\n     (\\<pi> \\<bullet> \\<Gamma>)", "by (rule cfun_eqvtI) (simp add: CoCallAnalysis.ccBindsExtra_def)"], ["", "lemma ccBind_cong[fundef_cong]:\n  \"cccexp1 e = cccexp2 e \\<Longrightarrow> CoCallAnalysis.ccBind cccexp1 x e = CoCallAnalysis.ccBind cccexp2 x e \""], ["proof (prove)\ngoal (1 subgoal):\n 1. cccexp1 e = cccexp2 e \\<Longrightarrow>\n    CoCallAnalysis.ccBind cccexp1 x e = CoCallAnalysis.ccBind cccexp2 x e", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       cccexp1 e = cccexp2 e \\<Longrightarrow>\n       CoCallAnalysis.ccBind cccexp1 x e\\<cdot>xa =\n       CoCallAnalysis.ccBind cccexp2 x e\\<cdot>xa", "apply (case_tac xa)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa a b.\n       \\<lbrakk>cccexp1 e = cccexp2 e; xa = (a, b)\\<rbrakk>\n       \\<Longrightarrow> CoCallAnalysis.ccBind cccexp1 x e\\<cdot>xa =\n                         CoCallAnalysis.ccBind cccexp2 x e\\<cdot>xa", "apply (auto simp add: CoCallAnalysis.ccBind_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ccBinds_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallAnalysis.ccBinds cccexp1 heap1 = CoCallAnalysis.ccBinds cccexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallAnalysis.ccBinds cccexp1 heap1 =\n                      CoCallAnalysis.ccBinds cccexp2 heap2", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallAnalysis.ccBinds cccexp1 heap1\\<cdot>x =\n                         CoCallAnalysis.ccBinds cccexp2 heap2\\<cdot>x", "unfolding CoCallAnalysis.ccBinds_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion>v\\<mapsto>e\\<in>map_of heap1.\n                             CoCallAnalysis.ccBind cccexp1 v e\\<cdot>x) =\n                         (\\<Squnion>v\\<mapsto>e\\<in>map_of heap2.\n                             CoCallAnalysis.ccBind cccexp2 v e\\<cdot>x)", "apply (rule arg_cong[OF mapCollect_cong])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x k v.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; map_of heap1 k = Some v\\<rbrakk>\n       \\<Longrightarrow> CoCallAnalysis.ccBind cccexp1 k v\\<cdot>x =\n                         CoCallAnalysis.ccBind cccexp2 k v\\<cdot>x\n 2. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> map_of heap1 = map_of heap2", "apply (rule arg_cong[OF ccBind_cong])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x k v.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; map_of heap1 k = Some v\\<rbrakk>\n       \\<Longrightarrow> cccexp1 v = cccexp2 v\n 2. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> map_of heap1 = map_of heap2", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k v.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; map_of heap2 k = Some v\\<rbrakk>\n       \\<Longrightarrow> cccexp1 v = cccexp2 v", "by (metis imageI map_of_SomeD snd_conv)"], ["", "lemma ccBindsExtra_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> cccexp1 e = cccexp2 e); heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> CoCallAnalysis.ccBindsExtra cccexp1 heap1 = CoCallAnalysis.ccBindsExtra cccexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow>\n                cccexp1 e = cccexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> CoCallAnalysis.ccBindsExtra cccexp1 heap1 =\n                      CoCallAnalysis.ccBindsExtra cccexp2 heap2", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> CoCallAnalysis.ccBindsExtra cccexp1 heap1\\<cdot>x =\n                         CoCallAnalysis.ccBindsExtra cccexp2 heap2\\<cdot>x", "unfolding CoCallAnalysis.ccBindsExtra_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> snd x \\<squnion>\n                         CoCallAnalysis.ccBinds cccexp1 heap1\\<cdot>\n                         x \\<squnion>\n                         (\\<Squnion>xa\\<mapsto>e\\<in>map_of heap1.\n                             fv e G\\<times> ccNeighbors xa (snd x)) =\n                         snd x \\<squnion>\n                         CoCallAnalysis.ccBinds cccexp2 heap2\\<cdot>\n                         x \\<squnion>\n                         (\\<Squnion>xa\\<mapsto>e\\<in>map_of heap2.\n                             fv e G\\<times> ccNeighbors xa (snd x))", "apply (rule arg_cong2[OF ccBinds_cong mapCollect_cong])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x e.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; e \\<in> snd ` set heap2\\<rbrakk>\n       \\<Longrightarrow> cccexp1 e = cccexp2 e\n 2. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> heap1 = heap2\n 3. \\<And>x k v.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2; map_of heap1 k = Some v\\<rbrakk>\n       \\<Longrightarrow> fv v G\\<times> ccNeighbors k (snd x) =\n                         fv v G\\<times> ccNeighbors k (snd x)\n 4. \\<And>x.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   cccexp1 e = cccexp2 e;\n        heap1 = heap2\\<rbrakk>\n       \\<Longrightarrow> map_of heap1 = map_of heap2", "apply simp+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "end"]]}