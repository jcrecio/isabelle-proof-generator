{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/ArityAnalysisAbinds.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma ABind_eq[simp]: \"ABind v e \\<cdot> ae = \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e\"", "lemma ABinds_strict[simp]: \"ABinds \\<Gamma>\\<cdot>\\<bottom>=\\<bottom>\"", "lemma Abinds_reorder1: \"map_of \\<Gamma> v = Some e \\<Longrightarrow> ABinds \\<Gamma> = ABind v e \\<squnion> ABinds (delete v \\<Gamma>)\"", "lemma ABind_below_ABinds: \"map_of \\<Gamma> v = Some e \\<Longrightarrow> ABind v e \\<sqsubseteq> ABinds \\<Gamma>\"", "lemma Abinds_reorder: \"map_of \\<Gamma> = map_of \\<Delta> \\<Longrightarrow> ABinds \\<Gamma> = ABinds \\<Delta>\"", "lemma Abinds_env_cong: \"(\\<And> x. x\\<in>domA \\<Delta> \\<Longrightarrow> ae x = ae' x)  \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'\"", "lemma Abinds_env_restr_cong: \" ae f|` domA \\<Delta> = ae' f|` domA \\<Delta> \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'\"", "lemma ABinds_env_restr[simp]: \"ABinds \\<Delta>\\<cdot>(ae f|` domA \\<Delta>) = ABinds \\<Delta>\\<cdot>ae\"", "lemma Abinds_join_fresh: \"ae' ` (domA \\<Delta>) \\<subseteq> {\\<bottom>} \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>(ae \\<squnion> ae') = (ABinds \\<Delta>\\<cdot>ae)\"", "lemma ABinds_delete_bot: \"ae x = \\<bottom> \\<Longrightarrow> ABinds (delete x \\<Gamma>)\\<cdot>ae = ABinds \\<Gamma>\\<cdot>ae\"", "lemma ABinds_restr_fresh:\n  assumes \"atom ` S \\<sharp>* \\<Gamma>\"\n  shows \"ABinds \\<Gamma>\\<cdot>ae f|` (- S) = ABinds \\<Gamma>\\<cdot>(ae  f|` (- S)) f|` (- S)\"", "lemma ABinds_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"ABinds \\<Gamma>\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae  f|` S) f|` S\"", "lemma ABinds_restr_subst:\n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> Aexp e[x::=y]\\<cdot>a f|` S = Aexp e\\<cdot>a f|` S\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"ABinds \\<Gamma>[x::h=y]\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae  f|` S) f|` S\"", "lemma Abinds_append_disjoint: \"domA \\<Delta> \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>  ABinds (\\<Delta> @ \\<Gamma>)\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\"", "lemma ABinds_restr_subset: \"S \\<subseteq> S' \\<Longrightarrow> ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds (restrictA S' \\<Gamma>)\\<cdot>ae\"", "lemma ABinds_restrict_edom: \"ABinds (restrictA (edom ae) \\<Gamma>)\\<cdot>ae = ABinds \\<Gamma>\\<cdot>ae\"", "lemma ABinds_restrict_below: \"ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds \\<Gamma>\\<cdot>ae\"", "lemma ABinds_delete_below: \"ABinds (delete x \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds \\<Gamma>\\<cdot>ae\"", "lemma ABind_eqvt[eqvt]: \"\\<pi> \\<bullet> (ArityAnalysis.ABind Aexp v e) = ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> e)\"", "lemma ABinds_eqvt[eqvt]: \"\\<pi> \\<bullet> (ArityAnalysis.ABinds Aexp \\<Gamma>) = ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> \\<Gamma>)\"", "lemma Abinds_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e) ; heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> ArityAnalysis.ABinds aexp1 heap1 = ArityAnalysis.ABinds aexp2 heap2\"", "lemma fup_Aexp_lookup_fresh: \"atom v \\<sharp> e \\<Longrightarrow> (fup\\<cdot>(Aexp e)\\<cdot>a) v = \\<bottom>\"", "lemma edom_AnalBinds: \"edom (ABinds \\<Gamma>\\<cdot>ae) \\<subseteq> fv \\<Gamma>\""], "translations": [["", "lemma ABind_eq[simp]: \"ABind v e \\<cdot> ae = \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABind v e\\<cdot>ae = \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e", "unfolding ABind_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> ae. \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e)\\<cdot>ae =\n    \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e", "by (simp add: cont_fun)"], ["", "fun ABinds :: \"heap \\<Rightarrow> (AEnv \\<rightarrow> AEnv)\"\n  where \"ABinds [] = \\<bottom>\"\n     |  \"ABinds ((v,e)#binds) = ABind v e \\<squnion> ABinds (delete v binds)\""], ["", "lemma ABinds_strict[simp]: \"ABinds \\<Gamma>\\<cdot>\\<bottom>=\\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>\\<bottom> = \\<bottom>", "by (induct \\<Gamma> rule: ABinds.induct) auto"], ["", "lemma Abinds_reorder1: \"map_of \\<Gamma> v = Some e \\<Longrightarrow> ABinds \\<Gamma> = ABind v e \\<squnion> ABinds (delete v \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of \\<Gamma> v = Some e \\<Longrightarrow>\n    ABinds \\<Gamma> = ABind v e \\<squnion> ABinds (delete v \\<Gamma>)", "by (induction \\<Gamma> rule: ABinds.induct) (auto simp add: delete_twist)"], ["", "lemma ABind_below_ABinds: \"map_of \\<Gamma> v = Some e \\<Longrightarrow> ABind v e \\<sqsubseteq> ABinds \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of \\<Gamma> v = Some e \\<Longrightarrow>\n    ABind v e \\<sqsubseteq> ABinds \\<Gamma>", "by (metis \"HOLCF-Join-Classes.join_above1\" ArityAnalysis.Abinds_reorder1)"], ["", "lemma Abinds_reorder: \"map_of \\<Gamma> = map_of \\<Delta> \\<Longrightarrow> ABinds \\<Gamma> = ABinds \\<Delta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of \\<Gamma> = map_of \\<Delta> \\<Longrightarrow>\n    ABinds \\<Gamma> = ABinds \\<Delta>", "proof (induction  \\<Gamma> arbitrary: \\<Delta> rule: ABinds.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<Delta>.\n       map_of [] = map_of \\<Delta> \\<Longrightarrow>\n       ABinds [] = ABinds \\<Delta>\n 2. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "case 1"], ["proof (state)\nthis:\n  map_of [] = map_of \\<Delta>\n\ngoal (2 subgoals):\n 1. \\<And>\\<Delta>.\n       map_of [] = map_of \\<Delta> \\<Longrightarrow>\n       ABinds [] = ABinds \\<Delta>\n 2. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "thus ?case"], ["proof (prove)\nusing this:\n  map_of [] = map_of \\<Delta>\n\ngoal (1 subgoal):\n 1. ABinds [] = ABinds \\<Delta>", "by simp"], ["proof (state)\nthis:\n  ABinds [] = ABinds \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "case (2 v e \\<Gamma> \\<Delta>)"], ["proof (state)\nthis:\n  map_of (delete v \\<Gamma>) = map_of ?\\<Delta> \\<Longrightarrow>\n  ABinds (delete v \\<Gamma>) = ABinds ?\\<Delta>\n  map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "from \\<open>map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>\\<close>"], ["proof (chain)\npicking this:\n  map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>", "have \"(map_of ((v, e) # \\<Gamma>))(v := None) = (map_of \\<Delta>)(v := None)\""], ["proof (prove)\nusing this:\n  map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>\n\ngoal (1 subgoal):\n 1. (map_of ((v, e) # \\<Gamma>))(v := None) = (map_of \\<Delta>)(v := None)", "by simp"], ["proof (state)\nthis:\n  (map_of ((v, e) # \\<Gamma>))(v := None) = (map_of \\<Delta>)(v := None)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "hence \"map_of (delete v \\<Gamma>) = map_of (delete v \\<Delta>)\""], ["proof (prove)\nusing this:\n  (map_of ((v, e) # \\<Gamma>))(v := None) = (map_of \\<Delta>)(v := None)\n\ngoal (1 subgoal):\n 1. map_of (delete v \\<Gamma>) = map_of (delete v \\<Delta>)", "unfolding delete_set_none"], ["proof (prove)\nusing this:\n  map_of (delete v ((v, e) # \\<Gamma>)) = map_of (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. map_of (delete v \\<Gamma>) = map_of (delete v \\<Delta>)", "by simp"], ["proof (state)\nthis:\n  map_of (delete v \\<Gamma>) = map_of (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "hence \"ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)\""], ["proof (prove)\nusing this:\n  map_of (delete v \\<Gamma>) = map_of (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)", "by (rule 2)"], ["proof (state)\nthis:\n  ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "moreover"], ["proof (state)\nthis:\n  ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "from \\<open>map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>\\<close>"], ["proof (chain)\npicking this:\n  map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>", "have \"map_of \\<Delta> v = Some e\""], ["proof (prove)\nusing this:\n  map_of ((v, e) # \\<Gamma>) = map_of \\<Delta>\n\ngoal (1 subgoal):\n 1. map_of \\<Delta> v = Some e", "by (metis map_of_Cons_code(2))"], ["proof (state)\nthis:\n  map_of \\<Delta> v = Some e\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "hence \"ABinds \\<Delta> = ABind v e \\<squnion> ABinds (delete v \\<Delta>)\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> v = Some e\n\ngoal (1 subgoal):\n 1. ABinds \\<Delta> = ABind v e \\<squnion> ABinds (delete v \\<Delta>)", "by (rule Abinds_reorder1)"], ["proof (state)\nthis:\n  ABinds \\<Delta> = ABind v e \\<squnion> ABinds (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds \\<Delta>.\n       \\<lbrakk>\\<And>\\<Delta>.\n                   map_of (delete v binds) =\n                   map_of \\<Delta> \\<Longrightarrow>\n                   ABinds (delete v binds) = ABinds \\<Delta>;\n        map_of ((v, e) # binds) = map_of \\<Delta>\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds) = ABinds \\<Delta>", "ultimately"], ["proof (chain)\npicking this:\n  ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)\n  ABinds \\<Delta> = ABind v e \\<squnion> ABinds (delete v \\<Delta>)", "show ?case"], ["proof (prove)\nusing this:\n  ABinds (delete v \\<Gamma>) = ABinds (delete v \\<Delta>)\n  ABinds \\<Delta> = ABind v e \\<squnion> ABinds (delete v \\<Delta>)\n\ngoal (1 subgoal):\n 1. ABinds ((v, e) # \\<Gamma>) = ABinds \\<Delta>", "by auto"], ["proof (state)\nthis:\n  ABinds ((v, e) # \\<Gamma>) = ABinds \\<Delta>\n\ngoal:\nNo subgoals!", "qed"], ["", "(*\nlemma ABinds_above_arg: \"ae \\<sqsubseteq> ABinds \\<Gamma> \\<cdot> ae\"\nproof (induction rule:ABinds.induct)\n  show \"\\<bottom> \\<sqsubseteq> ABinds []\\<cdot>ae\" by auto\nnext\n  fix v e \\<Gamma>\n  assume assm: \"ae \\<sqsubseteq> ABinds (delete v \\<Gamma>)\\<cdot>ae\"\n  also have \"\\<dots> \\<sqsubseteq> ABinds ((v, e) # \\<Gamma>)\\<cdot>ae\"  by auto\n  finally show \"ae \\<sqsubseteq> ABinds ((v, e) # \\<Gamma>)\\<cdot>ae\" by this simp\nqed\n*)"], ["", "lemma Abinds_env_cong: \"(\\<And> x. x\\<in>domA \\<Delta> \\<Longrightarrow> ae x = ae' x)  \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<in> domA \\<Delta> \\<Longrightarrow>\n        ae x = ae' x) \\<Longrightarrow>\n    ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'", "by (induct \\<Delta> rule: ABinds.induct) auto"], ["", "lemma Abinds_env_restr_cong: \" ae f|` domA \\<Delta> = ae' f|` domA \\<Delta> \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae f|` domA \\<Delta> = ae' f|` domA \\<Delta> \\<Longrightarrow>\n    ABinds \\<Delta>\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae'", "by (rule Abinds_env_cong) (metis env_restr_eqD)"], ["", "lemma ABinds_env_restr[simp]: \"ABinds \\<Delta>\\<cdot>(ae f|` domA \\<Delta>) = ABinds \\<Delta>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Delta>\\<cdot>(ae f|` domA \\<Delta>) = ABinds \\<Delta>\\<cdot>ae", "by (rule Abinds_env_restr_cong) simp"], ["", "lemma Abinds_join_fresh: \"ae' ` (domA \\<Delta>) \\<subseteq> {\\<bottom>} \\<Longrightarrow>  ABinds \\<Delta>\\<cdot>(ae \\<squnion> ae') = (ABinds \\<Delta>\\<cdot>ae)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae' ` domA \\<Delta> \\<subseteq> {\\<bottom>} \\<Longrightarrow>\n    ABinds \\<Delta>\\<cdot>(ae \\<squnion> ae') = ABinds \\<Delta>\\<cdot>ae", "by (rule Abinds_env_cong) auto"], ["", "lemma ABinds_delete_bot: \"ae x = \\<bottom> \\<Longrightarrow> ABinds (delete x \\<Gamma>)\\<cdot>ae = ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae x = \\<bottom> \\<Longrightarrow>\n    ABinds (delete x \\<Gamma>)\\<cdot>ae = ABinds \\<Gamma>\\<cdot>ae", "by (induction \\<Gamma> rule: ABinds.induct) (auto simp add: delete_twist)"], ["", "lemma ABinds_restr_fresh:\n  assumes \"atom ` S \\<sharp>* \\<Gamma>\"\n  shows \"ABinds \\<Gamma>\\<cdot>ae f|` (- S) = ABinds \\<Gamma>\\<cdot>(ae  f|` (- S)) f|` (- S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>ae f|` (- S) =\n    ABinds \\<Gamma>\\<cdot>(ae f|` (- S)) f|` (- S)", "using assms"], ["proof (prove)\nusing this:\n  atom ` S \\<sharp>* \\<Gamma>\n\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>ae f|` (- S) =\n    ABinds \\<Gamma>\\<cdot>(ae f|` (- S)) f|` (- S)", "apply (induction \\<Gamma> rule:ABinds.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. atom ` S \\<sharp>* [] \\<Longrightarrow>\n    ABinds []\\<cdot>ae f|` (- S) = ABinds []\\<cdot>(ae f|` (- S)) f|` (- S)\n 2. \\<And>v e binds.\n       \\<lbrakk>atom ` S \\<sharp>* delete v binds \\<Longrightarrow>\n                ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* ((v, e) # binds)\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds)\\<cdot>ae f|` (- S) =\n                         ABinds ((v, e) # binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>atom ` S \\<sharp>* delete v binds \\<Longrightarrow>\n                ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* ((v, e) # binds)\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds)\\<cdot>ae f|` (- S) =\n                         ABinds ((v, e) # binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S)", "apply (auto simp del: fun_meet_simp simp add: env_restr_join fresh_star_Pair fresh_star_Cons fresh_star_delete)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* v; atom ` S \\<sharp>* e;\n        atom ` S \\<sharp>* binds\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         (- S) \\<squnion>\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) =\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) \\<squnion>\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>(ae f|` (- S))\n                v\\<^esub>\n                          e f|`\n                         (- S)", "apply (subst lookup_env_restr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v e binds.\n       \\<lbrakk>ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* v; atom ` S \\<sharp>* e;\n        atom ` S \\<sharp>* binds\\<rbrakk>\n       \\<Longrightarrow> v \\<in> - S\n 2. \\<And>v e binds.\n       \\<lbrakk>ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* v; atom ` S \\<sharp>* e;\n        atom ` S \\<sharp>* binds\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         (- S) \\<squnion>\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) =\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) \\<squnion>\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         (- S)", "apply (metis (no_types, hide_lams) ComplI fresh_at_base(2) fresh_star_def imageI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>ABinds (delete v binds)\\<cdot>ae f|` (- S) =\n                ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|` (- S);\n        atom ` S \\<sharp>* v; atom ` S \\<sharp>* e;\n        atom ` S \\<sharp>* binds\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         (- S) \\<squnion>\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) =\n                         ABinds (delete v binds)\\<cdot>(ae f|` (- S)) f|`\n                         (- S) \\<squnion>\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         (- S)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma ABinds_restr:\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"ABinds \\<Gamma>\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae  f|` S) f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae f|` S) f|` S", "using assms"], ["proof (prove)\nusing this:\n  domA \\<Gamma> \\<subseteq> S\n\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae f|` S) f|` S", "by (induction \\<Gamma> rule:ABinds.induct) (fastforce simp del: fun_meet_simp simp add: env_restr_join)+"], ["", "lemma ABinds_restr_subst:\n  assumes \"\\<And> x' e a. (x',e) \\<in> set \\<Gamma> \\<Longrightarrow> Aexp e[x::=y]\\<cdot>a f|` S = Aexp e\\<cdot>a f|` S\"\n  assumes \"x \\<notin> S\"\n  assumes \"y \\<notin> S\"\n  assumes \"domA \\<Gamma> \\<subseteq> S\"\n  shows \"ABinds \\<Gamma>[x::h=y]\\<cdot>ae f|` S = ABinds \\<Gamma>\\<cdot>(ae  f|` S) f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>[x::h=y]\\<cdot>ae f|` S =\n    ABinds \\<Gamma>\\<cdot>(ae f|` S) f|` S", "using assms"], ["proof (prove)\nusing this:\n  (?x', ?e) \\<in> set \\<Gamma> \\<Longrightarrow>\n  \\<A>\\<^bsub>?a\\<^esub> ?e[x::=y] f|` S = \\<A>\\<^bsub>?a\\<^esub> ?e f|` S\n  x \\<notin> S\n  y \\<notin> S\n  domA \\<Gamma> \\<subseteq> S\n\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>[x::h=y]\\<cdot>ae f|` S =\n    ABinds \\<Gamma>\\<cdot>(ae f|` S) f|` S", "apply (induction \\<Gamma> rule:ABinds.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x' e a.\n                (x', e) \\<in> set [] \\<Longrightarrow>\n                \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                \\<A>\\<^bsub>a\\<^esub> e f|` S;\n     x \\<notin> S; y \\<notin> S; domA [] \\<subseteq> S\\<rbrakk>\n    \\<Longrightarrow> ABinds [][x::h=y]\\<cdot>ae f|` S =\n                      ABinds []\\<cdot>(ae f|` S) f|` S\n 2. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 x \\<notin> S; y \\<notin> S;\n                 domA (delete v binds) \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds)[x::h=y]\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           (x', ea) \\<in> set ((v, e) # binds) \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S;\n        domA ((v, e) # binds) \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ABinds ((v, e) # binds)[x::h=y]\\<cdot>ae f|` S =\n                         ABinds ((v, e) # binds)\\<cdot>(ae f|` S) f|` S", "apply (auto simp del: fun_meet_simp join_comm simp add: env_restr_join)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S;\n        domA binds \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub>\n                          e[x::=y] f|`\n                         S \\<squnion>\n                         ABinds (delete v binds[x::h=y])\\<cdot>ae f|` S =\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|`\n                         S \\<squnion>\n                         ABinds (delete v binds)\\<cdot>(ae f|` S) f|` S", "apply (rule arg_cong2[where f = join])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S;\n        domA binds \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub>\n                          e[x::=y] f|`\n                         S =\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|` S\n 2. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S;\n        domA binds \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>ae f|` S =\n                         ABinds (delete v binds)\\<cdot>(ae f|` S) f|` S", "apply (case_tac \"ae v\")"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S; domA binds \\<subseteq> S;\n        ae v = \\<bottom>\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub>\n                          e[x::=y] f|`\n                         S =\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|` S\n 2. \\<And>v e binds xa.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S; domA binds \\<subseteq> S;\n        ae v = up\\<cdot>xa\\<rbrakk>\n       \\<Longrightarrow> \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub>\n                          e[x::=y] f|`\n                         S =\n                         \\<A>\\<^sup>\\<bottom>\\<^bsub>ae v\\<^esub> e f|` S\n 3. \\<And>v e binds.\n       \\<lbrakk>\\<lbrakk>\\<And>x' e a.\n                            (x', e)\n                            \\<in> set (delete v binds) \\<Longrightarrow>\n                            \\<A>\\<^bsub>a\\<^esub> e[x::=y] f|` S =\n                            \\<A>\\<^bsub>a\\<^esub> e f|` S;\n                 domA binds - {v} \\<subseteq> S\\<rbrakk>\n                \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>\n                                  ae f|`\n                                  S =\n                                  ABinds (delete v binds)\\<cdot>\n                                  (ae f|` S) f|`\n                                  S;\n        \\<And>x' ea a.\n           x' = v \\<and> ea = e \\<or>\n           (x', ea) \\<in> set binds \\<Longrightarrow>\n           \\<A>\\<^bsub>a\\<^esub> ea[x::=y] f|` S =\n           \\<A>\\<^bsub>a\\<^esub> ea f|` S;\n        x \\<notin> S; y \\<notin> S; v \\<in> S;\n        domA binds \\<subseteq> S\\<rbrakk>\n       \\<Longrightarrow> ABinds (delete v binds[x::h=y])\\<cdot>ae f|` S =\n                         ABinds (delete v binds)\\<cdot>(ae f|` S) f|` S", "apply (auto dest:  subsetD[OF set_delete_subset])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abinds_append_disjoint: \"domA \\<Delta> \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>  ABinds (\\<Delta> @ \\<Gamma>)\\<cdot>ae = ABinds \\<Delta>\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>\n    ABinds (\\<Delta> @ \\<Gamma>)\\<cdot>ae =\n    ABinds \\<Delta>\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae", "proof (induct \\<Delta> rule: ABinds.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. domA [] \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>\n    ABinds ([] @ \\<Gamma>)\\<cdot>ae =\n    ABinds []\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n 2. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "case 1"], ["proof (state)\nthis:\n  domA [] \\<inter> domA \\<Gamma> = {}\n\ngoal (2 subgoals):\n 1. domA [] \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>\n    ABinds ([] @ \\<Gamma>)\\<cdot>ae =\n    ABinds []\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n 2. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "thus ?case"], ["proof (prove)\nusing this:\n  domA [] \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. ABinds ([] @ \\<Gamma>)\\<cdot>ae =\n    ABinds []\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae", "by simp"], ["proof (state)\nthis:\n  ABinds ([] @ \\<Gamma>)\\<cdot>ae =\n  ABinds []\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "case (2 v e \\<Delta>)"], ["proof (state)\nthis:\n  domA (delete v \\<Delta>) \\<inter> domA \\<Gamma> = {} \\<Longrightarrow>\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n  domA ((v, e) # \\<Delta>) \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "from 2(2)"], ["proof (chain)\npicking this:\n  domA ((v, e) # \\<Delta>) \\<inter> domA \\<Gamma> = {}", "have \"v \\<notin> domA \\<Gamma>\" and  \"domA (delete v \\<Delta>) \\<inter> domA \\<Gamma> = {}\""], ["proof (prove)\nusing this:\n  domA ((v, e) # \\<Delta>) \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. v \\<notin> domA \\<Gamma> &&&\n    domA (delete v \\<Delta>) \\<inter> domA \\<Gamma> = {}", "by auto"], ["proof (state)\nthis:\n  v \\<notin> domA \\<Gamma>\n  domA (delete v \\<Delta>) \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "from 2(1)[OF this(2)]"], ["proof (chain)\npicking this:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae", "have \"ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae = ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\nusing this:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n\ngoal (1 subgoal):\n 1. ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n    ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae", "."], ["proof (state)\nthis:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "moreover"], ["proof (state)\nthis:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "have \"delete v \\<Gamma> = \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. delete v \\<Gamma> = \\<Gamma>", "by (metis \\<open>v \\<notin> domA \\<Gamma>\\<close> delete_not_domA)"], ["proof (state)\nthis:\n  delete v \\<Gamma> = \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>v e binds.\n       \\<lbrakk>domA (delete v binds) \\<inter> domA \\<Gamma> =\n                {} \\<Longrightarrow>\n                ABinds (delete v binds @ \\<Gamma>)\\<cdot>ae =\n                ABinds (delete v binds)\\<cdot>ae \\<squnion>\n                ABinds \\<Gamma>\\<cdot>ae;\n        domA ((v, e) # binds) \\<inter> domA \\<Gamma> = {}\\<rbrakk>\n       \\<Longrightarrow> ABinds (((v, e) # binds) @ \\<Gamma>)\\<cdot>ae =\n                         ABinds ((v, e) # binds)\\<cdot>ae \\<squnion>\n                         ABinds \\<Gamma>\\<cdot>ae", "ultimately"], ["proof (chain)\npicking this:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n  delete v \\<Gamma> = \\<Gamma>", "show \" ABinds (((v, e) # \\<Delta>) @ \\<Gamma>)\\<cdot>ae = ABinds ((v, e) # \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\nusing this:\n  ABinds (delete v \\<Delta> @ \\<Gamma>)\\<cdot>ae =\n  ABinds (delete v \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n  delete v \\<Gamma> = \\<Gamma>\n\ngoal (1 subgoal):\n 1. ABinds (((v, e) # \\<Delta>) @ \\<Gamma>)\\<cdot>ae =\n    ABinds ((v, e) # \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae", "by auto"], ["proof (state)\nthis:\n  ABinds (((v, e) # \\<Delta>) @ \\<Gamma>)\\<cdot>ae =\n  ABinds ((v, e) # \\<Delta>)\\<cdot>ae \\<squnion> ABinds \\<Gamma>\\<cdot>ae\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ABinds_restr_subset: \"S \\<subseteq> S' \\<Longrightarrow> ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds (restrictA S' \\<Gamma>)\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> S' \\<Longrightarrow>\n    ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq>\n    ABinds (restrictA S' \\<Gamma>)\\<cdot>ae", "by (induct \\<Gamma> rule: ABinds.induct)\n     (auto simp add: join_below_iff  restr_delete_twist intro: below_trans[OF _ join_above2])"], ["", "lemma ABinds_restrict_edom: \"ABinds (restrictA (edom ae) \\<Gamma>)\\<cdot>ae = ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds (restrictA (edom ae) \\<Gamma>)\\<cdot>ae =\n    ABinds \\<Gamma>\\<cdot>ae", "by (induct \\<Gamma> rule: ABinds.induct) (auto simp add: edom_def restr_delete_twist)"], ["", "lemma ABinds_restrict_below: \"ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds (restrictA S \\<Gamma>)\\<cdot>ae \\<sqsubseteq>\n    ABinds \\<Gamma>\\<cdot>ae", "by (induct \\<Gamma> rule: ABinds.induct)\n     (auto simp add: join_below_iff  restr_delete_twist intro: below_trans[OF _ join_above2] simp del: fun_meet_simp join_comm)"], ["", "lemma ABinds_delete_below: \"ABinds (delete x \\<Gamma>)\\<cdot>ae \\<sqsubseteq> ABinds \\<Gamma>\\<cdot>ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds (delete x \\<Gamma>)\\<cdot>ae \\<sqsubseteq>\n    ABinds \\<Gamma>\\<cdot>ae", "by (induct \\<Gamma> rule: ABinds.induct)\n     (auto simp add: join_below_iff   delete_twist[where x = x] elim: below_trans simp del: fun_meet_simp)"], ["", "end"], ["", "lemma ABind_eqvt[eqvt]: \"\\<pi> \\<bullet> (ArityAnalysis.ABind Aexp v e) = ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> ArityAnalysis.ABind Aexp v e =\n    ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v)\n     (\\<pi> \\<bullet> e)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> ArityAnalysis.ABind Aexp v e\\<cdot>x =\n       ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x)", "unfolding ArityAnalysis.ABind_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> fup\\<cdot>(Aexp e)\\<cdot>(x v) =\n       fup\\<cdot>((\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> e))\\<cdot>\n       ((\\<pi> \\<bullet> x) (\\<pi> \\<bullet> v))", "by perm_simp rule"], ["", "lemma ABinds_eqvt[eqvt]: \"\\<pi> \\<bullet> (ArityAnalysis.ABinds Aexp \\<Gamma>) = ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp \\<Gamma> =\n    ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> \\<Gamma>)", "apply (rule cfun_eqvtI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp \\<Gamma>\\<cdot>x =\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (\\<pi> \\<bullet> \\<Gamma>)\\<cdot>\n       (\\<pi> \\<bullet> x)", "apply (induction \\<Gamma> rule: ArityAnalysis.ABinds.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp []\\<cdot>x =\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (\\<pi> \\<bullet> [])\\<cdot>\n       (\\<pi> \\<bullet> x)\n 2. \\<And>v e binds x.\n       (\\<And>x.\n           \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp (delete v binds)\\<cdot>\n                           x =\n           ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n            (\\<pi> \\<bullet> delete v binds)\\<cdot>\n           (\\<pi> \\<bullet> x)) \\<Longrightarrow>\n       \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp ((v, e) # binds)\\<cdot>x =\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (\\<pi> \\<bullet> ((v, e) # binds))\\<cdot>\n       (\\<pi> \\<bullet> x)", "apply (simp add: ArityAnalysis.ABinds.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds x.\n       (\\<And>x.\n           \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp (delete v binds)\\<cdot>\n                           x =\n           ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n            (\\<pi> \\<bullet> delete v binds)\\<cdot>\n           (\\<pi> \\<bullet> x)) \\<Longrightarrow>\n       \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp ((v, e) # binds)\\<cdot>x =\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (\\<pi> \\<bullet> ((v, e) # binds))\\<cdot>\n       (\\<pi> \\<bullet> x)", "apply (simp add: ArityAnalysis.ABinds.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds x.\n       (\\<And>x.\n           \\<pi> \\<bullet> ArityAnalysis.ABinds Aexp (delete v binds)\\<cdot>\n                           x =\n           ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n            (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n           (\\<pi> \\<bullet> x)) \\<Longrightarrow>\n       \\<pi> \\<bullet> ArityAnalysis.ABind Aexp v e\\<cdot>x \\<squnion>\n                       ArityAnalysis.ABinds Aexp (delete v binds)\\<cdot>x =\n       ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x) \\<squnion>\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n       (\\<pi> \\<bullet> x)", "apply perm_simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v e binds x.\n       (\\<And>x.\n           (\\<pi> \\<bullet> ArityAnalysis.ABinds) (\\<pi> \\<bullet> Aexp)\n            (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n           (\\<pi> \\<bullet> x) =\n           ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n            (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n           (\\<pi> \\<bullet> x)) \\<Longrightarrow>\n       ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x) \\<squnion>\n       (\\<pi> \\<bullet> ArityAnalysis.ABinds) (\\<pi> \\<bullet> Aexp)\n        (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n       (\\<pi> \\<bullet> x) =\n       ArityAnalysis.ABind (\\<pi> \\<bullet> Aexp) (\\<pi> \\<bullet> v)\n        (\\<pi> \\<bullet> e)\\<cdot>\n       (\\<pi> \\<bullet> x) \\<squnion>\n       ArityAnalysis.ABinds (\\<pi> \\<bullet> Aexp)\n        (delete (\\<pi> \\<bullet> v) (\\<pi> \\<bullet> binds))\\<cdot>\n       (\\<pi> \\<bullet> x)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma Abinds_cong[fundef_cong]:\n  \"\\<lbrakk> (\\<And> e. e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e) ; heap1 = heap2 \\<rbrakk>\n      \\<Longrightarrow> ArityAnalysis.ABinds aexp1 heap1 = ArityAnalysis.ABinds aexp2 heap2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>e.\n                e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n     heap1 = heap2\\<rbrakk>\n    \\<Longrightarrow> ArityAnalysis.ABinds aexp1 heap1 =\n                      ArityAnalysis.ABinds aexp2 heap2", "proof (induction heap1 arbitrary:heap2 rule:ArityAnalysis.ABinds.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>heap2.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   aexp1 e = aexp2 e;\n        [] = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 [] =\n                         ArityAnalysis.ABinds aexp2 heap2\n 2. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "case 1"], ["proof (state)\nthis:\n  ?e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n  [] = heap2\n\ngoal (2 subgoals):\n 1. \\<And>heap2.\n       \\<lbrakk>\\<And>e.\n                   e \\<in> snd ` set heap2 \\<Longrightarrow>\n                   aexp1 e = aexp2 e;\n        [] = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 [] =\n                         ArityAnalysis.ABinds aexp2 heap2\n 2. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "thus ?case"], ["proof (prove)\nusing this:\n  ?e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n  [] = heap2\n\ngoal (1 subgoal):\n 1. ArityAnalysis.ABinds aexp1 [] = ArityAnalysis.ABinds aexp2 heap2", "by (auto simp add: ArityAnalysis.ABinds.simps)"], ["proof (state)\nthis:\n  ArityAnalysis.ABinds aexp1 [] = ArityAnalysis.ABinds aexp2 heap2\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "case prems: (2 v e as heap2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>e.\n              e \\<in> snd ` set ?heap2.0 \\<Longrightarrow>\n              aexp1 e = aexp2 e;\n   delete v as = ?heap2.0\\<rbrakk>\n  \\<Longrightarrow> ArityAnalysis.ABinds aexp1 (delete v as) =\n                    ArityAnalysis.ABinds aexp2 ?heap2.0\n  ?e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n  (v, e) # as = heap2\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "have \"snd ` set (delete v as) \\<subseteq> snd ` set as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` set (delete v as) \\<subseteq> snd ` set as", "by (rule dom_delete_subset)"], ["proof (state)\nthis:\n  snd ` set (delete v as) \\<subseteq> snd ` set as\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "also"], ["proof (state)\nthis:\n  snd ` set (delete v as) \\<subseteq> snd ` set as\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "have \"\\<dots> \\<subseteq> snd `set ((v, e) # as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ` set as \\<subseteq> snd ` set ((v, e) # as)", "by auto"], ["proof (state)\nthis:\n  snd ` set as \\<subseteq> snd ` set ((v, e) # as)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "also"], ["proof (state)\nthis:\n  snd ` set as \\<subseteq> snd ` set ((v, e) # as)\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "note prems(3)"], ["proof (state)\nthis:\n  (v, e) # as = heap2\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "finally"], ["proof (chain)\npicking this:\n  snd ` set (delete v as) \\<subseteq> snd ` set heap2", "have \"(\\<And>e. e \\<in> snd ` set (delete v as) \\<Longrightarrow> aexp1 e = aexp2 e)\""], ["proof (prove)\nusing this:\n  snd ` set (delete v as) \\<subseteq> snd ` set heap2\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       e \\<in> snd ` set (delete v as) \\<Longrightarrow> aexp1 e = aexp2 e", "by -(rule prems, auto)"], ["proof (state)\nthis:\n  ?e \\<in> snd ` set (delete v as) \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n\ngoal (1 subgoal):\n 1. \\<And>v e binds heap2.\n       \\<lbrakk>\\<And>heap2.\n                   \\<lbrakk>\\<And>e.\n                               e \\<in> snd ` set heap2 \\<Longrightarrow>\n                               aexp1 e = aexp2 e;\n                    delete v binds = heap2\\<rbrakk>\n                   \\<Longrightarrow> ArityAnalysis.ABinds aexp1\n(delete v binds) =\n                                     ArityAnalysis.ABinds aexp2 heap2;\n        \\<And>e.\n           e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 e = aexp2 e;\n        (v, e) # binds = heap2\\<rbrakk>\n       \\<Longrightarrow> ArityAnalysis.ABinds aexp1 ((v, e) # binds) =\n                         ArityAnalysis.ABinds aexp2 heap2", "from prems prems(1)[OF this refl]"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>e.\n              e \\<in> snd ` set ?heap2.0 \\<Longrightarrow>\n              aexp1 e = aexp2 e;\n   delete v as = ?heap2.0\\<rbrakk>\n  \\<Longrightarrow> ArityAnalysis.ABinds aexp1 (delete v as) =\n                    ArityAnalysis.ABinds aexp2 ?heap2.0\n  ?e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n  (v, e) # as = heap2\n  (\\<And>e.\n      e \\<in> snd ` set (delete v as) \\<Longrightarrow>\n      e \\<in> snd ` set (delete v as)) \\<Longrightarrow>\n  ArityAnalysis.ABinds aexp1 (delete v as) =\n  ArityAnalysis.ABinds aexp2 (delete v as)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>e.\n              e \\<in> snd ` set ?heap2.0 \\<Longrightarrow>\n              aexp1 e = aexp2 e;\n   delete v as = ?heap2.0\\<rbrakk>\n  \\<Longrightarrow> ArityAnalysis.ABinds aexp1 (delete v as) =\n                    ArityAnalysis.ABinds aexp2 ?heap2.0\n  ?e \\<in> snd ` set heap2 \\<Longrightarrow> aexp1 ?e = aexp2 ?e\n  (v, e) # as = heap2\n  (\\<And>e.\n      e \\<in> snd ` set (delete v as) \\<Longrightarrow>\n      e \\<in> snd ` set (delete v as)) \\<Longrightarrow>\n  ArityAnalysis.ABinds aexp1 (delete v as) =\n  ArityAnalysis.ABinds aexp2 (delete v as)\n\ngoal (1 subgoal):\n 1. ArityAnalysis.ABinds aexp1 ((v, e) # as) =\n    ArityAnalysis.ABinds aexp2 heap2", "by (auto simp add: ArityAnalysis.ABinds.simps ArityAnalysis.ABind_def)"], ["proof (state)\nthis:\n  ArityAnalysis.ABinds aexp1 ((v, e) # as) =\n  ArityAnalysis.ABinds aexp2 heap2\n\ngoal:\nNo subgoals!", "qed"], ["", "context EdomArityAnalysis\nbegin"], ["", "lemma fup_Aexp_lookup_fresh: \"atom v \\<sharp> e \\<Longrightarrow> (fup\\<cdot>(Aexp e)\\<cdot>a) v = \\<bottom>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom v \\<sharp> e \\<Longrightarrow>\n    \\<A>\\<^sup>\\<bottom>\\<^bsub>a\\<^esub> e v = \\<bottom>", "by (cases a) auto"], ["", "lemma edom_AnalBinds: \"edom (ABinds \\<Gamma>\\<cdot>ae) \\<subseteq> fv \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (ABinds \\<Gamma>\\<cdot>ae) \\<subseteq> fv \\<Gamma>", "by (induction \\<Gamma> rule: ABinds.induct)\n       (auto simp del: fun_meet_simp dest: subsetD[OF fup_Aexp_edom] dest: subsetD[OF fv_delete_subset])"], ["", "end"], ["", "end"]]}