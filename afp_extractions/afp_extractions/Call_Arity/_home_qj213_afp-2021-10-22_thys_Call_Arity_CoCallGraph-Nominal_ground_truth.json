{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CoCallGraph-Nominal.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemmas lub_eqvt[OF exists_lub, simp, eqvt]", "lemma cc_restr_perm:\n  fixes G :: CoCalls\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"cc_restr S (p \\<bullet> G) = cc_restr S G\"", "lemma inCC_eqvt[eqvt]: \"\\<pi> \\<bullet> (x--y\\<in>G) = (\\<pi>\\<bullet>x)--(\\<pi>\\<bullet>y)\\<in>(\\<pi>\\<bullet>G)\"", "lemma cc_restr_eqvt[eqvt]: \"\\<pi> \\<bullet> cc_restr S G = cc_restr (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> G)\"", "lemma ccProd_eqvt[eqvt]: \"\\<pi> \\<bullet> ccProd S S' = ccProd (\\<pi> \\<bullet> S) (\\<pi> \\<bullet>  S')\"", "lemma ccSquare_eqvt[eqvt]: \"\\<pi> \\<bullet> ccSquare S = ccSquare (\\<pi> \\<bullet> S)\"", "lemma ccNeighbors_eqvt[eqvt]: \"\\<pi> \\<bullet> ccNeighbors S G = ccNeighbors (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> G)\""], "translations": [["", "lemmas lub_eqvt[OF exists_lub, simp, eqvt]"], ["", "lemma cc_restr_perm:\n  fixes G :: CoCalls\n  assumes \"supp p \\<sharp>* S\" and [simp]: \"finite S\"\n  shows \"cc_restr S (p \\<bullet> G) = cc_restr S G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<bullet> G) G|` S = G G|` S", "using assms"], ["proof (prove)\nusing this:\n  supp p \\<sharp>* S\n  finite S\n\ngoal (1 subgoal):\n 1. (p \\<bullet> G) G|` S = G G|` S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>supp p \\<sharp>* S; finite S\\<rbrakk>\n    \\<Longrightarrow> (p \\<bullet> G) G|` S = G G|` S", "apply transfer"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p S G.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G\\<rbrakk>\n       \\<Longrightarrow> Set.filter\n                          (\\<lambda>(x, y). x \\<in> S \\<and> y \\<in> S)\n                          (p \\<bullet> G) =\n                         Set.filter\n                          (\\<lambda>(x, y). x \\<in> S \\<and> y \\<in> S) G", "apply (auto simp add: mem_permute_set)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G;\n        (- p \\<bullet> a, - p \\<bullet> b) \\<in> G; a \\<in> S;\n        b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> G\n 2. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G; (a, b) \\<in> G;\n        a \\<in> S; b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (- p \\<bullet> a, - p \\<bullet> b) \\<in> G", "apply (subst (asm) perm_supp_eq, simp add: supp_minus_perm, metis (full_types) fresh_def fresh_star_def supp_set_elem_finite)+"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G; (a, b) \\<in> G;\n        a \\<in> S; b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> G\n 2. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G; (a, b) \\<in> G;\n        a \\<in> S; b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (- p \\<bullet> a, - p \\<bullet> b) \\<in> G", "apply assumption"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G; (a, b) \\<in> G;\n        a \\<in> S; b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (- p \\<bullet> a, - p \\<bullet> b) \\<in> G", "apply (subst perm_supp_eq, simp add: supp_minus_perm, metis (full_types) fresh_def fresh_star_def supp_set_elem_finite)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p S G a b.\n       \\<lbrakk>supp p \\<sharp>* S; finite S; sym G; (a, b) \\<in> G;\n        a \\<in> S; b \\<in> S\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> G", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma inCC_eqvt[eqvt]: \"\\<pi> \\<bullet> (x--y\\<in>G) = (\\<pi>\\<bullet>x)--(\\<pi>\\<bullet>y)\\<in>(\\<pi>\\<bullet>G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> x--y\\<in>G =\n    (\\<pi> \\<bullet> x)--(\\<pi> \\<bullet> y)\\<in>(\\<pi> \\<bullet> G)", "by transfer auto"], ["", "lemma cc_restr_eqvt[eqvt]: \"\\<pi> \\<bullet> cc_restr S G = cc_restr (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> G G|` S = (\\<pi> \\<bullet> G) G|` (\\<pi> \\<bullet> S)", "by transfer (perm_simp, rule)"], ["", "lemma ccProd_eqvt[eqvt]: \"\\<pi> \\<bullet> ccProd S S' = ccProd (\\<pi> \\<bullet> S) (\\<pi> \\<bullet>  S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> S G\\<times> S' =\n    (\\<pi> \\<bullet> S) G\\<times> (\\<pi> \\<bullet> S')", "by transfer (perm_simp, rule)"], ["", "lemma ccSquare_eqvt[eqvt]: \"\\<pi> \\<bullet> ccSquare S = ccSquare (\\<pi> \\<bullet> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> S\\<^sup>2 = (\\<pi> \\<bullet> S)\\<^sup>2", "unfolding ccSquare_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> S G\\<times> S =\n    (\\<pi> \\<bullet> S) G\\<times> (\\<pi> \\<bullet> S)", "by perm_simp rule"], ["", "lemma ccNeighbors_eqvt[eqvt]: \"\\<pi> \\<bullet> ccNeighbors S G = ccNeighbors (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> ccNeighbors S G =\n    ccNeighbors (\\<pi> \\<bullet> S) (\\<pi> \\<bullet> G)", "by transfer (perm_simp, rule)"], ["", "end"]]}