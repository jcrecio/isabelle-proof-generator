{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/BalancedTraces.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma trace_induct_final[consumes 1, case_names trace_nil trace_cons]:\n  \"trace x1 x2 final \\<Longrightarrow> P final [] final \\<Longrightarrow> (\\<And>conf' T  conf. trace conf' T final \\<Longrightarrow> P conf' T final \\<Longrightarrow> conf \\<Rightarrow> conf' \\<Longrightarrow> P conf (conf' # T) final) \\<Longrightarrow> P x1 x2 final\"", "lemma build_trace:\n  \"c \\<Rightarrow>\\<^sup>* c' \\<Longrightarrow> \\<exists> T. trace c T c'\"", "lemma destruct_trace:  \"trace c T c' \\<Longrightarrow> c \\<Rightarrow>\\<^sup>* c'\"", "lemma traceWhile:\n  assumes \"trace c\\<^sub>1 T c\\<^sub>4\"\n  assumes \"P c\\<^sub>1\"\n  assumes \"\\<not> P c\\<^sub>4\"\n  obtains  T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2\n  where \"T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2\"  and \"trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2\" and \"\\<forall>x\\<in>set T\\<^sub>1.  P x\" and \"P c\\<^sub>2\" and \"c\\<^sub>2 \\<Rightarrow> c\\<^sub>3\" and \"\\<not> P c\\<^sub>3\" and \"trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\"", "lemma traces_list_all:\n  \"trace c T c' \\<Longrightarrow> P c' \\<Longrightarrow> (\\<And> c c'. c \\<Rightarrow> c' \\<Longrightarrow> P c' \\<Longrightarrow> P c) \\<Longrightarrow> (\\<forall> x\\<in>set T. P x) \\<and> P c\"", "lemma trace_nil[simp]: \"trace c [] c' \\<longleftrightarrow> c = c'\"", "lemma extends_refl[simp]: \"S \\<lesssim> S\"", "lemma extends_cons[simp]: \"S \\<lesssim> x # S\"", "lemma extends_append[simp]: \"S \\<lesssim> L @ S\"", "lemma extends_not_cons[simp]: \"\\<not> (x # S) \\<lesssim> S\"", "lemma extends_trans[trans]: \"S \\<lesssim> S' \\<Longrightarrow> S' \\<lesssim> S'' \\<Longrightarrow> S \\<lesssim> S''\"", "lemma bal_nil[simp]: \"bal c [] c' \\<longleftrightarrow> c = c'\"", "lemma bal_stackD: \"bal c T c' \\<Longrightarrow> stack c' = stack c\"", "lemma stack_passes_lower_bound:\n  assumes \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\" \n  assumes \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\" \n  assumes \"\\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\" \n  shows \"stack c\\<^sub>3 = stack c\\<^sub>2\" and \"stack c\\<^sub>4 = tl (stack c\\<^sub>2)\"", "lemma bal_consE:\n  assumes \"bal c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\"\n  and c\\<^sub>2: \"stack c\\<^sub>2 = s # stack c\\<^sub>1\"\n  obtains T\\<^sub>1 c\\<^sub>3 c\\<^sub>4 T\\<^sub>2\n  where \"T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\" and  \"bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\" and \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\" \"bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\""], "translations": [["", "lemma trace_induct_final[consumes 1, case_names trace_nil trace_cons]:\n  \"trace x1 x2 final \\<Longrightarrow> P final [] final \\<Longrightarrow> (\\<And>conf' T  conf. trace conf' T final \\<Longrightarrow> P conf' T final \\<Longrightarrow> conf \\<Rightarrow> conf' \\<Longrightarrow> P conf (conf' # T) final) \\<Longrightarrow> P x1 x2 final\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace x1 x2 final; P final [] final;\n     \\<And>conf' T conf.\n        \\<lbrakk>trace conf' T final; P conf' T final;\n         conf \\<Rightarrow> conf'\\<rbrakk>\n        \\<Longrightarrow> P conf (conf' # T) final\\<rbrakk>\n    \\<Longrightarrow> P x1 x2 final", "by (induction rule:trace.induct) auto"], ["", "lemma build_trace:\n  \"c \\<Rightarrow>\\<^sup>* c' \\<Longrightarrow> \\<exists> T. trace c T c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<Rightarrow>\\<^sup>* c' \\<Longrightarrow> \\<exists>T. trace c T c'", "proof(induction rule: converse_rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>T. trace c' T c'\n 2. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "have \"trace c' [] c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace c' [] c'", ".."], ["proof (state)\nthis:\n  trace c' [] c'\n\ngoal (2 subgoals):\n 1. \\<exists>T. trace c' T c'\n 2. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "thus \"\\<exists>T. trace c' T c'\""], ["proof (prove)\nusing this:\n  trace c' [] c'\n\ngoal (1 subgoal):\n 1. \\<exists>T. trace c' T c'", ".."], ["proof (state)\nthis:\n  \\<exists>T. trace c' T c'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "fix y z"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "assume \"y \\<Rightarrow> z\""], ["proof (state)\nthis:\n  y \\<Rightarrow> z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "assume \"\\<exists>T. trace z T c'\""], ["proof (state)\nthis:\n  \\<exists>T. trace z T c'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "then"], ["proof (chain)\npicking this:\n  \\<exists>T. trace z T c'", "obtain T where \"trace z T c'\""], ["proof (prove)\nusing this:\n  \\<exists>T. trace z T c'\n\ngoal (1 subgoal):\n 1. (\\<And>T. trace z T c' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", ".."], ["proof (state)\nthis:\n  trace z T c'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "with \\<open>y \\<Rightarrow> z\\<close>"], ["proof (chain)\npicking this:\n  y \\<Rightarrow> z\n  trace z T c'", "have \"trace y (z#T) c'\""], ["proof (prove)\nusing this:\n  y \\<Rightarrow> z\n  trace z T c'\n\ngoal (1 subgoal):\n 1. trace y (z # T) c'", "by auto"], ["proof (state)\nthis:\n  trace y (z # T) c'\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>y \\<Rightarrow> z; z \\<Rightarrow>\\<^sup>* c';\n        \\<exists>T. trace z T c'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T. trace y T c'", "thus \"\\<exists>T. trace y T c'\""], ["proof (prove)\nusing this:\n  trace y (z # T) c'\n\ngoal (1 subgoal):\n 1. \\<exists>T. trace y T c'", "by blast"], ["proof (state)\nthis:\n  \\<exists>T. trace y T c'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma destruct_trace:  \"trace c T c' \\<Longrightarrow> c \\<Rightarrow>\\<^sup>* c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace c T c' \\<Longrightarrow> c \\<Rightarrow>\\<^sup>* c'", "by (induction rule:trace.induct) auto"], ["", "lemma traceWhile:\n  assumes \"trace c\\<^sub>1 T c\\<^sub>4\"\n  assumes \"P c\\<^sub>1\"\n  assumes \"\\<not> P c\\<^sub>4\"\n  obtains  T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2\n  where \"T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2\"  and \"trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2\" and \"\\<forall>x\\<in>set T\\<^sub>1.  P x\" and \"P c\\<^sub>2\" and \"c\\<^sub>2 \\<Rightarrow> c\\<^sub>3\" and \"\\<not> P c\\<^sub>3\" and \"trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>3 T\\<^sub>2 c\\<^sub>2.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2;\n         trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2;\n         \\<forall>x\\<in>set T\\<^sub>1. P x; P c\\<^sub>2;\n         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3; \\<not> P c\\<^sub>3;\n         trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>3 T\\<^sub>2 c\\<^sub>2.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2;\n         trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2;\n         \\<forall>x\\<in>set T\\<^sub>1. P x; P c\\<^sub>2;\n         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3; \\<not> P c\\<^sub>3;\n         trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from assms"], ["proof (chain)\npicking this:\n  trace c\\<^sub>1 T c\\<^sub>4\n  P c\\<^sub>1\n  \\<not> P c\\<^sub>4", "have \"\\<exists> T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2 . (T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and> trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2 \\<and> (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and> P c\\<^sub>2 \\<and> c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and> \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4)\""], ["proof (prove)\nusing this:\n  trace c\\<^sub>1 T c\\<^sub>4\n  P c\\<^sub>1\n  \\<not> P c\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n       T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n       trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2 \\<and>\n       (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n       P c\\<^sub>2 \\<and>\n       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n       \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4", "proof(induction)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>final.\n       \\<lbrakk>P final; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            [] = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace final T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final\n 2. \\<And>conf' T final conf.\n       \\<lbrakk>trace conf' T final;\n        \\<lbrakk>P conf'; \\<not> P final\\<rbrakk>\n        \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                             T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                             trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                             Ball (set T\\<^sub>1) P \\<and>\n                             P c\\<^sub>2 \\<and>\n                             c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                             \\<not> P c\\<^sub>3 \\<and>\n                             trace c\\<^sub>3 T\\<^sub>2 final;\n        conf \\<Rightarrow> conf'; P conf; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            conf' # T =\n                            T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final", "case trace_nil"], ["proof (state)\nthis:\n  P final_\n  \\<not> P final_\n\ngoal (2 subgoals):\n 1. \\<And>final.\n       \\<lbrakk>P final; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            [] = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace final T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final\n 2. \\<And>conf' T final conf.\n       \\<lbrakk>trace conf' T final;\n        \\<lbrakk>P conf'; \\<not> P final\\<rbrakk>\n        \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                             T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                             trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                             Ball (set T\\<^sub>1) P \\<and>\n                             P c\\<^sub>2 \\<and>\n                             c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                             \\<not> P c\\<^sub>3 \\<and>\n                             trace c\\<^sub>3 T\\<^sub>2 final;\n        conf \\<Rightarrow> conf'; P conf; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            conf' # T =\n                            T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final", "thus ?case"], ["proof (prove)\nusing this:\n  P final_\n  \\<not> P final_\n\ngoal (1 subgoal):\n 1. \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n       [] = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n       trace final_ T\\<^sub>1 c\\<^sub>2 \\<and>\n       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n       P c\\<^sub>2 \\<and>\n       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n       \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 final_", "by auto"], ["proof (state)\nthis:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     [] = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace final_ T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 final_\n\ngoal (1 subgoal):\n 1. \\<And>conf' T final conf.\n       \\<lbrakk>trace conf' T final;\n        \\<lbrakk>P conf'; \\<not> P final\\<rbrakk>\n        \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                             T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                             trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                             Ball (set T\\<^sub>1) P \\<and>\n                             P c\\<^sub>2 \\<and>\n                             c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                             \\<not> P c\\<^sub>3 \\<and>\n                             trace c\\<^sub>3 T\\<^sub>2 final;\n        conf \\<Rightarrow> conf'; P conf; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            conf' # T =\n                            T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>conf' T final conf.\n       \\<lbrakk>trace conf' T final;\n        \\<lbrakk>P conf'; \\<not> P final\\<rbrakk>\n        \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                             T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                             trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                             Ball (set T\\<^sub>1) P \\<and>\n                             P c\\<^sub>2 \\<and>\n                             c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                             \\<not> P c\\<^sub>3 \\<and>\n                             trace c\\<^sub>3 T\\<^sub>2 final;\n        conf \\<Rightarrow> conf'; P conf; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            conf' # T =\n                            T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final", "case (trace_cons conf' T \"end\" conf)"], ["proof (state)\nthis:\n  trace conf' T end\n  conf \\<Rightarrow> conf'\n  \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                       T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                       trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                       P c\\<^sub>2 \\<and>\n                       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                       \\<not> P c\\<^sub>3 \\<and>\n                       trace c\\<^sub>3 T\\<^sub>2 end\n  P conf\n  \\<not> P end\n\ngoal (1 subgoal):\n 1. \\<And>conf' T final conf.\n       \\<lbrakk>trace conf' T final;\n        \\<lbrakk>P conf'; \\<not> P final\\<rbrakk>\n        \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                             T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                             trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                             Ball (set T\\<^sub>1) P \\<and>\n                             P c\\<^sub>2 \\<and>\n                             c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                             \\<not> P c\\<^sub>3 \\<and>\n                             trace c\\<^sub>3 T\\<^sub>2 final;\n        conf \\<Rightarrow> conf'; P conf; \\<not> P final\\<rbrakk>\n       \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                            conf' # T =\n                            T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                            trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                            Ball (set T\\<^sub>1) P \\<and>\n                            P c\\<^sub>2 \\<and>\n                            c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                            \\<not> P c\\<^sub>3 \\<and>\n                            trace c\\<^sub>3 T\\<^sub>2 final", "thus ?case"], ["proof (prove)\nusing this:\n  trace conf' T end\n  conf \\<Rightarrow> conf'\n  \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                       T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                       trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                       P c\\<^sub>2 \\<and>\n                       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                       \\<not> P c\\<^sub>3 \\<and>\n                       trace c\\<^sub>3 T\\<^sub>2 end\n  P conf\n  \\<not> P end\n\ngoal (1 subgoal):\n 1. \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n       conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n       trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n       P c\\<^sub>2 \\<and>\n       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n       \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "proof (cases \"P conf'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end\n 2. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "case True"], ["proof (state)\nthis:\n  P conf'\n\ngoal (2 subgoals):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end\n 2. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "from trace_cons.IH[OF True \\<open>\\<not> P end\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "obtain T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2 where \"T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and> trace conf' T\\<^sub>1 c\\<^sub>2 \\<and> (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and> P c\\<^sub>2 \\<and> c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and> \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\""], ["proof (prove)\nusing this:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>3 T\\<^sub>2 c\\<^sub>2.\n        T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n        trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n        (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n        P c\\<^sub>2 \\<and>\n        c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n        \\<not> P c\\<^sub>3 \\<and>\n        trace c\\<^sub>3 T\\<^sub>2 end \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n  trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n  (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n  P c\\<^sub>2 \\<and>\n  c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n  \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (2 subgoals):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end\n 2. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "with True"], ["proof (chain)\npicking this:\n  P conf'\n  T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n  trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n  (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n  P c\\<^sub>2 \\<and>\n  c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n  \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "have \"conf' # T = (conf' # T\\<^sub>1) @ c\\<^sub>3 # T\\<^sub>2 \\<and> trace conf (conf' # T\\<^sub>1) c\\<^sub>2 \\<and> (\\<forall>x\\<in>set (conf' # T\\<^sub>1). P x)  \\<and> P c\\<^sub>2 \\<and> c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and> \\<not> P c\\<^sub>3  \\<and> trace c\\<^sub>3 T\\<^sub>2 end\""], ["proof (prove)\nusing this:\n  P conf'\n  T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n  trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n  (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n  P c\\<^sub>2 \\<and>\n  c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n  \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (1 subgoal):\n 1. conf' # T = (conf' # T\\<^sub>1) @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n    trace conf (conf' # T\\<^sub>1) c\\<^sub>2 \\<and>\n    (\\<forall>x\\<in>set (conf' # T\\<^sub>1). P x) \\<and>\n    P c\\<^sub>2 \\<and>\n    c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n    \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "by (auto intro: trace_cons)"], ["proof (state)\nthis:\n  conf' # T = (conf' # T\\<^sub>1) @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n  trace conf (conf' # T\\<^sub>1) c\\<^sub>2 \\<and>\n  (\\<forall>x\\<in>set (conf' # T\\<^sub>1). P x) \\<and>\n  P c\\<^sub>2 \\<and>\n  c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n  \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (2 subgoals):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end\n 2. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "thus ?thesis"], ["proof (prove)\nusing this:\n  conf' # T = (conf' # T\\<^sub>1) @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n  trace conf (conf' # T\\<^sub>1) c\\<^sub>2 \\<and>\n  (\\<forall>x\\<in>set (conf' # T\\<^sub>1). P x) \\<and>\n  P c\\<^sub>2 \\<and>\n  c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n  \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (1 subgoal):\n 1. \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n       conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n       trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n       P c\\<^sub>2 \\<and>\n       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n       \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "by blast"], ["proof (state)\nthis:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal (1 subgoal):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "case False"], ["proof (state)\nthis:\n  \\<not> P conf'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "with trace_cons"], ["proof (chain)\npicking this:\n  trace conf' T end\n  conf \\<Rightarrow> conf'\n  \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                       T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                       trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                       P c\\<^sub>2 \\<and>\n                       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                       \\<not> P c\\<^sub>3 \\<and>\n                       trace c\\<^sub>3 T\\<^sub>2 end\n  P conf\n  \\<not> P end\n  \\<not> P conf'", "have \"conf' # T = [] @ conf' # T \\<and> (\\<forall>x\\<in>set []. P x) \\<and> P conf \\<and> conf \\<Rightarrow> conf' \\<and> \\<not> P conf' \\<and> trace conf' T end\""], ["proof (prove)\nusing this:\n  trace conf' T end\n  conf \\<Rightarrow> conf'\n  \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n  \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                       T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                       trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                       P c\\<^sub>2 \\<and>\n                       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                       \\<not> P c\\<^sub>3 \\<and>\n                       trace c\\<^sub>3 T\\<^sub>2 end\n  P conf\n  \\<not> P end\n  \\<not> P conf'\n\ngoal (1 subgoal):\n 1. conf' # T = [] @ conf' # T \\<and>\n    (\\<forall>x\\<in>set []. P x) \\<and>\n    P conf \\<and>\n    conf \\<Rightarrow> conf' \\<and> \\<not> P conf' \\<and> trace conf' T end", "by auto"], ["proof (state)\nthis:\n  conf' # T = [] @ conf' # T \\<and>\n  (\\<forall>x\\<in>set []. P x) \\<and>\n  P conf \\<and>\n  conf \\<Rightarrow> conf' \\<and> \\<not> P conf' \\<and> trace conf' T end\n\ngoal (1 subgoal):\n 1. \\<lbrakk>trace conf' T end; conf \\<Rightarrow> conf';\n     \\<lbrakk>P conf'; \\<not> P end\\<rbrakk>\n     \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                          T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                          trace conf' T\\<^sub>1 c\\<^sub>2 \\<and>\n                          (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                          P c\\<^sub>2 \\<and>\n                          c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                          \\<not> P c\\<^sub>3 \\<and>\n                          trace c\\<^sub>3 T\\<^sub>2 end;\n     P conf; \\<not> P end; \\<not> P conf'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n                         conf' # T =\n                         T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n                         trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n                         (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n                         P c\\<^sub>2 \\<and>\n                         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n                         \\<not> P c\\<^sub>3 \\<and>\n                         trace c\\<^sub>3 T\\<^sub>2 end", "thus ?thesis"], ["proof (prove)\nusing this:\n  conf' # T = [] @ conf' # T \\<and>\n  (\\<forall>x\\<in>set []. P x) \\<and>\n  P conf \\<and>\n  conf \\<Rightarrow> conf' \\<and> \\<not> P conf' \\<and> trace conf' T end\n\ngoal (1 subgoal):\n 1. \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n       conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n       trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n       (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n       P c\\<^sub>2 \\<and>\n       c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n       \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end", "by blast"], ["proof (state)\nthis:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     conf' # T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace conf T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>a\\<in>set T\\<^sub>1. P a) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 end\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>3 T\\<^sub>2 c\\<^sub>2.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2;\n         trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2;\n         \\<forall>x\\<in>set T\\<^sub>1. P x; P c\\<^sub>2;\n         c\\<^sub>2 \\<Rightarrow> c\\<^sub>3; \\<not> P c\\<^sub>3;\n         trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>T\\<^sub>1 c\\<^sub>2 c\\<^sub>3 T\\<^sub>2.\n     T = T\\<^sub>1 @ c\\<^sub>3 # T\\<^sub>2 \\<and>\n     trace c\\<^sub>1 T\\<^sub>1 c\\<^sub>2 \\<and>\n     (\\<forall>x\\<in>set T\\<^sub>1. P x) \\<and>\n     P c\\<^sub>2 \\<and>\n     c\\<^sub>2 \\<Rightarrow> c\\<^sub>3 \\<and>\n     \\<not> P c\\<^sub>3 \\<and> trace c\\<^sub>3 T\\<^sub>2 c\\<^sub>4\n\ngoal (1 subgoal):\n 1. thesis", "by (auto intro: that)"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma traces_list_all:\n  \"trace c T c' \\<Longrightarrow> P c' \\<Longrightarrow> (\\<And> c c'. c \\<Rightarrow> c' \\<Longrightarrow> P c' \\<Longrightarrow> P c) \\<Longrightarrow> (\\<forall> x\\<in>set T. P x) \\<and> P c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>trace c T c'; P c';\n     \\<And>c c'.\n        \\<lbrakk>c \\<Rightarrow> c'; P c'\\<rbrakk>\n        \\<Longrightarrow> P c\\<rbrakk>\n    \\<Longrightarrow> (\\<forall>x\\<in>set T. P x) \\<and> P c", "by (induction rule:trace.induct) auto"], ["", "lemma trace_nil[simp]: \"trace c [] c' \\<longleftrightarrow> c = c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trace c [] c' = (c = c')", "by (metis list.distinct(1) trace.cases traces.trace_nil)"], ["", "end"], ["", "definition extends :: \"'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" (infix \"\\<lesssim>\" 50) where\n  \"S \\<lesssim> S' = (\\<exists> S''. S' = S'' @ S)\""], ["", "lemma extends_refl[simp]: \"S \\<lesssim> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<lesssim> S", "unfolding extends_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S''. S = S'' @ S", "by auto"], ["", "lemma extends_cons[simp]: \"S \\<lesssim> x # S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<lesssim> x # S", "unfolding extends_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S''. x # S = S'' @ S", "by auto"], ["", "lemma extends_append[simp]: \"S \\<lesssim> L @ S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<lesssim> L @ S", "unfolding extends_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>S''. L @ S = S'' @ S", "by auto"], ["", "lemma extends_not_cons[simp]: \"\\<not> (x # S) \\<lesssim> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> x # S \\<lesssim> S", "unfolding extends_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>S''. S = S'' @ x # S", "by auto"], ["", "lemma extends_trans[trans]: \"S \\<lesssim> S' \\<Longrightarrow> S' \\<lesssim> S'' \\<Longrightarrow> S \\<lesssim> S''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>S \\<lesssim> S'; S' \\<lesssim> S''\\<rbrakk>\n    \\<Longrightarrow> S \\<lesssim> S''", "unfolding extends_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<exists>S''. S' = S'' @ S;\n     \\<exists>S''a. S'' = S''a @ S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>S''a. S'' = S''a @ S", "by auto"], ["", "locale balance_trace = traces + \n  fixes stack :: \"'a \\<Rightarrow> 's list\"\n  assumes one_step_only: \"c \\<Rightarrow> c' \\<Longrightarrow> (stack c) = (stack c') \\<or> (\\<exists> x.  stack c' = x # stack c) \\<or>  (\\<exists> x. stack c = x # stack c')\"\nbegin"], ["", "inductive bal :: \"'a \\<Rightarrow> 'a list \\<Rightarrow> 'a \\<Rightarrow> bool\" where\n  balI[intro]: \"trace c T c' \\<Longrightarrow> \\<forall>c'\\<in> set T. stack c \\<lesssim> stack c' \\<Longrightarrow> stack c' = stack c \\<Longrightarrow> bal c T c'\""], ["", "inductive_cases balE: \"bal c T c'\""], ["", "lemma bal_nil[simp]: \"bal c [] c' \\<longleftrightarrow> c = c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal c [] c' = (c = c')", "by (auto elim: balE trace.cases)"], ["", "lemma bal_stackD: \"bal c T c' \\<Longrightarrow> stack c' = stack c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bal c T c' \\<Longrightarrow> stack c' = stack c", "by (auto dest: balE)"], ["", "lemma stack_passes_lower_bound:\n  assumes \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\" \n  assumes \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\" \n  assumes \"\\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\" \n  shows \"stack c\\<^sub>3 = stack c\\<^sub>2\" and \"stack c\\<^sub>4 = tl (stack c\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 &&&\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "proof-"], ["proof (state)\ngoal (2 subgoals):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2\n 2. stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "from one_step_only[OF assms(1)]"], ["proof (chain)\npicking this:\n  stack c\\<^sub>3 = stack c\\<^sub>4 \\<or>\n  (\\<exists>x. stack c\\<^sub>4 = x # stack c\\<^sub>3) \\<or>\n  (\\<exists>x. stack c\\<^sub>3 = x # stack c\\<^sub>4)", "have \"stack c\\<^sub>3 = stack c\\<^sub>2 \\<and> stack c\\<^sub>4 = tl (stack c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>3 = stack c\\<^sub>4 \\<or>\n  (\\<exists>x. stack c\\<^sub>4 = x # stack c\\<^sub>3) \\<or>\n  (\\<exists>x. stack c\\<^sub>3 = x # stack c\\<^sub>4)\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "proof(elim disjE exE)"], ["proof (state)\ngoal (3 subgoals):\n 1. stack c\\<^sub>3 = stack c\\<^sub>4 \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 3. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "assume \"stack c\\<^sub>3 = stack c\\<^sub>4\""], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>4\n\ngoal (3 subgoals):\n 1. stack c\\<^sub>3 = stack c\\<^sub>4 \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 3. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with assms(2,3)"], ["proof (chain)\npicking this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>3 = stack c\\<^sub>4", "have False"], ["proof (prove)\nusing this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>3 = stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. stack c\\<^sub>3 = stack c\\<^sub>4 \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 3. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", ".."], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "fix x"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "note \\<open>stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\\<close>"], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "also"], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "assume \"stack c\\<^sub>4 = x # stack c\\<^sub>3\""], ["proof (state)\nthis:\n  stack c\\<^sub>4 = x # stack c\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "hence \"stack c\\<^sub>3 \\<lesssim> stack c\\<^sub>4\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>4 = x # stack c\\<^sub>3\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 \\<lesssim> stack c\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>3 \\<lesssim> stack c\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "finally"], ["proof (chain)\npicking this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "have \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "."], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       stack c\\<^sub>4 = x # stack c\\<^sub>3 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", ".."], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "assume c\\<^sub>3: \"stack c\\<^sub>3 = x # stack c\\<^sub>4\""], ["proof (state)\nthis:\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with assms(2)"], ["proof (chain)\npicking this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  stack c\\<^sub>3 = x # stack c\\<^sub>4", "obtain L where L: \"x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        x # stack c\\<^sub>4 = L @ stack c\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding extends_def"], ["proof (prove)\nusing this:\n  \\<exists>S''. stack c\\<^sub>3 = S'' @ stack c\\<^sub>2\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>L.\n        x # stack c\\<^sub>4 = L @ stack c\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       stack c\\<^sub>3 = x # stack c\\<^sub>4 \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "proof(cases L)"], ["proof (state)\ngoal (2 subgoals):\n 1. L = [] \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "case Nil"], ["proof (state)\nthis:\n  L = []\n\ngoal (2 subgoals):\n 1. L = [] \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with c\\<^sub>3 L"], ["proof (chain)\npicking this:\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n  L = []", "have \"stack c\\<^sub>3 = stack c\\<^sub>2\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n  L = []\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n\ngoal (2 subgoals):\n 1. L = [] \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "moreover"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n\ngoal (2 subgoals):\n 1. L = [] \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "from  Nil  c\\<^sub>3 L"], ["proof (chain)\npicking this:\n  L = []\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2", "have \"stack c\\<^sub>4 = tl (stack c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  L = []\n  stack c\\<^sub>3 = x # stack c\\<^sub>4\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "by (cases \"stack c\\<^sub>2\") auto"], ["proof (state)\nthis:\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (2 subgoals):\n 1. L = [] \\<Longrightarrow>\n    stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n 2. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "ultimately"], ["proof (chain)\npicking this:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "show ?thesis"], ["proof (prove)\nusing this:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", ".."], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "case (Cons y L')"], ["proof (state)\nthis:\n  L = y # L'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with L"], ["proof (chain)\npicking this:\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n  L = y # L'", "have \"stack c\\<^sub>4 = L' @ stack c\\<^sub>2\""], ["proof (prove)\nusing this:\n  x # stack c\\<^sub>4 = L @ stack c\\<^sub>2\n  L = y # L'\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>4 = L' @ stack c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>4 = L' @ stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "hence \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>4 = L' @ stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       L = a # list \\<Longrightarrow>\n       stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n       stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "with assms(3)"], ["proof (chain)\npicking this:\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", ".."], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (2 subgoals):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2\n 2. stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "thus \"stack c\\<^sub>3 = stack c\\<^sub>2\" and \"stack c\\<^sub>4 = tl (stack c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  stack c\\<^sub>3 = stack c\\<^sub>2 \\<and>\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 &&&\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bal_consE:\n  assumes \"bal c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\"\n  and c\\<^sub>2: \"stack c\\<^sub>2 = s # stack c\\<^sub>1\"\n  obtains T\\<^sub>1 c\\<^sub>3 c\\<^sub>4 T\\<^sub>2\n  where \"T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\" and  \"bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\" and \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\" \"bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n         bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n         c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n         bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms(1)"], ["proof (prove)\nusing this:\n  bal c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\n\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n         bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n         c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n         bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(rule balE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume c\\<^sub>5: \"stack c\\<^sub>5 = stack c\\<^sub>1\""], ["proof (state)\nthis:\n  stack c\\<^sub>5 = stack c\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume T: \"\\<forall> c' \\<in> set (c\\<^sub>2 # T). stack c\\<^sub>1 \\<lesssim> stack c'\""], ["proof (state)\nthis:\n  \\<forall>c'\\<in>set (c\\<^sub>2 # T). stack c\\<^sub>1 \\<lesssim> stack c'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "assume \"trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\""], ["proof (state)\nthis:\n  trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "hence \"c\\<^sub>1 \\<Rightarrow> c\\<^sub>2\" and \"trace c\\<^sub>2 T c\\<^sub>5\""], ["proof (prove)\nusing this:\n  trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5\n\ngoal (1 subgoal):\n 1. c\\<^sub>1 \\<Rightarrow> c\\<^sub>2 &&& trace c\\<^sub>2 T c\\<^sub>5", "by (auto elim: trace_consE)"], ["proof (state)\nthis:\n  c\\<^sub>1 \\<Rightarrow> c\\<^sub>2\n  trace c\\<^sub>2 T c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "note \\<open>trace c\\<^sub>2 T c\\<^sub>5\\<close>"], ["proof (state)\nthis:\n  trace c\\<^sub>2 T c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  trace c\\<^sub>2 T c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "moreover"], ["proof (state)\nthis:\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "have \"\\<not> (stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>5)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>5", "unfolding c\\<^sub>5 c\\<^sub>2"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s # stack c\\<^sub>1 \\<lesssim> stack c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "ultimately"], ["proof (chain)\npicking this:\n  trace c\\<^sub>2 T c\\<^sub>5\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>5", "obtain T\\<^sub>1 c\\<^sub>3 c\\<^sub>4 T\\<^sub>2\n    where \"T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\" and \"trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\" and \"\\<forall> c' \\<in> set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack c'\" \n     and \"stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\" and \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\" and \"\\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\" and \"trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\""], ["proof (prove)\nusing this:\n  trace c\\<^sub>2 T c\\<^sub>5\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>2\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>5\n\ngoal (1 subgoal):\n 1. (\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n        \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n         trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n         \\<forall>c'\\<in>set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack c';\n         stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3;\n         c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n         \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4;\n         trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule traceWhile)"], ["proof (state)\nthis:\n  T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\n  trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\n  \\<forall>c'\\<in>set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack c'\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n  trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>T\\<^sub>1 c\\<^sub>4 T\\<^sub>2 c\\<^sub>3.\n                \\<lbrakk>T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2;\n                 bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3;\n                 c\\<^sub>3 \\<Rightarrow> c\\<^sub>4;\n                 bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     trace c\\<^sub>1 (c\\<^sub>2 # T) c\\<^sub>5;\n     \\<forall>c'\\<in>set (c\\<^sub>2 # T).\n        stack c\\<^sub>1 \\<lesssim> stack c';\n     stack c\\<^sub>5 = stack c\\<^sub>1\\<rbrakk>\n    \\<Longrightarrow> thesis", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. thesis", "proof (rule that)"], ["proof (state)\ngoal (4 subgoals):\n 1. T = ?T\\<^sub>1 @ ?c\\<^sub>4 # ?T\\<^sub>2\n 2. bal c\\<^sub>2 ?T\\<^sub>1 ?c\\<^sub>3\n 3. ?c\\<^sub>3 \\<Rightarrow> ?c\\<^sub>4\n 4. bal ?c\\<^sub>4 ?T\\<^sub>2 c\\<^sub>5", "show \"T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2", "by fact"], ["proof (state)\nthis:\n  T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\n\ngoal (3 subgoals):\n 1. bal c\\<^sub>2 T\\<^sub>1 ?c\\<^sub>3\n 2. ?c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n 3. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "from \\<open>c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\\<close> \\<open>stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\\<close> \\<open>\\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4", "have \"stack c\\<^sub>3 = stack c\\<^sub>2\" and c\\<^sub>2': \"stack c\\<^sub>4 = tl (stack c\\<^sub>2)\""], ["proof (prove)\nusing this:\n  c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n  stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>3\n  \\<not> stack c\\<^sub>2 \\<lesssim> stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>3 = stack c\\<^sub>2 &&&\n    stack c\\<^sub>4 = tl (stack c\\<^sub>2)", "by (rule stack_passes_lower_bound)+"], ["proof (state)\nthis:\n  stack c\\<^sub>3 = stack c\\<^sub>2\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (3 subgoals):\n 1. bal c\\<^sub>2 T\\<^sub>1 ?c\\<^sub>3\n 2. ?c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n 3. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "from  \\<open>trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\\<close> \\<open>\\<forall> a \\<in> set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack a\\<close> this(1)"], ["proof (chain)\npicking this:\n  trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\n  \\<forall>a\\<in>set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack a\n  stack c\\<^sub>3 = stack c\\<^sub>2", "show \"bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\""], ["proof (prove)\nusing this:\n  trace c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\n  \\<forall>a\\<in>set T\\<^sub>1. stack c\\<^sub>2 \\<lesssim> stack a\n  stack c\\<^sub>3 = stack c\\<^sub>2\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3", ".."], ["proof (state)\nthis:\n  bal c\\<^sub>2 T\\<^sub>1 c\\<^sub>3\n\ngoal (2 subgoals):\n 1. c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n 2. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "show \"c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c\\<^sub>3 \\<Rightarrow> c\\<^sub>4", "by fact"], ["proof (state)\nthis:\n  c\\<^sub>3 \\<Rightarrow> c\\<^sub>4\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "have c\\<^sub>4: \"stack c\\<^sub>4 = stack c\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>4 = stack c\\<^sub>1", "using c\\<^sub>2 c\\<^sub>2'"], ["proof (prove)\nusing this:\n  stack c\\<^sub>2 = s # stack c\\<^sub>1\n  stack c\\<^sub>4 = tl (stack c\\<^sub>2)\n\ngoal (1 subgoal):\n 1. stack c\\<^sub>4 = stack c\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  stack c\\<^sub>4 = stack c\\<^sub>1\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "note  \\<open>trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\\<close>"], ["proof (state)\nthis:\n  trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "moreover"], ["proof (state)\nthis:\n  trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "have \"\\<forall> a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a", "using c\\<^sub>4 T \\<open>T = _\\<close>"], ["proof (prove)\nusing this:\n  stack c\\<^sub>4 = stack c\\<^sub>1\n  \\<forall>c'\\<in>set (c\\<^sub>2 # T). stack c\\<^sub>1 \\<lesssim> stack c'\n  T = T\\<^sub>1 @ c\\<^sub>4 # T\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "moreover"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "have \"stack c\\<^sub>5 = stack c\\<^sub>4\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>5 = stack c\\<^sub>4", "unfolding c\\<^sub>4 c\\<^sub>5"], ["proof (prove)\ngoal (1 subgoal):\n 1. stack c\\<^sub>1 = stack c\\<^sub>1", ".."], ["proof (state)\nthis:\n  stack c\\<^sub>5 = stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", "ultimately"], ["proof (chain)\npicking this:\n  trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n  \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a\n  stack c\\<^sub>5 = stack c\\<^sub>4", "show \"bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\""], ["proof (prove)\nusing this:\n  trace c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n  \\<forall>a\\<in>set T\\<^sub>2. stack c\\<^sub>4 \\<lesssim> stack a\n  stack c\\<^sub>5 = stack c\\<^sub>4\n\ngoal (1 subgoal):\n 1. bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5", ".."], ["proof (state)\nthis:\n  bal c\\<^sub>4 T\\<^sub>2 c\\<^sub>5\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}