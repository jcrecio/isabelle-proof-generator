{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/EtaExpansionSafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["theorem eta_expansion_safe:\n  assumes \"set T \\<subseteq> range Arg\"\n  shows \"(\\<Gamma>, eta_expand (length T) e, T@S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, T@S)\"", "theorem eta_expansion_safe':\n  assumes \"n \\<le> arg_prefix S\"\n  shows \"(\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)\""], "translations": [["", "theorem eta_expansion_safe:\n  assumes \"set T \\<subseteq> range Arg\"\n  shows \"(\\<Gamma>, eta_expand (length T) e, T@S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, T@S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length T) e, T @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, e, T @ S)", "using assms"], ["proof (prove)\nusing this:\n  set T \\<subseteq> range Arg\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length T) e, T @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, e, T @ S)", "proof(induction T arbitrary: e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e.\n       set [] \\<subseteq> range Arg \\<Longrightarrow>\n       (\\<Gamma>, eta_expand (length []) e, [] @ S) \\<Rightarrow>\\<^sup>*\n       (\\<Gamma>, e, [] @ S)\n 2. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> range Arg\n\ngoal (2 subgoals):\n 1. \\<And>e.\n       set [] \\<subseteq> range Arg \\<Longrightarrow>\n       (\\<Gamma>, eta_expand (length []) e, [] @ S) \\<Rightarrow>\\<^sup>*\n       (\\<Gamma>, e, [] @ S)\n 2. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length []) e, [] @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, e, [] @ S)", "by simp"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (length []) e, [] @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, e, [] @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "case (Cons se T)"], ["proof (state)\nthis:\n  set T \\<subseteq> range Arg \\<Longrightarrow>\n  (\\<Gamma>, eta_expand (length T) ?e, T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, ?e, T @ S)\n  set (se # T) \\<subseteq> range Arg\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "from Cons(2)"], ["proof (chain)\npicking this:\n  set (se # T) \\<subseteq> range Arg", "obtain x where \"se = Arg x\""], ["proof (prove)\nusing this:\n  set (se # T) \\<subseteq> range Arg\n\ngoal (1 subgoal):\n 1. (\\<And>x. se = Arg x \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  se = Arg x\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "from Cons"], ["proof (chain)\npicking this:\n  set T \\<subseteq> range Arg \\<Longrightarrow>\n  (\\<Gamma>, eta_expand (length T) ?e, T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, ?e, T @ S)\n  set (se # T) \\<subseteq> range Arg", "have prem: \"set T \\<subseteq> range Arg\""], ["proof (prove)\nusing this:\n  set T \\<subseteq> range Arg \\<Longrightarrow>\n  (\\<Gamma>, eta_expand (length T) ?e, T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, ?e, T @ S)\n  set (se # T) \\<subseteq> range Arg\n\ngoal (1 subgoal):\n 1. set T \\<subseteq> range Arg", "by simp"], ["proof (state)\nthis:\n  set T \\<subseteq> range Arg\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "have \"(\\<Gamma>, eta_expand (Suc (length T)) e, Arg x # T @ S) = (\\<Gamma>, Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)), Arg x # T @ S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (Suc (length T)) e, Arg x # T @ S) =\n    (\\<Gamma>,\n     Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n     Arg x # T @ S)", "by simp"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (Suc (length T)) e, Arg x # T @ S) =\n  (\\<Gamma>, Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n   Arg x # T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "also"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (Suc (length T)) e, Arg x # T @ S) =\n  (\\<Gamma>, Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n   Arg x # T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "have \"\\<dots> \\<Rightarrow> (\\<Gamma>, (eta_expand (length T) (App e (fresh_var e)))[fresh_var e ::= x], T @ S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>,\n     Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n     Arg x # T @ S) \\<Rightarrow>\n    (\\<Gamma>,\n     (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x], T @ S)", "by (rule app\\<^sub>2)"], ["proof (state)\nthis:\n  (\\<Gamma>, Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n   Arg x # T @ S) \\<Rightarrow>\n  (\\<Gamma>, (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x],\n   T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "also"], ["proof (state)\nthis:\n  (\\<Gamma>, Lam [fresh_var e]. eta_expand (length T) (App e (fresh_var e)),\n   Arg x # T @ S) \\<Rightarrow>\n  (\\<Gamma>, (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x],\n   T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "have \"\\<dots> = (\\<Gamma>, (eta_expand (length T) (App e x)), T @ S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>,\n     (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x],\n     T @ S) =\n    (\\<Gamma>, eta_expand (length T) (App e x), T @ S)", "unfolding subst_eta_expand"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length T) (App e (fresh_var e))[fresh_var e::=x],\n     T @ S) =\n    (\\<Gamma>, eta_expand (length T) (App e x), T @ S)", "by simp"], ["proof (state)\nthis:\n  (\\<Gamma>, (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x],\n   T @ S) =\n  (\\<Gamma>, eta_expand (length T) (App e x), T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "also"], ["proof (state)\nthis:\n  (\\<Gamma>, (eta_expand (length T) (App e (fresh_var e)))[fresh_var e::=x],\n   T @ S) =\n  (\\<Gamma>, eta_expand (length T) (App e x), T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "have \"\\<dots> \\<Rightarrow>\\<^sup>* (\\<Gamma>, App e x, T @ S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length T) (App e x), T @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, App e x, T @ S)", "by (rule Cons.IH[OF prem])"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (length T) (App e x), T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, App e x, T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "also"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (length T) (App e x), T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, App e x, T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "have \"\\<dots> \\<Rightarrow> (\\<Gamma>, e, Arg x # T @ S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, App e x, T @ S) \\<Rightarrow> (\\<Gamma>, e, Arg x # T @ S)", "by (rule app\\<^sub>1)"], ["proof (state)\nthis:\n  (\\<Gamma>, App e x, T @ S) \\<Rightarrow> (\\<Gamma>, e, Arg x # T @ S)\n\ngoal (1 subgoal):\n 1. \\<And>a T e.\n       \\<lbrakk>\\<And>e.\n                   set T \\<subseteq> range Arg \\<Longrightarrow>\n                   (\\<Gamma>, eta_expand (length T) e,\n                    T @ S) \\<Rightarrow>\\<^sup>*\n                   (\\<Gamma>, e, T @ S);\n        set (a # T) \\<subseteq> range Arg\\<rbrakk>\n       \\<Longrightarrow> (\\<Gamma>, eta_expand (length (a # T)) e,\n                          (a # T) @ S) \\<Rightarrow>\\<^sup>*\n                         (\\<Gamma>, e, (a # T) @ S)", "finally"], ["proof (chain)\npicking this:\n  (\\<Gamma>, eta_expand (Suc (length T)) e,\n   Arg x # T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, e, Arg x # T @ S)", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Gamma>, eta_expand (Suc (length T)) e,\n   Arg x # T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, e, Arg x # T @ S)\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length (se # T)) e,\n     (se # T) @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, e, (se # T) @ S)", "using \\<open>se = _\\<close>"], ["proof (prove)\nusing this:\n  (\\<Gamma>, eta_expand (Suc (length T)) e,\n   Arg x # T @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, e, Arg x # T @ S)\n  se = Arg x\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand (length (se # T)) e,\n     (se # T) @ S) \\<Rightarrow>\\<^sup>*\n    (\\<Gamma>, e, (se # T) @ S)", "by simp"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand (length (se # T)) e,\n   (se # T) @ S) \\<Rightarrow>\\<^sup>*\n  (\\<Gamma>, e, (se # T) @ S)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun arg_prefix :: \"stack \\<Rightarrow> nat\" where\n  \"arg_prefix [] = 0\"\n| \"arg_prefix (Arg x # S) = Suc (arg_prefix S)\"\n| \"arg_prefix (Alts e1 e2 # S) = 0\"\n| \"arg_prefix (Upd x # S) = 0\"\n| \"arg_prefix (Dummy x # S) = 0\""], ["", "theorem eta_expansion_safe':\n  assumes \"n \\<le> arg_prefix S\"\n  shows \"(\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)", "from assms"], ["proof (chain)\npicking this:\n  n \\<le> arg_prefix S", "have \"set (take n S) \\<subseteq> range Arg\" and \"length (take n S) = n\""], ["proof (prove)\nusing this:\n  n \\<le> arg_prefix S\n\ngoal (1 subgoal):\n 1. set (take n S) \\<subseteq> range Arg &&& length (take n S) = n", "apply (induction S arbitrary: n rule: arg_prefix.induct)"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>n.\n       n \\<le> arg_prefix [] \\<Longrightarrow>\n       set (take n []) \\<subseteq> range Arg\n 2. \\<And>n. n \\<le> arg_prefix [] \\<Longrightarrow> length (take n []) = n\n 3. \\<And>x S n.\n       \\<lbrakk>\\<And>n.\n                   n \\<le> arg_prefix S \\<Longrightarrow>\n                   set (take n S) \\<subseteq> range Arg;\n        \\<And>n.\n           n \\<le> arg_prefix S \\<Longrightarrow> length (take n S) = n;\n        n \\<le> arg_prefix (Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> set (take n (Arg x # S)) \\<subseteq> range Arg\n 4. \\<And>x S n.\n       \\<lbrakk>\\<And>n.\n                   n \\<le> arg_prefix S \\<Longrightarrow>\n                   set (take n S) \\<subseteq> range Arg;\n        \\<And>n.\n           n \\<le> arg_prefix S \\<Longrightarrow> length (take n S) = n;\n        n \\<le> arg_prefix (Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> length (take n (Arg x # S)) = n\n 5. \\<And>e1 e2 S n.\n       n \\<le> arg_prefix (Alts e1 e2 # S) \\<Longrightarrow>\n       set (take n (Alts e1 e2 # S)) \\<subseteq> range Arg\n 6. \\<And>e1 e2 S n.\n       n \\<le> arg_prefix (Alts e1 e2 # S) \\<Longrightarrow>\n       length (take n (Alts e1 e2 # S)) = n\n 7. \\<And>x S n.\n       n \\<le> arg_prefix (Upd x # S) \\<Longrightarrow>\n       set (take n (Upd x # S)) \\<subseteq> range Arg\n 8. \\<And>x S n.\n       n \\<le> arg_prefix (Upd x # S) \\<Longrightarrow>\n       length (take n (Upd x # S)) = n\n 9. \\<And>x S n.\n       n \\<le> arg_prefix (Dummy x # S) \\<Longrightarrow>\n       set (take n (Dummy x # S)) \\<subseteq> range Arg\n 10. \\<And>x S n.\n        n \\<le> arg_prefix (Dummy x # S) \\<Longrightarrow>\n        length (take n (Dummy x # S)) = n", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x S n xa.\n       \\<lbrakk>\\<And>n.\n                   n \\<le> arg_prefix S \\<Longrightarrow>\n                   set (take n S) \\<subseteq> range Arg;\n        \\<And>n.\n           n \\<le> arg_prefix S \\<Longrightarrow> min (length S) n = n;\n        n \\<le> Suc (arg_prefix S);\n        xa \\<in> set (take n (Arg x # S))\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> range Arg\n 2. \\<And>S n.\n       \\<lbrakk>\\<And>n.\n                   n \\<le> arg_prefix S \\<Longrightarrow>\n                   set (take n S) \\<subseteq> range Arg;\n        \\<And>n.\n           n \\<le> arg_prefix S \\<Longrightarrow> min (length S) n = n;\n        n \\<le> Suc (arg_prefix S)\\<rbrakk>\n       \\<Longrightarrow> min (Suc (length S)) n = n", "apply (case_tac n, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  set (take n S) \\<subseteq> range Arg\n  length (take n S) = n\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)", "hence \"S = take n S @ drop n S\""], ["proof (prove)\nusing this:\n  set (take n S) \\<subseteq> range Arg\n  length (take n S) = n\n\ngoal (1 subgoal):\n 1. S = take n S @ drop n S", "by (metis append_take_drop_id)"], ["proof (state)\nthis:\n  S = take n S @ drop n S\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)", "with eta_expansion_safe[OF \\<open>_ \\<subseteq> _\\<close>] \\<open>length _ = _\\<close>"], ["proof (chain)\npicking this:\n  (?\\<Gamma>, eta_expand (length (take n S)) ?e,\n   take n S @ ?S) \\<Rightarrow>\\<^sup>*\n  (?\\<Gamma>, ?e, take n S @ ?S)\n  length (take n S) = n\n  S = take n S @ drop n S", "show ?thesis"], ["proof (prove)\nusing this:\n  (?\\<Gamma>, eta_expand (length (take n S)) ?e,\n   take n S @ ?S) \\<Rightarrow>\\<^sup>*\n  (?\\<Gamma>, ?e, take n S @ ?S)\n  length (take n S) = n\n  S = take n S @ drop n S\n\ngoal (1 subgoal):\n 1. (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)", "by metis"], ["proof (state)\nthis:\n  (\\<Gamma>, eta_expand n e, S) \\<Rightarrow>\\<^sup>* (\\<Gamma>, e, S)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}