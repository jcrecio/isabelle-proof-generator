{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/CoCallImplSafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma ccNeighbors_Int_ccrestr: \"(ccNeighbors x G \\<inter> S) = ccNeighbors x (cc_restr (insert x S) G) \\<inter> S\"", "lemma \n  assumes \"x \\<notin> S\" and \"y \\<notin> S\"\n  shows CCexp_subst: \"cc_restr S (CCexp e[y::=x]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n    and Aexp_restr_subst: \"(Aexp e[y::=x]\\<cdot>a) f|` S = (Aexp e\\<cdot>a) f|` S\"", "lemma ccHeap_nonrec_eq:\n   \"ccHeap_nonrec x e exp\\<cdot>n = CCfix_nonrec x e\\<cdot>(Aexp exp\\<cdot>n, CCexp exp\\<cdot>n)\"", "lemma ccHeap_rec_eq:\n  \"ccHeap_rec \\<Gamma> e\\<cdot>a = CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), CCexp e\\<cdot>a)\"", "lemma ccHeap_simp1:\n  \"\\<not> nonrec \\<Gamma> \\<Longrightarrow> ccHeap \\<Gamma> e\\<cdot>a = CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), CCexp e\\<cdot>a)\"", "lemma ccHeap_simp2:\n  \"x \\<notin> fv e \\<Longrightarrow> ccHeap [(x,e)] exp\\<cdot>n = CCfix_nonrec x e\\<cdot>(Aexp exp\\<cdot>n, CCexp exp\\<cdot>n)\""], "translations": [["", "lemma ccNeighbors_Int_ccrestr: \"(ccNeighbors x G \\<inter> S) = ccNeighbors x (cc_restr (insert x S) G) \\<inter> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x G \\<inter> S = ccNeighbors x (G G|` insert x S) \\<inter> S", "by transfer auto"], ["", "lemma \n  assumes \"x \\<notin> S\" and \"y \\<notin> S\"\n  shows CCexp_subst: \"cc_restr S (CCexp e[y::=x]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\"\n    and Aexp_restr_subst: \"(Aexp e[y::=x]\\<cdot>a) f|` S = (Aexp e\\<cdot>a) f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a e[y::=x] G|` S = ccExp_syn a e G|` S &&&\n    Aexp_syn' a e[y::=x] f|` S = Aexp_syn' a e f|` S", "using assms"], ["proof (prove)\nusing this:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. ccExp_syn a e[y::=x] G|` S = ccExp_syn a e G|` S &&&\n    Aexp_syn' a e[y::=x] f|` S = Aexp_syn' a e f|` S", "proof (nominal_induct e avoiding: x y  arbitrary: a  S rule: exp_strong_induct_rec_set)"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Var var)[y::=x] G|` S =\n                         ccExp_syn a (Var var) G|` S\n 2. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Var var)[y::=x] f|` S =\n                         Aexp_syn' a (Var var) f|` S\n 3. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 4. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 5. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 6. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 7. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 8. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 9. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 10. \\<And>var exp x y a S.\n        \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                              ccExp_syn a exp G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                              Aexp_syn' a exp f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                          Aexp_syn' a (Lam [var]. exp) f|` S\nA total of 14 subgoals...", "case (Var b v)"], ["proof (state)\nthis:\n  \n\ngoal (14 subgoals):\n 1. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Var var)[y::=x] G|` S =\n                         ccExp_syn a (Var var) G|` S\n 2. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Var var)[y::=x] f|` S =\n                         Aexp_syn' a (Var var) f|` S\n 3. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 4. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 5. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 6. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 7. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 8. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 9. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 10. \\<And>var exp x y a S.\n        \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                              ccExp_syn a exp G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                              Aexp_syn' a exp f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                          Aexp_syn' a (Lam [var]. exp) f|` S\nA total of 14 subgoals...", "case 1"], ["proof (state)\nthis:\n  v \\<notin> S\n  y \\<notin> S\n\ngoal (14 subgoals):\n 1. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Var var)[y::=x] G|` S =\n                         ccExp_syn a (Var var) G|` S\n 2. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Var var)[y::=x] f|` S =\n                         Aexp_syn' a (Var var) f|` S\n 3. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 4. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 5. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 6. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 7. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 8. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 9. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 10. \\<And>var exp x y a S.\n        \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                              ccExp_syn a exp G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                              Aexp_syn' a exp f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                          Aexp_syn' a (Lam [var]. exp) f|` S\nA total of 14 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a (Var b)[y::=v] G|` S = ccExp_syn a (Var b) G|` S", "by auto"], ["proof (state)\nthis:\n  ccExp_syn a (Var b)[y::=v] G|` S = ccExp_syn a (Var b) G|` S\n\ngoal (13 subgoals):\n 1. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Var var)[y::=x] f|` S =\n                         Aexp_syn' a (Var var) f|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 3. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 5. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 7. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 9. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                          ccExp_syn a (Bool b) G|` S\nA total of 13 subgoals...", "case 2"], ["proof (state)\nthis:\n  v \\<notin> S\n  y \\<notin> S\n\ngoal (13 subgoals):\n 1. \\<And>var x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Var var)[y::=x] f|` S =\n                         Aexp_syn' a (Var var) f|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 3. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 5. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 7. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 9. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                          ccExp_syn a (Bool b) G|` S\nA total of 13 subgoals...", "thus ?case"], ["proof (prove)\nusing this:\n  v \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (Var b)[y::=v] f|` S = Aexp_syn' a (Var b) f|` S", "by auto"], ["proof (state)\nthis:\n  Aexp_syn' a (Var b)[y::=v] f|` S = Aexp_syn' a (Var b) f|` S\n\ngoal (12 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                          Aexp_syn' a (Bool b) f|` S\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                          Aexp_syn' a (Bool b) f|` S\nA total of 12 subgoals...", "case (App e v)"], ["proof (state)\nthis:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n\ngoal (12 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                          Aexp_syn' a (Bool b) f|` S\nA total of 12 subgoals...", "case 1"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (12 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (App exp var)[y::=x] G|` S =\n                         ccExp_syn a (App exp var) G|` S\n 2. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 4. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 6. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 8. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 10. \\<And>b x y a S.\n        \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                          Aexp_syn' a (Bool b) f|` S\nA total of 12 subgoals...", "with App"], ["proof (chain)\npicking this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. ccExp_syn a (App e v)[y::=x] G|` S = ccExp_syn a (App e v) G|` S", "by (auto simp add: Int_insert_left fv_subst_int simp del: join_comm intro: join_mono)"], ["proof (state)\nthis:\n  ccExp_syn a (App e v)[y::=x] G|` S = ccExp_syn a (App e v) G|` S\n\ngoal (11 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                          ccExp_syn a (scrut ? e1 : e2) G|` S\nA total of 11 subgoals...", "case 2"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (11 subgoals):\n 1. \\<And>exp var x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                                     ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (App exp var)[y::=x] f|` S =\n                         Aexp_syn' a (App exp var) f|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 3. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 5. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 7. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 9. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                          ccExp_syn a (scrut ? e1 : e2) G|` S\nA total of 11 subgoals...", "with App"], ["proof (chain)\npicking this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (App e v)[y::=x] f|` S = Aexp_syn' a (App e v) f|` S", "by (auto simp add: env_restr_join simp del: fun_meet_simp)"], ["proof (state)\nthis:\n  Aexp_syn' a (App e v)[y::=x] f|` S = Aexp_syn' a (App e v) f|` S\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                          Aexp_syn' a (scrut ? e1 : e2) f|` S", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                          Aexp_syn' a (scrut ? e1 : e2) f|` S", "case (Lam v e)"], ["proof (state)\nthis:\n  atom v \\<sharp> x\n  atom v \\<sharp> y\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                          Aexp_syn' a (scrut ? e1 : e2) f|` S", "case 1"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Lam [var]. exp)[y::=x] G|` S =\n                         ccExp_syn a (Lam [var]. exp) G|` S\n 6. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 8. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 10. \\<And>scrut e1 e2 x y a S.\n        \\<lbrakk>\\<And>b ba a S.\n                    \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                    \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\nccExp_syn a scrut G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                              Aexp_syn' a scrut f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                              ccExp_syn a e1 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                              Aexp_syn' a e1 f|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                              ccExp_syn a e2 G|` S;\n         \\<And>b ba a S.\n            \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n            \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                              Aexp_syn' a e2 f|` S;\n         x \\<notin> S; y \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                          Aexp_syn' a (scrut ? e1 : e2) f|` S", "with Lam"], ["proof (chain)\npicking this:\n  atom v \\<sharp> x\n  atom v \\<sharp> y\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S", "show ?case"], ["proof (prove)\nusing this:\n  atom v \\<sharp> x\n  atom v \\<sharp> y\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. ccExp_syn a (Lam [v]. e)[y::=x] G|` S = ccExp_syn a (Lam [v]. e) G|` S", "by (auto simp add: CCexp_pre_simps cc_restr_predCC  Diff_Int_distrib2 fv_subst_int env_restr_join env_delete_env_restr_swap[symmetric] simp del: CCexp_simps)"], ["proof (state)\nthis:\n  ccExp_syn a (Lam [v]. e)[y::=x] G|` S = ccExp_syn a (Lam [v]. e) G|` S\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case 2"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>var exp x y a S.\n       \\<lbrakk>atom var \\<sharp> x; atom var \\<sharp> y;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Lam [var]. exp)[y::=x] f|` S =\n                         Aexp_syn' a (Lam [var]. exp) f|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 7. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 9. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "with Lam"], ["proof (chain)\npicking this:\n  atom v \\<sharp> x\n  atom v \\<sharp> y\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S", "show ?case"], ["proof (prove)\nusing this:\n  atom v \\<sharp> x\n  atom v \\<sharp> y\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (Lam [v]. e)[y::=x] f|` S = Aexp_syn' a (Lam [v]. e) f|` S", "by (auto simp add: env_restr_join env_delete_env_restr_swap[symmetric]  simp del: fun_meet_simp)"], ["proof (state)\nthis:\n  Aexp_syn' a (Lam [v]. e)[y::=x] f|` S = Aexp_syn' a (Lam [v]. e) f|` S\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case (Let \\<Gamma> e x y)"], ["proof (state)\nthis:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n  \\<not> nonrec \\<Gamma>\n  \\<lbrakk>(?x, ?e) \\<in> set \\<Gamma>; ?b \\<notin> ?S;\n   ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a ?e[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a ?e G|` ?S\n  \\<lbrakk>(?x, ?e) \\<in> set \\<Gamma>; ?b \\<notin> ?S;\n   ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a ?e[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a ?e f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "hence [simp]: \"x \\<notin> domA \\<Gamma> \" \"y \\<notin> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n  \\<not> nonrec \\<Gamma>\n  \\<lbrakk>(?x, ?e) \\<in> set \\<Gamma>; ?b \\<notin> ?S;\n   ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a ?e[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a ?e G|` ?S\n  \\<lbrakk>(?x, ?e) \\<in> set \\<Gamma>; ?b \\<notin> ?S;\n   ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a ?e[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a ?e f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n\ngoal (1 subgoal):\n 1. x \\<notin> domA \\<Gamma> &&& y \\<notin> domA \\<Gamma>", "by (metis (erased, hide_lams) bn_subst domA_not_fresh fresh_def fresh_star_at_base fresh_star_def obtain_fresh subst_is_fresh(2))+"], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "note Let(1,2)[simp]"], ["proof (state)\nthis:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from Let(3)"], ["proof (chain)\npicking this:\n  \\<not> nonrec \\<Gamma>", "have \"\\<not> nonrec (\\<Gamma>[y::h=x])\""], ["proof (prove)\nusing this:\n  \\<not> nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<not> nonrec \\<Gamma>[y::h=x]", "by (simp add: nonrec_subst)"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>[y::h=x]\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case [simp]: 1"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have \"cc_restr (S \\<union> domA \\<Gamma>) (CCfix \\<Gamma>[y::h=x]\\<cdot>(Afix \\<Gamma>[y::h=x]\\<cdot>(Aexp e[y::=x]\\<cdot>a \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>), CCexp e[y::=x]\\<cdot>a)) =\n        cc_restr (S \\<union> domA \\<Gamma>) (CCfix \\<Gamma>\\<cdot>        (Afix \\<Gamma>\\<cdot>        (Aexp e\\<cdot>       a \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>), CCexp e\\<cdot>       a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>[y::h=x]\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e[y::=x]) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst CCfix_restr_subst')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x' e a.\n       (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n       ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>) =\n       ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. x \\<notin> S \\<union> domA \\<Gamma>\n 4. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 5. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (erule Let(4))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x' e a. x \\<notin> S \\<union> domA \\<Gamma>\n 2. \\<And>x' e a. y \\<notin> S \\<union> domA \\<Gamma>\n 3. y \\<notin> S \\<union> domA \\<Gamma>\n 4. x \\<notin> S \\<union> domA \\<Gamma>\n 5. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 6. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e) G|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[5]"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst CCfix_restr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>) G|`\n     (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e) G|`\n    (S \\<union> domA \\<Gamma>)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>[y::h=x]\\<cdot>\n     (Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Afix_restr_subst')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x' e a.\n       (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n       Aexp_syn' a e[y::=x] f|` (S \\<union> domA \\<Gamma>) =\n       Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>)\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. x \\<notin> S \\<union> domA \\<Gamma>\n 4. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 5. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (erule Let(5))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x' e a. x \\<notin> S \\<union> domA \\<Gamma>\n 2. \\<And>x' e a. y \\<notin> S \\<union> domA \\<Gamma>\n 3. y \\<notin> S \\<union> domA \\<Gamma>\n 4. x \\<notin> S \\<union> domA \\<Gamma>\n 5. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 6. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[5]"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Afix_restr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e[y::=x] \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     ((Aexp_syn' a e \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (simp only: env_restr_join)"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e[y::=x] f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Let(7))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x \\<notin> S \\<union> domA \\<Gamma>\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e[y::=x] G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Let(6))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x \\<notin> S \\<union> domA \\<Gamma>\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>) =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n      (S \\<union> domA \\<Gamma>)) f|`\n     (S \\<union> domA \\<Gamma>),\n     ccExp_syn a e G|` (S \\<union> domA \\<Gamma>)) G|`\n    (S \\<union> domA \\<Gamma>)", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  CCfix \\<Gamma>[y::h=x]\\<cdot>\n  (Afix \\<Gamma>[y::h=x]\\<cdot>\n   (Aexp_syn' a e[y::=x] \\<squnion>\n    (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e[y::=x]) G|`\n  (S \\<union> domA \\<Gamma>) =\n  CCfix \\<Gamma>\\<cdot>\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e) G|`\n  (S \\<union> domA \\<Gamma>)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Terms.Let \\<Gamma> exp)[y::=x] G|` S =\n                         ccExp_syn a (Terms.Let \\<Gamma> exp) G|` S\n 2. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 4. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 6. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 8. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "thus ?case"], ["proof (prove)\nusing this:\n  CCfix \\<Gamma>[y::h=x]\\<cdot>\n  (Afix \\<Gamma>[y::h=x]\\<cdot>\n   (Aexp_syn' a e[y::=x] \\<squnion>\n    (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e[y::=x]) G|`\n  (S \\<union> domA \\<Gamma>) =\n  CCfix \\<Gamma>\\<cdot>\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e) G|`\n  (S \\<union> domA \\<Gamma>)\n\ngoal (1 subgoal):\n 1. ccExp_syn a (Terms.Let \\<Gamma> e)[y::=x] G|` S =\n    ccExp_syn a (Terms.Let \\<Gamma> e) G|` S", "using Let(1,2) \\<open>\\<not> nonrec \\<Gamma>\\<close> \\<open>\\<not> nonrec (\\<Gamma>[y::h=x])\\<close>"], ["proof (prove)\nusing this:\n  CCfix \\<Gamma>[y::h=x]\\<cdot>\n  (Afix \\<Gamma>[y::h=x]\\<cdot>\n   (Aexp_syn' a e[y::=x] \\<squnion>\n    (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e[y::=x]) G|`\n  (S \\<union> domA \\<Gamma>) =\n  CCfix \\<Gamma>\\<cdot>\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n   ccExp_syn a e) G|`\n  (S \\<union> domA \\<Gamma>)\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n  \\<not> nonrec \\<Gamma>\n  \\<not> nonrec \\<Gamma>[y::h=x]\n\ngoal (1 subgoal):\n 1. ccExp_syn a (Terms.Let \\<Gamma> e)[y::=x] G|` S =\n    ccExp_syn a (Terms.Let \\<Gamma> e) G|` S", "by (auto simp add: fresh_star_Pair  elim: cc_restr_eq_subset[rotated] )"], ["proof (state)\nthis:\n  ccExp_syn a (Terms.Let \\<Gamma> e)[y::=x] G|` S =\n  ccExp_syn a (Terms.Let \\<Gamma> e) G|` S\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case [simp]: 2"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have \"Afix \\<Gamma>[y::h=x]\\<cdot>(Aexp e[y::=x]\\<cdot>a \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` (thunks \\<Gamma>)) f|` (S \\<union> domA \\<Gamma>) = Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` (thunks \\<Gamma>)) f|` (S \\<union> domA \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix \\<Gamma>[y::h=x]\\<cdot>\n    (Aexp_syn' a e[y::=x] \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Afix_restr_subst')"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>x' e a.\n       (x', e) \\<in> set \\<Gamma> \\<Longrightarrow>\n       Aexp_syn' a e[y::=x] f|` (S \\<union> domA \\<Gamma>) =\n       Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>)\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. x \\<notin> S \\<union> domA \\<Gamma>\n 4. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 5. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>)", "apply (erule Let(5))"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x' e a. x \\<notin> S \\<union> domA \\<Gamma>\n 2. \\<And>x' e a. y \\<notin> S \\<union> domA \\<Gamma>\n 3. y \\<notin> S \\<union> domA \\<Gamma>\n 4. x \\<notin> S \\<union> domA \\<Gamma>\n 5. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 6. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[5]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Afix_restr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n    (S \\<union> domA \\<Gamma>)", "back"], ["proof (prove)\ngoal (2 subgoals):\n 1. domA \\<Gamma> \\<subseteq> S \\<union> domA \\<Gamma>\n 2. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e[y::=x] \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    ((Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>)", "apply (simp only: env_restr_join)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e[y::=x] f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>)", "apply (subst Let(7))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x \\<notin> S \\<union> domA \\<Gamma>\n 2. y \\<notin> S \\<union> domA \\<Gamma>\n 3. Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>)", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>) =\n    Afix \\<Gamma>\\<cdot>\n    (Aexp_syn' a e f|` (S \\<union> domA \\<Gamma>) \\<squnion>\n     (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> f|`\n     (S \\<union> domA \\<Gamma>)) f|`\n    (S \\<union> domA \\<Gamma>)", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Afix \\<Gamma>[y::h=x]\\<cdot>\n  (Aexp_syn' a e[y::=x] \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>) =\n  Afix \\<Gamma>\\<cdot>\n  (Aexp_syn' a e \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> exp x y a S.\n       \\<lbrakk>atom ` domA \\<Gamma> \\<sharp>* x;\n        atom ` domA \\<Gamma> \\<sharp>* y; \\<not> nonrec \\<Gamma>;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba x e a S.\n           \\<lbrakk>(x, e) \\<in> set \\<Gamma>; b \\<notin> S;\n            ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Terms.Let \\<Gamma> exp)[y::=x] f|` S =\n                         Aexp_syn' a (Terms.Let \\<Gamma> exp) f|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 3. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 5. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 7. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "thus ?case"], ["proof (prove)\nusing this:\n  Afix \\<Gamma>[y::h=x]\\<cdot>\n  (Aexp_syn' a e[y::=x] \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>) =\n  Afix \\<Gamma>\\<cdot>\n  (Aexp_syn' a e \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>)\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (Terms.Let \\<Gamma> e)[y::=x] f|` S =\n    Aexp_syn' a (Terms.Let \\<Gamma> e) f|` S", "using Let(1,2)"], ["proof (prove)\nusing this:\n  Afix \\<Gamma>[y::h=x]\\<cdot>\n  (Aexp_syn' a e[y::=x] \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>) =\n  Afix \\<Gamma>\\<cdot>\n  (Aexp_syn' a e \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>)\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (Terms.Let \\<Gamma> e)[y::=x] f|` S =\n    Aexp_syn' a (Terms.Let \\<Gamma> e) f|` S", "using \\<open>\\<not> nonrec \\<Gamma>\\<close> \\<open>\\<not> nonrec (\\<Gamma>[y::h=x])\\<close>"], ["proof (prove)\nusing this:\n  Afix \\<Gamma>[y::h=x]\\<cdot>\n  (Aexp_syn' a e[y::=x] \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>) =\n  Afix \\<Gamma>\\<cdot>\n  (Aexp_syn' a e \\<squnion>\n   (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n  (S \\<union> domA \\<Gamma>)\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n  \\<not> nonrec \\<Gamma>\n  \\<not> nonrec \\<Gamma>[y::h=x]\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (Terms.Let \\<Gamma> e)[y::=x] f|` S =\n    Aexp_syn' a (Terms.Let \\<Gamma> e) f|` S", "by (auto simp add: fresh_star_Pair elim:env_restr_eq_subset[rotated])"], ["proof (state)\nthis:\n  Aexp_syn' a (Terms.Let \\<Gamma> e)[y::=x] f|` S =\n  Aexp_syn' a (Terms.Let \\<Gamma> e) f|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case (Let_nonrec x' e exp x y)"], ["proof (state)\nthis:\n  atom x' \\<sharp> x\n  atom x' \\<sharp> y\n  x' \\<notin> fv e\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e[?ba::=?b] G|` ?S = ccExp_syn ?a e G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e[?ba::=?b] f|` ?S = Aexp_syn' ?a e f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a exp[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a exp G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a exp[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a exp f|` ?S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from Let_nonrec(1,2)"], ["proof (chain)\npicking this:\n  atom x' \\<sharp> x\n  atom x' \\<sharp> y", "have  \"x \\<noteq> x'\" \"y \\<noteq> x'\""], ["proof (prove)\nusing this:\n  atom x' \\<sharp> x\n  atom x' \\<sharp> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> x' &&& y \\<noteq> x'", "by (simp_all add: fresh_at_base)"], ["proof (state)\nthis:\n  x \\<noteq> x'\n  y \\<noteq> x'\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "note Let_nonrec(1,2)[simp]"], ["proof (state)\nthis:\n  atom x' \\<sharp> x\n  atom x' \\<sharp> y\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from \\<open>x' \\<notin> fv e\\<close> \\<open>y \\<noteq> x'\\<close> \\<open>x \\<noteq> x'\\<close>"], ["proof (chain)\npicking this:\n  x' \\<notin> fv e\n  y \\<noteq> x'\n  x \\<noteq> x'", "have [simp]: \"x' \\<notin> fv (e[y::=x])\""], ["proof (prove)\nusing this:\n  x' \\<notin> fv e\n  y \\<noteq> x'\n  x \\<noteq> x'\n\ngoal (1 subgoal):\n 1. x' \\<notin> fv e[y::=x]", "by (auto simp add: fv_subst_eq)"], ["proof (state)\nthis:\n  x' \\<notin> fv e[y::=x]\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "note \\<open>x' \\<notin> fv e\\<close>[simp] \\<open>y \\<noteq> x'\\<close> [simp]\\<open>x \\<noteq> x'\\<close>  [simp]"], ["proof (state)\nthis:\n  x' \\<notin> fv e\n  y \\<noteq> x'\n  x \\<noteq> x'\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case [simp]: 1"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have \"\\<And> a. cc_restr {x'} (CCexp exp[y::=x]\\<cdot>a) = cc_restr {x'} (CCexp exp\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ccExp_syn a exp[y::=x] G|` {x'} = ccExp_syn a exp G|` {x'}", "by (rule Let_nonrec(6)) auto"], ["proof (state)\nthis:\n  ccExp_syn ?a exp[y::=x] G|` {x'} = ccExp_syn ?a exp G|` {x'}\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from arg_cong[where f = \"\\<lambda>x.  x'--x'\\<in>x\", OF this]"], ["proof (chain)\npicking this:\n  x'--x'\\<in>(ccExp_syn ?a1 exp[y::=x] G|` {x'}) =\n  x'--x'\\<in>(ccExp_syn ?a1 exp G|` {x'})", "have [simp]: \"x'--x'\\<in>CCexp  exp[y::=x]\\<cdot>a \\<longleftrightarrow> x'--x'\\<in>CCexp exp\\<cdot>a\""], ["proof (prove)\nusing this:\n  x'--x'\\<in>(ccExp_syn ?a1 exp[y::=x] G|` {x'}) =\n  x'--x'\\<in>(ccExp_syn ?a1 exp G|` {x'})\n\ngoal (1 subgoal):\n 1. x'--x'\\<in>ccExp_syn a exp[y::=x] = x'--x'\\<in>ccExp_syn a exp", "by auto"], ["proof (state)\nthis:\n  x'--x'\\<in>ccExp_syn a exp[y::=x] = x'--x'\\<in>ccExp_syn a exp\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]: \"\\<And> a. Aexp e[y::=x]\\<cdot>a f|` S = Aexp e\\<cdot>a f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. Aexp_syn' a e[y::=x] f|` S = Aexp_syn' a e f|` S", "by (rule Let_nonrec(5)) auto"], ["proof (state)\nthis:\n  Aexp_syn' ?a e[y::=x] f|` S = Aexp_syn' ?a e f|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]: \"\\<And> a. fup\\<cdot>(Aexp e[y::=x])\\<cdot>a f|` S = fup\\<cdot>(Aexp e)\\<cdot>a f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. Aexp_bot_syn' a e[y::=x] f|` S = Aexp_bot_syn' a e f|` S", "by (case_tac a) auto"], ["proof (state)\nthis:\n  Aexp_bot_syn' ?a e[y::=x] f|` S = Aexp_bot_syn' ?a e f|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]: \"Aexp  exp[y::=x]\\<cdot>a f|` S = Aexp exp\\<cdot>a f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn' a exp[y::=x] f|` S = Aexp_syn' a exp f|` S", "by (rule Let_nonrec(7)) auto"], ["proof (state)\nthis:\n  Aexp_syn' a exp[y::=x] f|` S = Aexp_syn' a exp f|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have \"Aexp exp[y::=x]\\<cdot>a f|` {x'} = Aexp exp\\<cdot>a f|` {x'}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn' a exp[y::=x] f|` {x'} = Aexp_syn' a exp f|` {x'}", "by (rule Let_nonrec(7)) auto"], ["proof (state)\nthis:\n  Aexp_syn' a exp[y::=x] f|` {x'} = Aexp_syn' a exp f|` {x'}\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from fun_cong[OF this, where x = x']"], ["proof (chain)\npicking this:\n  (Aexp_syn' a exp[y::=x] f|` {x'}) x' = (Aexp_syn' a exp f|` {x'}) x'", "have [simp]: \"(Aexp exp[y::=x]\\<cdot>a) x' = (Aexp exp\\<cdot>a) x'\""], ["proof (prove)\nusing this:\n  (Aexp_syn' a exp[y::=x] f|` {x'}) x' = (Aexp_syn' a exp f|` {x'}) x'\n\ngoal (1 subgoal):\n 1. Aexp_syn' a exp[y::=x] x' = Aexp_syn' a exp x'", "by auto"], ["proof (state)\nthis:\n  Aexp_syn' a exp[y::=x] x' = Aexp_syn' a exp x'\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]:  \"\\<And> a. cc_restr S (CCexp exp[y::=x]\\<cdot>a) = cc_restr S (CCexp exp\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ccExp_syn a exp[y::=x] G|` S = ccExp_syn a exp G|` S", "by (rule Let_nonrec(6)) auto"], ["proof (state)\nthis:\n  ccExp_syn ?a exp[y::=x] G|` S = ccExp_syn ?a exp G|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]:  \"\\<And> a. cc_restr S (CCexp e[y::=x]\\<cdot>a) = cc_restr S (CCexp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ccExp_syn a e[y::=x] G|` S = ccExp_syn a e G|` S", "by (rule Let_nonrec(4)) auto"], ["proof (state)\nthis:\n  ccExp_syn ?a e[y::=x] G|` S = ccExp_syn ?a e G|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]: \"\\<And> a. cc_restr S (fup\\<cdot>(CCexp e[y::=x])\\<cdot>a) = cc_restr S (fup\\<cdot>(CCexp e)\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. ccExp_bot_syn a e[y::=x] G|` S = ccExp_bot_syn a e G|` S", "by (rule fup_ccExp_restr_subst') simp"], ["proof (state)\nthis:\n  ccExp_bot_syn ?a e[y::=x] G|` S = ccExp_bot_syn ?a e G|` S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]: \"fv e[y::=x] \\<inter> S = fv e \\<inter> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e[y::=x] \\<inter> S = fv e \\<inter> S", "by (auto simp add: fv_subst_eq)"], ["proof (state)\nthis:\n  fv e[y::=x] \\<inter> S = fv e \\<inter> S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]:\n    \"ccNeighbors x' (CCexp exp[y::=x]\\<cdot>a) \\<inter> - {x'} \\<inter> S = ccNeighbors x' (CCexp exp\\<cdot>a)  \\<inter> - {x'} \\<inter> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x' (ccExp_syn a exp[y::=x]) \\<inter> - {x'} \\<inter> S =\n    ccNeighbors x' (ccExp_syn a exp) \\<inter> - {x'} \\<inter> S", "apply (simp only: Int_assoc)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x' (ccExp_syn a exp[y::=x]) \\<inter> (- {x'} \\<inter> S) =\n    ccNeighbors x' (ccExp_syn a exp) \\<inter> (- {x'} \\<inter> S)", "apply (subst (1 2) ccNeighbors_Int_ccrestr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x'\n     (ccExp_syn a exp[y::=x] G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S) =\n    ccNeighbors x'\n     (ccExp_syn a exp G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S)", "apply (subst Let_nonrec(6))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x \\<notin> insert x' (- {x'} \\<inter> S)\n 2. y \\<notin> insert x' (- {x'} \\<inter> S)\n 3. ccNeighbors x'\n     (ccExp_syn a exp G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S) =\n    ccNeighbors x'\n     (ccExp_syn a exp G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S)", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x'\n     (ccExp_syn a exp G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S) =\n    ccNeighbors x'\n     (ccExp_syn a exp G|` insert x' (- {x'} \\<inter> S)) \\<inter>\n    (- {x'} \\<inter> S)", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ccNeighbors x' (ccExp_syn a exp[y::=x]) \\<inter> - {x'} \\<inter> S =\n  ccNeighbors x' (ccExp_syn a exp) \\<inter> - {x'} \\<inter> S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "have [simp]:\n    \"ccNeighbors x' (CCexp exp[y::=x]\\<cdot>a) \\<inter> S = ccNeighbors x' (CCexp exp\\<cdot>a) \\<inter> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x' (ccExp_syn a exp[y::=x]) \\<inter> S =\n    ccNeighbors x' (ccExp_syn a exp) \\<inter> S", "apply (subst (1 2) ccNeighbors_Int_ccrestr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x' (ccExp_syn a exp[y::=x] G|` insert x' S) \\<inter> S =\n    ccNeighbors x' (ccExp_syn a exp G|` insert x' S) \\<inter> S", "apply (subst Let_nonrec(6))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x \\<notin> insert x' S\n 2. y \\<notin> insert x' S\n 3. ccNeighbors x' (ccExp_syn a exp G|` insert x' S) \\<inter> S =\n    ccNeighbors x' (ccExp_syn a exp G|` insert x' S) \\<inter> S", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x' (ccExp_syn a exp G|` insert x' S) \\<inter> S =\n    ccNeighbors x' (ccExp_syn a exp G|` insert x' S) \\<inter> S", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ccNeighbors x' (ccExp_syn a exp[y::=x]) \\<inter> S =\n  ccNeighbors x' (ccExp_syn a exp) \\<inter> S\n\ngoal (6 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (let x be e in exp )[y::=xa] G|` S =\n                         ccExp_syn a (let x be e in exp ) G|` S\n 2. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 4. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 6. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "show \"cc_restr S (CCexp (let x' be e in exp )[y::=x]\\<cdot>a) = cc_restr S (CCexp (let x' be e in exp )\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a (let x' be e in exp )[y::=x] G|` S =\n    ccExp_syn a (let x' be e in exp ) G|` S", "apply (subst subst_let_be)"], ["proof (prove)\ngoal (3 subgoals):\n 1. atom x' \\<sharp> y\n 2. atom x' \\<sharp> x\n 3. ccExp_syn a (let x' be e[y::=x] in exp[y::=x] ) G|` S =\n    ccExp_syn a (let x' be e in exp ) G|` S", "apply auto[2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a (let x' be e[y::=x] in exp[y::=x] ) G|` S =\n    ccExp_syn a (let x' be e in exp ) G|` S", "apply (subst (1 2) CCexp_simps(6))"], ["proof (prove)\ngoal (3 subgoals):\n 1. x' \\<notin> fv e\n 2. x' \\<notin> fv e[y::=x]\n 3. cc_delete x'\n     (ccBind x' e[y::=x]\\<cdot>\n      (Aheap_nonrec x' e[y::=x]\\<cdot>\n       (Aexp_syn' a exp[y::=x], ccExp_syn a exp[y::=x]),\n       ccExp_syn a exp[y::=x]) \\<squnion>\n      fv e[y::=x] G\\<times>\n      (ccNeighbors x' (ccExp_syn a exp[y::=x]) -\n       (if isVal e[y::=x] then {} else {x'})) \\<squnion>\n      ccExp_syn a exp[y::=x]) G|`\n    S =\n    cc_delete x'\n     (ccBind x' e\\<cdot>\n      (Aheap_nonrec x' e\\<cdot>(Aexp_syn' a exp, ccExp_syn a exp),\n       ccExp_syn a exp) \\<squnion>\n      fv e G\\<times>\n      (ccNeighbors x' (ccExp_syn a exp) -\n       (if isVal e then {} else {x'})) \\<squnion>\n      ccExp_syn a exp) G|`\n    S", "apply fact+"], ["proof (prove)\ngoal (1 subgoal):\n 1. cc_delete x'\n     (ccBind x' e[y::=x]\\<cdot>\n      (Aheap_nonrec x' e[y::=x]\\<cdot>\n       (Aexp_syn' a exp[y::=x], ccExp_syn a exp[y::=x]),\n       ccExp_syn a exp[y::=x]) \\<squnion>\n      fv e[y::=x] G\\<times>\n      (ccNeighbors x' (ccExp_syn a exp[y::=x]) -\n       (if isVal e[y::=x] then {} else {x'})) \\<squnion>\n      ccExp_syn a exp[y::=x]) G|`\n    S =\n    cc_delete x'\n     (ccBind x' e\\<cdot>\n      (Aheap_nonrec x' e\\<cdot>(Aexp_syn' a exp, ccExp_syn a exp),\n       ccExp_syn a exp) \\<squnion>\n      fv e G\\<times>\n      (ccNeighbors x' (ccExp_syn a exp) -\n       (if isVal e then {} else {x'})) \\<squnion>\n      ccExp_syn a exp) G|`\n    S", "apply (simp only: cc_restr_cc_delete_twist)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cc_delete x'\n     ((ccBind x' e[y::=x]\\<cdot>\n       (Aheap_nonrec x' e[y::=x]\\<cdot>\n        (Aexp_syn' a exp[y::=x], ccExp_syn a exp[y::=x]),\n        ccExp_syn a exp[y::=x]) \\<squnion>\n       fv e[y::=x] G\\<times>\n       (ccNeighbors x' (ccExp_syn a exp[y::=x]) -\n        (if isVal e[y::=x] then {} else {x'})) \\<squnion>\n       ccExp_syn a exp[y::=x]) G|`\n      S) =\n    cc_delete x'\n     ((ccBind x' e\\<cdot>\n       (Aheap_nonrec x' e\\<cdot>(Aexp_syn' a exp, ccExp_syn a exp),\n        ccExp_syn a exp) \\<squnion>\n       fv e G\\<times>\n       (ccNeighbors x' (ccExp_syn a exp) -\n        (if isVal e then {} else {x'})) \\<squnion>\n       ccExp_syn a exp) G|`\n      S)", "apply (rule arg_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. cc_delete x'\n     ((ccBind x' e[y::=x]\\<cdot>\n       (Aheap_nonrec x' e[y::=x]\\<cdot>\n        (Aexp_syn' a exp[y::=x], ccExp_syn a exp[y::=x]),\n        ccExp_syn a exp[y::=x]) \\<squnion>\n       fv e[y::=x] G\\<times>\n       (ccNeighbors x' (ccExp_syn a exp[y::=x]) -\n        (if isVal e[y::=x] then {} else {x'})) \\<squnion>\n       ccExp_syn a exp[y::=x]) G|`\n      S) =\n    cc_delete x'\n     ((ccBind x' e\\<cdot>\n       (Aheap_nonrec x' e\\<cdot>(Aexp_syn' a exp, ccExp_syn a exp),\n        ccExp_syn a exp) \\<squnion>\n       fv e G\\<times>\n       (ccNeighbors x' (ccExp_syn a exp) -\n        (if isVal e then {} else {x'})) \\<squnion>\n       ccExp_syn a exp) G|`\n      S)", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. (ccBind x' e[y::=x]\\<cdot>\n     (Aheap_nonrec x' e[y::=x]\\<cdot>\n      (Aexp_syn' a exp[y::=x], ccExp_syn a exp[y::=x]),\n      ccExp_syn a exp[y::=x]) \\<squnion>\n     fv e[y::=x] G\\<times>\n     (ccNeighbors x' (ccExp_syn a exp[y::=x]) -\n      (if isVal e[y::=x] then {} else {x'})) \\<squnion>\n     ccExp_syn a exp[y::=x]) G|`\n    S =\n    (ccBind x' e\\<cdot>\n     (Aheap_nonrec x' e\\<cdot>(Aexp_syn' a exp, ccExp_syn a exp),\n      ccExp_syn a exp) \\<squnion>\n     fv e G\\<times>\n     (ccNeighbors x' (ccExp_syn a exp) -\n      (if isVal e then {} else {x'})) \\<squnion>\n     ccExp_syn a exp) G|`\n    S", "apply (simp add:  Diff_eq ccBind_eq ABind_nonrec_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ccExp_syn a (let x' be e in exp )[y::=x] G|` S =\n  ccExp_syn a (let x' be e in exp ) G|` S\n\ngoal (5 subgoals):\n 1. \\<And>x e exp xa y a S.\n       \\<lbrakk>atom x \\<sharp> xa; atom x \\<sharp> y; x \\<notin> fv e;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e[ba::=b] G|` S =\n                             ccExp_syn a e G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e[ba::=b] f|` S =\n                             Aexp_syn' a e f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a exp[ba::=b] G|` S =\n                             ccExp_syn a exp G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a exp[ba::=b] f|` S =\n                             Aexp_syn' a exp f|` S;\n        xa \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (let x be e in exp )[y::=xa] f|` S =\n                         Aexp_syn' a (let x be e in exp ) f|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 3. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 4. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 5. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "show \"Aexp (let x' be e in exp )[y::=x]\\<cdot>a f|` S = Aexp (let x' be e in exp )\\<cdot>a f|` S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_syn' a (let x' be e in exp )[y::=x] f|` S =\n    Aexp_syn' a (let x' be e in exp ) f|` S", "by (simp add: env_restr_join env_delete_env_restr_swap[symmetric] ABind_nonrec_eq)"], ["proof (state)\nthis:\n  Aexp_syn' a (let x' be e in exp )[y::=x] f|` S =\n  Aexp_syn' a (let x' be e in exp ) f|` S\n\ngoal (4 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 3. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 4. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 3. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 4. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case (IfThenElse scrut e1 e2)"], ["proof (state)\nthis:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a scrut[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a scrut G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a scrut[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a scrut f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e1[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e1 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e1[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e1 f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e2[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e2 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e2[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e2 f|` ?S\n\ngoal (4 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 3. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 4. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "case [simp]: 2"], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (4 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 3. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n                         ccExp_syn a (scrut ? e1 : e2) G|` S\n 4. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from IfThenElse"], ["proof (chain)\npicking this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a scrut[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a scrut G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a scrut[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a scrut f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e1[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e1 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e1[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e1 f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e2[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e2 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e2[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e2 f|` ?S", "show \"cc_restr S (CCexp (scrut ? e1 : e2)[y::=x]\\<cdot>a) = cc_restr S (CCexp (scrut ? e1 : e2)\\<cdot>a)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a scrut[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a scrut G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a scrut[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a scrut f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e1[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e1 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e1[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e1 f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> ccExp_syn ?a e2[?ba::=?b] G|` ?S =\n                    ccExp_syn ?a e2 G|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e2[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e2 f|` ?S\n\ngoal (1 subgoal):\n 1. ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n    ccExp_syn a (scrut ? e1 : e2) G|` S", "by (auto simp del: edom_env env_restr_empty env_restr_empty_iff simp  add: edom_env[symmetric])"], ["proof (state)\nthis:\n  ccExp_syn a (scrut ? e1 : e2)[y::=x] G|` S =\n  ccExp_syn a (scrut ? e1 : e2) G|` S\n\ngoal (3 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S\n 3. \\<And>scrut e1 e2 x y a S.\n       \\<lbrakk>\\<And>b ba a S.\n                   \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n                   \\<Longrightarrow> ccExp_syn a scrut[ba::=b] G|` S =\n                                     ccExp_syn a scrut G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a scrut[ba::=b] f|` S =\n                             Aexp_syn' a scrut f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e1[ba::=b] G|` S =\n                             ccExp_syn a e1 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e1[ba::=b] f|` S =\n                             Aexp_syn' a e1 f|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> ccExp_syn a e2[ba::=b] G|` S =\n                             ccExp_syn a e2 G|` S;\n        \\<And>b ba a S.\n           \\<lbrakk>b \\<notin> S; ba \\<notin> S\\<rbrakk>\n           \\<Longrightarrow> Aexp_syn' a e2[ba::=b] f|` S =\n                             Aexp_syn' a e2 f|` S;\n        x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n                         Aexp_syn' a (scrut ? e1 : e2) f|` S", "from IfThenElse(2,4,6)"], ["proof (chain)\npicking this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a scrut[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a scrut f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e1[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e1 f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e2[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e2 f|` ?S", "show \"Aexp (scrut ? e1 : e2)[y::=x]\\<cdot>a f|` S = Aexp (scrut ? e1 : e2)\\<cdot>a f|` S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a scrut[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a scrut f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e1[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e1 f|` ?S\n  \\<lbrakk>?b \\<notin> ?S; ?ba \\<notin> ?S\\<rbrakk>\n  \\<Longrightarrow> Aexp_syn' ?a e2[?ba::=?b] f|` ?S =\n                    Aexp_syn' ?a e2 f|` ?S\n\ngoal (1 subgoal):\n 1. Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n    Aexp_syn' a (scrut ? e1 : e2) f|` S", "by (auto simp add: env_restr_join simp del: fun_meet_simp)"], ["proof (state)\nthis:\n  Aexp_syn' a (scrut ? e1 : e2)[y::=x] f|` S =\n  Aexp_syn' a (scrut ? e1 : e2) f|` S\n\ngoal (2 subgoals):\n 1. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a (Bool b)[y::=x] G|` S =\n                         ccExp_syn a (Bool b) G|` S\n 2. \\<And>b x y a S.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> Aexp_syn' a (Bool b)[y::=x] f|` S =\n                         Aexp_syn' a (Bool b) f|` S", "qed auto"], ["", "sublocale ArityAnalysisSafe Aexp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ArityAnalysisSafe Aexp", "by standard (simp_all add:Aexp_restr_subst)"], ["", "sublocale ArityAnalysisLetSafe Aexp Aheap"], ["proof (prove)\ngoal (1 subgoal):\n 1. ArityAnalysisLetSafe Aexp Aheap", "proof"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       edom (Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 2. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 3. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "fix \\<Gamma> e a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       edom (Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n 2. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 3. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "show \"edom (Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom (Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>", "by (cases \"nonrec \\<Gamma>\")\n       (auto simp add: Aheap_nonrec_simp dest: subsetD[OF edom_esing_subset] elim!: nonrecE)"], ["proof (state)\nthis:\n  edom (Aheap \\<Gamma> e\\<cdot>a) \\<subseteq> domA \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "fix x y :: var and \\<Gamma> :: heap and e :: exp"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "assume assms: \"x \\<notin> domA \\<Gamma>\"  \"y \\<notin> domA \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "from Aexp_restr_subst[OF assms(2,1)]"], ["proof (chain)\npicking this:\n  Aexp_syn' ?a ?e[x::=y] f|` domA \\<Gamma> =\n  Aexp_syn' ?a ?e f|` domA \\<Gamma>", "have **: \"\\<And> a. Aexp e[x::=y]\\<cdot>a f|` domA \\<Gamma> = Aexp e\\<cdot>a f|` domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  Aexp_syn' ?a ?e[x::=y] f|` domA \\<Gamma> =\n  Aexp_syn' ?a ?e f|` domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       Aexp_syn' a e[x::=y] f|` domA \\<Gamma> =\n       Aexp_syn' a e f|` domA \\<Gamma>", "."], ["proof (state)\nthis:\n  Aexp_syn' ?a e[x::=y] f|` domA \\<Gamma> = Aexp_syn' ?a e f|` domA \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>x \\<Gamma> y e.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; y \\<notin> domA \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "show \"Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "proof(cases \"nonrec \\<Gamma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "case [simp]: False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from assms"], ["proof (chain)\npicking this:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>", "have \"atom ` domA \\<Gamma> \\<sharp>* x\" and \"atom ` domA \\<Gamma> \\<sharp>* y\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. atom ` domA \\<Gamma> \\<sharp>* x &&& atom ` domA \\<Gamma> \\<sharp>* y", "by (auto simp add: fresh_star_at_base image_iff)"], ["proof (state)\nthis:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "hence [simp]: \"\\<not> nonrec (\\<Gamma>[x::h=y])\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (1 subgoal):\n 1. \\<not> nonrec \\<Gamma>[x::h=y]", "by (simp add: nonrec_subst)"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>[x::h=y]\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Aheap \\<Gamma>[x::h=y] e[x::=y]\\<cdot>xa = Aheap \\<Gamma> e\\<cdot>xa", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Afix \\<Gamma>[x::h=y]\\<cdot>\n       ((\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> \\<squnion>\n        Aexp_syn' xa e[x::=y]) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       (Aexp_syn' xa e \\<squnion>\n        (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n       domA \\<Gamma>", "apply (subst Afix_restr_subst[OF assms subset_refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Afix \\<Gamma>\\<cdot>\n       (((\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> \\<squnion>\n         Aexp_syn' xa e[x::=y]) f|`\n        domA \\<Gamma>) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       (Aexp_syn' xa e \\<squnion>\n        (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n       domA \\<Gamma>", "apply (subst Afix_restr[OF  subset_refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Afix \\<Gamma>\\<cdot>\n       (((\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> \\<squnion>\n         Aexp_syn' xa e[x::=y]) f|`\n        domA \\<Gamma> f|`\n        domA \\<Gamma>) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       (Aexp_syn' xa e \\<squnion>\n        (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n       domA \\<Gamma>", "back"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Afix \\<Gamma>\\<cdot>\n       (((\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma> \\<squnion>\n         Aexp_syn' xa e[x::=y]) f|`\n        domA \\<Gamma>) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       ((Aexp_syn' xa e \\<squnion>\n         (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>) f|`\n        domA \\<Gamma>) f|`\n       domA \\<Gamma>", "apply (simp add: env_restr_join)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Afix \\<Gamma>\\<cdot>\n       ((\\<lambda>_. up\\<cdot>0) f|`\n        (domA \\<Gamma> \\<inter> thunks \\<Gamma>) \\<squnion>\n        Aexp_syn' xa e[x::=y] f|` domA \\<Gamma>) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       (Aexp_syn' xa e f|` domA \\<Gamma> \\<squnion>\n        (\\<lambda>_. up\\<cdot>0) f|`\n        (domA \\<Gamma> \\<inter> thunks \\<Gamma>)) f|`\n       domA \\<Gamma>", "apply (subst **)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       Afix \\<Gamma>\\<cdot>\n       ((\\<lambda>_. up\\<cdot>0) f|`\n        (domA \\<Gamma> \\<inter> thunks \\<Gamma>) \\<squnion>\n        Aexp_syn' x e f|` domA \\<Gamma>) f|`\n       domA \\<Gamma> =\n       Afix \\<Gamma>\\<cdot>\n       (Aexp_syn' x e f|` domA \\<Gamma> \\<squnion>\n        (\\<lambda>_. up\\<cdot>0) f|`\n        (domA \\<Gamma> \\<inter> thunks \\<Gamma>)) f|`\n       domA \\<Gamma>", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "case True"], ["proof (state)\nthis:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from assms"], ["proof (chain)\npicking this:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>", "have \"atom ` domA \\<Gamma> \\<sharp>* x\" and \"atom ` domA \\<Gamma> \\<sharp>* y\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  y \\<notin> domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. atom ` domA \\<Gamma> \\<sharp>* x &&& atom ` domA \\<Gamma> \\<sharp>* y", "by (auto simp add: fresh_star_at_base image_iff)"], ["proof (state)\nthis:\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "with True"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y", "have *: \"nonrec (\\<Gamma>[x::h=y])\""], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n  atom ` domA \\<Gamma> \\<sharp>* x\n  atom ` domA \\<Gamma> \\<sharp>* y\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma>[x::h=y]", "by (simp add: nonrec_subst)"], ["proof (state)\nthis:\n  nonrec \\<Gamma>[x::h=y]\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from True"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>", "obtain x' e' where [simp]: \"\\<Gamma> = [(x',e')]\" \"x' \\<notin> fv e'\""], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>x' e'.\n        \\<lbrakk>\\<Gamma> = [(x', e')]; x' \\<notin> fv e'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: nonrecE)"], ["proof (state)\nthis:\n  \\<Gamma> = [(x', e')]\n  x' \\<notin> fv e'\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from *"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>[x::h=y]", "have [simp]: \"x' \\<notin> fv (e'[x::=y])\""], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>[x::h=y]\n\ngoal (1 subgoal):\n 1. x' \\<notin> fv e'[x::=y]", "by (auto simp add: nonrec_def)"], ["proof (state)\nthis:\n  x' \\<notin> fv e'[x::=y]\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from fun_cong[OF **, where x = x']"], ["proof (chain)\npicking this:\n  (Aexp_syn' ?a1 e[x::=y] f|` domA \\<Gamma>) x' =\n  (Aexp_syn' ?a1 e f|` domA \\<Gamma>) x'", "have [simp]: \"\\<And> a. (Aexp e[x::=y]\\<cdot>a) x' = (Aexp e\\<cdot>a) x'\""], ["proof (prove)\nusing this:\n  (Aexp_syn' ?a1 e[x::=y] f|` domA \\<Gamma>) x' =\n  (Aexp_syn' ?a1 e f|` domA \\<Gamma>) x'\n\ngoal (1 subgoal):\n 1. \\<And>a. Aexp_syn' a e[x::=y] x' = Aexp_syn' a e x'", "by simp"], ["proof (state)\nthis:\n  Aexp_syn' ?a e[x::=y] x' = Aexp_syn' ?a e x'\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from CCexp_subst[OF assms(2,1)]"], ["proof (chain)\npicking this:\n  ccExp_syn ?a ?e[x::=y] G|` domA \\<Gamma> =\n  ccExp_syn ?a ?e G|` domA \\<Gamma>", "have \"\\<And> a.  cc_restr {x'} (CCexp e[x::=y]\\<cdot>a) = cc_restr {x'} (CCexp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  ccExp_syn ?a ?e[x::=y] G|` domA \\<Gamma> =\n  ccExp_syn ?a ?e G|` domA \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>a. ccExp_syn a e[x::=y] G|` {x'} = ccExp_syn a e G|` {x'}", "by simp"], ["proof (state)\nthis:\n  ccExp_syn ?a e[x::=y] G|` {x'} = ccExp_syn ?a e G|` {x'}\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "from arg_cong[where f = \"\\<lambda>x.  x'--x'\\<in>x\", OF this]"], ["proof (chain)\npicking this:\n  x'--x'\\<in>(ccExp_syn ?a1 e[x::=y] G|` {x'}) =\n  x'--x'\\<in>(ccExp_syn ?a1 e G|` {x'})", "have [simp]: \"\\<And> a. x'--x'\\<in>(CCexp e[x::=y]\\<cdot>a) \\<longleftrightarrow> x'--x'\\<in>(CCexp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  x'--x'\\<in>(ccExp_syn ?a1 e[x::=y] G|` {x'}) =\n  x'--x'\\<in>(ccExp_syn ?a1 e G|` {x'})\n\ngoal (1 subgoal):\n 1. \\<And>a. x'--x'\\<in>ccExp_syn a e[x::=y] = x'--x'\\<in>ccExp_syn a e", "by simp"], ["proof (state)\nthis:\n  x'--x'\\<in>ccExp_syn ?a e[x::=y] = x'--x'\\<in>ccExp_syn ?a e\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e", "apply (rule cfun_eqI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       Aheap \\<Gamma>[x::h=y] e[x::=y]\\<cdot>xa = Aheap \\<Gamma> e\\<cdot>xa", "apply (auto simp add: Aheap_nonrec_simp ABind_nonrec_eq)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Aheap \\<Gamma>[x::h=y] e[x::=y] = Aheap \\<Gamma> e\n\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "fix \\<Gamma> e a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<Gamma> e a.\n       ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n       Aexp_syn' a e \\<sqsubseteq>\n       Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n       Aexp_syn' a (Terms.Let \\<Gamma> e)", "show \"ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion> Aexp e\\<cdot>a \\<sqsubseteq> Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp (Let \\<Gamma> e)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "proof(cases \"nonrec \\<Gamma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "case False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "by (auto simp add: Aheap_def join_below_iff env_restr_join2 Compl_partition intro:  below_trans[OF _ Afix_above_arg])"], ["proof (state)\nthis:\n  ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n  Aexp_syn' a e \\<sqsubseteq>\n  Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "case True"], ["proof (state)\nthis:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "then"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>", "obtain x e' where [simp]: \"\\<Gamma> = [(x,e')]\" \"x \\<notin> fv e'\""], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>x e'.\n        \\<lbrakk>\\<Gamma> = [(x, e')]; x \\<notin> fv e'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: nonrecE)"], ["proof (state)\nthis:\n  \\<Gamma> = [(x, e')]\n  x \\<notin> fv e'\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "hence \"\\<And> a. x \\<notin> edom (fup\\<cdot>(Aexp e')\\<cdot>a)\""], ["proof (prove)\nusing this:\n  \\<Gamma> = [(x, e')]\n  x \\<notin> fv e'\n\ngoal (1 subgoal):\n 1. \\<And>a. x \\<notin> edom (Aexp_bot_syn' a e')", "by (auto dest:subsetD[OF fup_Aexp_edom])"], ["proof (state)\nthis:\n  x \\<notin> edom (Aexp_bot_syn' ?a e')\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "hence [simp]: \"\\<And> a. (fup\\<cdot>(Aexp e')\\<cdot>a) x = \\<bottom>\""], ["proof (prove)\nusing this:\n  x \\<notin> edom (Aexp_bot_syn' ?a e')\n\ngoal (1 subgoal):\n 1. \\<And>a. Aexp_bot_syn' a e' x = \\<bottom>", "by (simp add: edomIff)"], ["proof (state)\nthis:\n  Aexp_bot_syn' ?a e' x = \\<bottom>\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n    Aexp_syn' a e \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "apply (rule env_restr_below_split[where S = \"{x}\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n     Aexp_syn' a e) f|`\n    {x} \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n 2. (ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n     Aexp_syn' a e) f|`\n    (- {x}) \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "apply (rule env_restr_belowI2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       xa \\<in> {x} \\<Longrightarrow>\n       (ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n        Aexp_syn' a e)\n        xa \\<sqsubseteq>\n       (Aheap \\<Gamma> e\\<cdot>a \\<squnion>\n        Aexp_syn' a (Terms.Let \\<Gamma> e))\n        xa\n 2. (ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n     Aexp_syn' a e) f|`\n    (- {x}) \\<sqsubseteq>\n    Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)", "apply (auto simp add:  Aheap_nonrec_simp  join_below_iff env_restr_join env_delete_restr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Aexp_syn' a e x \\<sqsubseteq>\n    ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)\n 2. Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x}) \\<sqsubseteq>\n    Aexp_syn' a e f|` (- {x}) \\<squnion>\n    (esing x\\<cdot>\n     (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)) \\<squnion>\n     Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n      e' f|`\n     (- {x}))", "apply (rule ABind_nonrec_above_arg)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x}) \\<sqsubseteq>\n    Aexp_syn' a e f|` (- {x}) \\<squnion>\n    (esing x\\<cdot>\n     (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)) \\<squnion>\n     Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n      e' f|`\n     (- {x}))", "apply (rule below_trans[OF _ join_above2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x}) \\<sqsubseteq>\n    esing x\\<cdot>\n    (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)) \\<squnion>\n    Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x})", "apply (rule below_trans[OF _ join_above2])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x}) \\<sqsubseteq>\n    Aexp_bot_syn' (ABind_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e))\n     e' f|`\n    (- {x})", "apply (rule below_refl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n  Aexp_syn' a e \\<sqsubseteq>\n  Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ABinds \\<Gamma>\\<cdot>(Aheap \\<Gamma> e\\<cdot>a) \\<squnion>\n  Aexp_syn' a e \\<sqsubseteq>\n  Aheap \\<Gamma> e\\<cdot>a \\<squnion> Aexp_syn' a (Terms.Let \\<Gamma> e)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition ccHeap_nonrec\n  where \"ccHeap_nonrec x e exp = (\\<Lambda> n. CCfix_nonrec x e\\<cdot>(Aexp exp\\<cdot>n, CCexp exp\\<cdot>n))\""], ["", "lemma ccHeap_nonrec_eq:\n   \"ccHeap_nonrec x e exp\\<cdot>n = CCfix_nonrec x e\\<cdot>(Aexp exp\\<cdot>n, CCexp exp\\<cdot>n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccHeap_nonrec x e exp\\<cdot>n =\n    CCfix_nonrec x e\\<cdot>(Aexp_syn' n exp, ccExp_syn n exp)", "unfolding ccHeap_nonrec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> n.\n        CCfix_nonrec x e\\<cdot>(Aexp_syn' n exp, ccExp_syn n exp))\\<cdot>\n    n =\n    CCfix_nonrec x e\\<cdot>(Aexp_syn' n exp, ccExp_syn n exp)", "by (rule beta_cfun) (intro cont2cont)"], ["", "definition ccHeap_rec :: \"heap \\<Rightarrow> exp \\<Rightarrow> Arity \\<rightarrow> CoCalls\"\n  where \"ccHeap_rec \\<Gamma> e  = (\\<Lambda> a. CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), CCexp e\\<cdot>a))\""], ["", "lemma ccHeap_rec_eq:\n  \"ccHeap_rec \\<Gamma> e\\<cdot>a = CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), CCexp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccHeap_rec \\<Gamma> e\\<cdot>a =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e)", "unfolding ccHeap_rec_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Lambda> a.\n        CCfix \\<Gamma>\\<cdot>\n        (Afix \\<Gamma>\\<cdot>\n         (Aexp_syn' a e \\<squnion>\n          (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n         ccExp_syn a e))\\<cdot>\n    a =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e)", "by simp"], ["", "definition ccHeap :: \"heap \\<Rightarrow> exp \\<Rightarrow> Arity \\<rightarrow> CoCalls\"\n  where \"ccHeap \\<Gamma>  = (if nonrec \\<Gamma> then case_prod ccHeap_nonrec (hd \\<Gamma>) else ccHeap_rec \\<Gamma>)\""], ["", "lemma ccHeap_simp1:\n  \"\\<not> nonrec \\<Gamma> \\<Longrightarrow> ccHeap \\<Gamma> e\\<cdot>a = CCfix \\<Gamma>\\<cdot>(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0) f|` (thunks \\<Gamma>)), CCexp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a =\n    CCfix \\<Gamma>\\<cdot>\n    (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>),\n     ccExp_syn a e)", "by (simp add: ccHeap_def ccHeap_rec_eq)"], ["", "lemma ccHeap_simp2:\n  \"x \\<notin> fv e \\<Longrightarrow> ccHeap [(x,e)] exp\\<cdot>n = CCfix_nonrec x e\\<cdot>(Aexp exp\\<cdot>n, CCexp exp\\<cdot>n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> fv e \\<Longrightarrow>\n    ccHeap [(x, e)] exp\\<cdot>n =\n    CCfix_nonrec x e\\<cdot>(Aexp_syn' n exp, ccExp_syn n exp)", "by (simp add: ccHeap_def ccHeap_nonrec_eq nonrec_def)"], ["", "sublocale CoCallAritySafe CCexp Aexp ccHeap Aheap"], ["proof (prove)\ngoal (1 subgoal):\n 1. CoCallAritySafe CCexp Aexp ccHeap Aheap", "proof"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>e a x.\n       ccExp_syn (inc\\<cdot>a) e \\<squnion>\n       {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n       ccExp_syn a (App e x)\n 2. \\<And>y e n.\n       ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n       ccExp_syn n (Lam [y]. e)\n 3. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 4. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 5. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 6. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 7. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 9. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 10. \\<And>\\<Gamma> x e a.\n        \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n         x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n        \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\nA total of 11 subgoals...", "fix e a x"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>e a x.\n       ccExp_syn (inc\\<cdot>a) e \\<squnion>\n       {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n       ccExp_syn a (App e x)\n 2. \\<And>y e n.\n       ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n       ccExp_syn n (Lam [y]. e)\n 3. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 4. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 5. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 6. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 7. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 9. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 10. \\<And>\\<Gamma> x e a.\n        \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n         x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n        \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\nA total of 11 subgoals...", "show \"CCexp e\\<cdot>(inc\\<cdot>a) \\<squnion> ccProd {x} (insert x (fv e)) \\<sqsubseteq> CCexp (App e x)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn (inc\\<cdot>a) e \\<squnion>\n    {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n    ccExp_syn a (App e x)", "by simp"], ["proof (state)\nthis:\n  ccExp_syn (inc\\<cdot>a) e \\<squnion>\n  {x} G\\<times> insert x (fv e) \\<sqsubseteq>\n  ccExp_syn a (App e x)\n\ngoal (10 subgoals):\n 1. \\<And>y e n.\n       ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n       ccExp_syn n (Lam [y]. e)\n 2. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 3. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 4. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 5. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 6. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 10. \\<And>\\<Gamma> x e a.\n        \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n         x--x\\<in>ccExp_syn a e\\<rbrakk>\n        \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>y e n.\n       ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n       ccExp_syn n (Lam [y]. e)\n 2. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 3. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 4. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 5. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 6. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 10. \\<And>\\<Gamma> x e a.\n        \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n         x--x\\<in>ccExp_syn a e\\<rbrakk>\n        \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix y e n"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>y e n.\n       ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n       ccExp_syn n (Lam [y]. e)\n 2. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 3. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 4. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 5. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 6. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 10. \\<And>\\<Gamma> x e a.\n        \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n         x--x\\<in>ccExp_syn a e\\<rbrakk>\n        \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"cc_restr (fv (Lam [y]. e)) (CCexp e\\<cdot>(pred\\<cdot>n)) \\<sqsubseteq> CCexp (Lam [y]. e)\\<cdot>n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n    ccExp_syn n (Lam [y]. e)", "by (auto simp add: CCexp_pre_simps predCC_eq dest!: subsetD[OF ccField_cc_restr] simp del: CCexp_simps)"], ["proof (state)\nthis:\n  ccExp_syn (pred\\<cdot>n) e G|` fv (Lam [y]. e) \\<sqsubseteq>\n  ccExp_syn n (Lam [y]. e)\n\ngoal (9 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 2. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 3. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 4. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 5. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 2. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 3. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 4. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 5. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix x y :: var and S e a"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 2. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 3. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 4. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 5. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"x \\<notin> S\"  and \"y \\<notin> S\""], ["proof (state)\nthis:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (9 subgoals):\n 1. \\<And>x S y e a.\n       \\<lbrakk>x \\<notin> S; y \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a e[y::=x] G|` S \\<sqsubseteq>\n                         ccExp_syn a e G|` S\n 2. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 3. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 4. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 5. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 9. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "thus \"cc_restr S (CCexp e[y::=x]\\<cdot>a) \\<sqsubseteq> cc_restr S (CCexp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  x \\<notin> S\n  y \\<notin> S\n\ngoal (1 subgoal):\n 1. ccExp_syn a e[y::=x] G|` S \\<sqsubseteq> ccExp_syn a e G|` S", "by (rule eq_imp_below[OF CCexp_subst])"], ["proof (state)\nthis:\n  ccExp_syn a e[y::=x] G|` S \\<sqsubseteq> ccExp_syn a e G|` S\n\ngoal (8 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 2. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 3. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 4. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 2. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 3. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 4. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix e"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 2. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 3. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 4. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"isVal e\""], ["proof (state)\nthis:\n  isVal e\n\ngoal (8 subgoals):\n 1. \\<And>e. isVal e \\<Longrightarrow> ccExp_syn 0 e = fv e\\<^sup>2\n 2. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 3. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 4. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 8. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "thus \"CCexp e\\<cdot>0 = ccSquare (fv e)\""], ["proof (prove)\nusing this:\n  isVal e\n\ngoal (1 subgoal):\n 1. ccExp_syn 0 e = fv e\\<^sup>2", "by (induction e rule: isVal.induct) (auto simp add: predCC_eq)"], ["proof (state)\nthis:\n  ccExp_syn 0 e = fv e\\<^sup>2\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 2. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 3. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 2. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 3. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix \\<Gamma> e a"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> e a.\n       ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n       ccExp_syn a (Terms.Let \\<Gamma> e)\n 2. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 3. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 7. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"cc_restr (- domA \\<Gamma>) (ccHeap \\<Gamma> e\\<cdot>a) \\<sqsubseteq> CCexp (Let \\<Gamma> e)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "proof(cases \"nonrec \\<Gamma>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "case False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>\n\ngoal (2 subgoals):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)\n 2. \\<not> nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "thus \"cc_restr (- domA \\<Gamma>) (ccHeap \\<Gamma> e\\<cdot>a) \\<sqsubseteq> CCexp (Let \\<Gamma> e)\\<cdot>a\""], ["proof (prove)\nusing this:\n  \\<not> nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "by (simp add: ccHeap_simp1[OF False, symmetric] del: cc_restr_join)"], ["proof (state)\nthis:\n  ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n  ccExp_syn a (Terms.Let \\<Gamma> e)\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "case True"], ["proof (state)\nthis:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. nonrec \\<Gamma> \\<Longrightarrow>\n    ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n    ccExp_syn a (Terms.Let \\<Gamma> e)", "by (auto simp add: ccHeap_simp2 Diff_eq elim!: nonrecE simp del: cc_restr_join)"], ["proof (state)\nthis:\n  ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n  ccExp_syn a (Terms.Let \\<Gamma> e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccHeap \\<Gamma> e\\<cdot>a G|` (- domA \\<Gamma>) \\<sqsubseteq>\n  ccExp_syn a (Terms.Let \\<Gamma> e)\n\ngoal (6 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix \\<Delta> :: heap and e a"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>e a \\<Delta>.\n       ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 6. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"CCexp e\\<cdot>a \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (cases \"nonrec \\<Delta>\")\n       (auto simp add: ccHeap_simp1 ccHeap_simp2 arg_cong[OF CCfix_unroll, where f = \"(\\<sqsubseteq>) x\" for x ] elim!: nonrecE)"], ["proof (state)\nthis:\n  ccExp_syn a e \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (5 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix x e' a'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"map_of \\<Delta> x = Some e'\""], ["proof (state)\nthis:\n  map_of \\<Delta> x = Some e'\n\ngoal (5 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "hence [simp]: \"x \\<in> domA \\<Delta>\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Delta>", "by (metis domI dom_map_of_conv_domA)"], ["proof (state)\nthis:\n  x \\<in> domA \\<Delta>\n\ngoal (5 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\""], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (5 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> ccExp_syn a' e' \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 5. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"CCexp e'\\<cdot>a' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "proof(cases \"nonrec \\<Delta>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "case False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Delta>\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "from \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close> False"], ["proof (chain)\npicking this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  \\<not> nonrec \\<Delta>", "have \"(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>))) x = up\\<cdot>a'\""], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  \\<not> nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>))\n     x =\n    up\\<cdot>a'", "by (simp add: Aheap_def)"], ["proof (state)\nthis:\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>))\n   x =\n  up\\<cdot>a'\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "hence \"CCexp e'\\<cdot>a' \\<sqsubseteq> ccBind x e'\\<cdot>(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>)), CCfix \\<Delta>\\<cdot>(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>)), CCexp e\\<cdot>a))\""], ["proof (prove)\nusing this:\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>))\n   x =\n  up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq>\n    ccBind x e'\\<cdot>\n    (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n     CCfix \\<Delta>\\<cdot>\n     (Afix \\<Delta>\\<cdot>\n      (Aexp_syn' a e \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n      ccExp_syn a e))", "by (auto simp add: ccBind_eq dest: subsetD[OF ccField_CCexp])"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq>\n  ccBind x e'\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   CCfix \\<Delta>\\<cdot>\n   (Afix \\<Delta>\\<cdot>\n    (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n    ccExp_syn a e))\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq>\n  ccBind x e'\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   CCfix \\<Delta>\\<cdot>\n   (Afix \\<Delta>\\<cdot>\n    (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n    ccExp_syn a e))\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "have \"ccBind x e'\\<cdot>(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>)), CCfix \\<Delta>\\<cdot>(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>)), CCexp e\\<cdot>a)) \\<sqsubseteq>  ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBind x e'\\<cdot>\n    (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n     CCfix \\<Delta>\\<cdot>\n     (Afix \\<Delta>\\<cdot>\n      (Aexp_syn' a e \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n      ccExp_syn a e)) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using \\<open>map_of \\<Delta> x = Some e'\\<close> False"], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  \\<not> nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. ccBind x e'\\<cdot>\n    (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n     CCfix \\<Delta>\\<cdot>\n     (Afix \\<Delta>\\<cdot>\n      (Aexp_syn' a e \\<squnion>\n       (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n      ccExp_syn a e)) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (fastforce simp add: ccHeap_simp1 ccHeap_rec_eq ccBindsExtra_simp  ccBinds_eq  arg_cong[OF CCfix_unroll, where f = \"(\\<sqsubseteq>) x\" for x ]\n                  intro: below_trans[OF _ join_above2])"], ["proof (state)\nthis:\n  ccBind x e'\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   CCfix \\<Delta>\\<cdot>\n   (Afix \\<Delta>\\<cdot>\n    (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n    ccExp_syn a e)) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "show \"CCexp e'\\<cdot>a' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by this simp_all"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "case True"], ["proof (state)\nthis:\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "with \\<open>map_of \\<Delta> x = Some e'\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Delta> x = Some e'\n  nonrec \\<Delta>", "have [simp]: \"\\<Delta> = [(x,e')]\" \"x \\<notin> fv e'\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Delta> = [(x, e')] &&& x \\<notin> fv e'", "by (auto elim!: nonrecE split: if_splits)"], ["proof (state)\nthis:\n  \\<Delta> = [(x, e')]\n  x \\<notin> fv e'\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "proof(cases \"x--x\\<notin>CCexp e\\<cdot>a \\<or> isVal e'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x--x\\<notin>ccExp_syn a e \\<or> isVal e' \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "case True"], ["proof (state)\nthis:\n  x--x\\<notin>ccExp_syn a e \\<or> isVal e'\n\ngoal (2 subgoals):\n 1. x--x\\<notin>ccExp_syn a e \\<or> isVal e' \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "with \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close>"], ["proof (chain)\npicking this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  x--x\\<notin>ccExp_syn a e \\<or> isVal e'", "have [simp]: \"(CoCallArityAnalysis.Aexp cCCexp e\\<cdot>a) x = up\\<cdot>a'\""], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  x--x\\<notin>ccExp_syn a e \\<or> isVal e'\n\ngoal (1 subgoal):\n 1. Aexp_syn' a e x = up\\<cdot>a'", "by (auto simp add: Aheap_nonrec_simp ABind_nonrec_eq split: if_splits)"], ["proof (state)\nthis:\n  Aexp_syn' a e x = up\\<cdot>a'\n\ngoal (2 subgoals):\n 1. x--x\\<notin>ccExp_syn a e \\<or> isVal e' \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "have \"CCexp e'\\<cdot>a' \\<sqsubseteq> ccSquare (fv e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> fv e'\\<^sup>2", "unfolding below_ccSquare"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccField (ccExp_syn a' e') \\<subseteq> fv e'", "by (rule ccField_CCexp)"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> fv e'\\<^sup>2\n\ngoal (2 subgoals):\n 1. x--x\\<notin>ccExp_syn a e \\<or> isVal e' \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "then"], ["proof (chain)\npicking this:\n  ccExp_syn a' e' \\<sqsubseteq> fv e'\\<^sup>2", "show ?thesis"], ["proof (prove)\nusing this:\n  ccExp_syn a' e' \\<sqsubseteq> fv e'\\<^sup>2\n\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "using True"], ["proof (prove)\nusing this:\n  ccExp_syn a' e' \\<sqsubseteq> fv e'\\<^sup>2\n  x--x\\<notin>ccExp_syn a e \\<or> isVal e'\n\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: ccHeap_simp2 ccBind_eq Aheap_nonrec_simp ABind_nonrec_eq below_trans[OF _ join_above2] simp del: below_ccSquare )"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "case False"], ["proof (state)\nthis:\n  \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e')\n\ngoal (1 subgoal):\n 1. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "from \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close>"], ["proof (chain)\npicking this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'", "have [simp]: \"a' = 0\""], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n\ngoal (1 subgoal):\n 1. a' = 0", "using  False"], ["proof (prove)\nusing this:\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e')\n\ngoal (1 subgoal):\n 1. a' = 0", "by (auto simp add: Aheap_nonrec_simp ABind_nonrec_eq split: if_splits)"], ["proof (state)\nthis:\n  a' = 0\n\ngoal (1 subgoal):\n 1. \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e') \\<Longrightarrow>\n    ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "using False"], ["proof (prove)\nusing this:\n  \\<not> (x--x\\<notin>ccExp_syn a e \\<or> isVal e')\n\ngoal (1 subgoal):\n 1. ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: ccHeap_simp2 ccBind_eq Aheap_nonrec_simp ABind_nonrec_eq simp del: below_ccSquare )"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ccExp_syn a' e' \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (4 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Delta> x e' e a a'.\n       \\<lbrakk>map_of \\<Delta> x = Some e';\n        (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<rbrakk>\n       \\<Longrightarrow> fv e' G\\<times>\n                         (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                          {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                         ccHeap \\<Delta> e\\<cdot>a\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 4. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "proof (cases \"nonrec \\<Delta>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "case [simp]: False"], ["proof (state)\nthis:\n  \\<not> nonrec \\<Delta>\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq> ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)", "by (rule ccProd_mono2) auto"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>. ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n    (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n        fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a))", "using \\<open>map_of \\<Delta> x = Some e'\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n\ngoal (1 subgoal):\n 1. fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n    (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n        fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a))", "by (rule below_lubmapI)"], ["proof (state)\nthis:\n  fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n  (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n      fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a))\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n  (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n      fv e' G\\<times> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a))\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccBindsExtra \\<Delta>\\<cdot>(Afix \\<Delta>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Delta>)), ccHeap \\<Delta> e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n        fv e' G\\<times>\n        ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)) \\<sqsubseteq>\n    ccBindsExtra \\<Delta>\\<cdot>\n    (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n     ccHeap \\<Delta> e\\<cdot>a)", "by (simp add: ccBindsExtra_simp  below_trans[OF _ join_above2])"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n      fv e' G\\<times>\n      ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)) \\<sqsubseteq>\n  ccBindsExtra \\<Delta>\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   ccHeap \\<Delta> e\\<cdot>a)\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  (\\<Squnion>x\\<mapsto>e'\\<in>map_of \\<Delta>.\n      fv e' G\\<times>\n      ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)) \\<sqsubseteq>\n  ccBindsExtra \\<Delta>\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   ccHeap \\<Delta> e\\<cdot>a)\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccBindsExtra \\<Delta>\\<cdot>\n    (Afix \\<Delta>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n     ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (simp add: ccHeap_simp1  arg_cong[OF CCfix_unroll, where f = \"(\\<sqsubseteq>) x\" for x])"], ["proof (state)\nthis:\n  ccBindsExtra \\<Delta>\\<cdot>\n  (Afix \\<Delta>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Delta>),\n   ccHeap \\<Delta> e\\<cdot>a) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont (\\<lambda>a. a);\n   cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> fv e' G\\<times>\n                    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                    ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>cont (\\<lambda>a. a); cont (\\<lambda>a. a);\n   cont (\\<lambda>a. a)\\<rbrakk>\n  \\<Longrightarrow> fv e' G\\<times>\n                    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                    ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by this simp_all"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "case True"], ["proof (state)\nthis:\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "with \\<open>map_of \\<Delta> x = Some e'\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Delta> x = Some e'\n  nonrec \\<Delta>", "have [simp]: \"\\<Delta> = [(x,e')]\" \"x \\<notin> fv e'\""], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  nonrec \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<Delta> = [(x, e')] &&& x \\<notin> fv e'", "by (auto elim!: nonrecE split: if_splits)"], ["proof (state)\nthis:\n  \\<Delta> = [(x, e')]\n  x \\<notin> fv e'\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have [simp]: \"(ccNeighbors x (ccBind x e'\\<cdot>(Aexp e\\<cdot>a, CCexp e\\<cdot>a))) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x (ccBind x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)) = {}", "by (auto simp add: ccBind_eq dest!: subsetD[OF ccField_cc_restr] subsetD[OF ccField_fup_CCexp])"], ["proof (state)\nthis:\n  ccNeighbors x (ccBind x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e)) = {}\n\ngoal (1 subgoal):\n 1. nonrec \\<Delta> \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "proof(cases \"isVal e' \\<and> x--x\\<in>CCexp e\\<cdot>a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "case True"], ["proof (state)\nthis:\n  isVal e' \\<and> x--x\\<in>ccExp_syn a e\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n        ccNeighbors x (ccBind x e'\\<cdot>(Aheap_nonrec x e'\\<cdot>(Aexp e\\<cdot>a, CCexp e\\<cdot>a), CCexp e\\<cdot>a)) \\<union>\n        ccNeighbors x (ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a) - (if isVal e' then {} else {x}))) \\<union>\n        ccNeighbors x (CCexp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n    ccNeighbors x\n     (ccBind x e'\\<cdot>\n      (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n       ccExp_syn a e)) \\<union>\n    ccNeighbors x\n     (fv e' G\\<times>\n      (ccNeighbors x (ccExp_syn a e) -\n       (if isVal e' then {} else {x}))) \\<union>\n    ccNeighbors x (ccExp_syn a e)", "by (auto simp add: ccHeap_simp2 )"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) \\<union>\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     (if isVal e' then {} else {x}))) \\<union>\n  ccNeighbors x (ccExp_syn a e)\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) \\<union>\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     (if isVal e' then {} else {x}))) \\<union>\n  ccNeighbors x (ccExp_syn a e)\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccNeighbors x (ccBind  x e'\\<cdot>(Aheap_nonrec x e'\\<cdot>(Aexp e\\<cdot>a, CCexp e\\<cdot>a), CCexp e\\<cdot>a)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x\n     (ccBind x e'\\<cdot>\n      (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n       ccExp_syn a e)) =\n    {}", "by (auto simp add: ccBind_eq dest!: subsetD[OF ccField_cc_restr] subsetD[OF ccField_fup_CCexp])"], ["proof (state)\nthis:\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) =\n  {}\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) =\n  {}\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccNeighbors x (ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a) - (if isVal e' then {} else {x})))\n      \\<subseteq> ccNeighbors x (ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x\n     (fv e' G\\<times>\n      (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x})))\n    \\<subseteq> ccNeighbors x\n                 (fv e' G\\<times> ccNeighbors x (ccExp_syn a e))", "by (simp add: ccNeighbors_ccProd)"], ["proof (state)\nthis:\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x})))\n  \\<subseteq> ccNeighbors x (fv e' G\\<times> ccNeighbors x (ccExp_syn a e))\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x})))\n  \\<subseteq> ccNeighbors x (fv e' G\\<times> ccNeighbors x (ccExp_syn a e))\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<subseteq> fv e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x (fv e' G\\<times> ccNeighbors x (ccExp_syn a e))\n    \\<subseteq> fv e'", "by (simp add: ccNeighbors_ccProd)"], ["proof (state)\nthis:\n  ccNeighbors x (fv e' G\\<times> ccNeighbors x (ccExp_syn a e))\n  \\<subseteq> fv e'\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>xa y.\n              xa \\<subseteq> y \\<Longrightarrow>\n              {} \\<union> xa \\<union> ccNeighbors x (ccExp_syn a e)\n              \\<subseteq> {} \\<union> y \\<union>\n                          ccNeighbors x (ccExp_syn a e);\n   \\<And>xa y.\n      xa \\<subseteq> y \\<Longrightarrow>\n      {} \\<union> xa \\<union> ccNeighbors x (ccExp_syn a e)\n      \\<subseteq> {} \\<union> y \\<union>\n                  ccNeighbors x (ccExp_syn a e)\\<rbrakk>\n  \\<Longrightarrow> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n                    \\<subseteq> {} \\<union> fv e' \\<union>\n                                ccNeighbors x (ccExp_syn a e)", "have \"ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta> \\<subseteq> ccNeighbors x (CCexp e\\<cdot>a) \\<union> fv e'\""], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>xa y.\n              xa \\<subseteq> y \\<Longrightarrow>\n              {} \\<union> xa \\<union> ccNeighbors x (ccExp_syn a e)\n              \\<subseteq> {} \\<union> y \\<union>\n                          ccNeighbors x (ccExp_syn a e);\n   \\<And>xa y.\n      xa \\<subseteq> y \\<Longrightarrow>\n      {} \\<union> xa \\<union> ccNeighbors x (ccExp_syn a e)\n      \\<subseteq> {} \\<union> y \\<union>\n                  ccNeighbors x (ccExp_syn a e)\\<rbrakk>\n  \\<Longrightarrow> ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n                    \\<subseteq> {} \\<union> fv e' \\<union>\n                                ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n    \\<subseteq> ccNeighbors x (ccExp_syn a e) \\<union> fv e'", "by auto"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n  \\<subseteq> ccNeighbors x (ccExp_syn a e) \\<union> fv e'\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "hence \"ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq> ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a) \\<union> fv e')\""], ["proof (prove)\nusing this:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n  \\<subseteq> ccNeighbors x (ccExp_syn a e) \\<union> fv e'\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    fv e' G\\<times> (ccNeighbors x (ccExp_syn a e) \\<union> fv e')", "by (rule ccProd_mono2)"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times> (ccNeighbors x (ccExp_syn a e) \\<union> fv e')\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times> (ccNeighbors x (ccExp_syn a e) \\<union> fv e')\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a)) \\<squnion> ccProd (fv e') (fv e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) \\<union> fv e') \\<sqsubseteq>\n    fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<squnion>\n    fv e' G\\<times> fv e'", "by simp"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccExp_syn a e) \\<union> fv e') \\<sqsubseteq>\n  fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<squnion>\n  fv e' G\\<times> fv e'\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccExp_syn a e) \\<union> fv e') \\<sqsubseteq>\n  fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<squnion>\n  fv e' G\\<times> fv e'\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a)) \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using \\<open>map_of \\<Delta> x = Some e'\\<close> \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close> True"], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  isVal e' \\<and> x--x\\<in>ccExp_syn a e\n\ngoal (1 subgoal):\n 1. fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: ccHeap_simp2  below_trans[OF _ join_above2])"], ["proof (state)\nthis:\n  fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times> ccNeighbors x (ccExp_syn a e) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccProd (fv e') (fv e') = ccSquare (fv e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times> fv e' = fv e'\\<^sup>2", "by (simp add: ccSquare_def)"], ["proof (state)\nthis:\n  fv e' G\\<times> fv e' = fv e'\\<^sup>2\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times> fv e' = fv e'\\<^sup>2\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e'\\<^sup>2 \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "using \\<open>map_of \\<Delta> x = Some e'\\<close> \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close> True"], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  isVal e' \\<and> x--x\\<in>ccExp_syn a e\n\ngoal (1 subgoal):\n 1. fv e'\\<^sup>2 \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: ccHeap_simp2  ccBind_eq below_trans[OF _ join_above2])"], ["proof (state)\nthis:\n  fv e'\\<^sup>2 \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e'\\<^sup>2 \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "note join_self"], ["proof (state)\nthis:\n  ?x \\<squnion> ?x = ?x\n\ngoal (2 subgoals):\n 1. isVal e' \\<and> x--x\\<in>ccExp_syn a e \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a\n 2. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  \\<lbrakk>cont (\\<lambda>a. a);\n   cont (\\<lambda>a. a \\<squnion> fv e' G\\<times> fv e');\n   cont ((\\<squnion>) (ccHeap \\<Delta> e\\<cdot>a))\\<rbrakk>\n  \\<Longrightarrow> fv e' G\\<times>\n                    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                    ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>cont (\\<lambda>a. a);\n   cont (\\<lambda>a. a \\<squnion> fv e' G\\<times> fv e');\n   cont ((\\<squnion>) (ccHeap \\<Delta> e\\<cdot>a))\\<rbrakk>\n  \\<Longrightarrow> fv e' G\\<times>\n                    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n                     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n                    ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by this simp_all"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "case False"], ["proof (state)\nthis:\n  \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n        ccNeighbors x (ccBind x e'\\<cdot>(Aheap_nonrec x e'\\<cdot>(Aexp e\\<cdot>a, CCexp e\\<cdot>a), CCexp e\\<cdot>a)) \\<union>\n        ccNeighbors x (ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a) - (if isVal e' then {} else {x}))) \\<union>\n        ccNeighbors x (CCexp e\\<cdot>a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n    ccNeighbors x\n     (ccBind x e'\\<cdot>\n      (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n       ccExp_syn a e)) \\<union>\n    ccNeighbors x\n     (fv e' G\\<times>\n      (ccNeighbors x (ccExp_syn a e) -\n       (if isVal e' then {} else {x}))) \\<union>\n    ccNeighbors x (ccExp_syn a e)", "by (auto simp add: ccHeap_simp2 )"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) \\<union>\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     (if isVal e' then {} else {x}))) \\<union>\n  ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) \\<union>\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     (if isVal e' then {} else {x}))) \\<union>\n  ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"ccNeighbors x (ccBind  x e'\\<cdot>(Aheap_nonrec x e'\\<cdot>(Aexp e\\<cdot>a, CCexp e\\<cdot>a), CCexp e\\<cdot>a)) = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x\n     (ccBind x e'\\<cdot>\n      (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n       ccExp_syn a e)) =\n    {}", "by (auto simp add: ccBind_eq dest!: subsetD[OF ccField_cc_restr] subsetD[OF ccField_fup_CCexp])"], ["proof (state)\nthis:\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  ccNeighbors x\n   (ccBind x e'\\<cdot>\n    (Aheap_nonrec x e'\\<cdot>(Aexp_syn' a e, ccExp_syn a e),\n     ccExp_syn a e)) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have  \"ccNeighbors x (ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a) - (if isVal e' then {} else {x}) )) \n      = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccNeighbors x\n     (fv e' G\\<times>\n      (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x}))) =\n    {}", "using False"], ["proof (prove)\nusing this:\n  \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. ccNeighbors x\n     (fv e' G\\<times>\n      (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x}))) =\n    {}", "by (auto simp add: ccNeighbors_ccProd)"], ["proof (state)\nthis:\n  ccNeighbors x\n   (fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) - (if isVal e' then {} else {x}))) =\n  {}\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  {} \\<union> {} \\<union> ccNeighbors x (ccExp_syn a e)", "have \"ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) \\<subseteq> ccNeighbors x (CCexp e\\<cdot>a)\""], ["proof (prove)\nusing this:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) =\n  {} \\<union> {} \\<union> ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n    \\<subseteq> ccNeighbors x (ccExp_syn a e)", "by auto"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n  \\<subseteq> ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "hence\"ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)  - {x} \\<inter> thunks \\<Delta> \\<subseteq> ccNeighbors x (CCexp e\\<cdot>a)   - {x} \\<inter> thunks \\<Delta>\""], ["proof (prove)\nusing this:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a)\n  \\<subseteq> ccNeighbors x (ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n    \\<subseteq> ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>", "by auto"], ["proof (state)\nthis:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n  \\<subseteq> ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "hence \"ccProd (fv e') (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta> ) \\<sqsubseteq> ccProd (fv e') (ccNeighbors x (CCexp e\\<cdot>a)  - {x} \\<inter> thunks \\<Delta> )\""], ["proof (prove)\nusing this:\n  ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) - {x} \\<inter> thunks \\<Delta>\n  \\<subseteq> ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>)", "by (rule ccProd_mono2)"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times>\n  (ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "also"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  fv e' G\\<times>\n  (ccNeighbors x (ccExp_syn a e) - {x} \\<inter> thunks \\<Delta>)\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "have \"\\<dots> \\<sqsubseteq> ccHeap \\<Delta> e\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "using \\<open>map_of \\<Delta> x = Some e'\\<close> \\<open>(Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\\<close> False"], ["proof (prove)\nusing this:\n  map_of \\<Delta> x = Some e'\n  (Aheap \\<Delta> e\\<cdot>a) x = up\\<cdot>a'\n  \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e)\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccExp_syn a e) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by (auto simp add: ccHeap_simp2  thunks_Cons below_trans[OF _ join_above2])"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccExp_syn a e) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. \\<not> (isVal e' \\<and> x--x\\<in>ccExp_syn a e) \\<Longrightarrow>\n    fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a", "show ?thesis"], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a) \\<Longrightarrow>\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (1 subgoal):\n 1. fv e' G\\<times>\n    (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n     {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n    ccHeap \\<Delta> e\\<cdot>a", "by this simp_all"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fv e' G\\<times>\n  (ccNeighbors x (ccHeap \\<Delta> e\\<cdot>a) -\n   {x} \\<inter> thunks \\<Delta>) \\<sqsubseteq>\n  ccHeap \\<Delta> e\\<cdot>a\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix x \\<Gamma> e a"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume [simp]: \"\\<not> nonrec \\<Gamma>\""], ["proof (state)\nthis:\n  \\<not> nonrec \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"x \\<in> thunks \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "hence [simp]: \"x \\<in> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma>", "by (rule subsetD[OF thunks_domA])"], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\""], ["proof (state)\nthis:\n  x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "from \\<open>x \\<in> thunks \\<Gamma>\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> thunks \\<Gamma>", "have \"(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Gamma>))) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>))\n     x =\n    up\\<cdot>0", "by (subst Afix_unroll) simp"], ["proof (state)\nthis:\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>))\n   x =\n  up\\<cdot>0\n\ngoal (3 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>\\<not> nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x \\<in> edom (Aheap \\<Gamma> e\\<cdot>a)\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n 3. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "thus \"(Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>))\n   x =\n  up\\<cdot>0\n\ngoal (1 subgoal):\n 1. (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "by simp"], ["proof (state)\nthis:\n  (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "fix x \\<Gamma> e a"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"nonrec \\<Gamma>\""], ["proof (state)\nthis:\n  nonrec \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "then"], ["proof (chain)\npicking this:\n  nonrec \\<Gamma>", "obtain x' e' where [simp]: \"\\<Gamma> = [(x',e')]\" \"x' \\<notin> fv e'\""], ["proof (prove)\nusing this:\n  nonrec \\<Gamma>\n\ngoal (1 subgoal):\n 1. (\\<And>x' e'.\n        \\<lbrakk>\\<Gamma> = [(x', e')]; x' \\<notin> fv e'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto elim: nonrecE)"], ["proof (state)\nthis:\n  \\<Gamma> = [(x', e')]\n  x' \\<notin> fv e'\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"x \\<in> thunks \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "hence [simp]: \"x = x'\" \"\\<not> isVal e'\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. x = x' &&& \\<not> isVal e'", "by (auto simp add: thunks_Cons split: if_splits)"], ["proof (state)\nthis:\n  x = x'\n  \\<not> isVal e'\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "assume \"x--x \\<in> CCexp e\\<cdot>a\""], ["proof (state)\nthis:\n  x--x\\<in>ccExp_syn a e\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "hence [simp]: \"x'--x'\\<in> CCexp  e\\<cdot>a\""], ["proof (prove)\nusing this:\n  x--x\\<in>ccExp_syn a e\n\ngoal (1 subgoal):\n 1. x'--x'\\<in>ccExp_syn a e", "by simp"], ["proof (state)\nthis:\n  x'--x'\\<in>ccExp_syn a e\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "from \\<open>x \\<in> thunks \\<Gamma>\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> thunks \\<Gamma>", "have \"(Afix \\<Gamma>\\<cdot>(Aexp e\\<cdot>a \\<squnion> (\\<lambda>_.up\\<cdot>0)f|` (thunks \\<Gamma>))) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. (Afix \\<Gamma>\\<cdot>\n     (Aexp_syn' a e \\<squnion>\n      (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>))\n     x =\n    up\\<cdot>0", "by (subst Afix_unroll) simp"], ["proof (state)\nthis:\n  (Afix \\<Gamma>\\<cdot>\n   (Aexp_syn' a e \\<squnion> (\\<lambda>_. up\\<cdot>0) f|` thunks \\<Gamma>))\n   x =\n  up\\<cdot>0\n\ngoal (2 subgoals):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)\n 2. \\<And>\\<Gamma> x e a.\n       \\<lbrakk>nonrec \\<Gamma>; x \\<in> thunks \\<Gamma>;\n        x--x\\<in>ccExp_syn a e\\<rbrakk>\n       \\<Longrightarrow> (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "show \"(Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0", "by (auto simp add: Aheap_nonrec_simp ABind_nonrec_eq)"], ["proof (state)\nthis:\n  (Aheap \\<Gamma> e\\<cdot>a) x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)", "fix scrut e1 a e2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>scrut e1 a e2.\n       ccExp_syn 0 scrut \\<squnion>\n       (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n       edom (Aexp_syn' 0 scrut) G\\<times>\n       (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n       ccExp_syn a (scrut ? e1 : e2)", "show \"CCexp scrut\\<cdot>0 \\<squnion> (CCexp e1\\<cdot>a \\<squnion> CCexp e2\\<cdot>a) \\<squnion> ccProd (edom (Aexp scrut\\<cdot>0)) (edom (Aexp e1\\<cdot>a) \\<union> edom (Aexp e2\\<cdot>a)) \\<sqsubseteq> CCexp (scrut ? e1 : e2)\\<cdot>a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ccExp_syn 0 scrut \\<squnion>\n    (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n    edom (Aexp_syn' 0 scrut) G\\<times>\n    (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n    ccExp_syn a (scrut ? e1 : e2)", "by simp"], ["proof (state)\nthis:\n  ccExp_syn 0 scrut \\<squnion>\n  (ccExp_syn a e1 \\<squnion> ccExp_syn a e2) \\<squnion>\n  edom (Aexp_syn' 0 scrut) G\\<times>\n  (edom (Aexp_syn' a e1) \\<union> edom (Aexp_syn' a e2)) \\<sqsubseteq>\n  ccExp_syn a (scrut ? e1 : e2)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}