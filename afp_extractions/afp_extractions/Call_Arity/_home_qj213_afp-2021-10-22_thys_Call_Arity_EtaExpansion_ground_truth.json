{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/EtaExpansion.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma fresh_var_not_free:\n  \"fresh_var e \\<notin> fv e\"", "lemma fresh_var_fresh[simp]:\n  \"atom (fresh_var e) \\<sharp> e\"", "lemma fresh_var_subst[simp]:\n  \"e[fresh_var e::=x] = e\"", "lemma eta_expand_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (eta_expand n e) = eta_expand (\\<pi> \\<bullet> n) (\\<pi> \\<bullet> e)\"", "lemma fresh_eta_expand[simp]: \"a \\<sharp> eta_expand n e \\<longleftrightarrow> a \\<sharp> e\"", "lemma subst_eta_expand: \"(eta_expand n e)[x ::= y] = eta_expand n (e[x ::= y])\"", "lemma isLam_eta_expand:\n  \"isLam e \\<Longrightarrow> isLam (eta_expand n e)\" and \"n > 0 \\<Longrightarrow> isLam (eta_expand n e)\"", "lemma isVal_eta_expand:\n  \"isVal e \\<Longrightarrow> isVal (eta_expand n e)\" and \"n > 0 \\<Longrightarrow> isVal (eta_expand n e)\""], "translations": [["", "lemma fresh_var_not_free:\n  \"fresh_var e \\<notin> fv e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_var e \\<notin> fv e", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. fresh_var e \\<notin> fv e", "obtain v :: var where \"atom v \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v. atom v \\<sharp> e \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom v \\<sharp> e\n\ngoal (1 subgoal):\n 1. fresh_var e \\<notin> fv e", "hence \"v \\<notin> fv e\""], ["proof (prove)\nusing this:\n  atom v \\<sharp> e\n\ngoal (1 subgoal):\n 1. v \\<notin> fv e", "by (metis fv_not_fresh)"], ["proof (state)\nthis:\n  v \\<notin> fv e\n\ngoal (1 subgoal):\n 1. fresh_var e \\<notin> fv e", "thus ?thesis"], ["proof (prove)\nusing this:\n  v \\<notin> fv e\n\ngoal (1 subgoal):\n 1. fresh_var e \\<notin> fv e", "unfolding fresh_var_def"], ["proof (prove)\nusing this:\n  v \\<notin> fv e\n\ngoal (1 subgoal):\n 1. (SOME v. v \\<notin> fv e) \\<notin> fv e", "by (rule someI)"], ["proof (state)\nthis:\n  fresh_var e \\<notin> fv e\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fresh_var_fresh[simp]:\n  \"atom (fresh_var e) \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. atom (fresh_var e) \\<sharp> e", "by (metis fresh_var_not_free fv_not_fresh)"], ["", "lemma fresh_var_subst[simp]:\n  \"e[fresh_var e::=x] = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e[fresh_var e::=x] = e", "by (metis fresh_var_fresh subst_fresh_noop)"], ["", "fun eta_expand :: \"nat \\<Rightarrow> exp \\<Rightarrow> exp\" where\n   \"eta_expand 0 e = e\"\n|  \"eta_expand (Suc n) e = (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))\""], ["", "lemma eta_expand_eqvt[eqvt]:\n  \"\\<pi> \\<bullet> (eta_expand n e) = eta_expand (\\<pi> \\<bullet> n) (\\<pi> \\<bullet> e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> \\<bullet> eta_expand n e =\n    eta_expand (\\<pi> \\<bullet> n) (\\<pi> \\<bullet> e)", "apply (induction n arbitrary: e \\<pi>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e \\<pi>.\n       \\<pi> \\<bullet> eta_expand 0 e =\n       eta_expand (\\<pi> \\<bullet> 0) (\\<pi> \\<bullet> e)\n 2. \\<And>n e \\<pi>.\n       (\\<And>e \\<pi>.\n           \\<pi> \\<bullet> eta_expand n e =\n           eta_expand (\\<pi> \\<bullet> n)\n            (\\<pi> \\<bullet> e)) \\<Longrightarrow>\n       \\<pi> \\<bullet> eta_expand (Suc n) e =\n       eta_expand (\\<pi> \\<bullet> Suc n) (\\<pi> \\<bullet> e)", "apply (auto simp add: fresh_Pair permute_pure)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n e \\<pi> c.\n       \\<lbrakk>\\<And>e \\<pi>.\n                   \\<pi> \\<bullet> eta_expand n e =\n                   eta_expand n (\\<pi> \\<bullet> e);\n        atom c \\<sharp> e; atom c \\<sharp> \\<pi>; atom c \\<sharp> n;\n        atom c \\<sharp> \\<pi> \\<bullet> fresh_var e;\n        atom c \\<sharp> fresh_var (\\<pi> \\<bullet> e);\n        atom\n         c \\<sharp> eta_expand n\n                     (App (\\<pi> \\<bullet> e)\n                       (\\<pi> \\<bullet> fresh_var e));\n        atom\n         c \\<sharp> eta_expand n\n                     (App (\\<pi> \\<bullet> e)\n                       (fresh_var (\\<pi> \\<bullet> e)))\\<rbrakk>\n       \\<Longrightarrow> eta_expand n\n                          (App ((\\<pi> \\<bullet> fresh_var\n            e \\<leftrightarrow> c) \\<bullet> \\<pi> \\<bullet> e)\n                            c) =\n                         eta_expand n\n                          (App ((fresh_var\n                                  (\\<pi> \\<bullet> e) \\<leftrightarrow> c) \\<bullet> \\<pi> \\<bullet> e)\n                            c)", "apply (metis fresh_at_base_permI fresh_at_base_permute_iff fresh_var_fresh subst_fresh_noop subst_swap_same)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma fresh_eta_expand[simp]: \"a \\<sharp> eta_expand n e \\<longleftrightarrow> a \\<sharp> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp> eta_expand n e = a \\<sharp> e", "apply (induction n arbitrary: e)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>e. a \\<sharp> eta_expand 0 e = a \\<sharp> e\n 2. \\<And>n e.\n       (\\<And>e. a \\<sharp> eta_expand n e = a \\<sharp> e) \\<Longrightarrow>\n       a \\<sharp> eta_expand (Suc n) e = a \\<sharp> e", "apply  (simp add: fresh_Pair)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e. a \\<sharp> eta_expand n e = a \\<sharp> e) \\<Longrightarrow>\n       a \\<sharp> eta_expand (Suc n) e = a \\<sharp> e", "apply  (clarsimp simp add: fresh_Pair fresh_at_base)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e. a \\<sharp> eta_expand n e = a \\<sharp> e) \\<Longrightarrow>\n       (a \\<sharp> e \\<and> a \\<noteq> atom (fresh_var e) \\<or>\n        a = atom (fresh_var e)) =\n       a \\<sharp> e", "by (metis fresh_var_fresh)"], ["", "lemma subst_eta_expand: \"(eta_expand n e)[x ::= y] = eta_expand n (e[x ::= y])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eta_expand n e)[x::=y] = eta_expand n e[x::=y]", "proof (induction n arbitrary: e)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>e. (eta_expand 0 e)[x::=y] = eta_expand 0 e[x::=y]\n 2. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>e. (eta_expand 0 e)[x::=y] = eta_expand 0 e[x::=y]\n 2. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eta_expand 0 e)[x::=y] = eta_expand 0 e[x::=y]", "by simp"], ["proof (state)\nthis:\n  (eta_expand 0 e)[x::=y] = eta_expand 0 e[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "case (Suc n)"], ["proof (state)\nthis:\n  (eta_expand n ?e)[x::=y] = eta_expand n ?e[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "obtain z :: var where \"atom z \\<sharp> (e, fresh_var e, x, y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        atom z \\<sharp> (e, fresh_var e, x, y) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (rule obtain_fresh)"], ["proof (state)\nthis:\n  atom z \\<sharp> (e, fresh_var e, x, y)\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"(eta_expand (Suc n) e)[x::=y] = (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (eta_expand (Suc n) e)[x::=y] =\n    (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y]", "by simp"], ["proof (state)\nthis:\n  (eta_expand (Suc n) e)[x::=y] =\n  (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  (eta_expand (Suc n) e)[x::=y] =\n  (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = (Lam [z]. eta_expand n (App e z))[x::=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y] =\n    (Lam [z]. eta_expand n (App e z))[x::=y]", "apply (subst change_Lam_Variable[where y' = z])"], ["proof (prove)\ngoal (2 subgoals):\n 1. z \\<noteq> fresh_var e \\<Longrightarrow>\n    atom z \\<sharp> (eta_expand n (App e (fresh_var e)), fresh_var e)\n 2. (Lam [z]. ((fresh_var\n                 e \\<leftrightarrow> z) \\<bullet> eta_expand n\n             (App e (fresh_var e))))[x::=y] =\n    (Lam [z]. eta_expand n (App e z))[x::=y]", "using \\<open>atom z \\<sharp> _\\<close>"], ["proof (prove)\nusing this:\n  atom z \\<sharp> (e, fresh_var e, x, y)\n\ngoal (2 subgoals):\n 1. z \\<noteq> fresh_var e \\<Longrightarrow>\n    atom z \\<sharp> (eta_expand n (App e (fresh_var e)), fresh_var e)\n 2. (Lam [z]. ((fresh_var\n                 e \\<leftrightarrow> z) \\<bullet> eta_expand n\n             (App e (fresh_var e))))[x::=y] =\n    (Lam [z]. eta_expand n (App e z))[x::=y]", "by (auto simp add: fresh_Pair eta_expand_eqvt pure_fresh permute_pure flip_fresh_fresh intro!: eqvt_fresh_cong2[where f = eta_expand, OF eta_expand_eqvt])"], ["proof (state)\nthis:\n  (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y] =\n  (Lam [z]. eta_expand n (App e z))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  (Lam [fresh_var e]. eta_expand n (App e (fresh_var e)))[x::=y] =\n  (Lam [z]. eta_expand n (App e z))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = Lam [z]. (eta_expand n (App e z))[x::=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Lam [z]. eta_expand n (App e z))[x::=y] =\n    Lam [z]. (eta_expand n (App e z))[x::=y]", "using \\<open>atom z \\<sharp> _\\<close>"], ["proof (prove)\nusing this:\n  atom z \\<sharp> (e, fresh_var e, x, y)\n\ngoal (1 subgoal):\n 1. (Lam [z]. eta_expand n (App e z))[x::=y] =\n    Lam [z]. (eta_expand n (App e z))[x::=y]", "by simp"], ["proof (state)\nthis:\n  (Lam [z]. eta_expand n (App e z))[x::=y] =\n  Lam [z]. (eta_expand n (App e z))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  (Lam [z]. eta_expand n (App e z))[x::=y] =\n  Lam [z]. (eta_expand n (App e z))[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = Lam [z]. eta_expand n (App e z)[x::=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [z]. (eta_expand n (App e z))[x::=y] =\n    Lam [z]. eta_expand n (App e z)[x::=y]", "unfolding Suc.IH"], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [z]. eta_expand n (App e z)[x::=y] =\n    Lam [z]. eta_expand n (App e z)[x::=y]", ".."], ["proof (state)\nthis:\n  Lam [z]. (eta_expand n (App e z))[x::=y] =\n  Lam [z]. eta_expand n (App e z)[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  Lam [z]. (eta_expand n (App e z))[x::=y] =\n  Lam [z]. eta_expand n (App e z)[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = Lam [z]. eta_expand n (App e[x::=y] z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [z]. eta_expand n (App e z)[x::=y] =\n    Lam [z]. eta_expand n (App e[x::=y] z)", "using \\<open>atom z \\<sharp> _\\<close>"], ["proof (prove)\nusing this:\n  atom z \\<sharp> (e, fresh_var e, x, y)\n\ngoal (1 subgoal):\n 1. Lam [z]. eta_expand n (App e z)[x::=y] =\n    Lam [z]. eta_expand n (App e[x::=y] z)", "by simp"], ["proof (state)\nthis:\n  Lam [z]. eta_expand n (App e z)[x::=y] =\n  Lam [z]. eta_expand n (App e[x::=y] z)\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  Lam [z]. eta_expand n (App e z)[x::=y] =\n  Lam [z]. eta_expand n (App e[x::=y] z)\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = Lam [fresh_var (e[x::=y])]. eta_expand n (App e[x::=y] (fresh_var (e[x::=y])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [z]. eta_expand n (App e[x::=y] z) =\n    Lam [fresh_var\n          e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y]))", "apply (subst change_Lam_Variable[where y' = \"fresh_var (e[x::=y])\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. fresh_var e[x::=y] \\<noteq> z \\<Longrightarrow>\n    atom (fresh_var e[x::=y]) \\<sharp> (eta_expand n (App e[x::=y] z), z)\n 2. Lam [fresh_var\n          e[x::=y]]. ((z \\<leftrightarrow> fresh_var\n      e[x::=y]) \\<bullet> eta_expand n (App e[x::=y] z)) =\n    Lam [fresh_var\n          e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y]))", "using \\<open>atom z \\<sharp> _\\<close>"], ["proof (prove)\nusing this:\n  atom z \\<sharp> (e, fresh_var e, x, y)\n\ngoal (2 subgoals):\n 1. fresh_var e[x::=y] \\<noteq> z \\<Longrightarrow>\n    atom (fresh_var e[x::=y]) \\<sharp> (eta_expand n (App e[x::=y] z), z)\n 2. Lam [fresh_var\n          e[x::=y]]. ((z \\<leftrightarrow> fresh_var\n      e[x::=y]) \\<bullet> eta_expand n (App e[x::=y] z)) =\n    Lam [fresh_var\n          e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y]))", "by (auto simp add: fresh_Pair eqvt_fresh_cong2[where f = eta_expand, OF eta_expand_eqvt] pure_fresh eta_expand_eqvt  flip_fresh_fresh subst_pres_fresh simp del: exp_assn.eq_iff)"], ["proof (state)\nthis:\n  Lam [z]. eta_expand n (App e[x::=y] z) =\n  Lam [fresh_var e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y]))\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "also"], ["proof (state)\nthis:\n  Lam [z]. eta_expand n (App e[x::=y] z) =\n  Lam [fresh_var e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y]))\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "have \"\\<dots> = eta_expand (Suc n) e[x::=y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Lam [fresh_var\n          e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y])) =\n    eta_expand (Suc n) e[x::=y]", "by simp"], ["proof (state)\nthis:\n  Lam [fresh_var\n        e[x::=y]]. eta_expand n (App e[x::=y] (fresh_var e[x::=y])) =\n  eta_expand (Suc n) e[x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>n e.\n       (\\<And>e.\n           (eta_expand n e)[x::=y] =\n           eta_expand n e[x::=y]) \\<Longrightarrow>\n       (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "finally"], ["proof (chain)\npicking this:\n  (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "show ?case"], ["proof (prove)\nusing this:\n  (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]\n\ngoal (1 subgoal):\n 1. (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]", "."], ["proof (state)\nthis:\n  (eta_expand (Suc n) e)[x::=y] = eta_expand (Suc n) e[x::=y]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma isLam_eta_expand:\n  \"isLam e \\<Longrightarrow> isLam (eta_expand n e)\" and \"n > 0 \\<Longrightarrow> isLam (eta_expand n e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (isLam e \\<Longrightarrow> isLam (eta_expand n e)) &&&\n    (0 < n \\<Longrightarrow> isLam (eta_expand n e))", "by (induction n) auto"], ["", "lemma isVal_eta_expand:\n  \"isVal e \\<Longrightarrow> isVal (eta_expand n e)\" and \"n > 0 \\<Longrightarrow> isVal (eta_expand n e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (isVal e \\<Longrightarrow> isVal (eta_expand n e)) &&&\n    (0 < n \\<Longrightarrow> isVal (eta_expand n e))", "by (induction n) auto"], ["", "end"]]}