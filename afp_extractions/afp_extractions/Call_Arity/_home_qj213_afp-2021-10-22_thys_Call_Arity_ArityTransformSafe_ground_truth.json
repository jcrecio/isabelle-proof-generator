{"file_name": "/home/qj213/afp-2021-10-22/thys/Call_Arity/ArityTransformSafe.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Call_Arity", "problem_names": ["lemma supp_transform: \"supp (transform a e) \\<subseteq> supp e\"", "lemma transform_alts_Nil[simp]: \"transform_alts [] S = S\"", "lemma Astack_transform_alts[simp]:\n    \"Astack (transform_alts as S) = Astack S\"", "lemma fresh_star_transform_alts[intro]: \"a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S\"", "lemma closed_consistent:\n    assumes \"fv e = ({}::var set)\"\n    shows \"consistent (\\<bottom>, 0, []) ([], e, [])\"", "lemma arity_tranform_safe:\n    fixes c c'\n    assumes \"c \\<Rightarrow>\\<^sup>* c'\" and \"\\<not> boring_step c'\" and \"heap_upds_ok_conf c\" and \"consistent (ae,a,as) c\"\n    shows \"\\<exists>ae' a' as'. consistent (ae',a',as') c' \\<and> a_transform (ae,a,as) c \\<Rightarrow>\\<^sup>* a_transform (ae',a',as') c'\""], "translations": [["", "lemma supp_transform: \"supp (transform a e) \\<subseteq> supp e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. supp (ccTransform a e) \\<subseteq> supp e", "by (induction rule: transform.induct)\n       (auto simp add: exp_assn.supp Let_supp dest!: subsetD[OF supp_map_transform] subsetD[OF supp_map_transform_step] )"], ["", "interpretation supp_bounded_transform transform"], ["proof (prove)\ngoal (1 subgoal):\n 1. supp_bounded_transform ccTransform", "by standard (auto simp add: fresh_def supp_transform)"], ["", "fun transform_alts :: \"Arity list \\<Rightarrow> stack \\<Rightarrow> stack\"\n    where \n      \"transform_alts _ [] = []\"\n    | \"transform_alts (a#as) (Alts e1 e2 # S) = (Alts (ccTransform a e1) (ccTransform a e2)) # transform_alts as S\"\n    | \"transform_alts as (x # S) = x # transform_alts as S\""], ["", "lemma transform_alts_Nil[simp]: \"transform_alts [] S = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. transform_alts [] S = S", "by (induction  S) auto"], ["", "lemma Astack_transform_alts[simp]:\n    \"Astack (transform_alts as S) = Astack S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Astack (transform_alts as S) = Astack S", "by (induction rule: transform_alts.induct) auto"], ["", "lemma fresh_star_transform_alts[intro]: \"a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<sharp>* S \\<Longrightarrow> a \\<sharp>* transform_alts as S", "by (induction as S  rule: transform_alts.induct) (auto simp add: fresh_star_Cons)"], ["", "fun a_transform :: \"astate \\<Rightarrow> conf \\<Rightarrow> conf\"\n  where \"a_transform (ae, a, as) (\\<Gamma>, e, S) =\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>), \n     ccTransform a e,\n     transform_alts as  S)\""], ["", "fun restr_conf :: \"var set \\<Rightarrow> conf \\<Rightarrow> conf\"\n    where \"restr_conf V (\\<Gamma>, e, S) = (restrictA V \\<Gamma>, e, restr_stack V S)\""], ["", "inductive consistent :: \"astate \\<Rightarrow> conf \\<Rightarrow> bool\" where\n    consistentI[intro!]: \n    \"a_consistent (ae, a, as) (\\<Gamma>, e, S)\n    \\<Longrightarrow> (\\<And> x. x \\<in> thunks \\<Gamma> \\<Longrightarrow>  ae x = up\\<cdot>0)\n    \\<Longrightarrow> consistent (ae, a, as) (\\<Gamma>, e, S)\""], ["", "inductive_cases consistentE[elim!]: \"consistent (ae, a, as) (\\<Gamma>, e, S)\""], ["", "lemma closed_consistent:\n    assumes \"fv e = ({}::var set)\"\n    shows \"consistent (\\<bottom>, 0, []) ([], e, [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (\\<bottom>, 0, []) ([], e, [])", "by (auto simp add: edom_empty_iff_bot closed_a_consistent[OF assms])"], ["", "lemma arity_tranform_safe:\n    fixes c c'\n    assumes \"c \\<Rightarrow>\\<^sup>* c'\" and \"\\<not> boring_step c'\" and \"heap_upds_ok_conf c\" and \"consistent (ae,a,as) c\"\n    shows \"\\<exists>ae' a' as'. consistent (ae',a',as') c' \\<and> a_transform (ae,a,as) c \\<Rightarrow>\\<^sup>* a_transform (ae',a',as') c'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') c' \\<and>\n       a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') c'", "using assms(1,2) heap_upds_ok_invariant assms(3-)"], ["proof (prove)\nusing this:\n  c \\<Rightarrow>\\<^sup>* c'\n  \\<not> boring_step c'\n  invariant (\\<Rightarrow>) heap_upds_ok_conf\n  heap_upds_ok_conf c\n  consistent (ae, a, as) c\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') c' \\<and>\n       a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') c'", "proof(induction c c' arbitrary: ae a as rule:step_invariant_induction)"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, a, as) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 10. \\<And>c c' c'' ae a as.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae a as.\n            consistent (ae, a, as) c \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c' \\<and>\n               a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c';\n         \\<And>ae a as.\n            consistent (ae, a, as) c' \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c'' \\<and>\n               a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c'';\n         consistent (ae, a, as) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' a' as'.\n                             consistent (ae', a', as') c'' \\<and>\n                             a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                             a_transform (ae', a', as') c''", "case (app\\<^sub>1 \\<Gamma> e x S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, a, as) (\\<Gamma>, App e x, S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, a, as) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 10. \\<And>c c' c'' ae a as.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae a as.\n            consistent (ae, a, as) c \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c' \\<and>\n               a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c';\n         \\<And>ae a as.\n            consistent (ae, a, as) c' \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c'' \\<and>\n               a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c'';\n         consistent (ae, a, as) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' a' as'.\n                             consistent (ae', a', as') c'' \\<and>\n                             a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                             a_transform (ae', a', as') c''", "from app\\<^sub>1"], ["proof (chain)\npicking this:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, a, as) (\\<Gamma>, App e x, S)", "have \"consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, App e x, S)\n  consistent (ae, a, as) (\\<Gamma>, App e x, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)", "by (auto intro: a_consistent_app\\<^sub>1)"], ["proof (state)\nthis:\n  consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, a, as) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 10. \\<And>c c' c'' ae a as.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae a as.\n            consistent (ae, a, as) c \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c' \\<and>\n               a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c';\n         \\<And>ae a as.\n            consistent (ae, a, as) c' \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c'' \\<and>\n               a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c'';\n         consistent (ae, a, as) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' a' as'.\n                             consistent (ae', a', as') c'' \\<and>\n                             a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                             a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, a, as) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 10. \\<And>c c' c'' ae a as.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae a as.\n            consistent (ae, a, as) c \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c' \\<and>\n               a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c';\n         \\<And>ae a as.\n            consistent (ae, a, as) c' \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c'' \\<and>\n               a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c'';\n         consistent (ae, a, as) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' a' as'.\n                             consistent (ae', a', as') c'' \\<and>\n                             a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                             a_transform (ae', a', as') c''", "have \"a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow> a_transform (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\n    a_transform (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)", "by simp rule"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\n  a_transform (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n\ngoal (10 subgoals):\n 1. \\<And>\\<Gamma> e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, App e x, S);\n        consistent (ae, a, as) (\\<Gamma>, App e x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e, Arg x # S)\n 2. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 6. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 7. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 8. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 9. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 10. \\<And>c c' c'' ae a as.\n        \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n         \\<And>ae a as.\n            consistent (ae, a, as) c \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c' \\<and>\n               a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c';\n         \\<And>ae a as.\n            consistent (ae, a, as) c' \\<Longrightarrow>\n            \\<exists>ae' a' as'.\n               consistent (ae', a', as') c'' \\<and>\n               a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n               a_transform (ae', a', as') c'';\n         consistent (ae, a, as) c\\<rbrakk>\n        \\<Longrightarrow> \\<exists>ae' a' as'.\n                             consistent (ae', a', as') c'' \\<and>\n                             a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                             a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n  a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\n  a_transform (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n  a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\n  a_transform (ae, inc\\<cdot>a, as) (\\<Gamma>, e, Arg x # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (\\<Gamma>, e, Arg x # S) \\<and>\n       a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (\\<Gamma>, e, Arg x # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (\\<Gamma>, e, Arg x # S) \\<and>\n     a_transform (ae, a, as) (\\<Gamma>, App e x, S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (\\<Gamma>, e, Arg x # S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (app\\<^sub>2 \\<Gamma> y e x S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S)\n  consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)", "using app\\<^sub>2"], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S)\n  consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)", "by (auto 4 3 intro: a_consistent_app\\<^sub>2)"], ["proof (state)\nthis:\n  consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_transform (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow> a_transform (ae, pred \\<cdot> a, as) (\\<Gamma>, e[y::=x], S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\n    a_transform (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)", "by (simp add: subst_transform[symmetric]) rule"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\n  a_transform (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n\ngoal (9 subgoals):\n 1. \\<And>\\<Gamma> y e x S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Lam [y]. e, Arg x # S);\n        consistent (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Lam [y]. e,\n                              Arg x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, e[y::=x], S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 5. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 6. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 7. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 8. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 9. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n  a_transform (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\n  a_transform (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n  a_transform (ae, a, as) (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\n  a_transform (ae, pred\\<cdot>a, as) (\\<Gamma>, e[y::=x], S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (\\<Gamma>, e[y::=x], S) \\<and>\n       a_transform (ae, a, as)\n        (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (\\<Gamma>, e[y::=x], S)", "by (blast  del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (\\<Gamma>, e[y::=x], S) \\<and>\n     a_transform (ae, a, as)\n      (\\<Gamma>, Lam [y]. e, Arg x # S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (\\<Gamma>, e[y::=x], S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (thunk \\<Gamma> x e S)"], ["proof (state)\nthis:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"x \\<in> thunks \\<Gamma>\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<in> thunks \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence [simp]: \"x \\<in> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma>", "by (rule subsetD[OF thunks_domA])"], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from \\<open>heap_upds_ok_conf (\\<Gamma>, Var x, S)\\<close>"], ["proof (chain)\npicking this:\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)", "have \"x \\<notin> upds S\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<notin> upds S", "by (auto dest!: heap_upds_okE)"], ["proof (state)\nthis:\n  x \\<notin> upds S\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"x \\<in> edom ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "using thunk"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "by auto"], ["proof (state)\nthis:\n  x \\<in> edom ae\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"ae x = up\\<cdot>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0", "using thunk \\<open>x \\<in> thunks \\<Gamma>\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0", "by (auto)"], ["proof (state)\nthis:\n  ae x = up\\<cdot>0\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "using thunk \\<open>ae x = up\\<cdot>0\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "by (auto intro!: a_consistent_thunk_0 simp del: restr_delete)"], ["proof (state)\nthis:\n  a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "using thunk \\<open>ae x = up\\<cdot>0\\<close>"], ["proof (prove)\nusing this:\n  a_consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n  map_of \\<Gamma> x = Some e\n  \\<not> isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "by (auto simp add:  restr_delete_twist)"], ["proof (state)\nthis:\n  consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from  \\<open>map_of \\<Gamma> x = Some e\\<close> \\<open>ae x = up\\<cdot>0\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>0", "have \"map_of (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)) x = Some (transform 0 e)\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>0\n\ngoal (1 subgoal):\n 1. map_of\n     (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n     x =\n    Some (ccTransform 0 e)", "by (simp add: map_of_map_transform)"], ["proof (state)\nthis:\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (ccTransform 0 e)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "with \\<open>\\<not> isVal e\\<close>"], ["proof (chain)\npicking this:\n  \\<not> isVal e\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (ccTransform 0 e)", "have \"a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow> a_transform (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  \\<not> isVal e\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (ccTransform 0 e)\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\n    a_transform (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "by (auto simp add: map_transform_delete restr_delete_twist intro!: step.intros  simp del: restr_delete)"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\n  a_transform (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (8 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; \\<not> isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (delete x \\<Gamma>, e, Upd x # S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 4. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 5. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 6. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 7. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 8. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\n  a_transform (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\n  a_transform (ae, 0, as) (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (delete x \\<Gamma>, e, Upd x # S) \\<and>\n       a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (delete x \\<Gamma>, e, Upd x # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (delete x \\<Gamma>, e, Upd x # S) \\<and>\n     a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (delete x \\<Gamma>, e, Upd x # S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (lamvar \\<Gamma> x e S)"], ["proof (state)\nthis:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from lamvar(1)"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e", "have [simp]: \"x \\<in> domA \\<Gamma>\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n\ngoal (1 subgoal):\n 1. x \\<in> domA \\<Gamma>", "by (metis domI dom_map_of_conv_domA)"], ["proof (state)\nthis:\n  x \\<in> domA \\<Gamma>\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"up\\<cdot>a \\<sqsubseteq> (Aexp (Var x)\\<cdot>a f|` (domA \\<Gamma> \\<union> upds S)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. up\\<cdot>a \\<sqsubseteq>\n    (\\<A>\\<^bsub>a\\<^esub> (Var x) f|` (domA \\<Gamma> \\<union> upds S)) x", "by (simp) (rule Aexp_Var)"], ["proof (state)\nthis:\n  up\\<cdot>a \\<sqsubseteq>\n  (\\<A>\\<^bsub>a\\<^esub> (Var x) f|` (domA \\<Gamma> \\<union> upds S)) x\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "also"], ["proof (state)\nthis:\n  up\\<cdot>a \\<sqsubseteq>\n  (\\<A>\\<^bsub>a\\<^esub> (Var x) f|` (domA \\<Gamma> \\<union> upds S)) x\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from lamvar"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)", "have \"Aexp (Var x)\\<cdot>a f|` (domA \\<Gamma> \\<union> upds S) \\<sqsubseteq> ae\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. \\<A>\\<^bsub>a\\<^esub> (Var x) f|`\n    (domA \\<Gamma> \\<union> upds S) \\<sqsubseteq>\n    ae", "by (auto simp add: join_below_iff env_restr_join a_consistent.simps)"], ["proof (state)\nthis:\n  \\<A>\\<^bsub>a\\<^esub> (Var x) f|`\n  (domA \\<Gamma> \\<union> upds S) \\<sqsubseteq>\n  ae\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "finally"], ["proof (chain)\npicking this:\n  cont (\\<lambda>a. a x) \\<Longrightarrow> up\\<cdot>a \\<sqsubseteq> ae x", "obtain u where \"ae x = up\\<cdot>u\""], ["proof (prove)\nusing this:\n  cont (\\<lambda>a. a x) \\<Longrightarrow> up\\<cdot>a \\<sqsubseteq> ae x\n\ngoal (1 subgoal):\n 1. (\\<And>u. ae x = up\\<cdot>u \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases \"ae x\") (auto simp add: edom_def)"], ["proof (state)\nthis:\n  ae x = up\\<cdot>u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"x \\<in> edom ae\""], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>u\n\ngoal (1 subgoal):\n 1. x \\<in> edom ae", "by (auto simp add: edomIff)"], ["proof (state)\nthis:\n  x \\<in> edom ae\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_consistent (ae, u, as) ((x,e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "using lamvar \\<open>ae x = up\\<cdot>u\\<close>"], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n  ae x = up\\<cdot>u\n\ngoal (1 subgoal):\n 1. a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "by (auto intro!: a_consistent_lamvar simp del: restr_delete)"], ["proof (state)\nthis:\n  a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "using lamvar"], ["proof (prove)\nusing this:\n  a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n  map_of \\<Gamma> x = Some e\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, Var x, S)\n  consistent (ae, a, as) (\\<Gamma>, Var x, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "by (auto simp add:  thunks_Cons restr_delete_twist elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from \\<open>a_consistent _ _\\<close>"], ["proof (chain)\npicking this:\n  a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "have \"Astack (transform_alts as S) \\<sqsubseteq> u\""], ["proof (prove)\nusing this:\n  a_consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. Astack (transform_alts as S) \\<sqsubseteq> u", "by (auto elim: a_consistent_stackD)"], ["proof (state)\nthis:\n  Astack (transform_alts as S) \\<sqsubseteq> u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "{"], ["proof (state)\nthis:\n  Astack (transform_alts as S) \\<sqsubseteq> u\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from \\<open>isVal e\\<close>"], ["proof (chain)\npicking this:\n  isVal e", "have \"isVal (transform u e)\""], ["proof (prove)\nusing this:\n  isVal e\n\ngoal (1 subgoal):\n 1. isVal (ccTransform u e)", "by simp"], ["proof (state)\nthis:\n  isVal (ccTransform u e)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"isVal (Aeta_expand u (transform u e))\""], ["proof (prove)\nusing this:\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. isVal (Aeta_expand u (ccTransform u e))", "by (rule isVal_Aeta_expand)"], ["proof (state)\nthis:\n  isVal (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  isVal (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from  \\<open>map_of \\<Gamma> x = Some e\\<close>  \\<open>ae x = up \\<cdot> u\\<close>  \\<open>isVal (transform u e)\\<close>"], ["proof (chain)\npicking this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  isVal (ccTransform u e)", "have \"map_of (map_transform Aeta_expand ae (map_transform transform ae \\<Gamma>)) x = Some (Aeta_expand u (transform u e))\""], ["proof (prove)\nusing this:\n  map_of \\<Gamma> x = Some e\n  ae x = up\\<cdot>u\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. map_of\n     (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n     x =\n    Some (Aeta_expand u (ccTransform u e))", "by (simp add: map_of_map_transform)"], ["proof (state)\nthis:\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  isVal (Aeta_expand u (ccTransform u e))\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (Aeta_expand u (ccTransform u e))", "have \"a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n          ((x, Aeta_expand u (transform u e)) # delete x (map_transform Aeta_expand ae (map_transform transform ae \\<Gamma>)), Aeta_expand u (transform u e), transform_alts as S)\""], ["proof (prove)\nusing this:\n  isVal (Aeta_expand u (ccTransform u e))\n  map_of\n   (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>))\n   x =\n  Some (Aeta_expand u (ccTransform u e))\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n    ((x, Aeta_expand u (ccTransform u e)) #\n     delete x\n      (map_transform Aeta_expand ae\n        (map_transform ccTransform ae \\<Gamma>)),\n     Aeta_expand u (ccTransform u e), transform_alts as S)", "by (auto intro: lambda_var simp del: restr_delete)"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  ((x, Aeta_expand u (ccTransform u e)) #\n   delete x\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "also"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  ((x, Aeta_expand u (ccTransform u e)) #\n   delete x\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"\\<dots> = ((map_transform Aeta_expand ae (map_transform transform ae ((x,e) # delete x \\<Gamma>))), Aeta_expand u (transform u e), transform_alts as S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((x, Aeta_expand u (ccTransform u e)) #\n     delete x\n      (map_transform Aeta_expand ae\n        (map_transform ccTransform ae \\<Gamma>)),\n     Aeta_expand u (ccTransform u e), transform_alts as S) =\n    (map_transform Aeta_expand ae\n      (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n     Aeta_expand u (ccTransform u e), transform_alts as S)", "using \\<open>ae x = up \\<cdot> u\\<close> \\<open>isVal (transform u e)\\<close>"], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>u\n  isVal (ccTransform u e)\n\ngoal (1 subgoal):\n 1. ((x, Aeta_expand u (ccTransform u e)) #\n     delete x\n      (map_transform Aeta_expand ae\n        (map_transform ccTransform ae \\<Gamma>)),\n     Aeta_expand u (ccTransform u e), transform_alts as S) =\n    (map_transform Aeta_expand ae\n      (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n     Aeta_expand u (ccTransform u e), transform_alts as S)", "by (simp add: map_transform_Cons map_transform_delete  del: restr_delete)"], ["proof (state)\nthis:\n  ((x, Aeta_expand u (ccTransform u e)) #\n   delete x\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S) =\n  (map_transform Aeta_expand ae\n    (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "also(subst[rotated])"], ["proof (state)\nthis:\n  ((x, Aeta_expand u (ccTransform u e)) #\n   delete x\n    (map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S) =\n  (map_transform Aeta_expand ae\n    (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n   Aeta_expand u (ccTransform u e), transform_alts as S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"\\<dots> \\<Rightarrow>\\<^sup>* a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map_transform Aeta_expand ae\n      (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n     Aeta_expand u (ccTransform u e),\n     transform_alts as S) \\<Rightarrow>\\<^sup>*\n    a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "by (simp add: restr_delete_twist) (rule Aeta_expand_safe[OF \\<open>Astack _ \\<sqsubseteq> u\\<close>])"], ["proof (state)\nthis:\n  (map_transform Aeta_expand ae\n    (map_transform ccTransform ae ((x, e) # delete x \\<Gamma>)),\n   Aeta_expand u (ccTransform u e),\n   transform_alts as S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "finally(rtranclp_trans)"], ["proof (chain)\npicking this:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "have \"a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>* a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n    a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "."], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "}"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (7 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>map_of \\<Gamma> x = Some e; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, Var x, S);\n        consistent (ae, a, as) (\\<Gamma>, Var x, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # delete x \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 3. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 4. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 5. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 6. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 7. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n  a_transform (ae, u, as) ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n       a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') ((x, e) # delete x \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') ((x, e) # delete x \\<Gamma>, e, S) \\<and>\n     a_transform (ae, a, as) (\\<Gamma>, Var x, S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') ((x, e) # delete x \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (var\\<^sub>2 \\<Gamma> x e S)"], ["proof (state)\nthis:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from var\\<^sub>2"], ["proof (chain)\npicking this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)", "have \"a_consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\""], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from a_consistent_UpdD[OF this]"], ["proof (chain)\npicking this:\n  ae x = up\\<cdot>0\n  a = 0", "have \"ae x = up\\<cdot>0\" and \"a = 0\""], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n  a = 0\n\ngoal (1 subgoal):\n 1. ae x = up\\<cdot>0 &&& a = 0", "."], ["proof (state)\nthis:\n  ae x = up\\<cdot>0\n  a = 0\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)", "using var\\<^sub>2"], ["proof (prove)\nusing this:\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)", "by (auto intro!: a_consistent_var\\<^sub>2)"], ["proof (state)\nthis:\n  a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)", "using var\\<^sub>2 \\<open>a = 0\\<close>"], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as) ((x, e) # \\<Gamma>, e, S)\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n  a = 0\n\ngoal (1 subgoal):\n 1. consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)", "by (auto simp add: thunks_Cons elim: below_trans)"], ["proof (state)\nthis:\n  consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow> a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\n    a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)", "using \\<open>ae x = up\\<cdot>0\\<close> \\<open>a = 0\\<close> var\\<^sub>2"], ["proof (prove)\nusing this:\n  ae x = up\\<cdot>0\n  a = 0\n  x \\<notin> domA \\<Gamma>\n  isVal e\n  heap_upds_ok_conf (\\<Gamma>, e, Upd x # S)\n  consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\n    a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)", "by (auto intro!: step.intros simp add: map_transform_Cons)"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\n  a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (6 subgoals):\n 1. \\<And>\\<Gamma> x e S ae a as.\n       \\<lbrakk>x \\<notin> domA \\<Gamma>; isVal e;\n        heap_upds_ok_conf (\\<Gamma>, e, Upd x # S);\n        consistent (ae, a, as) (\\<Gamma>, e, Upd x # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             ((x, e) # \\<Gamma>, e, S)\n 2. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 3. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 4. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 5. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 6. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\n  a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\n  a_transform (ae, 0, as) ((x, e) # \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') ((x, e) # \\<Gamma>, e, S) \\<and>\n       a_transform (ae, a, as)\n        (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') ((x, e) # \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') ((x, e) # \\<Gamma>, e, S) \\<and>\n     a_transform (ae, a, as) (\\<Gamma>, e, Upd x # S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') ((x, e) # \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (let\\<^sub>1 \\<Delta> \\<Gamma> e S)"], ["proof (state)\nthis:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "let ?ae = \"Aheap \\<Delta> e\\<cdot>a\""], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"domA \\<Delta> \\<inter> upds S = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<inter> upds S = {}", "using fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. domA \\<Delta> \\<inter> upds S = {}", "by (auto dest: subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence *: \"\\<And> x. x \\<in> upds S \\<Longrightarrow> x \\<notin> edom ?ae\""], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> upds S = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> upds S \\<Longrightarrow>\n       x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)", "by (auto simp add:  dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  ?x \\<in> upds S \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have restr_stack_simp2: \"restr_stack (edom (?ae \\<squnion> ae)) S = restr_stack (edom ae) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n    restr_stack (edom ae) S", "by (auto intro: restr_stack_cong dest!: *)"], ["proof (state)\nthis:\n  restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n  restr_stack (edom ae) S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "by (auto dest!: a_consistent_edom_subsetD)"], ["proof (state)\nthis:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from subsetD[OF this] fresh_distinct[OF let\\<^sub>1(1)] fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (chain)\npicking this:\n  ?c \\<in> edom ae \\<Longrightarrow> ?c \\<in> domA \\<Gamma> \\<union> upds S\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}", "have \"edom ae \\<inter> domA \\<Delta> = {}\""], ["proof (prove)\nusing this:\n  ?c \\<in> edom ae \\<Longrightarrow> ?c \\<in> domA \\<Gamma> \\<union> upds S\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. edom ae \\<inter> domA \\<Delta> = {}", "by (auto dest: subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "{"], ["proof (state)\nthis:\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "{"], ["proof (state)\nthis:\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "fix x e'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "assume \"x \\<in> thunks \\<Gamma>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Gamma>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "with let\\<^sub>1"], ["proof (chain)\npicking this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  x \\<in> thunks \\<Gamma>", "have \"(?ae \\<squnion> ae) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  x \\<in> thunks \\<Gamma>\n\ngoal (1 subgoal):\n 1. (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0", "by auto"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> thunks \\<Gamma> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> thunks \\<Gamma> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "{"], ["proof (state)\nthis:\n  ?x2 \\<in> thunks \\<Gamma> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "fix x e'"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "assume \"x \\<in> thunks \\<Delta>\""], ["proof (state)\nthis:\n  x \\<in> thunks \\<Delta>\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"(?ae \\<squnion> ae) x = up\\<cdot>0\""], ["proof (prove)\nusing this:\n  x \\<in> thunks \\<Delta>\n\ngoal (1 subgoal):\n 1. (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0", "by (auto simp add: Aheap_heap3)"], ["proof (state)\nthis:\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) x = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "}"], ["proof (state)\nthis:\n  ?x2 \\<in> thunks \\<Delta> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  ?x2 \\<in> thunks \\<Delta> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_consistent (ae, a, as) (\\<Gamma>, Let \\<Delta> e, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)", "using let\\<^sub>1"], ["proof (prove)\nusing this:\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"a_consistent (?ae \\<squnion> ae, a, as) (\\<Delta> @ \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n\ngoal (1 subgoal):\n 1. a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ \\<Gamma>, e, S)", "using let\\<^sub>1(1,2) \\<open>edom ae \\<inter> domA \\<Delta> = {}\\<close>"], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n  edom ae \\<inter> domA \\<Delta> = {}\n\ngoal (1 subgoal):\n 1. a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ \\<Gamma>, e, S)", "by (auto intro!:  a_consistent_let simp del: join_comm)"], ["proof (state)\nthis:\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  ?x2 \\<in> thunks \\<Gamma> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n  ?x2 \\<in> thunks \\<Delta> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)", "have \"consistent (?ae \\<squnion> ae, a, as) (\\<Delta> @ \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  ?x2 \\<in> thunks \\<Gamma> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n  ?x2 \\<in> thunks \\<Delta> \\<Longrightarrow>\n  (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae) ?x2 = up\\<cdot>0\n  a_consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ \\<Gamma>, e, S)", "by auto"], ["proof (state)\nthis:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "}"], ["proof (state)\nthis:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "{"], ["proof (state)\nthis:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"\\<And> x. x \\<in> domA \\<Gamma> \\<Longrightarrow> x \\<notin> edom ?ae\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> domA \\<Gamma> \\<Longrightarrow>\n       x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)", "using fresh_distinct[OF let\\<^sub>1(1)]"], ["proof (prove)\nusing this:\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> domA \\<Gamma> \\<Longrightarrow>\n       x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)", "by (auto dest!: subsetD[OF edom_Aheap])"], ["proof (state)\nthis:\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"map_transform Aeta_expand (?ae \\<squnion> ae) (map_transform transform (?ae \\<squnion> ae) \\<Gamma>)\n         = map_transform Aeta_expand ae (map_transform transform ae \\<Gamma>)\""], ["proof (prove)\nusing this:\n  ?x \\<in> domA \\<Gamma> \\<Longrightarrow>\n  ?x \\<notin> edom (Aheap \\<Delta> e\\<cdot>a)\n\ngoal (1 subgoal):\n 1. map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n       \\<Gamma>) =\n    map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)", "by (auto intro!: map_transform_cong restrictA_cong simp add: edomIff)"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Gamma>) =\n  map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Gamma>) =\n  map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from \\<open>edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\\<close>"], ["proof (chain)\npicking this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S", "have  \"\\<And> x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae\""], ["proof (prove)\nusing this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae", "using fresh_distinct[OF let\\<^sub>1(1)] fresh_distinct_fv[OF let\\<^sub>1(2)]"], ["proof (prove)\nusing this:\n  edom ae \\<subseteq> domA \\<Gamma> \\<union> upds S\n  domA \\<Delta> \\<inter> domA \\<Gamma> = {}\n  domA \\<Delta> \\<inter> fv S = {}\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> domA \\<Delta> \\<Longrightarrow> x \\<notin> edom ae", "by (auto dest!:  subsetD[OF ups_fv_subset])"], ["proof (state)\nthis:\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ae\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"map_transform Aeta_expand (?ae \\<squnion> ae) (map_transform transform (?ae \\<squnion> ae) \\<Delta>)\n         = map_transform Aeta_expand ?ae (map_transform transform ?ae \\<Delta>)\""], ["proof (prove)\nusing this:\n  ?x \\<in> domA \\<Delta> \\<Longrightarrow> ?x \\<notin> edom ae\n\ngoal (1 subgoal):\n 1. map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n       \\<Delta>) =\n    map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n     (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>)", "by (auto intro!: map_transform_cong restrictA_cong simp add: edomIff)"], ["proof (state)\nthis:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Delta>) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Gamma>) =\n  map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Delta>) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>)", "have \"a_transform (ae, a, as) (\\<Gamma>, Let \\<Delta> e, S) \\<Rightarrow> a_transform (?ae \\<squnion> ae,  a, as) (\\<Delta> @ \\<Gamma>, e, S)\""], ["proof (prove)\nusing this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Gamma>) =\n  map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Delta>) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>)\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as)\n     (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n    a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ \\<Gamma>, e, S)", "using restr_stack_simp2 let\\<^sub>1(1,2)"], ["proof (prove)\nusing this:\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Gamma>) =\n  map_transform Aeta_expand ae (map_transform ccTransform ae \\<Gamma>)\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)\n     \\<Delta>) =\n  map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n   (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>)\n  restr_stack (edom (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae)) S =\n  restr_stack (edom ae) S\n  atom ` domA \\<Delta> \\<sharp>* \\<Gamma>\n  atom ` domA \\<Delta> \\<sharp>* S\n\ngoal (1 subgoal):\n 1. a_transform (ae, a, as)\n     (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n    a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n     (\\<Delta> @ \\<Gamma>, e, S)", "apply (auto simp add: map_transform_append restrictA_append  restr_stack_simp2[simplified] map_transform_restrA)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a) \\<Gamma>) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae \\<Gamma>);\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S\\<rbrakk>\n    \\<Longrightarrow> (map_transform Aeta_expand ae\n                        (map_transform ccTransform ae \\<Gamma>),\n                       Terms.Let\n                        (map_transform Aeta_expand\n                          (Aheap \\<Delta> e\\<cdot>a)\n                          (map_transform ccTransform\n                            (Aheap \\<Delta> e\\<cdot>a) \\<Delta>))\n                        (ccTransform a e),\n                       transform_alts as S) \\<Rightarrow>\n                      (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                        (map_transform ccTransform\n                          (Aheap \\<Delta> e\\<cdot>a) \\<Delta>) @\n                       map_transform Aeta_expand ae\n                        (map_transform ccTransform ae \\<Gamma>),\n                       ccTransform a e, transform_alts as S)", "apply (rule step.let\\<^sub>1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a) \\<Gamma>) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae \\<Gamma>);\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S\\<rbrakk>\n    \\<Longrightarrow> atom `\n                      domA\n                       (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                         (map_transform ccTransform\n                           (Aheap \\<Delta> e\\<cdot>a)\n                           \\<Delta>)) \\<sharp>* map_transform Aeta_expand ae\n           (map_transform ccTransform ae \\<Gamma>)\n 2. \\<lbrakk>map_transform Aeta_expand\n              (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n              (map_transform ccTransform\n                (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a) \\<Gamma>) =\n             map_transform Aeta_expand ae\n              (map_transform ccTransform ae \\<Gamma>);\n     map_transform Aeta_expand (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (ae \\<squnion> Aheap \\<Delta> e\\<cdot>a)\n        \\<Delta>) =\n     map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n      (map_transform ccTransform (Aheap \\<Delta> e\\<cdot>a) \\<Delta>);\n     atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n     atom ` domA \\<Delta> \\<sharp>* S\\<rbrakk>\n    \\<Longrightarrow> atom `\n                      domA\n                       (map_transform Aeta_expand (Aheap \\<Delta> e\\<cdot>a)\n                         (map_transform ccTransform\n                           (Aheap \\<Delta> e\\<cdot>a)\n                           \\<Delta>)) \\<sharp>* transform_alts as S", "apply (auto dest: subsetD[OF edom_Aheap])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n  a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "}"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n  a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (5 subgoals):\n 1. \\<And>\\<Delta> \\<Gamma> e S ae a as.\n       \\<lbrakk>atom ` domA \\<Delta> \\<sharp>* \\<Gamma>;\n        atom ` domA \\<Delta> \\<sharp>* S;\n        heap_upds_ok_conf (\\<Gamma>, Terms.Let \\<Delta> e, S);\n        consistent (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Terms.Let \\<Delta> e,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Delta> @ \\<Gamma>, e, S)\n 2. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 3. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 4. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 5. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n  a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n  a_transform (ae, a, as) (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\n  a_transform (Aheap \\<Delta> e\\<cdot>a \\<squnion> ae, a, as)\n   (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n       a_transform (ae, a, as)\n        (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (\\<Delta> @ \\<Gamma>, e, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (\\<Delta> @ \\<Gamma>, e, S) \\<and>\n     a_transform (ae, a, as)\n      (\\<Gamma>, Terms.Let \\<Delta> e, S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (\\<Delta> @ \\<Gamma>, e, S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (if\\<^sub>1 \\<Gamma> scrut e1 e2 S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S)\n  consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"consistent (ae, 0, a#as) (\\<Gamma>, scrut, Alts e1 e2 # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)", "using if\\<^sub>1"], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S)\n  consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\n\ngoal (1 subgoal):\n 1. consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (auto dest: a_consistent_if\\<^sub>1)"], ["proof (state)\nthis:\n  consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_transform (ae,  a, as) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow> a_transform (ae, 0, a#as) (\\<Gamma>, scrut, Alts e1 e2 # S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\n    a_transform (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (auto intro: step.intros)"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\n  a_transform (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (4 subgoals):\n 1. \\<And>\\<Gamma> scrut e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, scrut ? e1 : e2, S);\n        consistent (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, scrut ? e1 : e2,\n                              S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, scrut, Alts e1 e2 # S)\n 2. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 3. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 4. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n  a_transform (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\n  a_transform (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n  a_transform (ae, a, as) (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\n  a_transform (ae, 0, a # as) (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n       a_transform (ae, a, as)\n        (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (\\<Gamma>, scrut, Alts e1 e2 # S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (\\<Gamma>, scrut, Alts e1 e2 # S) \\<and>\n     a_transform (ae, a, as)\n      (\\<Gamma>, scrut ? e1 : e2, S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (\\<Gamma>, scrut, Alts e1 e2 # S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (if\\<^sub>2 \\<Gamma> b e1 e2 S)"], ["proof (state)\nthis:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "hence \"a_consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\""], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. a_consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)", "by auto"], ["proof (state)\nthis:\n  a_consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "then"], ["proof (chain)\npicking this:\n  a_consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)", "obtain a' as' where [simp]: \"as = a' # as'\" \"a = 0\""], ["proof (prove)\nusing this:\n  a_consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. (\\<And>a' as'.\n        \\<lbrakk>as = a' # as'; a = 0\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (rule a_consistent_alts_on_stack)"], ["proof (state)\nthis:\n  as = a' # as'\n  a = 0\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)", "using if\\<^sub>2"], ["proof (prove)\nusing this:\n  heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S)\n  consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\n\ngoal (1 subgoal):\n 1. consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)", "by (auto dest!: a_consistent_if\\<^sub>2)"], ["proof (state)\nthis:\n  consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "moreover"], ["proof (state)\nthis:\n  consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "have \"a_transform (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow> a_transform (ae,  a', as') (\\<Gamma>, if b then e1 else e2, S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a_transform (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\n    a_transform (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)", "by (auto intro: step.if\\<^sub>2[where b = True, simplified] step.if\\<^sub>2[where b = False, simplified])"], ["proof (state)\nthis:\n  a_transform (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\n  a_transform (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (3 subgoals):\n 1. \\<And>\\<Gamma> b e1 e2 S ae a as.\n       \\<lbrakk>heap_upds_ok_conf (\\<Gamma>, Bool b, Alts e1 e2 # S);\n        consistent (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S) \\<and>\n                            a_transform (ae, a, as)\n                             (\\<Gamma>, Bool b,\n                              Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as')\n                             (\\<Gamma>, if b then e1 else e2, S)\n 2. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 3. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "ultimately"], ["proof (chain)\npicking this:\n  consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n  a_transform (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\n  a_transform (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n  a_transform (ae, a, as) (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\n  a_transform (ae, a', as') (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') (\\<Gamma>, if b then e1 else e2, S) \\<and>\n       a_transform (ae, a, as)\n        (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') (\\<Gamma>, if b then e1 else e2, S)", "by (blast del: consistentI consistentE)"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') (\\<Gamma>, if b then e1 else e2, S) \\<and>\n     a_transform (ae, a, as)\n      (\\<Gamma>, Bool b, Alts e1 e2 # S) \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') (\\<Gamma>, if b then e1 else e2, S)\n\ngoal (2 subgoals):\n 1. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 2. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 2. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case refl"], ["proof (state)\nthis:\n  consistent (ae, a, as) c_\n\ngoal (2 subgoals):\n 1. \\<And>c ae a as.\n       consistent (ae, a, as) c \\<Longrightarrow>\n       \\<exists>ae' a' as'.\n          consistent (ae', a', as') c \\<and>\n          a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n          a_transform (ae', a', as') c\n 2. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "thus ?case"], ["proof (prove)\nusing this:\n  consistent (ae, a, as) c_\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') c_ \\<and>\n       a_transform (ae, a, as) c_ \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') c_", "by auto"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c_ \\<and>\n     a_transform (ae, a, as) c_ \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c_\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "case (trans c c' c'')"], ["proof (state)\nthis:\n  c \\<Rightarrow>\\<^sup>* c'\n  c' \\<Rightarrow>\\<^sup>* c''\n  consistent (?ae, ?a, ?as) c \\<Longrightarrow>\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c' \\<and>\n     a_transform (?ae, ?a, ?as) c \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c'\n  consistent (?ae, ?a, ?as) c' \\<Longrightarrow>\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c'' \\<and>\n     a_transform (?ae, ?a, ?as) c' \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c''\n  consistent (ae, a, as) c\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from trans(3)[OF trans(5)]"], ["proof (chain)\npicking this:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c' \\<and>\n     a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c'", "obtain ae' a' as' where \"consistent (ae', a', as') c'\" and *: \"a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>* a_transform (ae', a', as') c'\""], ["proof (prove)\nusing this:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c' \\<and>\n     a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c'\n\ngoal (1 subgoal):\n 1. (\\<And>ae' a' as'.\n        \\<lbrakk>consistent (ae', a', as') c';\n         a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n         a_transform (ae', a', as') c'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  consistent (ae', a', as') c'\n  a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n  a_transform (ae', a', as') c'\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from trans(4)[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>ae'a a'a as'a.\n     consistent (ae'a, a'a, as'a) c'' \\<and>\n     a_transform (ae', a', as') c' \\<Rightarrow>\\<^sup>*\n     a_transform (ae'a, a'a, as'a) c''", "obtain ae'' a'' as'' where \"consistent (ae'', a'', as'') c''\" and **: \"a_transform (ae', a', as') c' \\<Rightarrow>\\<^sup>* a_transform (ae'', a'', as'') c''\""], ["proof (prove)\nusing this:\n  \\<exists>ae'a a'a as'a.\n     consistent (ae'a, a'a, as'a) c'' \\<and>\n     a_transform (ae', a', as') c' \\<Rightarrow>\\<^sup>*\n     a_transform (ae'a, a'a, as'a) c''\n\ngoal (1 subgoal):\n 1. (\\<And>ae'' a'' as''.\n        \\<lbrakk>consistent (ae'', a'', as'') c'';\n         a_transform (ae', a', as') c' \\<Rightarrow>\\<^sup>*\n         a_transform (ae'', a'', as'') c''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  consistent (ae'', a'', as'') c''\n  a_transform (ae', a', as') c' \\<Rightarrow>\\<^sup>*\n  a_transform (ae'', a'', as'') c''\n\ngoal (1 subgoal):\n 1. \\<And>c c' c'' ae a as.\n       \\<lbrakk>c \\<Rightarrow>\\<^sup>* c'; c' \\<Rightarrow>\\<^sup>* c'';\n        \\<And>ae a as.\n           consistent (ae, a, as) c \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c' \\<and>\n              a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c';\n        \\<And>ae a as.\n           consistent (ae, a, as) c' \\<Longrightarrow>\n           \\<exists>ae' a' as'.\n              consistent (ae', a', as') c'' \\<and>\n              a_transform (ae, a, as) c' \\<Rightarrow>\\<^sup>*\n              a_transform (ae', a', as') c'';\n        consistent (ae, a, as) c\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ae' a' as'.\n                            consistent (ae', a', as') c'' \\<and>\n                            a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n                            a_transform (ae', a', as') c''", "from this(1) rtranclp_trans[OF * **]"], ["proof (chain)\npicking this:\n  consistent (ae'', a'', as'') c''\n  a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n  a_transform (ae'', a'', as'') c''", "show ?case"], ["proof (prove)\nusing this:\n  consistent (ae'', a'', as'') c''\n  a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n  a_transform (ae'', a'', as'') c''\n\ngoal (1 subgoal):\n 1. \\<exists>ae' a' as'.\n       consistent (ae', a', as') c'' \\<and>\n       a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n       a_transform (ae', a', as') c''", "by blast"], ["proof (state)\nthis:\n  \\<exists>ae' a' as'.\n     consistent (ae', a', as') c'' \\<and>\n     a_transform (ae, a, as) c \\<Rightarrow>\\<^sup>*\n     a_transform (ae', a', as') c''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}